
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e80  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001220  08015120  08015120  00016120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016340  08016340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016348  08016348  00017348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801634c  0801634c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  08016350  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020ac  240002d0  08016620  000182d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400237c  08016620  0001837c  2**0
                  ALLOC
  9 ._D3_Area     00000008  38000000  38000000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 ._DTCM_Area   00000010  20000000  20000000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  0001a008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003195d  00000000  00000000  0001a036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006912  00000000  00000000  0004b993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002208  00000000  00000000  000522a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019b8  00000000  00000000  000544b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040c06  00000000  00000000  00055e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033345  00000000  00000000  00096a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f30f  00000000  00000000  000c9db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  002490c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d68  00000000  00000000  0024917c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00252ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  00252f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00253159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015108 	.word	0x08015108

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	08015108 	.word	0x08015108

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	@ 0x28
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	463b      	mov	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	615a      	str	r2, [r3, #20]
 80003b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003b6:	4a3e      	ldr	r2, [pc, #248]	@ (80004b0 <MX_ADC1_Init+0x120>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ba:	4b3c      	ldr	r3, [pc, #240]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003c2:	4b3a      	ldr	r3, [pc, #232]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003c8:	4b38      	ldr	r3, [pc, #224]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003ce:	4b37      	ldr	r3, [pc, #220]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003d0:	2208      	movs	r2, #8
 80003d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d4:	4b35      	ldr	r3, [pc, #212]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003da:	4b34      	ldr	r3, [pc, #208]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80003e0:	4b32      	ldr	r3, [pc, #200]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b31      	ldr	r3, [pc, #196]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b2f      	ldr	r3, [pc, #188]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f2:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80003f8:	4b2c      	ldr	r3, [pc, #176]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003fe:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000400:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000404:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000406:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000408:	2200      	movs	r2, #0
 800040a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800040c:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800040e:	2201      	movs	r2, #1
 8000410:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 4;
 8000414:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000416:	2204      	movs	r2, #4
 8000418:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800041a:	4b24      	ldr	r3, [pc, #144]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800041c:	2240      	movs	r2, #64	@ 0x40
 800041e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000420:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000422:	2200      	movs	r2, #0
 8000424:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000426:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000428:	2201      	movs	r2, #1
 800042a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800042c:	481f      	ldr	r0, [pc, #124]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800042e:	f001 fdf5 	bl	800201c <HAL_ADC_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000438:	f000 fe8c 	bl	8001154 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	4619      	mov	r1, r3
 8000446:	4819      	ldr	r0, [pc, #100]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000448:	f002 ff04 	bl	8003254 <HAL_ADCEx_MultiModeConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000452:	f000 fe7f 	bl	8001154 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <MX_ADC1_Init+0x124>)
 8000458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800045a:	2306      	movs	r3, #6
 800045c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800045e:	2305      	movs	r3, #5
 8000460:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000462:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000466:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000468:	2304      	movs	r3, #4
 800046a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	480c      	ldr	r0, [pc, #48]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800047a:	f002 f853 	bl	8002524 <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000484:	f000 fe66 	bl	8001154 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000488:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <MX_ADC1_Init+0x128>)
 800048a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800048c:	230c      	movs	r3, #12
 800048e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000490:	463b      	mov	r3, r7
 8000492:	4619      	mov	r1, r3
 8000494:	4805      	ldr	r0, [pc, #20]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000496:	f002 f845 	bl	8002524 <HAL_ADC_ConfigChannel>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80004a0:	f000 fe58 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a4:	bf00      	nop
 80004a6:	3728      	adds	r7, #40	@ 0x28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	240002ec 	.word	0x240002ec
 80004b0:	40022000 	.word	0x40022000
 80004b4:	10c00010 	.word	0x10c00010
 80004b8:	0c900008 	.word	0x0c900008

080004bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b0bc      	sub	sp, #240	@ 0xf0
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	22c0      	movs	r2, #192	@ 0xc0
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f012 fd3c 	bl	8012f5a <memset>
  if(adcHandle->Instance==ADC1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a54      	ldr	r2, [pc, #336]	@ (8000638 <HAL_ADC_MspInit+0x17c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	f040 80a0 	bne.w	800062e <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80004f2:	f04f 0300 	mov.w	r3, #0
 80004f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004fa:	2319      	movs	r3, #25
 80004fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80004fe:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8000502:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 8000504:	2307      	movs	r3, #7
 8000506:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000508:	2302      	movs	r3, #2
 800050a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000510:	2300      	movs	r3, #0
 8000512:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000514:	2300      	movs	r3, #0
 8000516:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800051c:	2300      	movs	r3, #0
 800051e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fd84 	bl	8009034 <HAL_RCCEx_PeriphCLKConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000532:	f000 fe0f 	bl	8001154 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000536:	4b41      	ldr	r3, [pc, #260]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800053c:	4a3f      	ldr	r2, [pc, #252]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000546:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b39      	ldr	r3, [pc, #228]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800055a:	4a38      	ldr	r2, [pc, #224]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000564:	4b35      	ldr	r3, [pc, #212]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b32      	ldr	r3, [pc, #200]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000578:	4a30      	ldr	r2, [pc, #192]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000590:	2340      	movs	r3, #64	@ 0x40
 8000592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000596:	2303      	movs	r3, #3
 8000598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005a6:	4619      	mov	r1, r3
 80005a8:	4825      	ldr	r0, [pc, #148]	@ (8000640 <HAL_ADC_MspInit+0x184>)
 80005aa:	f005 fbab 	bl	8005d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ae:	2310      	movs	r3, #16
 80005b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	2303      	movs	r3, #3
 80005b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005c4:	4619      	mov	r1, r3
 80005c6:	481f      	ldr	r0, [pc, #124]	@ (8000644 <HAL_ADC_MspInit+0x188>)
 80005c8:	f005 fb9c 	bl	8005d04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <HAL_ADC_MspInit+0x190>)
 80005d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005de:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000602:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000606:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800060a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800060c:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000614:	f003 fa9e 	bl	8003b54 <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 800061e:	f000 fd99 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000626:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000628:	4a07      	ldr	r2, [pc, #28]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	37f0      	adds	r7, #240	@ 0xf0
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40022000 	.word	0x40022000
 800063c:	58024400 	.word	0x58024400
 8000640:	58020000 	.word	0x58020000
 8000644:	58020800 	.word	0x58020800
 8000648:	24000350 	.word	0x24000350
 800064c:	40020010 	.word	0x40020010

08000650 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2224      	movs	r2, #36	@ 0x24
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f012 fc7c 	bl	8012f5a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_DAC1_Init+0x5c>)
 8000664:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_DAC1_Init+0x60>)
 8000666:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <MX_DAC1_Init+0x5c>)
 800066a:	f003 f82d 	bl	80036c8 <HAL_DAC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000674:	f000 fd6e 	bl	8001154 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000684:	2301      	movs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	@ (80006ac <MX_DAC1_Init+0x5c>)
 8000694:	f003 f916 	bl	80038c4 <HAL_DAC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800069e:	f000 fd59 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	@ 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	240003c8 	.word	0x240003c8
 80006b0:	40007400 	.word	0x40007400

080006b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <HAL_DAC_MspInit+0x90>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d131      	bne.n	800073a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80006e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fa:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000704:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000712:	2310      	movs	r3, #16
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	2303      	movs	r3, #3
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <HAL_DAC_MspInit+0x98>)
 8000726:	f005 faed 	bl	8005d04 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	210f      	movs	r1, #15
 800072e:	2036      	movs	r0, #54	@ 0x36
 8000730:	f002 ff26 	bl	8003580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000734:	2036      	movs	r0, #54	@ 0x36
 8000736:	f002 ff3d 	bl	80035b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	@ 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40007400 	.word	0x40007400
 8000748:	58024400 	.word	0x58024400
 800074c:	58020000 	.word	0x58020000

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <MX_DMA_Init+0x3c>)
 8000758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800075c:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <MX_DMA_Init+0x3c>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_DMA_Init+0x3c>)
 8000768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	200b      	movs	r0, #11
 800077a:	f002 ff01 	bl	8003580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800077e:	200b      	movs	r0, #11
 8000780:	f002 ff18 	bl	80035b4 <HAL_NVIC_EnableIRQ>

}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58024400 	.word	0x58024400

08000790 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b55      	ldr	r3, [pc, #340]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ac:	4a53      	ldr	r2, [pc, #332]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b6:	4b51      	ldr	r3, [pc, #324]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c4:	4b4d      	ldr	r3, [pc, #308]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ca:	4a4c      	ldr	r2, [pc, #304]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d4:	4b49      	ldr	r3, [pc, #292]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b46      	ldr	r3, [pc, #280]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a44      	ldr	r2, [pc, #272]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b42      	ldr	r3, [pc, #264]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b3e      	ldr	r3, [pc, #248]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	4a3d      	ldr	r2, [pc, #244]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000810:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800081e:	4b37      	ldr	r3, [pc, #220]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000824:	4a35      	ldr	r2, [pc, #212]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082e:	4b33      	ldr	r3, [pc, #204]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083c:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <MX_GPIO_Init+0x16c>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000842:	4a2e      	ldr	r2, [pc, #184]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084c:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <MX_GPIO_Init+0x16c>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	4828      	ldr	r0, [pc, #160]	@ (8000900 <MX_GPIO_Init+0x170>)
 8000860:	f005 fc00 	bl	8006064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2102      	movs	r1, #2
 8000868:	4826      	ldr	r0, [pc, #152]	@ (8000904 <MX_GPIO_Init+0x174>)
 800086a:	f005 fbfb 	bl	8006064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2101      	movs	r1, #1
 8000872:	4825      	ldr	r0, [pc, #148]	@ (8000908 <MX_GPIO_Init+0x178>)
 8000874:	f005 fbf6 	bl	8006064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2140      	movs	r1, #64	@ 0x40
 800087c:	4822      	ldr	r0, [pc, #136]	@ (8000908 <MX_GPIO_Init+0x178>)
 800087e:	f005 fbf1 	bl	8006064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000882:	2320      	movs	r3, #32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800088e:	2301      	movs	r3, #1
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4819      	ldr	r0, [pc, #100]	@ (8000900 <MX_GPIO_Init+0x170>)
 800089a:	f005 fa33 	bl	8005d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800089e:	2302      	movs	r3, #2
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4813      	ldr	r0, [pc, #76]	@ (8000904 <MX_GPIO_Init+0x174>)
 80008b6:	f005 fa25 	bl	8005d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <MX_GPIO_Init+0x178>)
 80008d2:	f005 fa17 	bl	8005d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008e2:	2301      	movs	r3, #1
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4806      	ldr	r0, [pc, #24]	@ (8000908 <MX_GPIO_Init+0x178>)
 80008ee:	f005 fa09 	bl	8005d04 <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	@ 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	58024400 	.word	0x58024400
 8000900:	58020800 	.word	0x58020800
 8000904:	58020400 	.word	0x58020400
 8000908:	58022000 	.word	0x58022000

0800090c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	@ (8000984 <MX_I2C1_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	@ (8000988 <MX_I2C1_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000946:	480e      	ldr	r0, [pc, #56]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000948:	f005 fbc0 	bl	80060cc <HAL_I2C_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000952:	f000 fbff 	bl	8001154 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4809      	ldr	r0, [pc, #36]	@ (8000980 <MX_I2C1_Init+0x74>)
 800095a:	f005 ffbf 	bl	80068dc <HAL_I2CEx_ConfigAnalogFilter>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 fbf6 	bl	8001154 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_I2C1_Init+0x74>)
 800096c:	f006 f801 	bl	8006972 <HAL_I2CEx_ConfigDigitalFilter>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 fbed 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	240003dc 	.word	0x240003dc
 8000984:	40005400 	.word	0x40005400
 8000988:	307075b1 	.word	0x307075b1

0800098c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0ba      	sub	sp, #232	@ 0xe8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	22c0      	movs	r2, #192	@ 0xc0
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f012 fad4 	bl	8012f5a <memset>
  if(i2cHandle->Instance==I2C1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a26      	ldr	r2, [pc, #152]	@ (8000a50 <HAL_I2C_MspInit+0xc4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d145      	bne.n	8000a48 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009bc:	f04f 0208 	mov.w	r2, #8
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 fb2e 	bl	8009034 <HAL_RCCEx_PeriphCLKConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009de:	f000 fbb9 	bl	8001154 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a00:	23c0      	movs	r3, #192	@ 0xc0
 8000a02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a06:	2312      	movs	r3, #18
 8000a08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <HAL_I2C_MspInit+0xcc>)
 8000a26:	f005 f96d 	bl	8005d04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 8000a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a30:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 8000a32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 8000a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a48:	bf00      	nop
 8000a4a:	37e8      	adds	r7, #232	@ 0xe8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40005400 	.word	0x40005400
 8000a54:	58024400 	.word	0x58024400
 8000a58:	58020400 	.word	0x58020400
 8000a5c:	00000000 	.word	0x00000000

08000a60 <oled_Show>:
// SPWM波调制比
float M = 0.9f;
// 显示函数
uint8_t textBuf[128] = {0};
void oled_Show()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af02      	add	r7, sp, #8
  OLED_Clear();
 8000a66:	f010 fac5 	bl	8010ff4 <OLED_Clear>
  // IN:
  sprintf((char *)textBuf, "IN:%5.2fV %4.2fA", signal_V->u_0, signal_I->u_0);
 8000a6a:	4b37      	ldr	r3, [pc, #220]	@ (8000b48 <oled_Show+0xe8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	edd3 7a00 	vldr	s15, [r3]
 8000a72:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a76:	4b35      	ldr	r3, [pc, #212]	@ (8000b4c <oled_Show+0xec>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	edd3 7a00 	vldr	s15, [r3]
 8000a7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a82:	ed8d 7b00 	vstr	d7, [sp]
 8000a86:	ec53 2b16 	vmov	r2, r3, d6
 8000a8a:	4931      	ldr	r1, [pc, #196]	@ (8000b50 <oled_Show+0xf0>)
 8000a8c:	4831      	ldr	r0, [pc, #196]	@ (8000b54 <oled_Show+0xf4>)
 8000a8e:	f012 fa01 	bl	8012e94 <siprintf>
  OLED_ShowString(0, 0, textBuf);
 8000a92:	4a30      	ldr	r2, [pc, #192]	@ (8000b54 <oled_Show+0xf4>)
 8000a94:	2100      	movs	r1, #0
 8000a96:	2000      	movs	r0, #0
 8000a98:	f010 fb30 	bl	80110fc <OLED_ShowString>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	482d      	ldr	r0, [pc, #180]	@ (8000b54 <oled_Show+0xf4>)
 8000aa0:	f010 ff48 	bl	8011934 <CDC_Transmit_FS>
  // OUT:
  sprintf((char *)textBuf, "OT:%5.2fV %4.2fA", signal_V->u_0, signal_I->u_0);
 8000aa4:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <oled_Show+0xe8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	edd3 7a00 	vldr	s15, [r3]
 8000aac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ab0:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <oled_Show+0xec>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	edd3 7a00 	vldr	s15, [r3]
 8000ab8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000abc:	ed8d 7b00 	vstr	d7, [sp]
 8000ac0:	ec53 2b16 	vmov	r2, r3, d6
 8000ac4:	4924      	ldr	r1, [pc, #144]	@ (8000b58 <oled_Show+0xf8>)
 8000ac6:	4823      	ldr	r0, [pc, #140]	@ (8000b54 <oled_Show+0xf4>)
 8000ac8:	f012 f9e4 	bl	8012e94 <siprintf>
  OLED_ShowString(0, 2, textBuf);
 8000acc:	4a21      	ldr	r2, [pc, #132]	@ (8000b54 <oled_Show+0xf4>)
 8000ace:	2102      	movs	r1, #2
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f010 fb13 	bl	80110fc <OLED_ShowString>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000ad6:	2180      	movs	r1, #128	@ 0x80
 8000ad8:	481e      	ldr	r0, [pc, #120]	@ (8000b54 <oled_Show+0xf4>)
 8000ada:	f010 ff2b 	bl	8011934 <CDC_Transmit_FS>
  // DC:
  sprintf((char *)textBuf, "DC:%5.2fV", signal_V->u_0);
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <oled_Show+0xe8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	edd3 7a00 	vldr	s15, [r3]
 8000ae6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aea:	ec53 2b17 	vmov	r2, r3, d7
 8000aee:	491b      	ldr	r1, [pc, #108]	@ (8000b5c <oled_Show+0xfc>)
 8000af0:	4818      	ldr	r0, [pc, #96]	@ (8000b54 <oled_Show+0xf4>)
 8000af2:	f012 f9cf 	bl	8012e94 <siprintf>
  OLED_ShowString(0, 4, textBuf);
 8000af6:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <oled_Show+0xf4>)
 8000af8:	2104      	movs	r1, #4
 8000afa:	2000      	movs	r0, #0
 8000afc:	f010 fafe 	bl	80110fc <OLED_ShowString>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	4814      	ldr	r0, [pc, #80]	@ (8000b54 <oled_Show+0xf4>)
 8000b04:	f010 ff16 	bl	8011934 <CDC_Transmit_FS>
  // FAC:
  sprintf((char *)textBuf, "FA:%4.2fEF:%5.2f%%", 0.99, 99.99);
 8000b08:	a30b      	add	r3, pc, #44	@ (adr r3, 8000b38 <oled_Show+0xd8>)
 8000b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0e:	e9cd 2300 	strd	r2, r3, [sp]
 8000b12:	a30b      	add	r3, pc, #44	@ (adr r3, 8000b40 <oled_Show+0xe0>)
 8000b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b18:	4911      	ldr	r1, [pc, #68]	@ (8000b60 <oled_Show+0x100>)
 8000b1a:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <oled_Show+0xf4>)
 8000b1c:	f012 f9ba 	bl	8012e94 <siprintf>
  OLED_ShowString(0, 6, textBuf);
 8000b20:	4a0c      	ldr	r2, [pc, #48]	@ (8000b54 <oled_Show+0xf4>)
 8000b22:	2106      	movs	r1, #6
 8000b24:	2000      	movs	r0, #0
 8000b26:	f010 fae9 	bl	80110fc <OLED_ShowString>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000b2a:	2180      	movs	r1, #128	@ 0x80
 8000b2c:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <oled_Show+0xf4>)
 8000b2e:	f010 ff01 	bl	8011934 <CDC_Transmit_FS>
  // EFF:
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	28f5c28f 	.word	0x28f5c28f
 8000b3c:	4058ff5c 	.word	0x4058ff5c
 8000b40:	7ae147ae 	.word	0x7ae147ae
 8000b44:	3fefae14 	.word	0x3fefae14
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	08015120 	.word	0x08015120
 8000b54:	24000430 	.word	0x24000430
 8000b58:	08015134 	.word	0x08015134
 8000b5c:	08015148 	.word	0x08015148
 8000b60:	08015154 	.word	0x08015154

08000b64 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b6a:	f000 f9ad 	bl	8000ec8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b6e:	4b73      	ldr	r3, [pc, #460]	@ (8000d3c <main+0x1d8>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d11b      	bne.n	8000bb2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7a:	f3bf 8f4f 	dsb	sy
}
 8000b7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b80:	f3bf 8f6f 	isb	sy
}
 8000b84:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b86:	4b6d      	ldr	r3, [pc, #436]	@ (8000d3c <main+0x1d8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b8e:	f3bf 8f4f 	dsb	sy
}
 8000b92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b94:	f3bf 8f6f 	isb	sy
}
 8000b98:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b9a:	4b68      	ldr	r3, [pc, #416]	@ (8000d3c <main+0x1d8>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a67      	ldr	r2, [pc, #412]	@ (8000d3c <main+0x1d8>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba6:	f3bf 8f4f 	dsb	sy
}
 8000baa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bac:	f3bf 8f6f 	isb	sy
}
 8000bb0:	e000      	b.n	8000bb4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bb2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000bb4:	4b61      	ldr	r3, [pc, #388]	@ (8000d3c <main+0x1d8>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d138      	bne.n	8000c32 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8000d3c <main+0x1d8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc8:	f3bf 8f4f 	dsb	sy
}
 8000bcc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bce:	4b5b      	ldr	r3, [pc, #364]	@ (8000d3c <main+0x1d8>)
 8000bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bd4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	0b5b      	lsrs	r3, r3, #13
 8000bda:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bde:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000be8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	015a      	lsls	r2, r3, #5
 8000bee:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000bf2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bf8:	4950      	ldr	r1, [pc, #320]	@ (8000d3c <main+0x1d8>)
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1ef      	bne.n	8000bea <main+0x86>
    } while(sets-- != 0U);
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1e5a      	subs	r2, r3, #1
 8000c0e:	60ba      	str	r2, [r7, #8]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1e5      	bne.n	8000be0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c14:	f3bf 8f4f 	dsb	sy
}
 8000c18:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c1a:	4b48      	ldr	r3, [pc, #288]	@ (8000d3c <main+0x1d8>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a47      	ldr	r2, [pc, #284]	@ (8000d3c <main+0x1d8>)
 8000c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c24:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c26:	f3bf 8f4f 	dsb	sy
}
 8000c2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c2c:	f3bf 8f6f 	isb	sy
}
 8000c30:	e000      	b.n	8000c34 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c32:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f000 ff58 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f898 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f7ff fda8 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c40:	f7ff fd86 	bl	8000750 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c44:	f000 fda6 	bl	8001794 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000c48:	f000 fdf2 	bl	8001830 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000c4c:	f7ff fba0 	bl	8000390 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000c50:	f010 fdb0 	bl	80117b4 <MX_USB_DEVICE_Init>
  MX_DAC1_Init();
 8000c54:	f7ff fcfc 	bl	8000650 <MX_DAC1_Init>
  MX_I2C1_Init();
 8000c58:	f7ff fe58 	bl	800090c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c5c:	f000 fa80 	bl	8001160 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000c60:	205c      	movs	r0, #92	@ 0x5c
 8000c62:	f011 fb67 	bl	8012334 <malloc>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b35      	ldr	r3, [pc, #212]	@ (8000d40 <main+0x1dc>)
 8000c6c:	601a      	str	r2, [r3, #0]
  signal_config_V = (pll_Config *)malloc(sizeof(pll_Config));
 8000c6e:	2020      	movs	r0, #32
 8000c70:	f011 fb60 	bl	8012334 <malloc>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b32      	ldr	r3, [pc, #200]	@ (8000d44 <main+0x1e0>)
 8000c7a:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000c7c:	205c      	movs	r0, #92	@ 0x5c
 8000c7e:	f011 fb59 	bl	8012334 <malloc>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b30      	ldr	r3, [pc, #192]	@ (8000d48 <main+0x1e4>)
 8000c88:	601a      	str	r2, [r3, #0]
  signal_config_I = (pll_Config *)malloc(sizeof(pll_Config));
 8000c8a:	2020      	movs	r0, #32
 8000c8c:	f011 fb52 	bl	8012334 <malloc>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b2d      	ldr	r3, [pc, #180]	@ (8000d4c <main+0x1e8>)
 8000c96:	601a      	str	r2, [r3, #0]
  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 锁相环初始化
  pll_Init(signal_V, signal_config_V, 50, 20000); // 电压环
 8000c98:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <main+0x1dc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a29      	ldr	r2, [pc, #164]	@ (8000d44 <main+0x1e0>)
 8000c9e:	6811      	ldr	r1, [r2, #0]
 8000ca0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ca4:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8000d50 <main+0x1ec>
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f010 fadf 	bl	801126c <pll_Init>
  pll_Init(signal_I, signal_config_I, 50, 20000); // 电流环
 8000cae:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <main+0x1e4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a26      	ldr	r2, [pc, #152]	@ (8000d4c <main+0x1e8>)
 8000cb4:	6811      	ldr	r1, [r2, #0]
 8000cb6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000cba:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8000d50 <main+0x1ec>
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f010 fad4 	bl	801126c <pll_Init>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000cc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4821      	ldr	r0, [pc, #132]	@ (8000d54 <main+0x1f0>)
 8000cce:	f002 fdc9 	bl	8003864 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	481f      	ldr	r0, [pc, #124]	@ (8000d54 <main+0x1f0>)
 8000cd6:	f002 fd19 	bl	800370c <HAL_DAC_Start>
  // ADC校准并开启
  HAL_Delay(200);
 8000cda:	20c8      	movs	r0, #200	@ 0xc8
 8000cdc:	f000 ff60 	bl	8001ba0 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000ce0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	481c      	ldr	r0, [pc, #112]	@ (8000d58 <main+0x1f4>)
 8000ce8:	f002 fa50 	bl	800318c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED); // 线性度校准
 8000cec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000cf0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000cf4:	4818      	ldr	r0, [pc, #96]	@ (8000d58 <main+0x1f4>)
 8000cf6:	f002 fa49 	bl	800318c <HAL_ADCEx_Calibration_Start>
  HAL_Delay(1000);
 8000cfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cfe:	f000 ff4f 	bl	8001ba0 <HAL_Delay>
  // 打开PWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000d02:	2100      	movs	r1, #0
 8000d04:	4815      	ldr	r0, [pc, #84]	@ (8000d5c <main+0x1f8>)
 8000d06:	f00b fbcd 	bl	800c4a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	4813      	ldr	r0, [pc, #76]	@ (8000d5c <main+0x1f8>)
 8000d0e:	f00b fbc9 	bl	800c4a4 <HAL_TIM_PWM_Start>
  // OLED初始化
  OLED_Init();
 8000d12:	f010 fa21 	bl	8011158 <OLED_Init>
  // INA238初始化
  ina238_Init(&hi2c1, 0);
 8000d16:	2100      	movs	r1, #0
 8000d18:	4811      	ldr	r0, [pc, #68]	@ (8000d60 <main+0x1fc>)
 8000d1a:	f010 f8c9 	bl	8010eb0 <ina238_Init>
  // 开启中断
  HAL_TIM_Base_Start_IT(&htim2);
 8000d1e:	4811      	ldr	r0, [pc, #68]	@ (8000d64 <main+0x200>)
 8000d20:	f00b fae6 	bl	800c2f0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 虚拟串口输出日志
    oled_Show();
 8000d24:	f7ff fe9c 	bl	8000a60 <oled_Show>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000d28:	2101      	movs	r1, #1
 8000d2a:	480f      	ldr	r0, [pc, #60]	@ (8000d68 <main+0x204>)
 8000d2c:	f005 f9b3 	bl	8006096 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000d30:	20c8      	movs	r0, #200	@ 0xc8
 8000d32:	f000 ff35 	bl	8001ba0 <HAL_Delay>
    oled_Show();
 8000d36:	bf00      	nop
 8000d38:	e7f4      	b.n	8000d24 <main+0x1c0>
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000004 	.word	0x20000004
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	2000000c 	.word	0x2000000c
 8000d50:	42480000 	.word	0x42480000
 8000d54:	240003c8 	.word	0x240003c8
 8000d58:	240002ec 	.word	0x240002ec
 8000d5c:	240005d4 	.word	0x240005d4
 8000d60:	240003dc 	.word	0x240003dc
 8000d64:	24000588 	.word	0x24000588
 8000d68:	58022000 	.word	0x58022000

08000d6c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b09e      	sub	sp, #120	@ 0x78
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d76:	224c      	movs	r2, #76	@ 0x4c
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f012 f8ed 	bl	8012f5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2220      	movs	r2, #32
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f012 f8e6 	bl	8012f5a <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f007 f8f4 	bl	8007f7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	4b48      	ldr	r3, [pc, #288]	@ (8000ebc <SystemClock_Config+0x150>)
 8000d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9c:	4a47      	ldr	r2, [pc, #284]	@ (8000ebc <SystemClock_Config+0x150>)
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000da4:	4b45      	ldr	r3, [pc, #276]	@ (8000ebc <SystemClock_Config+0x150>)
 8000da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b44      	ldr	r3, [pc, #272]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a43      	ldr	r2, [pc, #268]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b41      	ldr	r3, [pc, #260]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000dc6:	bf00      	nop
 8000dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dd4:	d1f8      	bne.n	8000dc8 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <SystemClock_Config+0x158>)
 8000dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ddc:	4a39      	ldr	r2, [pc, #228]	@ (8000ec4 <SystemClock_Config+0x158>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000de6:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <SystemClock_Config+0x158>)
 8000de8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	4b31      	ldr	r3, [pc, #196]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a30      	ldr	r2, [pc, #192]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000dfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <SystemClock_Config+0x150>)
 8000e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e12:	4a2a      	ldr	r2, [pc, #168]	@ (8000ebc <SystemClock_Config+0x150>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e1a:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <SystemClock_Config+0x150>)
 8000e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000e26:	bf00      	nop
 8000e28:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e34:	d1f8      	bne.n	8000e28 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e40:	2302      	movs	r3, #2
 8000e42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e44:	2302      	movs	r3, #2
 8000e46:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e4c:	23c0      	movs	r3, #192	@ 0xc0
 8000e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e54:	2314      	movs	r3, #20
 8000e56:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f007 f8cf 	bl	8008010 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e78:	f000 f96c 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000e7c:	233f      	movs	r3, #63	@ 0x3f
 8000e7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e80:	2303      	movs	r3, #3
 8000e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e8c:	2340      	movs	r3, #64	@ 0x40
 8000e8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e90:	2340      	movs	r3, #64	@ 0x40
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e9a:	2340      	movs	r3, #64	@ 0x40
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f007 fd0d 	bl	80088c4 <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000eb0:	f000 f950 	bl	8001154 <Error_Handler>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3778      	adds	r7, #120	@ 0x78
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	58000400 	.word	0x58000400
 8000ec0:	58024800 	.word	0x58024800
 8000ec4:	58024400 	.word	0x58024400

08000ec8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eda:	f002 fb79 	bl	80035d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000ee6:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000eea:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000eec:	2312      	movs	r3, #18
 8000eee:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fb96 	bl	8003640 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000f18:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000f1c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000f1e:	230f      	movs	r3, #15
 8000f20:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 fb87 	bl	8003640 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8000f36:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f3a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f40:	463b      	mov	r3, r7
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fb7c 	bl	8003640 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f48:	2004      	movs	r0, #4
 8000f4a:	f002 fb59 	bl	8003600 <HAL_MPU_Enable>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	ed2d 8b02 	vpush	{d8}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a6c      	ldr	r2, [pc, #432]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d101      	bne.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_IncTick();
 8000f6e:	f000 fdf7 	bl	8001b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f7a:	f040 80c9 	bne.w	8001110 <HAL_TIM_PeriodElapsedCallback+0x1b8>
  {
    // 缓存adcBuf
    HAL_ADC_Start_DMA(&hadc1, adcBuf, 2);
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4967      	ldr	r1, [pc, #412]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000f82:	4868      	ldr	r0, [pc, #416]	@ (8001124 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000f84:	f001 f9ec 	bl	8002360 <HAL_ADC_Start_DMA>
 8000f88:	4b65      	ldr	r3, [pc, #404]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	dd1d      	ble.n	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x7a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000fac:	4a5e      	ldr	r2, [pc, #376]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	3320      	adds	r3, #32
 8000fb8:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3b20      	subs	r3, #32
 8000fbe:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	dcf2      	bgt.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc6:	f3bf 8f4f 	dsb	sy
}
 8000fca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fcc:	f3bf 8f6f 	isb	sy
}
 8000fd0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000fd2:	bf00      	nop
    SCB_InvalidateDCache_by_Addr(adcBuf, sizeof(adcBuf));
    signal_V->u_0 = adcBuf[0] * 33.f / 65536.0f;
 8000fd4:	4b52      	ldr	r3, [pc, #328]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800112c <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8000fe4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fe8:	4b51      	ldr	r3, [pc, #324]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001134 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8000ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff4:	edc3 7a00 	vstr	s15, [r3]
    signal_I->u_0 = adcBuf[1] * 3.3f / 65536.0f;
 8000ff8:	4b49      	ldr	r3, [pc, #292]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001004:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001138 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8001008:	ee27 7a87 	vmul.f32	s14, s15, s14
 800100c:	4b4b      	ldr	r3, [pc, #300]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001134 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8001014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001018:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control(signal_V, signal_config_V, signal_V); // 电压环
 800101c:	4b44      	ldr	r3, [pc, #272]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a47      	ldr	r2, [pc, #284]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001022:	6811      	ldr	r1, [r2, #0]
 8001024:	4a42      	ldr	r2, [pc, #264]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f010 fa05 	bl	8011438 <pll_Control>
    pll_Control(signal_I, signal_config_I, signal_V); // 电流环
 800102e:	4b43      	ldr	r3, [pc, #268]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a44      	ldr	r2, [pc, #272]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001034:	6811      	ldr	r1, [r2, #0]
 8001036:	4a3e      	ldr	r2, [pc, #248]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f010 f9fc 	bl	8011438 <pll_Control>
    // 调节SPWM占空比
    // 要想实现PFC，需要让电流相位与电压相位相同，而电压相位由电网控制，所以需要闭环控制的是电流相位
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 8001040:	4b41      	ldr	r3, [pc, #260]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001052:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001056:	4b3d      	ldr	r3, [pc, #244]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001060:	4b36      	ldr	r3, [pc, #216]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001068:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001150 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 800106c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	f011 f8ce 	bl	8012214 <arm_sin_f32>
 8001078:	eef0 7a40 	vmov.f32	s15, s0
 800107c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001080:	4b31      	ldr	r3, [pc, #196]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800108e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001092:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109a:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a2:	ee17 2a90 	vmov	r2, s15
 80010a6:	635a      	str	r2, [r3, #52]	@ 0x34
    // 反馈侧
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 80010a8:	4b27      	ldr	r3, [pc, #156]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80010ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010be:	4b23      	ldr	r3, [pc, #140]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80010d0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001150 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80010d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	f011 f89a 	bl	8012214 <arm_sin_f32>
 80010e0:	eef0 7a40 	vmov.f32	s15, s0
 80010e4:	ee28 7a27 	vmul.f32	s14, s16, s15
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010f6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80010fa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80010fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110a:	ee17 2a90 	vmov	r2, s15
 800110e:	639a      	str	r2, [r3, #56]	@ 0x38
    // dcVolt = ina238_GetVolt(&hi2c1);
    // DAC模拟输出，便于调试，不需要时可关闭
    // HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_1->theta + PI / 2.f) + 2048.f);
  }
  /* USER CODE END Callback 1 */
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	ecbd 8b02 	vpop	{d8}
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40001000 	.word	0x40001000
 8001120:	38000000 	.word	0x38000000
 8001124:	240002ec 	.word	0x240002ec
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	42040000 	.word	0x42040000
 8001130:	20000000 	.word	0x20000000
 8001134:	47800000 	.word	0x47800000
 8001138:	40533333 	.word	0x40533333
 800113c:	20000008 	.word	0x20000008
 8001140:	20000004 	.word	0x20000004
 8001144:	2000000c 	.word	0x2000000c
 8001148:	240005d4 	.word	0x240005d4
 800114c:	24000000 	.word	0x24000000
 8001150:	3fc90fdb 	.word	0x3fc90fdb

08001154 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <Error_Handler+0x8>

08001160 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_SPI1_Init+0xa4>)
 8001166:	4a28      	ldr	r2, [pc, #160]	@ (8001208 <MX_SPI1_Init+0xa8>)
 8001168:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <MX_SPI1_Init+0xa4>)
 800116c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001170:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001172:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <MX_SPI1_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <MX_SPI1_Init+0xa4>)
 800117a:	2207      	movs	r2, #7
 800117c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117e:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_SPI1_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <MX_SPI1_Init+0xa4>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <MX_SPI1_Init+0xa4>)
 800118c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001190:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_SPI1_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <MX_SPI1_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a4:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_SPI1_Init+0xa4>)
 80011f0:	f00a fc1e 	bl	800ba30 <HAL_SPI_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80011fa:	f7ff ffab 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	240004b0 	.word	0x240004b0
 8001208:	40013000 	.word	0x40013000

0800120c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0bc      	sub	sp, #240	@ 0xf0
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	22c0      	movs	r2, #192	@ 0xc0
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f011 fe94 	bl	8012f5a <memset>
  if(spiHandle->Instance==SPI1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a38      	ldr	r2, [pc, #224]	@ (8001318 <HAL_SPI_MspInit+0x10c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d169      	bne.n	8001310 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800123c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001248:	2300      	movs	r3, #0
 800124a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	4618      	mov	r0, r3
 8001252:	f007 feef 	bl	8009034 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800125c:	f7ff ff7a 	bl	8001154 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001260:	4b2e      	ldr	r3, [pc, #184]	@ (800131c <HAL_SPI_MspInit+0x110>)
 8001262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001266:	4a2d      	ldr	r2, [pc, #180]	@ (800131c <HAL_SPI_MspInit+0x110>)
 8001268:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800126c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <HAL_SPI_MspInit+0x110>)
 8001272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b27      	ldr	r3, [pc, #156]	@ (800131c <HAL_SPI_MspInit+0x110>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	4a25      	ldr	r2, [pc, #148]	@ (800131c <HAL_SPI_MspInit+0x110>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128e:	4b23      	ldr	r3, [pc, #140]	@ (800131c <HAL_SPI_MspInit+0x110>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <HAL_SPI_MspInit+0x110>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	4a1e      	ldr	r2, [pc, #120]	@ (800131c <HAL_SPI_MspInit+0x110>)
 80012a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <HAL_SPI_MspInit+0x110>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 80012ba:	23a0      	movs	r3, #160	@ 0xa0
 80012bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012d2:	2305      	movs	r3, #5
 80012d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012dc:	4619      	mov	r1, r3
 80012de:	4810      	ldr	r0, [pc, #64]	@ (8001320 <HAL_SPI_MspInit+0x114>)
 80012e0:	f004 fd10 	bl	8005d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012fe:	2305      	movs	r3, #5
 8001300:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	@ (8001324 <HAL_SPI_MspInit+0x118>)
 800130c:	f004 fcfa 	bl	8005d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001310:	bf00      	nop
 8001312:	37f0      	adds	r7, #240	@ 0xf0
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40013000 	.word	0x40013000
 800131c:	58024400 	.word	0x58024400
 8001320:	58020000 	.word	0x58020000
 8001324:	58021800 	.word	0x58021800

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_MspInit+0x30>)
 8001330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001334:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_MspInit+0x30>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_MspInit+0x30>)
 8001340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	58024400 	.word	0x58024400

0800135c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b090      	sub	sp, #64	@ 0x40
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	d827      	bhi.n	80013ba <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800136a:	2200      	movs	r2, #0
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	2036      	movs	r0, #54	@ 0x36
 8001370:	f002 f906 	bl	8003580 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001374:	2036      	movs	r0, #54	@ 0x36
 8001376:	f002 f91d 	bl	80035b4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800137a:	4a29      	ldr	r2, [pc, #164]	@ (8001420 <HAL_InitTick+0xc4>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001380:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <HAL_InitTick+0xc8>)
 8001382:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001386:	4a27      	ldr	r2, [pc, #156]	@ (8001424 <HAL_InitTick+0xc8>)
 8001388:	f043 0310 	orr.w	r3, r3, #16
 800138c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <HAL_InitTick+0xc8>)
 8001392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800139e:	f107 0210 	add.w	r2, r7, #16
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f007 fe01 	bl	8008fb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d106      	bne.n	80013c6 <HAL_InitTick+0x6a>
 80013b8:	e001      	b.n	80013be <HAL_InitTick+0x62>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e02b      	b.n	8001416 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013be:	f007 fde1 	bl	8008f84 <HAL_RCC_GetPCLK1Freq>
 80013c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80013c4:	e004      	b.n	80013d0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013c6:	f007 fddd 	bl	8008f84 <HAL_RCC_GetPCLK1Freq>
 80013ca:	4603      	mov	r3, r0
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013d2:	4a15      	ldr	r2, [pc, #84]	@ (8001428 <HAL_InitTick+0xcc>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9b      	lsrs	r3, r3, #18
 80013da:	3b01      	subs	r3, #1
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013de:	4b13      	ldr	r3, [pc, #76]	@ (800142c <HAL_InitTick+0xd0>)
 80013e0:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <HAL_InitTick+0xd4>)
 80013e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_InitTick+0xd0>)
 80013e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ec:	4a0f      	ldr	r2, [pc, #60]	@ (800142c <HAL_InitTick+0xd0>)
 80013ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <HAL_InitTick+0xd0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <HAL_InitTick+0xd0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013fe:	480b      	ldr	r0, [pc, #44]	@ (800142c <HAL_InitTick+0xd0>)
 8001400:	f00a ff1f 	bl	800c242 <HAL_TIM_Base_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d104      	bne.n	8001414 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800140a:	4808      	ldr	r0, [pc, #32]	@ (800142c <HAL_InitTick+0xd0>)
 800140c:	f00a ff70 	bl	800c2f0 <HAL_TIM_Base_Start_IT>
 8001410:	4603      	mov	r3, r0
 8001412:	e000      	b.n	8001416 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	3740      	adds	r7, #64	@ 0x40
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2400000c 	.word	0x2400000c
 8001424:	58024400 	.word	0x58024400
 8001428:	431bde83 	.word	0x431bde83
 800142c:	24000538 	.word	0x24000538
 8001430:	40001000 	.word	0x40001000

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <NMI_Handler+0x4>

0800143c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <UsageFault_Handler+0x4>

0800145c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <DMA1_Stream0_IRQHandler+0x10>)
 800149a:	f003 f921 	bl	80046e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	24000350 	.word	0x24000350

080014a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <TIM2_IRQHandler+0x10>)
 80014ae:	f00b f907 	bl	800c6c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	24000588 	.word	0x24000588

080014bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <TIM6_DAC_IRQHandler+0x20>)
 80014c2:	791b      	ldrb	r3, [r3, #4]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80014ca:	4804      	ldr	r0, [pc, #16]	@ (80014dc <TIM6_DAC_IRQHandler+0x20>)
 80014cc:	f002 f970 	bl	80037b0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <TIM6_DAC_IRQHandler+0x24>)
 80014d2:	f00b f8f5 	bl	800c6c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	240003c8 	.word	0x240003c8
 80014e0:	24000538 	.word	0x24000538

080014e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <OTG_FS_IRQHandler+0x10>)
 80014ea:	f005 fbe7 	bl	8006cbc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	24001b04 	.word	0x24001b04

080014f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return 1;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_kill>:

int _kill(int pid, int sig)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001512:	f011 fd85 	bl	8013020 <__errno>
 8001516:	4603      	mov	r3, r0
 8001518:	2216      	movs	r2, #22
 800151a:	601a      	str	r2, [r3, #0]
  return -1;
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_exit>:

void _exit (int status)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ffe7 	bl	8001508 <_kill>
  while (1) {}    /* Make sure we hang here */
 800153a:	bf00      	nop
 800153c:	e7fd      	b.n	800153a <_exit+0x12>

0800153e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e00a      	b.n	8001566 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001550:	f3af 8000 	nop.w
 8001554:	4601      	mov	r1, r0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	b2ca      	uxtb	r2, r1
 800155e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbf0      	blt.n	8001550 <_read+0x12>
  }

  return len;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e009      	b.n	800159e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	60ba      	str	r2, [r7, #8]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dbf1      	blt.n	800158a <_write+0x12>
  }
  return len;
 80015a6:	687b      	ldr	r3, [r7, #4]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_close>:

int _close(int file)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d8:	605a      	str	r2, [r3, #4]
  return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_isatty>:

int _isatty(int file)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f011 fcea 	bl	8013020 <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	@ (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	@ (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	24080000 	.word	0x24080000
 8001678:	00000400 	.word	0x00000400
 800167c:	24000584 	.word	0x24000584
 8001680:	24002380 	.word	0x24002380

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001688:	4b37      	ldr	r3, [pc, #220]	@ (8001768 <SystemInit+0xe4>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168e:	4a36      	ldr	r2, [pc, #216]	@ (8001768 <SystemInit+0xe4>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001698:	4b34      	ldr	r3, [pc, #208]	@ (800176c <SystemInit+0xe8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	d807      	bhi.n	80016b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016a4:	4b31      	ldr	r3, [pc, #196]	@ (800176c <SystemInit+0xe8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 030f 	bic.w	r3, r3, #15
 80016ac:	4a2f      	ldr	r2, [pc, #188]	@ (800176c <SystemInit+0xe8>)
 80016ae:	f043 0307 	orr.w	r3, r3, #7
 80016b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <SystemInit+0xec>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001770 <SystemInit+0xec>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <SystemInit+0xec>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <SystemInit+0xec>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4929      	ldr	r1, [pc, #164]	@ (8001770 <SystemInit+0xec>)
 80016cc:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <SystemInit+0xf0>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <SystemInit+0xe8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016de:	4b23      	ldr	r3, [pc, #140]	@ (800176c <SystemInit+0xe8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 030f 	bic.w	r3, r3, #15
 80016e6:	4a21      	ldr	r2, [pc, #132]	@ (800176c <SystemInit+0xe8>)
 80016e8:	f043 0307 	orr.w	r3, r3, #7
 80016ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <SystemInit+0xec>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <SystemInit+0xec>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <SystemInit+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001700:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <SystemInit+0xec>)
 8001702:	4a1d      	ldr	r2, [pc, #116]	@ (8001778 <SystemInit+0xf4>)
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <SystemInit+0xec>)
 8001708:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <SystemInit+0xf8>)
 800170a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <SystemInit+0xec>)
 800170e:	4a1c      	ldr	r2, [pc, #112]	@ (8001780 <SystemInit+0xfc>)
 8001710:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001712:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <SystemInit+0xec>)
 8001714:	2200      	movs	r2, #0
 8001716:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001718:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <SystemInit+0xec>)
 800171a:	4a19      	ldr	r2, [pc, #100]	@ (8001780 <SystemInit+0xfc>)
 800171c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <SystemInit+0xec>)
 8001720:	2200      	movs	r2, #0
 8001722:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <SystemInit+0xec>)
 8001726:	4a16      	ldr	r2, [pc, #88]	@ (8001780 <SystemInit+0xfc>)
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <SystemInit+0xec>)
 800172c:	2200      	movs	r2, #0
 800172e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <SystemInit+0xec>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0e      	ldr	r2, [pc, #56]	@ (8001770 <SystemInit+0xec>)
 8001736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800173a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <SystemInit+0xec>)
 800173e:	2200      	movs	r2, #0
 8001740:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <SystemInit+0x100>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <SystemInit+0x104>)
 8001748:	4013      	ands	r3, r2
 800174a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800174e:	d202      	bcs.n	8001756 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <SystemInit+0x108>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <SystemInit+0x10c>)
 8001758:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800175c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00
 800176c:	52002000 	.word	0x52002000
 8001770:	58024400 	.word	0x58024400
 8001774:	eaf6ed7f 	.word	0xeaf6ed7f
 8001778:	02020200 	.word	0x02020200
 800177c:	01ff0000 	.word	0x01ff0000
 8001780:	01010280 	.word	0x01010280
 8001784:	5c001000 	.word	0x5c001000
 8001788:	ffff0000 	.word	0xffff0000
 800178c:	51008108 	.word	0x51008108
 8001790:	52004000 	.word	0x52004000

08001794 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <MX_TIM2_Init+0x98>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <MX_TIM2_Init+0x98>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <MX_TIM2_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 80017c6:	4b19      	ldr	r3, [pc, #100]	@ (800182c <MX_TIM2_Init+0x98>)
 80017c8:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80017cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <MX_TIM2_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <MX_TIM2_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017da:	4814      	ldr	r0, [pc, #80]	@ (800182c <MX_TIM2_Init+0x98>)
 80017dc:	f00a fd31 	bl	800c242 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017e6:	f7ff fcb5 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	480d      	ldr	r0, [pc, #52]	@ (800182c <MX_TIM2_Init+0x98>)
 80017f8:	f00b f996 	bl	800cb28 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001802:	f7ff fca7 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	@ (800182c <MX_TIM2_Init+0x98>)
 8001814:	f00b fedc 	bl	800d5d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800181e:	f7ff fc99 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000588 	.word	0x24000588

08001830 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b09a      	sub	sp, #104	@ 0x68
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001850:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	615a      	str	r2, [r3, #20]
 8001862:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	222c      	movs	r2, #44	@ 0x2c
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f011 fb75 	bl	8012f5a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001870:	4b4a      	ldr	r3, [pc, #296]	@ (800199c <MX_TIM8_Init+0x16c>)
 8001872:	4a4b      	ldr	r2, [pc, #300]	@ (80019a0 <MX_TIM8_Init+0x170>)
 8001874:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001876:	4b49      	ldr	r3, [pc, #292]	@ (800199c <MX_TIM8_Init+0x16c>)
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b47      	ldr	r3, [pc, #284]	@ (800199c <MX_TIM8_Init+0x16c>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 8001882:	4b46      	ldr	r3, [pc, #280]	@ (800199c <MX_TIM8_Init+0x16c>)
 8001884:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001888:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b44      	ldr	r3, [pc, #272]	@ (800199c <MX_TIM8_Init+0x16c>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001890:	4b42      	ldr	r3, [pc, #264]	@ (800199c <MX_TIM8_Init+0x16c>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <MX_TIM8_Init+0x16c>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800189c:	483f      	ldr	r0, [pc, #252]	@ (800199c <MX_TIM8_Init+0x16c>)
 800189e:	f00a fcd0 	bl	800c242 <HAL_TIM_Base_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80018a8:	f7ff fc54 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018b6:	4619      	mov	r1, r3
 80018b8:	4838      	ldr	r0, [pc, #224]	@ (800199c <MX_TIM8_Init+0x16c>)
 80018ba:	f00b f935 	bl	800cb28 <HAL_TIM_ConfigClockSource>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80018c4:	f7ff fc46 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80018c8:	4834      	ldr	r0, [pc, #208]	@ (800199c <MX_TIM8_Init+0x16c>)
 80018ca:	f00a fd89 	bl	800c3e0 <HAL_TIM_PWM_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80018d4:	f7ff fc3e 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018e8:	4619      	mov	r1, r3
 80018ea:	482c      	ldr	r0, [pc, #176]	@ (800199c <MX_TIM8_Init+0x16c>)
 80018ec:	f00b fe70 	bl	800d5d0 <HAL_TIMEx_MasterConfigSynchronization>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80018f6:	f7ff fc2d 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fa:	2360      	movs	r3, #96	@ 0x60
 80018fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 6000-1;
 80018fe:	f241 736f 	movw	r3, #5999	@ 0x176f
 8001902:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001908:	2300      	movs	r3, #0
 800190a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800190c:	2304      	movs	r3, #4
 800190e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001918:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	481e      	ldr	r0, [pc, #120]	@ (800199c <MX_TIM8_Init+0x16c>)
 8001922:	f00a ffed 	bl	800c900 <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800192c:	f7ff fc12 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001930:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001934:	2204      	movs	r2, #4
 8001936:	4619      	mov	r1, r3
 8001938:	4818      	ldr	r0, [pc, #96]	@ (800199c <MX_TIM8_Init+0x16c>)
 800193a:	f00a ffe1 	bl	800c900 <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001944:	f7ff fc06 	bl	8001154 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800195c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001960:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800196a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4807      	ldr	r0, [pc, #28]	@ (800199c <MX_TIM8_Init+0x16c>)
 800197e:	f00b feb5 	bl	800d6ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8001988:	f7ff fbe4 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <MX_TIM8_Init+0x16c>)
 800198e:	f000 f847 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 8001992:	bf00      	nop
 8001994:	3768      	adds	r7, #104	@ 0x68
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	240005d4 	.word	0x240005d4
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b4:	d117      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 80019b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019bc:	4a16      	ldr	r2, [pc, #88]	@ (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 80019c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	201c      	movs	r0, #28
 80019da:	f001 fdd1 	bl	8003580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019de:	201c      	movs	r0, #28
 80019e0:	f001 fde8 	bl	80035b4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80019e4:	e013      	b.n	8001a0e <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM8)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <HAL_TIM_Base_MspInit+0x78>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d10e      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 80019f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019f6:	4a08      	ldr	r2, [pc, #32]	@ (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_TIM_Base_MspInit+0x74>)
 8001a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	40010400 	.word	0x40010400

08001a20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <HAL_TIM_MspPostInit+0x68>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d11e      	bne.n	8001a80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_TIM_MspPostInit+0x6c>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a48:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <HAL_TIM_MspPostInit+0x6c>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <HAL_TIM_MspPostInit+0x6c>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a60:	23c0      	movs	r3, #192	@ 0xc0
 8001a62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a70:	2303      	movs	r3, #3
 8001a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <HAL_TIM_MspPostInit+0x70>)
 8001a7c:	f004 f942 	bl	8005d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40010400 	.word	0x40010400
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	58020800 	.word	0x58020800

08001a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a98:	f7ff fdf4 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	@ (8001ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	@ (8001ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f011 fab3 	bl	801302c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac6:	f7ff f84d 	bl	8000b64 <main>
  bx  lr
 8001aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001acc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ad0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ad4:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 8001ad8:	08016350 	.word	0x08016350
  ldr r2, =_sbss
 8001adc:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8001ae0:	2400237c 	.word	0x2400237c

08001ae4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC3_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aee:	2003      	movs	r0, #3
 8001af0:	f001 fd3b 	bl	800356a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001af4:	f007 f89c 	bl	8008c30 <HAL_RCC_GetSysClockFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <HAL_Init+0x68>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	4913      	ldr	r1, [pc, #76]	@ (8001b54 <HAL_Init+0x6c>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_Init+0x68>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b54 <HAL_Init+0x6c>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	4a0b      	ldr	r2, [pc, #44]	@ (8001b58 <HAL_Init+0x70>)
 8001b2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <HAL_Init+0x74>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b32:	200f      	movs	r0, #15
 8001b34:	f7ff fc12 	bl	800135c <HAL_InitTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e002      	b.n	8001b48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b42:	f7ff fbf1 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	58024400 	.word	0x58024400
 8001b54:	080151b0 	.word	0x080151b0
 8001b58:	24000008 	.word	0x24000008
 8001b5c:	24000004 	.word	0x24000004

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	24000010 	.word	0x24000010
 8001b84:	24000620 	.word	0x24000620

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	@ (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	24000620 	.word	0x24000620

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	24000010 	.word	0x24000010

08001be8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <HAL_GetREVID+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	5c001000 	.word	0x5c001000

08001c00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	609a      	str	r2, [r3, #8]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3360      	adds	r3, #96	@ 0x60
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	431a      	orrs	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b087      	sub	sp, #28
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3360      	adds	r3, #96	@ 0x60
 8001cea:	461a      	mov	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]
  }
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b087      	sub	sp, #28
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3330      	adds	r3, #48	@ 0x30
 8001d46:	461a      	mov	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	4413      	add	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	211f      	movs	r1, #31
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	401a      	ands	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	f003 011f 	and.w	r1, r3, #31
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f023 0203 	bic.w	r2, r3, #3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3314      	adds	r3, #20
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	0e5b      	lsrs	r3, r3, #25
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	0d1b      	lsrs	r3, r3, #20
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2107      	movs	r1, #7
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	401a      	ands	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	0d1b      	lsrs	r3, r3, #20
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0318 	and.w	r3, r3, #24
 8001e2e:	4908      	ldr	r1, [pc, #32]	@ (8001e50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e30:	40d9      	lsrs	r1, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	400b      	ands	r3, r1
 8001e36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	000fffff 	.word	0x000fffff

08001e54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 031f 	and.w	r3, r3, #31
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6093      	str	r3, [r2, #8]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	5fffffc0 	.word	0x5fffffc0

08001e94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ea8:	d101      	bne.n	8001eae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	6fffffc0 	.word	0x6fffffc0

08001ee4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <LL_ADC_Enable+0x24>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	7fffffc0 	.word	0x7fffffc0

08001f34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <LL_ADC_Disable+0x24>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	f043 0202 	orr.w	r2, r3, #2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	7fffffc0 	.word	0x7fffffc0

08001f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <LL_ADC_IsEnabled+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_ADC_IsEnabled+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_IsDisableOngoing+0x18>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_IsDisableOngoing+0x1a>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <LL_ADC_REG_StartConversion+0x24>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	f043 0204 	orr.w	r2, r3, #4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	7fffffc0 	.word	0x7fffffc0

08001fd0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d101      	bne.n	8001fe8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b08      	cmp	r3, #8
 8002008:	d101      	bne.n	800200e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e18f      	b.n	8002356 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe fa39 	bl	80004bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff19 	bl	8001e94 <LL_ADC_IsDeepPowerDownEnabled>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff feff 	bl	8001e70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff34 	bl	8001ee4 <LL_ADC_IsInternalRegulatorEnabled>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d114      	bne.n	80020ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff18 	bl	8001ebc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800208c:	4b87      	ldr	r3, [pc, #540]	@ (80022ac <HAL_ADC_Init+0x290>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	4a87      	ldr	r2, [pc, #540]	@ (80022b0 <HAL_ADC_Init+0x294>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	3301      	adds	r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800209e:	e002      	b.n	80020a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f9      	bne.n	80020a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff17 	bl	8001ee4 <LL_ADC_IsInternalRegulatorEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10d      	bne.n	80020d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c0:	f043 0210 	orr.w	r2, r3, #16
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff77 	bl	8001fd0 <LL_ADC_REG_IsConversionOngoing>
 80020e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 8129 	bne.w	8002344 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f040 8125 	bne.w	8002344 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002102:	f043 0202 	orr.w	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff24 	bl	8001f5c <LL_ADC_IsEnabled>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d136      	bne.n	8002188 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a65      	ldr	r2, [pc, #404]	@ (80022b4 <HAL_ADC_Init+0x298>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d004      	beq.n	800212e <HAL_ADC_Init+0x112>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a63      	ldr	r2, [pc, #396]	@ (80022b8 <HAL_ADC_Init+0x29c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d10e      	bne.n	800214c <HAL_ADC_Init+0x130>
 800212e:	4861      	ldr	r0, [pc, #388]	@ (80022b4 <HAL_ADC_Init+0x298>)
 8002130:	f7ff ff14 	bl	8001f5c <LL_ADC_IsEnabled>
 8002134:	4604      	mov	r4, r0
 8002136:	4860      	ldr	r0, [pc, #384]	@ (80022b8 <HAL_ADC_Init+0x29c>)
 8002138:	f7ff ff10 	bl	8001f5c <LL_ADC_IsEnabled>
 800213c:	4603      	mov	r3, r0
 800213e:	4323      	orrs	r3, r4
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e008      	b.n	800215e <HAL_ADC_Init+0x142>
 800214c:	485b      	ldr	r0, [pc, #364]	@ (80022bc <HAL_ADC_Init+0x2a0>)
 800214e:	f7ff ff05 	bl	8001f5c <LL_ADC_IsEnabled>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d012      	beq.n	8002188 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a53      	ldr	r2, [pc, #332]	@ (80022b4 <HAL_ADC_Init+0x298>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d004      	beq.n	8002176 <HAL_ADC_Init+0x15a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a51      	ldr	r2, [pc, #324]	@ (80022b8 <HAL_ADC_Init+0x29c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_ADC_Init+0x15e>
 8002176:	4a52      	ldr	r2, [pc, #328]	@ (80022c0 <HAL_ADC_Init+0x2a4>)
 8002178:	e000      	b.n	800217c <HAL_ADC_Init+0x160>
 800217a:	4a52      	ldr	r2, [pc, #328]	@ (80022c4 <HAL_ADC_Init+0x2a8>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f7ff fd3c 	bl	8001c00 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002188:	f7ff fd2e 	bl	8001be8 <HAL_GetREVID>
 800218c:	4603      	mov	r3, r0
 800218e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002192:	4293      	cmp	r3, r2
 8002194:	d914      	bls.n	80021c0 <HAL_ADC_Init+0x1a4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b10      	cmp	r3, #16
 800219c:	d110      	bne.n	80021c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7d5b      	ldrb	r3, [r3, #21]
 80021a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80021ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7f1b      	ldrb	r3, [r3, #28]
 80021b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80021b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021b8:	f043 030c 	orr.w	r3, r3, #12
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e00d      	b.n	80021dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7d5b      	ldrb	r3, [r3, #21]
 80021c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80021d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7f1b      	ldrb	r3, [r3, #28]
 80021d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7f1b      	ldrb	r3, [r3, #28]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	045b      	lsls	r3, r3, #17
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4b2c      	ldr	r3, [pc, #176]	@ (80022c8 <HAL_ADC_Init+0x2ac>)
 8002216:	4013      	ands	r3, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	69b9      	ldr	r1, [r7, #24]
 800221e:	430b      	orrs	r3, r1
 8002220:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fed2 	bl	8001fd0 <LL_ADC_REG_IsConversionOngoing>
 800222c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fedf 	bl	8001ff6 <LL_ADC_INJ_IsConversionOngoing>
 8002238:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d15f      	bne.n	8002300 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d15c      	bne.n	8002300 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7d1b      	ldrb	r3, [r3, #20]
 800224a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <HAL_ADC_Init+0x2b0>)
 800225c:	4013      	ands	r3, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	69b9      	ldr	r1, [r7, #24]
 8002264:	430b      	orrs	r3, r1
 8002266:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800226e:	2b01      	cmp	r3, #1
 8002270:	d130      	bne.n	80022d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <HAL_ADC_Init+0x2b4>)
 8002280:	4013      	ands	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002286:	3a01      	subs	r2, #1
 8002288:	0411      	lsls	r1, r2, #16
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002294:	4311      	orrs	r1, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800229a:	430a      	orrs	r2, r1
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	611a      	str	r2, [r3, #16]
 80022a8:	e01c      	b.n	80022e4 <HAL_ADC_Init+0x2c8>
 80022aa:	bf00      	nop
 80022ac:	24000004 	.word	0x24000004
 80022b0:	053e2d63 	.word	0x053e2d63
 80022b4:	40022000 	.word	0x40022000
 80022b8:	40022100 	.word	0x40022100
 80022bc:	58026000 	.word	0x58026000
 80022c0:	40022300 	.word	0x40022300
 80022c4:	58026300 	.word	0x58026300
 80022c8:	fff0c003 	.word	0xfff0c003
 80022cc:	ffffbffc 	.word	0xffffbffc
 80022d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fde0 	bl	8002ec0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10c      	bne.n	8002322 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f023 010f 	bic.w	r1, r3, #15
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	1e5a      	subs	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002320:	e007      	b.n	8002332 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 020f 	bic.w	r2, r2, #15
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	655a      	str	r2, [r3, #84]	@ 0x54
 8002342:	e007      	b.n	8002354 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002354:	7ffb      	ldrb	r3, [r7, #31]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	@ 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd90      	pop	{r4, r7, pc}
 800235e:	bf00      	nop

08002360 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a55      	ldr	r2, [pc, #340]	@ (80024c8 <HAL_ADC_Start_DMA+0x168>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_ADC_Start_DMA+0x20>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a54      	ldr	r2, [pc, #336]	@ (80024cc <HAL_ADC_Start_DMA+0x16c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_ADC_Start_DMA+0x24>
 8002380:	4b53      	ldr	r3, [pc, #332]	@ (80024d0 <HAL_ADC_Start_DMA+0x170>)
 8002382:	e000      	b.n	8002386 <HAL_ADC_Start_DMA+0x26>
 8002384:	4b53      	ldr	r3, [pc, #332]	@ (80024d4 <HAL_ADC_Start_DMA+0x174>)
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fd64 	bl	8001e54 <LL_ADC_GetMultimode>
 800238c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fe1c 	bl	8001fd0 <LL_ADC_REG_IsConversionOngoing>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 808c 	bne.w	80024b8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_Start_DMA+0x4e>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e087      	b.n	80024be <HAL_ADC_Start_DMA+0x15e>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d002      	beq.n	80023c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b09      	cmp	r3, #9
 80023c6:	d170      	bne.n	80024aa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fbfb 	bl	8002bc4 <ADC_Enable>
 80023ce:	4603      	mov	r3, r0
 80023d0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d163      	bne.n	80024a0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80023dc:	4b3e      	ldr	r3, [pc, #248]	@ (80024d8 <HAL_ADC_Start_DMA+0x178>)
 80023de:	4013      	ands	r3, r2
 80023e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a37      	ldr	r2, [pc, #220]	@ (80024cc <HAL_ADC_Start_DMA+0x16c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d002      	beq.n	80023f8 <HAL_ADC_Start_DMA+0x98>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e000      	b.n	80023fa <HAL_ADC_Start_DMA+0x9a>
 80023f8:	4b33      	ldr	r3, [pc, #204]	@ (80024c8 <HAL_ADC_Start_DMA+0x168>)
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	4293      	cmp	r3, r2
 8002400:	d002      	beq.n	8002408 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	f023 0206 	bic.w	r2, r3, #6
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	659a      	str	r2, [r3, #88]	@ 0x58
 800242c:	e002      	b.n	8002434 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002438:	4a28      	ldr	r2, [pc, #160]	@ (80024dc <HAL_ADC_Start_DMA+0x17c>)
 800243a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002440:	4a27      	ldr	r2, [pc, #156]	@ (80024e0 <HAL_ADC_Start_DMA+0x180>)
 8002442:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002448:	4a26      	ldr	r2, [pc, #152]	@ (80024e4 <HAL_ADC_Start_DMA+0x184>)
 800244a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	221c      	movs	r2, #28
 8002452:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0210 	orr.w	r2, r2, #16
 800246a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f7ff fc89 	bl	8001d8e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3340      	adds	r3, #64	@ 0x40
 8002486:	4619      	mov	r1, r3
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f001 febe 	bl	800420c <HAL_DMA_Start_IT>
 8002490:	4603      	mov	r3, r0
 8002492:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fd85 	bl	8001fa8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800249e:	e00d      	b.n	80024bc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80024a8:	e008      	b.n	80024bc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80024b6:	e001      	b.n	80024bc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
 80024ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40022000 	.word	0x40022000
 80024cc:	40022100 	.word	0x40022100
 80024d0:	40022300 	.word	0x40022300
 80024d4:	58026300 	.word	0x58026300
 80024d8:	fffff0fe 	.word	0xfffff0fe
 80024dc:	08002d97 	.word	0x08002d97
 80024e0:	08002e6f 	.word	0x08002e6f
 80024e4:	08002e8b 	.word	0x08002e8b

080024e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b0a1      	sub	sp, #132	@ 0x84
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a9d      	ldr	r2, [pc, #628]	@ (80027b4 <HAL_ADC_ConfigChannel+0x290>)
 800253e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x2a>
 800254a:	2302      	movs	r3, #2
 800254c:	e321      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x66e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fd38 	bl	8001fd0 <LL_ADC_REG_IsConversionOngoing>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 8306 	bne.w	8002b74 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x62>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	2201      	movs	r2, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	e016      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x90>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002596:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800259e:	2320      	movs	r3, #32
 80025a0:	e003      	b.n	80025aa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80025a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2201      	movs	r2, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	69d1      	ldr	r1, [r2, #28]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	430b      	orrs	r3, r1
 80025c0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f7ff fbb1 	bl	8001d36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fcf9 	bl	8001fd0 <LL_ADC_REG_IsConversionOngoing>
 80025de:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fd06 	bl	8001ff6 <LL_ADC_INJ_IsConversionOngoing>
 80025ea:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 80b3 	bne.w	800275a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 80af 	bne.w	800275a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	461a      	mov	r2, r3
 800260a:	f7ff fbd3 	bl	8001db4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800260e:	4b6a      	ldr	r3, [pc, #424]	@ (80027b8 <HAL_ADC_ConfigChannel+0x294>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800261a:	d10b      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x110>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	e01d      	b.n	8002670 <HAL_ADC_ConfigChannel+0x14c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10b      	bne.n	800265a <HAL_ADC_ConfigChannel+0x136>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	e00a      	b.n	8002670 <HAL_ADC_ConfigChannel+0x14c>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b04      	cmp	r3, #4
 8002678:	d027      	beq.n	80026ca <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6919      	ldr	r1, [r3, #16]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002688:	f7ff faee 	bl	8001c68 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6919      	ldr	r1, [r3, #16]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	7e5b      	ldrb	r3, [r3, #25]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d102      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x17e>
 800269c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80026a0:	e000      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x180>
 80026a2:	2300      	movs	r3, #0
 80026a4:	461a      	mov	r2, r3
 80026a6:	f7ff fb18 	bl	8001cda <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6919      	ldr	r1, [r3, #16]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	7e1b      	ldrb	r3, [r3, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x19c>
 80026ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026be:	e000      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x19e>
 80026c0:	2300      	movs	r3, #0
 80026c2:	461a      	mov	r2, r3
 80026c4:	f7ff faf0 	bl	8001ca8 <LL_ADC_SetDataRightShift>
 80026c8:	e047      	b.n	800275a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	069b      	lsls	r3, r3, #26
 80026da:	429a      	cmp	r2, r3
 80026dc:	d107      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026ec:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	069b      	lsls	r3, r3, #26
 80026fe:	429a      	cmp	r2, r3
 8002700:	d107      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002710:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002718:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	069b      	lsls	r3, r3, #26
 8002722:	429a      	cmp	r2, r3
 8002724:	d107      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002734:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800273c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	069b      	lsls	r3, r3, #26
 8002746:	429a      	cmp	r2, r3
 8002748:	d107      	bne.n	800275a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002758:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fbfc 	bl	8001f5c <LL_ADC_IsEnabled>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 820d 	bne.w	8002b86 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	461a      	mov	r2, r3
 800277a:	f7ff fb47 	bl	8001e0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4a0c      	ldr	r2, [pc, #48]	@ (80027b4 <HAL_ADC_ConfigChannel+0x290>)
 8002784:	4293      	cmp	r3, r2
 8002786:	f040 8133 	bne.w	80029f0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002796:	2b00      	cmp	r3, #0
 8002798:	d110      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x298>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	3301      	adds	r3, #1
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	2b09      	cmp	r3, #9
 80027a8:	bf94      	ite	ls
 80027aa:	2301      	movls	r3, #1
 80027ac:	2300      	movhi	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e01e      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x2cc>
 80027b2:	bf00      	nop
 80027b4:	47ff0000 	.word	0x47ff0000
 80027b8:	5c001000 	.word	0x5c001000
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80027d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2b09      	cmp	r3, #9
 80027e8:	bf94      	ite	ls
 80027ea:	2301      	movls	r3, #1
 80027ec:	2300      	movhi	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d079      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x2ec>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	3301      	adds	r3, #1
 8002808:	069b      	lsls	r3, r3, #26
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800280e:	e015      	b.n	800283c <HAL_ADC_ConfigChannel+0x318>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800281e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002820:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e003      	b.n	8002834 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800282c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3301      	adds	r3, #1
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_ADC_ConfigChannel+0x338>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	3301      	adds	r3, #1
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	2101      	movs	r1, #1
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	e017      	b.n	800288c <HAL_ADC_ConfigChannel+0x368>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800286a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800286c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800286e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e003      	b.n	8002880 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	ea42 0103 	orr.w	r1, r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x38e>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	3301      	adds	r3, #1
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	051b      	lsls	r3, r3, #20
 80028b0:	e018      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x3c0>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e003      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80028ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e4:	430b      	orrs	r3, r1
 80028e6:	e07e      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x3e0>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	3301      	adds	r3, #1
 80028fc:	069b      	lsls	r3, r3, #26
 80028fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002902:	e015      	b.n	8002930 <HAL_ADC_ConfigChannel+0x40c>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e003      	b.n	8002928 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3301      	adds	r3, #1
 800292a:	069b      	lsls	r3, r3, #26
 800292c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x42c>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	3301      	adds	r3, #1
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	e017      	b.n	8002980 <HAL_ADC_ConfigChannel+0x45c>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	61bb      	str	r3, [r7, #24]
  return result;
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	ea42 0103 	orr.w	r1, r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x488>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	3301      	adds	r3, #1
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	3b1e      	subs	r3, #30
 80029a4:	051b      	lsls	r3, r3, #20
 80029a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	e01b      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x4c0>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	60fb      	str	r3, [r7, #12]
  return result;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80029c4:	2320      	movs	r3, #32
 80029c6:	e003      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f003 021f 	and.w	r2, r3, #31
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	3b1e      	subs	r3, #30
 80029de:	051b      	lsls	r3, r3, #20
 80029e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e4:	430b      	orrs	r3, r1
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	6892      	ldr	r2, [r2, #8]
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7ff f9e2 	bl	8001db4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f280 80c6 	bge.w	8002b86 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a67      	ldr	r2, [pc, #412]	@ (8002b9c <HAL_ADC_ConfigChannel+0x678>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x4ea>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a65      	ldr	r2, [pc, #404]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x67c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x4ee>
 8002a0e:	4b65      	ldr	r3, [pc, #404]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x680>)
 8002a10:	e000      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x4f0>
 8002a12:	4b65      	ldr	r3, [pc, #404]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x684>)
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff f919 	bl	8001c4c <LL_ADC_GetCommonPathInternalCh>
 8002a1a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a5e      	ldr	r2, [pc, #376]	@ (8002b9c <HAL_ADC_ConfigChannel+0x678>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_ADC_ConfigChannel+0x50c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x67c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10e      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x52a>
 8002a30:	485a      	ldr	r0, [pc, #360]	@ (8002b9c <HAL_ADC_ConfigChannel+0x678>)
 8002a32:	f7ff fa93 	bl	8001f5c <LL_ADC_IsEnabled>
 8002a36:	4604      	mov	r4, r0
 8002a38:	4859      	ldr	r0, [pc, #356]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x67c>)
 8002a3a:	f7ff fa8f 	bl	8001f5c <LL_ADC_IsEnabled>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4323      	orrs	r3, r4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf0c      	ite	eq
 8002a46:	2301      	moveq	r3, #1
 8002a48:	2300      	movne	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	e008      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x53c>
 8002a4e:	4857      	ldr	r0, [pc, #348]	@ (8002bac <HAL_ADC_ConfigChannel+0x688>)
 8002a50:	f7ff fa84 	bl	8001f5c <LL_ADC_IsEnabled>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d07d      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a51      	ldr	r2, [pc, #324]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x68c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d130      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ac>
 8002a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d12b      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bac <HAL_ADC_ConfigChannel+0x688>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	f040 8081 	bne.w	8002b86 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a44      	ldr	r2, [pc, #272]	@ (8002b9c <HAL_ADC_ConfigChannel+0x678>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_ADC_ConfigChannel+0x574>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a43      	ldr	r2, [pc, #268]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x67c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x578>
 8002a98:	4a42      	ldr	r2, [pc, #264]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x680>)
 8002a9a:	e000      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x57a>
 8002a9c:	4a42      	ldr	r2, [pc, #264]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x684>)
 8002a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f7ff f8bd 	bl	8001c26 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aac:	4b41      	ldr	r3, [pc, #260]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x690>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	4a41      	ldr	r2, [pc, #260]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x694>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	3301      	adds	r3, #1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ac0:	e002      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f9      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ace:	e05a      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a39      	ldr	r2, [pc, #228]	@ (8002bbc <HAL_ADC_ConfigChannel+0x698>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d11e      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x5f4>
 8002ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d119      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a30      	ldr	r2, [pc, #192]	@ (8002bac <HAL_ADC_ConfigChannel+0x688>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d14b      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b9c <HAL_ADC_ConfigChannel+0x678>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_ADC_ConfigChannel+0x5de>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a28      	ldr	r2, [pc, #160]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x67c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x5e2>
 8002b02:	4a28      	ldr	r2, [pc, #160]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x680>)
 8002b04:	e000      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x5e4>
 8002b06:	4a28      	ldr	r2, [pc, #160]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x684>)
 8002b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4610      	mov	r0, r2
 8002b12:	f7ff f888 	bl	8001c26 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b16:	e036      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a28      	ldr	r2, [pc, #160]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x69c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d131      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x662>
 8002b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d12c      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1e      	ldr	r2, [pc, #120]	@ (8002bac <HAL_ADC_ConfigChannel+0x688>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d127      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a18      	ldr	r2, [pc, #96]	@ (8002b9c <HAL_ADC_ConfigChannel+0x678>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_ADC_ConfigChannel+0x626>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x67c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x62a>
 8002b4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x680>)
 8002b4c:	e000      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x62c>
 8002b4e:	4a16      	ldr	r2, [pc, #88]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x684>)
 8002b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f7ff f864 	bl	8001c26 <LL_ADC_SetCommonPathInternalCh>
 8002b5e:	e012      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002b72:	e008      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3784      	adds	r7, #132	@ 0x84
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40022100 	.word	0x40022100
 8002ba4:	40022300 	.word	0x40022300
 8002ba8:	58026300 	.word	0x58026300
 8002bac:	58026000 	.word	0x58026000
 8002bb0:	cb840000 	.word	0xcb840000
 8002bb4:	24000004 	.word	0x24000004
 8002bb8:	053e2d63 	.word	0x053e2d63
 8002bbc:	c7520000 	.word	0xc7520000
 8002bc0:	cfb80000 	.word	0xcfb80000

08002bc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff f9c3 	bl	8001f5c <LL_ADC_IsEnabled>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d16e      	bne.n	8002cba <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	4b38      	ldr	r3, [pc, #224]	@ (8002cc4 <ADC_Enable+0x100>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e05a      	b.n	8002cbc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f97e 	bl	8001f0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c10:	f7fe ffba 	bl	8001b88 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc8 <ADC_Enable+0x104>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <ADC_Enable+0x66>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a29      	ldr	r2, [pc, #164]	@ (8002ccc <ADC_Enable+0x108>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <ADC_Enable+0x6a>
 8002c2a:	4b29      	ldr	r3, [pc, #164]	@ (8002cd0 <ADC_Enable+0x10c>)
 8002c2c:	e000      	b.n	8002c30 <ADC_Enable+0x6c>
 8002c2e:	4b29      	ldr	r3, [pc, #164]	@ (8002cd4 <ADC_Enable+0x110>)
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff f90f 	bl	8001e54 <LL_ADC_GetMultimode>
 8002c36:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a23      	ldr	r2, [pc, #140]	@ (8002ccc <ADC_Enable+0x108>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d002      	beq.n	8002c48 <ADC_Enable+0x84>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	e000      	b.n	8002c4a <ADC_Enable+0x86>
 8002c48:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc8 <ADC_Enable+0x104>)
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d02c      	beq.n	8002cac <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d130      	bne.n	8002cba <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c58:	e028      	b.n	8002cac <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff f97c 	bl	8001f5c <LL_ADC_IsEnabled>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d104      	bne.n	8002c74 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f94c 	bl	8001f0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c74:	f7fe ff88 	bl	8001b88 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d914      	bls.n	8002cac <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d00d      	beq.n	8002cac <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	f043 0210 	orr.w	r2, r3, #16
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e007      	b.n	8002cbc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d1cf      	bne.n	8002c5a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	8000003f 	.word	0x8000003f
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	40022100 	.word	0x40022100
 8002cd0:	40022300 	.word	0x40022300
 8002cd4:	58026300 	.word	0x58026300

08002cd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff f94c 	bl	8001f82 <LL_ADC_IsDisableOngoing>
 8002cea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff f933 	bl	8001f5c <LL_ADC_IsEnabled>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d047      	beq.n	8002d8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d144      	bne.n	8002d8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 030d 	and.w	r3, r3, #13
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d10c      	bne.n	8002d2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff f90d 	bl	8001f34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d22:	f7fe ff31 	bl	8001b88 <HAL_GetTick>
 8002d26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d28:	e029      	b.n	8002d7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2e:	f043 0210 	orr.w	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e023      	b.n	8002d8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d46:	f7fe ff1f 	bl	8001b88 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d914      	bls.n	8002d7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00d      	beq.n	8002d7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d66:	f043 0210 	orr.w	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e007      	b.n	8002d8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1dc      	bne.n	8002d46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d14b      	bne.n	8002e48 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d021      	beq.n	8002e0e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe ff9e 	bl	8001d10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d032      	beq.n	8002e40 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d12b      	bne.n	8002e40 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11f      	bne.n	8002e40 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e0c:	e018      	b.n	8002e40 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d111      	bne.n	8002e40 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff fb51 	bl	80024e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e46:	e00e      	b.n	8002e66 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff fb5b 	bl	8002510 <HAL_ADC_ErrorCallback>
}
 8002e5a:	e004      	b.n	8002e66 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff fb3d 	bl	80024fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	f043 0204 	orr.w	r2, r3, #4
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fb2d 	bl	8002510 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a7a      	ldr	r2, [pc, #488]	@ (80030b8 <ADC_ConfigureBoostMode+0x1f8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <ADC_ConfigureBoostMode+0x1c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a79      	ldr	r2, [pc, #484]	@ (80030bc <ADC_ConfigureBoostMode+0x1fc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d109      	bne.n	8002ef0 <ADC_ConfigureBoostMode+0x30>
 8002edc:	4b78      	ldr	r3, [pc, #480]	@ (80030c0 <ADC_ConfigureBoostMode+0x200>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e008      	b.n	8002f02 <ADC_ConfigureBoostMode+0x42>
 8002ef0:	4b74      	ldr	r3, [pc, #464]	@ (80030c4 <ADC_ConfigureBoostMode+0x204>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01c      	beq.n	8002f40 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f06:	f006 f80d 	bl	8008f24 <HAL_RCC_GetHCLKFreq>
 8002f0a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f14:	d010      	beq.n	8002f38 <ADC_ConfigureBoostMode+0x78>
 8002f16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f1a:	d873      	bhi.n	8003004 <ADC_ConfigureBoostMode+0x144>
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f20:	d002      	beq.n	8002f28 <ADC_ConfigureBoostMode+0x68>
 8002f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f26:	d16d      	bne.n	8003004 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	0c1b      	lsrs	r3, r3, #16
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	60fb      	str	r3, [r7, #12]
        break;
 8002f36:	e068      	b.n	800300a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	60fb      	str	r3, [r7, #12]
        break;
 8002f3e:	e064      	b.n	800300a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f40:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	f007 fa7e 	bl	800a448 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f56:	d051      	beq.n	8002ffc <ADC_ConfigureBoostMode+0x13c>
 8002f58:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f5c:	d854      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x148>
 8002f5e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f62:	d047      	beq.n	8002ff4 <ADC_ConfigureBoostMode+0x134>
 8002f64:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f68:	d84e      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x148>
 8002f6a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f6e:	d03d      	beq.n	8002fec <ADC_ConfigureBoostMode+0x12c>
 8002f70:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f74:	d848      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x148>
 8002f76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f7a:	d033      	beq.n	8002fe4 <ADC_ConfigureBoostMode+0x124>
 8002f7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f80:	d842      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x148>
 8002f82:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f86:	d029      	beq.n	8002fdc <ADC_ConfigureBoostMode+0x11c>
 8002f88:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f8c:	d83c      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x148>
 8002f8e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f92:	d01a      	beq.n	8002fca <ADC_ConfigureBoostMode+0x10a>
 8002f94:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f98:	d836      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x148>
 8002f9a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f9e:	d014      	beq.n	8002fca <ADC_ConfigureBoostMode+0x10a>
 8002fa0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fa4:	d830      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x148>
 8002fa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002faa:	d00e      	beq.n	8002fca <ADC_ConfigureBoostMode+0x10a>
 8002fac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fb0:	d82a      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x148>
 8002fb2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fb6:	d008      	beq.n	8002fca <ADC_ConfigureBoostMode+0x10a>
 8002fb8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fbc:	d824      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x148>
 8002fbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fc2:	d002      	beq.n	8002fca <ADC_ConfigureBoostMode+0x10a>
 8002fc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fc8:	d11e      	bne.n	8003008 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	0c9b      	lsrs	r3, r3, #18
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd8:	60fb      	str	r3, [r7, #12]
        break;
 8002fda:	e016      	b.n	800300a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
        break;
 8002fe2:	e012      	b.n	800300a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	60fb      	str	r3, [r7, #12]
        break;
 8002fea:	e00e      	b.n	800300a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	099b      	lsrs	r3, r3, #6
 8002ff0:	60fb      	str	r3, [r7, #12]
        break;
 8002ff2:	e00a      	b.n	800300a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	09db      	lsrs	r3, r3, #7
 8002ff8:	60fb      	str	r3, [r7, #12]
        break;
 8002ffa:	e006      	b.n	800300a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	60fb      	str	r3, [r7, #12]
        break;
 8003002:	e002      	b.n	800300a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003004:	bf00      	nop
 8003006:	e000      	b.n	800300a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003008:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800300a:	f7fe fded 	bl	8001be8 <HAL_GetREVID>
 800300e:	4603      	mov	r3, r0
 8003010:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003014:	4293      	cmp	r3, r2
 8003016:	d815      	bhi.n	8003044 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a2b      	ldr	r2, [pc, #172]	@ (80030c8 <ADC_ConfigureBoostMode+0x208>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d908      	bls.n	8003032 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800302e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003030:	e03e      	b.n	80030b0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003040:	609a      	str	r2, [r3, #8]
}
 8003042:	e035      	b.n	80030b0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a1f      	ldr	r2, [pc, #124]	@ (80030cc <ADC_ConfigureBoostMode+0x20c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d808      	bhi.n	8003064 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003060:	609a      	str	r2, [r3, #8]
}
 8003062:	e025      	b.n	80030b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a1a      	ldr	r2, [pc, #104]	@ (80030d0 <ADC_ConfigureBoostMode+0x210>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d80a      	bhi.n	8003082 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800307e:	609a      	str	r2, [r3, #8]
}
 8003080:	e016      	b.n	80030b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a13      	ldr	r2, [pc, #76]	@ (80030d4 <ADC_ConfigureBoostMode+0x214>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d80a      	bhi.n	80030a0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800309c:	609a      	str	r2, [r3, #8]
}
 800309e:	e007      	b.n	80030b0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40022000 	.word	0x40022000
 80030bc:	40022100 	.word	0x40022100
 80030c0:	40022300 	.word	0x40022300
 80030c4:	58026300 	.word	0x58026300
 80030c8:	01312d00 	.word	0x01312d00
 80030cc:	005f5e10 	.word	0x005f5e10
 80030d0:	00bebc20 	.word	0x00bebc20
 80030d4:	017d7840 	.word	0x017d7840

080030d8 <LL_ADC_IsEnabled>:
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <LL_ADC_IsEnabled+0x18>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <LL_ADC_IsEnabled+0x1a>
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <LL_ADC_StartCalibration>:
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <LL_ADC_StartCalibration+0x38>)
 8003112:	4013      	ands	r3, r2
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003120:	430a      	orrs	r2, r1
 8003122:	4313      	orrs	r3, r2
 8003124:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	3ffeffc0 	.word	0x3ffeffc0

0800313c <LL_ADC_IsCalibrationOnGoing>:
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800314c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003150:	d101      	bne.n	8003156 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_REG_IsConversionOngoing>:
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b04      	cmp	r3, #4
 8003176:	d101      	bne.n	800317c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_ADCEx_Calibration_Start+0x1e>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e04c      	b.n	8003244 <HAL_ADCEx_Calibration_Start+0xb8>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff fd90 	bl	8002cd8 <ADC_Disable>
 80031b8:	4603      	mov	r3, r0
 80031ba:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d135      	bne.n	800322e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031c6:	4b21      	ldr	r3, [pc, #132]	@ (800324c <HAL_ADCEx_Calibration_Start+0xc0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff ff90 	bl	8003100 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031e0:	e014      	b.n	800320c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	3301      	adds	r3, #1
 80031e6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4a19      	ldr	r2, [pc, #100]	@ (8003250 <HAL_ADCEx_Calibration_Start+0xc4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d30d      	bcc.n	800320c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	f023 0312 	bic.w	r3, r3, #18
 80031f8:	f043 0210 	orr.w	r2, r3, #16
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e01b      	b.n	8003244 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff93 	bl	800313c <LL_ADC_IsCalibrationOnGoing>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e2      	bne.n	80031e2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003220:	f023 0303 	bic.w	r3, r3, #3
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	655a      	str	r2, [r3, #84]	@ 0x54
 800322c:	e005      	b.n	800323a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	f043 0210 	orr.w	r2, r3, #16
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	ffffeefd 	.word	0xffffeefd
 8003250:	25c3f800 	.word	0x25c3f800

08003254 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b09f      	sub	sp, #124	@ 0x7c
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800326e:	2302      	movs	r3, #2
 8003270:	e0be      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800327e:	2300      	movs	r3, #0
 8003280:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a5c      	ldr	r2, [pc, #368]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d102      	bne.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800328c:	4b5b      	ldr	r3, [pc, #364]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	e001      	b.n	8003296 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e09d      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff54 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 80032bc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff4e 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d17f      	bne.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d17c      	bne.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a47      	ldr	r2, [pc, #284]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a46      	ldr	r2, [pc, #280]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80032e8:	4b45      	ldr	r3, [pc, #276]	@ (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80032ea:	e000      	b.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80032ec:	4b45      	ldr	r3, [pc, #276]	@ (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d039      	beq.n	800336c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	431a      	orrs	r2, r3
 8003306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003308:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3a      	ldr	r2, [pc, #232]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a38      	ldr	r2, [pc, #224]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10e      	bne.n	800333c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800331e:	4836      	ldr	r0, [pc, #216]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003320:	f7ff feda 	bl	80030d8 <LL_ADC_IsEnabled>
 8003324:	4604      	mov	r4, r0
 8003326:	4835      	ldr	r0, [pc, #212]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003328:	f7ff fed6 	bl	80030d8 <LL_ADC_IsEnabled>
 800332c:	4603      	mov	r3, r0
 800332e:	4323      	orrs	r3, r4
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e008      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800333c:	4832      	ldr	r0, [pc, #200]	@ (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800333e:	f7ff fecb 	bl	80030d8 <LL_ADC_IsEnabled>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d047      	beq.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	4b2d      	ldr	r3, [pc, #180]	@ (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003358:	4013      	ands	r3, r2
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6811      	ldr	r1, [r2, #0]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	6892      	ldr	r2, [r2, #8]
 8003362:	430a      	orrs	r2, r1
 8003364:	431a      	orrs	r2, r3
 8003366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003368:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800336a:	e03a      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800336c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003376:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1e      	ldr	r2, [pc, #120]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1d      	ldr	r2, [pc, #116]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d10e      	bne.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800338c:	481a      	ldr	r0, [pc, #104]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800338e:	f7ff fea3 	bl	80030d8 <LL_ADC_IsEnabled>
 8003392:	4604      	mov	r4, r0
 8003394:	4819      	ldr	r0, [pc, #100]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003396:	f7ff fe9f 	bl	80030d8 <LL_ADC_IsEnabled>
 800339a:	4603      	mov	r3, r0
 800339c:	4323      	orrs	r3, r4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	e008      	b.n	80033bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80033aa:	4817      	ldr	r0, [pc, #92]	@ (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033ac:	f7ff fe94 	bl	80030d8 <LL_ADC_IsEnabled>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d010      	beq.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	4b11      	ldr	r3, [pc, #68]	@ (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033ca:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033cc:	e009      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80033e0:	e000      	b.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033ec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	377c      	adds	r7, #124	@ 0x7c
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd90      	pop	{r4, r7, pc}
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40022100 	.word	0x40022100
 8003400:	40022300 	.word	0x40022300
 8003404:	58026300 	.word	0x58026300
 8003408:	58026000 	.word	0x58026000
 800340c:	fffff0e0 	.word	0xfffff0e0

08003410 <__NVIC_SetPriorityGrouping>:
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <__NVIC_SetPriorityGrouping+0x40>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800342c:	4013      	ands	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003438:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	4313      	orrs	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343e:	4a04      	ldr	r2, [pc, #16]	@ (8003450 <__NVIC_SetPriorityGrouping+0x40>)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	60d3      	str	r3, [r2, #12]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00
 8003454:	05fa0000 	.word	0x05fa0000

08003458 <__NVIC_GetPriorityGrouping>:
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <__NVIC_GetPriorityGrouping+0x18>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	0a1b      	lsrs	r3, r3, #8
 8003462:	f003 0307 	and.w	r3, r3, #7
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_EnableIRQ>:
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800347e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db0b      	blt.n	800349e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	4907      	ldr	r1, [pc, #28]	@ (80034ac <__NVIC_EnableIRQ+0x38>)
 800348e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	e000e100 	.word	0xe000e100

080034b0 <__NVIC_SetPriority>:
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	db0a      	blt.n	80034da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	490c      	ldr	r1, [pc, #48]	@ (80034fc <__NVIC_SetPriority+0x4c>)
 80034ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	440b      	add	r3, r1
 80034d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80034d8:	e00a      	b.n	80034f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4908      	ldr	r1, [pc, #32]	@ (8003500 <__NVIC_SetPriority+0x50>)
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3b04      	subs	r3, #4
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	440b      	add	r3, r1
 80034ee:	761a      	strb	r2, [r3, #24]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000e100 	.word	0xe000e100
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <NVIC_EncodePriority>:
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	@ 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f1c3 0307 	rsb	r3, r3, #7
 800351e:	2b04      	cmp	r3, #4
 8003520:	bf28      	it	cs
 8003522:	2304      	movcs	r3, #4
 8003524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3304      	adds	r3, #4
 800352a:	2b06      	cmp	r3, #6
 800352c:	d902      	bls.n	8003534 <NVIC_EncodePriority+0x30>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3b03      	subs	r3, #3
 8003532:	e000      	b.n	8003536 <NVIC_EncodePriority+0x32>
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	401a      	ands	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800354c:	f04f 31ff 	mov.w	r1, #4294967295
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	43d9      	mvns	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	4313      	orrs	r3, r2
}
 800355e:	4618      	mov	r0, r3
 8003560:	3724      	adds	r7, #36	@ 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ff4c 	bl	8003410 <__NVIC_SetPriorityGrouping>
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800358e:	f7ff ff63 	bl	8003458 <__NVIC_GetPriorityGrouping>
 8003592:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	6978      	ldr	r0, [r7, #20]
 800359a:	f7ff ffb3 	bl	8003504 <NVIC_EncodePriority>
 800359e:	4602      	mov	r2, r0
 80035a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff82 	bl	80034b0 <__NVIC_SetPriority>
}
 80035ac:	bf00      	nop
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff ff56 	bl	8003474 <__NVIC_EnableIRQ>
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80035d4:	f3bf 8f5f 	dmb	sy
}
 80035d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <HAL_MPU_Disable+0x28>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	4a06      	ldr	r2, [pc, #24]	@ (80035f8 <HAL_MPU_Disable+0x28>)
 80035e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80035e6:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_MPU_Disable+0x2c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	605a      	str	r2, [r3, #4]
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000ed00 	.word	0xe000ed00
 80035fc:	e000ed90 	.word	0xe000ed90

08003600 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003608:	4a0b      	ldr	r2, [pc, #44]	@ (8003638 <HAL_MPU_Enable+0x38>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003612:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <HAL_MPU_Enable+0x3c>)
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	4a09      	ldr	r2, [pc, #36]	@ (800363c <HAL_MPU_Enable+0x3c>)
 8003618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800361c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800361e:	f3bf 8f4f 	dsb	sy
}
 8003622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003624:	f3bf 8f6f 	isb	sy
}
 8003628:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000ed90 	.word	0xe000ed90
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	785a      	ldrb	r2, [r3, #1]
 800364c:	4b1d      	ldr	r3, [pc, #116]	@ (80036c4 <HAL_MPU_ConfigRegion+0x84>)
 800364e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d029      	beq.n	80036ac <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003658:	4a1a      	ldr	r2, [pc, #104]	@ (80036c4 <HAL_MPU_ConfigRegion+0x84>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	7b1b      	ldrb	r3, [r3, #12]
 8003664:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7adb      	ldrb	r3, [r3, #11]
 800366a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800366c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7a9b      	ldrb	r3, [r3, #10]
 8003672:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003674:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7b5b      	ldrb	r3, [r3, #13]
 800367a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800367c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	7b9b      	ldrb	r3, [r3, #14]
 8003682:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003684:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	7bdb      	ldrb	r3, [r3, #15]
 800368a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800368c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7a5b      	ldrb	r3, [r3, #9]
 8003692:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003694:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7a1b      	ldrb	r3, [r3, #8]
 800369a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800369c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036a4:	4a07      	ldr	r2, [pc, #28]	@ (80036c4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80036a6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036a8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80036aa:	e005      	b.n	80036b8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <HAL_MPU_ConfigRegion+0x84>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80036b2:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <HAL_MPU_ConfigRegion+0x84>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	611a      	str	r2, [r3, #16]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed90 	.word	0xe000ed90

080036c8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e014      	b.n	8003704 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	791b      	ldrb	r3, [r3, #4]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fc ffe2 	bl	80006b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	795b      	ldrb	r3, [r3, #5]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_DAC_Start+0x16>
 800371e:	2302      	movs	r3, #2
 8003720:	e040      	b.n	80037a4 <HAL_DAC_Start+0x98>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2201      	movs	r2, #1
 800373c:	409a      	lsls	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10f      	bne.n	800376c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003756:	2b02      	cmp	r3, #2
 8003758:	d11d      	bne.n	8003796 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	e014      	b.n	8003796 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2102      	movs	r1, #2
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	429a      	cmp	r2, r3
 8003784:	d107      	bne.n	8003796 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0202 	orr.w	r2, r2, #2
 8003794:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c6:	d120      	bne.n	800380a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d6:	d118      	bne.n	800380a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2204      	movs	r2, #4
 80037dc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003802:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f852 	bl	80038ae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003818:	d120      	bne.n	800385c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003828:	d118      	bne.n	800385c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2204      	movs	r2, #4
 800382e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f043 0202 	orr.w	r2, r3, #2
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003844:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003854:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f972 	bl	8003b40 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4413      	add	r3, r2
 8003888:	3308      	adds	r3, #8
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e004      	b.n	8003898 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4413      	add	r3, r2
 8003894:	3314      	adds	r3, #20
 8003896:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	461a      	mov	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	795b      	ldrb	r3, [r3, #5]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_DAC_ConfigChannel+0x18>
 80038d8:	2302      	movs	r3, #2
 80038da:	e12a      	b.n	8003b32 <HAL_DAC_ConfigChannel+0x26e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2202      	movs	r2, #2
 80038e6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	f040 8081 	bne.w	80039f4 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80038f2:	f7fe f949 	bl	8001b88 <HAL_GetTick>
 80038f6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d140      	bne.n	8003980 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038fe:	e018      	b.n	8003932 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003900:	f7fe f942 	bl	8001b88 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d911      	bls.n	8003932 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003914:	4b89      	ldr	r3, [pc, #548]	@ (8003b3c <HAL_DAC_ConfigChannel+0x278>)
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f043 0208 	orr.w	r2, r3, #8
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2203      	movs	r2, #3
 800392c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e0ff      	b.n	8003b32 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003938:	4b80      	ldr	r3, [pc, #512]	@ (8003b3c <HAL_DAC_ConfigChannel+0x278>)
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1df      	bne.n	8003900 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8003940:	2001      	movs	r0, #1
 8003942:	f7fe f92d 	bl	8001ba0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	6992      	ldr	r2, [r2, #24]
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003950:	e023      	b.n	800399a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003952:	f7fe f919 	bl	8001b88 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d90f      	bls.n	8003980 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003966:	2b00      	cmp	r3, #0
 8003968:	da0a      	bge.n	8003980 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f043 0208 	orr.w	r2, r3, #8
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2203      	movs	r2, #3
 800397a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e0d8      	b.n	8003b32 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003986:	2b00      	cmp	r3, #0
 8003988:	dbe3      	blt.n	8003952 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800398a:	2001      	movs	r0, #1
 800398c:	f7fe f908 	bl	8001ba0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	6992      	ldr	r2, [r2, #24]
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	ea02 0103 	and.w	r1, r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	409a      	lsls	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	21ff      	movs	r1, #255	@ 0xff
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	ea02 0103 	and.w	r1, r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	409a      	lsls	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d11d      	bne.n	8003a38 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a02:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	221f      	movs	r2, #31
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4013      	ands	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2207      	movs	r2, #7
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4013      	ands	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d102      	bne.n	8003a62 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	e00f      	b.n	8003a82 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d102      	bne.n	8003a70 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	e008      	b.n	8003a82 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	61fb      	str	r3, [r7, #28]
 8003a7c:	e001      	b.n	8003a82 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43da      	mvns	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6819      	ldr	r1, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	22c0      	movs	r2, #192	@ 0xc0
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	400a      	ands	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20008000 	.word	0x20008000

08003b40 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003b5c:	f7fe f814 	bl	8001b88 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e316      	b.n	800419a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a66      	ldr	r2, [pc, #408]	@ (8003d0c <HAL_DMA_Init+0x1b8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d04a      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a65      	ldr	r2, [pc, #404]	@ (8003d10 <HAL_DMA_Init+0x1bc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d045      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a63      	ldr	r2, [pc, #396]	@ (8003d14 <HAL_DMA_Init+0x1c0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d040      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a62      	ldr	r2, [pc, #392]	@ (8003d18 <HAL_DMA_Init+0x1c4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d03b      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a60      	ldr	r2, [pc, #384]	@ (8003d1c <HAL_DMA_Init+0x1c8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d036      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a5f      	ldr	r2, [pc, #380]	@ (8003d20 <HAL_DMA_Init+0x1cc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d031      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a5d      	ldr	r2, [pc, #372]	@ (8003d24 <HAL_DMA_Init+0x1d0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d02c      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a5c      	ldr	r2, [pc, #368]	@ (8003d28 <HAL_DMA_Init+0x1d4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d027      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a5a      	ldr	r2, [pc, #360]	@ (8003d2c <HAL_DMA_Init+0x1d8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d022      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a59      	ldr	r2, [pc, #356]	@ (8003d30 <HAL_DMA_Init+0x1dc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d01d      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a57      	ldr	r2, [pc, #348]	@ (8003d34 <HAL_DMA_Init+0x1e0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d018      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a56      	ldr	r2, [pc, #344]	@ (8003d38 <HAL_DMA_Init+0x1e4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d013      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a54      	ldr	r2, [pc, #336]	@ (8003d3c <HAL_DMA_Init+0x1e8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00e      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a53      	ldr	r2, [pc, #332]	@ (8003d40 <HAL_DMA_Init+0x1ec>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d009      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a51      	ldr	r2, [pc, #324]	@ (8003d44 <HAL_DMA_Init+0x1f0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_DMA_Init+0xb8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a50      	ldr	r2, [pc, #320]	@ (8003d48 <HAL_DMA_Init+0x1f4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_DMA_Init+0xbc>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_DMA_Init+0xbe>
 8003c10:	2300      	movs	r3, #0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 813b 	beq.w	8003e8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a37      	ldr	r2, [pc, #220]	@ (8003d0c <HAL_DMA_Init+0x1b8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d04a      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a36      	ldr	r2, [pc, #216]	@ (8003d10 <HAL_DMA_Init+0x1bc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d045      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a34      	ldr	r2, [pc, #208]	@ (8003d14 <HAL_DMA_Init+0x1c0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d040      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a33      	ldr	r2, [pc, #204]	@ (8003d18 <HAL_DMA_Init+0x1c4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d03b      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a31      	ldr	r2, [pc, #196]	@ (8003d1c <HAL_DMA_Init+0x1c8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d036      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a30      	ldr	r2, [pc, #192]	@ (8003d20 <HAL_DMA_Init+0x1cc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d031      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2e      	ldr	r2, [pc, #184]	@ (8003d24 <HAL_DMA_Init+0x1d0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d02c      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2d      	ldr	r2, [pc, #180]	@ (8003d28 <HAL_DMA_Init+0x1d4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d027      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d2c <HAL_DMA_Init+0x1d8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d022      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a2a      	ldr	r2, [pc, #168]	@ (8003d30 <HAL_DMA_Init+0x1dc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d01d      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a28      	ldr	r2, [pc, #160]	@ (8003d34 <HAL_DMA_Init+0x1e0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d018      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a27      	ldr	r2, [pc, #156]	@ (8003d38 <HAL_DMA_Init+0x1e4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a25      	ldr	r2, [pc, #148]	@ (8003d3c <HAL_DMA_Init+0x1e8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00e      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a24      	ldr	r2, [pc, #144]	@ (8003d40 <HAL_DMA_Init+0x1ec>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d009      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a22      	ldr	r2, [pc, #136]	@ (8003d44 <HAL_DMA_Init+0x1f0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <HAL_DMA_Init+0x174>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a21      	ldr	r2, [pc, #132]	@ (8003d48 <HAL_DMA_Init+0x1f4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <HAL_DMA_Init+0x186>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e007      	b.n	8003cea <HAL_DMA_Init+0x196>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cea:	e02f      	b.n	8003d4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cec:	f7fd ff4c 	bl	8001b88 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d928      	bls.n	8003d4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2203      	movs	r2, #3
 8003d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e246      	b.n	800419a <HAL_DMA_Init+0x646>
 8003d0c:	40020010 	.word	0x40020010
 8003d10:	40020028 	.word	0x40020028
 8003d14:	40020040 	.word	0x40020040
 8003d18:	40020058 	.word	0x40020058
 8003d1c:	40020070 	.word	0x40020070
 8003d20:	40020088 	.word	0x40020088
 8003d24:	400200a0 	.word	0x400200a0
 8003d28:	400200b8 	.word	0x400200b8
 8003d2c:	40020410 	.word	0x40020410
 8003d30:	40020428 	.word	0x40020428
 8003d34:	40020440 	.word	0x40020440
 8003d38:	40020458 	.word	0x40020458
 8003d3c:	40020470 	.word	0x40020470
 8003d40:	40020488 	.word	0x40020488
 8003d44:	400204a0 	.word	0x400204a0
 8003d48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1c8      	bne.n	8003cec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4b83      	ldr	r3, [pc, #524]	@ (8003f74 <HAL_DMA_Init+0x420>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003d72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d107      	bne.n	8003db0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	4313      	orrs	r3, r2
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003db0:	4b71      	ldr	r3, [pc, #452]	@ (8003f78 <HAL_DMA_Init+0x424>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b71      	ldr	r3, [pc, #452]	@ (8003f7c <HAL_DMA_Init+0x428>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dbc:	d328      	bcc.n	8003e10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b28      	cmp	r3, #40	@ 0x28
 8003dc4:	d903      	bls.n	8003dce <HAL_DMA_Init+0x27a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dcc:	d917      	bls.n	8003dfe <HAL_DMA_Init+0x2aa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dd4:	d903      	bls.n	8003dde <HAL_DMA_Init+0x28a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b42      	cmp	r3, #66	@ 0x42
 8003ddc:	d90f      	bls.n	8003dfe <HAL_DMA_Init+0x2aa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b46      	cmp	r3, #70	@ 0x46
 8003de4:	d903      	bls.n	8003dee <HAL_DMA_Init+0x29a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b48      	cmp	r3, #72	@ 0x48
 8003dec:	d907      	bls.n	8003dfe <HAL_DMA_Init+0x2aa>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b4e      	cmp	r3, #78	@ 0x4e
 8003df4:	d905      	bls.n	8003e02 <HAL_DMA_Init+0x2ae>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b52      	cmp	r3, #82	@ 0x52
 8003dfc:	d801      	bhi.n	8003e02 <HAL_DMA_Init+0x2ae>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_DMA_Init+0x2b0>
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f023 0307 	bic.w	r3, r3, #7
 8003e26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d117      	bne.n	8003e6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f001 fdcf 	bl	80059f0 <DMA_CheckFifoParam>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2240      	movs	r2, #64	@ 0x40
 8003e5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e197      	b.n	800419a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f001 fd0a 	bl	800588c <DMA_CalcBaseAndBitshift>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	223f      	movs	r2, #63	@ 0x3f
 8003e86:	409a      	lsls	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	e0cd      	b.n	800402a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a3b      	ldr	r2, [pc, #236]	@ (8003f80 <HAL_DMA_Init+0x42c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <HAL_DMA_Init+0x38a>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a39      	ldr	r2, [pc, #228]	@ (8003f84 <HAL_DMA_Init+0x430>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01d      	beq.n	8003ede <HAL_DMA_Init+0x38a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a38      	ldr	r2, [pc, #224]	@ (8003f88 <HAL_DMA_Init+0x434>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_DMA_Init+0x38a>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a36      	ldr	r2, [pc, #216]	@ (8003f8c <HAL_DMA_Init+0x438>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_DMA_Init+0x38a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a35      	ldr	r2, [pc, #212]	@ (8003f90 <HAL_DMA_Init+0x43c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_DMA_Init+0x38a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a33      	ldr	r2, [pc, #204]	@ (8003f94 <HAL_DMA_Init+0x440>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_DMA_Init+0x38a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a32      	ldr	r2, [pc, #200]	@ (8003f98 <HAL_DMA_Init+0x444>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_DMA_Init+0x38a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a30      	ldr	r2, [pc, #192]	@ (8003f9c <HAL_DMA_Init+0x448>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_DMA_Init+0x38e>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_DMA_Init+0x390>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8097 	beq.w	8004018 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a24      	ldr	r2, [pc, #144]	@ (8003f80 <HAL_DMA_Init+0x42c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d021      	beq.n	8003f38 <HAL_DMA_Init+0x3e4>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a22      	ldr	r2, [pc, #136]	@ (8003f84 <HAL_DMA_Init+0x430>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01c      	beq.n	8003f38 <HAL_DMA_Init+0x3e4>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a21      	ldr	r2, [pc, #132]	@ (8003f88 <HAL_DMA_Init+0x434>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d017      	beq.n	8003f38 <HAL_DMA_Init+0x3e4>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f8c <HAL_DMA_Init+0x438>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d012      	beq.n	8003f38 <HAL_DMA_Init+0x3e4>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1e      	ldr	r2, [pc, #120]	@ (8003f90 <HAL_DMA_Init+0x43c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00d      	beq.n	8003f38 <HAL_DMA_Init+0x3e4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1c      	ldr	r2, [pc, #112]	@ (8003f94 <HAL_DMA_Init+0x440>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d008      	beq.n	8003f38 <HAL_DMA_Init+0x3e4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f98 <HAL_DMA_Init+0x444>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <HAL_DMA_Init+0x3e4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a19      	ldr	r2, [pc, #100]	@ (8003f9c <HAL_DMA_Init+0x448>)
 8003f36:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4b13      	ldr	r3, [pc, #76]	@ (8003fa0 <HAL_DMA_Init+0x44c>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b40      	cmp	r3, #64	@ 0x40
 8003f5e:	d021      	beq.n	8003fa4 <HAL_DMA_Init+0x450>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b80      	cmp	r3, #128	@ 0x80
 8003f66:	d102      	bne.n	8003f6e <HAL_DMA_Init+0x41a>
 8003f68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f6c:	e01b      	b.n	8003fa6 <HAL_DMA_Init+0x452>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e019      	b.n	8003fa6 <HAL_DMA_Init+0x452>
 8003f72:	bf00      	nop
 8003f74:	fe10803f 	.word	0xfe10803f
 8003f78:	5c001000 	.word	0x5c001000
 8003f7c:	ffff0000 	.word	0xffff0000
 8003f80:	58025408 	.word	0x58025408
 8003f84:	5802541c 	.word	0x5802541c
 8003f88:	58025430 	.word	0x58025430
 8003f8c:	58025444 	.word	0x58025444
 8003f90:	58025458 	.word	0x58025458
 8003f94:	5802546c 	.word	0x5802546c
 8003f98:	58025480 	.word	0x58025480
 8003f9c:	58025494 	.word	0x58025494
 8003fa0:	fffe000f 	.word	0xfffe000f
 8003fa4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68d2      	ldr	r2, [r2, #12]
 8003faa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003fbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003fc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003fcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003fd4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b6e      	ldr	r3, [pc, #440]	@ (80041a4 <HAL_DMA_Init+0x650>)
 8003fec:	4413      	add	r3, r2
 8003fee:	4a6e      	ldr	r2, [pc, #440]	@ (80041a8 <HAL_DMA_Init+0x654>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	009a      	lsls	r2, r3, #2
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f001 fc45 	bl	800588c <DMA_CalcBaseAndBitshift>
 8004002:	4603      	mov	r3, r0
 8004004:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2201      	movs	r2, #1
 8004010:	409a      	lsls	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	e008      	b.n	800402a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2240      	movs	r2, #64	@ 0x40
 800401c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2203      	movs	r2, #3
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0b7      	b.n	800419a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a5f      	ldr	r2, [pc, #380]	@ (80041ac <HAL_DMA_Init+0x658>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d072      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a5d      	ldr	r2, [pc, #372]	@ (80041b0 <HAL_DMA_Init+0x65c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d06d      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a5c      	ldr	r2, [pc, #368]	@ (80041b4 <HAL_DMA_Init+0x660>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d068      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a5a      	ldr	r2, [pc, #360]	@ (80041b8 <HAL_DMA_Init+0x664>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d063      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a59      	ldr	r2, [pc, #356]	@ (80041bc <HAL_DMA_Init+0x668>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d05e      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a57      	ldr	r2, [pc, #348]	@ (80041c0 <HAL_DMA_Init+0x66c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d059      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a56      	ldr	r2, [pc, #344]	@ (80041c4 <HAL_DMA_Init+0x670>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d054      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a54      	ldr	r2, [pc, #336]	@ (80041c8 <HAL_DMA_Init+0x674>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d04f      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a53      	ldr	r2, [pc, #332]	@ (80041cc <HAL_DMA_Init+0x678>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d04a      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a51      	ldr	r2, [pc, #324]	@ (80041d0 <HAL_DMA_Init+0x67c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d045      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a50      	ldr	r2, [pc, #320]	@ (80041d4 <HAL_DMA_Init+0x680>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d040      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a4e      	ldr	r2, [pc, #312]	@ (80041d8 <HAL_DMA_Init+0x684>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d03b      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a4d      	ldr	r2, [pc, #308]	@ (80041dc <HAL_DMA_Init+0x688>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d036      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a4b      	ldr	r2, [pc, #300]	@ (80041e0 <HAL_DMA_Init+0x68c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d031      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a4a      	ldr	r2, [pc, #296]	@ (80041e4 <HAL_DMA_Init+0x690>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d02c      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a48      	ldr	r2, [pc, #288]	@ (80041e8 <HAL_DMA_Init+0x694>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d027      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a47      	ldr	r2, [pc, #284]	@ (80041ec <HAL_DMA_Init+0x698>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a45      	ldr	r2, [pc, #276]	@ (80041f0 <HAL_DMA_Init+0x69c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01d      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a44      	ldr	r2, [pc, #272]	@ (80041f4 <HAL_DMA_Init+0x6a0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d018      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a42      	ldr	r2, [pc, #264]	@ (80041f8 <HAL_DMA_Init+0x6a4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a41      	ldr	r2, [pc, #260]	@ (80041fc <HAL_DMA_Init+0x6a8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00e      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3f      	ldr	r2, [pc, #252]	@ (8004200 <HAL_DMA_Init+0x6ac>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3e      	ldr	r2, [pc, #248]	@ (8004204 <HAL_DMA_Init+0x6b0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_DMA_Init+0x5c6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a3c      	ldr	r2, [pc, #240]	@ (8004208 <HAL_DMA_Init+0x6b4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d101      	bne.n	800411e <HAL_DMA_Init+0x5ca>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_DMA_Init+0x5cc>
 800411e:	2300      	movs	r3, #0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d032      	beq.n	800418a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f001 fcdf 	bl	8005ae8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b80      	cmp	r3, #128	@ 0x80
 8004130:	d102      	bne.n	8004138 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800414c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <HAL_DMA_Init+0x624>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b08      	cmp	r3, #8
 800415c:	d80c      	bhi.n	8004178 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f001 fd5c 	bl	8005c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	e008      	b.n	800418a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	a7fdabf8 	.word	0xa7fdabf8
 80041a8:	cccccccd 	.word	0xcccccccd
 80041ac:	40020010 	.word	0x40020010
 80041b0:	40020028 	.word	0x40020028
 80041b4:	40020040 	.word	0x40020040
 80041b8:	40020058 	.word	0x40020058
 80041bc:	40020070 	.word	0x40020070
 80041c0:	40020088 	.word	0x40020088
 80041c4:	400200a0 	.word	0x400200a0
 80041c8:	400200b8 	.word	0x400200b8
 80041cc:	40020410 	.word	0x40020410
 80041d0:	40020428 	.word	0x40020428
 80041d4:	40020440 	.word	0x40020440
 80041d8:	40020458 	.word	0x40020458
 80041dc:	40020470 	.word	0x40020470
 80041e0:	40020488 	.word	0x40020488
 80041e4:	400204a0 	.word	0x400204a0
 80041e8:	400204b8 	.word	0x400204b8
 80041ec:	58025408 	.word	0x58025408
 80041f0:	5802541c 	.word	0x5802541c
 80041f4:	58025430 	.word	0x58025430
 80041f8:	58025444 	.word	0x58025444
 80041fc:	58025458 	.word	0x58025458
 8004200:	5802546c 	.word	0x5802546c
 8004204:	58025480 	.word	0x58025480
 8004208:	58025494 	.word	0x58025494

0800420c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e226      	b.n	8004676 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_DMA_Start_IT+0x2a>
 8004232:	2302      	movs	r3, #2
 8004234:	e21f      	b.n	8004676 <HAL_DMA_Start_IT+0x46a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	f040 820a 	bne.w	8004660 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a68      	ldr	r2, [pc, #416]	@ (8004400 <HAL_DMA_Start_IT+0x1f4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d04a      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a66      	ldr	r2, [pc, #408]	@ (8004404 <HAL_DMA_Start_IT+0x1f8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d045      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a65      	ldr	r2, [pc, #404]	@ (8004408 <HAL_DMA_Start_IT+0x1fc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d040      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a63      	ldr	r2, [pc, #396]	@ (800440c <HAL_DMA_Start_IT+0x200>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d03b      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a62      	ldr	r2, [pc, #392]	@ (8004410 <HAL_DMA_Start_IT+0x204>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d036      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a60      	ldr	r2, [pc, #384]	@ (8004414 <HAL_DMA_Start_IT+0x208>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d031      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a5f      	ldr	r2, [pc, #380]	@ (8004418 <HAL_DMA_Start_IT+0x20c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d02c      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a5d      	ldr	r2, [pc, #372]	@ (800441c <HAL_DMA_Start_IT+0x210>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d027      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004420 <HAL_DMA_Start_IT+0x214>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d022      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004424 <HAL_DMA_Start_IT+0x218>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01d      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a59      	ldr	r2, [pc, #356]	@ (8004428 <HAL_DMA_Start_IT+0x21c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d018      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a57      	ldr	r2, [pc, #348]	@ (800442c <HAL_DMA_Start_IT+0x220>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a56      	ldr	r2, [pc, #344]	@ (8004430 <HAL_DMA_Start_IT+0x224>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a54      	ldr	r2, [pc, #336]	@ (8004434 <HAL_DMA_Start_IT+0x228>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a53      	ldr	r2, [pc, #332]	@ (8004438 <HAL_DMA_Start_IT+0x22c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_DMA_Start_IT+0xee>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a51      	ldr	r2, [pc, #324]	@ (800443c <HAL_DMA_Start_IT+0x230>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d108      	bne.n	800430c <HAL_DMA_Start_IT+0x100>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0201 	bic.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e007      	b.n	800431c <HAL_DMA_Start_IT+0x110>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0201 	bic.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f001 f906 	bl	8005534 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a34      	ldr	r2, [pc, #208]	@ (8004400 <HAL_DMA_Start_IT+0x1f4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d04a      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a33      	ldr	r2, [pc, #204]	@ (8004404 <HAL_DMA_Start_IT+0x1f8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d045      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a31      	ldr	r2, [pc, #196]	@ (8004408 <HAL_DMA_Start_IT+0x1fc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d040      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a30      	ldr	r2, [pc, #192]	@ (800440c <HAL_DMA_Start_IT+0x200>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d03b      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2e      	ldr	r2, [pc, #184]	@ (8004410 <HAL_DMA_Start_IT+0x204>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d036      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2d      	ldr	r2, [pc, #180]	@ (8004414 <HAL_DMA_Start_IT+0x208>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d031      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2b      	ldr	r2, [pc, #172]	@ (8004418 <HAL_DMA_Start_IT+0x20c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02c      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2a      	ldr	r2, [pc, #168]	@ (800441c <HAL_DMA_Start_IT+0x210>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d027      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a28      	ldr	r2, [pc, #160]	@ (8004420 <HAL_DMA_Start_IT+0x214>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a27      	ldr	r2, [pc, #156]	@ (8004424 <HAL_DMA_Start_IT+0x218>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01d      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a25      	ldr	r2, [pc, #148]	@ (8004428 <HAL_DMA_Start_IT+0x21c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a24      	ldr	r2, [pc, #144]	@ (800442c <HAL_DMA_Start_IT+0x220>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a22      	ldr	r2, [pc, #136]	@ (8004430 <HAL_DMA_Start_IT+0x224>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a21      	ldr	r2, [pc, #132]	@ (8004434 <HAL_DMA_Start_IT+0x228>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004438 <HAL_DMA_Start_IT+0x22c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_DMA_Start_IT+0x1bc>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1e      	ldr	r2, [pc, #120]	@ (800443c <HAL_DMA_Start_IT+0x230>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <HAL_DMA_Start_IT+0x1c0>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <HAL_DMA_Start_IT+0x1c2>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d036      	beq.n	8004440 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 021e 	bic.w	r2, r3, #30
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0216 	orr.w	r2, r2, #22
 80043e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d03e      	beq.n	800446c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0208 	orr.w	r2, r2, #8
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e035      	b.n	800446c <HAL_DMA_Start_IT+0x260>
 8004400:	40020010 	.word	0x40020010
 8004404:	40020028 	.word	0x40020028
 8004408:	40020040 	.word	0x40020040
 800440c:	40020058 	.word	0x40020058
 8004410:	40020070 	.word	0x40020070
 8004414:	40020088 	.word	0x40020088
 8004418:	400200a0 	.word	0x400200a0
 800441c:	400200b8 	.word	0x400200b8
 8004420:	40020410 	.word	0x40020410
 8004424:	40020428 	.word	0x40020428
 8004428:	40020440 	.word	0x40020440
 800442c:	40020458 	.word	0x40020458
 8004430:	40020470 	.word	0x40020470
 8004434:	40020488 	.word	0x40020488
 8004438:	400204a0 	.word	0x400204a0
 800443c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 020e 	bic.w	r2, r3, #14
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 020a 	orr.w	r2, r2, #10
 8004452:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0204 	orr.w	r2, r2, #4
 800446a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a83      	ldr	r2, [pc, #524]	@ (8004680 <HAL_DMA_Start_IT+0x474>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d072      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a82      	ldr	r2, [pc, #520]	@ (8004684 <HAL_DMA_Start_IT+0x478>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d06d      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a80      	ldr	r2, [pc, #512]	@ (8004688 <HAL_DMA_Start_IT+0x47c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d068      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a7f      	ldr	r2, [pc, #508]	@ (800468c <HAL_DMA_Start_IT+0x480>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d063      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a7d      	ldr	r2, [pc, #500]	@ (8004690 <HAL_DMA_Start_IT+0x484>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d05e      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7c      	ldr	r2, [pc, #496]	@ (8004694 <HAL_DMA_Start_IT+0x488>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d059      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a7a      	ldr	r2, [pc, #488]	@ (8004698 <HAL_DMA_Start_IT+0x48c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d054      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a79      	ldr	r2, [pc, #484]	@ (800469c <HAL_DMA_Start_IT+0x490>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d04f      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a77      	ldr	r2, [pc, #476]	@ (80046a0 <HAL_DMA_Start_IT+0x494>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d04a      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a76      	ldr	r2, [pc, #472]	@ (80046a4 <HAL_DMA_Start_IT+0x498>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d045      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a74      	ldr	r2, [pc, #464]	@ (80046a8 <HAL_DMA_Start_IT+0x49c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d040      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a73      	ldr	r2, [pc, #460]	@ (80046ac <HAL_DMA_Start_IT+0x4a0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d03b      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a71      	ldr	r2, [pc, #452]	@ (80046b0 <HAL_DMA_Start_IT+0x4a4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d036      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a70      	ldr	r2, [pc, #448]	@ (80046b4 <HAL_DMA_Start_IT+0x4a8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d031      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a6e      	ldr	r2, [pc, #440]	@ (80046b8 <HAL_DMA_Start_IT+0x4ac>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d02c      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6d      	ldr	r2, [pc, #436]	@ (80046bc <HAL_DMA_Start_IT+0x4b0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d027      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6b      	ldr	r2, [pc, #428]	@ (80046c0 <HAL_DMA_Start_IT+0x4b4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d022      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6a      	ldr	r2, [pc, #424]	@ (80046c4 <HAL_DMA_Start_IT+0x4b8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d01d      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a68      	ldr	r2, [pc, #416]	@ (80046c8 <HAL_DMA_Start_IT+0x4bc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d018      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a67      	ldr	r2, [pc, #412]	@ (80046cc <HAL_DMA_Start_IT+0x4c0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d013      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a65      	ldr	r2, [pc, #404]	@ (80046d0 <HAL_DMA_Start_IT+0x4c4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00e      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a64      	ldr	r2, [pc, #400]	@ (80046d4 <HAL_DMA_Start_IT+0x4c8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a62      	ldr	r2, [pc, #392]	@ (80046d8 <HAL_DMA_Start_IT+0x4cc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_DMA_Start_IT+0x350>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a61      	ldr	r2, [pc, #388]	@ (80046dc <HAL_DMA_Start_IT+0x4d0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_DMA_Start_IT+0x354>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_DMA_Start_IT+0x356>
 8004560:	2300      	movs	r3, #0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d01a      	beq.n	800459c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004582:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004596:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800459a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a37      	ldr	r2, [pc, #220]	@ (8004680 <HAL_DMA_Start_IT+0x474>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d04a      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a36      	ldr	r2, [pc, #216]	@ (8004684 <HAL_DMA_Start_IT+0x478>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d045      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a34      	ldr	r2, [pc, #208]	@ (8004688 <HAL_DMA_Start_IT+0x47c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d040      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a33      	ldr	r2, [pc, #204]	@ (800468c <HAL_DMA_Start_IT+0x480>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d03b      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a31      	ldr	r2, [pc, #196]	@ (8004690 <HAL_DMA_Start_IT+0x484>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d036      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a30      	ldr	r2, [pc, #192]	@ (8004694 <HAL_DMA_Start_IT+0x488>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d031      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004698 <HAL_DMA_Start_IT+0x48c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d02c      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2d      	ldr	r2, [pc, #180]	@ (800469c <HAL_DMA_Start_IT+0x490>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d027      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a2b      	ldr	r2, [pc, #172]	@ (80046a0 <HAL_DMA_Start_IT+0x494>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d022      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2a      	ldr	r2, [pc, #168]	@ (80046a4 <HAL_DMA_Start_IT+0x498>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d01d      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a28      	ldr	r2, [pc, #160]	@ (80046a8 <HAL_DMA_Start_IT+0x49c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d018      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a27      	ldr	r2, [pc, #156]	@ (80046ac <HAL_DMA_Start_IT+0x4a0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d013      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a25      	ldr	r2, [pc, #148]	@ (80046b0 <HAL_DMA_Start_IT+0x4a4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00e      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a24      	ldr	r2, [pc, #144]	@ (80046b4 <HAL_DMA_Start_IT+0x4a8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a22      	ldr	r2, [pc, #136]	@ (80046b8 <HAL_DMA_Start_IT+0x4ac>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <HAL_DMA_Start_IT+0x430>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a21      	ldr	r2, [pc, #132]	@ (80046bc <HAL_DMA_Start_IT+0x4b0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d108      	bne.n	800464e <HAL_DMA_Start_IT+0x442>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	e012      	b.n	8004674 <HAL_DMA_Start_IT+0x468>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e009      	b.n	8004674 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004666:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004674:	7dfb      	ldrb	r3, [r7, #23]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40020010 	.word	0x40020010
 8004684:	40020028 	.word	0x40020028
 8004688:	40020040 	.word	0x40020040
 800468c:	40020058 	.word	0x40020058
 8004690:	40020070 	.word	0x40020070
 8004694:	40020088 	.word	0x40020088
 8004698:	400200a0 	.word	0x400200a0
 800469c:	400200b8 	.word	0x400200b8
 80046a0:	40020410 	.word	0x40020410
 80046a4:	40020428 	.word	0x40020428
 80046a8:	40020440 	.word	0x40020440
 80046ac:	40020458 	.word	0x40020458
 80046b0:	40020470 	.word	0x40020470
 80046b4:	40020488 	.word	0x40020488
 80046b8:	400204a0 	.word	0x400204a0
 80046bc:	400204b8 	.word	0x400204b8
 80046c0:	58025408 	.word	0x58025408
 80046c4:	5802541c 	.word	0x5802541c
 80046c8:	58025430 	.word	0x58025430
 80046cc:	58025444 	.word	0x58025444
 80046d0:	58025458 	.word	0x58025458
 80046d4:	5802546c 	.word	0x5802546c
 80046d8:	58025480 	.word	0x58025480
 80046dc:	58025494 	.word	0x58025494

080046e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046ec:	4b67      	ldr	r3, [pc, #412]	@ (800488c <HAL_DMA_IRQHandler+0x1ac>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a67      	ldr	r2, [pc, #412]	@ (8004890 <HAL_DMA_IRQHandler+0x1b0>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	0a9b      	lsrs	r3, r3, #10
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004704:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a5f      	ldr	r2, [pc, #380]	@ (8004894 <HAL_DMA_IRQHandler+0x1b4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d04a      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a5d      	ldr	r2, [pc, #372]	@ (8004898 <HAL_DMA_IRQHandler+0x1b8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d045      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a5c      	ldr	r2, [pc, #368]	@ (800489c <HAL_DMA_IRQHandler+0x1bc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d040      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a5a      	ldr	r2, [pc, #360]	@ (80048a0 <HAL_DMA_IRQHandler+0x1c0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d03b      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a59      	ldr	r2, [pc, #356]	@ (80048a4 <HAL_DMA_IRQHandler+0x1c4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d036      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a57      	ldr	r2, [pc, #348]	@ (80048a8 <HAL_DMA_IRQHandler+0x1c8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d031      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a56      	ldr	r2, [pc, #344]	@ (80048ac <HAL_DMA_IRQHandler+0x1cc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d02c      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a54      	ldr	r2, [pc, #336]	@ (80048b0 <HAL_DMA_IRQHandler+0x1d0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d027      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a53      	ldr	r2, [pc, #332]	@ (80048b4 <HAL_DMA_IRQHandler+0x1d4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d022      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a51      	ldr	r2, [pc, #324]	@ (80048b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d01d      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a50      	ldr	r2, [pc, #320]	@ (80048bc <HAL_DMA_IRQHandler+0x1dc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d018      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a4e      	ldr	r2, [pc, #312]	@ (80048c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a4d      	ldr	r2, [pc, #308]	@ (80048c4 <HAL_DMA_IRQHandler+0x1e4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00e      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a4b      	ldr	r2, [pc, #300]	@ (80048c8 <HAL_DMA_IRQHandler+0x1e8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d009      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a4a      	ldr	r2, [pc, #296]	@ (80048cc <HAL_DMA_IRQHandler+0x1ec>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xd2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a48      	ldr	r2, [pc, #288]	@ (80048d0 <HAL_DMA_IRQHandler+0x1f0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <HAL_DMA_IRQHandler+0xd6>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <HAL_DMA_IRQHandler+0xd8>
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 842b 	beq.w	8005014 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2208      	movs	r2, #8
 80047c8:	409a      	lsls	r2, r3
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80a2 	beq.w	8004918 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004894 <HAL_DMA_IRQHandler+0x1b4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d04a      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004898 <HAL_DMA_IRQHandler+0x1b8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d045      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2b      	ldr	r2, [pc, #172]	@ (800489c <HAL_DMA_IRQHandler+0x1bc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d040      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2a      	ldr	r2, [pc, #168]	@ (80048a0 <HAL_DMA_IRQHandler+0x1c0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d03b      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <HAL_DMA_IRQHandler+0x1c4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d036      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a27      	ldr	r2, [pc, #156]	@ (80048a8 <HAL_DMA_IRQHandler+0x1c8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d031      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_DMA_IRQHandler+0x1cc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d02c      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a24      	ldr	r2, [pc, #144]	@ (80048b0 <HAL_DMA_IRQHandler+0x1d0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d027      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a22      	ldr	r2, [pc, #136]	@ (80048b4 <HAL_DMA_IRQHandler+0x1d4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d022      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a21      	ldr	r2, [pc, #132]	@ (80048b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d01d      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <HAL_DMA_IRQHandler+0x1dc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d018      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1e      	ldr	r2, [pc, #120]	@ (80048c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <HAL_DMA_IRQHandler+0x1e4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00e      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1b      	ldr	r2, [pc, #108]	@ (80048c8 <HAL_DMA_IRQHandler+0x1e8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d009      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a19      	ldr	r2, [pc, #100]	@ (80048cc <HAL_DMA_IRQHandler+0x1ec>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_DMA_IRQHandler+0x194>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a18      	ldr	r2, [pc, #96]	@ (80048d0 <HAL_DMA_IRQHandler+0x1f0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d12f      	bne.n	80048d4 <HAL_DMA_IRQHandler+0x1f4>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	bf14      	ite	ne
 8004882:	2301      	movne	r3, #1
 8004884:	2300      	moveq	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	e02e      	b.n	80048e8 <HAL_DMA_IRQHandler+0x208>
 800488a:	bf00      	nop
 800488c:	24000004 	.word	0x24000004
 8004890:	1b4e81b5 	.word	0x1b4e81b5
 8004894:	40020010 	.word	0x40020010
 8004898:	40020028 	.word	0x40020028
 800489c:	40020040 	.word	0x40020040
 80048a0:	40020058 	.word	0x40020058
 80048a4:	40020070 	.word	0x40020070
 80048a8:	40020088 	.word	0x40020088
 80048ac:	400200a0 	.word	0x400200a0
 80048b0:	400200b8 	.word	0x400200b8
 80048b4:	40020410 	.word	0x40020410
 80048b8:	40020428 	.word	0x40020428
 80048bc:	40020440 	.word	0x40020440
 80048c0:	40020458 	.word	0x40020458
 80048c4:	40020470 	.word	0x40020470
 80048c8:	40020488 	.word	0x40020488
 80048cc:	400204a0 	.word	0x400204a0
 80048d0:	400204b8 	.word	0x400204b8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bf14      	ite	ne
 80048e2:	2301      	movne	r3, #1
 80048e4:	2300      	moveq	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d015      	beq.n	8004918 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0204 	bic.w	r2, r2, #4
 80048fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2208      	movs	r2, #8
 8004906:	409a      	lsls	r2, r3
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004910:	f043 0201 	orr.w	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d06e      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a69      	ldr	r2, [pc, #420]	@ (8004ad8 <HAL_DMA_IRQHandler+0x3f8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d04a      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a67      	ldr	r2, [pc, #412]	@ (8004adc <HAL_DMA_IRQHandler+0x3fc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d045      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a66      	ldr	r2, [pc, #408]	@ (8004ae0 <HAL_DMA_IRQHandler+0x400>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d040      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a64      	ldr	r2, [pc, #400]	@ (8004ae4 <HAL_DMA_IRQHandler+0x404>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d03b      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a63      	ldr	r2, [pc, #396]	@ (8004ae8 <HAL_DMA_IRQHandler+0x408>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d036      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a61      	ldr	r2, [pc, #388]	@ (8004aec <HAL_DMA_IRQHandler+0x40c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d031      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a60      	ldr	r2, [pc, #384]	@ (8004af0 <HAL_DMA_IRQHandler+0x410>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d02c      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a5e      	ldr	r2, [pc, #376]	@ (8004af4 <HAL_DMA_IRQHandler+0x414>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d027      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a5d      	ldr	r2, [pc, #372]	@ (8004af8 <HAL_DMA_IRQHandler+0x418>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d022      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5b      	ldr	r2, [pc, #364]	@ (8004afc <HAL_DMA_IRQHandler+0x41c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01d      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a5a      	ldr	r2, [pc, #360]	@ (8004b00 <HAL_DMA_IRQHandler+0x420>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d018      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a58      	ldr	r2, [pc, #352]	@ (8004b04 <HAL_DMA_IRQHandler+0x424>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a57      	ldr	r2, [pc, #348]	@ (8004b08 <HAL_DMA_IRQHandler+0x428>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00e      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a55      	ldr	r2, [pc, #340]	@ (8004b0c <HAL_DMA_IRQHandler+0x42c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a54      	ldr	r2, [pc, #336]	@ (8004b10 <HAL_DMA_IRQHandler+0x430>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ee>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a52      	ldr	r2, [pc, #328]	@ (8004b14 <HAL_DMA_IRQHandler+0x434>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10a      	bne.n	80049e4 <HAL_DMA_IRQHandler+0x304>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e003      	b.n	80049ec <HAL_DMA_IRQHandler+0x30c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2300      	movs	r3, #0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00d      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2201      	movs	r2, #1
 80049fa:	409a      	lsls	r2, r3
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a04:	f043 0202 	orr.w	r2, r3, #2
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2204      	movs	r2, #4
 8004a16:	409a      	lsls	r2, r3
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 808f 	beq.w	8004b40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad8 <HAL_DMA_IRQHandler+0x3f8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d04a      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2a      	ldr	r2, [pc, #168]	@ (8004adc <HAL_DMA_IRQHandler+0x3fc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d045      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a29      	ldr	r2, [pc, #164]	@ (8004ae0 <HAL_DMA_IRQHandler+0x400>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d040      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a27      	ldr	r2, [pc, #156]	@ (8004ae4 <HAL_DMA_IRQHandler+0x404>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d03b      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a26      	ldr	r2, [pc, #152]	@ (8004ae8 <HAL_DMA_IRQHandler+0x408>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d036      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a24      	ldr	r2, [pc, #144]	@ (8004aec <HAL_DMA_IRQHandler+0x40c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d031      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a23      	ldr	r2, [pc, #140]	@ (8004af0 <HAL_DMA_IRQHandler+0x410>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d02c      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a21      	ldr	r2, [pc, #132]	@ (8004af4 <HAL_DMA_IRQHandler+0x414>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d027      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a20      	ldr	r2, [pc, #128]	@ (8004af8 <HAL_DMA_IRQHandler+0x418>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d022      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1e      	ldr	r2, [pc, #120]	@ (8004afc <HAL_DMA_IRQHandler+0x41c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01d      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b00 <HAL_DMA_IRQHandler+0x420>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d018      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <HAL_DMA_IRQHandler+0x424>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b08 <HAL_DMA_IRQHandler+0x428>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <HAL_DMA_IRQHandler+0x42c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a17      	ldr	r2, [pc, #92]	@ (8004b10 <HAL_DMA_IRQHandler+0x430>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x3e2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a15      	ldr	r2, [pc, #84]	@ (8004b14 <HAL_DMA_IRQHandler+0x434>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d12a      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x438>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	e023      	b.n	8004b20 <HAL_DMA_IRQHandler+0x440>
 8004ad8:	40020010 	.word	0x40020010
 8004adc:	40020028 	.word	0x40020028
 8004ae0:	40020040 	.word	0x40020040
 8004ae4:	40020058 	.word	0x40020058
 8004ae8:	40020070 	.word	0x40020070
 8004aec:	40020088 	.word	0x40020088
 8004af0:	400200a0 	.word	0x400200a0
 8004af4:	400200b8 	.word	0x400200b8
 8004af8:	40020410 	.word	0x40020410
 8004afc:	40020428 	.word	0x40020428
 8004b00:	40020440 	.word	0x40020440
 8004b04:	40020458 	.word	0x40020458
 8004b08:	40020470 	.word	0x40020470
 8004b0c:	40020488 	.word	0x40020488
 8004b10:	400204a0 	.word	0x400204a0
 8004b14:	400204b8 	.word	0x400204b8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	409a      	lsls	r2, r3
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b38:	f043 0204 	orr.w	r2, r3, #4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2210      	movs	r2, #16
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80a6 	beq.w	8004ca2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a85      	ldr	r2, [pc, #532]	@ (8004d70 <HAL_DMA_IRQHandler+0x690>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d04a      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a83      	ldr	r2, [pc, #524]	@ (8004d74 <HAL_DMA_IRQHandler+0x694>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d045      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a82      	ldr	r2, [pc, #520]	@ (8004d78 <HAL_DMA_IRQHandler+0x698>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d040      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a80      	ldr	r2, [pc, #512]	@ (8004d7c <HAL_DMA_IRQHandler+0x69c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d03b      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a7f      	ldr	r2, [pc, #508]	@ (8004d80 <HAL_DMA_IRQHandler+0x6a0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d036      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a7d      	ldr	r2, [pc, #500]	@ (8004d84 <HAL_DMA_IRQHandler+0x6a4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d031      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a7c      	ldr	r2, [pc, #496]	@ (8004d88 <HAL_DMA_IRQHandler+0x6a8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d02c      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a7a      	ldr	r2, [pc, #488]	@ (8004d8c <HAL_DMA_IRQHandler+0x6ac>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d027      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a79      	ldr	r2, [pc, #484]	@ (8004d90 <HAL_DMA_IRQHandler+0x6b0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d022      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a77      	ldr	r2, [pc, #476]	@ (8004d94 <HAL_DMA_IRQHandler+0x6b4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01d      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a76      	ldr	r2, [pc, #472]	@ (8004d98 <HAL_DMA_IRQHandler+0x6b8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d018      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a74      	ldr	r2, [pc, #464]	@ (8004d9c <HAL_DMA_IRQHandler+0x6bc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a73      	ldr	r2, [pc, #460]	@ (8004da0 <HAL_DMA_IRQHandler+0x6c0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a71      	ldr	r2, [pc, #452]	@ (8004da4 <HAL_DMA_IRQHandler+0x6c4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d009      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a70      	ldr	r2, [pc, #448]	@ (8004da8 <HAL_DMA_IRQHandler+0x6c8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d004      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x516>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8004dac <HAL_DMA_IRQHandler+0x6cc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d10a      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x52c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e009      	b.n	8004c20 <HAL_DMA_IRQHandler+0x540>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d03e      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d018      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d108      	bne.n	8004c62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d024      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
 8004c60:	e01f      	b.n	8004ca2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01b      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
 8004c72:	e016      	b.n	8004ca2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d107      	bne.n	8004c92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0208 	bic.w	r2, r2, #8
 8004c90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2220      	movs	r2, #32
 8004cac:	409a      	lsls	r2, r3
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8110 	beq.w	8004ed8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8004d70 <HAL_DMA_IRQHandler+0x690>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d04a      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2b      	ldr	r2, [pc, #172]	@ (8004d74 <HAL_DMA_IRQHandler+0x694>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d045      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a29      	ldr	r2, [pc, #164]	@ (8004d78 <HAL_DMA_IRQHandler+0x698>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d040      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a28      	ldr	r2, [pc, #160]	@ (8004d7c <HAL_DMA_IRQHandler+0x69c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d03b      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	@ (8004d80 <HAL_DMA_IRQHandler+0x6a0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d036      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a25      	ldr	r2, [pc, #148]	@ (8004d84 <HAL_DMA_IRQHandler+0x6a4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d031      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a23      	ldr	r2, [pc, #140]	@ (8004d88 <HAL_DMA_IRQHandler+0x6a8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02c      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a22      	ldr	r2, [pc, #136]	@ (8004d8c <HAL_DMA_IRQHandler+0x6ac>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d027      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a20      	ldr	r2, [pc, #128]	@ (8004d90 <HAL_DMA_IRQHandler+0x6b0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d022      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1f      	ldr	r2, [pc, #124]	@ (8004d94 <HAL_DMA_IRQHandler+0x6b4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d01d      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1d      	ldr	r2, [pc, #116]	@ (8004d98 <HAL_DMA_IRQHandler+0x6b8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d018      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d9c <HAL_DMA_IRQHandler+0x6bc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1a      	ldr	r2, [pc, #104]	@ (8004da0 <HAL_DMA_IRQHandler+0x6c0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00e      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a19      	ldr	r2, [pc, #100]	@ (8004da4 <HAL_DMA_IRQHandler+0x6c4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d009      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a17      	ldr	r2, [pc, #92]	@ (8004da8 <HAL_DMA_IRQHandler+0x6c8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x678>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a16      	ldr	r2, [pc, #88]	@ (8004dac <HAL_DMA_IRQHandler+0x6cc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d12b      	bne.n	8004db0 <HAL_DMA_IRQHandler+0x6d0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e02a      	b.n	8004dc4 <HAL_DMA_IRQHandler+0x6e4>
 8004d6e:	bf00      	nop
 8004d70:	40020010 	.word	0x40020010
 8004d74:	40020028 	.word	0x40020028
 8004d78:	40020040 	.word	0x40020040
 8004d7c:	40020058 	.word	0x40020058
 8004d80:	40020070 	.word	0x40020070
 8004d84:	40020088 	.word	0x40020088
 8004d88:	400200a0 	.word	0x400200a0
 8004d8c:	400200b8 	.word	0x400200b8
 8004d90:	40020410 	.word	0x40020410
 8004d94:	40020428 	.word	0x40020428
 8004d98:	40020440 	.word	0x40020440
 8004d9c:	40020458 	.word	0x40020458
 8004da0:	40020470 	.word	0x40020470
 8004da4:	40020488 	.word	0x40020488
 8004da8:	400204a0 	.word	0x400204a0
 8004dac:	400204b8 	.word	0x400204b8
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8087 	beq.w	8004ed8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d139      	bne.n	8004e5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0216 	bic.w	r2, r2, #22
 8004df4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <HAL_DMA_IRQHandler+0x736>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d007      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0208 	bic.w	r2, r2, #8
 8004e24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	223f      	movs	r2, #63	@ 0x3f
 8004e30:	409a      	lsls	r2, r3
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 834a 	beq.w	80054e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
          }
          return;
 8004e58:	e344      	b.n	80054e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d018      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d108      	bne.n	8004e88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d02c      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	4798      	blx	r3
 8004e86:	e027      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d023      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
 8004e98:	e01e      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10f      	bne.n	8004ec8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0210 	bic.w	r2, r2, #16
 8004eb6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8306 	beq.w	80054ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8088 	beq.w	8005000 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a7a      	ldr	r2, [pc, #488]	@ (80050e8 <HAL_DMA_IRQHandler+0xa08>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d04a      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a79      	ldr	r2, [pc, #484]	@ (80050ec <HAL_DMA_IRQHandler+0xa0c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d045      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a77      	ldr	r2, [pc, #476]	@ (80050f0 <HAL_DMA_IRQHandler+0xa10>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d040      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a76      	ldr	r2, [pc, #472]	@ (80050f4 <HAL_DMA_IRQHandler+0xa14>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d03b      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a74      	ldr	r2, [pc, #464]	@ (80050f8 <HAL_DMA_IRQHandler+0xa18>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d036      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a73      	ldr	r2, [pc, #460]	@ (80050fc <HAL_DMA_IRQHandler+0xa1c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d031      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a71      	ldr	r2, [pc, #452]	@ (8005100 <HAL_DMA_IRQHandler+0xa20>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d02c      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a70      	ldr	r2, [pc, #448]	@ (8005104 <HAL_DMA_IRQHandler+0xa24>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d027      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a6e      	ldr	r2, [pc, #440]	@ (8005108 <HAL_DMA_IRQHandler+0xa28>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d022      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a6d      	ldr	r2, [pc, #436]	@ (800510c <HAL_DMA_IRQHandler+0xa2c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d01d      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a6b      	ldr	r2, [pc, #428]	@ (8005110 <HAL_DMA_IRQHandler+0xa30>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d018      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a6a      	ldr	r2, [pc, #424]	@ (8005114 <HAL_DMA_IRQHandler+0xa34>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d013      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a68      	ldr	r2, [pc, #416]	@ (8005118 <HAL_DMA_IRQHandler+0xa38>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00e      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a67      	ldr	r2, [pc, #412]	@ (800511c <HAL_DMA_IRQHandler+0xa3c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d009      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a65      	ldr	r2, [pc, #404]	@ (8005120 <HAL_DMA_IRQHandler+0xa40>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x8b8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a64      	ldr	r2, [pc, #400]	@ (8005124 <HAL_DMA_IRQHandler+0xa44>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d108      	bne.n	8004faa <HAL_DMA_IRQHandler+0x8ca>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	e007      	b.n	8004fba <HAL_DMA_IRQHandler+0x8da>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d307      	bcc.n	8004fd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f2      	bne.n	8004fba <HAL_DMA_IRQHandler+0x8da>
 8004fd4:	e000      	b.n	8004fd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004fd6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d004      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2203      	movs	r2, #3
 8004fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004fee:	e003      	b.n	8004ff8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8272 	beq.w	80054ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
 8005012:	e26c      	b.n	80054ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a43      	ldr	r2, [pc, #268]	@ (8005128 <HAL_DMA_IRQHandler+0xa48>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d022      	beq.n	8005064 <HAL_DMA_IRQHandler+0x984>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a42      	ldr	r2, [pc, #264]	@ (800512c <HAL_DMA_IRQHandler+0xa4c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d01d      	beq.n	8005064 <HAL_DMA_IRQHandler+0x984>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a40      	ldr	r2, [pc, #256]	@ (8005130 <HAL_DMA_IRQHandler+0xa50>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d018      	beq.n	8005064 <HAL_DMA_IRQHandler+0x984>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a3f      	ldr	r2, [pc, #252]	@ (8005134 <HAL_DMA_IRQHandler+0xa54>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <HAL_DMA_IRQHandler+0x984>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3d      	ldr	r2, [pc, #244]	@ (8005138 <HAL_DMA_IRQHandler+0xa58>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00e      	beq.n	8005064 <HAL_DMA_IRQHandler+0x984>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3c      	ldr	r2, [pc, #240]	@ (800513c <HAL_DMA_IRQHandler+0xa5c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_DMA_IRQHandler+0x984>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3a      	ldr	r2, [pc, #232]	@ (8005140 <HAL_DMA_IRQHandler+0xa60>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_DMA_IRQHandler+0x984>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a39      	ldr	r2, [pc, #228]	@ (8005144 <HAL_DMA_IRQHandler+0xa64>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d101      	bne.n	8005068 <HAL_DMA_IRQHandler+0x988>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <HAL_DMA_IRQHandler+0x98a>
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 823f 	beq.w	80054ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507c:	f003 031f 	and.w	r3, r3, #31
 8005080:	2204      	movs	r2, #4
 8005082:	409a      	lsls	r2, r3
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4013      	ands	r3, r2
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80cd 	beq.w	8005228 <HAL_DMA_IRQHandler+0xb48>
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80c7 	beq.w	8005228 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	2204      	movs	r2, #4
 80050a4:	409a      	lsls	r2, r3
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d049      	beq.n	8005148 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8210 	beq.w	80054e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050d0:	e20a      	b.n	80054e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 8206 	beq.w	80054e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050e4:	e200      	b.n	80054e8 <HAL_DMA_IRQHandler+0xe08>
 80050e6:	bf00      	nop
 80050e8:	40020010 	.word	0x40020010
 80050ec:	40020028 	.word	0x40020028
 80050f0:	40020040 	.word	0x40020040
 80050f4:	40020058 	.word	0x40020058
 80050f8:	40020070 	.word	0x40020070
 80050fc:	40020088 	.word	0x40020088
 8005100:	400200a0 	.word	0x400200a0
 8005104:	400200b8 	.word	0x400200b8
 8005108:	40020410 	.word	0x40020410
 800510c:	40020428 	.word	0x40020428
 8005110:	40020440 	.word	0x40020440
 8005114:	40020458 	.word	0x40020458
 8005118:	40020470 	.word	0x40020470
 800511c:	40020488 	.word	0x40020488
 8005120:	400204a0 	.word	0x400204a0
 8005124:	400204b8 	.word	0x400204b8
 8005128:	58025408 	.word	0x58025408
 800512c:	5802541c 	.word	0x5802541c
 8005130:	58025430 	.word	0x58025430
 8005134:	58025444 	.word	0x58025444
 8005138:	58025458 	.word	0x58025458
 800513c:	5802546c 	.word	0x5802546c
 8005140:	58025480 	.word	0x58025480
 8005144:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d160      	bne.n	8005214 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a7f      	ldr	r2, [pc, #508]	@ (8005354 <HAL_DMA_IRQHandler+0xc74>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d04a      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a7d      	ldr	r2, [pc, #500]	@ (8005358 <HAL_DMA_IRQHandler+0xc78>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d045      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a7c      	ldr	r2, [pc, #496]	@ (800535c <HAL_DMA_IRQHandler+0xc7c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d040      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a7a      	ldr	r2, [pc, #488]	@ (8005360 <HAL_DMA_IRQHandler+0xc80>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d03b      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a79      	ldr	r2, [pc, #484]	@ (8005364 <HAL_DMA_IRQHandler+0xc84>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d036      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a77      	ldr	r2, [pc, #476]	@ (8005368 <HAL_DMA_IRQHandler+0xc88>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d031      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a76      	ldr	r2, [pc, #472]	@ (800536c <HAL_DMA_IRQHandler+0xc8c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d02c      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a74      	ldr	r2, [pc, #464]	@ (8005370 <HAL_DMA_IRQHandler+0xc90>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d027      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a73      	ldr	r2, [pc, #460]	@ (8005374 <HAL_DMA_IRQHandler+0xc94>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d022      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a71      	ldr	r2, [pc, #452]	@ (8005378 <HAL_DMA_IRQHandler+0xc98>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d01d      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a70      	ldr	r2, [pc, #448]	@ (800537c <HAL_DMA_IRQHandler+0xc9c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d018      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a6e      	ldr	r2, [pc, #440]	@ (8005380 <HAL_DMA_IRQHandler+0xca0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a6d      	ldr	r2, [pc, #436]	@ (8005384 <HAL_DMA_IRQHandler+0xca4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00e      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a6b      	ldr	r2, [pc, #428]	@ (8005388 <HAL_DMA_IRQHandler+0xca8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d009      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a6a      	ldr	r2, [pc, #424]	@ (800538c <HAL_DMA_IRQHandler+0xcac>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d004      	beq.n	80051f2 <HAL_DMA_IRQHandler+0xb12>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a68      	ldr	r2, [pc, #416]	@ (8005390 <HAL_DMA_IRQHandler+0xcb0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d108      	bne.n	8005204 <HAL_DMA_IRQHandler+0xb24>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0208 	bic.w	r2, r2, #8
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e007      	b.n	8005214 <HAL_DMA_IRQHandler+0xb34>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0204 	bic.w	r2, r2, #4
 8005212:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8165 	beq.w	80054e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005226:	e15f      	b.n	80054e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2202      	movs	r2, #2
 8005232:	409a      	lsls	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4013      	ands	r3, r2
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80c5 	beq.w	80053c8 <HAL_DMA_IRQHandler+0xce8>
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80bf 	beq.w	80053c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524e:	f003 031f 	and.w	r3, r3, #31
 8005252:	2202      	movs	r2, #2
 8005254:	409a      	lsls	r2, r3
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d018      	beq.n	8005296 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 813a 	beq.w	80054ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005280:	e134      	b.n	80054ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 8130 	beq.w	80054ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005294:	e12a      	b.n	80054ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 8089 	bne.w	80053b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005354 <HAL_DMA_IRQHandler+0xc74>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d04a      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a29      	ldr	r2, [pc, #164]	@ (8005358 <HAL_DMA_IRQHandler+0xc78>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d045      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a28      	ldr	r2, [pc, #160]	@ (800535c <HAL_DMA_IRQHandler+0xc7c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d040      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a26      	ldr	r2, [pc, #152]	@ (8005360 <HAL_DMA_IRQHandler+0xc80>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d03b      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a25      	ldr	r2, [pc, #148]	@ (8005364 <HAL_DMA_IRQHandler+0xc84>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d036      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a23      	ldr	r2, [pc, #140]	@ (8005368 <HAL_DMA_IRQHandler+0xc88>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d031      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a22      	ldr	r2, [pc, #136]	@ (800536c <HAL_DMA_IRQHandler+0xc8c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d02c      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a20      	ldr	r2, [pc, #128]	@ (8005370 <HAL_DMA_IRQHandler+0xc90>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d027      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005374 <HAL_DMA_IRQHandler+0xc94>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d022      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <HAL_DMA_IRQHandler+0xc98>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01d      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1c      	ldr	r2, [pc, #112]	@ (800537c <HAL_DMA_IRQHandler+0xc9c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d018      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1a      	ldr	r2, [pc, #104]	@ (8005380 <HAL_DMA_IRQHandler+0xca0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a19      	ldr	r2, [pc, #100]	@ (8005384 <HAL_DMA_IRQHandler+0xca4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a17      	ldr	r2, [pc, #92]	@ (8005388 <HAL_DMA_IRQHandler+0xca8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a16      	ldr	r2, [pc, #88]	@ (800538c <HAL_DMA_IRQHandler+0xcac>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_DMA_IRQHandler+0xc62>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a14      	ldr	r2, [pc, #80]	@ (8005390 <HAL_DMA_IRQHandler+0xcb0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d128      	bne.n	8005394 <HAL_DMA_IRQHandler+0xcb4>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0214 	bic.w	r2, r2, #20
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	e027      	b.n	80053a4 <HAL_DMA_IRQHandler+0xcc4>
 8005354:	40020010 	.word	0x40020010
 8005358:	40020028 	.word	0x40020028
 800535c:	40020040 	.word	0x40020040
 8005360:	40020058 	.word	0x40020058
 8005364:	40020070 	.word	0x40020070
 8005368:	40020088 	.word	0x40020088
 800536c:	400200a0 	.word	0x400200a0
 8005370:	400200b8 	.word	0x400200b8
 8005374:	40020410 	.word	0x40020410
 8005378:	40020428 	.word	0x40020428
 800537c:	40020440 	.word	0x40020440
 8005380:	40020458 	.word	0x40020458
 8005384:	40020470 	.word	0x40020470
 8005388:	40020488 	.word	0x40020488
 800538c:	400204a0 	.word	0x400204a0
 8005390:	400204b8 	.word	0x400204b8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 020a 	bic.w	r2, r2, #10
 80053a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8097 	beq.w	80054ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053c6:	e091      	b.n	80054ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2208      	movs	r2, #8
 80053d2:	409a      	lsls	r2, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8088 	beq.w	80054ee <HAL_DMA_IRQHandler+0xe0e>
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8082 	beq.w	80054ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a41      	ldr	r2, [pc, #260]	@ (80054f4 <HAL_DMA_IRQHandler+0xe14>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d04a      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a3f      	ldr	r2, [pc, #252]	@ (80054f8 <HAL_DMA_IRQHandler+0xe18>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d045      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a3e      	ldr	r2, [pc, #248]	@ (80054fc <HAL_DMA_IRQHandler+0xe1c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d040      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a3c      	ldr	r2, [pc, #240]	@ (8005500 <HAL_DMA_IRQHandler+0xe20>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d03b      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a3b      	ldr	r2, [pc, #236]	@ (8005504 <HAL_DMA_IRQHandler+0xe24>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d036      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a39      	ldr	r2, [pc, #228]	@ (8005508 <HAL_DMA_IRQHandler+0xe28>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d031      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a38      	ldr	r2, [pc, #224]	@ (800550c <HAL_DMA_IRQHandler+0xe2c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d02c      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a36      	ldr	r2, [pc, #216]	@ (8005510 <HAL_DMA_IRQHandler+0xe30>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d027      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a35      	ldr	r2, [pc, #212]	@ (8005514 <HAL_DMA_IRQHandler+0xe34>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d022      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a33      	ldr	r2, [pc, #204]	@ (8005518 <HAL_DMA_IRQHandler+0xe38>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01d      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a32      	ldr	r2, [pc, #200]	@ (800551c <HAL_DMA_IRQHandler+0xe3c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d018      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a30      	ldr	r2, [pc, #192]	@ (8005520 <HAL_DMA_IRQHandler+0xe40>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2f      	ldr	r2, [pc, #188]	@ (8005524 <HAL_DMA_IRQHandler+0xe44>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2d      	ldr	r2, [pc, #180]	@ (8005528 <HAL_DMA_IRQHandler+0xe48>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2c      	ldr	r2, [pc, #176]	@ (800552c <HAL_DMA_IRQHandler+0xe4c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_DMA_IRQHandler+0xdaa>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2a      	ldr	r2, [pc, #168]	@ (8005530 <HAL_DMA_IRQHandler+0xe50>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d108      	bne.n	800549c <HAL_DMA_IRQHandler+0xdbc>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 021c 	bic.w	r2, r2, #28
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e007      	b.n	80054ac <HAL_DMA_IRQHandler+0xdcc>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 020e 	bic.w	r2, r2, #14
 80054aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2201      	movs	r2, #1
 80054b6:	409a      	lsls	r2, r3
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	4798      	blx	r3
 80054e2:	e004      	b.n	80054ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80054e4:	bf00      	nop
 80054e6:	e002      	b.n	80054ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054e8:	bf00      	nop
 80054ea:	e000      	b.n	80054ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054ee:	3728      	adds	r7, #40	@ 0x28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40020010 	.word	0x40020010
 80054f8:	40020028 	.word	0x40020028
 80054fc:	40020040 	.word	0x40020040
 8005500:	40020058 	.word	0x40020058
 8005504:	40020070 	.word	0x40020070
 8005508:	40020088 	.word	0x40020088
 800550c:	400200a0 	.word	0x400200a0
 8005510:	400200b8 	.word	0x400200b8
 8005514:	40020410 	.word	0x40020410
 8005518:	40020428 	.word	0x40020428
 800551c:	40020440 	.word	0x40020440
 8005520:	40020458 	.word	0x40020458
 8005524:	40020470 	.word	0x40020470
 8005528:	40020488 	.word	0x40020488
 800552c:	400204a0 	.word	0x400204a0
 8005530:	400204b8 	.word	0x400204b8

08005534 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005546:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a7f      	ldr	r2, [pc, #508]	@ (8005750 <DMA_SetConfig+0x21c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d072      	beq.n	800563e <DMA_SetConfig+0x10a>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a7d      	ldr	r2, [pc, #500]	@ (8005754 <DMA_SetConfig+0x220>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d06d      	beq.n	800563e <DMA_SetConfig+0x10a>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a7c      	ldr	r2, [pc, #496]	@ (8005758 <DMA_SetConfig+0x224>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d068      	beq.n	800563e <DMA_SetConfig+0x10a>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a7a      	ldr	r2, [pc, #488]	@ (800575c <DMA_SetConfig+0x228>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d063      	beq.n	800563e <DMA_SetConfig+0x10a>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a79      	ldr	r2, [pc, #484]	@ (8005760 <DMA_SetConfig+0x22c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d05e      	beq.n	800563e <DMA_SetConfig+0x10a>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a77      	ldr	r2, [pc, #476]	@ (8005764 <DMA_SetConfig+0x230>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d059      	beq.n	800563e <DMA_SetConfig+0x10a>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a76      	ldr	r2, [pc, #472]	@ (8005768 <DMA_SetConfig+0x234>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d054      	beq.n	800563e <DMA_SetConfig+0x10a>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a74      	ldr	r2, [pc, #464]	@ (800576c <DMA_SetConfig+0x238>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d04f      	beq.n	800563e <DMA_SetConfig+0x10a>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a73      	ldr	r2, [pc, #460]	@ (8005770 <DMA_SetConfig+0x23c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d04a      	beq.n	800563e <DMA_SetConfig+0x10a>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a71      	ldr	r2, [pc, #452]	@ (8005774 <DMA_SetConfig+0x240>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d045      	beq.n	800563e <DMA_SetConfig+0x10a>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a70      	ldr	r2, [pc, #448]	@ (8005778 <DMA_SetConfig+0x244>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d040      	beq.n	800563e <DMA_SetConfig+0x10a>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a6e      	ldr	r2, [pc, #440]	@ (800577c <DMA_SetConfig+0x248>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d03b      	beq.n	800563e <DMA_SetConfig+0x10a>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a6d      	ldr	r2, [pc, #436]	@ (8005780 <DMA_SetConfig+0x24c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d036      	beq.n	800563e <DMA_SetConfig+0x10a>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a6b      	ldr	r2, [pc, #428]	@ (8005784 <DMA_SetConfig+0x250>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d031      	beq.n	800563e <DMA_SetConfig+0x10a>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a6a      	ldr	r2, [pc, #424]	@ (8005788 <DMA_SetConfig+0x254>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d02c      	beq.n	800563e <DMA_SetConfig+0x10a>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a68      	ldr	r2, [pc, #416]	@ (800578c <DMA_SetConfig+0x258>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d027      	beq.n	800563e <DMA_SetConfig+0x10a>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a67      	ldr	r2, [pc, #412]	@ (8005790 <DMA_SetConfig+0x25c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d022      	beq.n	800563e <DMA_SetConfig+0x10a>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a65      	ldr	r2, [pc, #404]	@ (8005794 <DMA_SetConfig+0x260>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01d      	beq.n	800563e <DMA_SetConfig+0x10a>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a64      	ldr	r2, [pc, #400]	@ (8005798 <DMA_SetConfig+0x264>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d018      	beq.n	800563e <DMA_SetConfig+0x10a>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a62      	ldr	r2, [pc, #392]	@ (800579c <DMA_SetConfig+0x268>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <DMA_SetConfig+0x10a>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a61      	ldr	r2, [pc, #388]	@ (80057a0 <DMA_SetConfig+0x26c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00e      	beq.n	800563e <DMA_SetConfig+0x10a>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a5f      	ldr	r2, [pc, #380]	@ (80057a4 <DMA_SetConfig+0x270>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d009      	beq.n	800563e <DMA_SetConfig+0x10a>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a5e      	ldr	r2, [pc, #376]	@ (80057a8 <DMA_SetConfig+0x274>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d004      	beq.n	800563e <DMA_SetConfig+0x10a>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a5c      	ldr	r2, [pc, #368]	@ (80057ac <DMA_SetConfig+0x278>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d101      	bne.n	8005642 <DMA_SetConfig+0x10e>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <DMA_SetConfig+0x110>
 8005642:	2300      	movs	r3, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00d      	beq.n	8005664 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005650:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d004      	beq.n	8005664 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005662:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a39      	ldr	r2, [pc, #228]	@ (8005750 <DMA_SetConfig+0x21c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d04a      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a38      	ldr	r2, [pc, #224]	@ (8005754 <DMA_SetConfig+0x220>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d045      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a36      	ldr	r2, [pc, #216]	@ (8005758 <DMA_SetConfig+0x224>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d040      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a35      	ldr	r2, [pc, #212]	@ (800575c <DMA_SetConfig+0x228>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d03b      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a33      	ldr	r2, [pc, #204]	@ (8005760 <DMA_SetConfig+0x22c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d036      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a32      	ldr	r2, [pc, #200]	@ (8005764 <DMA_SetConfig+0x230>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d031      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a30      	ldr	r2, [pc, #192]	@ (8005768 <DMA_SetConfig+0x234>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d02c      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a2f      	ldr	r2, [pc, #188]	@ (800576c <DMA_SetConfig+0x238>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d027      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005770 <DMA_SetConfig+0x23c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d022      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005774 <DMA_SetConfig+0x240>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d01d      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005778 <DMA_SetConfig+0x244>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d018      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a29      	ldr	r2, [pc, #164]	@ (800577c <DMA_SetConfig+0x248>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d013      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a27      	ldr	r2, [pc, #156]	@ (8005780 <DMA_SetConfig+0x24c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00e      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a26      	ldr	r2, [pc, #152]	@ (8005784 <DMA_SetConfig+0x250>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d009      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a24      	ldr	r2, [pc, #144]	@ (8005788 <DMA_SetConfig+0x254>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d004      	beq.n	8005704 <DMA_SetConfig+0x1d0>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a23      	ldr	r2, [pc, #140]	@ (800578c <DMA_SetConfig+0x258>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d101      	bne.n	8005708 <DMA_SetConfig+0x1d4>
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <DMA_SetConfig+0x1d6>
 8005708:	2300      	movs	r3, #0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d059      	beq.n	80057c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	223f      	movs	r2, #63	@ 0x3f
 8005718:	409a      	lsls	r2, r3
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800572c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b40      	cmp	r3, #64	@ 0x40
 800573c:	d138      	bne.n	80057b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800574e:	e086      	b.n	800585e <DMA_SetConfig+0x32a>
 8005750:	40020010 	.word	0x40020010
 8005754:	40020028 	.word	0x40020028
 8005758:	40020040 	.word	0x40020040
 800575c:	40020058 	.word	0x40020058
 8005760:	40020070 	.word	0x40020070
 8005764:	40020088 	.word	0x40020088
 8005768:	400200a0 	.word	0x400200a0
 800576c:	400200b8 	.word	0x400200b8
 8005770:	40020410 	.word	0x40020410
 8005774:	40020428 	.word	0x40020428
 8005778:	40020440 	.word	0x40020440
 800577c:	40020458 	.word	0x40020458
 8005780:	40020470 	.word	0x40020470
 8005784:	40020488 	.word	0x40020488
 8005788:	400204a0 	.word	0x400204a0
 800578c:	400204b8 	.word	0x400204b8
 8005790:	58025408 	.word	0x58025408
 8005794:	5802541c 	.word	0x5802541c
 8005798:	58025430 	.word	0x58025430
 800579c:	58025444 	.word	0x58025444
 80057a0:	58025458 	.word	0x58025458
 80057a4:	5802546c 	.word	0x5802546c
 80057a8:	58025480 	.word	0x58025480
 80057ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]
}
 80057c0:	e04d      	b.n	800585e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a29      	ldr	r2, [pc, #164]	@ (800586c <DMA_SetConfig+0x338>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d022      	beq.n	8005812 <DMA_SetConfig+0x2de>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a27      	ldr	r2, [pc, #156]	@ (8005870 <DMA_SetConfig+0x33c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d01d      	beq.n	8005812 <DMA_SetConfig+0x2de>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a26      	ldr	r2, [pc, #152]	@ (8005874 <DMA_SetConfig+0x340>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d018      	beq.n	8005812 <DMA_SetConfig+0x2de>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a24      	ldr	r2, [pc, #144]	@ (8005878 <DMA_SetConfig+0x344>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <DMA_SetConfig+0x2de>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a23      	ldr	r2, [pc, #140]	@ (800587c <DMA_SetConfig+0x348>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00e      	beq.n	8005812 <DMA_SetConfig+0x2de>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a21      	ldr	r2, [pc, #132]	@ (8005880 <DMA_SetConfig+0x34c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d009      	beq.n	8005812 <DMA_SetConfig+0x2de>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a20      	ldr	r2, [pc, #128]	@ (8005884 <DMA_SetConfig+0x350>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <DMA_SetConfig+0x2de>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1e      	ldr	r2, [pc, #120]	@ (8005888 <DMA_SetConfig+0x354>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d101      	bne.n	8005816 <DMA_SetConfig+0x2e2>
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <DMA_SetConfig+0x2e4>
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d020      	beq.n	800585e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	2201      	movs	r2, #1
 8005826:	409a      	lsls	r2, r3
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b40      	cmp	r3, #64	@ 0x40
 800583a:	d108      	bne.n	800584e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	60da      	str	r2, [r3, #12]
}
 800584c:	e007      	b.n	800585e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	58025408 	.word	0x58025408
 8005870:	5802541c 	.word	0x5802541c
 8005874:	58025430 	.word	0x58025430
 8005878:	58025444 	.word	0x58025444
 800587c:	58025458 	.word	0x58025458
 8005880:	5802546c 	.word	0x5802546c
 8005884:	58025480 	.word	0x58025480
 8005888:	58025494 	.word	0x58025494

0800588c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a42      	ldr	r2, [pc, #264]	@ (80059a4 <DMA_CalcBaseAndBitshift+0x118>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d04a      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a41      	ldr	r2, [pc, #260]	@ (80059a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d045      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a3f      	ldr	r2, [pc, #252]	@ (80059ac <DMA_CalcBaseAndBitshift+0x120>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d040      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a3e      	ldr	r2, [pc, #248]	@ (80059b0 <DMA_CalcBaseAndBitshift+0x124>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d03b      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a3c      	ldr	r2, [pc, #240]	@ (80059b4 <DMA_CalcBaseAndBitshift+0x128>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d036      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a3b      	ldr	r2, [pc, #236]	@ (80059b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d031      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a39      	ldr	r2, [pc, #228]	@ (80059bc <DMA_CalcBaseAndBitshift+0x130>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d02c      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a38      	ldr	r2, [pc, #224]	@ (80059c0 <DMA_CalcBaseAndBitshift+0x134>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d027      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a36      	ldr	r2, [pc, #216]	@ (80059c4 <DMA_CalcBaseAndBitshift+0x138>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d022      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a35      	ldr	r2, [pc, #212]	@ (80059c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d01d      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a33      	ldr	r2, [pc, #204]	@ (80059cc <DMA_CalcBaseAndBitshift+0x140>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d018      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a32      	ldr	r2, [pc, #200]	@ (80059d0 <DMA_CalcBaseAndBitshift+0x144>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a30      	ldr	r2, [pc, #192]	@ (80059d4 <DMA_CalcBaseAndBitshift+0x148>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00e      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2f      	ldr	r2, [pc, #188]	@ (80059d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d009      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2d      	ldr	r2, [pc, #180]	@ (80059dc <DMA_CalcBaseAndBitshift+0x150>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <DMA_CalcBaseAndBitshift+0xa8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2c      	ldr	r2, [pc, #176]	@ (80059e0 <DMA_CalcBaseAndBitshift+0x154>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d101      	bne.n	8005938 <DMA_CalcBaseAndBitshift+0xac>
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <DMA_CalcBaseAndBitshift+0xae>
 8005938:	2300      	movs	r3, #0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d024      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	3b10      	subs	r3, #16
 8005946:	4a27      	ldr	r2, [pc, #156]	@ (80059e4 <DMA_CalcBaseAndBitshift+0x158>)
 8005948:	fba2 2303 	umull	r2, r3, r2, r3
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	4a24      	ldr	r2, [pc, #144]	@ (80059e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005958:	5cd3      	ldrb	r3, [r2, r3]
 800595a:	461a      	mov	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b03      	cmp	r3, #3
 8005964:	d908      	bls.n	8005978 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	4b1f      	ldr	r3, [pc, #124]	@ (80059ec <DMA_CalcBaseAndBitshift+0x160>)
 800596e:	4013      	ands	r3, r2
 8005970:	1d1a      	adds	r2, r3, #4
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	659a      	str	r2, [r3, #88]	@ 0x58
 8005976:	e00d      	b.n	8005994 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <DMA_CalcBaseAndBitshift+0x160>)
 8005980:	4013      	ands	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6593      	str	r3, [r2, #88]	@ 0x58
 8005986:	e005      	b.n	8005994 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40020010 	.word	0x40020010
 80059a8:	40020028 	.word	0x40020028
 80059ac:	40020040 	.word	0x40020040
 80059b0:	40020058 	.word	0x40020058
 80059b4:	40020070 	.word	0x40020070
 80059b8:	40020088 	.word	0x40020088
 80059bc:	400200a0 	.word	0x400200a0
 80059c0:	400200b8 	.word	0x400200b8
 80059c4:	40020410 	.word	0x40020410
 80059c8:	40020428 	.word	0x40020428
 80059cc:	40020440 	.word	0x40020440
 80059d0:	40020458 	.word	0x40020458
 80059d4:	40020470 	.word	0x40020470
 80059d8:	40020488 	.word	0x40020488
 80059dc:	400204a0 	.word	0x400204a0
 80059e0:	400204b8 	.word	0x400204b8
 80059e4:	aaaaaaab 	.word	0xaaaaaaab
 80059e8:	080151c0 	.word	0x080151c0
 80059ec:	fffffc00 	.word	0xfffffc00

080059f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d120      	bne.n	8005a46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d858      	bhi.n	8005abe <DMA_CheckFifoParam+0xce>
 8005a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <DMA_CheckFifoParam+0x24>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005a37 	.word	0x08005a37
 8005a1c:	08005a25 	.word	0x08005a25
 8005a20:	08005abf 	.word	0x08005abf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d048      	beq.n	8005ac2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a34:	e045      	b.n	8005ac2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a3e:	d142      	bne.n	8005ac6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a44:	e03f      	b.n	8005ac6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a4e:	d123      	bne.n	8005a98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d838      	bhi.n	8005aca <DMA_CheckFifoParam+0xda>
 8005a58:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <DMA_CheckFifoParam+0x70>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a71 	.word	0x08005a71
 8005a64:	08005a77 	.word	0x08005a77
 8005a68:	08005a71 	.word	0x08005a71
 8005a6c:	08005a89 	.word	0x08005a89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
        break;
 8005a74:	e030      	b.n	8005ad8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d025      	beq.n	8005ace <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a86:	e022      	b.n	8005ace <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a90:	d11f      	bne.n	8005ad2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a96:	e01c      	b.n	8005ad2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d902      	bls.n	8005aa6 <DMA_CheckFifoParam+0xb6>
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d003      	beq.n	8005aac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005aa4:	e018      	b.n	8005ad8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8005aaa:	e015      	b.n	8005ad8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00e      	beq.n	8005ad6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
    break;
 8005abc:	e00b      	b.n	8005ad6 <DMA_CheckFifoParam+0xe6>
        break;
 8005abe:	bf00      	nop
 8005ac0:	e00a      	b.n	8005ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8005ac2:	bf00      	nop
 8005ac4:	e008      	b.n	8005ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8005ac6:	bf00      	nop
 8005ac8:	e006      	b.n	8005ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8005aca:	bf00      	nop
 8005acc:	e004      	b.n	8005ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e002      	b.n	8005ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8005ad2:	bf00      	nop
 8005ad4:	e000      	b.n	8005ad8 <DMA_CheckFifoParam+0xe8>
    break;
 8005ad6:	bf00      	nop
    }
  }

  return status;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop

08005ae8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a38      	ldr	r2, [pc, #224]	@ (8005bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d022      	beq.n	8005b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a36      	ldr	r2, [pc, #216]	@ (8005be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d01d      	beq.n	8005b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a35      	ldr	r2, [pc, #212]	@ (8005be4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d018      	beq.n	8005b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a33      	ldr	r2, [pc, #204]	@ (8005be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a32      	ldr	r2, [pc, #200]	@ (8005bec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00e      	beq.n	8005b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a30      	ldr	r2, [pc, #192]	@ (8005bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d009      	beq.n	8005b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d004      	beq.n	8005b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a2d      	ldr	r2, [pc, #180]	@ (8005bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d101      	bne.n	8005b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01a      	beq.n	8005b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	3b08      	subs	r3, #8
 8005b58:	4a28      	ldr	r2, [pc, #160]	@ (8005bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5e:	091b      	lsrs	r3, r3, #4
 8005b60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4b26      	ldr	r3, [pc, #152]	@ (8005c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a24      	ldr	r2, [pc, #144]	@ (8005c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005b74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005b84:	e024      	b.n	8005bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	3b10      	subs	r3, #16
 8005b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005b90:	fba2 2303 	umull	r2, r3, r2, r3
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8005c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d806      	bhi.n	8005bae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d902      	bls.n	8005bae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3308      	adds	r3, #8
 8005bac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4b18      	ldr	r3, [pc, #96]	@ (8005c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a16      	ldr	r2, [pc, #88]	@ (8005c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005bc0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2201      	movs	r2, #1
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	58025408 	.word	0x58025408
 8005be0:	5802541c 	.word	0x5802541c
 8005be4:	58025430 	.word	0x58025430
 8005be8:	58025444 	.word	0x58025444
 8005bec:	58025458 	.word	0x58025458
 8005bf0:	5802546c 	.word	0x5802546c
 8005bf4:	58025480 	.word	0x58025480
 8005bf8:	58025494 	.word	0x58025494
 8005bfc:	cccccccd 	.word	0xcccccccd
 8005c00:	16009600 	.word	0x16009600
 8005c04:	58025880 	.word	0x58025880
 8005c08:	aaaaaaab 	.word	0xaaaaaaab
 8005c0c:	400204b8 	.word	0x400204b8
 8005c10:	4002040f 	.word	0x4002040f
 8005c14:	10008200 	.word	0x10008200
 8005c18:	40020880 	.word	0x40020880

08005c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d04a      	beq.n	8005cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d847      	bhi.n	8005cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a25      	ldr	r2, [pc, #148]	@ (8005cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d022      	beq.n	8005c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a24      	ldr	r2, [pc, #144]	@ (8005cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d01d      	beq.n	8005c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a22      	ldr	r2, [pc, #136]	@ (8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d018      	beq.n	8005c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a21      	ldr	r2, [pc, #132]	@ (8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d013      	beq.n	8005c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00e      	beq.n	8005c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d009      	beq.n	8005c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1c      	ldr	r2, [pc, #112]	@ (8005cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d101      	bne.n	8005c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4b17      	ldr	r3, [pc, #92]	@ (8005cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a15      	ldr	r2, [pc, #84]	@ (8005cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ca4:	671a      	str	r2, [r3, #112]	@ 0x70
 8005ca6:	e009      	b.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4b14      	ldr	r3, [pc, #80]	@ (8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a11      	ldr	r2, [pc, #68]	@ (8005d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005cba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005cc8:	bf00      	nop
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	58025408 	.word	0x58025408
 8005cd8:	5802541c 	.word	0x5802541c
 8005cdc:	58025430 	.word	0x58025430
 8005ce0:	58025444 	.word	0x58025444
 8005ce4:	58025458 	.word	0x58025458
 8005ce8:	5802546c 	.word	0x5802546c
 8005cec:	58025480 	.word	0x58025480
 8005cf0:	58025494 	.word	0x58025494
 8005cf4:	1600963f 	.word	0x1600963f
 8005cf8:	58025940 	.word	0x58025940
 8005cfc:	1000823f 	.word	0x1000823f
 8005d00:	40020940 	.word	0x40020940

08005d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b089      	sub	sp, #36	@ 0x24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d12:	4b89      	ldr	r3, [pc, #548]	@ (8005f38 <HAL_GPIO_Init+0x234>)
 8005d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d16:	e194      	b.n	8006042 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	fa01 f303 	lsl.w	r3, r1, r3
 8005d24:	4013      	ands	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 8186 	beq.w	800603c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d005      	beq.n	8005d48 <HAL_GPIO_Init+0x44>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d130      	bne.n	8005daa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	2203      	movs	r2, #3
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d7e:	2201      	movs	r2, #1
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	f003 0201 	and.w	r2, r3, #1
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d017      	beq.n	8005de6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d123      	bne.n	8005e3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	08da      	lsrs	r2, r3, #3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3208      	adds	r2, #8
 8005dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	220f      	movs	r2, #15
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4013      	ands	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	08da      	lsrs	r2, r3, #3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3208      	adds	r2, #8
 8005e34:	69b9      	ldr	r1, [r7, #24]
 8005e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	2203      	movs	r2, #3
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f003 0203 	and.w	r2, r3, #3
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80e0 	beq.w	800603c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8005f3c <HAL_GPIO_Init+0x238>)
 8005e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e82:	4a2e      	ldr	r2, [pc, #184]	@ (8005f3c <HAL_GPIO_Init+0x238>)
 8005e84:	f043 0302 	orr.w	r3, r3, #2
 8005e88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8005f3c <HAL_GPIO_Init+0x238>)
 8005e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e9a:	4a29      	ldr	r2, [pc, #164]	@ (8005f40 <HAL_GPIO_Init+0x23c>)
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	089b      	lsrs	r3, r3, #2
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	220f      	movs	r2, #15
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a20      	ldr	r2, [pc, #128]	@ (8005f44 <HAL_GPIO_Init+0x240>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d052      	beq.n	8005f6c <HAL_GPIO_Init+0x268>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f48 <HAL_GPIO_Init+0x244>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d031      	beq.n	8005f32 <HAL_GPIO_Init+0x22e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8005f4c <HAL_GPIO_Init+0x248>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d02b      	beq.n	8005f2e <HAL_GPIO_Init+0x22a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f50 <HAL_GPIO_Init+0x24c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d025      	beq.n	8005f2a <HAL_GPIO_Init+0x226>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f54 <HAL_GPIO_Init+0x250>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01f      	beq.n	8005f26 <HAL_GPIO_Init+0x222>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f58 <HAL_GPIO_Init+0x254>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d019      	beq.n	8005f22 <HAL_GPIO_Init+0x21e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8005f5c <HAL_GPIO_Init+0x258>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <HAL_GPIO_Init+0x21a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a19      	ldr	r2, [pc, #100]	@ (8005f60 <HAL_GPIO_Init+0x25c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00d      	beq.n	8005f1a <HAL_GPIO_Init+0x216>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a18      	ldr	r2, [pc, #96]	@ (8005f64 <HAL_GPIO_Init+0x260>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d007      	beq.n	8005f16 <HAL_GPIO_Init+0x212>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a17      	ldr	r2, [pc, #92]	@ (8005f68 <HAL_GPIO_Init+0x264>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d101      	bne.n	8005f12 <HAL_GPIO_Init+0x20e>
 8005f0e:	2309      	movs	r3, #9
 8005f10:	e02d      	b.n	8005f6e <HAL_GPIO_Init+0x26a>
 8005f12:	230a      	movs	r3, #10
 8005f14:	e02b      	b.n	8005f6e <HAL_GPIO_Init+0x26a>
 8005f16:	2308      	movs	r3, #8
 8005f18:	e029      	b.n	8005f6e <HAL_GPIO_Init+0x26a>
 8005f1a:	2307      	movs	r3, #7
 8005f1c:	e027      	b.n	8005f6e <HAL_GPIO_Init+0x26a>
 8005f1e:	2306      	movs	r3, #6
 8005f20:	e025      	b.n	8005f6e <HAL_GPIO_Init+0x26a>
 8005f22:	2305      	movs	r3, #5
 8005f24:	e023      	b.n	8005f6e <HAL_GPIO_Init+0x26a>
 8005f26:	2304      	movs	r3, #4
 8005f28:	e021      	b.n	8005f6e <HAL_GPIO_Init+0x26a>
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e01f      	b.n	8005f6e <HAL_GPIO_Init+0x26a>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e01d      	b.n	8005f6e <HAL_GPIO_Init+0x26a>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e01b      	b.n	8005f6e <HAL_GPIO_Init+0x26a>
 8005f36:	bf00      	nop
 8005f38:	58000080 	.word	0x58000080
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	58000400 	.word	0x58000400
 8005f44:	58020000 	.word	0x58020000
 8005f48:	58020400 	.word	0x58020400
 8005f4c:	58020800 	.word	0x58020800
 8005f50:	58020c00 	.word	0x58020c00
 8005f54:	58021000 	.word	0x58021000
 8005f58:	58021400 	.word	0x58021400
 8005f5c:	58021800 	.word	0x58021800
 8005f60:	58021c00 	.word	0x58021c00
 8005f64:	58022000 	.word	0x58022000
 8005f68:	58022400 	.word	0x58022400
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	f002 0203 	and.w	r2, r2, #3
 8005f74:	0092      	lsls	r2, r2, #2
 8005f76:	4093      	lsls	r3, r2
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f7e:	4938      	ldr	r1, [pc, #224]	@ (8006060 <HAL_GPIO_Init+0x35c>)
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	089b      	lsrs	r3, r3, #2
 8005f84:	3302      	adds	r3, #2
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	43db      	mvns	r3, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005fb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005fe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	43db      	mvns	r3, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4013      	ands	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	3301      	adds	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	f47f ae63 	bne.w	8005d18 <HAL_GPIO_Init+0x14>
  }
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	3724      	adds	r7, #36	@ 0x24
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	58000400 	.word	0x58000400

08006064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	807b      	strh	r3, [r7, #2]
 8006070:	4613      	mov	r3, r2
 8006072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006074:	787b      	ldrb	r3, [r7, #1]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800607a:	887a      	ldrh	r2, [r7, #2]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006080:	e003      	b.n	800608a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006082:	887b      	ldrh	r3, [r7, #2]
 8006084:	041a      	lsls	r2, r3, #16
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	619a      	str	r2, [r3, #24]
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060a8:	887a      	ldrh	r2, [r7, #2]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4013      	ands	r3, r2
 80060ae:	041a      	lsls	r2, r3, #16
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	43d9      	mvns	r1, r3
 80060b4:	887b      	ldrh	r3, [r7, #2]
 80060b6:	400b      	ands	r3, r1
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	619a      	str	r2, [r3, #24]
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e07f      	b.n	80061de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fa fc4a 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2224      	movs	r2, #36	@ 0x24
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0201 	bic.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800611c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800612c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d107      	bne.n	8006146 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006142:	609a      	str	r2, [r3, #8]
 8006144:	e006      	b.n	8006154 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006152:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b02      	cmp	r3, #2
 800615a:	d104      	bne.n	8006166 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6859      	ldr	r1, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b1d      	ldr	r3, [pc, #116]	@ (80061e8 <HAL_I2C_Init+0x11c>)
 8006172:	430b      	orrs	r3, r1
 8006174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69d9      	ldr	r1, [r3, #28]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1a      	ldr	r2, [r3, #32]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	02008000 	.word	0x02008000

080061ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	4608      	mov	r0, r1
 80061f6:	4611      	mov	r1, r2
 80061f8:	461a      	mov	r2, r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	817b      	strh	r3, [r7, #10]
 80061fe:	460b      	mov	r3, r1
 8006200:	813b      	strh	r3, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b20      	cmp	r3, #32
 8006210:	f040 80f9 	bne.w	8006406 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <HAL_I2C_Mem_Write+0x34>
 800621a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d105      	bne.n	800622c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006226:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e0ed      	b.n	8006408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_I2C_Mem_Write+0x4e>
 8006236:	2302      	movs	r3, #2
 8006238:	e0e6      	b.n	8006408 <HAL_I2C_Mem_Write+0x21c>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006242:	f7fb fca1 	bl	8001b88 <HAL_GetTick>
 8006246:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	2319      	movs	r3, #25
 800624e:	2201      	movs	r2, #1
 8006250:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f955 	bl	8006504 <I2C_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0d1      	b.n	8006408 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2221      	movs	r2, #33	@ 0x21
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2240      	movs	r2, #64	@ 0x40
 8006270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a3a      	ldr	r2, [r7, #32]
 800627e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800628c:	88f8      	ldrh	r0, [r7, #6]
 800628e:	893a      	ldrh	r2, [r7, #8]
 8006290:	8979      	ldrh	r1, [r7, #10]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	4603      	mov	r3, r0
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f8b9 	bl	8006414 <I2C_RequestMemoryWrite>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0a9      	b.n	8006408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2bff      	cmp	r3, #255	@ 0xff
 80062bc:	d90e      	bls.n	80062dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	22ff      	movs	r2, #255	@ 0xff
 80062c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	8979      	ldrh	r1, [r7, #10]
 80062cc:	2300      	movs	r3, #0
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 facf 	bl	8006878 <I2C_TransferConfig>
 80062da:	e00f      	b.n	80062fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	8979      	ldrh	r1, [r7, #10]
 80062ee:	2300      	movs	r3, #0
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fabe 	bl	8006878 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f94e 	bl	80065a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e07b      	b.n	8006408 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d034      	beq.n	80063b4 <HAL_I2C_Mem_Write+0x1c8>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800634e:	2b00      	cmp	r3, #0
 8006350:	d130      	bne.n	80063b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	2200      	movs	r2, #0
 800635a:	2180      	movs	r1, #128	@ 0x80
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f8d1 	bl	8006504 <I2C_WaitOnFlagUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e04d      	b.n	8006408 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006370:	b29b      	uxth	r3, r3
 8006372:	2bff      	cmp	r3, #255	@ 0xff
 8006374:	d90e      	bls.n	8006394 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	22ff      	movs	r2, #255	@ 0xff
 800637a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006380:	b2da      	uxtb	r2, r3
 8006382:	8979      	ldrh	r1, [r7, #10]
 8006384:	2300      	movs	r3, #0
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 fa73 	bl	8006878 <I2C_TransferConfig>
 8006392:	e00f      	b.n	80063b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	8979      	ldrh	r1, [r7, #10]
 80063a6:	2300      	movs	r3, #0
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fa62 	bl	8006878 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d19e      	bne.n	80062fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f934 	bl	8006630 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e01a      	b.n	8006408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2220      	movs	r2, #32
 80063d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6859      	ldr	r1, [r3, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006410 <HAL_I2C_Mem_Write+0x224>)
 80063e6:	400b      	ands	r3, r1
 80063e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e000      	b.n	8006408 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006406:	2302      	movs	r3, #2
  }
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	fe00e800 	.word	0xfe00e800

08006414 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	461a      	mov	r2, r3
 8006422:	4603      	mov	r3, r0
 8006424:	817b      	strh	r3, [r7, #10]
 8006426:	460b      	mov	r3, r1
 8006428:	813b      	strh	r3, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	8979      	ldrh	r1, [r7, #10]
 8006434:	4b20      	ldr	r3, [pc, #128]	@ (80064b8 <I2C_RequestMemoryWrite+0xa4>)
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fa1b 	bl	8006878 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	69b9      	ldr	r1, [r7, #24]
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f8ab 	bl	80065a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e02c      	b.n	80064b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d105      	bne.n	8006468 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800645c:	893b      	ldrh	r3, [r7, #8]
 800645e:	b2da      	uxtb	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	629a      	str	r2, [r3, #40]	@ 0x28
 8006466:	e015      	b.n	8006494 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006468:	893b      	ldrh	r3, [r7, #8]
 800646a:	0a1b      	lsrs	r3, r3, #8
 800646c:	b29b      	uxth	r3, r3
 800646e:	b2da      	uxtb	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	69b9      	ldr	r1, [r7, #24]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 f891 	bl	80065a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e012      	b.n	80064b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800648a:	893b      	ldrh	r3, [r7, #8]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2200      	movs	r2, #0
 800649c:	2180      	movs	r1, #128	@ 0x80
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f830 	bl	8006504 <I2C_WaitOnFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	80002000 	.word	0x80002000

080064bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d103      	bne.n	80064da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2200      	movs	r2, #0
 80064d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d007      	beq.n	80064f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	619a      	str	r2, [r3, #24]
  }
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006514:	e031      	b.n	800657a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d02d      	beq.n	800657a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651e:	f7fb fb33 	bl	8001b88 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d302      	bcc.n	8006534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d122      	bne.n	800657a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4013      	ands	r3, r2
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	429a      	cmp	r2, r3
 8006550:	d113      	bne.n	800657a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006556:	f043 0220 	orr.w	r2, r3, #32
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e00f      	b.n	800659a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699a      	ldr	r2, [r3, #24]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4013      	ands	r3, r2
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	429a      	cmp	r2, r3
 8006588:	bf0c      	ite	eq
 800658a:	2301      	moveq	r3, #1
 800658c:	2300      	movne	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	461a      	mov	r2, r3
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	429a      	cmp	r2, r3
 8006596:	d0be      	beq.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065ae:	e033      	b.n	8006618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f87f 	bl	80066b8 <I2C_IsErrorOccurred>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e031      	b.n	8006628 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d025      	beq.n	8006618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065cc:	f7fb fadc 	bl	8001b88 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d302      	bcc.n	80065e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d11a      	bne.n	8006618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d013      	beq.n	8006618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f4:	f043 0220 	orr.w	r2, r3, #32
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e007      	b.n	8006628 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b02      	cmp	r3, #2
 8006624:	d1c4      	bne.n	80065b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800663c:	e02f      	b.n	800669e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f838 	bl	80066b8 <I2C_IsErrorOccurred>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e02d      	b.n	80066ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006652:	f7fb fa99 	bl	8001b88 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	429a      	cmp	r2, r3
 8006660:	d302      	bcc.n	8006668 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d11a      	bne.n	800669e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b20      	cmp	r3, #32
 8006674:	d013      	beq.n	800669e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667a:	f043 0220 	orr.w	r2, r3, #32
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e007      	b.n	80066ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	d1c8      	bne.n	800663e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08a      	sub	sp, #40	@ 0x28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d068      	beq.n	80067b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2210      	movs	r2, #16
 80066ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066ec:	e049      	b.n	8006782 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d045      	beq.n	8006782 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066f6:	f7fb fa47 	bl	8001b88 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	429a      	cmp	r2, r3
 8006704:	d302      	bcc.n	800670c <I2C_IsErrorOccurred+0x54>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d13a      	bne.n	8006782 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006716:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800671e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800672a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800672e:	d121      	bne.n	8006774 <I2C_IsErrorOccurred+0xbc>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006736:	d01d      	beq.n	8006774 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006738:	7cfb      	ldrb	r3, [r7, #19]
 800673a:	2b20      	cmp	r3, #32
 800673c:	d01a      	beq.n	8006774 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800674c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800674e:	f7fb fa1b 	bl	8001b88 <HAL_GetTick>
 8006752:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006754:	e00e      	b.n	8006774 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006756:	f7fb fa17 	bl	8001b88 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b19      	cmp	r3, #25
 8006762:	d907      	bls.n	8006774 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	f043 0320 	orr.w	r3, r3, #32
 800676a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006772:	e006      	b.n	8006782 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b20      	cmp	r3, #32
 8006780:	d1e9      	bne.n	8006756 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b20      	cmp	r3, #32
 800678e:	d003      	beq.n	8006798 <I2C_IsErrorOccurred+0xe0>
 8006790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0aa      	beq.n	80066ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2220      	movs	r2, #32
 80067a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	f043 0304 	orr.w	r3, r3, #4
 80067ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00b      	beq.n	80067e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	f043 0301 	orr.w	r3, r3, #1
 80067ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	f043 0308 	orr.w	r3, r3, #8
 80067f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	f043 0302 	orr.w	r3, r3, #2
 8006812:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800681c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01c      	beq.n	8006866 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f7ff fe45 	bl	80064bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6859      	ldr	r1, [r3, #4]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <I2C_IsErrorOccurred+0x1bc>)
 800683e:	400b      	ands	r3, r1
 8006840:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	431a      	orrs	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800686a:	4618      	mov	r0, r3
 800686c:	3728      	adds	r7, #40	@ 0x28
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	fe00e800 	.word	0xfe00e800

08006878 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	607b      	str	r3, [r7, #4]
 8006882:	460b      	mov	r3, r1
 8006884:	817b      	strh	r3, [r7, #10]
 8006886:	4613      	mov	r3, r2
 8006888:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800688a:	897b      	ldrh	r3, [r7, #10]
 800688c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006890:	7a7b      	ldrb	r3, [r7, #9]
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006898:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	0d5b      	lsrs	r3, r3, #21
 80068b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80068b6:	4b08      	ldr	r3, [pc, #32]	@ (80068d8 <I2C_TransferConfig+0x60>)
 80068b8:	430b      	orrs	r3, r1
 80068ba:	43db      	mvns	r3, r3
 80068bc:	ea02 0103 	and.w	r1, r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	03ff63ff 	.word	0x03ff63ff

080068dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d138      	bne.n	8006964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e032      	b.n	8006966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2224      	movs	r2, #36	@ 0x24
 800690c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0201 	bic.w	r2, r2, #1
 800691e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800692e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6819      	ldr	r1, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	e000      	b.n	8006966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006964:	2302      	movs	r3, #2
  }
}
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b20      	cmp	r3, #32
 8006986:	d139      	bne.n	80069fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800698e:	2b01      	cmp	r3, #1
 8006990:	d101      	bne.n	8006996 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006992:	2302      	movs	r3, #2
 8006994:	e033      	b.n	80069fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2224      	movs	r2, #36	@ 0x24
 80069a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0201 	bic.w	r2, r2, #1
 80069b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80069c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069fc:	2302      	movs	r3, #2
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a0c:	b08f      	sub	sp, #60	@ 0x3c
 8006a0e:	af0a      	add	r7, sp, #40	@ 0x28
 8006a10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e116      	b.n	8006c4a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f00b f8b4 	bl	8011ba4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2203      	movs	r2, #3
 8006a40:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f007 f803 	bl	800da66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	687e      	ldr	r6, [r7, #4]
 8006a68:	466d      	mov	r5, sp
 8006a6a:	f106 0410 	add.w	r4, r6, #16
 8006a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a7e:	1d33      	adds	r3, r6, #4
 8006a80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a82:	6838      	ldr	r0, [r7, #0]
 8006a84:	f006 fece 	bl	800d824 <USB_CoreInit>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e0d7      	b.n	8006c4a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f006 fff1 	bl	800da88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]
 8006aaa:	e04a      	b.n	8006b42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006aac:	7bfa      	ldrb	r2, [r7, #15]
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	333d      	adds	r3, #61	@ 0x3d
 8006abc:	2201      	movs	r2, #1
 8006abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006ac0:	7bfa      	ldrb	r2, [r7, #15]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	333c      	adds	r3, #60	@ 0x3c
 8006ad0:	7bfa      	ldrb	r2, [r7, #15]
 8006ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006ad4:	7bfa      	ldrb	r2, [r7, #15]
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	b298      	uxth	r0, r3
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	4613      	mov	r3, r2
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	3356      	adds	r3, #86	@ 0x56
 8006ae8:	4602      	mov	r2, r0
 8006aea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006aec:	7bfa      	ldrb	r2, [r7, #15]
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4613      	mov	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	3340      	adds	r3, #64	@ 0x40
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b00:	7bfa      	ldrb	r2, [r7, #15]
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	3344      	adds	r3, #68	@ 0x44
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b14:	7bfa      	ldrb	r2, [r7, #15]
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	3348      	adds	r3, #72	@ 0x48
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006b28:	7bfa      	ldrb	r2, [r7, #15]
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	334c      	adds	r3, #76	@ 0x4c
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
 8006b42:	7bfa      	ldrb	r2, [r7, #15]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d3af      	bcc.n	8006aac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
 8006b50:	e044      	b.n	8006bdc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b52:	7bfa      	ldrb	r2, [r7, #15]
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006b68:	7bfa      	ldrb	r2, [r7, #15]
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8006b7a:	7bfa      	ldrb	r2, [r7, #15]
 8006b7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006b7e:	7bfa      	ldrb	r2, [r7, #15]
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006b90:	2200      	movs	r2, #0
 8006b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006b94:	7bfa      	ldrb	r2, [r7, #15]
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006baa:	7bfa      	ldrb	r2, [r7, #15]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006bc0:	7bfa      	ldrb	r2, [r7, #15]
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	73fb      	strb	r3, [r7, #15]
 8006bdc:	7bfa      	ldrb	r2, [r7, #15]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3b5      	bcc.n	8006b52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	687e      	ldr	r6, [r7, #4]
 8006bee:	466d      	mov	r5, sp
 8006bf0:	f106 0410 	add.w	r4, r6, #16
 8006bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c00:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c04:	1d33      	adds	r3, r6, #4
 8006c06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c08:	6838      	ldr	r0, [r7, #0]
 8006c0a:	f006 ff89 	bl	800db20 <USB_DevInit>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e014      	b.n	8006c4a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d102      	bne.n	8006c3e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 f96f 	bl	8007f1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f007 ffcb 	bl	800ebde <USB_DevDisconnect>

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_PCD_Start+0x1c>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e022      	b.n	8006cb4 <HAL_PCD_Start+0x62>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d105      	bne.n	8006c96 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f006 fed2 	bl	800da44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f007 ff79 	bl	800eb9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006cbc:	b590      	push	{r4, r7, lr}
 8006cbe:	b08d      	sub	sp, #52	@ 0x34
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f008 f837 	bl	800ed46 <USB_GetMode>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f040 84b7 	bne.w	800764e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f007 ff9b 	bl	800ec20 <USB_ReadInterrupts>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 84ad 	beq.w	800764c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f007 ff88 	bl	800ec20 <USB_ReadInterrupts>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d107      	bne.n	8006d2a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695a      	ldr	r2, [r3, #20]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f002 0202 	and.w	r2, r2, #2
 8006d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f007 ff76 	bl	800ec20 <USB_ReadInterrupts>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	d161      	bne.n	8006e02 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0210 	bic.w	r2, r2, #16
 8006d4c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	f003 020f 	and.w	r2, r3, #15
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4413      	add	r3, r2
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	0c5b      	lsrs	r3, r3, #17
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d124      	bne.n	8006dc4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006d80:	4013      	ands	r3, r2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d035      	beq.n	8006df2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	091b      	lsrs	r3, r3, #4
 8006d8e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	461a      	mov	r2, r3
 8006d98:	6a38      	ldr	r0, [r7, #32]
 8006d9a:	f007 fdad 	bl	800e8f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	091b      	lsrs	r3, r3, #4
 8006da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006daa:	441a      	add	r2, r3
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	091b      	lsrs	r3, r3, #4
 8006db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dbc:	441a      	add	r2, r3
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	615a      	str	r2, [r3, #20]
 8006dc2:	e016      	b.n	8006df2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	0c5b      	lsrs	r3, r3, #17
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	2b06      	cmp	r3, #6
 8006dce:	d110      	bne.n	8006df2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6a38      	ldr	r0, [r7, #32]
 8006ddc:	f007 fd8c 	bl	800e8f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	695a      	ldr	r2, [r3, #20]
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	091b      	lsrs	r3, r3, #4
 8006de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dec:	441a      	add	r2, r3
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699a      	ldr	r2, [r3, #24]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0210 	orr.w	r2, r2, #16
 8006e00:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f007 ff0a 	bl	800ec20 <USB_ReadInterrupts>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e16:	f040 80a7 	bne.w	8006f68 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f007 ff0f 	bl	800ec46 <USB_ReadDevAllOutEpInterrupt>
 8006e28:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006e2a:	e099      	b.n	8006f60 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 808e 	beq.w	8006f54 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	4611      	mov	r1, r2
 8006e42:	4618      	mov	r0, r3
 8006e44:	f007 ff33 	bl	800ecae <USB_ReadDevOutEPInterrupt>
 8006e48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00c      	beq.n	8006e6e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e60:	461a      	mov	r2, r3
 8006e62:	2301      	movs	r3, #1
 8006e64:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006e66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fed1 	bl	8007c10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e84:	461a      	mov	r2, r3
 8006e86:	2308      	movs	r3, #8
 8006e88:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006e8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 ffa7 	bl	8007de0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2310      	movs	r3, #16
 8006eac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d030      	beq.n	8006f1a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec0:	2b80      	cmp	r3, #128	@ 0x80
 8006ec2:	d109      	bne.n	8006ed8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ed6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	3304      	adds	r3, #4
 8006eec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	78db      	ldrb	r3, [r3, #3]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d108      	bne.n	8006f08 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f00a ff74 	bl	8011df0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f14:	461a      	mov	r2, r3
 8006f16:	2302      	movs	r3, #2
 8006f18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f003 0320 	and.w	r3, r3, #32
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f30:	461a      	mov	r2, r3
 8006f32:	2320      	movs	r3, #32
 8006f34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006f52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	3301      	adds	r3, #1
 8006f58:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	085b      	lsrs	r3, r3, #1
 8006f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f47f af62 	bne.w	8006e2c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f007 fe57 	bl	800ec20 <USB_ReadInterrupts>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f7c:	f040 80db 	bne.w	8007136 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f007 fe78 	bl	800ec7a <USB_ReadDevAllInEpInterrupt>
 8006f8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006f90:	e0cd      	b.n	800712e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 80c2 	beq.w	8007122 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f007 fe9e 	bl	800ecea <USB_ReadDevInEPInterrupt>
 8006fae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d057      	beq.n	800706a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	69f9      	ldr	r1, [r7, #28]
 8006fd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fda:	4013      	ands	r3, r2
 8006fdc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fea:	461a      	mov	r2, r3
 8006fec:	2301      	movs	r3, #1
 8006fee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d132      	bne.n	800705e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	3348      	adds	r3, #72	@ 0x48
 8007008:	6819      	ldr	r1, [r3, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800700e:	4613      	mov	r3, r2
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4403      	add	r3, r0
 8007018:	3344      	adds	r3, #68	@ 0x44
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4419      	add	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007022:	4613      	mov	r3, r2
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4403      	add	r3, r0
 800702c:	3348      	adds	r3, #72	@ 0x48
 800702e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	d113      	bne.n	800705e <HAL_PCD_IRQHandler+0x3a2>
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800703a:	4613      	mov	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	334c      	adds	r3, #76	@ 0x4c
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d108      	bne.n	800705e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007056:	461a      	mov	r2, r3
 8007058:	2101      	movs	r1, #1
 800705a:	f007 fea7 	bl	800edac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	b2db      	uxtb	r3, r3
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f00a fe3e 	bl	8011ce6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d008      	beq.n	8007086 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007080:	461a      	mov	r2, r3
 8007082:	2308      	movs	r3, #8
 8007084:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b00      	cmp	r3, #0
 800708e:	d008      	beq.n	80070a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800709c:	461a      	mov	r2, r3
 800709e:	2310      	movs	r3, #16
 80070a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80070ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b8:	461a      	mov	r2, r3
 80070ba:	2340      	movs	r3, #64	@ 0x40
 80070bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d023      	beq.n	8007110 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80070c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070ca:	6a38      	ldr	r0, [r7, #32]
 80070cc:	f006 fe86 	bl	800dddc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80070d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d2:	4613      	mov	r3, r2
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	3338      	adds	r3, #56	@ 0x38
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	3304      	adds	r3, #4
 80070e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	78db      	ldrb	r3, [r3, #3]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d108      	bne.n	80070fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2200      	movs	r2, #0
 80070f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f00a fe8b 	bl	8011e14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710a:	461a      	mov	r2, r3
 800710c:	2302      	movs	r3, #2
 800710e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800711a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fcea 	bl	8007af6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	3301      	adds	r3, #1
 8007126:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	f47f af2e 	bne.w	8006f92 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f007 fd70 	bl	800ec20 <USB_ReadInterrupts>
 8007140:	4603      	mov	r3, r0
 8007142:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007146:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800714a:	d122      	bne.n	8007192 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800715a:	f023 0301 	bic.w	r3, r3, #1
 800715e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8007166:	2b01      	cmp	r3, #1
 8007168:	d108      	bne.n	800717c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007172:	2100      	movs	r1, #0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fef5 	bl	8007f64 <HAL_PCDEx_LPM_Callback>
 800717a:	e002      	b.n	8007182 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f00a fe29 	bl	8011dd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695a      	ldr	r2, [r3, #20]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f007 fd42 	bl	800ec20 <USB_ReadInterrupts>
 800719c:	4603      	mov	r3, r0
 800719e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071a6:	d112      	bne.n	80071ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d102      	bne.n	80071be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f00a fde5 	bl	8011d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695a      	ldr	r2, [r3, #20]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80071cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f007 fd24 	bl	800ec20 <USB_ReadInterrupts>
 80071d8:	4603      	mov	r3, r0
 80071da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071e2:	d121      	bne.n	8007228 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695a      	ldr	r2, [r3, #20]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80071f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d111      	bne.n	8007222 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720c:	089b      	lsrs	r3, r3, #2
 800720e:	f003 020f 	and.w	r2, r3, #15
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007218:	2101      	movs	r1, #1
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fea2 	bl	8007f64 <HAL_PCDEx_LPM_Callback>
 8007220:	e002      	b.n	8007228 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f00a fdb0 	bl	8011d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4618      	mov	r0, r3
 800722e:	f007 fcf7 	bl	800ec20 <USB_ReadInterrupts>
 8007232:	4603      	mov	r3, r0
 8007234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800723c:	f040 80b7 	bne.w	80073ae <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800724e:	f023 0301 	bic.w	r3, r3, #1
 8007252:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2110      	movs	r1, #16
 800725a:	4618      	mov	r0, r3
 800725c:	f006 fdbe 	bl	800dddc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007260:	2300      	movs	r3, #0
 8007262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007264:	e046      	b.n	80072f4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007272:	461a      	mov	r2, r3
 8007274:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007278:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800727a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007294:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007298:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800729a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a6:	461a      	mov	r2, r3
 80072a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f0:	3301      	adds	r3, #1
 80072f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d3b3      	bcc.n	8007266 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800730c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007310:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007316:	2b00      	cmp	r3, #0
 8007318:	d016      	beq.n	8007348 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007324:	69fa      	ldr	r2, [r7, #28]
 8007326:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800732a:	f043 030b 	orr.w	r3, r3, #11
 800732e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007340:	f043 030b 	orr.w	r3, r3, #11
 8007344:	6453      	str	r3, [r2, #68]	@ 0x44
 8007346:	e015      	b.n	8007374 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800734e:	695a      	ldr	r2, [r3, #20]
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007356:	4619      	mov	r1, r3
 8007358:	f242 032b 	movw	r3, #8235	@ 0x202b
 800735c:	4313      	orrs	r3, r2
 800735e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800736e:	f043 030b 	orr.w	r3, r3, #11
 8007372:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007382:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007386:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007398:	461a      	mov	r2, r3
 800739a:	f007 fd07 	bl	800edac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695a      	ldr	r2, [r3, #20]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80073ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f007 fc34 	bl	800ec20 <USB_ReadInterrupts>
 80073b8:	4603      	mov	r3, r0
 80073ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073c2:	d124      	bne.n	800740e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f007 fccb 	bl	800ed64 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f006 fd7f 	bl	800ded6 <USB_GetDevSpeed>
 80073d8:	4603      	mov	r3, r0
 80073da:	461a      	mov	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681c      	ldr	r4, [r3, #0]
 80073e4:	f001 fd9e 	bl	8008f24 <HAL_RCC_GetHCLKFreq>
 80073e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	4620      	mov	r0, r4
 80073f4:	f006 fa84 	bl	800d900 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f00a fc9c 	bl	8011d36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	695a      	ldr	r2, [r3, #20]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800740c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f007 fc04 	bl	800ec20 <USB_ReadInterrupts>
 8007418:	4603      	mov	r3, r0
 800741a:	f003 0308 	and.w	r3, r3, #8
 800741e:	2b08      	cmp	r3, #8
 8007420:	d10a      	bne.n	8007438 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f00a fc79 	bl	8011d1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695a      	ldr	r2, [r3, #20]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f002 0208 	and.w	r2, r2, #8
 8007436:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f007 fbef 	bl	800ec20 <USB_ReadInterrupts>
 8007442:	4603      	mov	r3, r0
 8007444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007448:	2b80      	cmp	r3, #128	@ 0x80
 800744a:	d122      	bne.n	8007492 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007458:	2301      	movs	r3, #1
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
 800745c:	e014      	b.n	8007488 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007462:	4613      	mov	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d105      	bne.n	8007482 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007478:	b2db      	uxtb	r3, r3
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fb09 	bl	8007a94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	3301      	adds	r3, #1
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800748e:	429a      	cmp	r2, r3
 8007490:	d3e5      	bcc.n	800745e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f007 fbc2 	bl	800ec20 <USB_ReadInterrupts>
 800749c:	4603      	mov	r3, r0
 800749e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074a6:	d13b      	bne.n	8007520 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074a8:	2301      	movs	r3, #1
 80074aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ac:	e02b      	b.n	8007506 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074c2:	4613      	mov	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	440b      	add	r3, r1
 80074cc:	3340      	adds	r3, #64	@ 0x40
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d115      	bne.n	8007500 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80074d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da12      	bge.n	8007500 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074de:	4613      	mov	r3, r2
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	333f      	adds	r3, #63	@ 0x3f
 80074ea:	2201      	movs	r2, #1
 80074ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 faca 	bl	8007a94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	3301      	adds	r3, #1
 8007504:	627b      	str	r3, [r7, #36]	@ 0x24
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800750c:	429a      	cmp	r2, r3
 800750e:	d3ce      	bcc.n	80074ae <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800751e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f007 fb7b 	bl	800ec20 <USB_ReadInterrupts>
 800752a:	4603      	mov	r3, r0
 800752c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007534:	d155      	bne.n	80075e2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007536:	2301      	movs	r3, #1
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
 800753a:	e045      	b.n	80075c8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007550:	4613      	mov	r3, r2
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d12e      	bne.n	80075c2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007564:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007566:	2b00      	cmp	r3, #0
 8007568:	da2b      	bge.n	80075c2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8007576:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800757a:	429a      	cmp	r2, r3
 800757c:	d121      	bne.n	80075c2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007582:	4613      	mov	r3, r2
 8007584:	00db      	lsls	r3, r3, #3
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	440b      	add	r3, r1
 800758c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007590:	2201      	movs	r2, #1
 8007592:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10a      	bne.n	80075c2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075be:	6053      	str	r3, [r2, #4]
            break;
 80075c0:	e007      	b.n	80075d2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	3301      	adds	r3, #1
 80075c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d3b4      	bcc.n	800753c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695a      	ldr	r2, [r3, #20]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80075e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f007 fb1a 	bl	800ec20 <USB_ReadInterrupts>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80075f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075f6:	d10a      	bne.n	800760e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f00a fc1d 	bl	8011e38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695a      	ldr	r2, [r3, #20]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800760c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f007 fb04 	bl	800ec20 <USB_ReadInterrupts>
 8007618:	4603      	mov	r3, r0
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b04      	cmp	r3, #4
 8007620:	d115      	bne.n	800764e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f00a fc0d 	bl	8011e54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6859      	ldr	r1, [r3, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
 800764a:	e000      	b.n	800764e <HAL_PCD_IRQHandler+0x992>
      return;
 800764c:	bf00      	nop
    }
  }
}
 800764e:	3734      	adds	r7, #52	@ 0x34
 8007650:	46bd      	mov	sp, r7
 8007652:	bd90      	pop	{r4, r7, pc}

08007654 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_PCD_SetAddress+0x1a>
 800766a:	2302      	movs	r3, #2
 800766c:	e013      	b.n	8007696 <HAL_PCD_SetAddress+0x42>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	78fa      	ldrb	r2, [r7, #3]
 8007684:	4611      	mov	r1, r2
 8007686:	4618      	mov	r0, r3
 8007688:	f007 fa62 	bl	800eb50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	4608      	mov	r0, r1
 80076a8:	4611      	mov	r1, r2
 80076aa:	461a      	mov	r2, r3
 80076ac:	4603      	mov	r3, r0
 80076ae:	70fb      	strb	r3, [r7, #3]
 80076b0:	460b      	mov	r3, r1
 80076b2:	803b      	strh	r3, [r7, #0]
 80076b4:	4613      	mov	r3, r2
 80076b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80076bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	da0f      	bge.n	80076e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	f003 020f 	and.w	r2, r3, #15
 80076ca:	4613      	mov	r3, r2
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	4413      	add	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	3338      	adds	r3, #56	@ 0x38
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	4413      	add	r3, r2
 80076d8:	3304      	adds	r3, #4
 80076da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	705a      	strb	r2, [r3, #1]
 80076e2:	e00f      	b.n	8007704 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076e4:	78fb      	ldrb	r3, [r7, #3]
 80076e6:	f003 020f 	and.w	r2, r3, #15
 80076ea:	4613      	mov	r3, r2
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	4413      	add	r3, r2
 80076fa:	3304      	adds	r3, #4
 80076fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	b2da      	uxtb	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007710:	883a      	ldrh	r2, [r7, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	78ba      	ldrb	r2, [r7, #2]
 800771a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800772e:	78bb      	ldrb	r3, [r7, #2]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d102      	bne.n	800773a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007740:	2b01      	cmp	r3, #1
 8007742:	d101      	bne.n	8007748 <HAL_PCD_EP_Open+0xaa>
 8007744:	2302      	movs	r3, #2
 8007746:	e00e      	b.n	8007766 <HAL_PCD_EP_Open+0xc8>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68f9      	ldr	r1, [r7, #12]
 8007756:	4618      	mov	r0, r3
 8007758:	f006 fbe2 	bl	800df20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8007764:	7afb      	ldrb	r3, [r7, #11]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800777a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800777e:	2b00      	cmp	r3, #0
 8007780:	da0f      	bge.n	80077a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	f003 020f 	and.w	r2, r3, #15
 8007788:	4613      	mov	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	3338      	adds	r3, #56	@ 0x38
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	3304      	adds	r3, #4
 8007798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2201      	movs	r2, #1
 800779e:	705a      	strb	r2, [r3, #1]
 80077a0:	e00f      	b.n	80077c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	f003 020f 	and.w	r2, r3, #15
 80077a8:	4613      	mov	r3, r2
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	4413      	add	r3, r2
 80077b8:	3304      	adds	r3, #4
 80077ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_PCD_EP_Close+0x6e>
 80077d8:	2302      	movs	r3, #2
 80077da:	e00e      	b.n	80077fa <HAL_PCD_EP_Close+0x8c>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68f9      	ldr	r1, [r7, #12]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f006 fc20 	bl	800e030 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	603b      	str	r3, [r7, #0]
 800780e:	460b      	mov	r3, r1
 8007810:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	f003 020f 	and.w	r2, r3, #15
 8007818:	4613      	mov	r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4413      	add	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	3304      	adds	r3, #4
 800782a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2200      	movs	r2, #0
 800783c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2200      	movs	r2, #0
 8007842:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007844:	7afb      	ldrb	r3, [r7, #11]
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	b2da      	uxtb	r2, r3
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d102      	bne.n	800785e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	461a      	mov	r2, r3
 800786a:	6979      	ldr	r1, [r7, #20]
 800786c:	f006 fcbc 	bl	800e1e8 <USB_EPStartXfer>

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	f003 020f 	and.w	r2, r3, #15
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	4613      	mov	r3, r2
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800789c:	681b      	ldr	r3, [r3, #0]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b086      	sub	sp, #24
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
 80078b6:	460b      	mov	r3, r1
 80078b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078ba:	7afb      	ldrb	r3, [r7, #11]
 80078bc:	f003 020f 	and.w	r2, r3, #15
 80078c0:	4613      	mov	r3, r2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	3338      	adds	r3, #56	@ 0x38
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	3304      	adds	r3, #4
 80078d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	2200      	movs	r2, #0
 80078e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2201      	movs	r2, #1
 80078e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d102      	bne.n	8007904 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	6979      	ldr	r1, [r7, #20]
 8007912:	f006 fc69 	bl	800e1e8 <USB_EPStartXfer>

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	f003 020f 	and.w	r2, r3, #15
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d901      	bls.n	800793e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e050      	b.n	80079e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800793e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007942:	2b00      	cmp	r3, #0
 8007944:	da0f      	bge.n	8007966 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007946:	78fb      	ldrb	r3, [r7, #3]
 8007948:	f003 020f 	and.w	r2, r3, #15
 800794c:	4613      	mov	r3, r2
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	3338      	adds	r3, #56	@ 0x38
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	4413      	add	r3, r2
 800795a:	3304      	adds	r3, #4
 800795c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	705a      	strb	r2, [r3, #1]
 8007964:	e00d      	b.n	8007982 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007966:	78fa      	ldrb	r2, [r7, #3]
 8007968:	4613      	mov	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	4413      	add	r3, r2
 8007978:	3304      	adds	r3, #4
 800797a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	b2da      	uxtb	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_PCD_EP_SetStall+0x82>
 800799e:	2302      	movs	r3, #2
 80079a0:	e01e      	b.n	80079e0 <HAL_PCD_EP_SetStall+0xc0>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68f9      	ldr	r1, [r7, #12]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f006 fff9 	bl	800e9a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	f003 030f 	and.w	r3, r3, #15
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6818      	ldr	r0, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	b2d9      	uxtb	r1, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80079d0:	461a      	mov	r2, r3
 80079d2:	f007 f9eb 	bl	800edac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	f003 020f 	and.w	r2, r3, #15
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d901      	bls.n	8007a06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e042      	b.n	8007a8c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	da0f      	bge.n	8007a2e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	f003 020f 	and.w	r2, r3, #15
 8007a14:	4613      	mov	r3, r2
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	3338      	adds	r3, #56	@ 0x38
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	4413      	add	r3, r2
 8007a22:	3304      	adds	r3, #4
 8007a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	705a      	strb	r2, [r3, #1]
 8007a2c:	e00f      	b.n	8007a4e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	f003 020f 	and.w	r2, r3, #15
 8007a34:	4613      	mov	r3, r2
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	4413      	add	r3, r2
 8007a44:	3304      	adds	r3, #4
 8007a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_PCD_EP_ClrStall+0x86>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e00e      	b.n	8007a8c <HAL_PCD_EP_ClrStall+0xa4>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68f9      	ldr	r1, [r7, #12]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f007 f801 	bl	800ea84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	da0c      	bge.n	8007ac2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	f003 020f 	and.w	r2, r3, #15
 8007aae:	4613      	mov	r3, r2
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	3338      	adds	r3, #56	@ 0x38
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	4413      	add	r3, r2
 8007abc:	3304      	adds	r3, #4
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	e00c      	b.n	8007adc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	f003 020f 	and.w	r2, r3, #15
 8007ac8:	4613      	mov	r3, r2
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3304      	adds	r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68f9      	ldr	r1, [r7, #12]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f006 fe20 	bl	800e728 <USB_EPStopXfer>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007aec:	7afb      	ldrb	r3, [r7, #11]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b08a      	sub	sp, #40	@ 0x28
 8007afa:	af02      	add	r7, sp, #8
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	3338      	adds	r3, #56	@ 0x38
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	695a      	ldr	r2, [r3, #20]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d901      	bls.n	8007b2e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e06c      	b.n	8007c08 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	691a      	ldr	r2, [r3, #16]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d902      	bls.n	8007b4a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	3303      	adds	r3, #3
 8007b4e:	089b      	lsrs	r3, r3, #2
 8007b50:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b52:	e02b      	b.n	8007bac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	69fa      	ldr	r2, [r7, #28]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d902      	bls.n	8007b70 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	3303      	adds	r3, #3
 8007b74:	089b      	lsrs	r3, r3, #2
 8007b76:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68d9      	ldr	r1, [r3, #12]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	6978      	ldr	r0, [r7, #20]
 8007b90:	f006 fe74 	bl	800e87c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	441a      	add	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	695a      	ldr	r2, [r3, #20]
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	441a      	add	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d809      	bhi.n	8007bd6 <PCD_WriteEmptyTxFifo+0xe0>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	695a      	ldr	r2, [r3, #20]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d203      	bcs.n	8007bd6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1be      	bne.n	8007b54 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d811      	bhi.n	8007c06 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	f003 030f 	and.w	r3, r3, #15
 8007be8:	2201      	movs	r2, #1
 8007bea:	fa02 f303 	lsl.w	r3, r2, r3
 8007bee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	43db      	mvns	r3, r3
 8007bfc:	6939      	ldr	r1, [r7, #16]
 8007bfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c02:	4013      	ands	r3, r2
 8007c04:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3720      	adds	r7, #32
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	333c      	adds	r3, #60	@ 0x3c
 8007c28:	3304      	adds	r3, #4
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d17b      	bne.n	8007d3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d015      	beq.n	8007c7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	4a61      	ldr	r2, [pc, #388]	@ (8007dd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	f240 80b9 	bls.w	8007dcc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 80b3 	beq.w	8007dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c72:	461a      	mov	r2, r3
 8007c74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c78:	6093      	str	r3, [r2, #8]
 8007c7a:	e0a7      	b.n	8007dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d009      	beq.n	8007c9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c92:	461a      	mov	r2, r3
 8007c94:	2320      	movs	r3, #32
 8007c96:	6093      	str	r3, [r2, #8]
 8007c98:	e098      	b.n	8007dcc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f040 8093 	bne.w	8007dcc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	4a4b      	ldr	r2, [pc, #300]	@ (8007dd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d90f      	bls.n	8007cce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cca:	6093      	str	r3, [r2, #8]
 8007ccc:	e07e      	b.n	8007dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	4413      	add	r3, r2
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	0159      	lsls	r1, r3, #5
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	440b      	add	r3, r1
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cfa:	1ad2      	subs	r2, r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d114      	bne.n	8007d30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007d18:	461a      	mov	r2, r3
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	f007 f846 	bl	800edac <USB_EP0_OutStart>
 8007d20:	e006      	b.n	8007d30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	441a      	add	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f009 ffba 	bl	8011cb0 <HAL_PCD_DataOutStageCallback>
 8007d3c:	e046      	b.n	8007dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	4a26      	ldr	r2, [pc, #152]	@ (8007ddc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d124      	bne.n	8007d90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d62:	6093      	str	r3, [r2, #8]
 8007d64:	e032      	b.n	8007dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d008      	beq.n	8007d82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	2320      	movs	r3, #32
 8007d80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f009 ff91 	bl	8011cb0 <HAL_PCD_DataOutStageCallback>
 8007d8e:	e01d      	b.n	8007dcc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d114      	bne.n	8007dc0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	440b      	add	r3, r1
 8007da4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d108      	bne.n	8007dc0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007db8:	461a      	mov	r2, r3
 8007dba:	2100      	movs	r1, #0
 8007dbc:	f006 fff6 	bl	800edac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f009 ff72 	bl	8011cb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3720      	adds	r7, #32
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	4f54300a 	.word	0x4f54300a
 8007ddc:	4f54310a 	.word	0x4f54310a

08007de0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	333c      	adds	r3, #60	@ 0x3c
 8007df8:	3304      	adds	r3, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4a15      	ldr	r2, [pc, #84]	@ (8007e68 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d90e      	bls.n	8007e34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f009 ff29 	bl	8011c8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e68 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d90c      	bls.n	8007e5c <PCD_EP_OutSetupPacket_int+0x7c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d108      	bne.n	8007e5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007e54:	461a      	mov	r2, r3
 8007e56:	2101      	movs	r1, #1
 8007e58:	f006 ffa8 	bl	800edac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	4f54300a 	.word	0x4f54300a

08007e6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d107      	bne.n	8007e9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007e8a:	883b      	ldrh	r3, [r7, #0]
 8007e8c:	0419      	lsls	r1, r3, #16
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e98:	e028      	b.n	8007eec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea0:	0c1b      	lsrs	r3, r3, #16
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73fb      	strb	r3, [r7, #15]
 8007eac:	e00d      	b.n	8007eca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	3340      	adds	r3, #64	@ 0x40
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	0c1b      	lsrs	r3, r3, #16
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	73fb      	strb	r3, [r7, #15]
 8007eca:	7bfa      	ldrb	r2, [r7, #15]
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d3ec      	bcc.n	8007eae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007ed4:	883b      	ldrh	r3, [r7, #0]
 8007ed6:	0418      	lsls	r0, r3, #16
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6819      	ldr	r1, [r3, #0]
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	4302      	orrs	r2, r0
 8007ee4:	3340      	adds	r3, #64	@ 0x40
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	887a      	ldrh	r2, [r7, #2]
 8007f0c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f4a:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <HAL_PCDEx_ActivateLPM+0x44>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	10000003 	.word	0x10000003

08007f64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007f84:	4b19      	ldr	r3, [pc, #100]	@ (8007fec <HAL_PWREx_ConfigSupply+0x70>)
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d00a      	beq.n	8007fa6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f90:	4b16      	ldr	r3, [pc, #88]	@ (8007fec <HAL_PWREx_ConfigSupply+0x70>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d001      	beq.n	8007fa2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e01f      	b.n	8007fe2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e01d      	b.n	8007fe2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007fa6:	4b11      	ldr	r3, [pc, #68]	@ (8007fec <HAL_PWREx_ConfigSupply+0x70>)
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f023 0207 	bic.w	r2, r3, #7
 8007fae:	490f      	ldr	r1, [pc, #60]	@ (8007fec <HAL_PWREx_ConfigSupply+0x70>)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007fb6:	f7f9 fde7 	bl	8001b88 <HAL_GetTick>
 8007fba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fbc:	e009      	b.n	8007fd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007fbe:	f7f9 fde3 	bl	8001b88 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fcc:	d901      	bls.n	8007fd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e007      	b.n	8007fe2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fd2:	4b06      	ldr	r3, [pc, #24]	@ (8007fec <HAL_PWREx_ConfigSupply+0x70>)
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fde:	d1ee      	bne.n	8007fbe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	58024800 	.word	0x58024800

08007ff0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007ff4:	4b05      	ldr	r3, [pc, #20]	@ (800800c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4a04      	ldr	r2, [pc, #16]	@ (800800c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ffe:	60d3      	str	r3, [r2, #12]
}
 8008000:	bf00      	nop
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	58024800 	.word	0x58024800

08008010 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08c      	sub	sp, #48	@ 0x30
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f000 bc48 	b.w	80088b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 8088 	beq.w	8008142 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008032:	4b99      	ldr	r3, [pc, #612]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800803a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800803c:	4b96      	ldr	r3, [pc, #600]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 800803e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008040:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008044:	2b10      	cmp	r3, #16
 8008046:	d007      	beq.n	8008058 <HAL_RCC_OscConfig+0x48>
 8008048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804a:	2b18      	cmp	r3, #24
 800804c:	d111      	bne.n	8008072 <HAL_RCC_OscConfig+0x62>
 800804e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	2b02      	cmp	r3, #2
 8008056:	d10c      	bne.n	8008072 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008058:	4b8f      	ldr	r3, [pc, #572]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d06d      	beq.n	8008140 <HAL_RCC_OscConfig+0x130>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d169      	bne.n	8008140 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	f000 bc21 	b.w	80088b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800807a:	d106      	bne.n	800808a <HAL_RCC_OscConfig+0x7a>
 800807c:	4b86      	ldr	r3, [pc, #536]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a85      	ldr	r2, [pc, #532]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	e02e      	b.n	80080e8 <HAL_RCC_OscConfig+0xd8>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10c      	bne.n	80080ac <HAL_RCC_OscConfig+0x9c>
 8008092:	4b81      	ldr	r3, [pc, #516]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a80      	ldr	r2, [pc, #512]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	4b7e      	ldr	r3, [pc, #504]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a7d      	ldr	r2, [pc, #500]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80080a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e01d      	b.n	80080e8 <HAL_RCC_OscConfig+0xd8>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080b4:	d10c      	bne.n	80080d0 <HAL_RCC_OscConfig+0xc0>
 80080b6:	4b78      	ldr	r3, [pc, #480]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a77      	ldr	r2, [pc, #476]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80080bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080c0:	6013      	str	r3, [r2, #0]
 80080c2:	4b75      	ldr	r3, [pc, #468]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a74      	ldr	r2, [pc, #464]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80080c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	e00b      	b.n	80080e8 <HAL_RCC_OscConfig+0xd8>
 80080d0:	4b71      	ldr	r3, [pc, #452]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a70      	ldr	r2, [pc, #448]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80080d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	4b6e      	ldr	r3, [pc, #440]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a6d      	ldr	r2, [pc, #436]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80080e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d013      	beq.n	8008118 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f0:	f7f9 fd4a 	bl	8001b88 <HAL_GetTick>
 80080f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080f8:	f7f9 fd46 	bl	8001b88 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b64      	cmp	r3, #100	@ 0x64
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e3d4      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800810a:	4b63      	ldr	r3, [pc, #396]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0f0      	beq.n	80080f8 <HAL_RCC_OscConfig+0xe8>
 8008116:	e014      	b.n	8008142 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008118:	f7f9 fd36 	bl	8001b88 <HAL_GetTick>
 800811c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008120:	f7f9 fd32 	bl	8001b88 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b64      	cmp	r3, #100	@ 0x64
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e3c0      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008132:	4b59      	ldr	r3, [pc, #356]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f0      	bne.n	8008120 <HAL_RCC_OscConfig+0x110>
 800813e:	e000      	b.n	8008142 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 80ca 	beq.w	80082e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008150:	4b51      	ldr	r3, [pc, #324]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008158:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800815a:	4b4f      	ldr	r3, [pc, #316]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 800815c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_RCC_OscConfig+0x166>
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	2b18      	cmp	r3, #24
 800816a:	d156      	bne.n	800821a <HAL_RCC_OscConfig+0x20a>
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d151      	bne.n	800821a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008176:	4b48      	ldr	r3, [pc, #288]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <HAL_RCC_OscConfig+0x17e>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e392      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800818e:	4b42      	ldr	r3, [pc, #264]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f023 0219 	bic.w	r2, r3, #25
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	493f      	ldr	r1, [pc, #252]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 800819c:	4313      	orrs	r3, r2
 800819e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a0:	f7f9 fcf2 	bl	8001b88 <HAL_GetTick>
 80081a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081a8:	f7f9 fcee 	bl	8001b88 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e37c      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081ba:	4b37      	ldr	r3, [pc, #220]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0f0      	beq.n	80081a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081c6:	f7f9 fd0f 	bl	8001be8 <HAL_GetREVID>
 80081ca:	4603      	mov	r3, r0
 80081cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d817      	bhi.n	8008204 <HAL_RCC_OscConfig+0x1f4>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	2b40      	cmp	r3, #64	@ 0x40
 80081da:	d108      	bne.n	80081ee <HAL_RCC_OscConfig+0x1de>
 80081dc:	4b2e      	ldr	r3, [pc, #184]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80081e4:	4a2c      	ldr	r2, [pc, #176]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80081e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081ec:	e07a      	b.n	80082e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ee:	4b2a      	ldr	r3, [pc, #168]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	031b      	lsls	r3, r3, #12
 80081fc:	4926      	ldr	r1, [pc, #152]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008202:	e06f      	b.n	80082e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008204:	4b24      	ldr	r3, [pc, #144]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	061b      	lsls	r3, r3, #24
 8008212:	4921      	ldr	r1, [pc, #132]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008214:	4313      	orrs	r3, r2
 8008216:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008218:	e064      	b.n	80082e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d047      	beq.n	80082b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008222:	4b1d      	ldr	r3, [pc, #116]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f023 0219 	bic.w	r2, r3, #25
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	491a      	ldr	r1, [pc, #104]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008230:	4313      	orrs	r3, r2
 8008232:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008234:	f7f9 fca8 	bl	8001b88 <HAL_GetTick>
 8008238:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800823a:	e008      	b.n	800824e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800823c:	f7f9 fca4 	bl	8001b88 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e332      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800824e:	4b12      	ldr	r3, [pc, #72]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0304 	and.w	r3, r3, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0f0      	beq.n	800823c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800825a:	f7f9 fcc5 	bl	8001be8 <HAL_GetREVID>
 800825e:	4603      	mov	r3, r0
 8008260:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008264:	4293      	cmp	r3, r2
 8008266:	d819      	bhi.n	800829c <HAL_RCC_OscConfig+0x28c>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	2b40      	cmp	r3, #64	@ 0x40
 800826e:	d108      	bne.n	8008282 <HAL_RCC_OscConfig+0x272>
 8008270:	4b09      	ldr	r3, [pc, #36]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008278:	4a07      	ldr	r2, [pc, #28]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 800827a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800827e:	6053      	str	r3, [r2, #4]
 8008280:	e030      	b.n	80082e4 <HAL_RCC_OscConfig+0x2d4>
 8008282:	4b05      	ldr	r3, [pc, #20]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	031b      	lsls	r3, r3, #12
 8008290:	4901      	ldr	r1, [pc, #4]	@ (8008298 <HAL_RCC_OscConfig+0x288>)
 8008292:	4313      	orrs	r3, r2
 8008294:	604b      	str	r3, [r1, #4]
 8008296:	e025      	b.n	80082e4 <HAL_RCC_OscConfig+0x2d4>
 8008298:	58024400 	.word	0x58024400
 800829c:	4b9a      	ldr	r3, [pc, #616]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	061b      	lsls	r3, r3, #24
 80082aa:	4997      	ldr	r1, [pc, #604]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	604b      	str	r3, [r1, #4]
 80082b0:	e018      	b.n	80082e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082b2:	4b95      	ldr	r3, [pc, #596]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a94      	ldr	r2, [pc, #592]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80082b8:	f023 0301 	bic.w	r3, r3, #1
 80082bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082be:	f7f9 fc63 	bl	8001b88 <HAL_GetTick>
 80082c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082c4:	e008      	b.n	80082d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082c6:	f7f9 fc5f 	bl	8001b88 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d901      	bls.n	80082d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e2ed      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082d8:	4b8b      	ldr	r3, [pc, #556]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f0      	bne.n	80082c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 80a9 	beq.w	8008444 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082f2:	4b85      	ldr	r3, [pc, #532]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082fc:	4b82      	ldr	r3, [pc, #520]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80082fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008300:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d007      	beq.n	8008318 <HAL_RCC_OscConfig+0x308>
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2b18      	cmp	r3, #24
 800830c:	d13a      	bne.n	8008384 <HAL_RCC_OscConfig+0x374>
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f003 0303 	and.w	r3, r3, #3
 8008314:	2b01      	cmp	r3, #1
 8008316:	d135      	bne.n	8008384 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008318:	4b7b      	ldr	r3, [pc, #492]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_RCC_OscConfig+0x320>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	2b80      	cmp	r3, #128	@ 0x80
 800832a:	d001      	beq.n	8008330 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e2c1      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008330:	f7f9 fc5a 	bl	8001be8 <HAL_GetREVID>
 8008334:	4603      	mov	r3, r0
 8008336:	f241 0203 	movw	r2, #4099	@ 0x1003
 800833a:	4293      	cmp	r3, r2
 800833c:	d817      	bhi.n	800836e <HAL_RCC_OscConfig+0x35e>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	2b20      	cmp	r3, #32
 8008344:	d108      	bne.n	8008358 <HAL_RCC_OscConfig+0x348>
 8008346:	4b70      	ldr	r3, [pc, #448]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800834e:	4a6e      	ldr	r2, [pc, #440]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 8008350:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008354:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008356:	e075      	b.n	8008444 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008358:	4b6b      	ldr	r3, [pc, #428]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a1b      	ldr	r3, [r3, #32]
 8008364:	069b      	lsls	r3, r3, #26
 8008366:	4968      	ldr	r1, [pc, #416]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 8008368:	4313      	orrs	r3, r2
 800836a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800836c:	e06a      	b.n	8008444 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800836e:	4b66      	ldr	r3, [pc, #408]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	061b      	lsls	r3, r3, #24
 800837c:	4962      	ldr	r1, [pc, #392]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 800837e:	4313      	orrs	r3, r2
 8008380:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008382:	e05f      	b.n	8008444 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d042      	beq.n	8008412 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800838c:	4b5e      	ldr	r3, [pc, #376]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a5d      	ldr	r2, [pc, #372]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 8008392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008398:	f7f9 fbf6 	bl	8001b88 <HAL_GetTick>
 800839c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80083a0:	f7f9 fbf2 	bl	8001b88 <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e280      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083b2:	4b55      	ldr	r3, [pc, #340]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0f0      	beq.n	80083a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083be:	f7f9 fc13 	bl	8001be8 <HAL_GetREVID>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d817      	bhi.n	80083fc <HAL_RCC_OscConfig+0x3ec>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	2b20      	cmp	r3, #32
 80083d2:	d108      	bne.n	80083e6 <HAL_RCC_OscConfig+0x3d6>
 80083d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80083dc:	4a4a      	ldr	r2, [pc, #296]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80083de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083e2:	6053      	str	r3, [r2, #4]
 80083e4:	e02e      	b.n	8008444 <HAL_RCC_OscConfig+0x434>
 80083e6:	4b48      	ldr	r3, [pc, #288]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	069b      	lsls	r3, r3, #26
 80083f4:	4944      	ldr	r1, [pc, #272]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	604b      	str	r3, [r1, #4]
 80083fa:	e023      	b.n	8008444 <HAL_RCC_OscConfig+0x434>
 80083fc:	4b42      	ldr	r3, [pc, #264]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	061b      	lsls	r3, r3, #24
 800840a:	493f      	ldr	r1, [pc, #252]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 800840c:	4313      	orrs	r3, r2
 800840e:	60cb      	str	r3, [r1, #12]
 8008410:	e018      	b.n	8008444 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008412:	4b3d      	ldr	r3, [pc, #244]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a3c      	ldr	r2, [pc, #240]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 8008418:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800841c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841e:	f7f9 fbb3 	bl	8001b88 <HAL_GetTick>
 8008422:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008424:	e008      	b.n	8008438 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008426:	f7f9 fbaf 	bl	8001b88 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d901      	bls.n	8008438 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e23d      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008438:	4b33      	ldr	r3, [pc, #204]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1f0      	bne.n	8008426 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b00      	cmp	r3, #0
 800844e:	d036      	beq.n	80084be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d019      	beq.n	800848c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008458:	4b2b      	ldr	r3, [pc, #172]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 800845a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800845c:	4a2a      	ldr	r2, [pc, #168]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 800845e:	f043 0301 	orr.w	r3, r3, #1
 8008462:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008464:	f7f9 fb90 	bl	8001b88 <HAL_GetTick>
 8008468:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800846a:	e008      	b.n	800847e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800846c:	f7f9 fb8c 	bl	8001b88 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b02      	cmp	r3, #2
 8008478:	d901      	bls.n	800847e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e21a      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800847e:	4b22      	ldr	r3, [pc, #136]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 8008480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0f0      	beq.n	800846c <HAL_RCC_OscConfig+0x45c>
 800848a:	e018      	b.n	80084be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800848c:	4b1e      	ldr	r3, [pc, #120]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 800848e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008490:	4a1d      	ldr	r2, [pc, #116]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 8008492:	f023 0301 	bic.w	r3, r3, #1
 8008496:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008498:	f7f9 fb76 	bl	8001b88 <HAL_GetTick>
 800849c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084a0:	f7f9 fb72 	bl	8001b88 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e200      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084b2:	4b15      	ldr	r3, [pc, #84]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80084b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f0      	bne.n	80084a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d039      	beq.n	800853e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01c      	beq.n	800850c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80084d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80084dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084de:	f7f9 fb53 	bl	8001b88 <HAL_GetTick>
 80084e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084e4:	e008      	b.n	80084f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084e6:	f7f9 fb4f 	bl	8001b88 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e1dd      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084f8:	4b03      	ldr	r3, [pc, #12]	@ (8008508 <HAL_RCC_OscConfig+0x4f8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0f0      	beq.n	80084e6 <HAL_RCC_OscConfig+0x4d6>
 8008504:	e01b      	b.n	800853e <HAL_RCC_OscConfig+0x52e>
 8008506:	bf00      	nop
 8008508:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800850c:	4b9b      	ldr	r3, [pc, #620]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a9a      	ldr	r2, [pc, #616]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008516:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008518:	f7f9 fb36 	bl	8001b88 <HAL_GetTick>
 800851c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800851e:	e008      	b.n	8008532 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008520:	f7f9 fb32 	bl	8001b88 <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d901      	bls.n	8008532 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e1c0      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008532:	4b92      	ldr	r3, [pc, #584]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1f0      	bne.n	8008520 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 8081 	beq.w	800864e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800854c:	4b8c      	ldr	r3, [pc, #560]	@ (8008780 <HAL_RCC_OscConfig+0x770>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a8b      	ldr	r2, [pc, #556]	@ (8008780 <HAL_RCC_OscConfig+0x770>)
 8008552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008558:	f7f9 fb16 	bl	8001b88 <HAL_GetTick>
 800855c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008560:	f7f9 fb12 	bl	8001b88 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b64      	cmp	r3, #100	@ 0x64
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e1a0      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008572:	4b83      	ldr	r3, [pc, #524]	@ (8008780 <HAL_RCC_OscConfig+0x770>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f0      	beq.n	8008560 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d106      	bne.n	8008594 <HAL_RCC_OscConfig+0x584>
 8008586:	4b7d      	ldr	r3, [pc, #500]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800858a:	4a7c      	ldr	r2, [pc, #496]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 800858c:	f043 0301 	orr.w	r3, r3, #1
 8008590:	6713      	str	r3, [r2, #112]	@ 0x70
 8008592:	e02d      	b.n	80085f0 <HAL_RCC_OscConfig+0x5e0>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10c      	bne.n	80085b6 <HAL_RCC_OscConfig+0x5a6>
 800859c:	4b77      	ldr	r3, [pc, #476]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 800859e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085a0:	4a76      	ldr	r2, [pc, #472]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085a2:	f023 0301 	bic.w	r3, r3, #1
 80085a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80085a8:	4b74      	ldr	r3, [pc, #464]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ac:	4a73      	ldr	r2, [pc, #460]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085ae:	f023 0304 	bic.w	r3, r3, #4
 80085b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085b4:	e01c      	b.n	80085f0 <HAL_RCC_OscConfig+0x5e0>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2b05      	cmp	r3, #5
 80085bc:	d10c      	bne.n	80085d8 <HAL_RCC_OscConfig+0x5c8>
 80085be:	4b6f      	ldr	r3, [pc, #444]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085c2:	4a6e      	ldr	r2, [pc, #440]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085c4:	f043 0304 	orr.w	r3, r3, #4
 80085c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80085ca:	4b6c      	ldr	r3, [pc, #432]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ce:	4a6b      	ldr	r2, [pc, #428]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085d0:	f043 0301 	orr.w	r3, r3, #1
 80085d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80085d6:	e00b      	b.n	80085f0 <HAL_RCC_OscConfig+0x5e0>
 80085d8:	4b68      	ldr	r3, [pc, #416]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085dc:	4a67      	ldr	r2, [pc, #412]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085de:	f023 0301 	bic.w	r3, r3, #1
 80085e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085e4:	4b65      	ldr	r3, [pc, #404]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085e8:	4a64      	ldr	r2, [pc, #400]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80085ea:	f023 0304 	bic.w	r3, r3, #4
 80085ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d015      	beq.n	8008624 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f8:	f7f9 fac6 	bl	8001b88 <HAL_GetTick>
 80085fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085fe:	e00a      	b.n	8008616 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008600:	f7f9 fac2 	bl	8001b88 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800860e:	4293      	cmp	r3, r2
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e14e      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008616:	4b59      	ldr	r3, [pc, #356]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0ee      	beq.n	8008600 <HAL_RCC_OscConfig+0x5f0>
 8008622:	e014      	b.n	800864e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008624:	f7f9 fab0 	bl	8001b88 <HAL_GetTick>
 8008628:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800862a:	e00a      	b.n	8008642 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862c:	f7f9 faac 	bl	8001b88 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e138      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008642:	4b4e      	ldr	r3, [pc, #312]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1ee      	bne.n	800862c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 812d 	beq.w	80088b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008658:	4b48      	ldr	r3, [pc, #288]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008660:	2b18      	cmp	r3, #24
 8008662:	f000 80bd 	beq.w	80087e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866a:	2b02      	cmp	r3, #2
 800866c:	f040 809e 	bne.w	80087ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008670:	4b42      	ldr	r3, [pc, #264]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a41      	ldr	r2, [pc, #260]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800867a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800867c:	f7f9 fa84 	bl	8001b88 <HAL_GetTick>
 8008680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008684:	f7f9 fa80 	bl	8001b88 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e10e      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008696:	4b39      	ldr	r3, [pc, #228]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f0      	bne.n	8008684 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086a2:	4b36      	ldr	r3, [pc, #216]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80086a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086a6:	4b37      	ldr	r3, [pc, #220]	@ (8008784 <HAL_RCC_OscConfig+0x774>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80086b2:	0112      	lsls	r2, r2, #4
 80086b4:	430a      	orrs	r2, r1
 80086b6:	4931      	ldr	r1, [pc, #196]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c0:	3b01      	subs	r3, #1
 80086c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ca:	3b01      	subs	r3, #1
 80086cc:	025b      	lsls	r3, r3, #9
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	431a      	orrs	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d6:	3b01      	subs	r3, #1
 80086d8:	041b      	lsls	r3, r3, #16
 80086da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e4:	3b01      	subs	r3, #1
 80086e6:	061b      	lsls	r3, r3, #24
 80086e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80086ec:	4923      	ldr	r1, [pc, #140]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80086f2:	4b22      	ldr	r3, [pc, #136]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80086f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f6:	4a21      	ldr	r2, [pc, #132]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 80086f8:	f023 0301 	bic.w	r3, r3, #1
 80086fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086fe:	4b1f      	ldr	r3, [pc, #124]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008702:	4b21      	ldr	r3, [pc, #132]	@ (8008788 <HAL_RCC_OscConfig+0x778>)
 8008704:	4013      	ands	r3, r2
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800870a:	00d2      	lsls	r2, r2, #3
 800870c:	491b      	ldr	r1, [pc, #108]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 800870e:	4313      	orrs	r3, r2
 8008710:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008712:	4b1a      	ldr	r3, [pc, #104]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008716:	f023 020c 	bic.w	r2, r3, #12
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871e:	4917      	ldr	r1, [pc, #92]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008720:	4313      	orrs	r3, r2
 8008722:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008724:	4b15      	ldr	r3, [pc, #84]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008728:	f023 0202 	bic.w	r2, r3, #2
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008730:	4912      	ldr	r1, [pc, #72]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008732:	4313      	orrs	r3, r2
 8008734:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008736:	4b11      	ldr	r3, [pc, #68]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800873a:	4a10      	ldr	r2, [pc, #64]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 800873c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008740:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008742:	4b0e      	ldr	r3, [pc, #56]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008746:	4a0d      	ldr	r2, [pc, #52]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800874c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800874e:	4b0b      	ldr	r3, [pc, #44]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008752:	4a0a      	ldr	r2, [pc, #40]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008758:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800875a:	4b08      	ldr	r3, [pc, #32]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 800875c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875e:	4a07      	ldr	r2, [pc, #28]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008766:	4b05      	ldr	r3, [pc, #20]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a04      	ldr	r2, [pc, #16]	@ (800877c <HAL_RCC_OscConfig+0x76c>)
 800876c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008772:	f7f9 fa09 	bl	8001b88 <HAL_GetTick>
 8008776:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008778:	e011      	b.n	800879e <HAL_RCC_OscConfig+0x78e>
 800877a:	bf00      	nop
 800877c:	58024400 	.word	0x58024400
 8008780:	58024800 	.word	0x58024800
 8008784:	fffffc0c 	.word	0xfffffc0c
 8008788:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800878c:	f7f9 f9fc 	bl	8001b88 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e08a      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800879e:	4b47      	ldr	r3, [pc, #284]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0f0      	beq.n	800878c <HAL_RCC_OscConfig+0x77c>
 80087aa:	e082      	b.n	80088b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ac:	4b43      	ldr	r3, [pc, #268]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a42      	ldr	r2, [pc, #264]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 80087b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b8:	f7f9 f9e6 	bl	8001b88 <HAL_GetTick>
 80087bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087be:	e008      	b.n	80087d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087c0:	f7f9 f9e2 	bl	8001b88 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e070      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087d2:	4b3a      	ldr	r3, [pc, #232]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1f0      	bne.n	80087c0 <HAL_RCC_OscConfig+0x7b0>
 80087de:	e068      	b.n	80088b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80087e0:	4b36      	ldr	r3, [pc, #216]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 80087e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80087e6:	4b35      	ldr	r3, [pc, #212]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d031      	beq.n	8008858 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f003 0203 	and.w	r2, r3, #3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087fe:	429a      	cmp	r2, r3
 8008800:	d12a      	bne.n	8008858 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	091b      	lsrs	r3, r3, #4
 8008806:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800880e:	429a      	cmp	r2, r3
 8008810:	d122      	bne.n	8008858 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800881e:	429a      	cmp	r2, r3
 8008820:	d11a      	bne.n	8008858 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	0a5b      	lsrs	r3, r3, #9
 8008826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800882e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008830:	429a      	cmp	r2, r3
 8008832:	d111      	bne.n	8008858 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	0c1b      	lsrs	r3, r3, #16
 8008838:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008840:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008842:	429a      	cmp	r2, r3
 8008844:	d108      	bne.n	8008858 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	0e1b      	lsrs	r3, r3, #24
 800884a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008852:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008854:	429a      	cmp	r2, r3
 8008856:	d001      	beq.n	800885c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e02b      	b.n	80088b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800885c:	4b17      	ldr	r3, [pc, #92]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 800885e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008860:	08db      	lsrs	r3, r3, #3
 8008862:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008866:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	429a      	cmp	r2, r3
 8008870:	d01f      	beq.n	80088b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008872:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 8008874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008876:	4a11      	ldr	r2, [pc, #68]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 8008878:	f023 0301 	bic.w	r3, r3, #1
 800887c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800887e:	f7f9 f983 	bl	8001b88 <HAL_GetTick>
 8008882:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008884:	bf00      	nop
 8008886:	f7f9 f97f 	bl	8001b88 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	4293      	cmp	r3, r2
 8008890:	d0f9      	beq.n	8008886 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008892:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 8008894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008896:	4b0a      	ldr	r3, [pc, #40]	@ (80088c0 <HAL_RCC_OscConfig+0x8b0>)
 8008898:	4013      	ands	r3, r2
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800889e:	00d2      	lsls	r2, r2, #3
 80088a0:	4906      	ldr	r1, [pc, #24]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80088a6:	4b05      	ldr	r3, [pc, #20]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 80088a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088aa:	4a04      	ldr	r2, [pc, #16]	@ (80088bc <HAL_RCC_OscConfig+0x8ac>)
 80088ac:	f043 0301 	orr.w	r3, r3, #1
 80088b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3730      	adds	r7, #48	@ 0x30
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	58024400 	.word	0x58024400
 80088c0:	ffff0007 	.word	0xffff0007

080088c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e19c      	b.n	8008c12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088d8:	4b8a      	ldr	r3, [pc, #552]	@ (8008b04 <HAL_RCC_ClockConfig+0x240>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d910      	bls.n	8008908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088e6:	4b87      	ldr	r3, [pc, #540]	@ (8008b04 <HAL_RCC_ClockConfig+0x240>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f023 020f 	bic.w	r2, r3, #15
 80088ee:	4985      	ldr	r1, [pc, #532]	@ (8008b04 <HAL_RCC_ClockConfig+0x240>)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088f6:	4b83      	ldr	r3, [pc, #524]	@ (8008b04 <HAL_RCC_ClockConfig+0x240>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d001      	beq.n	8008908 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e184      	b.n	8008c12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d010      	beq.n	8008936 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691a      	ldr	r2, [r3, #16]
 8008918:	4b7b      	ldr	r3, [pc, #492]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008920:	429a      	cmp	r2, r3
 8008922:	d908      	bls.n	8008936 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008924:	4b78      	ldr	r3, [pc, #480]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	4975      	ldr	r1, [pc, #468]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008932:	4313      	orrs	r3, r2
 8008934:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0308 	and.w	r3, r3, #8
 800893e:	2b00      	cmp	r3, #0
 8008940:	d010      	beq.n	8008964 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	695a      	ldr	r2, [r3, #20]
 8008946:	4b70      	ldr	r3, [pc, #448]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800894e:	429a      	cmp	r2, r3
 8008950:	d908      	bls.n	8008964 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008952:	4b6d      	ldr	r3, [pc, #436]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	496a      	ldr	r1, [pc, #424]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008960:	4313      	orrs	r3, r2
 8008962:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b00      	cmp	r3, #0
 800896e:	d010      	beq.n	8008992 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699a      	ldr	r2, [r3, #24]
 8008974:	4b64      	ldr	r3, [pc, #400]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008976:	69db      	ldr	r3, [r3, #28]
 8008978:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800897c:	429a      	cmp	r2, r3
 800897e:	d908      	bls.n	8008992 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008980:	4b61      	ldr	r3, [pc, #388]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008982:	69db      	ldr	r3, [r3, #28]
 8008984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	495e      	ldr	r1, [pc, #376]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 800898e:	4313      	orrs	r3, r2
 8008990:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b00      	cmp	r3, #0
 800899c:	d010      	beq.n	80089c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	69da      	ldr	r2, [r3, #28]
 80089a2:	4b59      	ldr	r3, [pc, #356]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d908      	bls.n	80089c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80089ae:	4b56      	ldr	r3, [pc, #344]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	4953      	ldr	r1, [pc, #332]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d010      	beq.n	80089ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68da      	ldr	r2, [r3, #12]
 80089d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	f003 030f 	and.w	r3, r3, #15
 80089d8:	429a      	cmp	r2, r3
 80089da:	d908      	bls.n	80089ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089dc:	4b4a      	ldr	r3, [pc, #296]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	f023 020f 	bic.w	r2, r3, #15
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	4947      	ldr	r1, [pc, #284]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d055      	beq.n	8008aa6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089fa:	4b43      	ldr	r3, [pc, #268]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	4940      	ldr	r1, [pc, #256]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d107      	bne.n	8008a24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a14:	4b3c      	ldr	r3, [pc, #240]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d121      	bne.n	8008a64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e0f6      	b.n	8008c12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d107      	bne.n	8008a3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a2c:	4b36      	ldr	r3, [pc, #216]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d115      	bne.n	8008a64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e0ea      	b.n	8008c12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d107      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a44:	4b30      	ldr	r3, [pc, #192]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d109      	bne.n	8008a64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e0de      	b.n	8008c12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a54:	4b2c      	ldr	r3, [pc, #176]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e0d6      	b.n	8008c12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a64:	4b28      	ldr	r3, [pc, #160]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	f023 0207 	bic.w	r2, r3, #7
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	4925      	ldr	r1, [pc, #148]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a76:	f7f9 f887 	bl	8001b88 <HAL_GetTick>
 8008a7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a7c:	e00a      	b.n	8008a94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a7e:	f7f9 f883 	bl	8001b88 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d901      	bls.n	8008a94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e0be      	b.n	8008c12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a94:	4b1c      	ldr	r3, [pc, #112]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d1eb      	bne.n	8008a7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d010      	beq.n	8008ad4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	4b14      	ldr	r3, [pc, #80]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	f003 030f 	and.w	r3, r3, #15
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d208      	bcs.n	8008ad4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ac2:	4b11      	ldr	r3, [pc, #68]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	f023 020f 	bic.w	r2, r3, #15
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	490e      	ldr	r1, [pc, #56]	@ (8008b08 <HAL_RCC_ClockConfig+0x244>)
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <HAL_RCC_ClockConfig+0x240>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 030f 	and.w	r3, r3, #15
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d214      	bcs.n	8008b0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ae2:	4b08      	ldr	r3, [pc, #32]	@ (8008b04 <HAL_RCC_ClockConfig+0x240>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f023 020f 	bic.w	r2, r3, #15
 8008aea:	4906      	ldr	r1, [pc, #24]	@ (8008b04 <HAL_RCC_ClockConfig+0x240>)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008af2:	4b04      	ldr	r3, [pc, #16]	@ (8008b04 <HAL_RCC_ClockConfig+0x240>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 030f 	and.w	r3, r3, #15
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d005      	beq.n	8008b0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e086      	b.n	8008c12 <HAL_RCC_ClockConfig+0x34e>
 8008b04:	52002000 	.word	0x52002000
 8008b08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d010      	beq.n	8008b3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	4b3f      	ldr	r3, [pc, #252]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d208      	bcs.n	8008b3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b28:	4b3c      	ldr	r3, [pc, #240]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	4939      	ldr	r1, [pc, #228]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0308 	and.w	r3, r3, #8
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d010      	beq.n	8008b68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	695a      	ldr	r2, [r3, #20]
 8008b4a:	4b34      	ldr	r3, [pc, #208]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d208      	bcs.n	8008b68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b56:	4b31      	ldr	r3, [pc, #196]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	492e      	ldr	r1, [pc, #184]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d010      	beq.n	8008b96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	699a      	ldr	r2, [r3, #24]
 8008b78:	4b28      	ldr	r3, [pc, #160]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d208      	bcs.n	8008b96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b84:	4b25      	ldr	r3, [pc, #148]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	4922      	ldr	r1, [pc, #136]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d010      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69da      	ldr	r2, [r3, #28]
 8008ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d208      	bcs.n	8008bc4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	4917      	ldr	r1, [pc, #92]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008bc4:	f000 f834 	bl	8008c30 <HAL_RCC_GetSysClockFreq>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	4b14      	ldr	r3, [pc, #80]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	0a1b      	lsrs	r3, r3, #8
 8008bd0:	f003 030f 	and.w	r3, r3, #15
 8008bd4:	4912      	ldr	r1, [pc, #72]	@ (8008c20 <HAL_RCC_ClockConfig+0x35c>)
 8008bd6:	5ccb      	ldrb	r3, [r1, r3]
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008be0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008be2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c1c <HAL_RCC_ClockConfig+0x358>)
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	4a0d      	ldr	r2, [pc, #52]	@ (8008c20 <HAL_RCC_ClockConfig+0x35c>)
 8008bec:	5cd3      	ldrb	r3, [r2, r3]
 8008bee:	f003 031f 	and.w	r3, r3, #31
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8008c24 <HAL_RCC_ClockConfig+0x360>)
 8008bfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8008c28 <HAL_RCC_ClockConfig+0x364>)
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008c02:	4b0a      	ldr	r3, [pc, #40]	@ (8008c2c <HAL_RCC_ClockConfig+0x368>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f8 fba8 	bl	800135c <HAL_InitTick>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	080151b0 	.word	0x080151b0
 8008c24:	24000008 	.word	0x24000008
 8008c28:	24000004 	.word	0x24000004
 8008c2c:	2400000c 	.word	0x2400000c

08008c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b089      	sub	sp, #36	@ 0x24
 8008c34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c36:	4bb3      	ldr	r3, [pc, #716]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c3e:	2b18      	cmp	r3, #24
 8008c40:	f200 8155 	bhi.w	8008eee <HAL_RCC_GetSysClockFreq+0x2be>
 8008c44:	a201      	add	r2, pc, #4	@ (adr r2, 8008c4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008cb1 	.word	0x08008cb1
 8008c50:	08008eef 	.word	0x08008eef
 8008c54:	08008eef 	.word	0x08008eef
 8008c58:	08008eef 	.word	0x08008eef
 8008c5c:	08008eef 	.word	0x08008eef
 8008c60:	08008eef 	.word	0x08008eef
 8008c64:	08008eef 	.word	0x08008eef
 8008c68:	08008eef 	.word	0x08008eef
 8008c6c:	08008cd7 	.word	0x08008cd7
 8008c70:	08008eef 	.word	0x08008eef
 8008c74:	08008eef 	.word	0x08008eef
 8008c78:	08008eef 	.word	0x08008eef
 8008c7c:	08008eef 	.word	0x08008eef
 8008c80:	08008eef 	.word	0x08008eef
 8008c84:	08008eef 	.word	0x08008eef
 8008c88:	08008eef 	.word	0x08008eef
 8008c8c:	08008cdd 	.word	0x08008cdd
 8008c90:	08008eef 	.word	0x08008eef
 8008c94:	08008eef 	.word	0x08008eef
 8008c98:	08008eef 	.word	0x08008eef
 8008c9c:	08008eef 	.word	0x08008eef
 8008ca0:	08008eef 	.word	0x08008eef
 8008ca4:	08008eef 	.word	0x08008eef
 8008ca8:	08008eef 	.word	0x08008eef
 8008cac:	08008ce3 	.word	0x08008ce3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cb0:	4b94      	ldr	r3, [pc, #592]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0320 	and.w	r3, r3, #32
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d009      	beq.n	8008cd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cbc:	4b91      	ldr	r3, [pc, #580]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	08db      	lsrs	r3, r3, #3
 8008cc2:	f003 0303 	and.w	r3, r3, #3
 8008cc6:	4a90      	ldr	r2, [pc, #576]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ccc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008cce:	e111      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008cd0:	4b8d      	ldr	r3, [pc, #564]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cd2:	61bb      	str	r3, [r7, #24]
      break;
 8008cd4:	e10e      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008cd6:	4b8d      	ldr	r3, [pc, #564]	@ (8008f0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008cd8:	61bb      	str	r3, [r7, #24]
      break;
 8008cda:	e10b      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8008f10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008cde:	61bb      	str	r3, [r7, #24]
      break;
 8008ce0:	e108      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ce2:	4b88      	ldr	r3, [pc, #544]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008cec:	4b85      	ldr	r3, [pc, #532]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf0:	091b      	lsrs	r3, r3, #4
 8008cf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cf6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008cf8:	4b82      	ldr	r3, [pc, #520]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d02:	4b80      	ldr	r3, [pc, #512]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d06:	08db      	lsrs	r3, r3, #3
 8008d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	fb02 f303 	mul.w	r3, r2, r3
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 80e1 	beq.w	8008ee8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	f000 8083 	beq.w	8008e34 <HAL_RCC_GetSysClockFreq+0x204>
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	f200 80a1 	bhi.w	8008e78 <HAL_RCC_GetSysClockFreq+0x248>
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <HAL_RCC_GetSysClockFreq+0x114>
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d056      	beq.n	8008df0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d42:	e099      	b.n	8008e78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d44:	4b6f      	ldr	r3, [pc, #444]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0320 	and.w	r3, r3, #32
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d02d      	beq.n	8008dac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d50:	4b6c      	ldr	r3, [pc, #432]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	08db      	lsrs	r3, r3, #3
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	4a6b      	ldr	r2, [pc, #428]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7a:	4b62      	ldr	r3, [pc, #392]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d8e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008f14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008daa:	e087      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008f18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dbe:	4b51      	ldr	r3, [pc, #324]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dd2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008f14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008dee:	e065      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008f1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e02:	4b40      	ldr	r3, [pc, #256]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e16:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008f14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e32:	e043      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008f20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e46:	4b2f      	ldr	r3, [pc, #188]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4e:	ee07 3a90 	vmov	s15, r3
 8008e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e5a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008f14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e76:	e021      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e82:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008f1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e9e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008f14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008eba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008ebc:	4b11      	ldr	r3, [pc, #68]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec0:	0a5b      	lsrs	r3, r3, #9
 8008ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	ee07 3a90 	vmov	s15, r3
 8008ed0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ee0:	ee17 3a90 	vmov	r3, s15
 8008ee4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008ee6:	e005      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	61bb      	str	r3, [r7, #24]
      break;
 8008eec:	e002      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008eee:	4b07      	ldr	r3, [pc, #28]	@ (8008f0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ef0:	61bb      	str	r3, [r7, #24]
      break;
 8008ef2:	bf00      	nop
  }

  return sysclockfreq;
 8008ef4:	69bb      	ldr	r3, [r7, #24]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3724      	adds	r7, #36	@ 0x24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	58024400 	.word	0x58024400
 8008f08:	03d09000 	.word	0x03d09000
 8008f0c:	003d0900 	.word	0x003d0900
 8008f10:	017d7840 	.word	0x017d7840
 8008f14:	46000000 	.word	0x46000000
 8008f18:	4c742400 	.word	0x4c742400
 8008f1c:	4a742400 	.word	0x4a742400
 8008f20:	4bbebc20 	.word	0x4bbebc20

08008f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f2a:	f7ff fe81 	bl	8008c30 <HAL_RCC_GetSysClockFreq>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4b10      	ldr	r3, [pc, #64]	@ (8008f74 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	0a1b      	lsrs	r3, r3, #8
 8008f36:	f003 030f 	and.w	r3, r3, #15
 8008f3a:	490f      	ldr	r1, [pc, #60]	@ (8008f78 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f3c:	5ccb      	ldrb	r3, [r1, r3]
 8008f3e:	f003 031f 	and.w	r3, r3, #31
 8008f42:	fa22 f303 	lsr.w	r3, r2, r3
 8008f46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f48:	4b0a      	ldr	r3, [pc, #40]	@ (8008f74 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	f003 030f 	and.w	r3, r3, #15
 8008f50:	4a09      	ldr	r2, [pc, #36]	@ (8008f78 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f52:	5cd3      	ldrb	r3, [r2, r3]
 8008f54:	f003 031f 	and.w	r3, r3, #31
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5e:	4a07      	ldr	r2, [pc, #28]	@ (8008f7c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f62:	4a07      	ldr	r2, [pc, #28]	@ (8008f80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f68:	4b04      	ldr	r3, [pc, #16]	@ (8008f7c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	58024400 	.word	0x58024400
 8008f78:	080151b0 	.word	0x080151b0
 8008f7c:	24000008 	.word	0x24000008
 8008f80:	24000004 	.word	0x24000004

08008f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f88:	f7ff ffcc 	bl	8008f24 <HAL_RCC_GetHCLKFreq>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	4b06      	ldr	r3, [pc, #24]	@ (8008fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	091b      	lsrs	r3, r3, #4
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	4904      	ldr	r1, [pc, #16]	@ (8008fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f9a:	5ccb      	ldrb	r3, [r1, r3]
 8008f9c:	f003 031f 	and.w	r3, r3, #31
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	58024400 	.word	0x58024400
 8008fac:	080151b0 	.word	0x080151b0

08008fb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	223f      	movs	r2, #63	@ 0x3f
 8008fbe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800902c <HAL_RCC_GetClockConfig+0x7c>)
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	f003 0207 	and.w	r2, r3, #7
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008fcc:	4b17      	ldr	r3, [pc, #92]	@ (800902c <HAL_RCC_GetClockConfig+0x7c>)
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008fd8:	4b14      	ldr	r3, [pc, #80]	@ (800902c <HAL_RCC_GetClockConfig+0x7c>)
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	f003 020f 	and.w	r2, r3, #15
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008fe4:	4b11      	ldr	r3, [pc, #68]	@ (800902c <HAL_RCC_GetClockConfig+0x7c>)
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800902c <HAL_RCC_GetClockConfig+0x7c>)
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800902c <HAL_RCC_GetClockConfig+0x7c>)
 8008ffe:	69db      	ldr	r3, [r3, #28]
 8009000:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009008:	4b08      	ldr	r3, [pc, #32]	@ (800902c <HAL_RCC_GetClockConfig+0x7c>)
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009014:	4b06      	ldr	r3, [pc, #24]	@ (8009030 <HAL_RCC_GetClockConfig+0x80>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 020f 	and.w	r2, r3, #15
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	601a      	str	r2, [r3, #0]
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	58024400 	.word	0x58024400
 8009030:	52002000 	.word	0x52002000

08009034 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009038:	b0ca      	sub	sp, #296	@ 0x128
 800903a:	af00      	add	r7, sp, #0
 800903c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009040:	2300      	movs	r3, #0
 8009042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009046:	2300      	movs	r3, #0
 8009048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800904c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009058:	2500      	movs	r5, #0
 800905a:	ea54 0305 	orrs.w	r3, r4, r5
 800905e:	d049      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009064:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009066:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800906a:	d02f      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800906c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009070:	d828      	bhi.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009072:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009076:	d01a      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009078:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800907c:	d822      	bhi.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009086:	d007      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009088:	e01c      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800908a:	4bb8      	ldr	r3, [pc, #736]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800908c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908e:	4ab7      	ldr	r2, [pc, #732]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009096:	e01a      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909c:	3308      	adds	r3, #8
 800909e:	2102      	movs	r1, #2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f002 fb61 	bl	800b768 <RCCEx_PLL2_Config>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80090ac:	e00f      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b2:	3328      	adds	r3, #40	@ 0x28
 80090b4:	2102      	movs	r1, #2
 80090b6:	4618      	mov	r0, r3
 80090b8:	f002 fc08 	bl	800b8cc <RCCEx_PLL3_Config>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80090c2:	e004      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090ca:	e000      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80090cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80090d6:	4ba5      	ldr	r3, [pc, #660]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80090de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090e4:	4aa1      	ldr	r2, [pc, #644]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090e6:	430b      	orrs	r3, r1
 80090e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80090ea:	e003      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80090f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009100:	f04f 0900 	mov.w	r9, #0
 8009104:	ea58 0309 	orrs.w	r3, r8, r9
 8009108:	d047      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800910a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009110:	2b04      	cmp	r3, #4
 8009112:	d82a      	bhi.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009114:	a201      	add	r2, pc, #4	@ (adr r2, 800911c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911a:	bf00      	nop
 800911c:	08009131 	.word	0x08009131
 8009120:	0800913f 	.word	0x0800913f
 8009124:	08009155 	.word	0x08009155
 8009128:	08009173 	.word	0x08009173
 800912c:	08009173 	.word	0x08009173
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009130:	4b8e      	ldr	r3, [pc, #568]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009134:	4a8d      	ldr	r2, [pc, #564]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800913a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800913c:	e01a      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800913e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009142:	3308      	adds	r3, #8
 8009144:	2100      	movs	r1, #0
 8009146:	4618      	mov	r0, r3
 8009148:	f002 fb0e 	bl	800b768 <RCCEx_PLL2_Config>
 800914c:	4603      	mov	r3, r0
 800914e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009152:	e00f      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009158:	3328      	adds	r3, #40	@ 0x28
 800915a:	2100      	movs	r1, #0
 800915c:	4618      	mov	r0, r3
 800915e:	f002 fbb5 	bl	800b8cc <RCCEx_PLL3_Config>
 8009162:	4603      	mov	r3, r0
 8009164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009168:	e004      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009170:	e000      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800917c:	4b7b      	ldr	r3, [pc, #492]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800917e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009180:	f023 0107 	bic.w	r1, r3, #7
 8009184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800918a:	4a78      	ldr	r2, [pc, #480]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800918c:	430b      	orrs	r3, r1
 800918e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009190:	e003      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80091a6:	f04f 0b00 	mov.w	fp, #0
 80091aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80091ae:	d04c      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80091b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091ba:	d030      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80091bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091c0:	d829      	bhi.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80091c4:	d02d      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80091c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80091c8:	d825      	bhi.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091ca:	2b80      	cmp	r3, #128	@ 0x80
 80091cc:	d018      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80091ce:	2b80      	cmp	r3, #128	@ 0x80
 80091d0:	d821      	bhi.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80091d6:	2b40      	cmp	r3, #64	@ 0x40
 80091d8:	d007      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80091da:	e01c      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091dc:	4b63      	ldr	r3, [pc, #396]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e0:	4a62      	ldr	r2, [pc, #392]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80091e8:	e01c      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ee:	3308      	adds	r3, #8
 80091f0:	2100      	movs	r1, #0
 80091f2:	4618      	mov	r0, r3
 80091f4:	f002 fab8 	bl	800b768 <RCCEx_PLL2_Config>
 80091f8:	4603      	mov	r3, r0
 80091fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80091fe:	e011      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009204:	3328      	adds	r3, #40	@ 0x28
 8009206:	2100      	movs	r1, #0
 8009208:	4618      	mov	r0, r3
 800920a:	f002 fb5f 	bl	800b8cc <RCCEx_PLL3_Config>
 800920e:	4603      	mov	r3, r0
 8009210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009214:	e006      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800921c:	e002      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800921e:	bf00      	nop
 8009220:	e000      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10a      	bne.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800922c:	4b4f      	ldr	r3, [pc, #316]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800922e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009230:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800923a:	4a4c      	ldr	r2, [pc, #304]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800923c:	430b      	orrs	r3, r1
 800923e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009240:	e003      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800924a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009256:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800925a:	2300      	movs	r3, #0
 800925c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009260:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009264:	460b      	mov	r3, r1
 8009266:	4313      	orrs	r3, r2
 8009268:	d053      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800926a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009272:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009276:	d035      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009278:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800927c:	d82e      	bhi.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800927e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009282:	d031      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009284:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009288:	d828      	bhi.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800928a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800928e:	d01a      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009294:	d822      	bhi.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800929a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800929e:	d007      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80092a0:	e01c      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092a2:	4b32      	ldr	r3, [pc, #200]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a6:	4a31      	ldr	r2, [pc, #196]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092ae:	e01c      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b4:	3308      	adds	r3, #8
 80092b6:	2100      	movs	r1, #0
 80092b8:	4618      	mov	r0, r3
 80092ba:	f002 fa55 	bl	800b768 <RCCEx_PLL2_Config>
 80092be:	4603      	mov	r3, r0
 80092c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80092c4:	e011      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ca:	3328      	adds	r3, #40	@ 0x28
 80092cc:	2100      	movs	r1, #0
 80092ce:	4618      	mov	r0, r3
 80092d0:	f002 fafc 	bl	800b8cc <RCCEx_PLL3_Config>
 80092d4:	4603      	mov	r3, r0
 80092d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092da:	e006      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092e2:	e002      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80092e4:	bf00      	nop
 80092e6:	e000      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80092e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10b      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80092f2:	4b1e      	ldr	r3, [pc, #120]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80092fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009302:	4a1a      	ldr	r2, [pc, #104]	@ (800936c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009304:	430b      	orrs	r3, r1
 8009306:	6593      	str	r3, [r2, #88]	@ 0x58
 8009308:	e003      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800930a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800930e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800931e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009322:	2300      	movs	r3, #0
 8009324:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009328:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800932c:	460b      	mov	r3, r1
 800932e:	4313      	orrs	r3, r2
 8009330:	d056      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009336:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800933a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800933e:	d038      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009340:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009344:	d831      	bhi.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009346:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800934a:	d034      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800934c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009350:	d82b      	bhi.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009356:	d01d      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009358:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800935c:	d825      	bhi.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d006      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009362:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009366:	d00a      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009368:	e01f      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800936a:	bf00      	nop
 800936c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009370:	4ba2      	ldr	r3, [pc, #648]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009374:	4aa1      	ldr	r2, [pc, #644]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800937a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800937c:	e01c      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800937e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009382:	3308      	adds	r3, #8
 8009384:	2100      	movs	r1, #0
 8009386:	4618      	mov	r0, r3
 8009388:	f002 f9ee 	bl	800b768 <RCCEx_PLL2_Config>
 800938c:	4603      	mov	r3, r0
 800938e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009392:	e011      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009398:	3328      	adds	r3, #40	@ 0x28
 800939a:	2100      	movs	r1, #0
 800939c:	4618      	mov	r0, r3
 800939e:	f002 fa95 	bl	800b8cc <RCCEx_PLL3_Config>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093a8:	e006      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093b0:	e002      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80093b2:	bf00      	nop
 80093b4:	e000      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80093b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10b      	bne.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80093c0:	4b8e      	ldr	r3, [pc, #568]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80093c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80093d0:	4a8a      	ldr	r2, [pc, #552]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093d2:	430b      	orrs	r3, r1
 80093d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80093d6:	e003      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80093e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80093ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80093f0:	2300      	movs	r3, #0
 80093f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80093f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80093fa:	460b      	mov	r3, r1
 80093fc:	4313      	orrs	r3, r2
 80093fe:	d03a      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009406:	2b30      	cmp	r3, #48	@ 0x30
 8009408:	d01f      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800940a:	2b30      	cmp	r3, #48	@ 0x30
 800940c:	d819      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800940e:	2b20      	cmp	r3, #32
 8009410:	d00c      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009412:	2b20      	cmp	r3, #32
 8009414:	d815      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d019      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800941a:	2b10      	cmp	r3, #16
 800941c:	d111      	bne.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800941e:	4b77      	ldr	r3, [pc, #476]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009422:	4a76      	ldr	r2, [pc, #472]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800942a:	e011      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800942c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009430:	3308      	adds	r3, #8
 8009432:	2102      	movs	r1, #2
 8009434:	4618      	mov	r0, r3
 8009436:	f002 f997 	bl	800b768 <RCCEx_PLL2_Config>
 800943a:	4603      	mov	r3, r0
 800943c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009440:	e006      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009448:	e002      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800944a:	bf00      	nop
 800944c:	e000      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800944e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10a      	bne.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009458:	4b68      	ldr	r3, [pc, #416]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800945a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800945c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009466:	4a65      	ldr	r2, [pc, #404]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009468:	430b      	orrs	r3, r1
 800946a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800946c:	e003      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009482:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009486:	2300      	movs	r3, #0
 8009488:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800948c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009490:	460b      	mov	r3, r1
 8009492:	4313      	orrs	r3, r2
 8009494:	d051      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800949c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094a0:	d035      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80094a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094a6:	d82e      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094ac:	d031      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80094ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094b2:	d828      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094b8:	d01a      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80094ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094be:	d822      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d003      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80094c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094c8:	d007      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80094ca:	e01c      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094cc:	4b4b      	ldr	r3, [pc, #300]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d0:	4a4a      	ldr	r2, [pc, #296]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094d8:	e01c      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094de:	3308      	adds	r3, #8
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f002 f940 	bl	800b768 <RCCEx_PLL2_Config>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094ee:	e011      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f4:	3328      	adds	r3, #40	@ 0x28
 80094f6:	2100      	movs	r1, #0
 80094f8:	4618      	mov	r0, r3
 80094fa:	f002 f9e7 	bl	800b8cc <RCCEx_PLL3_Config>
 80094fe:	4603      	mov	r3, r0
 8009500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009504:	e006      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800950c:	e002      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800950e:	bf00      	nop
 8009510:	e000      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800951c:	4b37      	ldr	r3, [pc, #220]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800951e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009520:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800952a:	4a34      	ldr	r2, [pc, #208]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800952c:	430b      	orrs	r3, r1
 800952e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009530:	e003      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800953a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009546:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800954a:	2300      	movs	r3, #0
 800954c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009550:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009554:	460b      	mov	r3, r1
 8009556:	4313      	orrs	r3, r2
 8009558:	d056      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009564:	d033      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009566:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800956a:	d82c      	bhi.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800956c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009570:	d02f      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009572:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009576:	d826      	bhi.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009578:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800957c:	d02b      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800957e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009582:	d820      	bhi.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009584:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009588:	d012      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800958a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800958e:	d81a      	bhi.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009590:	2b00      	cmp	r3, #0
 8009592:	d022      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009598:	d115      	bne.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800959a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959e:	3308      	adds	r3, #8
 80095a0:	2101      	movs	r1, #1
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 f8e0 	bl	800b768 <RCCEx_PLL2_Config>
 80095a8:	4603      	mov	r3, r0
 80095aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80095ae:	e015      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b4:	3328      	adds	r3, #40	@ 0x28
 80095b6:	2101      	movs	r1, #1
 80095b8:	4618      	mov	r0, r3
 80095ba:	f002 f987 	bl	800b8cc <RCCEx_PLL3_Config>
 80095be:	4603      	mov	r3, r0
 80095c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80095c4:	e00a      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095cc:	e006      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095ce:	bf00      	nop
 80095d0:	e004      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095d2:	bf00      	nop
 80095d4:	e002      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095d6:	bf00      	nop
 80095d8:	e000      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10d      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80095e4:	4b05      	ldr	r3, [pc, #20]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80095ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095f2:	4a02      	ldr	r2, [pc, #8]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095f4:	430b      	orrs	r3, r1
 80095f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80095f8:	e006      	b.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80095fa:	bf00      	nop
 80095fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009618:	2300      	movs	r3, #0
 800961a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800961e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009622:	460b      	mov	r3, r1
 8009624:	4313      	orrs	r3, r2
 8009626:	d055      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009630:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009634:	d033      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009636:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800963a:	d82c      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800963c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009640:	d02f      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009646:	d826      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009648:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800964c:	d02b      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800964e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009652:	d820      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009658:	d012      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800965a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800965e:	d81a      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009660:	2b00      	cmp	r3, #0
 8009662:	d022      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009668:	d115      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800966a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966e:	3308      	adds	r3, #8
 8009670:	2101      	movs	r1, #1
 8009672:	4618      	mov	r0, r3
 8009674:	f002 f878 	bl	800b768 <RCCEx_PLL2_Config>
 8009678:	4603      	mov	r3, r0
 800967a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800967e:	e015      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009684:	3328      	adds	r3, #40	@ 0x28
 8009686:	2101      	movs	r1, #1
 8009688:	4618      	mov	r0, r3
 800968a:	f002 f91f 	bl	800b8cc <RCCEx_PLL3_Config>
 800968e:	4603      	mov	r3, r0
 8009690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009694:	e00a      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800969c:	e006      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800969e:	bf00      	nop
 80096a0:	e004      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096a2:	bf00      	nop
 80096a4:	e002      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096a6:	bf00      	nop
 80096a8:	e000      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10b      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096b4:	4ba3      	ldr	r3, [pc, #652]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096b8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80096bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096c4:	4a9f      	ldr	r2, [pc, #636]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c6:	430b      	orrs	r3, r1
 80096c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80096ca:	e003      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80096e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80096e4:	2300      	movs	r3, #0
 80096e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80096ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80096ee:	460b      	mov	r3, r1
 80096f0:	4313      	orrs	r3, r2
 80096f2:	d037      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80096f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096fe:	d00e      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009704:	d816      	bhi.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009706:	2b00      	cmp	r3, #0
 8009708:	d018      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800970a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800970e:	d111      	bne.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009710:	4b8c      	ldr	r3, [pc, #560]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009714:	4a8b      	ldr	r2, [pc, #556]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800971a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800971c:	e00f      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800971e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009722:	3308      	adds	r3, #8
 8009724:	2101      	movs	r1, #1
 8009726:	4618      	mov	r0, r3
 8009728:	f002 f81e 	bl	800b768 <RCCEx_PLL2_Config>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009732:	e004      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800973a:	e000      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800973c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800973e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10a      	bne.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009746:	4b7f      	ldr	r3, [pc, #508]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800974a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800974e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009754:	4a7b      	ldr	r2, [pc, #492]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009756:	430b      	orrs	r3, r1
 8009758:	6513      	str	r3, [r2, #80]	@ 0x50
 800975a:	e003      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800975c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009774:	2300      	movs	r3, #0
 8009776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800977a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800977e:	460b      	mov	r3, r1
 8009780:	4313      	orrs	r3, r2
 8009782:	d039      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800978a:	2b03      	cmp	r3, #3
 800978c:	d81c      	bhi.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800978e:	a201      	add	r2, pc, #4	@ (adr r2, 8009794 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009794:	080097d1 	.word	0x080097d1
 8009798:	080097a5 	.word	0x080097a5
 800979c:	080097b3 	.word	0x080097b3
 80097a0:	080097d1 	.word	0x080097d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a4:	4b67      	ldr	r3, [pc, #412]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a8:	4a66      	ldr	r2, [pc, #408]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097b0:	e00f      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b6:	3308      	adds	r3, #8
 80097b8:	2102      	movs	r1, #2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f001 ffd4 	bl	800b768 <RCCEx_PLL2_Config>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097c6:	e004      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097ce:	e000      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80097d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10a      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097da:	4b5a      	ldr	r3, [pc, #360]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097de:	f023 0103 	bic.w	r1, r3, #3
 80097e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097e8:	4a56      	ldr	r2, [pc, #344]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097ea:	430b      	orrs	r3, r1
 80097ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097ee:	e003      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009804:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009808:	2300      	movs	r3, #0
 800980a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800980e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009812:	460b      	mov	r3, r1
 8009814:	4313      	orrs	r3, r2
 8009816:	f000 809f 	beq.w	8009958 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800981a:	4b4b      	ldr	r3, [pc, #300]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a4a      	ldr	r2, [pc, #296]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009824:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009826:	f7f8 f9af 	bl	8001b88 <HAL_GetTick>
 800982a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800982e:	e00b      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009830:	f7f8 f9aa 	bl	8001b88 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b64      	cmp	r3, #100	@ 0x64
 800983e:	d903      	bls.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009846:	e005      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009848:	4b3f      	ldr	r3, [pc, #252]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0ed      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009858:	2b00      	cmp	r3, #0
 800985a:	d179      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800985c:	4b39      	ldr	r3, [pc, #228]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800985e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009864:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009868:	4053      	eors	r3, r2
 800986a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800986e:	2b00      	cmp	r3, #0
 8009870:	d015      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009872:	4b34      	ldr	r3, [pc, #208]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800987a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800987e:	4b31      	ldr	r3, [pc, #196]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009882:	4a30      	ldr	r2, [pc, #192]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009888:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800988a:	4b2e      	ldr	r3, [pc, #184]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800988c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800988e:	4a2d      	ldr	r2, [pc, #180]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009894:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009896:	4a2b      	ldr	r2, [pc, #172]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800989c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800989e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098aa:	d118      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ac:	f7f8 f96c 	bl	8001b88 <HAL_GetTick>
 80098b0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098b4:	e00d      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098b6:	f7f8 f967 	bl	8001b88 <HAL_GetTick>
 80098ba:	4602      	mov	r2, r0
 80098bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80098c0:	1ad2      	subs	r2, r2, r3
 80098c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d903      	bls.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80098d0:	e005      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098d6:	f003 0302 	and.w	r3, r3, #2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d0eb      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80098de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d129      	bne.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098f6:	d10e      	bne.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80098f8:	4b12      	ldr	r3, [pc, #72]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009904:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009908:	091a      	lsrs	r2, r3, #4
 800990a:	4b10      	ldr	r3, [pc, #64]	@ (800994c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800990c:	4013      	ands	r3, r2
 800990e:	4a0d      	ldr	r2, [pc, #52]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009910:	430b      	orrs	r3, r1
 8009912:	6113      	str	r3, [r2, #16]
 8009914:	e005      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009916:	4b0b      	ldr	r3, [pc, #44]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	4a0a      	ldr	r2, [pc, #40]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800991c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009920:	6113      	str	r3, [r2, #16]
 8009922:	4b08      	ldr	r3, [pc, #32]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009924:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800992e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009932:	4a04      	ldr	r2, [pc, #16]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009934:	430b      	orrs	r3, r1
 8009936:	6713      	str	r3, [r2, #112]	@ 0x70
 8009938:	e00e      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800993a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800993e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009942:	e009      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009944:	58024400 	.word	0x58024400
 8009948:	58024800 	.word	0x58024800
 800994c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f002 0301 	and.w	r3, r2, #1
 8009964:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009968:	2300      	movs	r3, #0
 800996a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800996e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009972:	460b      	mov	r3, r1
 8009974:	4313      	orrs	r3, r2
 8009976:	f000 8089 	beq.w	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800997a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800997e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009980:	2b28      	cmp	r3, #40	@ 0x28
 8009982:	d86b      	bhi.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009984:	a201      	add	r2, pc, #4	@ (adr r2, 800998c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998a:	bf00      	nop
 800998c:	08009a65 	.word	0x08009a65
 8009990:	08009a5d 	.word	0x08009a5d
 8009994:	08009a5d 	.word	0x08009a5d
 8009998:	08009a5d 	.word	0x08009a5d
 800999c:	08009a5d 	.word	0x08009a5d
 80099a0:	08009a5d 	.word	0x08009a5d
 80099a4:	08009a5d 	.word	0x08009a5d
 80099a8:	08009a5d 	.word	0x08009a5d
 80099ac:	08009a31 	.word	0x08009a31
 80099b0:	08009a5d 	.word	0x08009a5d
 80099b4:	08009a5d 	.word	0x08009a5d
 80099b8:	08009a5d 	.word	0x08009a5d
 80099bc:	08009a5d 	.word	0x08009a5d
 80099c0:	08009a5d 	.word	0x08009a5d
 80099c4:	08009a5d 	.word	0x08009a5d
 80099c8:	08009a5d 	.word	0x08009a5d
 80099cc:	08009a47 	.word	0x08009a47
 80099d0:	08009a5d 	.word	0x08009a5d
 80099d4:	08009a5d 	.word	0x08009a5d
 80099d8:	08009a5d 	.word	0x08009a5d
 80099dc:	08009a5d 	.word	0x08009a5d
 80099e0:	08009a5d 	.word	0x08009a5d
 80099e4:	08009a5d 	.word	0x08009a5d
 80099e8:	08009a5d 	.word	0x08009a5d
 80099ec:	08009a65 	.word	0x08009a65
 80099f0:	08009a5d 	.word	0x08009a5d
 80099f4:	08009a5d 	.word	0x08009a5d
 80099f8:	08009a5d 	.word	0x08009a5d
 80099fc:	08009a5d 	.word	0x08009a5d
 8009a00:	08009a5d 	.word	0x08009a5d
 8009a04:	08009a5d 	.word	0x08009a5d
 8009a08:	08009a5d 	.word	0x08009a5d
 8009a0c:	08009a65 	.word	0x08009a65
 8009a10:	08009a5d 	.word	0x08009a5d
 8009a14:	08009a5d 	.word	0x08009a5d
 8009a18:	08009a5d 	.word	0x08009a5d
 8009a1c:	08009a5d 	.word	0x08009a5d
 8009a20:	08009a5d 	.word	0x08009a5d
 8009a24:	08009a5d 	.word	0x08009a5d
 8009a28:	08009a5d 	.word	0x08009a5d
 8009a2c:	08009a65 	.word	0x08009a65
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a34:	3308      	adds	r3, #8
 8009a36:	2101      	movs	r1, #1
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f001 fe95 	bl	800b768 <RCCEx_PLL2_Config>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a44:	e00f      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4a:	3328      	adds	r3, #40	@ 0x28
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 ff3c 	bl	800b8cc <RCCEx_PLL3_Config>
 8009a54:	4603      	mov	r3, r0
 8009a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a5a:	e004      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a62:	e000      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10a      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a6e:	4bbf      	ldr	r3, [pc, #764]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a7c:	4abb      	ldr	r2, [pc, #748]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a7e:	430b      	orrs	r3, r1
 8009a80:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a82:	e003      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f002 0302 	and.w	r3, r2, #2
 8009a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009aa2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	d041      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ab2:	2b05      	cmp	r3, #5
 8009ab4:	d824      	bhi.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8009abc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009b09 	.word	0x08009b09
 8009ac0:	08009ad5 	.word	0x08009ad5
 8009ac4:	08009aeb 	.word	0x08009aeb
 8009ac8:	08009b09 	.word	0x08009b09
 8009acc:	08009b09 	.word	0x08009b09
 8009ad0:	08009b09 	.word	0x08009b09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad8:	3308      	adds	r3, #8
 8009ada:	2101      	movs	r1, #1
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 fe43 	bl	800b768 <RCCEx_PLL2_Config>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ae8:	e00f      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aee:	3328      	adds	r3, #40	@ 0x28
 8009af0:	2101      	movs	r1, #1
 8009af2:	4618      	mov	r0, r3
 8009af4:	f001 feea 	bl	800b8cc <RCCEx_PLL3_Config>
 8009af8:	4603      	mov	r3, r0
 8009afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009afe:	e004      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b06:	e000      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10a      	bne.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b12:	4b96      	ldr	r3, [pc, #600]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b16:	f023 0107 	bic.w	r1, r3, #7
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b20:	4a92      	ldr	r2, [pc, #584]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b22:	430b      	orrs	r3, r1
 8009b24:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b26:	e003      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f002 0304 	and.w	r3, r2, #4
 8009b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b40:	2300      	movs	r3, #0
 8009b42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	d044      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b58:	2b05      	cmp	r3, #5
 8009b5a:	d825      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b64 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b62:	bf00      	nop
 8009b64:	08009bb1 	.word	0x08009bb1
 8009b68:	08009b7d 	.word	0x08009b7d
 8009b6c:	08009b93 	.word	0x08009b93
 8009b70:	08009bb1 	.word	0x08009bb1
 8009b74:	08009bb1 	.word	0x08009bb1
 8009b78:	08009bb1 	.word	0x08009bb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b80:	3308      	adds	r3, #8
 8009b82:	2101      	movs	r1, #1
 8009b84:	4618      	mov	r0, r3
 8009b86:	f001 fdef 	bl	800b768 <RCCEx_PLL2_Config>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b90:	e00f      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b96:	3328      	adds	r3, #40	@ 0x28
 8009b98:	2101      	movs	r1, #1
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f001 fe96 	bl	800b8cc <RCCEx_PLL3_Config>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009ba6:	e004      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bae:	e000      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bba:	4b6c      	ldr	r3, [pc, #432]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bbe:	f023 0107 	bic.w	r1, r3, #7
 8009bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bca:	4a68      	ldr	r2, [pc, #416]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bd0:	e003      	b.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	f002 0320 	and.w	r3, r2, #32
 8009be6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009bea:	2300      	movs	r3, #0
 8009bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	d055      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c06:	d033      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c0c:	d82c      	bhi.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c12:	d02f      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c18:	d826      	bhi.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c1e:	d02b      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009c20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c24:	d820      	bhi.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c2a:	d012      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c30:	d81a      	bhi.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d022      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009c36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c3a:	d115      	bne.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c40:	3308      	adds	r3, #8
 8009c42:	2100      	movs	r1, #0
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 fd8f 	bl	800b768 <RCCEx_PLL2_Config>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c50:	e015      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c56:	3328      	adds	r3, #40	@ 0x28
 8009c58:	2102      	movs	r1, #2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f001 fe36 	bl	800b8cc <RCCEx_PLL3_Config>
 8009c60:	4603      	mov	r3, r0
 8009c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c66:	e00a      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c6e:	e006      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c70:	bf00      	nop
 8009c72:	e004      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c74:	bf00      	nop
 8009c76:	e002      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c78:	bf00      	nop
 8009c7a:	e000      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10b      	bne.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c86:	4b39      	ldr	r3, [pc, #228]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c8a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c96:	4a35      	ldr	r2, [pc, #212]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c98:	430b      	orrs	r3, r1
 8009c9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c9c:	e003      	b.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009cbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	d058      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009cce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009cd2:	d033      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009cd4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009cd8:	d82c      	bhi.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cde:	d02f      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce4:	d826      	bhi.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ce6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cea:	d02b      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009cec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cf0:	d820      	bhi.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cf6:	d012      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009cf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cfc:	d81a      	bhi.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d022      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d06:	d115      	bne.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d0c:	3308      	adds	r3, #8
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f001 fd29 	bl	800b768 <RCCEx_PLL2_Config>
 8009d16:	4603      	mov	r3, r0
 8009d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d1c:	e015      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d22:	3328      	adds	r3, #40	@ 0x28
 8009d24:	2102      	movs	r1, #2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f001 fdd0 	bl	800b8cc <RCCEx_PLL3_Config>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d32:	e00a      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d3a:	e006      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d3c:	bf00      	nop
 8009d3e:	e004      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d40:	bf00      	nop
 8009d42:	e002      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d44:	bf00      	nop
 8009d46:	e000      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10e      	bne.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d52:	4b06      	ldr	r3, [pc, #24]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d56:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d62:	4a02      	ldr	r2, [pc, #8]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d64:	430b      	orrs	r3, r1
 8009d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d68:	e006      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009d6a:	bf00      	nop
 8009d6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d8e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009d92:	460b      	mov	r3, r1
 8009d94:	4313      	orrs	r3, r2
 8009d96:	d055      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009da0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009da4:	d033      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009da6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009daa:	d82c      	bhi.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009db0:	d02f      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009db6:	d826      	bhi.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009db8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009dbc:	d02b      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009dbe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009dc2:	d820      	bhi.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009dc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dc8:	d012      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009dca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dce:	d81a      	bhi.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d022      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dd8:	d115      	bne.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dde:	3308      	adds	r3, #8
 8009de0:	2100      	movs	r1, #0
 8009de2:	4618      	mov	r0, r3
 8009de4:	f001 fcc0 	bl	800b768 <RCCEx_PLL2_Config>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009dee:	e015      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df4:	3328      	adds	r3, #40	@ 0x28
 8009df6:	2102      	movs	r1, #2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f001 fd67 	bl	800b8cc <RCCEx_PLL3_Config>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e04:	e00a      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e0c:	e006      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e0e:	bf00      	nop
 8009e10:	e004      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e12:	bf00      	nop
 8009e14:	e002      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e16:	bf00      	nop
 8009e18:	e000      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10b      	bne.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e24:	4ba1      	ldr	r3, [pc, #644]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e28:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e34:	4a9d      	ldr	r2, [pc, #628]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e36:	430b      	orrs	r3, r1
 8009e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e3a:	e003      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	f002 0308 	and.w	r3, r2, #8
 8009e50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e54:	2300      	movs	r3, #0
 8009e56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4313      	orrs	r3, r2
 8009e62:	d01e      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e70:	d10c      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e76:	3328      	adds	r3, #40	@ 0x28
 8009e78:	2102      	movs	r1, #2
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f001 fd26 	bl	800b8cc <RCCEx_PLL3_Config>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e8c:	4b87      	ldr	r3, [pc, #540]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e90:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e9c:	4a83      	ldr	r2, [pc, #524]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e9e:	430b      	orrs	r3, r1
 8009ea0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f002 0310 	and.w	r3, r2, #16
 8009eae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009eb8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	d01e      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ece:	d10c      	bne.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed4:	3328      	adds	r3, #40	@ 0x28
 8009ed6:	2102      	movs	r1, #2
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f001 fcf7 	bl	800b8cc <RCCEx_PLL3_Config>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009eea:	4b70      	ldr	r3, [pc, #448]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009efa:	4a6c      	ldr	r2, [pc, #432]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009efc:	430b      	orrs	r3, r1
 8009efe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009f0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f10:	2300      	movs	r3, #0
 8009f12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f16:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	d03e      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f2c:	d022      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f32:	d81b      	bhi.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f3c:	d00b      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009f3e:	e015      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f44:	3308      	adds	r3, #8
 8009f46:	2100      	movs	r1, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 fc0d 	bl	800b768 <RCCEx_PLL2_Config>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f54:	e00f      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f5a:	3328      	adds	r3, #40	@ 0x28
 8009f5c:	2102      	movs	r1, #2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f001 fcb4 	bl	800b8cc <RCCEx_PLL3_Config>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f6a:	e004      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f72:	e000      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10b      	bne.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f7e:	4b4b      	ldr	r3, [pc, #300]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f82:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f8e:	4a47      	ldr	r2, [pc, #284]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f90:	430b      	orrs	r3, r1
 8009f92:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f94:	e003      	b.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009faa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009fac:	2300      	movs	r3, #0
 8009fae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009fb0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	d03b      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009fc6:	d01f      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009fc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009fcc:	d818      	bhi.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fd2:	d003      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fd8:	d007      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009fda:	e011      	b.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fdc:	4b33      	ldr	r3, [pc, #204]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe0:	4a32      	ldr	r2, [pc, #200]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009fe8:	e00f      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fee:	3328      	adds	r3, #40	@ 0x28
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f001 fc6a 	bl	800b8cc <RCCEx_PLL3_Config>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ffe:	e004      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a006:	e000      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a00a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10b      	bne.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a012:	4b26      	ldr	r3, [pc, #152]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a016:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a022:	4a22      	ldr	r2, [pc, #136]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a024:	430b      	orrs	r3, r1
 800a026:	6553      	str	r3, [r2, #84]	@ 0x54
 800a028:	e003      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a02a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a02e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a03e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a040:	2300      	movs	r3, #0
 800a042:	677b      	str	r3, [r7, #116]	@ 0x74
 800a044:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a048:	460b      	mov	r3, r1
 800a04a:	4313      	orrs	r3, r2
 800a04c:	d034      	beq.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a054:	2b00      	cmp	r3, #0
 800a056:	d003      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a05c:	d007      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a05e:	e011      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a060:	4b12      	ldr	r3, [pc, #72]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a064:	4a11      	ldr	r2, [pc, #68]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a06a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a06c:	e00e      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a072:	3308      	adds	r3, #8
 800a074:	2102      	movs	r1, #2
 800a076:	4618      	mov	r0, r3
 800a078:	f001 fb76 	bl	800b768 <RCCEx_PLL2_Config>
 800a07c:	4603      	mov	r3, r0
 800a07e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a082:	e003      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a08a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a08c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10d      	bne.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a094:	4b05      	ldr	r3, [pc, #20]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a098:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0a2:	4a02      	ldr	r2, [pc, #8]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a0a8:	e006      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a0aa:	bf00      	nop
 800a0ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a0c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	d00c      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d8:	3328      	adds	r3, #40	@ 0x28
 800a0da:	2102      	movs	r1, #2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f001 fbf5 	bl	800b8cc <RCCEx_PLL3_Config>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a0fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	667b      	str	r3, [r7, #100]	@ 0x64
 800a100:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a104:	460b      	mov	r3, r1
 800a106:	4313      	orrs	r3, r2
 800a108:	d038      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a112:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a116:	d018      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a118:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a11c:	d811      	bhi.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a11e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a122:	d014      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a128:	d80b      	bhi.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d011      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a12e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a132:	d106      	bne.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a134:	4bc3      	ldr	r3, [pc, #780]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a138:	4ac2      	ldr	r2, [pc, #776]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a13a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a13e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a140:	e008      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a148:	e004      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a14a:	bf00      	nop
 800a14c:	e002      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a14e:	bf00      	nop
 800a150:	e000      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a152:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10b      	bne.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a15c:	4bb9      	ldr	r3, [pc, #740]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a15e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a160:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a16c:	4ab5      	ldr	r2, [pc, #724]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a16e:	430b      	orrs	r3, r1
 800a170:	6553      	str	r3, [r2, #84]	@ 0x54
 800a172:	e003      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a178:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a188:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a18a:	2300      	movs	r3, #0
 800a18c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a18e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a192:	460b      	mov	r3, r1
 800a194:	4313      	orrs	r3, r2
 800a196:	d009      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a198:	4baa      	ldr	r3, [pc, #680]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a19a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a19c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1a6:	4aa7      	ldr	r2, [pc, #668]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1a8:	430b      	orrs	r3, r1
 800a1aa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a1b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	d00a      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a1c8:	4b9e      	ldr	r3, [pc, #632]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a1d8:	4a9a      	ldr	r2, [pc, #616]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1da:	430b      	orrs	r3, r1
 800a1dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a1ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	d009      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a1fa:	4b92      	ldr	r3, [pc, #584]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1fe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a208:	4a8e      	ldr	r2, [pc, #568]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a20a:	430b      	orrs	r3, r1
 800a20c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a21a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a21c:	2300      	movs	r3, #0
 800a21e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a220:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a224:	460b      	mov	r3, r1
 800a226:	4313      	orrs	r3, r2
 800a228:	d00e      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a22a:	4b86      	ldr	r3, [pc, #536]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	4a85      	ldr	r2, [pc, #532]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a230:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a234:	6113      	str	r3, [r2, #16]
 800a236:	4b83      	ldr	r3, [pc, #524]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a238:	6919      	ldr	r1, [r3, #16]
 800a23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a23e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a242:	4a80      	ldr	r2, [pc, #512]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a244:	430b      	orrs	r3, r1
 800a246:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a254:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a256:	2300      	movs	r3, #0
 800a258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a25a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a25e:	460b      	mov	r3, r1
 800a260:	4313      	orrs	r3, r2
 800a262:	d009      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a264:	4b77      	ldr	r3, [pc, #476]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a268:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a26c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a272:	4a74      	ldr	r2, [pc, #464]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a274:	430b      	orrs	r3, r1
 800a276:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a284:	633b      	str	r3, [r7, #48]	@ 0x30
 800a286:	2300      	movs	r3, #0
 800a288:	637b      	str	r3, [r7, #52]	@ 0x34
 800a28a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a28e:	460b      	mov	r3, r1
 800a290:	4313      	orrs	r3, r2
 800a292:	d00a      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a294:	4b6b      	ldr	r3, [pc, #428]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a298:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2a4:	4a67      	ldr	r2, [pc, #412]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	d011      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f001 fa4a 	bl	800b768 <RCCEx_PLL2_Config>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a2da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	6239      	str	r1, [r7, #32]
 800a2f6:	f003 0302 	and.w	r3, r3, #2
 800a2fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a300:	460b      	mov	r3, r1
 800a302:	4313      	orrs	r3, r2
 800a304:	d011      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a30a:	3308      	adds	r3, #8
 800a30c:	2101      	movs	r1, #1
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 fa2a 	bl	800b768 <RCCEx_PLL2_Config>
 800a314:	4603      	mov	r3, r0
 800a316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a31a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	2100      	movs	r1, #0
 800a334:	61b9      	str	r1, [r7, #24]
 800a336:	f003 0304 	and.w	r3, r3, #4
 800a33a:	61fb      	str	r3, [r7, #28]
 800a33c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a340:	460b      	mov	r3, r1
 800a342:	4313      	orrs	r3, r2
 800a344:	d011      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a34a:	3308      	adds	r3, #8
 800a34c:	2102      	movs	r1, #2
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 fa0a 	bl	800b768 <RCCEx_PLL2_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a35a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	2100      	movs	r1, #0
 800a374:	6139      	str	r1, [r7, #16]
 800a376:	f003 0308 	and.w	r3, r3, #8
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a380:	460b      	mov	r3, r1
 800a382:	4313      	orrs	r3, r2
 800a384:	d011      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a38a:	3328      	adds	r3, #40	@ 0x28
 800a38c:	2100      	movs	r1, #0
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 fa9c 	bl	800b8cc <RCCEx_PLL3_Config>
 800a394:	4603      	mov	r3, r0
 800a396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a39a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	f003 0310 	and.w	r3, r3, #16
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	d011      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ca:	3328      	adds	r3, #40	@ 0x28
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f001 fa7c 	bl	800b8cc <RCCEx_PLL3_Config>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a3da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d003      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	6039      	str	r1, [r7, #0]
 800a3f6:	f003 0320 	and.w	r3, r3, #32
 800a3fa:	607b      	str	r3, [r7, #4]
 800a3fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a400:	460b      	mov	r3, r1
 800a402:	4313      	orrs	r3, r2
 800a404:	d011      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a40a:	3328      	adds	r3, #40	@ 0x28
 800a40c:	2102      	movs	r1, #2
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 fa5c 	bl	800b8cc <RCCEx_PLL3_Config>
 800a414:	4603      	mov	r3, r0
 800a416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a41a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a42a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	e000      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
}
 800a438:	4618      	mov	r0, r3
 800a43a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a43e:	46bd      	mov	sp, r7
 800a440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a444:	58024400 	.word	0x58024400

0800a448 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b090      	sub	sp, #64	@ 0x40
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a452:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a456:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a45a:	430b      	orrs	r3, r1
 800a45c:	f040 8094 	bne.w	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a460:	4b9e      	ldr	r3, [pc, #632]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a464:	f003 0307 	and.w	r3, r3, #7
 800a468:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	f200 8087 	bhi.w	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a472:	a201      	add	r2, pc, #4	@ (adr r2, 800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a478:	0800a48d 	.word	0x0800a48d
 800a47c:	0800a4b5 	.word	0x0800a4b5
 800a480:	0800a4dd 	.word	0x0800a4dd
 800a484:	0800a579 	.word	0x0800a579
 800a488:	0800a505 	.word	0x0800a505
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a48c:	4b93      	ldr	r3, [pc, #588]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a494:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a498:	d108      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a49a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f001 f810 	bl	800b4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a8:	f000 bd45 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b0:	f000 bd41 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4b4:	4b89      	ldr	r3, [pc, #548]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4c0:	d108      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4c2:	f107 0318 	add.w	r3, r7, #24
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 fd54 	bl	800af74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d0:	f000 bd31 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d8:	f000 bd2d 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4dc:	4b7f      	ldr	r3, [pc, #508]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4e8:	d108      	bne.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4ea:	f107 030c 	add.w	r3, r7, #12
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fe94 	bl	800b21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4f8:	f000 bd1d 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a500:	f000 bd19 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a504:	4b75      	ldr	r3, [pc, #468]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a508:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a50c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a50e:	4b73      	ldr	r3, [pc, #460]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0304 	and.w	r3, r3, #4
 800a516:	2b04      	cmp	r3, #4
 800a518:	d10c      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a51a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d109      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a520:	4b6e      	ldr	r3, [pc, #440]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	08db      	lsrs	r3, r3, #3
 800a526:	f003 0303 	and.w	r3, r3, #3
 800a52a:	4a6d      	ldr	r2, [pc, #436]	@ (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a52c:	fa22 f303 	lsr.w	r3, r2, r3
 800a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a532:	e01f      	b.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a534:	4b69      	ldr	r3, [pc, #420]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a53c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a540:	d106      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a548:	d102      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a54a:	4b66      	ldr	r3, [pc, #408]	@ (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a54e:	e011      	b.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a550:	4b62      	ldr	r3, [pc, #392]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a55c:	d106      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a564:	d102      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a566:	4b60      	ldr	r3, [pc, #384]	@ (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a56a:	e003      	b.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a570:	f000 bce1 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a574:	f000 bcdf 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a578:	4b5c      	ldr	r3, [pc, #368]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a57c:	f000 bcdb 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a584:	f000 bcd7 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a58c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a590:	430b      	orrs	r3, r1
 800a592:	f040 80ad 	bne.w	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a596:	4b51      	ldr	r3, [pc, #324]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a59a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a59e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5a6:	d056      	beq.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ae:	f200 8090 	bhi.w	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5b6:	f000 8088 	beq.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5be:	f200 8088 	bhi.w	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	2b80      	cmp	r3, #128	@ 0x80
 800a5c6:	d032      	beq.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ca:	2b80      	cmp	r3, #128	@ 0x80
 800a5cc:	f200 8081 	bhi.w	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d8:	2b40      	cmp	r3, #64	@ 0x40
 800a5da:	d014      	beq.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a5dc:	e079      	b.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5de:	4b3f      	ldr	r3, [pc, #252]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5ea:	d108      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 ff67 	bl	800b4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5fa:	f000 bc9c 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a602:	f000 bc98 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a606:	4b35      	ldr	r3, [pc, #212]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a60e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a612:	d108      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a614:	f107 0318 	add.w	r3, r7, #24
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fcab 	bl	800af74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a622:	f000 bc88 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62a:	f000 bc84 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a62e:	4b2b      	ldr	r3, [pc, #172]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a63a:	d108      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a63c:	f107 030c 	add.w	r3, r7, #12
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fdeb 	bl	800b21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a64a:	f000 bc74 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a652:	f000 bc70 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a656:	4b21      	ldr	r3, [pc, #132]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a65a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a65e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a660:	4b1e      	ldr	r3, [pc, #120]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0304 	and.w	r3, r3, #4
 800a668:	2b04      	cmp	r3, #4
 800a66a:	d10c      	bne.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d109      	bne.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a672:	4b1a      	ldr	r3, [pc, #104]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	08db      	lsrs	r3, r3, #3
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	4a18      	ldr	r2, [pc, #96]	@ (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a67e:	fa22 f303 	lsr.w	r3, r2, r3
 800a682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a684:	e01f      	b.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a686:	4b15      	ldr	r3, [pc, #84]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a68e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a692:	d106      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a69a:	d102      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a69c:	4b11      	ldr	r3, [pc, #68]	@ (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6a0:	e011      	b.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6ae:	d106      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6b6:	d102      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6bc:	e003      	b.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6c2:	f000 bc38 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6c6:	f000 bc36 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6ca:	4b08      	ldr	r3, [pc, #32]	@ (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ce:	f000 bc32 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d6:	f000 bc2e 	b.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6da:	bf00      	nop
 800a6dc:	58024400 	.word	0x58024400
 800a6e0:	03d09000 	.word	0x03d09000
 800a6e4:	003d0900 	.word	0x003d0900
 800a6e8:	017d7840 	.word	0x017d7840
 800a6ec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6f4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a6f8:	430b      	orrs	r3, r1
 800a6fa:	f040 809c 	bne.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a6fe:	4b9e      	ldr	r3, [pc, #632]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a702:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a706:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a70e:	d054      	beq.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a712:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a716:	f200 808b 	bhi.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a720:	f000 8083 	beq.w	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a726:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a72a:	f200 8081 	bhi.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a730:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a734:	d02f      	beq.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a738:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a73c:	d878      	bhi.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a740:	2b00      	cmp	r3, #0
 800a742:	d004      	beq.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a746:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a74a:	d012      	beq.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a74c:	e070      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a74e:	4b8a      	ldr	r3, [pc, #552]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a756:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a75a:	d107      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a75c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a760:	4618      	mov	r0, r3
 800a762:	f000 feaf 	bl	800b4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a76a:	e3e4      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a770:	e3e1      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a772:	4b81      	ldr	r3, [pc, #516]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a77a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a77e:	d107      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a780:	f107 0318 	add.w	r3, r7, #24
 800a784:	4618      	mov	r0, r3
 800a786:	f000 fbf5 	bl	800af74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a78e:	e3d2      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a794:	e3cf      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a796:	4b78      	ldr	r3, [pc, #480]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a79e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7a2:	d107      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7a4:	f107 030c 	add.w	r3, r7, #12
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fd37 	bl	800b21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b2:	e3c0      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b8:	e3bd      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7ba:	4b6f      	ldr	r3, [pc, #444]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7c4:	4b6c      	ldr	r3, [pc, #432]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 0304 	and.w	r3, r3, #4
 800a7cc:	2b04      	cmp	r3, #4
 800a7ce:	d10c      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d109      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7d6:	4b68      	ldr	r3, [pc, #416]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	08db      	lsrs	r3, r3, #3
 800a7dc:	f003 0303 	and.w	r3, r3, #3
 800a7e0:	4a66      	ldr	r2, [pc, #408]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a7e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7e8:	e01e      	b.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7ea:	4b63      	ldr	r3, [pc, #396]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7f6:	d106      	bne.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a7f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7fe:	d102      	bne.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a800:	4b5f      	ldr	r3, [pc, #380]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a804:	e010      	b.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a806:	4b5c      	ldr	r3, [pc, #368]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a80e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a812:	d106      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a81a:	d102      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a81c:	4b59      	ldr	r3, [pc, #356]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a820:	e002      	b.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a826:	e386      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a828:	e385      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a82a:	4b57      	ldr	r3, [pc, #348]	@ (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a82e:	e382      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a834:	e37f      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a83a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a83e:	430b      	orrs	r3, r1
 800a840:	f040 80a7 	bne.w	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a844:	4b4c      	ldr	r3, [pc, #304]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a848:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a84c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a850:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a854:	d055      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a858:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a85c:	f200 8096 	bhi.w	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a862:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a866:	f000 8084 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a870:	f200 808c 	bhi.w	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a87a:	d030      	beq.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a882:	f200 8083 	bhi.w	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d004      	beq.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a892:	d012      	beq.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a894:	e07a      	b.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a896:	4b38      	ldr	r3, [pc, #224]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a89e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8a2:	d107      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 fe0b 	bl	800b4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b2:	e340      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b8:	e33d      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ba:	4b2f      	ldr	r3, [pc, #188]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8c6:	d107      	bne.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c8:	f107 0318 	add.w	r3, r7, #24
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fb51 	bl	800af74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d6:	e32e      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8dc:	e32b      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8de:	4b26      	ldr	r3, [pc, #152]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ea:	d107      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ec:	f107 030c 	add.w	r3, r7, #12
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fc93 	bl	800b21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fa:	e31c      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a900:	e319      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a902:	4b1d      	ldr	r3, [pc, #116]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a906:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a90a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a90c:	4b1a      	ldr	r3, [pc, #104]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0304 	and.w	r3, r3, #4
 800a914:	2b04      	cmp	r3, #4
 800a916:	d10c      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d109      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a91e:	4b16      	ldr	r3, [pc, #88]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	08db      	lsrs	r3, r3, #3
 800a924:	f003 0303 	and.w	r3, r3, #3
 800a928:	4a14      	ldr	r2, [pc, #80]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a92a:	fa22 f303 	lsr.w	r3, r2, r3
 800a92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a930:	e01e      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a932:	4b11      	ldr	r3, [pc, #68]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a93a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a93e:	d106      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a946:	d102      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a948:	4b0d      	ldr	r3, [pc, #52]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a94c:	e010      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a94e:	4b0a      	ldr	r3, [pc, #40]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a95a:	d106      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a95e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a962:	d102      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a964:	4b07      	ldr	r3, [pc, #28]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a968:	e002      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a96e:	e2e2      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a970:	e2e1      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a972:	4b05      	ldr	r3, [pc, #20]	@ (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a976:	e2de      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a978:	58024400 	.word	0x58024400
 800a97c:	03d09000 	.word	0x03d09000
 800a980:	003d0900 	.word	0x003d0900
 800a984:	017d7840 	.word	0x017d7840
 800a988:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a990:	e2d1      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a992:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a996:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a99a:	430b      	orrs	r3, r1
 800a99c:	f040 809c 	bne.w	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a9a0:	4b93      	ldr	r3, [pc, #588]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9a4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a9a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9b0:	d054      	beq.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9b8:	f200 808b 	bhi.w	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9c2:	f000 8083 	beq.w	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9cc:	f200 8081 	bhi.w	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9d6:	d02f      	beq.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9de:	d878      	bhi.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d004      	beq.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9ec:	d012      	beq.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a9ee:	e070      	b.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9f0:	4b7f      	ldr	r3, [pc, #508]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9fc:	d107      	bne.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fd5e 	bl	800b4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa0c:	e293      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa12:	e290      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa14:	4b76      	ldr	r3, [pc, #472]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa20:	d107      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa22:	f107 0318 	add.w	r3, r7, #24
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 faa4 	bl	800af74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa30:	e281      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa36:	e27e      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa38:	4b6d      	ldr	r3, [pc, #436]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa44:	d107      	bne.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa46:	f107 030c 	add.w	r3, r7, #12
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 fbe6 	bl	800b21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa54:	e26f      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa5a:	e26c      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa5c:	4b64      	ldr	r3, [pc, #400]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa64:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa66:	4b62      	ldr	r3, [pc, #392]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0304 	and.w	r3, r3, #4
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	d10c      	bne.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800aa72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d109      	bne.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa78:	4b5d      	ldr	r3, [pc, #372]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	08db      	lsrs	r3, r3, #3
 800aa7e:	f003 0303 	and.w	r3, r3, #3
 800aa82:	4a5c      	ldr	r2, [pc, #368]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aa84:	fa22 f303 	lsr.w	r3, r2, r3
 800aa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa8a:	e01e      	b.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa8c:	4b58      	ldr	r3, [pc, #352]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa98:	d106      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aa9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaa0:	d102      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aaa2:	4b55      	ldr	r3, [pc, #340]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aaa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaa6:	e010      	b.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaa8:	4b51      	ldr	r3, [pc, #324]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aab0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aab4:	d106      	bne.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aabc:	d102      	bne.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aabe:	4b4f      	ldr	r3, [pc, #316]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aac2:	e002      	b.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aac8:	e235      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aaca:	e234      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aacc:	4b4c      	ldr	r3, [pc, #304]	@ (800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad0:	e231      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad6:	e22e      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aadc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800aae0:	430b      	orrs	r3, r1
 800aae2:	f040 808f 	bne.w	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aae6:	4b42      	ldr	r3, [pc, #264]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaea:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aaee:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aaf6:	d06b      	beq.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aafe:	d874      	bhi.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab06:	d056      	beq.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ab08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab0e:	d86c      	bhi.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab16:	d03b      	beq.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ab18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab1e:	d864      	bhi.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab26:	d021      	beq.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ab28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab2e:	d85c      	bhi.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d004      	beq.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ab36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab3c:	d004      	beq.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ab3e:	e054      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ab40:	f7fe fa20 	bl	8008f84 <HAL_RCC_GetPCLK1Freq>
 800ab44:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab46:	e1f6      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab48:	4b29      	ldr	r3, [pc, #164]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab54:	d107      	bne.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab56:	f107 0318 	add.w	r3, r7, #24
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 fa0a 	bl	800af74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab64:	e1e7      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab6a:	e1e4      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab6c:	4b20      	ldr	r3, [pc, #128]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab78:	d107      	bne.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab7a:	f107 030c 	add.w	r3, r7, #12
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fb4c 	bl	800b21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab88:	e1d5      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8e:	e1d2      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab90:	4b17      	ldr	r3, [pc, #92]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0304 	and.w	r3, r3, #4
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d109      	bne.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab9c:	4b14      	ldr	r3, [pc, #80]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	08db      	lsrs	r3, r3, #3
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	4a13      	ldr	r2, [pc, #76]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aba8:	fa22 f303 	lsr.w	r3, r2, r3
 800abac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abae:	e1c2      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb4:	e1bf      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800abb6:	4b0e      	ldr	r3, [pc, #56]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abc2:	d102      	bne.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800abc4:	4b0c      	ldr	r3, [pc, #48]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800abc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc8:	e1b5      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abce:	e1b2      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800abd0:	4b07      	ldr	r3, [pc, #28]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abdc:	d102      	bne.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800abde:	4b07      	ldr	r3, [pc, #28]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800abe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abe2:	e1a8      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abe8:	e1a5      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abea:	2300      	movs	r3, #0
 800abec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abee:	e1a2      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abf0:	58024400 	.word	0x58024400
 800abf4:	03d09000 	.word	0x03d09000
 800abf8:	003d0900 	.word	0x003d0900
 800abfc:	017d7840 	.word	0x017d7840
 800ac00:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac08:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ac0c:	430b      	orrs	r3, r1
 800ac0e:	d173      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac10:	4b9c      	ldr	r3, [pc, #624]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac20:	d02f      	beq.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ac22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac28:	d863      	bhi.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ac2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d004      	beq.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ac30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac36:	d012      	beq.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ac38:	e05b      	b.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac3a:	4b92      	ldr	r3, [pc, #584]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac46:	d107      	bne.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac48:	f107 0318 	add.w	r3, r7, #24
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f000 f991 	bl	800af74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac56:	e16e      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac5c:	e16b      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac5e:	4b89      	ldr	r3, [pc, #548]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac6a:	d107      	bne.n	800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac6c:	f107 030c 	add.w	r3, r7, #12
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 fad3 	bl	800b21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac7a:	e15c      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac80:	e159      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac82:	4b80      	ldr	r3, [pc, #512]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac8c:	4b7d      	ldr	r3, [pc, #500]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	2b04      	cmp	r3, #4
 800ac96:	d10c      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ac98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d109      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac9e:	4b79      	ldr	r3, [pc, #484]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	08db      	lsrs	r3, r3, #3
 800aca4:	f003 0303 	and.w	r3, r3, #3
 800aca8:	4a77      	ldr	r2, [pc, #476]	@ (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800acaa:	fa22 f303 	lsr.w	r3, r2, r3
 800acae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acb0:	e01e      	b.n	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acb2:	4b74      	ldr	r3, [pc, #464]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acbe:	d106      	bne.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800acc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acc6:	d102      	bne.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acc8:	4b70      	ldr	r3, [pc, #448]	@ (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800acca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800accc:	e010      	b.n	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acce:	4b6d      	ldr	r3, [pc, #436]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acda:	d106      	bne.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800acdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ace2:	d102      	bne.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ace4:	4b6a      	ldr	r3, [pc, #424]	@ (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ace6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ace8:	e002      	b.n	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800acee:	e122      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acf0:	e121      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acf6:	e11e      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800acf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acfc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ad00:	430b      	orrs	r3, r1
 800ad02:	d133      	bne.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad04:	4b5f      	ldr	r3, [pc, #380]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d004      	beq.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ad14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad1a:	d012      	beq.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ad1c:	e023      	b.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad1e:	4b59      	ldr	r3, [pc, #356]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad2a:	d107      	bne.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 fbc7 	bl	800b4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad3a:	e0fc      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad40:	e0f9      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad42:	4b50      	ldr	r3, [pc, #320]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad4e:	d107      	bne.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad50:	f107 0318 	add.w	r3, r7, #24
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 f90d 	bl	800af74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ad5a:	6a3b      	ldr	r3, [r7, #32]
 800ad5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad5e:	e0ea      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad64:	e0e7      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad6a:	e0e4      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ad6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad70:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ad74:	430b      	orrs	r3, r1
 800ad76:	f040 808d 	bne.w	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ad7a:	4b42      	ldr	r3, [pc, #264]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad7e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ad82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad8a:	d06b      	beq.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad92:	d874      	bhi.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad9a:	d056      	beq.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ada2:	d86c      	bhi.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ada4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adaa:	d03b      	beq.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800adac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adb2:	d864      	bhi.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800adb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adba:	d021      	beq.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800adbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adc2:	d85c      	bhi.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800adc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d004      	beq.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800adca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800add0:	d004      	beq.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800add2:	e054      	b.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800add4:	f000 f8b8 	bl	800af48 <HAL_RCCEx_GetD3PCLK1Freq>
 800add8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adda:	e0ac      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800addc:	4b29      	ldr	r3, [pc, #164]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ade4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ade8:	d107      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adea:	f107 0318 	add.w	r3, r7, #24
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 f8c0 	bl	800af74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf8:	e09d      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adfe:	e09a      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae00:	4b20      	ldr	r3, [pc, #128]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae0c:	d107      	bne.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae0e:	f107 030c 	add.w	r3, r7, #12
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 fa02 	bl	800b21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae1c:	e08b      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae22:	e088      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae24:	4b17      	ldr	r3, [pc, #92]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b04      	cmp	r3, #4
 800ae2e:	d109      	bne.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae30:	4b14      	ldr	r3, [pc, #80]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	08db      	lsrs	r3, r3, #3
 800ae36:	f003 0303 	and.w	r3, r3, #3
 800ae3a:	4a13      	ldr	r2, [pc, #76]	@ (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae42:	e078      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae48:	e075      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae56:	d102      	bne.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ae58:	4b0c      	ldr	r3, [pc, #48]	@ (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ae5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae5c:	e06b      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae62:	e068      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae64:	4b07      	ldr	r3, [pc, #28]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae70:	d102      	bne.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ae72:	4b07      	ldr	r3, [pc, #28]	@ (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ae74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae76:	e05e      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae7c:	e05b      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae82:	e058      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae84:	58024400 	.word	0x58024400
 800ae88:	03d09000 	.word	0x03d09000
 800ae8c:	003d0900 	.word	0x003d0900
 800ae90:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae98:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ae9c:	430b      	orrs	r3, r1
 800ae9e:	d148      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aea0:	4b27      	ldr	r3, [pc, #156]	@ (800af40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aea8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aeb0:	d02a      	beq.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aeb8:	d838      	bhi.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800aeba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d004      	beq.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aec6:	d00d      	beq.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800aec8:	e030      	b.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aeca:	4b1d      	ldr	r3, [pc, #116]	@ (800af40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aed6:	d102      	bne.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800aed8:	4b1a      	ldr	r3, [pc, #104]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800aeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aedc:	e02b      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee2:	e028      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aee4:	4b16      	ldr	r3, [pc, #88]	@ (800af40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aef0:	d107      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fae4 	bl	800b4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af00:	e019      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af06:	e016      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af08:	4b0d      	ldr	r3, [pc, #52]	@ (800af40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af14:	d107      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af16:	f107 0318 	add.w	r3, r7, #24
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 f82a 	bl	800af74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af24:	e007      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2a:	e004      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af30:	e001      	b.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800af36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3740      	adds	r7, #64	@ 0x40
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	58024400 	.word	0x58024400
 800af44:	017d7840 	.word	0x017d7840

0800af48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af4c:	f7fd ffea 	bl	8008f24 <HAL_RCC_GetHCLKFreq>
 800af50:	4602      	mov	r2, r0
 800af52:	4b06      	ldr	r3, [pc, #24]	@ (800af6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	091b      	lsrs	r3, r3, #4
 800af58:	f003 0307 	and.w	r3, r3, #7
 800af5c:	4904      	ldr	r1, [pc, #16]	@ (800af70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af5e:	5ccb      	ldrb	r3, [r1, r3]
 800af60:	f003 031f 	and.w	r3, r3, #31
 800af64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800af68:	4618      	mov	r0, r3
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	58024400 	.word	0x58024400
 800af70:	080151b0 	.word	0x080151b0

0800af74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800af74:	b480      	push	{r7}
 800af76:	b089      	sub	sp, #36	@ 0x24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af7c:	4ba1      	ldr	r3, [pc, #644]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af80:	f003 0303 	and.w	r3, r3, #3
 800af84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800af86:	4b9f      	ldr	r3, [pc, #636]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af8a:	0b1b      	lsrs	r3, r3, #12
 800af8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af92:	4b9c      	ldr	r3, [pc, #624]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af96:	091b      	lsrs	r3, r3, #4
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af9e:	4b99      	ldr	r3, [pc, #612]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afa2:	08db      	lsrs	r3, r3, #3
 800afa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	fb02 f303 	mul.w	r3, r2, r3
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f000 8111 	beq.w	800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	f000 8083 	beq.w	800b0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	2b02      	cmp	r3, #2
 800afce:	f200 80a1 	bhi.w	800b114 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d003      	beq.n	800afe0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d056      	beq.n	800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800afde:	e099      	b.n	800b114 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afe0:	4b88      	ldr	r3, [pc, #544]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0320 	and.w	r3, r3, #32
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d02d      	beq.n	800b048 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afec:	4b85      	ldr	r3, [pc, #532]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	08db      	lsrs	r3, r3, #3
 800aff2:	f003 0303 	and.w	r3, r3, #3
 800aff6:	4a84      	ldr	r2, [pc, #528]	@ (800b208 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aff8:	fa22 f303 	lsr.w	r3, r2, r3
 800affc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	ee07 3a90 	vmov	s15, r3
 800b004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b016:	4b7b      	ldr	r3, [pc, #492]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b026:	ed97 6a03 	vldr	s12, [r7, #12]
 800b02a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b20c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b042:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b046:	e087      	b.n	800b158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b052:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b210 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05a:	4b6a      	ldr	r3, [pc, #424]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b062:	ee07 3a90 	vmov	s15, r3
 800b066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b06e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b20c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b08a:	e065      	b.n	800b158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b096:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09e:	4b59      	ldr	r3, [pc, #356]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b20c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ce:	e043      	b.n	800b158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	ee07 3a90 	vmov	s15, r3
 800b0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0e2:	4b48      	ldr	r3, [pc, #288]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ea:	ee07 3a90 	vmov	s15, r3
 800b0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b20c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b112:	e021      	b.n	800b158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b126:	4b37      	ldr	r3, [pc, #220]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12e:	ee07 3a90 	vmov	s15, r3
 800b132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b136:	ed97 6a03 	vldr	s12, [r7, #12]
 800b13a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b20c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b156:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b158:	4b2a      	ldr	r3, [pc, #168]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b15c:	0a5b      	lsrs	r3, r3, #9
 800b15e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b162:	ee07 3a90 	vmov	s15, r3
 800b166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b16e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b172:	edd7 6a07 	vldr	s13, [r7, #28]
 800b176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b17a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b17e:	ee17 2a90 	vmov	r2, s15
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b186:	4b1f      	ldr	r3, [pc, #124]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b18a:	0c1b      	lsrs	r3, r3, #16
 800b18c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b190:	ee07 3a90 	vmov	s15, r3
 800b194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b19c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ac:	ee17 2a90 	vmov	r2, s15
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b1b4:	4b13      	ldr	r3, [pc, #76]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b8:	0e1b      	lsrs	r3, r3, #24
 800b1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1be:	ee07 3a90 	vmov	s15, r3
 800b1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1da:	ee17 2a90 	vmov	r2, s15
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b1e2:	e008      	b.n	800b1f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	609a      	str	r2, [r3, #8]
}
 800b1f6:	bf00      	nop
 800b1f8:	3724      	adds	r7, #36	@ 0x24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	58024400 	.word	0x58024400
 800b208:	03d09000 	.word	0x03d09000
 800b20c:	46000000 	.word	0x46000000
 800b210:	4c742400 	.word	0x4c742400
 800b214:	4a742400 	.word	0x4a742400
 800b218:	4bbebc20 	.word	0x4bbebc20

0800b21c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b089      	sub	sp, #36	@ 0x24
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b224:	4ba1      	ldr	r3, [pc, #644]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b228:	f003 0303 	and.w	r3, r3, #3
 800b22c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b22e:	4b9f      	ldr	r3, [pc, #636]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b232:	0d1b      	lsrs	r3, r3, #20
 800b234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b238:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b23a:	4b9c      	ldr	r3, [pc, #624]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b23e:	0a1b      	lsrs	r3, r3, #8
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b246:	4b99      	ldr	r3, [pc, #612]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b24a:	08db      	lsrs	r3, r3, #3
 800b24c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	fb02 f303 	mul.w	r3, r2, r3
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 8111 	beq.w	800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	f000 8083 	beq.w	800b378 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	2b02      	cmp	r3, #2
 800b276:	f200 80a1 	bhi.w	800b3bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d056      	beq.n	800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b286:	e099      	b.n	800b3bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b288:	4b88      	ldr	r3, [pc, #544]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0320 	and.w	r3, r3, #32
 800b290:	2b00      	cmp	r3, #0
 800b292:	d02d      	beq.n	800b2f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b294:	4b85      	ldr	r3, [pc, #532]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	08db      	lsrs	r3, r3, #3
 800b29a:	f003 0303 	and.w	r3, r3, #3
 800b29e:	4a84      	ldr	r2, [pc, #528]	@ (800b4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	ee07 3a90 	vmov	s15, r3
 800b2ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2be:	4b7b      	ldr	r3, [pc, #492]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b2ee:	e087      	b.n	800b400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b302:	4b6a      	ldr	r3, [pc, #424]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b312:	ed97 6a03 	vldr	s12, [r7, #12]
 800b316:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b332:	e065      	b.n	800b400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b4bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b346:	4b59      	ldr	r3, [pc, #356]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b356:	ed97 6a03 	vldr	s12, [r7, #12]
 800b35a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b376:	e043      	b.n	800b400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	ee07 3a90 	vmov	s15, r3
 800b37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b382:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b38a:	4b48      	ldr	r3, [pc, #288]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b38c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b39a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b39e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3ba:	e021      	b.n	800b400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b4bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ce:	4b37      	ldr	r3, [pc, #220]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d6:	ee07 3a90 	vmov	s15, r3
 800b3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b400:	4b2a      	ldr	r3, [pc, #168]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b404:	0a5b      	lsrs	r3, r3, #9
 800b406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b40a:	ee07 3a90 	vmov	s15, r3
 800b40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b41a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b41e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b426:	ee17 2a90 	vmov	r2, s15
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b42e:	4b1f      	ldr	r3, [pc, #124]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b432:	0c1b      	lsrs	r3, r3, #16
 800b434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b438:	ee07 3a90 	vmov	s15, r3
 800b43c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b440:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b444:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b448:	edd7 6a07 	vldr	s13, [r7, #28]
 800b44c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b454:	ee17 2a90 	vmov	r2, s15
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b45c:	4b13      	ldr	r3, [pc, #76]	@ (800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b45e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b460:	0e1b      	lsrs	r3, r3, #24
 800b462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b466:	ee07 3a90 	vmov	s15, r3
 800b46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b46e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b472:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b476:	edd7 6a07 	vldr	s13, [r7, #28]
 800b47a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b47e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b482:	ee17 2a90 	vmov	r2, s15
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b48a:	e008      	b.n	800b49e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	609a      	str	r2, [r3, #8]
}
 800b49e:	bf00      	nop
 800b4a0:	3724      	adds	r7, #36	@ 0x24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	58024400 	.word	0x58024400
 800b4b0:	03d09000 	.word	0x03d09000
 800b4b4:	46000000 	.word	0x46000000
 800b4b8:	4c742400 	.word	0x4c742400
 800b4bc:	4a742400 	.word	0x4a742400
 800b4c0:	4bbebc20 	.word	0x4bbebc20

0800b4c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b089      	sub	sp, #36	@ 0x24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4cc:	4ba0      	ldr	r3, [pc, #640]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d0:	f003 0303 	and.w	r3, r3, #3
 800b4d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b4d6:	4b9e      	ldr	r3, [pc, #632]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4da:	091b      	lsrs	r3, r3, #4
 800b4dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b4e2:	4b9b      	ldr	r3, [pc, #620]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b4ec:	4b98      	ldr	r3, [pc, #608]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4f0:	08db      	lsrs	r3, r3, #3
 800b4f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	fb02 f303 	mul.w	r3, r2, r3
 800b4fc:	ee07 3a90 	vmov	s15, r3
 800b500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b504:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 8111 	beq.w	800b732 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	2b02      	cmp	r3, #2
 800b514:	f000 8083 	beq.w	800b61e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	f200 80a1 	bhi.w	800b662 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d003      	beq.n	800b52e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d056      	beq.n	800b5da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b52c:	e099      	b.n	800b662 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b52e:	4b88      	ldr	r3, [pc, #544]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 0320 	and.w	r3, r3, #32
 800b536:	2b00      	cmp	r3, #0
 800b538:	d02d      	beq.n	800b596 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b53a:	4b85      	ldr	r3, [pc, #532]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	08db      	lsrs	r3, r3, #3
 800b540:	f003 0303 	and.w	r3, r3, #3
 800b544:	4a83      	ldr	r2, [pc, #524]	@ (800b754 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b546:	fa22 f303 	lsr.w	r3, r2, r3
 800b54a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	ee07 3a90 	vmov	s15, r3
 800b552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	ee07 3a90 	vmov	s15, r3
 800b55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b564:	4b7a      	ldr	r3, [pc, #488]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56c:	ee07 3a90 	vmov	s15, r3
 800b570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b574:	ed97 6a03 	vldr	s12, [r7, #12]
 800b578:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b758 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b57c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b584:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b590:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b594:	e087      	b.n	800b6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	ee07 3a90 	vmov	s15, r3
 800b59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a8:	4b69      	ldr	r3, [pc, #420]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b0:	ee07 3a90 	vmov	s15, r3
 800b5b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5bc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b758 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5d8:	e065      	b.n	800b6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b760 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b5e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ec:	4b58      	ldr	r3, [pc, #352]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f4:	ee07 3a90 	vmov	s15, r3
 800b5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b600:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b758 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b61c:	e043      	b.n	800b6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	ee07 3a90 	vmov	s15, r3
 800b624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b628:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b62c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b630:	4b47      	ldr	r3, [pc, #284]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b638:	ee07 3a90 	vmov	s15, r3
 800b63c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b640:	ed97 6a03 	vldr	s12, [r7, #12]
 800b644:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b758 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b64c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b650:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b660:	e021      	b.n	800b6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	ee07 3a90 	vmov	s15, r3
 800b668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b75c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b674:	4b36      	ldr	r3, [pc, #216]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b67c:	ee07 3a90 	vmov	s15, r3
 800b680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b684:	ed97 6a03 	vldr	s12, [r7, #12]
 800b688:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b758 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b68c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b69c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b6a6:	4b2a      	ldr	r3, [pc, #168]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6aa:	0a5b      	lsrs	r3, r3, #9
 800b6ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6b0:	ee07 3a90 	vmov	s15, r3
 800b6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6cc:	ee17 2a90 	vmov	r2, s15
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b6d4:	4b1e      	ldr	r3, [pc, #120]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d8:	0c1b      	lsrs	r3, r3, #16
 800b6da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6fa:	ee17 2a90 	vmov	r2, s15
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b702:	4b13      	ldr	r3, [pc, #76]	@ (800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b706:	0e1b      	lsrs	r3, r3, #24
 800b708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b70c:	ee07 3a90 	vmov	s15, r3
 800b710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b714:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b71c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b728:	ee17 2a90 	vmov	r2, s15
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b730:	e008      	b.n	800b744 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	609a      	str	r2, [r3, #8]
}
 800b744:	bf00      	nop
 800b746:	3724      	adds	r7, #36	@ 0x24
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr
 800b750:	58024400 	.word	0x58024400
 800b754:	03d09000 	.word	0x03d09000
 800b758:	46000000 	.word	0x46000000
 800b75c:	4c742400 	.word	0x4c742400
 800b760:	4a742400 	.word	0x4a742400
 800b764:	4bbebc20 	.word	0x4bbebc20

0800b768 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b776:	4b53      	ldr	r3, [pc, #332]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b77a:	f003 0303 	and.w	r3, r3, #3
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d101      	bne.n	800b786 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	e099      	b.n	800b8ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b786:	4b4f      	ldr	r3, [pc, #316]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a4e      	ldr	r2, [pc, #312]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b78c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b792:	f7f6 f9f9 	bl	8001b88 <HAL_GetTick>
 800b796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b798:	e008      	b.n	800b7ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b79a:	f7f6 f9f5 	bl	8001b88 <HAL_GetTick>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d901      	bls.n	800b7ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	e086      	b.n	800b8ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7ac:	4b45      	ldr	r3, [pc, #276]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1f0      	bne.n	800b79a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b7b8:	4b42      	ldr	r3, [pc, #264]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	031b      	lsls	r3, r3, #12
 800b7c6:	493f      	ldr	r1, [pc, #252]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	628b      	str	r3, [r1, #40]	@ 0x28
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	025b      	lsls	r3, r3, #9
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	041b      	lsls	r3, r3, #16
 800b7ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b7ee:	431a      	orrs	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	061b      	lsls	r3, r3, #24
 800b7f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b7fc:	4931      	ldr	r1, [pc, #196]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b7fe:	4313      	orrs	r3, r2
 800b800:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b802:	4b30      	ldr	r3, [pc, #192]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b806:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	492d      	ldr	r1, [pc, #180]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b810:	4313      	orrs	r3, r2
 800b812:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b814:	4b2b      	ldr	r3, [pc, #172]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b818:	f023 0220 	bic.w	r2, r3, #32
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	699b      	ldr	r3, [r3, #24]
 800b820:	4928      	ldr	r1, [pc, #160]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b822:	4313      	orrs	r3, r2
 800b824:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b826:	4b27      	ldr	r3, [pc, #156]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b82a:	4a26      	ldr	r2, [pc, #152]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b82c:	f023 0310 	bic.w	r3, r3, #16
 800b830:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b832:	4b24      	ldr	r3, [pc, #144]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b836:	4b24      	ldr	r3, [pc, #144]	@ (800b8c8 <RCCEx_PLL2_Config+0x160>)
 800b838:	4013      	ands	r3, r2
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	69d2      	ldr	r2, [r2, #28]
 800b83e:	00d2      	lsls	r2, r2, #3
 800b840:	4920      	ldr	r1, [pc, #128]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b842:	4313      	orrs	r3, r2
 800b844:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b846:	4b1f      	ldr	r3, [pc, #124]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84a:	4a1e      	ldr	r2, [pc, #120]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b84c:	f043 0310 	orr.w	r3, r3, #16
 800b850:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d106      	bne.n	800b866 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b858:	4b1a      	ldr	r3, [pc, #104]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85c:	4a19      	ldr	r2, [pc, #100]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b85e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b862:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b864:	e00f      	b.n	800b886 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d106      	bne.n	800b87a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b86c:	4b15      	ldr	r3, [pc, #84]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b870:	4a14      	ldr	r2, [pc, #80]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b876:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b878:	e005      	b.n	800b886 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b87a:	4b12      	ldr	r3, [pc, #72]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87e:	4a11      	ldr	r2, [pc, #68]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b884:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b886:	4b0f      	ldr	r3, [pc, #60]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a0e      	ldr	r2, [pc, #56]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b88c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b892:	f7f6 f979 	bl	8001b88 <HAL_GetTick>
 800b896:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b898:	e008      	b.n	800b8ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b89a:	f7f6 f975 	bl	8001b88 <HAL_GetTick>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d901      	bls.n	800b8ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	e006      	b.n	800b8ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8ac:	4b05      	ldr	r3, [pc, #20]	@ (800b8c4 <RCCEx_PLL2_Config+0x15c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d0f0      	beq.n	800b89a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	58024400 	.word	0x58024400
 800b8c8:	ffff0007 	.word	0xffff0007

0800b8cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8da:	4b53      	ldr	r3, [pc, #332]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b8dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8de:	f003 0303 	and.w	r3, r3, #3
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d101      	bne.n	800b8ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e099      	b.n	800ba1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8ea:	4b4f      	ldr	r3, [pc, #316]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a4e      	ldr	r2, [pc, #312]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b8f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8f6:	f7f6 f947 	bl	8001b88 <HAL_GetTick>
 800b8fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8fc:	e008      	b.n	800b910 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b8fe:	f7f6 f943 	bl	8001b88 <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d901      	bls.n	800b910 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e086      	b.n	800ba1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b910:	4b45      	ldr	r3, [pc, #276]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1f0      	bne.n	800b8fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b91c:	4b42      	ldr	r3, [pc, #264]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b920:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	051b      	lsls	r3, r3, #20
 800b92a:	493f      	ldr	r1, [pc, #252]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b92c:	4313      	orrs	r3, r2
 800b92e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	3b01      	subs	r3, #1
 800b936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	3b01      	subs	r3, #1
 800b940:	025b      	lsls	r3, r3, #9
 800b942:	b29b      	uxth	r3, r3
 800b944:	431a      	orrs	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	041b      	lsls	r3, r3, #16
 800b94e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b952:	431a      	orrs	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	3b01      	subs	r3, #1
 800b95a:	061b      	lsls	r3, r3, #24
 800b95c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b960:	4931      	ldr	r1, [pc, #196]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b962:	4313      	orrs	r3, r2
 800b964:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b966:	4b30      	ldr	r3, [pc, #192]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b96a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	492d      	ldr	r1, [pc, #180]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b974:	4313      	orrs	r3, r2
 800b976:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b978:	4b2b      	ldr	r3, [pc, #172]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	4928      	ldr	r1, [pc, #160]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b986:	4313      	orrs	r3, r2
 800b988:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b98a:	4b27      	ldr	r3, [pc, #156]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b98e:	4a26      	ldr	r2, [pc, #152]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b994:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b996:	4b24      	ldr	r3, [pc, #144]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b99a:	4b24      	ldr	r3, [pc, #144]	@ (800ba2c <RCCEx_PLL3_Config+0x160>)
 800b99c:	4013      	ands	r3, r2
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	69d2      	ldr	r2, [r2, #28]
 800b9a2:	00d2      	lsls	r2, r2, #3
 800b9a4:	4920      	ldr	r1, [pc, #128]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b9aa:	4b1f      	ldr	r3, [pc, #124]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ae:	4a1e      	ldr	r2, [pc, #120]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d106      	bne.n	800b9ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b9bc:	4b1a      	ldr	r3, [pc, #104]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c0:	4a19      	ldr	r2, [pc, #100]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b9c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9c8:	e00f      	b.n	800b9ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d106      	bne.n	800b9de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b9d0:	4b15      	ldr	r3, [pc, #84]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d4:	4a14      	ldr	r2, [pc, #80]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b9da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9dc:	e005      	b.n	800b9ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b9de:	4b12      	ldr	r3, [pc, #72]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e2:	4a11      	ldr	r2, [pc, #68]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b9e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9ea:	4b0f      	ldr	r3, [pc, #60]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a0e      	ldr	r2, [pc, #56]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800b9f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b9f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9f6:	f7f6 f8c7 	bl	8001b88 <HAL_GetTick>
 800b9fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9fc:	e008      	b.n	800ba10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b9fe:	f7f6 f8c3 	bl	8001b88 <HAL_GetTick>
 800ba02:	4602      	mov	r2, r0
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d901      	bls.n	800ba10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e006      	b.n	800ba1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba10:	4b05      	ldr	r3, [pc, #20]	@ (800ba28 <RCCEx_PLL3_Config+0x15c>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d0f0      	beq.n	800b9fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	58024400 	.word	0x58024400
 800ba2c:	ffff0007 	.word	0xffff0007

0800ba30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e10f      	b.n	800bc62 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a87      	ldr	r2, [pc, #540]	@ (800bc6c <HAL_SPI_Init+0x23c>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d00f      	beq.n	800ba72 <HAL_SPI_Init+0x42>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a86      	ldr	r2, [pc, #536]	@ (800bc70 <HAL_SPI_Init+0x240>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d00a      	beq.n	800ba72 <HAL_SPI_Init+0x42>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a84      	ldr	r2, [pc, #528]	@ (800bc74 <HAL_SPI_Init+0x244>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d005      	beq.n	800ba72 <HAL_SPI_Init+0x42>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	2b0f      	cmp	r3, #15
 800ba6c:	d901      	bls.n	800ba72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e0f7      	b.n	800bc62 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fbca 	bl	800c20c <SPI_GetPacketSize>
 800ba78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a7b      	ldr	r2, [pc, #492]	@ (800bc6c <HAL_SPI_Init+0x23c>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d00c      	beq.n	800ba9e <HAL_SPI_Init+0x6e>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a79      	ldr	r2, [pc, #484]	@ (800bc70 <HAL_SPI_Init+0x240>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d007      	beq.n	800ba9e <HAL_SPI_Init+0x6e>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a78      	ldr	r2, [pc, #480]	@ (800bc74 <HAL_SPI_Init+0x244>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d002      	beq.n	800ba9e <HAL_SPI_Init+0x6e>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b08      	cmp	r3, #8
 800ba9c:	d811      	bhi.n	800bac2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800baa2:	4a72      	ldr	r2, [pc, #456]	@ (800bc6c <HAL_SPI_Init+0x23c>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d009      	beq.n	800babc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a70      	ldr	r2, [pc, #448]	@ (800bc70 <HAL_SPI_Init+0x240>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d004      	beq.n	800babc <HAL_SPI_Init+0x8c>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a6f      	ldr	r2, [pc, #444]	@ (800bc74 <HAL_SPI_Init+0x244>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d104      	bne.n	800bac6 <HAL_SPI_Init+0x96>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2b10      	cmp	r3, #16
 800bac0:	d901      	bls.n	800bac6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e0cd      	b.n	800bc62 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d106      	bne.n	800bae0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7f5 fb96 	bl	800120c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2202      	movs	r2, #2
 800bae4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f022 0201 	bic.w	r2, r2, #1
 800baf6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bb02:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	699b      	ldr	r3, [r3, #24]
 800bb08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb0c:	d119      	bne.n	800bb42 <HAL_SPI_Init+0x112>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb16:	d103      	bne.n	800bb20 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d008      	beq.n	800bb32 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10c      	bne.n	800bb42 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb30:	d107      	bne.n	800bb42 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bb40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00f      	beq.n	800bb6e <HAL_SPI_Init+0x13e>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	2b06      	cmp	r3, #6
 800bb54:	d90b      	bls.n	800bb6e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	430a      	orrs	r2, r1
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	e007      	b.n	800bb7e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	69da      	ldr	r2, [r3, #28]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb86:	431a      	orrs	r2, r3
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb90:	ea42 0103 	orr.w	r1, r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	68da      	ldr	r2, [r3, #12]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	430a      	orrs	r2, r1
 800bb9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bba8:	431a      	orrs	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbae:	431a      	orrs	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	431a      	orrs	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	695b      	ldr	r3, [r3, #20]
 800bbc0:	431a      	orrs	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	431a      	orrs	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	431a      	orrs	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	431a      	orrs	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbde:	ea42 0103 	orr.w	r1, r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	430a      	orrs	r2, r1
 800bbec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d113      	bne.n	800bc1e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bc1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f022 0201 	bic.w	r2, r2, #1
 800bc2c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00a      	beq.n	800bc50 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	430a      	orrs	r2, r1
 800bc4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	40013000 	.word	0x40013000
 800bc70:	40003800 	.word	0x40003800
 800bc74:	40003c00 	.word	0x40003c00

0800bc78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b08a      	sub	sp, #40	@ 0x28
 800bc7c:	af02      	add	r7, sp, #8
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	603b      	str	r3, [r7, #0]
 800bc84:	4613      	mov	r3, r2
 800bc86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3320      	adds	r3, #32
 800bc8e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d101      	bne.n	800bca2 <HAL_SPI_Transmit+0x2a>
 800bc9e:	2302      	movs	r3, #2
 800bca0:	e1e1      	b.n	800c066 <HAL_SPI_Transmit+0x3ee>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcaa:	f7f5 ff6d 	bl	8001b88 <HAL_GetTick>
 800bcae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d007      	beq.n	800bccc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800bcc8:	7efb      	ldrb	r3, [r7, #27]
 800bcca:	e1cc      	b.n	800c066 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d002      	beq.n	800bcd8 <HAL_SPI_Transmit+0x60>
 800bcd2:	88fb      	ldrh	r3, [r7, #6]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d107      	bne.n	800bce8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800bce4:	7efb      	ldrb	r3, [r7, #27]
 800bce6:	e1be      	b.n	800c066 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2203      	movs	r2, #3
 800bcec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	88fa      	ldrh	r2, [r7, #6]
 800bd02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	88fa      	ldrh	r2, [r7, #6]
 800bd0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bd38:	d108      	bne.n	800bd4c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	e009      	b.n	800bd60 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bd5e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	685a      	ldr	r2, [r3, #4]
 800bd66:	4b96      	ldr	r3, [pc, #600]	@ (800bfc0 <HAL_SPI_Transmit+0x348>)
 800bd68:	4013      	ands	r3, r2
 800bd6a:	88f9      	ldrh	r1, [r7, #6]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	6812      	ldr	r2, [r2, #0]
 800bd70:	430b      	orrs	r3, r1
 800bd72:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f042 0201 	orr.w	r2, r2, #1
 800bd82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd8c:	d107      	bne.n	800bd9e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	2b0f      	cmp	r3, #15
 800bda4:	d947      	bls.n	800be36 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bda6:	e03f      	b.n	800be28 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	f003 0302 	and.w	r3, r3, #2
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d114      	bne.n	800bde0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6812      	ldr	r2, [r2, #0]
 800bdc0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdc6:	1d1a      	adds	r2, r3, #4
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bdde:	e023      	b.n	800be28 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bde0:	f7f5 fed2 	bl	8001b88 <HAL_GetTick>
 800bde4:	4602      	mov	r2, r0
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	683a      	ldr	r2, [r7, #0]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d803      	bhi.n	800bdf8 <HAL_SPI_Transmit+0x180>
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf6:	d102      	bne.n	800bdfe <HAL_SPI_Transmit+0x186>
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d114      	bne.n	800be28 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f000 f936 	bl	800c070 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	e11e      	b.n	800c066 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be2e:	b29b      	uxth	r3, r3
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1b9      	bne.n	800bda8 <HAL_SPI_Transmit+0x130>
 800be34:	e0f1      	b.n	800c01a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	2b07      	cmp	r3, #7
 800be3c:	f240 80e6 	bls.w	800c00c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800be40:	e05d      	b.n	800befe <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	f003 0302 	and.w	r3, r3, #2
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d132      	bne.n	800beb6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be56:	b29b      	uxth	r3, r3
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d918      	bls.n	800be8e <HAL_SPI_Transmit+0x216>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d014      	beq.n	800be8e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6812      	ldr	r2, [r2, #0]
 800be6e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be74:	1d1a      	adds	r2, r3, #4
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be80:	b29b      	uxth	r3, r3
 800be82:	3b02      	subs	r3, #2
 800be84:	b29a      	uxth	r2, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800be8c:	e037      	b.n	800befe <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be92:	881a      	ldrh	r2, [r3, #0]
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be9c:	1c9a      	adds	r2, r3, #2
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	3b01      	subs	r3, #1
 800beac:	b29a      	uxth	r2, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800beb4:	e023      	b.n	800befe <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800beb6:	f7f5 fe67 	bl	8001b88 <HAL_GetTick>
 800beba:	4602      	mov	r2, r0
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d803      	bhi.n	800bece <HAL_SPI_Transmit+0x256>
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800becc:	d102      	bne.n	800bed4 <HAL_SPI_Transmit+0x25c>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d114      	bne.n	800befe <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 f8cb 	bl	800c070 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bee8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800befa:	2303      	movs	r3, #3
 800befc:	e0b3      	b.n	800c066 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d19b      	bne.n	800be42 <HAL_SPI_Transmit+0x1ca>
 800bf0a:	e086      	b.n	800c01a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	f003 0302 	and.w	r3, r3, #2
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d154      	bne.n	800bfc4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d918      	bls.n	800bf58 <HAL_SPI_Transmit+0x2e0>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf2a:	2b40      	cmp	r3, #64	@ 0x40
 800bf2c:	d914      	bls.n	800bf58 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6812      	ldr	r2, [r2, #0]
 800bf38:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf3e:	1d1a      	adds	r2, r3, #4
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	3b04      	subs	r3, #4
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bf56:	e059      	b.n	800c00c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d917      	bls.n	800bf94 <HAL_SPI_Transmit+0x31c>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d013      	beq.n	800bf94 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf70:	881a      	ldrh	r2, [r3, #0]
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf7a:	1c9a      	adds	r2, r3, #2
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	3b02      	subs	r3, #2
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bf92:	e03b      	b.n	800c00c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3320      	adds	r3, #32
 800bf9e:	7812      	ldrb	r2, [r2, #0]
 800bfa0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bfbe:	e025      	b.n	800c00c <HAL_SPI_Transmit+0x394>
 800bfc0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfc4:	f7f5 fde0 	bl	8001b88 <HAL_GetTick>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d803      	bhi.n	800bfdc <HAL_SPI_Transmit+0x364>
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfda:	d102      	bne.n	800bfe2 <HAL_SPI_Transmit+0x36a>
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d114      	bne.n	800c00c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f000 f844 	bl	800c070 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bff6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c008:	2303      	movs	r3, #3
 800c00a:	e02c      	b.n	800c066 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c012:	b29b      	uxth	r3, r3
 800c014:	2b00      	cmp	r3, #0
 800c016:	f47f af79 	bne.w	800bf0c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2200      	movs	r2, #0
 800c022:	2108      	movs	r1, #8
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 f8c3 	bl	800c1b0 <SPI_WaitOnFlagUntilTimeout>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d007      	beq.n	800c040 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c036:	f043 0220 	orr.w	r2, r3, #32
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f000 f815 	bl	800c070 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2201      	movs	r2, #1
 800c052:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e000      	b.n	800c066 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800c064:	7efb      	ldrb	r3, [r7, #27]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3720      	adds	r7, #32
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop

0800c070 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	699a      	ldr	r2, [r3, #24]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f042 0208 	orr.w	r2, r2, #8
 800c08e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	699a      	ldr	r2, [r3, #24]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f042 0210 	orr.w	r2, r2, #16
 800c09e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f022 0201 	bic.w	r2, r2, #1
 800c0ae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6919      	ldr	r1, [r3, #16]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	4b3c      	ldr	r3, [pc, #240]	@ (800c1ac <SPI_CloseTransfer+0x13c>)
 800c0bc:	400b      	ands	r3, r1
 800c0be:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689a      	ldr	r2, [r3, #8]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c0ce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d014      	beq.n	800c106 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f003 0320 	and.w	r3, r3, #32
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00f      	beq.n	800c106 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	699a      	ldr	r2, [r3, #24]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f042 0220 	orr.w	r2, r2, #32
 800c104:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	2b03      	cmp	r3, #3
 800c110:	d014      	beq.n	800c13c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00f      	beq.n	800c13c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c122:	f043 0204 	orr.w	r2, r3, #4
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	699a      	ldr	r2, [r3, #24]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c13a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00f      	beq.n	800c166 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c14c:	f043 0201 	orr.w	r2, r3, #1
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	699a      	ldr	r2, [r3, #24]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c164:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00f      	beq.n	800c190 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c176:	f043 0208 	orr.w	r2, r3, #8
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	699a      	ldr	r2, [r3, #24]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c18e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c1a0:	bf00      	nop
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	fffffc90 	.word	0xfffffc90

0800c1b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	603b      	str	r3, [r7, #0]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c1c0:	e010      	b.n	800c1e4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1c2:	f7f5 fce1 	bl	8001b88 <HAL_GetTick>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	683a      	ldr	r2, [r7, #0]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d803      	bhi.n	800c1da <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d8:	d102      	bne.n	800c1e0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	e00f      	b.n	800c204 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	695a      	ldr	r2, [r3, #20]
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	bf0c      	ite	eq
 800c1f4:	2301      	moveq	r3, #1
 800c1f6:	2300      	movne	r3, #0
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d0df      	beq.n	800c1c2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c218:	095b      	lsrs	r3, r3, #5
 800c21a:	3301      	adds	r3, #1
 800c21c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	3301      	adds	r3, #1
 800c224:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	3307      	adds	r3, #7
 800c22a:	08db      	lsrs	r3, r3, #3
 800c22c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	fb02 f303 	mul.w	r3, r2, r3
}
 800c236:	4618      	mov	r0, r3
 800c238:	3714      	adds	r7, #20
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b082      	sub	sp, #8
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d101      	bne.n	800c254 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	e049      	b.n	800c2e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d106      	bne.n	800c26e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7f5 fb9b 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2202      	movs	r2, #2
 800c272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	3304      	adds	r3, #4
 800c27e:	4619      	mov	r1, r3
 800c280:	4610      	mov	r0, r2
 800c282:	f000 fd71 	bl	800cd68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b01      	cmp	r3, #1
 800c302:	d001      	beq.n	800c308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	e054      	b.n	800c3b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2202      	movs	r2, #2
 800c30c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68da      	ldr	r2, [r3, #12]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f042 0201 	orr.w	r2, r2, #1
 800c31e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a26      	ldr	r2, [pc, #152]	@ (800c3c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d022      	beq.n	800c370 <HAL_TIM_Base_Start_IT+0x80>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c332:	d01d      	beq.n	800c370 <HAL_TIM_Base_Start_IT+0x80>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a22      	ldr	r2, [pc, #136]	@ (800c3c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d018      	beq.n	800c370 <HAL_TIM_Base_Start_IT+0x80>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a21      	ldr	r2, [pc, #132]	@ (800c3c8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d013      	beq.n	800c370 <HAL_TIM_Base_Start_IT+0x80>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a1f      	ldr	r2, [pc, #124]	@ (800c3cc <HAL_TIM_Base_Start_IT+0xdc>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d00e      	beq.n	800c370 <HAL_TIM_Base_Start_IT+0x80>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a1e      	ldr	r2, [pc, #120]	@ (800c3d0 <HAL_TIM_Base_Start_IT+0xe0>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d009      	beq.n	800c370 <HAL_TIM_Base_Start_IT+0x80>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a1c      	ldr	r2, [pc, #112]	@ (800c3d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d004      	beq.n	800c370 <HAL_TIM_Base_Start_IT+0x80>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d115      	bne.n	800c39c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	689a      	ldr	r2, [r3, #8]
 800c376:	4b19      	ldr	r3, [pc, #100]	@ (800c3dc <HAL_TIM_Base_Start_IT+0xec>)
 800c378:	4013      	ands	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2b06      	cmp	r3, #6
 800c380:	d015      	beq.n	800c3ae <HAL_TIM_Base_Start_IT+0xbe>
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c388:	d011      	beq.n	800c3ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f042 0201 	orr.w	r2, r2, #1
 800c398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c39a:	e008      	b.n	800c3ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f042 0201 	orr.w	r2, r2, #1
 800c3aa:	601a      	str	r2, [r3, #0]
 800c3ac:	e000      	b.n	800c3b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3714      	adds	r7, #20
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	40010000 	.word	0x40010000
 800c3c4:	40000400 	.word	0x40000400
 800c3c8:	40000800 	.word	0x40000800
 800c3cc:	40000c00 	.word	0x40000c00
 800c3d0:	40010400 	.word	0x40010400
 800c3d4:	40001800 	.word	0x40001800
 800c3d8:	40014000 	.word	0x40014000
 800c3dc:	00010007 	.word	0x00010007

0800c3e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d101      	bne.n	800c3f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e049      	b.n	800c486 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d106      	bne.n	800c40c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f841 	bl	800c48e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2202      	movs	r2, #2
 800c410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	3304      	adds	r3, #4
 800c41c:	4619      	mov	r1, r3
 800c41e:	4610      	mov	r0, r2
 800c420:	f000 fca2 	bl	800cd68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c48e:	b480      	push	{r7}
 800c490:	b083      	sub	sp, #12
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
	...

0800c4a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d109      	bne.n	800c4c8 <HAL_TIM_PWM_Start+0x24>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	bf14      	ite	ne
 800c4c0:	2301      	movne	r3, #1
 800c4c2:	2300      	moveq	r3, #0
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	e03c      	b.n	800c542 <HAL_TIM_PWM_Start+0x9e>
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b04      	cmp	r3, #4
 800c4cc:	d109      	bne.n	800c4e2 <HAL_TIM_PWM_Start+0x3e>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	bf14      	ite	ne
 800c4da:	2301      	movne	r3, #1
 800c4dc:	2300      	moveq	r3, #0
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	e02f      	b.n	800c542 <HAL_TIM_PWM_Start+0x9e>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b08      	cmp	r3, #8
 800c4e6:	d109      	bne.n	800c4fc <HAL_TIM_PWM_Start+0x58>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	bf14      	ite	ne
 800c4f4:	2301      	movne	r3, #1
 800c4f6:	2300      	moveq	r3, #0
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	e022      	b.n	800c542 <HAL_TIM_PWM_Start+0x9e>
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2b0c      	cmp	r3, #12
 800c500:	d109      	bne.n	800c516 <HAL_TIM_PWM_Start+0x72>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	bf14      	ite	ne
 800c50e:	2301      	movne	r3, #1
 800c510:	2300      	moveq	r3, #0
 800c512:	b2db      	uxtb	r3, r3
 800c514:	e015      	b.n	800c542 <HAL_TIM_PWM_Start+0x9e>
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	2b10      	cmp	r3, #16
 800c51a:	d109      	bne.n	800c530 <HAL_TIM_PWM_Start+0x8c>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c522:	b2db      	uxtb	r3, r3
 800c524:	2b01      	cmp	r3, #1
 800c526:	bf14      	ite	ne
 800c528:	2301      	movne	r3, #1
 800c52a:	2300      	moveq	r3, #0
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	e008      	b.n	800c542 <HAL_TIM_PWM_Start+0x9e>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b01      	cmp	r3, #1
 800c53a:	bf14      	ite	ne
 800c53c:	2301      	movne	r3, #1
 800c53e:	2300      	moveq	r3, #0
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	e0a1      	b.n	800c68e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d104      	bne.n	800c55a <HAL_TIM_PWM_Start+0xb6>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2202      	movs	r2, #2
 800c554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c558:	e023      	b.n	800c5a2 <HAL_TIM_PWM_Start+0xfe>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	2b04      	cmp	r3, #4
 800c55e:	d104      	bne.n	800c56a <HAL_TIM_PWM_Start+0xc6>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2202      	movs	r2, #2
 800c564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c568:	e01b      	b.n	800c5a2 <HAL_TIM_PWM_Start+0xfe>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b08      	cmp	r3, #8
 800c56e:	d104      	bne.n	800c57a <HAL_TIM_PWM_Start+0xd6>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2202      	movs	r2, #2
 800c574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c578:	e013      	b.n	800c5a2 <HAL_TIM_PWM_Start+0xfe>
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2b0c      	cmp	r3, #12
 800c57e:	d104      	bne.n	800c58a <HAL_TIM_PWM_Start+0xe6>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2202      	movs	r2, #2
 800c584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c588:	e00b      	b.n	800c5a2 <HAL_TIM_PWM_Start+0xfe>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b10      	cmp	r3, #16
 800c58e:	d104      	bne.n	800c59a <HAL_TIM_PWM_Start+0xf6>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2202      	movs	r2, #2
 800c594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c598:	e003      	b.n	800c5a2 <HAL_TIM_PWM_Start+0xfe>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2202      	movs	r2, #2
 800c59e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 ffea 	bl	800d584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a38      	ldr	r2, [pc, #224]	@ (800c698 <HAL_TIM_PWM_Start+0x1f4>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d013      	beq.n	800c5e2 <HAL_TIM_PWM_Start+0x13e>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a37      	ldr	r2, [pc, #220]	@ (800c69c <HAL_TIM_PWM_Start+0x1f8>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d00e      	beq.n	800c5e2 <HAL_TIM_PWM_Start+0x13e>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a35      	ldr	r2, [pc, #212]	@ (800c6a0 <HAL_TIM_PWM_Start+0x1fc>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d009      	beq.n	800c5e2 <HAL_TIM_PWM_Start+0x13e>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a34      	ldr	r2, [pc, #208]	@ (800c6a4 <HAL_TIM_PWM_Start+0x200>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d004      	beq.n	800c5e2 <HAL_TIM_PWM_Start+0x13e>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a32      	ldr	r2, [pc, #200]	@ (800c6a8 <HAL_TIM_PWM_Start+0x204>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d101      	bne.n	800c5e6 <HAL_TIM_PWM_Start+0x142>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e000      	b.n	800c5e8 <HAL_TIM_PWM_Start+0x144>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d007      	beq.n	800c5fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c5fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a25      	ldr	r2, [pc, #148]	@ (800c698 <HAL_TIM_PWM_Start+0x1f4>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d022      	beq.n	800c64c <HAL_TIM_PWM_Start+0x1a8>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c60e:	d01d      	beq.n	800c64c <HAL_TIM_PWM_Start+0x1a8>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a25      	ldr	r2, [pc, #148]	@ (800c6ac <HAL_TIM_PWM_Start+0x208>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d018      	beq.n	800c64c <HAL_TIM_PWM_Start+0x1a8>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a24      	ldr	r2, [pc, #144]	@ (800c6b0 <HAL_TIM_PWM_Start+0x20c>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d013      	beq.n	800c64c <HAL_TIM_PWM_Start+0x1a8>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a22      	ldr	r2, [pc, #136]	@ (800c6b4 <HAL_TIM_PWM_Start+0x210>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d00e      	beq.n	800c64c <HAL_TIM_PWM_Start+0x1a8>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a1a      	ldr	r2, [pc, #104]	@ (800c69c <HAL_TIM_PWM_Start+0x1f8>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d009      	beq.n	800c64c <HAL_TIM_PWM_Start+0x1a8>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a1e      	ldr	r2, [pc, #120]	@ (800c6b8 <HAL_TIM_PWM_Start+0x214>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d004      	beq.n	800c64c <HAL_TIM_PWM_Start+0x1a8>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a16      	ldr	r2, [pc, #88]	@ (800c6a0 <HAL_TIM_PWM_Start+0x1fc>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d115      	bne.n	800c678 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	689a      	ldr	r2, [r3, #8]
 800c652:	4b1a      	ldr	r3, [pc, #104]	@ (800c6bc <HAL_TIM_PWM_Start+0x218>)
 800c654:	4013      	ands	r3, r2
 800c656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b06      	cmp	r3, #6
 800c65c:	d015      	beq.n	800c68a <HAL_TIM_PWM_Start+0x1e6>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c664:	d011      	beq.n	800c68a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f042 0201 	orr.w	r2, r2, #1
 800c674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c676:	e008      	b.n	800c68a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f042 0201 	orr.w	r2, r2, #1
 800c686:	601a      	str	r2, [r3, #0]
 800c688:	e000      	b.n	800c68c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c68a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	40010000 	.word	0x40010000
 800c69c:	40010400 	.word	0x40010400
 800c6a0:	40014000 	.word	0x40014000
 800c6a4:	40014400 	.word	0x40014400
 800c6a8:	40014800 	.word	0x40014800
 800c6ac:	40000400 	.word	0x40000400
 800c6b0:	40000800 	.word	0x40000800
 800c6b4:	40000c00 	.word	0x40000c00
 800c6b8:	40001800 	.word	0x40001800
 800c6bc:	00010007 	.word	0x00010007

0800c6c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	f003 0302 	and.w	r3, r3, #2
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	d122      	bne.n	800c71c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	f003 0302 	and.w	r3, r3, #2
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	d11b      	bne.n	800c71c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f06f 0202 	mvn.w	r2, #2
 800c6ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	f003 0303 	and.w	r3, r3, #3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fb12 	bl	800cd2c <HAL_TIM_IC_CaptureCallback>
 800c708:	e005      	b.n	800c716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 fb04 	bl	800cd18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fb15 	bl	800cd40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	f003 0304 	and.w	r3, r3, #4
 800c726:	2b04      	cmp	r3, #4
 800c728:	d122      	bne.n	800c770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f003 0304 	and.w	r3, r3, #4
 800c734:	2b04      	cmp	r3, #4
 800c736:	d11b      	bne.n	800c770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f06f 0204 	mvn.w	r2, #4
 800c740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2202      	movs	r2, #2
 800c746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c752:	2b00      	cmp	r3, #0
 800c754:	d003      	beq.n	800c75e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fae8 	bl	800cd2c <HAL_TIM_IC_CaptureCallback>
 800c75c:	e005      	b.n	800c76a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 fada 	bl	800cd18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 faeb 	bl	800cd40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	f003 0308 	and.w	r3, r3, #8
 800c77a:	2b08      	cmp	r3, #8
 800c77c:	d122      	bne.n	800c7c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	f003 0308 	and.w	r3, r3, #8
 800c788:	2b08      	cmp	r3, #8
 800c78a:	d11b      	bne.n	800c7c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f06f 0208 	mvn.w	r2, #8
 800c794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2204      	movs	r2, #4
 800c79a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	69db      	ldr	r3, [r3, #28]
 800c7a2:	f003 0303 	and.w	r3, r3, #3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d003      	beq.n	800c7b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fabe 	bl	800cd2c <HAL_TIM_IC_CaptureCallback>
 800c7b0:	e005      	b.n	800c7be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fab0 	bl	800cd18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fac1 	bl	800cd40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	f003 0310 	and.w	r3, r3, #16
 800c7ce:	2b10      	cmp	r3, #16
 800c7d0:	d122      	bne.n	800c818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	f003 0310 	and.w	r3, r3, #16
 800c7dc:	2b10      	cmp	r3, #16
 800c7de:	d11b      	bne.n	800c818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f06f 0210 	mvn.w	r2, #16
 800c7e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2208      	movs	r2, #8
 800c7ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	69db      	ldr	r3, [r3, #28]
 800c7f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d003      	beq.n	800c806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fa94 	bl	800cd2c <HAL_TIM_IC_CaptureCallback>
 800c804:	e005      	b.n	800c812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 fa86 	bl	800cd18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fa97 	bl	800cd40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	2b01      	cmp	r3, #1
 800c824:	d10e      	bne.n	800c844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	f003 0301 	and.w	r3, r3, #1
 800c830:	2b01      	cmp	r3, #1
 800c832:	d107      	bne.n	800c844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f06f 0201 	mvn.w	r2, #1
 800c83c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7f4 fb8a 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c84e:	2b80      	cmp	r3, #128	@ 0x80
 800c850:	d10e      	bne.n	800c870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c85c:	2b80      	cmp	r3, #128	@ 0x80
 800c85e:	d107      	bne.n	800c870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 ffc6 	bl	800d7fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c87a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c87e:	d10e      	bne.n	800c89e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c88a:	2b80      	cmp	r3, #128	@ 0x80
 800c88c:	d107      	bne.n	800c89e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 ffb9 	bl	800d810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	691b      	ldr	r3, [r3, #16]
 800c8a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a8:	2b40      	cmp	r3, #64	@ 0x40
 800c8aa:	d10e      	bne.n	800c8ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8b6:	2b40      	cmp	r3, #64	@ 0x40
 800c8b8:	d107      	bne.n	800c8ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c8c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fa45 	bl	800cd54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	2b20      	cmp	r3, #32
 800c8d6:	d10e      	bne.n	800c8f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	f003 0320 	and.w	r3, r3, #32
 800c8e2:	2b20      	cmp	r3, #32
 800c8e4:	d107      	bne.n	800c8f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f06f 0220 	mvn.w	r2, #32
 800c8ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 ff79 	bl	800d7e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8f6:	bf00      	nop
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
	...

0800c900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c916:	2b01      	cmp	r3, #1
 800c918:	d101      	bne.n	800c91e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c91a:	2302      	movs	r3, #2
 800c91c:	e0ff      	b.n	800cb1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b14      	cmp	r3, #20
 800c92a:	f200 80f0 	bhi.w	800cb0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c92e:	a201      	add	r2, pc, #4	@ (adr r2, 800c934 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c934:	0800c989 	.word	0x0800c989
 800c938:	0800cb0f 	.word	0x0800cb0f
 800c93c:	0800cb0f 	.word	0x0800cb0f
 800c940:	0800cb0f 	.word	0x0800cb0f
 800c944:	0800c9c9 	.word	0x0800c9c9
 800c948:	0800cb0f 	.word	0x0800cb0f
 800c94c:	0800cb0f 	.word	0x0800cb0f
 800c950:	0800cb0f 	.word	0x0800cb0f
 800c954:	0800ca0b 	.word	0x0800ca0b
 800c958:	0800cb0f 	.word	0x0800cb0f
 800c95c:	0800cb0f 	.word	0x0800cb0f
 800c960:	0800cb0f 	.word	0x0800cb0f
 800c964:	0800ca4b 	.word	0x0800ca4b
 800c968:	0800cb0f 	.word	0x0800cb0f
 800c96c:	0800cb0f 	.word	0x0800cb0f
 800c970:	0800cb0f 	.word	0x0800cb0f
 800c974:	0800ca8d 	.word	0x0800ca8d
 800c978:	0800cb0f 	.word	0x0800cb0f
 800c97c:	0800cb0f 	.word	0x0800cb0f
 800c980:	0800cb0f 	.word	0x0800cb0f
 800c984:	0800cacd 	.word	0x0800cacd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68b9      	ldr	r1, [r7, #8]
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 fa84 	bl	800ce9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	699a      	ldr	r2, [r3, #24]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f042 0208 	orr.w	r2, r2, #8
 800c9a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	699a      	ldr	r2, [r3, #24]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f022 0204 	bic.w	r2, r2, #4
 800c9b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6999      	ldr	r1, [r3, #24]
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	691a      	ldr	r2, [r3, #16]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	430a      	orrs	r2, r1
 800c9c4:	619a      	str	r2, [r3, #24]
      break;
 800c9c6:	e0a5      	b.n	800cb14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	68b9      	ldr	r1, [r7, #8]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 faf4 	bl	800cfbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	699a      	ldr	r2, [r3, #24]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	699a      	ldr	r2, [r3, #24]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c9f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	6999      	ldr	r1, [r3, #24]
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	021a      	lsls	r2, r3, #8
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	430a      	orrs	r2, r1
 800ca06:	619a      	str	r2, [r3, #24]
      break;
 800ca08:	e084      	b.n	800cb14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68b9      	ldr	r1, [r7, #8]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 fb5d 	bl	800d0d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	69da      	ldr	r2, [r3, #28]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f042 0208 	orr.w	r2, r2, #8
 800ca24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	69da      	ldr	r2, [r3, #28]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f022 0204 	bic.w	r2, r2, #4
 800ca34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	69d9      	ldr	r1, [r3, #28]
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	691a      	ldr	r2, [r3, #16]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	430a      	orrs	r2, r1
 800ca46:	61da      	str	r2, [r3, #28]
      break;
 800ca48:	e064      	b.n	800cb14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68b9      	ldr	r1, [r7, #8]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 fbc5 	bl	800d1e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	69da      	ldr	r2, [r3, #28]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	69da      	ldr	r2, [r3, #28]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	69d9      	ldr	r1, [r3, #28]
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	021a      	lsls	r2, r3, #8
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	430a      	orrs	r2, r1
 800ca88:	61da      	str	r2, [r3, #28]
      break;
 800ca8a:	e043      	b.n	800cb14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68b9      	ldr	r1, [r7, #8]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 fc0e 	bl	800d2b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f042 0208 	orr.w	r2, r2, #8
 800caa6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f022 0204 	bic.w	r2, r2, #4
 800cab6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	691a      	ldr	r2, [r3, #16]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	430a      	orrs	r2, r1
 800cac8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800caca:	e023      	b.n	800cb14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68b9      	ldr	r1, [r7, #8]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 fc52 	bl	800d37c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cae6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800caf6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	021a      	lsls	r2, r3, #8
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	430a      	orrs	r2, r1
 800cb0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cb0c:	e002      	b.n	800cb14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	75fb      	strb	r3, [r7, #23]
      break;
 800cb12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cb1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3718      	adds	r7, #24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop

0800cb28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d101      	bne.n	800cb44 <HAL_TIM_ConfigClockSource+0x1c>
 800cb40:	2302      	movs	r3, #2
 800cb42:	e0dc      	b.n	800ccfe <HAL_TIM_ConfigClockSource+0x1d6>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2202      	movs	r2, #2
 800cb50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	4b6a      	ldr	r3, [pc, #424]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cb60:	4013      	ands	r3, r2
 800cb62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a64      	ldr	r2, [pc, #400]	@ (800cd0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	f000 80a9 	beq.w	800ccd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb80:	4a62      	ldr	r2, [pc, #392]	@ (800cd0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	f200 80ae 	bhi.w	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb88:	4a61      	ldr	r2, [pc, #388]	@ (800cd10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	f000 80a1 	beq.w	800ccd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb90:	4a5f      	ldr	r2, [pc, #380]	@ (800cd10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	f200 80a6 	bhi.w	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb98:	4a5e      	ldr	r2, [pc, #376]	@ (800cd14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	f000 8099 	beq.w	800ccd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cba0:	4a5c      	ldr	r2, [pc, #368]	@ (800cd14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	f200 809e 	bhi.w	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cba8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbac:	f000 8091 	beq.w	800ccd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbb4:	f200 8096 	bhi.w	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbbc:	f000 8089 	beq.w	800ccd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbc4:	f200 808e 	bhi.w	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbcc:	d03e      	beq.n	800cc4c <HAL_TIM_ConfigClockSource+0x124>
 800cbce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbd2:	f200 8087 	bhi.w	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbda:	f000 8086 	beq.w	800ccea <HAL_TIM_ConfigClockSource+0x1c2>
 800cbde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbe2:	d87f      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbe4:	2b70      	cmp	r3, #112	@ 0x70
 800cbe6:	d01a      	beq.n	800cc1e <HAL_TIM_ConfigClockSource+0xf6>
 800cbe8:	2b70      	cmp	r3, #112	@ 0x70
 800cbea:	d87b      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbec:	2b60      	cmp	r3, #96	@ 0x60
 800cbee:	d050      	beq.n	800cc92 <HAL_TIM_ConfigClockSource+0x16a>
 800cbf0:	2b60      	cmp	r3, #96	@ 0x60
 800cbf2:	d877      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbf4:	2b50      	cmp	r3, #80	@ 0x50
 800cbf6:	d03c      	beq.n	800cc72 <HAL_TIM_ConfigClockSource+0x14a>
 800cbf8:	2b50      	cmp	r3, #80	@ 0x50
 800cbfa:	d873      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbfc:	2b40      	cmp	r3, #64	@ 0x40
 800cbfe:	d058      	beq.n	800ccb2 <HAL_TIM_ConfigClockSource+0x18a>
 800cc00:	2b40      	cmp	r3, #64	@ 0x40
 800cc02:	d86f      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc04:	2b30      	cmp	r3, #48	@ 0x30
 800cc06:	d064      	beq.n	800ccd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc08:	2b30      	cmp	r3, #48	@ 0x30
 800cc0a:	d86b      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc0c:	2b20      	cmp	r3, #32
 800cc0e:	d060      	beq.n	800ccd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc10:	2b20      	cmp	r3, #32
 800cc12:	d867      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d05c      	beq.n	800ccd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc18:	2b10      	cmp	r3, #16
 800cc1a:	d05a      	beq.n	800ccd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc1c:	e062      	b.n	800cce4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc2e:	f000 fc89 	bl	800d544 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68ba      	ldr	r2, [r7, #8]
 800cc48:	609a      	str	r2, [r3, #8]
      break;
 800cc4a:	e04f      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc5c:	f000 fc72 	bl	800d544 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	689a      	ldr	r2, [r3, #8]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc6e:	609a      	str	r2, [r3, #8]
      break;
 800cc70:	e03c      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc7e:	461a      	mov	r2, r3
 800cc80:	f000 fbe2 	bl	800d448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2150      	movs	r1, #80	@ 0x50
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f000 fc3c 	bl	800d508 <TIM_ITRx_SetConfig>
      break;
 800cc90:	e02c      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f000 fc01 	bl	800d4a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2160      	movs	r1, #96	@ 0x60
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 fc2c 	bl	800d508 <TIM_ITRx_SetConfig>
      break;
 800ccb0:	e01c      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f000 fbc2 	bl	800d448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2140      	movs	r1, #64	@ 0x40
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 fc1c 	bl	800d508 <TIM_ITRx_SetConfig>
      break;
 800ccd0:	e00c      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4619      	mov	r1, r3
 800ccdc:	4610      	mov	r0, r2
 800ccde:	f000 fc13 	bl	800d508 <TIM_ITRx_SetConfig>
      break;
 800cce2:	e003      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	73fb      	strb	r3, [r7, #15]
      break;
 800cce8:	e000      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ccea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	ffceff88 	.word	0xffceff88
 800cd0c:	00100040 	.word	0x00100040
 800cd10:	00100030 	.word	0x00100030
 800cd14:	00100020 	.word	0x00100020

0800cd18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd20:	bf00      	nop
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd34:	bf00      	nop
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd48:	bf00      	nop
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a40      	ldr	r2, [pc, #256]	@ (800ce7c <TIM_Base_SetConfig+0x114>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d013      	beq.n	800cda8 <TIM_Base_SetConfig+0x40>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd86:	d00f      	beq.n	800cda8 <TIM_Base_SetConfig+0x40>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a3d      	ldr	r2, [pc, #244]	@ (800ce80 <TIM_Base_SetConfig+0x118>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d00b      	beq.n	800cda8 <TIM_Base_SetConfig+0x40>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a3c      	ldr	r2, [pc, #240]	@ (800ce84 <TIM_Base_SetConfig+0x11c>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d007      	beq.n	800cda8 <TIM_Base_SetConfig+0x40>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a3b      	ldr	r2, [pc, #236]	@ (800ce88 <TIM_Base_SetConfig+0x120>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d003      	beq.n	800cda8 <TIM_Base_SetConfig+0x40>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a3a      	ldr	r2, [pc, #232]	@ (800ce8c <TIM_Base_SetConfig+0x124>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d108      	bne.n	800cdba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a2f      	ldr	r2, [pc, #188]	@ (800ce7c <TIM_Base_SetConfig+0x114>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d01f      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdc8:	d01b      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a2c      	ldr	r2, [pc, #176]	@ (800ce80 <TIM_Base_SetConfig+0x118>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d017      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4a2b      	ldr	r2, [pc, #172]	@ (800ce84 <TIM_Base_SetConfig+0x11c>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d013      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a2a      	ldr	r2, [pc, #168]	@ (800ce88 <TIM_Base_SetConfig+0x120>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d00f      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4a29      	ldr	r2, [pc, #164]	@ (800ce8c <TIM_Base_SetConfig+0x124>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d00b      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4a28      	ldr	r2, [pc, #160]	@ (800ce90 <TIM_Base_SetConfig+0x128>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d007      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a27      	ldr	r2, [pc, #156]	@ (800ce94 <TIM_Base_SetConfig+0x12c>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d003      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a26      	ldr	r2, [pc, #152]	@ (800ce98 <TIM_Base_SetConfig+0x130>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d108      	bne.n	800ce14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	689a      	ldr	r2, [r3, #8]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4a10      	ldr	r2, [pc, #64]	@ (800ce7c <TIM_Base_SetConfig+0x114>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d00f      	beq.n	800ce60 <TIM_Base_SetConfig+0xf8>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a12      	ldr	r2, [pc, #72]	@ (800ce8c <TIM_Base_SetConfig+0x124>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d00b      	beq.n	800ce60 <TIM_Base_SetConfig+0xf8>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a11      	ldr	r2, [pc, #68]	@ (800ce90 <TIM_Base_SetConfig+0x128>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d007      	beq.n	800ce60 <TIM_Base_SetConfig+0xf8>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a10      	ldr	r2, [pc, #64]	@ (800ce94 <TIM_Base_SetConfig+0x12c>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d003      	beq.n	800ce60 <TIM_Base_SetConfig+0xf8>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a0f      	ldr	r2, [pc, #60]	@ (800ce98 <TIM_Base_SetConfig+0x130>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d103      	bne.n	800ce68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	691a      	ldr	r2, [r3, #16]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	615a      	str	r2, [r3, #20]
}
 800ce6e:	bf00      	nop
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	40010000 	.word	0x40010000
 800ce80:	40000400 	.word	0x40000400
 800ce84:	40000800 	.word	0x40000800
 800ce88:	40000c00 	.word	0x40000c00
 800ce8c:	40010400 	.word	0x40010400
 800ce90:	40014000 	.word	0x40014000
 800ce94:	40014400 	.word	0x40014400
 800ce98:	40014800 	.word	0x40014800

0800ce9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	f023 0201 	bic.w	r2, r3, #1
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a1b      	ldr	r3, [r3, #32]
 800ceb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	699b      	ldr	r3, [r3, #24]
 800cec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	4b37      	ldr	r3, [pc, #220]	@ (800cfa4 <TIM_OC1_SetConfig+0x108>)
 800cec8:	4013      	ands	r3, r2
 800ceca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f023 0303 	bic.w	r3, r3, #3
 800ced2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f023 0302 	bic.w	r3, r3, #2
 800cee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	697a      	ldr	r2, [r7, #20]
 800ceec:	4313      	orrs	r3, r2
 800ceee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a2d      	ldr	r2, [pc, #180]	@ (800cfa8 <TIM_OC1_SetConfig+0x10c>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d00f      	beq.n	800cf18 <TIM_OC1_SetConfig+0x7c>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4a2c      	ldr	r2, [pc, #176]	@ (800cfac <TIM_OC1_SetConfig+0x110>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d00b      	beq.n	800cf18 <TIM_OC1_SetConfig+0x7c>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a2b      	ldr	r2, [pc, #172]	@ (800cfb0 <TIM_OC1_SetConfig+0x114>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d007      	beq.n	800cf18 <TIM_OC1_SetConfig+0x7c>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a2a      	ldr	r2, [pc, #168]	@ (800cfb4 <TIM_OC1_SetConfig+0x118>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d003      	beq.n	800cf18 <TIM_OC1_SetConfig+0x7c>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a29      	ldr	r2, [pc, #164]	@ (800cfb8 <TIM_OC1_SetConfig+0x11c>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d10c      	bne.n	800cf32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	f023 0308 	bic.w	r3, r3, #8
 800cf1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	f023 0304 	bic.w	r3, r3, #4
 800cf30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4a1c      	ldr	r2, [pc, #112]	@ (800cfa8 <TIM_OC1_SetConfig+0x10c>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d00f      	beq.n	800cf5a <TIM_OC1_SetConfig+0xbe>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a1b      	ldr	r2, [pc, #108]	@ (800cfac <TIM_OC1_SetConfig+0x110>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d00b      	beq.n	800cf5a <TIM_OC1_SetConfig+0xbe>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a1a      	ldr	r2, [pc, #104]	@ (800cfb0 <TIM_OC1_SetConfig+0x114>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d007      	beq.n	800cf5a <TIM_OC1_SetConfig+0xbe>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a19      	ldr	r2, [pc, #100]	@ (800cfb4 <TIM_OC1_SetConfig+0x118>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d003      	beq.n	800cf5a <TIM_OC1_SetConfig+0xbe>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a18      	ldr	r2, [pc, #96]	@ (800cfb8 <TIM_OC1_SetConfig+0x11c>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d111      	bne.n	800cf7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cf68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	699b      	ldr	r3, [r3, #24]
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	693a      	ldr	r2, [r7, #16]
 800cf82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	685a      	ldr	r2, [r3, #4]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	621a      	str	r2, [r3, #32]
}
 800cf98:	bf00      	nop
 800cf9a:	371c      	adds	r7, #28
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	fffeff8f 	.word	0xfffeff8f
 800cfa8:	40010000 	.word	0x40010000
 800cfac:	40010400 	.word	0x40010400
 800cfb0:	40014000 	.word	0x40014000
 800cfb4:	40014400 	.word	0x40014400
 800cfb8:	40014800 	.word	0x40014800

0800cfbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b087      	sub	sp, #28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	f023 0210 	bic.w	r2, r3, #16
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6a1b      	ldr	r3, [r3, #32]
 800cfd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	4b34      	ldr	r3, [pc, #208]	@ (800d0b8 <TIM_OC2_SetConfig+0xfc>)
 800cfe8:	4013      	ands	r3, r2
 800cfea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	021b      	lsls	r3, r3, #8
 800cffa:	68fa      	ldr	r2, [r7, #12]
 800cffc:	4313      	orrs	r3, r2
 800cffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	f023 0320 	bic.w	r3, r3, #32
 800d006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	011b      	lsls	r3, r3, #4
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	4313      	orrs	r3, r2
 800d012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4a29      	ldr	r2, [pc, #164]	@ (800d0bc <TIM_OC2_SetConfig+0x100>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d003      	beq.n	800d024 <TIM_OC2_SetConfig+0x68>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a28      	ldr	r2, [pc, #160]	@ (800d0c0 <TIM_OC2_SetConfig+0x104>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d10d      	bne.n	800d040 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d02a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	011b      	lsls	r3, r3, #4
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	4313      	orrs	r3, r2
 800d036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d03e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a1e      	ldr	r2, [pc, #120]	@ (800d0bc <TIM_OC2_SetConfig+0x100>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d00f      	beq.n	800d068 <TIM_OC2_SetConfig+0xac>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a1d      	ldr	r2, [pc, #116]	@ (800d0c0 <TIM_OC2_SetConfig+0x104>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d00b      	beq.n	800d068 <TIM_OC2_SetConfig+0xac>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a1c      	ldr	r2, [pc, #112]	@ (800d0c4 <TIM_OC2_SetConfig+0x108>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d007      	beq.n	800d068 <TIM_OC2_SetConfig+0xac>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a1b      	ldr	r2, [pc, #108]	@ (800d0c8 <TIM_OC2_SetConfig+0x10c>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d003      	beq.n	800d068 <TIM_OC2_SetConfig+0xac>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a1a      	ldr	r2, [pc, #104]	@ (800d0cc <TIM_OC2_SetConfig+0x110>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d113      	bne.n	800d090 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d06e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	695b      	ldr	r3, [r3, #20]
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	693a      	ldr	r2, [r7, #16]
 800d080:	4313      	orrs	r3, r2
 800d082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	693a      	ldr	r2, [r7, #16]
 800d094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	685a      	ldr	r2, [r3, #4]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	621a      	str	r2, [r3, #32]
}
 800d0aa:	bf00      	nop
 800d0ac:	371c      	adds	r7, #28
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	feff8fff 	.word	0xfeff8fff
 800d0bc:	40010000 	.word	0x40010000
 800d0c0:	40010400 	.word	0x40010400
 800d0c4:	40014000 	.word	0x40014000
 800d0c8:	40014400 	.word	0x40014400
 800d0cc:	40014800 	.word	0x40014800

0800d0d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b087      	sub	sp, #28
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6a1b      	ldr	r3, [r3, #32]
 800d0de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
 800d0ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	69db      	ldr	r3, [r3, #28]
 800d0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	4b33      	ldr	r3, [pc, #204]	@ (800d1c8 <TIM_OC3_SetConfig+0xf8>)
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	4313      	orrs	r3, r2
 800d110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	021b      	lsls	r3, r3, #8
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	4313      	orrs	r3, r2
 800d124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4a28      	ldr	r2, [pc, #160]	@ (800d1cc <TIM_OC3_SetConfig+0xfc>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d003      	beq.n	800d136 <TIM_OC3_SetConfig+0x66>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4a27      	ldr	r2, [pc, #156]	@ (800d1d0 <TIM_OC3_SetConfig+0x100>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d10d      	bne.n	800d152 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d13c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	021b      	lsls	r3, r3, #8
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	4313      	orrs	r3, r2
 800d148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a1d      	ldr	r2, [pc, #116]	@ (800d1cc <TIM_OC3_SetConfig+0xfc>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d00f      	beq.n	800d17a <TIM_OC3_SetConfig+0xaa>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4a1c      	ldr	r2, [pc, #112]	@ (800d1d0 <TIM_OC3_SetConfig+0x100>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d00b      	beq.n	800d17a <TIM_OC3_SetConfig+0xaa>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4a1b      	ldr	r2, [pc, #108]	@ (800d1d4 <TIM_OC3_SetConfig+0x104>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d007      	beq.n	800d17a <TIM_OC3_SetConfig+0xaa>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4a1a      	ldr	r2, [pc, #104]	@ (800d1d8 <TIM_OC3_SetConfig+0x108>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d003      	beq.n	800d17a <TIM_OC3_SetConfig+0xaa>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4a19      	ldr	r2, [pc, #100]	@ (800d1dc <TIM_OC3_SetConfig+0x10c>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d113      	bne.n	800d1a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	695b      	ldr	r3, [r3, #20]
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	4313      	orrs	r3, r2
 800d194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	011b      	lsls	r3, r3, #4
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	693a      	ldr	r2, [r7, #16]
 800d1a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	685a      	ldr	r2, [r3, #4]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	697a      	ldr	r2, [r7, #20]
 800d1ba:	621a      	str	r2, [r3, #32]
}
 800d1bc:	bf00      	nop
 800d1be:	371c      	adds	r7, #28
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	fffeff8f 	.word	0xfffeff8f
 800d1cc:	40010000 	.word	0x40010000
 800d1d0:	40010400 	.word	0x40010400
 800d1d4:	40014000 	.word	0x40014000
 800d1d8:	40014400 	.word	0x40014400
 800d1dc:	40014800 	.word	0x40014800

0800d1e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b087      	sub	sp, #28
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6a1b      	ldr	r3, [r3, #32]
 800d1ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6a1b      	ldr	r3, [r3, #32]
 800d1fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	4b24      	ldr	r3, [pc, #144]	@ (800d29c <TIM_OC4_SetConfig+0xbc>)
 800d20c:	4013      	ands	r3, r2
 800d20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	021b      	lsls	r3, r3, #8
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	4313      	orrs	r3, r2
 800d222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d22a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	031b      	lsls	r3, r3, #12
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	4313      	orrs	r3, r2
 800d236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a19      	ldr	r2, [pc, #100]	@ (800d2a0 <TIM_OC4_SetConfig+0xc0>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d00f      	beq.n	800d260 <TIM_OC4_SetConfig+0x80>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a18      	ldr	r2, [pc, #96]	@ (800d2a4 <TIM_OC4_SetConfig+0xc4>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d00b      	beq.n	800d260 <TIM_OC4_SetConfig+0x80>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	4a17      	ldr	r2, [pc, #92]	@ (800d2a8 <TIM_OC4_SetConfig+0xc8>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d007      	beq.n	800d260 <TIM_OC4_SetConfig+0x80>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	4a16      	ldr	r2, [pc, #88]	@ (800d2ac <TIM_OC4_SetConfig+0xcc>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d003      	beq.n	800d260 <TIM_OC4_SetConfig+0x80>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a15      	ldr	r2, [pc, #84]	@ (800d2b0 <TIM_OC4_SetConfig+0xd0>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d109      	bne.n	800d274 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	695b      	ldr	r3, [r3, #20]
 800d26c:	019b      	lsls	r3, r3, #6
 800d26e:	697a      	ldr	r2, [r7, #20]
 800d270:	4313      	orrs	r3, r2
 800d272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	693a      	ldr	r2, [r7, #16]
 800d28c:	621a      	str	r2, [r3, #32]
}
 800d28e:	bf00      	nop
 800d290:	371c      	adds	r7, #28
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	feff8fff 	.word	0xfeff8fff
 800d2a0:	40010000 	.word	0x40010000
 800d2a4:	40010400 	.word	0x40010400
 800d2a8:	40014000 	.word	0x40014000
 800d2ac:	40014400 	.word	0x40014400
 800d2b0:	40014800 	.word	0x40014800

0800d2b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b087      	sub	sp, #28
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a1b      	ldr	r3, [r3, #32]
 800d2c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a1b      	ldr	r3, [r3, #32]
 800d2ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	4b21      	ldr	r3, [pc, #132]	@ (800d364 <TIM_OC5_SetConfig+0xb0>)
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d2f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	041b      	lsls	r3, r3, #16
 800d2fc:	693a      	ldr	r2, [r7, #16]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a18      	ldr	r2, [pc, #96]	@ (800d368 <TIM_OC5_SetConfig+0xb4>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d00f      	beq.n	800d32a <TIM_OC5_SetConfig+0x76>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a17      	ldr	r2, [pc, #92]	@ (800d36c <TIM_OC5_SetConfig+0xb8>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d00b      	beq.n	800d32a <TIM_OC5_SetConfig+0x76>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a16      	ldr	r2, [pc, #88]	@ (800d370 <TIM_OC5_SetConfig+0xbc>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d007      	beq.n	800d32a <TIM_OC5_SetConfig+0x76>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a15      	ldr	r2, [pc, #84]	@ (800d374 <TIM_OC5_SetConfig+0xc0>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d003      	beq.n	800d32a <TIM_OC5_SetConfig+0x76>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4a14      	ldr	r2, [pc, #80]	@ (800d378 <TIM_OC5_SetConfig+0xc4>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d109      	bne.n	800d33e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	695b      	ldr	r3, [r3, #20]
 800d336:	021b      	lsls	r3, r3, #8
 800d338:	697a      	ldr	r2, [r7, #20]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	697a      	ldr	r2, [r7, #20]
 800d342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	693a      	ldr	r2, [r7, #16]
 800d356:	621a      	str	r2, [r3, #32]
}
 800d358:	bf00      	nop
 800d35a:	371c      	adds	r7, #28
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	fffeff8f 	.word	0xfffeff8f
 800d368:	40010000 	.word	0x40010000
 800d36c:	40010400 	.word	0x40010400
 800d370:	40014000 	.word	0x40014000
 800d374:	40014400 	.word	0x40014400
 800d378:	40014800 	.word	0x40014800

0800d37c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b087      	sub	sp, #28
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a1b      	ldr	r3, [r3, #32]
 800d396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	4b22      	ldr	r3, [pc, #136]	@ (800d430 <TIM_OC6_SetConfig+0xb4>)
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	021b      	lsls	r3, r3, #8
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d3be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	051b      	lsls	r3, r3, #20
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a19      	ldr	r2, [pc, #100]	@ (800d434 <TIM_OC6_SetConfig+0xb8>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d00f      	beq.n	800d3f4 <TIM_OC6_SetConfig+0x78>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4a18      	ldr	r2, [pc, #96]	@ (800d438 <TIM_OC6_SetConfig+0xbc>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d00b      	beq.n	800d3f4 <TIM_OC6_SetConfig+0x78>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	4a17      	ldr	r2, [pc, #92]	@ (800d43c <TIM_OC6_SetConfig+0xc0>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d007      	beq.n	800d3f4 <TIM_OC6_SetConfig+0x78>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4a16      	ldr	r2, [pc, #88]	@ (800d440 <TIM_OC6_SetConfig+0xc4>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d003      	beq.n	800d3f4 <TIM_OC6_SetConfig+0x78>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	4a15      	ldr	r2, [pc, #84]	@ (800d444 <TIM_OC6_SetConfig+0xc8>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d109      	bne.n	800d408 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d3fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	029b      	lsls	r3, r3, #10
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	4313      	orrs	r3, r2
 800d406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	685a      	ldr	r2, [r3, #4]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	693a      	ldr	r2, [r7, #16]
 800d420:	621a      	str	r2, [r3, #32]
}
 800d422:	bf00      	nop
 800d424:	371c      	adds	r7, #28
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	feff8fff 	.word	0xfeff8fff
 800d434:	40010000 	.word	0x40010000
 800d438:	40010400 	.word	0x40010400
 800d43c:	40014000 	.word	0x40014000
 800d440:	40014400 	.word	0x40014400
 800d444:	40014800 	.word	0x40014800

0800d448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d448:	b480      	push	{r7}
 800d44a:	b087      	sub	sp, #28
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	6a1b      	ldr	r3, [r3, #32]
 800d458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6a1b      	ldr	r3, [r3, #32]
 800d45e:	f023 0201 	bic.w	r2, r3, #1
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	699b      	ldr	r3, [r3, #24]
 800d46a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	011b      	lsls	r3, r3, #4
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	f023 030a 	bic.w	r3, r3, #10
 800d484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	4313      	orrs	r3, r2
 800d48c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	621a      	str	r2, [r3, #32]
}
 800d49a:	bf00      	nop
 800d49c:	371c      	adds	r7, #28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr

0800d4a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4a6:	b480      	push	{r7}
 800d4a8:	b087      	sub	sp, #28
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	60f8      	str	r0, [r7, #12]
 800d4ae:	60b9      	str	r1, [r7, #8]
 800d4b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6a1b      	ldr	r3, [r3, #32]
 800d4b6:	f023 0210 	bic.w	r2, r3, #16
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	699b      	ldr	r3, [r3, #24]
 800d4c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6a1b      	ldr	r3, [r3, #32]
 800d4c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d4d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	031b      	lsls	r3, r3, #12
 800d4d6:	697a      	ldr	r2, [r7, #20]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d4e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	011b      	lsls	r3, r3, #4
 800d4e8:	693a      	ldr	r2, [r7, #16]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	697a      	ldr	r2, [r7, #20]
 800d4f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	621a      	str	r2, [r3, #32]
}
 800d4fa:	bf00      	nop
 800d4fc:	371c      	adds	r7, #28
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr
	...

0800d508 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d508:	b480      	push	{r7}
 800d50a:	b085      	sub	sp, #20
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	4b09      	ldr	r3, [pc, #36]	@ (800d540 <TIM_ITRx_SetConfig+0x38>)
 800d51c:	4013      	ands	r3, r2
 800d51e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	4313      	orrs	r3, r2
 800d526:	f043 0307 	orr.w	r3, r3, #7
 800d52a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	609a      	str	r2, [r3, #8]
}
 800d532:	bf00      	nop
 800d534:	3714      	adds	r7, #20
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	ffcfff8f 	.word	0xffcfff8f

0800d544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d544:	b480      	push	{r7}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
 800d550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d55e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	021a      	lsls	r2, r3, #8
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	431a      	orrs	r2, r3
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	4313      	orrs	r3, r2
 800d56c:	697a      	ldr	r2, [r7, #20]
 800d56e:	4313      	orrs	r3, r2
 800d570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	697a      	ldr	r2, [r7, #20]
 800d576:	609a      	str	r2, [r3, #8]
}
 800d578:	bf00      	nop
 800d57a:	371c      	adds	r7, #28
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d584:	b480      	push	{r7}
 800d586:	b087      	sub	sp, #28
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	f003 031f 	and.w	r3, r3, #31
 800d596:	2201      	movs	r2, #1
 800d598:	fa02 f303 	lsl.w	r3, r2, r3
 800d59c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	6a1a      	ldr	r2, [r3, #32]
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	43db      	mvns	r3, r3
 800d5a6:	401a      	ands	r2, r3
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6a1a      	ldr	r2, [r3, #32]
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	f003 031f 	and.w	r3, r3, #31
 800d5b6:	6879      	ldr	r1, [r7, #4]
 800d5b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d5bc:	431a      	orrs	r2, r3
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	621a      	str	r2, [r3, #32]
}
 800d5c2:	bf00      	nop
 800d5c4:	371c      	adds	r7, #28
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr
	...

0800d5d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d101      	bne.n	800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5e4:	2302      	movs	r3, #2
 800d5e6:	e06d      	b.n	800d6c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2202      	movs	r2, #2
 800d5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a30      	ldr	r2, [pc, #192]	@ (800d6d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d004      	beq.n	800d61c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a2f      	ldr	r2, [pc, #188]	@ (800d6d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d108      	bne.n	800d62e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d622:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d634:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	4313      	orrs	r3, r2
 800d63e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a20      	ldr	r2, [pc, #128]	@ (800d6d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d022      	beq.n	800d698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d65a:	d01d      	beq.n	800d698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a1d      	ldr	r2, [pc, #116]	@ (800d6d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d018      	beq.n	800d698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a1c      	ldr	r2, [pc, #112]	@ (800d6dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d013      	beq.n	800d698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a1a      	ldr	r2, [pc, #104]	@ (800d6e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d00e      	beq.n	800d698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a15      	ldr	r2, [pc, #84]	@ (800d6d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d009      	beq.n	800d698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a16      	ldr	r2, [pc, #88]	@ (800d6e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d004      	beq.n	800d698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a15      	ldr	r2, [pc, #84]	@ (800d6e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d10c      	bne.n	800d6b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d69e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	40010000 	.word	0x40010000
 800d6d4:	40010400 	.word	0x40010400
 800d6d8:	40000400 	.word	0x40000400
 800d6dc:	40000800 	.word	0x40000800
 800d6e0:	40000c00 	.word	0x40000c00
 800d6e4:	40001800 	.word	0x40001800
 800d6e8:	40014000 	.word	0x40014000

0800d6ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d700:	2b01      	cmp	r3, #1
 800d702:	d101      	bne.n	800d708 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d704:	2302      	movs	r3, #2
 800d706:	e065      	b.n	800d7d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	689b      	ldr	r3, [r3, #8]
 800d728:	4313      	orrs	r3, r2
 800d72a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	4313      	orrs	r3, r2
 800d738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4313      	orrs	r3, r2
 800d746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	4313      	orrs	r3, r2
 800d754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	695b      	ldr	r3, [r3, #20]
 800d760:	4313      	orrs	r3, r2
 800d762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d76e:	4313      	orrs	r3, r2
 800d770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	041b      	lsls	r3, r3, #16
 800d77e:	4313      	orrs	r3, r2
 800d780:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4a16      	ldr	r2, [pc, #88]	@ (800d7e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d004      	beq.n	800d796 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a14      	ldr	r2, [pc, #80]	@ (800d7e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d115      	bne.n	800d7c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a0:	051b      	lsls	r3, r3, #20
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	69db      	ldr	r3, [r3, #28]
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	6a1b      	ldr	r3, [r3, #32]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3714      	adds	r7, #20
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr
 800d7e0:	40010000 	.word	0x40010000
 800d7e4:	40010400 	.word	0x40010400

0800d7e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d818:	bf00      	nop
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d824:	b084      	sub	sp, #16
 800d826:	b580      	push	{r7, lr}
 800d828:	b084      	sub	sp, #16
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	f107 001c 	add.w	r0, r7, #28
 800d832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d120      	bne.n	800d87e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d840:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68da      	ldr	r2, [r3, #12]
 800d84c:	4b2a      	ldr	r3, [pc, #168]	@ (800d8f8 <USB_CoreInit+0xd4>)
 800d84e:	4013      	ands	r3, r2
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d862:	2b01      	cmp	r3, #1
 800d864:	d105      	bne.n	800d872 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f001 faf8 	bl	800ee68 <USB_CoreReset>
 800d878:	4603      	mov	r3, r0
 800d87a:	73fb      	strb	r3, [r7, #15]
 800d87c:	e01a      	b.n	800d8b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f001 faec 	bl	800ee68 <USB_CoreReset>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d896:	2b00      	cmp	r3, #0
 800d898:	d106      	bne.n	800d8a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d89e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	639a      	str	r2, [r3, #56]	@ 0x38
 800d8a6:	e005      	b.n	800d8b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d116      	bne.n	800d8e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800d8fc <USB_CoreInit+0xd8>)
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	f043 0206 	orr.w	r2, r3, #6
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	f043 0220 	orr.w	r2, r3, #32
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8f4:	b004      	add	sp, #16
 800d8f6:	4770      	bx	lr
 800d8f8:	ffbdffbf 	.word	0xffbdffbf
 800d8fc:	03ee0000 	.word	0x03ee0000

0800d900 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d900:	b480      	push	{r7}
 800d902:	b087      	sub	sp, #28
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	4613      	mov	r3, r2
 800d90c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d90e:	79fb      	ldrb	r3, [r7, #7]
 800d910:	2b02      	cmp	r3, #2
 800d912:	d165      	bne.n	800d9e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	4a41      	ldr	r2, [pc, #260]	@ (800da1c <USB_SetTurnaroundTime+0x11c>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d906      	bls.n	800d92a <USB_SetTurnaroundTime+0x2a>
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	4a40      	ldr	r2, [pc, #256]	@ (800da20 <USB_SetTurnaroundTime+0x120>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d202      	bcs.n	800d92a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d924:	230f      	movs	r3, #15
 800d926:	617b      	str	r3, [r7, #20]
 800d928:	e062      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	4a3c      	ldr	r2, [pc, #240]	@ (800da20 <USB_SetTurnaroundTime+0x120>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d306      	bcc.n	800d940 <USB_SetTurnaroundTime+0x40>
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	4a3b      	ldr	r2, [pc, #236]	@ (800da24 <USB_SetTurnaroundTime+0x124>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d202      	bcs.n	800d940 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d93a:	230e      	movs	r3, #14
 800d93c:	617b      	str	r3, [r7, #20]
 800d93e:	e057      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	4a38      	ldr	r2, [pc, #224]	@ (800da24 <USB_SetTurnaroundTime+0x124>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d306      	bcc.n	800d956 <USB_SetTurnaroundTime+0x56>
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	4a37      	ldr	r2, [pc, #220]	@ (800da28 <USB_SetTurnaroundTime+0x128>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d202      	bcs.n	800d956 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d950:	230d      	movs	r3, #13
 800d952:	617b      	str	r3, [r7, #20]
 800d954:	e04c      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	4a33      	ldr	r2, [pc, #204]	@ (800da28 <USB_SetTurnaroundTime+0x128>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d306      	bcc.n	800d96c <USB_SetTurnaroundTime+0x6c>
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	4a32      	ldr	r2, [pc, #200]	@ (800da2c <USB_SetTurnaroundTime+0x12c>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d802      	bhi.n	800d96c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d966:	230c      	movs	r3, #12
 800d968:	617b      	str	r3, [r7, #20]
 800d96a:	e041      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	4a2f      	ldr	r2, [pc, #188]	@ (800da2c <USB_SetTurnaroundTime+0x12c>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d906      	bls.n	800d982 <USB_SetTurnaroundTime+0x82>
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	4a2e      	ldr	r2, [pc, #184]	@ (800da30 <USB_SetTurnaroundTime+0x130>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d802      	bhi.n	800d982 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d97c:	230b      	movs	r3, #11
 800d97e:	617b      	str	r3, [r7, #20]
 800d980:	e036      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	4a2a      	ldr	r2, [pc, #168]	@ (800da30 <USB_SetTurnaroundTime+0x130>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d906      	bls.n	800d998 <USB_SetTurnaroundTime+0x98>
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	4a29      	ldr	r2, [pc, #164]	@ (800da34 <USB_SetTurnaroundTime+0x134>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d802      	bhi.n	800d998 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d992:	230a      	movs	r3, #10
 800d994:	617b      	str	r3, [r7, #20]
 800d996:	e02b      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	4a26      	ldr	r2, [pc, #152]	@ (800da34 <USB_SetTurnaroundTime+0x134>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d906      	bls.n	800d9ae <USB_SetTurnaroundTime+0xae>
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	4a25      	ldr	r2, [pc, #148]	@ (800da38 <USB_SetTurnaroundTime+0x138>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d202      	bcs.n	800d9ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d9a8:	2309      	movs	r3, #9
 800d9aa:	617b      	str	r3, [r7, #20]
 800d9ac:	e020      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	4a21      	ldr	r2, [pc, #132]	@ (800da38 <USB_SetTurnaroundTime+0x138>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d306      	bcc.n	800d9c4 <USB_SetTurnaroundTime+0xc4>
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	4a20      	ldr	r2, [pc, #128]	@ (800da3c <USB_SetTurnaroundTime+0x13c>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d802      	bhi.n	800d9c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d9be:	2308      	movs	r3, #8
 800d9c0:	617b      	str	r3, [r7, #20]
 800d9c2:	e015      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	4a1d      	ldr	r2, [pc, #116]	@ (800da3c <USB_SetTurnaroundTime+0x13c>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d906      	bls.n	800d9da <USB_SetTurnaroundTime+0xda>
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	4a1c      	ldr	r2, [pc, #112]	@ (800da40 <USB_SetTurnaroundTime+0x140>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d202      	bcs.n	800d9da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d9d4:	2307      	movs	r3, #7
 800d9d6:	617b      	str	r3, [r7, #20]
 800d9d8:	e00a      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d9da:	2306      	movs	r3, #6
 800d9dc:	617b      	str	r3, [r7, #20]
 800d9de:	e007      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d9e0:	79fb      	ldrb	r3, [r7, #7]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d102      	bne.n	800d9ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d9e6:	2309      	movs	r3, #9
 800d9e8:	617b      	str	r3, [r7, #20]
 800d9ea:	e001      	b.n	800d9f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d9ec:	2309      	movs	r3, #9
 800d9ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	68da      	ldr	r2, [r3, #12]
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	029b      	lsls	r3, r3, #10
 800da04:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800da08:	431a      	orrs	r2, r3
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	371c      	adds	r7, #28
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr
 800da1c:	00d8acbf 	.word	0x00d8acbf
 800da20:	00e4e1c0 	.word	0x00e4e1c0
 800da24:	00f42400 	.word	0x00f42400
 800da28:	01067380 	.word	0x01067380
 800da2c:	011a499f 	.word	0x011a499f
 800da30:	01312cff 	.word	0x01312cff
 800da34:	014ca43f 	.word	0x014ca43f
 800da38:	016e3600 	.word	0x016e3600
 800da3c:	01a6ab1f 	.word	0x01a6ab1f
 800da40:	01e84800 	.word	0x01e84800

0800da44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	f043 0201 	orr.w	r2, r3, #1
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	f023 0201 	bic.w	r2, r3, #1
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	460b      	mov	r3, r1
 800da92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800daa4:	78fb      	ldrb	r3, [r7, #3]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d115      	bne.n	800dad6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dab6:	2001      	movs	r0, #1
 800dab8:	f7f4 f872 	bl	8001ba0 <HAL_Delay>
      ms++;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	3301      	adds	r3, #1
 800dac0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f001 f93f 	bl	800ed46 <USB_GetMode>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d01e      	beq.n	800db0c <USB_SetCurrentMode+0x84>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2b31      	cmp	r3, #49	@ 0x31
 800dad2:	d9f0      	bls.n	800dab6 <USB_SetCurrentMode+0x2e>
 800dad4:	e01a      	b.n	800db0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dad6:	78fb      	ldrb	r3, [r7, #3]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d115      	bne.n	800db08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dae8:	2001      	movs	r0, #1
 800daea:	f7f4 f859 	bl	8001ba0 <HAL_Delay>
      ms++;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3301      	adds	r3, #1
 800daf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f001 f926 	bl	800ed46 <USB_GetMode>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d005      	beq.n	800db0c <USB_SetCurrentMode+0x84>
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2b31      	cmp	r3, #49	@ 0x31
 800db04:	d9f0      	bls.n	800dae8 <USB_SetCurrentMode+0x60>
 800db06:	e001      	b.n	800db0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800db08:	2301      	movs	r3, #1
 800db0a:	e005      	b.n	800db18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2b32      	cmp	r3, #50	@ 0x32
 800db10:	d101      	bne.n	800db16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	e000      	b.n	800db18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db20:	b084      	sub	sp, #16
 800db22:	b580      	push	{r7, lr}
 800db24:	b086      	sub	sp, #24
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
 800db2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800db2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db32:	2300      	movs	r3, #0
 800db34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db3a:	2300      	movs	r3, #0
 800db3c:	613b      	str	r3, [r7, #16]
 800db3e:	e009      	b.n	800db54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	3340      	adds	r3, #64	@ 0x40
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4413      	add	r3, r2
 800db4a:	2200      	movs	r2, #0
 800db4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	3301      	adds	r3, #1
 800db52:	613b      	str	r3, [r7, #16]
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	2b0e      	cmp	r3, #14
 800db58:	d9f2      	bls.n	800db40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800db5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d11c      	bne.n	800db9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db6e:	f043 0302 	orr.w	r3, r3, #2
 800db72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db78:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	601a      	str	r2, [r3, #0]
 800db98:	e005      	b.n	800dba6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db9e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dbac:	461a      	mov	r2, r3
 800dbae:	2300      	movs	r3, #0
 800dbb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbb8:	4619      	mov	r1, r3
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	680b      	ldr	r3, [r1, #0]
 800dbc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dbc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d10c      	bne.n	800dbe6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d104      	bne.n	800dbdc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 f965 	bl	800dea4 <USB_SetDevSpeed>
 800dbda:	e008      	b.n	800dbee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dbdc:	2101      	movs	r1, #1
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 f960 	bl	800dea4 <USB_SetDevSpeed>
 800dbe4:	e003      	b.n	800dbee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dbe6:	2103      	movs	r1, #3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 f95b 	bl	800dea4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dbee:	2110      	movs	r1, #16
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 f8f3 	bl	800dddc <USB_FlushTxFifo>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d001      	beq.n	800dc00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 f91f 	bl	800de44 <USB_FlushRxFifo>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d001      	beq.n	800dc10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc16:	461a      	mov	r2, r3
 800dc18:	2300      	movs	r3, #0
 800dc1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc22:	461a      	mov	r2, r3
 800dc24:	2300      	movs	r3, #0
 800dc26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc2e:	461a      	mov	r2, r3
 800dc30:	2300      	movs	r3, #0
 800dc32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc34:	2300      	movs	r3, #0
 800dc36:	613b      	str	r3, [r7, #16]
 800dc38:	e043      	b.n	800dcc2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	015a      	lsls	r2, r3, #5
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	4413      	add	r3, r2
 800dc42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc50:	d118      	bne.n	800dc84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d10a      	bne.n	800dc6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	015a      	lsls	r2, r3, #5
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4413      	add	r3, r2
 800dc60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc64:	461a      	mov	r2, r3
 800dc66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dc6a:	6013      	str	r3, [r2, #0]
 800dc6c:	e013      	b.n	800dc96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	015a      	lsls	r2, r3, #5
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	4413      	add	r3, r2
 800dc76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dc80:	6013      	str	r3, [r2, #0]
 800dc82:	e008      	b.n	800dc96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	015a      	lsls	r2, r3, #5
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	4413      	add	r3, r2
 800dc8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc90:	461a      	mov	r2, r3
 800dc92:	2300      	movs	r3, #0
 800dc94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	015a      	lsls	r2, r3, #5
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dca2:	461a      	mov	r2, r3
 800dca4:	2300      	movs	r3, #0
 800dca6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	015a      	lsls	r2, r3, #5
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	4413      	add	r3, r2
 800dcb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dcba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	613b      	str	r3, [r7, #16]
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d3b7      	bcc.n	800dc3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcca:	2300      	movs	r3, #0
 800dccc:	613b      	str	r3, [r7, #16]
 800dcce:	e043      	b.n	800dd58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	015a      	lsls	r2, r3, #5
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	4413      	add	r3, r2
 800dcd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dce2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dce6:	d118      	bne.n	800dd1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d10a      	bne.n	800dd04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	015a      	lsls	r2, r3, #5
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	e013      	b.n	800dd2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	015a      	lsls	r2, r3, #5
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd10:	461a      	mov	r2, r3
 800dd12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dd16:	6013      	str	r3, [r2, #0]
 800dd18:	e008      	b.n	800dd2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	015a      	lsls	r2, r3, #5
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	4413      	add	r3, r2
 800dd22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd26:	461a      	mov	r2, r3
 800dd28:	2300      	movs	r3, #0
 800dd2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	015a      	lsls	r2, r3, #5
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	4413      	add	r3, r2
 800dd34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd38:	461a      	mov	r2, r3
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	015a      	lsls	r2, r3, #5
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	4413      	add	r3, r2
 800dd46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dd50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	3301      	adds	r3, #1
 800dd56:	613b      	str	r3, [r7, #16]
 800dd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5a:	693a      	ldr	r2, [r7, #16]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d3b7      	bcc.n	800dcd0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd66:	691b      	ldr	r3, [r3, #16]
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dd6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800dd80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dd82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d105      	bne.n	800dd94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	699b      	ldr	r3, [r3, #24]
 800dd8c:	f043 0210 	orr.w	r2, r3, #16
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	699a      	ldr	r2, [r3, #24]
 800dd98:	4b0e      	ldr	r3, [pc, #56]	@ (800ddd4 <USB_DevInit+0x2b4>)
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dda0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d005      	beq.n	800ddb2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	699b      	ldr	r3, [r3, #24]
 800ddaa:	f043 0208 	orr.w	r2, r3, #8
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ddb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d105      	bne.n	800ddc4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	699a      	ldr	r2, [r3, #24]
 800ddbc:	4b06      	ldr	r3, [pc, #24]	@ (800ddd8 <USB_DevInit+0x2b8>)
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ddc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3718      	adds	r7, #24
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddd0:	b004      	add	sp, #16
 800ddd2:	4770      	bx	lr
 800ddd4:	803c3800 	.word	0x803c3800
 800ddd8:	40000004 	.word	0x40000004

0800dddc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b085      	sub	sp, #20
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dde6:	2300      	movs	r3, #0
 800dde8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	3301      	adds	r3, #1
 800ddee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	4a13      	ldr	r2, [pc, #76]	@ (800de40 <USB_FlushTxFifo+0x64>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d901      	bls.n	800ddfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ddf8:	2303      	movs	r3, #3
 800ddfa:	e01b      	b.n	800de34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	691b      	ldr	r3, [r3, #16]
 800de00:	2b00      	cmp	r3, #0
 800de02:	daf2      	bge.n	800ddea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de04:	2300      	movs	r3, #0
 800de06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	019b      	lsls	r3, r3, #6
 800de0c:	f043 0220 	orr.w	r2, r3, #32
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	3301      	adds	r3, #1
 800de18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	4a08      	ldr	r2, [pc, #32]	@ (800de40 <USB_FlushTxFifo+0x64>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d901      	bls.n	800de26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800de22:	2303      	movs	r3, #3
 800de24:	e006      	b.n	800de34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	f003 0320 	and.w	r3, r3, #32
 800de2e:	2b20      	cmp	r3, #32
 800de30:	d0f0      	beq.n	800de14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800de32:	2300      	movs	r3, #0
}
 800de34:	4618      	mov	r0, r3
 800de36:	3714      	adds	r7, #20
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr
 800de40:	00030d40 	.word	0x00030d40

0800de44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de4c:	2300      	movs	r3, #0
 800de4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	3301      	adds	r3, #1
 800de54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	4a11      	ldr	r2, [pc, #68]	@ (800dea0 <USB_FlushRxFifo+0x5c>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d901      	bls.n	800de62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800de5e:	2303      	movs	r3, #3
 800de60:	e018      	b.n	800de94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	daf2      	bge.n	800de50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800de6a:	2300      	movs	r3, #0
 800de6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2210      	movs	r2, #16
 800de72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	3301      	adds	r3, #1
 800de78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	4a08      	ldr	r2, [pc, #32]	@ (800dea0 <USB_FlushRxFifo+0x5c>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d901      	bls.n	800de86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800de82:	2303      	movs	r3, #3
 800de84:	e006      	b.n	800de94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	691b      	ldr	r3, [r3, #16]
 800de8a:	f003 0310 	and.w	r3, r3, #16
 800de8e:	2b10      	cmp	r3, #16
 800de90:	d0f0      	beq.n	800de74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800de92:	2300      	movs	r3, #0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3714      	adds	r7, #20
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	00030d40 	.word	0x00030d40

0800dea4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	78fb      	ldrb	r3, [r7, #3]
 800debe:	68f9      	ldr	r1, [r7, #12]
 800dec0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dec4:	4313      	orrs	r3, r2
 800dec6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3714      	adds	r7, #20
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr

0800ded6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ded6:	b480      	push	{r7}
 800ded8:	b087      	sub	sp, #28
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	f003 0306 	and.w	r3, r3, #6
 800deee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d102      	bne.n	800defc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800def6:	2300      	movs	r3, #0
 800def8:	75fb      	strb	r3, [r7, #23]
 800defa:	e00a      	b.n	800df12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2b02      	cmp	r3, #2
 800df00:	d002      	beq.n	800df08 <USB_GetDevSpeed+0x32>
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2b06      	cmp	r3, #6
 800df06:	d102      	bne.n	800df0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800df08:	2302      	movs	r3, #2
 800df0a:	75fb      	strb	r3, [r7, #23]
 800df0c:	e001      	b.n	800df12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800df0e:	230f      	movs	r3, #15
 800df10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800df12:	7dfb      	ldrb	r3, [r7, #23]
}
 800df14:	4618      	mov	r0, r3
 800df16:	371c      	adds	r7, #28
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df20:	b480      	push	{r7}
 800df22:	b085      	sub	sp, #20
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	785b      	ldrb	r3, [r3, #1]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d139      	bne.n	800dfb0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df42:	69da      	ldr	r2, [r3, #28]
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f003 030f 	and.w	r3, r3, #15
 800df4c:	2101      	movs	r1, #1
 800df4e:	fa01 f303 	lsl.w	r3, r1, r3
 800df52:	b29b      	uxth	r3, r3
 800df54:	68f9      	ldr	r1, [r7, #12]
 800df56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df5a:	4313      	orrs	r3, r2
 800df5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	015a      	lsls	r2, r3, #5
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	4413      	add	r3, r2
 800df66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800df70:	2b00      	cmp	r3, #0
 800df72:	d153      	bne.n	800e01c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	015a      	lsls	r2, r3, #5
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	4413      	add	r3, r2
 800df7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	689b      	ldr	r3, [r3, #8]
 800df86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	791b      	ldrb	r3, [r3, #4]
 800df8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	059b      	lsls	r3, r3, #22
 800df96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df98:	431a      	orrs	r2, r3
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	0159      	lsls	r1, r3, #5
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	440b      	add	r3, r1
 800dfa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4b20      	ldr	r3, [pc, #128]	@ (800e02c <USB_ActivateEndpoint+0x10c>)
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	600b      	str	r3, [r1, #0]
 800dfae:	e035      	b.n	800e01c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfb6:	69da      	ldr	r2, [r3, #28]
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	f003 030f 	and.w	r3, r3, #15
 800dfc0:	2101      	movs	r1, #1
 800dfc2:	fa01 f303 	lsl.w	r3, r1, r3
 800dfc6:	041b      	lsls	r3, r3, #16
 800dfc8:	68f9      	ldr	r1, [r7, #12]
 800dfca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	015a      	lsls	r2, r3, #5
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	4413      	add	r3, r2
 800dfda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d119      	bne.n	800e01c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	015a      	lsls	r2, r3, #5
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	4413      	add	r3, r2
 800dff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	791b      	ldrb	r3, [r3, #4]
 800e002:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e004:	430b      	orrs	r3, r1
 800e006:	431a      	orrs	r2, r3
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	0159      	lsls	r1, r3, #5
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	440b      	add	r3, r1
 800e010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e014:	4619      	mov	r1, r3
 800e016:	4b05      	ldr	r3, [pc, #20]	@ (800e02c <USB_ActivateEndpoint+0x10c>)
 800e018:	4313      	orrs	r3, r2
 800e01a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3714      	adds	r7, #20
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop
 800e02c:	10008000 	.word	0x10008000

0800e030 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	785b      	ldrb	r3, [r3, #1]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d161      	bne.n	800e110 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	015a      	lsls	r2, r3, #5
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	4413      	add	r3, r2
 800e054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e05e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e062:	d11f      	bne.n	800e0a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	015a      	lsls	r2, r3, #5
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	4413      	add	r3, r2
 800e06c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	0151      	lsls	r1, r2, #5
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	440a      	add	r2, r1
 800e07a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e07e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e082:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	015a      	lsls	r2, r3, #5
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	4413      	add	r3, r2
 800e08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	0151      	lsls	r1, r2, #5
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	440a      	add	r2, r1
 800e09a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e09e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e0a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	f003 030f 	and.w	r3, r3, #15
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	43db      	mvns	r3, r3
 800e0be:	68f9      	ldr	r1, [r7, #12]
 800e0c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0ce:	69da      	ldr	r2, [r3, #28]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	f003 030f 	and.w	r3, r3, #15
 800e0d8:	2101      	movs	r1, #1
 800e0da:	fa01 f303 	lsl.w	r3, r1, r3
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	43db      	mvns	r3, r3
 800e0e2:	68f9      	ldr	r1, [r7, #12]
 800e0e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	015a      	lsls	r2, r3, #5
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	0159      	lsls	r1, r3, #5
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	440b      	add	r3, r1
 800e102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e106:	4619      	mov	r1, r3
 800e108:	4b35      	ldr	r3, [pc, #212]	@ (800e1e0 <USB_DeactivateEndpoint+0x1b0>)
 800e10a:	4013      	ands	r3, r2
 800e10c:	600b      	str	r3, [r1, #0]
 800e10e:	e060      	b.n	800e1d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	015a      	lsls	r2, r3, #5
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	4413      	add	r3, r2
 800e118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e122:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e126:	d11f      	bne.n	800e168 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	015a      	lsls	r2, r3, #5
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	4413      	add	r3, r2
 800e130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	68ba      	ldr	r2, [r7, #8]
 800e138:	0151      	lsls	r1, r2, #5
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	440a      	add	r2, r1
 800e13e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e142:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e146:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	015a      	lsls	r2, r3, #5
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	4413      	add	r3, r2
 800e150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	0151      	lsls	r1, r2, #5
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	440a      	add	r2, r1
 800e15e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e162:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e166:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e16e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	f003 030f 	and.w	r3, r3, #15
 800e178:	2101      	movs	r1, #1
 800e17a:	fa01 f303 	lsl.w	r3, r1, r3
 800e17e:	041b      	lsls	r3, r3, #16
 800e180:	43db      	mvns	r3, r3
 800e182:	68f9      	ldr	r1, [r7, #12]
 800e184:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e188:	4013      	ands	r3, r2
 800e18a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e192:	69da      	ldr	r2, [r3, #28]
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	f003 030f 	and.w	r3, r3, #15
 800e19c:	2101      	movs	r1, #1
 800e19e:	fa01 f303 	lsl.w	r3, r1, r3
 800e1a2:	041b      	lsls	r3, r3, #16
 800e1a4:	43db      	mvns	r3, r3
 800e1a6:	68f9      	ldr	r1, [r7, #12]
 800e1a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e1ac:	4013      	ands	r3, r2
 800e1ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	015a      	lsls	r2, r3, #5
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	0159      	lsls	r1, r3, #5
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	440b      	add	r3, r1
 800e1c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	4b05      	ldr	r3, [pc, #20]	@ (800e1e4 <USB_DeactivateEndpoint+0x1b4>)
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr
 800e1e0:	ec337800 	.word	0xec337800
 800e1e4:	eff37800 	.word	0xeff37800

0800e1e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08a      	sub	sp, #40	@ 0x28
 800e1ec:	af02      	add	r7, sp, #8
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	785b      	ldrb	r3, [r3, #1]
 800e204:	2b01      	cmp	r3, #1
 800e206:	f040 8181 	bne.w	800e50c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d132      	bne.n	800e278 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e212:	69bb      	ldr	r3, [r7, #24]
 800e214:	015a      	lsls	r2, r3, #5
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	4413      	add	r3, r2
 800e21a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e21e:	691a      	ldr	r2, [r3, #16]
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	0159      	lsls	r1, r3, #5
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	440b      	add	r3, r1
 800e228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e22c:	4619      	mov	r1, r3
 800e22e:	4ba5      	ldr	r3, [pc, #660]	@ (800e4c4 <USB_EPStartXfer+0x2dc>)
 800e230:	4013      	ands	r3, r2
 800e232:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	015a      	lsls	r2, r3, #5
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	4413      	add	r3, r2
 800e23c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	69ba      	ldr	r2, [r7, #24]
 800e244:	0151      	lsls	r1, r2, #5
 800e246:	69fa      	ldr	r2, [r7, #28]
 800e248:	440a      	add	r2, r1
 800e24a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e24e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	015a      	lsls	r2, r3, #5
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	4413      	add	r3, r2
 800e25c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e260:	691a      	ldr	r2, [r3, #16]
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	0159      	lsls	r1, r3, #5
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	440b      	add	r3, r1
 800e26a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e26e:	4619      	mov	r1, r3
 800e270:	4b95      	ldr	r3, [pc, #596]	@ (800e4c8 <USB_EPStartXfer+0x2e0>)
 800e272:	4013      	ands	r3, r2
 800e274:	610b      	str	r3, [r1, #16]
 800e276:	e092      	b.n	800e39e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	015a      	lsls	r2, r3, #5
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	4413      	add	r3, r2
 800e280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e284:	691a      	ldr	r2, [r3, #16]
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	0159      	lsls	r1, r3, #5
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	440b      	add	r3, r1
 800e28e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e292:	4619      	mov	r1, r3
 800e294:	4b8c      	ldr	r3, [pc, #560]	@ (800e4c8 <USB_EPStartXfer+0x2e0>)
 800e296:	4013      	ands	r3, r2
 800e298:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	015a      	lsls	r2, r3, #5
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2a6:	691a      	ldr	r2, [r3, #16]
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	0159      	lsls	r1, r3, #5
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	440b      	add	r3, r1
 800e2b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4b83      	ldr	r3, [pc, #524]	@ (800e4c4 <USB_EPStartXfer+0x2dc>)
 800e2b8:	4013      	ands	r3, r2
 800e2ba:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d11a      	bne.n	800e2f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	691a      	ldr	r2, [r3, #16]
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d903      	bls.n	800e2d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	689a      	ldr	r2, [r3, #8]
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	015a      	lsls	r2, r3, #5
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	4413      	add	r3, r2
 800e2de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2e2:	691b      	ldr	r3, [r3, #16]
 800e2e4:	69ba      	ldr	r2, [r7, #24]
 800e2e6:	0151      	lsls	r1, r2, #5
 800e2e8:	69fa      	ldr	r2, [r7, #28]
 800e2ea:	440a      	add	r2, r1
 800e2ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e2f4:	6113      	str	r3, [r2, #16]
 800e2f6:	e01b      	b.n	800e330 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	015a      	lsls	r2, r3, #5
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	4413      	add	r3, r2
 800e300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e304:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	6919      	ldr	r1, [r3, #16]
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	440b      	add	r3, r1
 800e310:	1e59      	subs	r1, r3, #1
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	689b      	ldr	r3, [r3, #8]
 800e316:	fbb1 f3f3 	udiv	r3, r1, r3
 800e31a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e31c:	4b6b      	ldr	r3, [pc, #428]	@ (800e4cc <USB_EPStartXfer+0x2e4>)
 800e31e:	400b      	ands	r3, r1
 800e320:	69b9      	ldr	r1, [r7, #24]
 800e322:	0148      	lsls	r0, r1, #5
 800e324:	69f9      	ldr	r1, [r7, #28]
 800e326:	4401      	add	r1, r0
 800e328:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e32c:	4313      	orrs	r3, r2
 800e32e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	015a      	lsls	r2, r3, #5
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	4413      	add	r3, r2
 800e338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e33c:	691a      	ldr	r2, [r3, #16]
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	691b      	ldr	r3, [r3, #16]
 800e342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e346:	69b9      	ldr	r1, [r7, #24]
 800e348:	0148      	lsls	r0, r1, #5
 800e34a:	69f9      	ldr	r1, [r7, #28]
 800e34c:	4401      	add	r1, r0
 800e34e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e352:	4313      	orrs	r3, r2
 800e354:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	791b      	ldrb	r3, [r3, #4]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d11f      	bne.n	800e39e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	015a      	lsls	r2, r3, #5
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	4413      	add	r3, r2
 800e366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	69ba      	ldr	r2, [r7, #24]
 800e36e:	0151      	lsls	r1, r2, #5
 800e370:	69fa      	ldr	r2, [r7, #28]
 800e372:	440a      	add	r2, r1
 800e374:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e378:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e37c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	015a      	lsls	r2, r3, #5
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	4413      	add	r3, r2
 800e386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	69ba      	ldr	r2, [r7, #24]
 800e38e:	0151      	lsls	r1, r2, #5
 800e390:	69fa      	ldr	r2, [r7, #28]
 800e392:	440a      	add	r2, r1
 800e394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e398:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e39c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e39e:	79fb      	ldrb	r3, [r7, #7]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d14b      	bne.n	800e43c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	69db      	ldr	r3, [r3, #28]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d009      	beq.n	800e3c0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	015a      	lsls	r2, r3, #5
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	69db      	ldr	r3, [r3, #28]
 800e3be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	791b      	ldrb	r3, [r3, #4]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d128      	bne.n	800e41a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3ce:	689b      	ldr	r3, [r3, #8]
 800e3d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d110      	bne.n	800e3fa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	015a      	lsls	r2, r3, #5
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	4413      	add	r3, r2
 800e3e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	69ba      	ldr	r2, [r7, #24]
 800e3e8:	0151      	lsls	r1, r2, #5
 800e3ea:	69fa      	ldr	r2, [r7, #28]
 800e3ec:	440a      	add	r2, r1
 800e3ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e3f6:	6013      	str	r3, [r2, #0]
 800e3f8:	e00f      	b.n	800e41a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	015a      	lsls	r2, r3, #5
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	4413      	add	r3, r2
 800e402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	69ba      	ldr	r2, [r7, #24]
 800e40a:	0151      	lsls	r1, r2, #5
 800e40c:	69fa      	ldr	r2, [r7, #28]
 800e40e:	440a      	add	r2, r1
 800e410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e418:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	015a      	lsls	r2, r3, #5
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	4413      	add	r3, r2
 800e422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	69ba      	ldr	r2, [r7, #24]
 800e42a:	0151      	lsls	r1, r2, #5
 800e42c:	69fa      	ldr	r2, [r7, #28]
 800e42e:	440a      	add	r2, r1
 800e430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e434:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e438:	6013      	str	r3, [r2, #0]
 800e43a:	e16a      	b.n	800e712 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	015a      	lsls	r2, r3, #5
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	4413      	add	r3, r2
 800e444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	69ba      	ldr	r2, [r7, #24]
 800e44c:	0151      	lsls	r1, r2, #5
 800e44e:	69fa      	ldr	r2, [r7, #28]
 800e450:	440a      	add	r2, r1
 800e452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e456:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e45a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	791b      	ldrb	r3, [r3, #4]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d015      	beq.n	800e490 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	691b      	ldr	r3, [r3, #16]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 8152 	beq.w	800e712 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	f003 030f 	and.w	r3, r3, #15
 800e47e:	2101      	movs	r1, #1
 800e480:	fa01 f303 	lsl.w	r3, r1, r3
 800e484:	69f9      	ldr	r1, [r7, #28]
 800e486:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e48a:	4313      	orrs	r3, r2
 800e48c:	634b      	str	r3, [r1, #52]	@ 0x34
 800e48e:	e140      	b.n	800e712 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e496:	689b      	ldr	r3, [r3, #8]
 800e498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d117      	bne.n	800e4d0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	015a      	lsls	r2, r3, #5
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	4413      	add	r3, r2
 800e4a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	69ba      	ldr	r2, [r7, #24]
 800e4b0:	0151      	lsls	r1, r2, #5
 800e4b2:	69fa      	ldr	r2, [r7, #28]
 800e4b4:	440a      	add	r2, r1
 800e4b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e4be:	6013      	str	r3, [r2, #0]
 800e4c0:	e016      	b.n	800e4f0 <USB_EPStartXfer+0x308>
 800e4c2:	bf00      	nop
 800e4c4:	e007ffff 	.word	0xe007ffff
 800e4c8:	fff80000 	.word	0xfff80000
 800e4cc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	015a      	lsls	r2, r3, #5
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	69ba      	ldr	r2, [r7, #24]
 800e4e0:	0151      	lsls	r1, r2, #5
 800e4e2:	69fa      	ldr	r2, [r7, #28]
 800e4e4:	440a      	add	r2, r1
 800e4e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	68d9      	ldr	r1, [r3, #12]
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	781a      	ldrb	r2, [r3, #0]
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	b298      	uxth	r0, r3
 800e4fe:	79fb      	ldrb	r3, [r7, #7]
 800e500:	9300      	str	r3, [sp, #0]
 800e502:	4603      	mov	r3, r0
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f000 f9b9 	bl	800e87c <USB_WritePacket>
 800e50a:	e102      	b.n	800e712 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e50c:	69bb      	ldr	r3, [r7, #24]
 800e50e:	015a      	lsls	r2, r3, #5
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	4413      	add	r3, r2
 800e514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e518:	691a      	ldr	r2, [r3, #16]
 800e51a:	69bb      	ldr	r3, [r7, #24]
 800e51c:	0159      	lsls	r1, r3, #5
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	440b      	add	r3, r1
 800e522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e526:	4619      	mov	r1, r3
 800e528:	4b7c      	ldr	r3, [pc, #496]	@ (800e71c <USB_EPStartXfer+0x534>)
 800e52a:	4013      	ands	r3, r2
 800e52c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	015a      	lsls	r2, r3, #5
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	4413      	add	r3, r2
 800e536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e53a:	691a      	ldr	r2, [r3, #16]
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	0159      	lsls	r1, r3, #5
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	440b      	add	r3, r1
 800e544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e548:	4619      	mov	r1, r3
 800e54a:	4b75      	ldr	r3, [pc, #468]	@ (800e720 <USB_EPStartXfer+0x538>)
 800e54c:	4013      	ands	r3, r2
 800e54e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d12f      	bne.n	800e5b6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d003      	beq.n	800e566 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	689a      	ldr	r2, [r3, #8]
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	689a      	ldr	r2, [r3, #8]
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	015a      	lsls	r2, r3, #5
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	4413      	add	r3, r2
 800e576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e57a:	691a      	ldr	r2, [r3, #16]
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	6a1b      	ldr	r3, [r3, #32]
 800e580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e584:	69b9      	ldr	r1, [r7, #24]
 800e586:	0148      	lsls	r0, r1, #5
 800e588:	69f9      	ldr	r1, [r7, #28]
 800e58a:	4401      	add	r1, r0
 800e58c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e590:	4313      	orrs	r3, r2
 800e592:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	015a      	lsls	r2, r3, #5
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	4413      	add	r3, r2
 800e59c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	69ba      	ldr	r2, [r7, #24]
 800e5a4:	0151      	lsls	r1, r2, #5
 800e5a6:	69fa      	ldr	r2, [r7, #28]
 800e5a8:	440a      	add	r2, r1
 800e5aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e5b2:	6113      	str	r3, [r2, #16]
 800e5b4:	e05f      	b.n	800e676 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d123      	bne.n	800e606 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	015a      	lsls	r2, r3, #5
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5ca:	691a      	ldr	r2, [r3, #16]
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5d4:	69b9      	ldr	r1, [r7, #24]
 800e5d6:	0148      	lsls	r0, r1, #5
 800e5d8:	69f9      	ldr	r1, [r7, #28]
 800e5da:	4401      	add	r1, r0
 800e5dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	015a      	lsls	r2, r3, #5
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	69ba      	ldr	r2, [r7, #24]
 800e5f4:	0151      	lsls	r1, r2, #5
 800e5f6:	69fa      	ldr	r2, [r7, #28]
 800e5f8:	440a      	add	r2, r1
 800e5fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e602:	6113      	str	r3, [r2, #16]
 800e604:	e037      	b.n	800e676 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	691a      	ldr	r2, [r3, #16]
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	4413      	add	r3, r2
 800e610:	1e5a      	subs	r2, r3, #1
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	689b      	ldr	r3, [r3, #8]
 800e616:	fbb2 f3f3 	udiv	r3, r2, r3
 800e61a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	8afa      	ldrh	r2, [r7, #22]
 800e622:	fb03 f202 	mul.w	r2, r3, r2
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	015a      	lsls	r2, r3, #5
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	4413      	add	r3, r2
 800e632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e636:	691a      	ldr	r2, [r3, #16]
 800e638:	8afb      	ldrh	r3, [r7, #22]
 800e63a:	04d9      	lsls	r1, r3, #19
 800e63c:	4b39      	ldr	r3, [pc, #228]	@ (800e724 <USB_EPStartXfer+0x53c>)
 800e63e:	400b      	ands	r3, r1
 800e640:	69b9      	ldr	r1, [r7, #24]
 800e642:	0148      	lsls	r0, r1, #5
 800e644:	69f9      	ldr	r1, [r7, #28]
 800e646:	4401      	add	r1, r0
 800e648:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e64c:	4313      	orrs	r3, r2
 800e64e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	015a      	lsls	r2, r3, #5
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	4413      	add	r3, r2
 800e658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e65c:	691a      	ldr	r2, [r3, #16]
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	6a1b      	ldr	r3, [r3, #32]
 800e662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e666:	69b9      	ldr	r1, [r7, #24]
 800e668:	0148      	lsls	r0, r1, #5
 800e66a:	69f9      	ldr	r1, [r7, #28]
 800e66c:	4401      	add	r1, r0
 800e66e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e672:	4313      	orrs	r3, r2
 800e674:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e676:	79fb      	ldrb	r3, [r7, #7]
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d10d      	bne.n	800e698 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d009      	beq.n	800e698 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	68d9      	ldr	r1, [r3, #12]
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	015a      	lsls	r2, r3, #5
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	4413      	add	r3, r2
 800e690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e694:	460a      	mov	r2, r1
 800e696:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	791b      	ldrb	r3, [r3, #4]
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d128      	bne.n	800e6f2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d110      	bne.n	800e6d2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	015a      	lsls	r2, r3, #5
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	69ba      	ldr	r2, [r7, #24]
 800e6c0:	0151      	lsls	r1, r2, #5
 800e6c2:	69fa      	ldr	r2, [r7, #28]
 800e6c4:	440a      	add	r2, r1
 800e6c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e6ce:	6013      	str	r3, [r2, #0]
 800e6d0:	e00f      	b.n	800e6f2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	015a      	lsls	r2, r3, #5
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	4413      	add	r3, r2
 800e6da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	69ba      	ldr	r2, [r7, #24]
 800e6e2:	0151      	lsls	r1, r2, #5
 800e6e4:	69fa      	ldr	r2, [r7, #28]
 800e6e6:	440a      	add	r2, r1
 800e6e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e6f0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	015a      	lsls	r2, r3, #5
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	69ba      	ldr	r2, [r7, #24]
 800e702:	0151      	lsls	r1, r2, #5
 800e704:	69fa      	ldr	r2, [r7, #28]
 800e706:	440a      	add	r2, r1
 800e708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e70c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e710:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3720      	adds	r7, #32
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	fff80000 	.word	0xfff80000
 800e720:	e007ffff 	.word	0xe007ffff
 800e724:	1ff80000 	.word	0x1ff80000

0800e728 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e728:	b480      	push	{r7}
 800e72a:	b087      	sub	sp, #28
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e732:	2300      	movs	r3, #0
 800e734:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e736:	2300      	movs	r3, #0
 800e738:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	785b      	ldrb	r3, [r3, #1]
 800e742:	2b01      	cmp	r3, #1
 800e744:	d14a      	bne.n	800e7dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	015a      	lsls	r2, r3, #5
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	4413      	add	r3, r2
 800e750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e75a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e75e:	f040 8086 	bne.w	800e86e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	015a      	lsls	r2, r3, #5
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	4413      	add	r3, r2
 800e76c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	683a      	ldr	r2, [r7, #0]
 800e774:	7812      	ldrb	r2, [r2, #0]
 800e776:	0151      	lsls	r1, r2, #5
 800e778:	693a      	ldr	r2, [r7, #16]
 800e77a:	440a      	add	r2, r1
 800e77c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e780:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e784:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	015a      	lsls	r2, r3, #5
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	4413      	add	r3, r2
 800e790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	683a      	ldr	r2, [r7, #0]
 800e798:	7812      	ldrb	r2, [r2, #0]
 800e79a:	0151      	lsls	r1, r2, #5
 800e79c:	693a      	ldr	r2, [r7, #16]
 800e79e:	440a      	add	r2, r1
 800e7a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e7a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d902      	bls.n	800e7c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	75fb      	strb	r3, [r7, #23]
          break;
 800e7be:	e056      	b.n	800e86e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	015a      	lsls	r2, r3, #5
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	4413      	add	r3, r2
 800e7ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e7d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e7d8:	d0e7      	beq.n	800e7aa <USB_EPStopXfer+0x82>
 800e7da:	e048      	b.n	800e86e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	015a      	lsls	r2, r3, #5
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e7f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e7f4:	d13b      	bne.n	800e86e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	015a      	lsls	r2, r3, #5
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	4413      	add	r3, r2
 800e800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	683a      	ldr	r2, [r7, #0]
 800e808:	7812      	ldrb	r2, [r2, #0]
 800e80a:	0151      	lsls	r1, r2, #5
 800e80c:	693a      	ldr	r2, [r7, #16]
 800e80e:	440a      	add	r2, r1
 800e810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e814:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e818:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	015a      	lsls	r2, r3, #5
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	4413      	add	r3, r2
 800e824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	683a      	ldr	r2, [r7, #0]
 800e82c:	7812      	ldrb	r2, [r2, #0]
 800e82e:	0151      	lsls	r1, r2, #5
 800e830:	693a      	ldr	r2, [r7, #16]
 800e832:	440a      	add	r2, r1
 800e834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e838:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e83c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3301      	adds	r3, #1
 800e842:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d902      	bls.n	800e854 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e84e:	2301      	movs	r3, #1
 800e850:	75fb      	strb	r3, [r7, #23]
          break;
 800e852:	e00c      	b.n	800e86e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	015a      	lsls	r2, r3, #5
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	4413      	add	r3, r2
 800e85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e868:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e86c:	d0e7      	beq.n	800e83e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e870:	4618      	mov	r0, r3
 800e872:	371c      	adds	r7, #28
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b089      	sub	sp, #36	@ 0x24
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	4611      	mov	r1, r2
 800e888:	461a      	mov	r2, r3
 800e88a:	460b      	mov	r3, r1
 800e88c:	71fb      	strb	r3, [r7, #7]
 800e88e:	4613      	mov	r3, r2
 800e890:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e89a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d123      	bne.n	800e8ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e8a2:	88bb      	ldrh	r3, [r7, #4]
 800e8a4:	3303      	adds	r3, #3
 800e8a6:	089b      	lsrs	r3, r3, #2
 800e8a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	61bb      	str	r3, [r7, #24]
 800e8ae:	e018      	b.n	800e8e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e8b0:	79fb      	ldrb	r3, [r7, #7]
 800e8b2:	031a      	lsls	r2, r3, #12
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e8bc:	461a      	mov	r2, r3
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	61bb      	str	r3, [r7, #24]
 800e8e2:	69ba      	ldr	r2, [r7, #24]
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d3e2      	bcc.n	800e8b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3724      	adds	r7, #36	@ 0x24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b08b      	sub	sp, #44	@ 0x2c
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	4613      	mov	r3, r2
 800e904:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e90e:	88fb      	ldrh	r3, [r7, #6]
 800e910:	089b      	lsrs	r3, r3, #2
 800e912:	b29b      	uxth	r3, r3
 800e914:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e916:	88fb      	ldrh	r3, [r7, #6]
 800e918:	f003 0303 	and.w	r3, r3, #3
 800e91c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e91e:	2300      	movs	r3, #0
 800e920:	623b      	str	r3, [r7, #32]
 800e922:	e014      	b.n	800e94e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e92e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e932:	3301      	adds	r3, #1
 800e934:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e938:	3301      	adds	r3, #1
 800e93a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e93e:	3301      	adds	r3, #1
 800e940:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e944:	3301      	adds	r3, #1
 800e946:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e948:	6a3b      	ldr	r3, [r7, #32]
 800e94a:	3301      	adds	r3, #1
 800e94c:	623b      	str	r3, [r7, #32]
 800e94e:	6a3a      	ldr	r2, [r7, #32]
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	429a      	cmp	r2, r3
 800e954:	d3e6      	bcc.n	800e924 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e956:	8bfb      	ldrh	r3, [r7, #30]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d01e      	beq.n	800e99a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e95c:	2300      	movs	r3, #0
 800e95e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e966:	461a      	mov	r2, r3
 800e968:	f107 0310 	add.w	r3, r7, #16
 800e96c:	6812      	ldr	r2, [r2, #0]
 800e96e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e970:	693a      	ldr	r2, [r7, #16]
 800e972:	6a3b      	ldr	r3, [r7, #32]
 800e974:	b2db      	uxtb	r3, r3
 800e976:	00db      	lsls	r3, r3, #3
 800e978:	fa22 f303 	lsr.w	r3, r2, r3
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e980:	701a      	strb	r2, [r3, #0]
      i++;
 800e982:	6a3b      	ldr	r3, [r7, #32]
 800e984:	3301      	adds	r3, #1
 800e986:	623b      	str	r3, [r7, #32]
      pDest++;
 800e988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e98a:	3301      	adds	r3, #1
 800e98c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e98e:	8bfb      	ldrh	r3, [r7, #30]
 800e990:	3b01      	subs	r3, #1
 800e992:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e994:	8bfb      	ldrh	r3, [r7, #30]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d1ea      	bne.n	800e970 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	372c      	adds	r7, #44	@ 0x2c
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr

0800e9a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	785b      	ldrb	r3, [r3, #1]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d12c      	bne.n	800ea1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	015a      	lsls	r2, r3, #5
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	db12      	blt.n	800e9fc <USB_EPSetStall+0x54>
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00f      	beq.n	800e9fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	015a      	lsls	r2, r3, #5
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	0151      	lsls	r1, r2, #5
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	440a      	add	r2, r1
 800e9f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e9fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	015a      	lsls	r2, r3, #5
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	4413      	add	r3, r2
 800ea04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	0151      	lsls	r1, r2, #5
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	440a      	add	r2, r1
 800ea12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ea1a:	6013      	str	r3, [r2, #0]
 800ea1c:	e02b      	b.n	800ea76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	015a      	lsls	r2, r3, #5
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	4413      	add	r3, r2
 800ea26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	db12      	blt.n	800ea56 <USB_EPSetStall+0xae>
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00f      	beq.n	800ea56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	015a      	lsls	r2, r3, #5
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	68ba      	ldr	r2, [r7, #8]
 800ea46:	0151      	lsls	r1, r2, #5
 800ea48:	68fa      	ldr	r2, [r7, #12]
 800ea4a:	440a      	add	r2, r1
 800ea4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ea54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	015a      	lsls	r2, r3, #5
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	68ba      	ldr	r2, [r7, #8]
 800ea66:	0151      	lsls	r1, r2, #5
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	440a      	add	r2, r1
 800ea6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ea74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b085      	sub	sp, #20
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	785b      	ldrb	r3, [r3, #1]
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d128      	bne.n	800eaf2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	015a      	lsls	r2, r3, #5
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	68ba      	ldr	r2, [r7, #8]
 800eab0:	0151      	lsls	r1, r2, #5
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	440a      	add	r2, r1
 800eab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eaba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eabe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	791b      	ldrb	r3, [r3, #4]
 800eac4:	2b03      	cmp	r3, #3
 800eac6:	d003      	beq.n	800ead0 <USB_EPClearStall+0x4c>
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	791b      	ldrb	r3, [r3, #4]
 800eacc:	2b02      	cmp	r3, #2
 800eace:	d138      	bne.n	800eb42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	015a      	lsls	r2, r3, #5
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	4413      	add	r3, r2
 800ead8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	0151      	lsls	r1, r2, #5
 800eae2:	68fa      	ldr	r2, [r7, #12]
 800eae4:	440a      	add	r2, r1
 800eae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eaea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eaee:	6013      	str	r3, [r2, #0]
 800eaf0:	e027      	b.n	800eb42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	015a      	lsls	r2, r3, #5
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	4413      	add	r3, r2
 800eafa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68ba      	ldr	r2, [r7, #8]
 800eb02:	0151      	lsls	r1, r2, #5
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	440a      	add	r2, r1
 800eb08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eb10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	791b      	ldrb	r3, [r3, #4]
 800eb16:	2b03      	cmp	r3, #3
 800eb18:	d003      	beq.n	800eb22 <USB_EPClearStall+0x9e>
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	791b      	ldrb	r3, [r3, #4]
 800eb1e:	2b02      	cmp	r3, #2
 800eb20:	d10f      	bne.n	800eb42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	015a      	lsls	r2, r3, #5
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	4413      	add	r3, r2
 800eb2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	68ba      	ldr	r2, [r7, #8]
 800eb32:	0151      	lsls	r1, r2, #5
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	440a      	add	r2, r1
 800eb38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3714      	adds	r7, #20
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	460b      	mov	r3, r1
 800eb5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eb6e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800eb72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	78fb      	ldrb	r3, [r7, #3]
 800eb7e:	011b      	lsls	r3, r3, #4
 800eb80:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800eb84:	68f9      	ldr	r1, [r7, #12]
 800eb86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eb8a:	4313      	orrs	r3, r2
 800eb8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800eb8e:	2300      	movs	r3, #0
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3714      	adds	r7, #20
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b085      	sub	sp, #20
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ebb6:	f023 0303 	bic.w	r3, r3, #3
 800ebba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ebca:	f023 0302 	bic.w	r3, r3, #2
 800ebce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3714      	adds	r7, #20
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr

0800ebde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ebde:	b480      	push	{r7}
 800ebe0:	b085      	sub	sp, #20
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	68fa      	ldr	r2, [r7, #12]
 800ebf4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ebf8:	f023 0303 	bic.w	r3, r3, #3
 800ebfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec0c:	f043 0302 	orr.w	r3, r3, #2
 800ec10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec12:	2300      	movs	r3, #0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3714      	adds	r7, #20
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	695b      	ldr	r3, [r3, #20]
 800ec2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	699b      	ldr	r3, [r3, #24]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	4013      	ands	r3, r2
 800ec36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ec38:	68fb      	ldr	r3, [r7, #12]
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3714      	adds	r7, #20
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec46:	b480      	push	{r7}
 800ec48:	b085      	sub	sp, #20
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec58:	699b      	ldr	r3, [r3, #24]
 800ec5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec62:	69db      	ldr	r3, [r3, #28]
 800ec64:	68ba      	ldr	r2, [r7, #8]
 800ec66:	4013      	ands	r3, r2
 800ec68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	0c1b      	lsrs	r3, r3, #16
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3714      	adds	r7, #20
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec7a:	b480      	push	{r7}
 800ec7c:	b085      	sub	sp, #20
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec8c:	699b      	ldr	r3, [r3, #24]
 800ec8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec96:	69db      	ldr	r3, [r3, #28]
 800ec98:	68ba      	ldr	r2, [r7, #8]
 800ec9a:	4013      	ands	r3, r2
 800ec9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	b29b      	uxth	r3, r3
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3714      	adds	r7, #20
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr

0800ecae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ecae:	b480      	push	{r7}
 800ecb0:	b085      	sub	sp, #20
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ecbe:	78fb      	ldrb	r3, [r7, #3]
 800ecc0:	015a      	lsls	r2, r3, #5
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	4413      	add	r3, r2
 800ecc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	68ba      	ldr	r2, [r7, #8]
 800ecd8:	4013      	ands	r3, r2
 800ecda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ecdc:	68bb      	ldr	r3, [r7, #8]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3714      	adds	r7, #20
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ecea:	b480      	push	{r7}
 800ecec:	b087      	sub	sp, #28
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ed0e:	78fb      	ldrb	r3, [r7, #3]
 800ed10:	f003 030f 	and.w	r3, r3, #15
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	fa22 f303 	lsr.w	r3, r2, r3
 800ed1a:	01db      	lsls	r3, r3, #7
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	693a      	ldr	r2, [r7, #16]
 800ed20:	4313      	orrs	r3, r2
 800ed22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ed24:	78fb      	ldrb	r3, [r7, #3]
 800ed26:	015a      	lsls	r2, r3, #5
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	4413      	add	r3, r2
 800ed2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	693a      	ldr	r2, [r7, #16]
 800ed34:	4013      	ands	r3, r2
 800ed36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ed38:	68bb      	ldr	r3, [r7, #8]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	371c      	adds	r7, #28
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr

0800ed46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ed46:	b480      	push	{r7}
 800ed48:	b083      	sub	sp, #12
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	695b      	ldr	r3, [r3, #20]
 800ed52:	f003 0301 	and.w	r3, r3, #1
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	370c      	adds	r7, #12
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr
	...

0800ed64 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b085      	sub	sp, #20
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed7e:	4619      	mov	r1, r3
 800ed80:	4b09      	ldr	r3, [pc, #36]	@ (800eda8 <USB_ActivateSetup+0x44>)
 800ed82:	4013      	ands	r3, r2
 800ed84:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	68fa      	ldr	r2, [r7, #12]
 800ed90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3714      	adds	r7, #20
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr
 800eda8:	fffff800 	.word	0xfffff800

0800edac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800edac:	b480      	push	{r7}
 800edae:	b087      	sub	sp, #28
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	460b      	mov	r3, r1
 800edb6:	607a      	str	r2, [r7, #4]
 800edb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	333c      	adds	r3, #60	@ 0x3c
 800edc2:	3304      	adds	r3, #4
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	4a26      	ldr	r2, [pc, #152]	@ (800ee64 <USB_EP0_OutStart+0xb8>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d90a      	bls.n	800ede6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eddc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ede0:	d101      	bne.n	800ede6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ede2:	2300      	movs	r3, #0
 800ede4:	e037      	b.n	800ee56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edec:	461a      	mov	r2, r3
 800edee:	2300      	movs	r3, #0
 800edf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edf8:	691b      	ldr	r3, [r3, #16]
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ee04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee0c:	691b      	ldr	r3, [r3, #16]
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee14:	f043 0318 	orr.w	r3, r3, #24
 800ee18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee20:	691b      	ldr	r3, [r3, #16]
 800ee22:	697a      	ldr	r2, [r7, #20]
 800ee24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee28:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ee2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ee2e:	7afb      	ldrb	r3, [r7, #11]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d10f      	bne.n	800ee54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	697a      	ldr	r2, [r7, #20]
 800ee4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee4e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ee52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	371c      	adds	r7, #28
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	4f54300a 	.word	0x4f54300a

0800ee68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ee70:	2300      	movs	r3, #0
 800ee72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	3301      	adds	r3, #1
 800ee78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	4a13      	ldr	r2, [pc, #76]	@ (800eecc <USB_CoreReset+0x64>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d901      	bls.n	800ee86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ee82:	2303      	movs	r3, #3
 800ee84:	e01b      	b.n	800eebe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	691b      	ldr	r3, [r3, #16]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	daf2      	bge.n	800ee74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	691b      	ldr	r3, [r3, #16]
 800ee96:	f043 0201 	orr.w	r2, r3, #1
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3301      	adds	r3, #1
 800eea2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	4a09      	ldr	r2, [pc, #36]	@ (800eecc <USB_CoreReset+0x64>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d901      	bls.n	800eeb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800eeac:	2303      	movs	r3, #3
 800eeae:	e006      	b.n	800eebe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	691b      	ldr	r3, [r3, #16]
 800eeb4:	f003 0301 	and.w	r3, r3, #1
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d0f0      	beq.n	800ee9e <USB_CoreReset+0x36>

  return HAL_OK;
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3714      	adds	r7, #20
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	00030d40 	.word	0x00030d40

0800eed0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	460b      	mov	r3, r1
 800eeda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800eedc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800eee0:	f003 f954 	bl	801218c <USBD_static_malloc>
 800eee4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d109      	bne.n	800ef00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	32b0      	adds	r2, #176	@ 0xb0
 800eef6:	2100      	movs	r1, #0
 800eef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800eefc:	2302      	movs	r3, #2
 800eefe:	e0d4      	b.n	800f0aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ef00:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ef04:	2100      	movs	r1, #0
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f004 f827 	bl	8012f5a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	32b0      	adds	r2, #176	@ 0xb0
 800ef16:	68f9      	ldr	r1, [r7, #12]
 800ef18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	32b0      	adds	r2, #176	@ 0xb0
 800ef26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	7c1b      	ldrb	r3, [r3, #16]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d138      	bne.n	800efaa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ef38:	4b5e      	ldr	r3, [pc, #376]	@ (800f0b4 <USBD_CDC_Init+0x1e4>)
 800ef3a:	7819      	ldrb	r1, [r3, #0]
 800ef3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef40:	2202      	movs	r2, #2
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f002 ffff 	bl	8011f46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ef48:	4b5a      	ldr	r3, [pc, #360]	@ (800f0b4 <USBD_CDC_Init+0x1e4>)
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	f003 020f 	and.w	r2, r3, #15
 800ef50:	6879      	ldr	r1, [r7, #4]
 800ef52:	4613      	mov	r3, r2
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	4413      	add	r3, r2
 800ef58:	009b      	lsls	r3, r3, #2
 800ef5a:	440b      	add	r3, r1
 800ef5c:	3324      	adds	r3, #36	@ 0x24
 800ef5e:	2201      	movs	r2, #1
 800ef60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ef62:	4b55      	ldr	r3, [pc, #340]	@ (800f0b8 <USBD_CDC_Init+0x1e8>)
 800ef64:	7819      	ldrb	r1, [r3, #0]
 800ef66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f002 ffea 	bl	8011f46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ef72:	4b51      	ldr	r3, [pc, #324]	@ (800f0b8 <USBD_CDC_Init+0x1e8>)
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	f003 020f 	and.w	r2, r3, #15
 800ef7a:	6879      	ldr	r1, [r7, #4]
 800ef7c:	4613      	mov	r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	4413      	add	r3, r2
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	440b      	add	r3, r1
 800ef86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ef8e:	4b4b      	ldr	r3, [pc, #300]	@ (800f0bc <USBD_CDC_Init+0x1ec>)
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	f003 020f 	and.w	r2, r3, #15
 800ef96:	6879      	ldr	r1, [r7, #4]
 800ef98:	4613      	mov	r3, r2
 800ef9a:	009b      	lsls	r3, r3, #2
 800ef9c:	4413      	add	r3, r2
 800ef9e:	009b      	lsls	r3, r3, #2
 800efa0:	440b      	add	r3, r1
 800efa2:	3326      	adds	r3, #38	@ 0x26
 800efa4:	2210      	movs	r2, #16
 800efa6:	801a      	strh	r2, [r3, #0]
 800efa8:	e035      	b.n	800f016 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800efaa:	4b42      	ldr	r3, [pc, #264]	@ (800f0b4 <USBD_CDC_Init+0x1e4>)
 800efac:	7819      	ldrb	r1, [r3, #0]
 800efae:	2340      	movs	r3, #64	@ 0x40
 800efb0:	2202      	movs	r2, #2
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f002 ffc7 	bl	8011f46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800efb8:	4b3e      	ldr	r3, [pc, #248]	@ (800f0b4 <USBD_CDC_Init+0x1e4>)
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	f003 020f 	and.w	r2, r3, #15
 800efc0:	6879      	ldr	r1, [r7, #4]
 800efc2:	4613      	mov	r3, r2
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	4413      	add	r3, r2
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	440b      	add	r3, r1
 800efcc:	3324      	adds	r3, #36	@ 0x24
 800efce:	2201      	movs	r2, #1
 800efd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800efd2:	4b39      	ldr	r3, [pc, #228]	@ (800f0b8 <USBD_CDC_Init+0x1e8>)
 800efd4:	7819      	ldrb	r1, [r3, #0]
 800efd6:	2340      	movs	r3, #64	@ 0x40
 800efd8:	2202      	movs	r2, #2
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f002 ffb3 	bl	8011f46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800efe0:	4b35      	ldr	r3, [pc, #212]	@ (800f0b8 <USBD_CDC_Init+0x1e8>)
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	f003 020f 	and.w	r2, r3, #15
 800efe8:	6879      	ldr	r1, [r7, #4]
 800efea:	4613      	mov	r3, r2
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	4413      	add	r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	440b      	add	r3, r1
 800eff4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eff8:	2201      	movs	r2, #1
 800effa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800effc:	4b2f      	ldr	r3, [pc, #188]	@ (800f0bc <USBD_CDC_Init+0x1ec>)
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	f003 020f 	and.w	r2, r3, #15
 800f004:	6879      	ldr	r1, [r7, #4]
 800f006:	4613      	mov	r3, r2
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	4413      	add	r3, r2
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	440b      	add	r3, r1
 800f010:	3326      	adds	r3, #38	@ 0x26
 800f012:	2210      	movs	r2, #16
 800f014:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f016:	4b29      	ldr	r3, [pc, #164]	@ (800f0bc <USBD_CDC_Init+0x1ec>)
 800f018:	7819      	ldrb	r1, [r3, #0]
 800f01a:	2308      	movs	r3, #8
 800f01c:	2203      	movs	r2, #3
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f002 ff91 	bl	8011f46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f024:	4b25      	ldr	r3, [pc, #148]	@ (800f0bc <USBD_CDC_Init+0x1ec>)
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	f003 020f 	and.w	r2, r3, #15
 800f02c:	6879      	ldr	r1, [r7, #4]
 800f02e:	4613      	mov	r3, r2
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	4413      	add	r3, r2
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	440b      	add	r3, r1
 800f038:	3324      	adds	r3, #36	@ 0x24
 800f03a:	2201      	movs	r2, #1
 800f03c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2200      	movs	r2, #0
 800f042:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	33b0      	adds	r3, #176	@ 0xb0
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f070:	2b00      	cmp	r3, #0
 800f072:	d101      	bne.n	800f078 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f074:	2302      	movs	r3, #2
 800f076:	e018      	b.n	800f0aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	7c1b      	ldrb	r3, [r3, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d10a      	bne.n	800f096 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f080:	4b0d      	ldr	r3, [pc, #52]	@ (800f0b8 <USBD_CDC_Init+0x1e8>)
 800f082:	7819      	ldrb	r1, [r3, #0]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f08a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f003 f848 	bl	8012124 <USBD_LL_PrepareReceive>
 800f094:	e008      	b.n	800f0a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f096:	4b08      	ldr	r3, [pc, #32]	@ (800f0b8 <USBD_CDC_Init+0x1e8>)
 800f098:	7819      	ldrb	r1, [r3, #0]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f0a0:	2340      	movs	r3, #64	@ 0x40
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f003 f83e 	bl	8012124 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f0a8:	2300      	movs	r3, #0
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	2400009b 	.word	0x2400009b
 800f0b8:	2400009c 	.word	0x2400009c
 800f0bc:	2400009d 	.word	0x2400009d

0800f0c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f0cc:	4b3a      	ldr	r3, [pc, #232]	@ (800f1b8 <USBD_CDC_DeInit+0xf8>)
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f002 ff5d 	bl	8011f92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f0d8:	4b37      	ldr	r3, [pc, #220]	@ (800f1b8 <USBD_CDC_DeInit+0xf8>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 020f 	and.w	r2, r3, #15
 800f0e0:	6879      	ldr	r1, [r7, #4]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	4413      	add	r3, r2
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	440b      	add	r3, r1
 800f0ec:	3324      	adds	r3, #36	@ 0x24
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f0f2:	4b32      	ldr	r3, [pc, #200]	@ (800f1bc <USBD_CDC_DeInit+0xfc>)
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f002 ff4a 	bl	8011f92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f0fe:	4b2f      	ldr	r3, [pc, #188]	@ (800f1bc <USBD_CDC_DeInit+0xfc>)
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	f003 020f 	and.w	r2, r3, #15
 800f106:	6879      	ldr	r1, [r7, #4]
 800f108:	4613      	mov	r3, r2
 800f10a:	009b      	lsls	r3, r3, #2
 800f10c:	4413      	add	r3, r2
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	440b      	add	r3, r1
 800f112:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f116:	2200      	movs	r2, #0
 800f118:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f11a:	4b29      	ldr	r3, [pc, #164]	@ (800f1c0 <USBD_CDC_DeInit+0x100>)
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	4619      	mov	r1, r3
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f002 ff36 	bl	8011f92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f126:	4b26      	ldr	r3, [pc, #152]	@ (800f1c0 <USBD_CDC_DeInit+0x100>)
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	f003 020f 	and.w	r2, r3, #15
 800f12e:	6879      	ldr	r1, [r7, #4]
 800f130:	4613      	mov	r3, r2
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	4413      	add	r3, r2
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	440b      	add	r3, r1
 800f13a:	3324      	adds	r3, #36	@ 0x24
 800f13c:	2200      	movs	r2, #0
 800f13e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f140:	4b1f      	ldr	r3, [pc, #124]	@ (800f1c0 <USBD_CDC_DeInit+0x100>)
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	f003 020f 	and.w	r2, r3, #15
 800f148:	6879      	ldr	r1, [r7, #4]
 800f14a:	4613      	mov	r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4413      	add	r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	440b      	add	r3, r1
 800f154:	3326      	adds	r3, #38	@ 0x26
 800f156:	2200      	movs	r2, #0
 800f158:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	32b0      	adds	r2, #176	@ 0xb0
 800f164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d01f      	beq.n	800f1ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	33b0      	adds	r3, #176	@ 0xb0
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	4413      	add	r3, r2
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	32b0      	adds	r2, #176	@ 0xb0
 800f18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f18e:	4618      	mov	r0, r3
 800f190:	f003 f80a 	bl	80121a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	32b0      	adds	r2, #176	@ 0xb0
 800f19e:	2100      	movs	r1, #0
 800f1a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3708      	adds	r7, #8
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	2400009b 	.word	0x2400009b
 800f1bc:	2400009c 	.word	0x2400009c
 800f1c0:	2400009d 	.word	0x2400009d

0800f1c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	32b0      	adds	r2, #176	@ 0xb0
 800f1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d101      	bne.n	800f1f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f1f0:	2303      	movs	r3, #3
 800f1f2:	e0bf      	b.n	800f374 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d050      	beq.n	800f2a2 <USBD_CDC_Setup+0xde>
 800f200:	2b20      	cmp	r3, #32
 800f202:	f040 80af 	bne.w	800f364 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	88db      	ldrh	r3, [r3, #6]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d03a      	beq.n	800f284 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	b25b      	sxtb	r3, r3
 800f214:	2b00      	cmp	r3, #0
 800f216:	da1b      	bge.n	800f250 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	33b0      	adds	r3, #176	@ 0xb0
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	4413      	add	r3, r2
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	683a      	ldr	r2, [r7, #0]
 800f22c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f22e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f230:	683a      	ldr	r2, [r7, #0]
 800f232:	88d2      	ldrh	r2, [r2, #6]
 800f234:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	88db      	ldrh	r3, [r3, #6]
 800f23a:	2b07      	cmp	r3, #7
 800f23c:	bf28      	it	cs
 800f23e:	2307      	movcs	r3, #7
 800f240:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	89fa      	ldrh	r2, [r7, #14]
 800f246:	4619      	mov	r1, r3
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f001 fdb1 	bl	8010db0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f24e:	e090      	b.n	800f372 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	785a      	ldrb	r2, [r3, #1]
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	88db      	ldrh	r3, [r3, #6]
 800f25e:	2b3f      	cmp	r3, #63	@ 0x3f
 800f260:	d803      	bhi.n	800f26a <USBD_CDC_Setup+0xa6>
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	88db      	ldrh	r3, [r3, #6]
 800f266:	b2da      	uxtb	r2, r3
 800f268:	e000      	b.n	800f26c <USBD_CDC_Setup+0xa8>
 800f26a:	2240      	movs	r2, #64	@ 0x40
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f272:	6939      	ldr	r1, [r7, #16]
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f27a:	461a      	mov	r2, r3
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f001 fdc3 	bl	8010e08 <USBD_CtlPrepareRx>
      break;
 800f282:	e076      	b.n	800f372 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	33b0      	adds	r3, #176	@ 0xb0
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	4413      	add	r3, r2
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	689b      	ldr	r3, [r3, #8]
 800f296:	683a      	ldr	r2, [r7, #0]
 800f298:	7850      	ldrb	r0, [r2, #1]
 800f29a:	2200      	movs	r2, #0
 800f29c:	6839      	ldr	r1, [r7, #0]
 800f29e:	4798      	blx	r3
      break;
 800f2a0:	e067      	b.n	800f372 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	785b      	ldrb	r3, [r3, #1]
 800f2a6:	2b0b      	cmp	r3, #11
 800f2a8:	d851      	bhi.n	800f34e <USBD_CDC_Setup+0x18a>
 800f2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800f2b0 <USBD_CDC_Setup+0xec>)
 800f2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b0:	0800f2e1 	.word	0x0800f2e1
 800f2b4:	0800f35d 	.word	0x0800f35d
 800f2b8:	0800f34f 	.word	0x0800f34f
 800f2bc:	0800f34f 	.word	0x0800f34f
 800f2c0:	0800f34f 	.word	0x0800f34f
 800f2c4:	0800f34f 	.word	0x0800f34f
 800f2c8:	0800f34f 	.word	0x0800f34f
 800f2cc:	0800f34f 	.word	0x0800f34f
 800f2d0:	0800f34f 	.word	0x0800f34f
 800f2d4:	0800f34f 	.word	0x0800f34f
 800f2d8:	0800f30b 	.word	0x0800f30b
 800f2dc:	0800f335 	.word	0x0800f335
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	2b03      	cmp	r3, #3
 800f2ea:	d107      	bne.n	800f2fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f2ec:	f107 030a 	add.w	r3, r7, #10
 800f2f0:	2202      	movs	r2, #2
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f001 fd5b 	bl	8010db0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f2fa:	e032      	b.n	800f362 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f2fc:	6839      	ldr	r1, [r7, #0]
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f001 fce5 	bl	8010cce <USBD_CtlError>
            ret = USBD_FAIL;
 800f304:	2303      	movs	r3, #3
 800f306:	75fb      	strb	r3, [r7, #23]
          break;
 800f308:	e02b      	b.n	800f362 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f310:	b2db      	uxtb	r3, r3
 800f312:	2b03      	cmp	r3, #3
 800f314:	d107      	bne.n	800f326 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f316:	f107 030d 	add.w	r3, r7, #13
 800f31a:	2201      	movs	r2, #1
 800f31c:	4619      	mov	r1, r3
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f001 fd46 	bl	8010db0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f324:	e01d      	b.n	800f362 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f326:	6839      	ldr	r1, [r7, #0]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f001 fcd0 	bl	8010cce <USBD_CtlError>
            ret = USBD_FAIL;
 800f32e:	2303      	movs	r3, #3
 800f330:	75fb      	strb	r3, [r7, #23]
          break;
 800f332:	e016      	b.n	800f362 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	2b03      	cmp	r3, #3
 800f33e:	d00f      	beq.n	800f360 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f340:	6839      	ldr	r1, [r7, #0]
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f001 fcc3 	bl	8010cce <USBD_CtlError>
            ret = USBD_FAIL;
 800f348:	2303      	movs	r3, #3
 800f34a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f34c:	e008      	b.n	800f360 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f34e:	6839      	ldr	r1, [r7, #0]
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f001 fcbc 	bl	8010cce <USBD_CtlError>
          ret = USBD_FAIL;
 800f356:	2303      	movs	r3, #3
 800f358:	75fb      	strb	r3, [r7, #23]
          break;
 800f35a:	e002      	b.n	800f362 <USBD_CDC_Setup+0x19e>
          break;
 800f35c:	bf00      	nop
 800f35e:	e008      	b.n	800f372 <USBD_CDC_Setup+0x1ae>
          break;
 800f360:	bf00      	nop
      }
      break;
 800f362:	e006      	b.n	800f372 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f364:	6839      	ldr	r1, [r7, #0]
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f001 fcb1 	bl	8010cce <USBD_CtlError>
      ret = USBD_FAIL;
 800f36c:	2303      	movs	r3, #3
 800f36e:	75fb      	strb	r3, [r7, #23]
      break;
 800f370:	bf00      	nop
  }

  return (uint8_t)ret;
 800f372:	7dfb      	ldrb	r3, [r7, #23]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3718      	adds	r7, #24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	460b      	mov	r3, r1
 800f386:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f38e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	32b0      	adds	r2, #176	@ 0xb0
 800f39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d101      	bne.n	800f3a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f3a2:	2303      	movs	r3, #3
 800f3a4:	e065      	b.n	800f472 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	32b0      	adds	r2, #176	@ 0xb0
 800f3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f3b6:	78fb      	ldrb	r3, [r7, #3]
 800f3b8:	f003 020f 	and.w	r2, r3, #15
 800f3bc:	6879      	ldr	r1, [r7, #4]
 800f3be:	4613      	mov	r3, r2
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	4413      	add	r3, r2
 800f3c4:	009b      	lsls	r3, r3, #2
 800f3c6:	440b      	add	r3, r1
 800f3c8:	3318      	adds	r3, #24
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d02f      	beq.n	800f430 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f3d0:	78fb      	ldrb	r3, [r7, #3]
 800f3d2:	f003 020f 	and.w	r2, r3, #15
 800f3d6:	6879      	ldr	r1, [r7, #4]
 800f3d8:	4613      	mov	r3, r2
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	4413      	add	r3, r2
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	440b      	add	r3, r1
 800f3e2:	3318      	adds	r3, #24
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	78fb      	ldrb	r3, [r7, #3]
 800f3e8:	f003 010f 	and.w	r1, r3, #15
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	00db      	lsls	r3, r3, #3
 800f3f2:	440b      	add	r3, r1
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	4403      	add	r3, r0
 800f3f8:	3344      	adds	r3, #68	@ 0x44
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800f400:	fb01 f303 	mul.w	r3, r1, r3
 800f404:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f406:	2b00      	cmp	r3, #0
 800f408:	d112      	bne.n	800f430 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f40a:	78fb      	ldrb	r3, [r7, #3]
 800f40c:	f003 020f 	and.w	r2, r3, #15
 800f410:	6879      	ldr	r1, [r7, #4]
 800f412:	4613      	mov	r3, r2
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	4413      	add	r3, r2
 800f418:	009b      	lsls	r3, r3, #2
 800f41a:	440b      	add	r3, r1
 800f41c:	3318      	adds	r3, #24
 800f41e:	2200      	movs	r2, #0
 800f420:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f422:	78f9      	ldrb	r1, [r7, #3]
 800f424:	2300      	movs	r3, #0
 800f426:	2200      	movs	r2, #0
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f002 fe5a 	bl	80120e2 <USBD_LL_Transmit>
 800f42e:	e01f      	b.n	800f470 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	2200      	movs	r2, #0
 800f434:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	33b0      	adds	r3, #176	@ 0xb0
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	4413      	add	r3, r2
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	691b      	ldr	r3, [r3, #16]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d010      	beq.n	800f470 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	33b0      	adds	r3, #176	@ 0xb0
 800f458:	009b      	lsls	r3, r3, #2
 800f45a:	4413      	add	r3, r2
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	691b      	ldr	r3, [r3, #16]
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f466:	68ba      	ldr	r2, [r7, #8]
 800f468:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f46c:	78fa      	ldrb	r2, [r7, #3]
 800f46e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b084      	sub	sp, #16
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
 800f482:	460b      	mov	r3, r1
 800f484:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	32b0      	adds	r2, #176	@ 0xb0
 800f490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f494:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	32b0      	adds	r2, #176	@ 0xb0
 800f4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d101      	bne.n	800f4ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	e01a      	b.n	800f4e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f4ac:	78fb      	ldrb	r3, [r7, #3]
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f002 fe58 	bl	8012166 <USBD_LL_GetRxDataSize>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	33b0      	adds	r3, #176	@ 0xb0
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	4413      	add	r3, r2
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f4dc:	4611      	mov	r1, r2
 800f4de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}

0800f4ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b084      	sub	sp, #16
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	32b0      	adds	r2, #176	@ 0xb0
 800f4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f500:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d101      	bne.n	800f50c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f508:	2303      	movs	r3, #3
 800f50a:	e024      	b.n	800f556 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	33b0      	adds	r3, #176	@ 0xb0
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4413      	add	r3, r2
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d019      	beq.n	800f554 <USBD_CDC_EP0_RxReady+0x6a>
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f526:	2bff      	cmp	r3, #255	@ 0xff
 800f528:	d014      	beq.n	800f554 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	33b0      	adds	r3, #176	@ 0xb0
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	4413      	add	r3, r2
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f542:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f54a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	22ff      	movs	r2, #255	@ 0xff
 800f550:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
	...

0800f560 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b086      	sub	sp, #24
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f568:	2182      	movs	r1, #130	@ 0x82
 800f56a:	4818      	ldr	r0, [pc, #96]	@ (800f5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f56c:	f000 fd4f 	bl	801000e <USBD_GetEpDesc>
 800f570:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f572:	2101      	movs	r1, #1
 800f574:	4815      	ldr	r0, [pc, #84]	@ (800f5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f576:	f000 fd4a 	bl	801000e <USBD_GetEpDesc>
 800f57a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f57c:	2181      	movs	r1, #129	@ 0x81
 800f57e:	4813      	ldr	r0, [pc, #76]	@ (800f5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f580:	f000 fd45 	bl	801000e <USBD_GetEpDesc>
 800f584:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d002      	beq.n	800f592 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	2210      	movs	r2, #16
 800f590:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d006      	beq.n	800f5a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	2200      	movs	r2, #0
 800f59c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f5a0:	711a      	strb	r2, [r3, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d006      	beq.n	800f5ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f5b4:	711a      	strb	r2, [r3, #4]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2243      	movs	r2, #67	@ 0x43
 800f5be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f5c0:	4b02      	ldr	r3, [pc, #8]	@ (800f5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3718      	adds	r7, #24
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	24000058 	.word	0x24000058

0800f5d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b086      	sub	sp, #24
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f5d8:	2182      	movs	r1, #130	@ 0x82
 800f5da:	4818      	ldr	r0, [pc, #96]	@ (800f63c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f5dc:	f000 fd17 	bl	801000e <USBD_GetEpDesc>
 800f5e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f5e2:	2101      	movs	r1, #1
 800f5e4:	4815      	ldr	r0, [pc, #84]	@ (800f63c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f5e6:	f000 fd12 	bl	801000e <USBD_GetEpDesc>
 800f5ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f5ec:	2181      	movs	r1, #129	@ 0x81
 800f5ee:	4813      	ldr	r0, [pc, #76]	@ (800f63c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f5f0:	f000 fd0d 	bl	801000e <USBD_GetEpDesc>
 800f5f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d002      	beq.n	800f602 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	2210      	movs	r2, #16
 800f600:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d006      	beq.n	800f616 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	2200      	movs	r2, #0
 800f60c:	711a      	strb	r2, [r3, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	f042 0202 	orr.w	r2, r2, #2
 800f614:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d006      	beq.n	800f62a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2200      	movs	r2, #0
 800f620:	711a      	strb	r2, [r3, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	f042 0202 	orr.w	r2, r2, #2
 800f628:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2243      	movs	r2, #67	@ 0x43
 800f62e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f630:	4b02      	ldr	r3, [pc, #8]	@ (800f63c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f632:	4618      	mov	r0, r3
 800f634:	3718      	adds	r7, #24
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	24000058 	.word	0x24000058

0800f640 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f648:	2182      	movs	r1, #130	@ 0x82
 800f64a:	4818      	ldr	r0, [pc, #96]	@ (800f6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f64c:	f000 fcdf 	bl	801000e <USBD_GetEpDesc>
 800f650:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f652:	2101      	movs	r1, #1
 800f654:	4815      	ldr	r0, [pc, #84]	@ (800f6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f656:	f000 fcda 	bl	801000e <USBD_GetEpDesc>
 800f65a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f65c:	2181      	movs	r1, #129	@ 0x81
 800f65e:	4813      	ldr	r0, [pc, #76]	@ (800f6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f660:	f000 fcd5 	bl	801000e <USBD_GetEpDesc>
 800f664:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d002      	beq.n	800f672 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	2210      	movs	r2, #16
 800f670:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d006      	beq.n	800f686 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	2200      	movs	r2, #0
 800f67c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f680:	711a      	strb	r2, [r3, #4]
 800f682:	2200      	movs	r2, #0
 800f684:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d006      	beq.n	800f69a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2200      	movs	r2, #0
 800f690:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f694:	711a      	strb	r2, [r3, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2243      	movs	r2, #67	@ 0x43
 800f69e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f6a0:	4b02      	ldr	r3, [pc, #8]	@ (800f6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3718      	adds	r7, #24
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	24000058 	.word	0x24000058

0800f6b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	220a      	movs	r2, #10
 800f6bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f6be:	4b03      	ldr	r3, [pc, #12]	@ (800f6cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr
 800f6cc:	24000014 	.word	0x24000014

0800f6d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d101      	bne.n	800f6e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f6e0:	2303      	movs	r3, #3
 800f6e2:	e009      	b.n	800f6f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	33b0      	adds	r3, #176	@ 0xb0
 800f6ee:	009b      	lsls	r3, r3, #2
 800f6f0:	4413      	add	r3, r2
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f6f6:	2300      	movs	r3, #0
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	370c      	adds	r7, #12
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f704:	b480      	push	{r7}
 800f706:	b087      	sub	sp, #28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	32b0      	adds	r2, #176	@ 0xb0
 800f71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f71e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d101      	bne.n	800f72a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f726:	2303      	movs	r3, #3
 800f728:	e008      	b.n	800f73c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	68ba      	ldr	r2, [r7, #8]
 800f72e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	371c      	adds	r7, #28
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f748:	b480      	push	{r7}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	32b0      	adds	r2, #176	@ 0xb0
 800f75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f760:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d101      	bne.n	800f76c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f768:	2303      	movs	r3, #3
 800f76a:	e004      	b.n	800f776 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	683a      	ldr	r2, [r7, #0]
 800f770:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3714      	adds	r7, #20
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
	...

0800f784 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	32b0      	adds	r2, #176	@ 0xb0
 800f796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f79a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f79c:	2301      	movs	r3, #1
 800f79e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d101      	bne.n	800f7aa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f7a6:	2303      	movs	r3, #3
 800f7a8:	e025      	b.n	800f7f6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d11f      	bne.n	800f7f4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f7bc:	4b10      	ldr	r3, [pc, #64]	@ (800f800 <USBD_CDC_TransmitPacket+0x7c>)
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	f003 020f 	and.w	r2, r3, #15
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	4413      	add	r3, r2
 800f7d2:	009b      	lsls	r3, r3, #2
 800f7d4:	4403      	add	r3, r0
 800f7d6:	3318      	adds	r3, #24
 800f7d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f7da:	4b09      	ldr	r3, [pc, #36]	@ (800f800 <USBD_CDC_TransmitPacket+0x7c>)
 800f7dc:	7819      	ldrb	r1, [r3, #0]
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f002 fc79 	bl	80120e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	2400009b 	.word	0x2400009b

0800f804 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	32b0      	adds	r2, #176	@ 0xb0
 800f816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f81a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	32b0      	adds	r2, #176	@ 0xb0
 800f826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d101      	bne.n	800f832 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f82e:	2303      	movs	r3, #3
 800f830:	e018      	b.n	800f864 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	7c1b      	ldrb	r3, [r3, #16]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10a      	bne.n	800f850 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f83a:	4b0c      	ldr	r3, [pc, #48]	@ (800f86c <USBD_CDC_ReceivePacket+0x68>)
 800f83c:	7819      	ldrb	r1, [r3, #0]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f002 fc6b 	bl	8012124 <USBD_LL_PrepareReceive>
 800f84e:	e008      	b.n	800f862 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f850:	4b06      	ldr	r3, [pc, #24]	@ (800f86c <USBD_CDC_ReceivePacket+0x68>)
 800f852:	7819      	ldrb	r1, [r3, #0]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f85a:	2340      	movs	r3, #64	@ 0x40
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f002 fc61 	bl	8012124 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3710      	adds	r7, #16
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	2400009c 	.word	0x2400009c

0800f870 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	4613      	mov	r3, r2
 800f87c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d101      	bne.n	800f888 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f884:	2303      	movs	r3, #3
 800f886:	e01f      	b.n	800f8c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2200      	movs	r2, #0
 800f88c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2200      	movs	r2, #0
 800f89c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d003      	beq.n	800f8ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	79fa      	ldrb	r2, [r7, #7]
 800f8ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	f002 fad7 	bl	8011e70 <USBD_LL_Init>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f8c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3718      	adds	r7, #24
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d101      	bne.n	800f8e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f8e4:	2303      	movs	r3, #3
 800f8e6:	e025      	b.n	800f934 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	683a      	ldr	r2, [r7, #0]
 800f8ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	32ae      	adds	r2, #174	@ 0xae
 800f8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f900:	2b00      	cmp	r3, #0
 800f902:	d00f      	beq.n	800f924 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	32ae      	adds	r2, #174	@ 0xae
 800f90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f914:	f107 020e 	add.w	r2, r7, #14
 800f918:	4610      	mov	r0, r2
 800f91a:	4798      	blx	r3
 800f91c:	4602      	mov	r2, r0
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f92a:	1c5a      	adds	r2, r3, #1
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f932:	2300      	movs	r3, #0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f002 fae3 	bl	8011f10 <USBD_LL_Start>
 800f94a:	4603      	mov	r3, r0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3708      	adds	r7, #8
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f95c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f95e:	4618      	mov	r0, r3
 800f960:	370c      	adds	r7, #12
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr

0800f96a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f96a:	b580      	push	{r7, lr}
 800f96c:	b084      	sub	sp, #16
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
 800f972:	460b      	mov	r3, r1
 800f974:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f976:	2300      	movs	r3, #0
 800f978:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f980:	2b00      	cmp	r3, #0
 800f982:	d009      	beq.n	800f998 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	78fa      	ldrb	r2, [r7, #3]
 800f98e:	4611      	mov	r1, r2
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	4798      	blx	r3
 800f994:	4603      	mov	r3, r0
 800f996:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f998:	7bfb      	ldrb	r3, [r7, #15]
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	b084      	sub	sp, #16
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	78fa      	ldrb	r2, [r7, #3]
 800f9bc:	4611      	mov	r1, r2
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	4798      	blx	r3
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d001      	beq.n	800f9cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f9c8:	2303      	movs	r3, #3
 800f9ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b084      	sub	sp, #16
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f9e6:	6839      	ldr	r1, [r7, #0]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f001 f936 	bl	8010c5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fa0a:	f003 031f 	and.w	r3, r3, #31
 800fa0e:	2b02      	cmp	r3, #2
 800fa10:	d01a      	beq.n	800fa48 <USBD_LL_SetupStage+0x72>
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	d822      	bhi.n	800fa5c <USBD_LL_SetupStage+0x86>
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d002      	beq.n	800fa20 <USBD_LL_SetupStage+0x4a>
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	d00a      	beq.n	800fa34 <USBD_LL_SetupStage+0x5e>
 800fa1e:	e01d      	b.n	800fa5c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fa26:	4619      	mov	r1, r3
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f000 fb63 	bl	80100f4 <USBD_StdDevReq>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	73fb      	strb	r3, [r7, #15]
      break;
 800fa32:	e020      	b.n	800fa76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 fbcb 	bl	80101d8 <USBD_StdItfReq>
 800fa42:	4603      	mov	r3, r0
 800fa44:	73fb      	strb	r3, [r7, #15]
      break;
 800fa46:	e016      	b.n	800fa76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fa4e:	4619      	mov	r1, r3
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f000 fc2d 	bl	80102b0 <USBD_StdEPReq>
 800fa56:	4603      	mov	r3, r0
 800fa58:	73fb      	strb	r3, [r7, #15]
      break;
 800fa5a:	e00c      	b.n	800fa76 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fa62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	4619      	mov	r1, r3
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f002 fab0 	bl	8011fd0 <USBD_LL_StallEP>
 800fa70:	4603      	mov	r3, r0
 800fa72:	73fb      	strb	r3, [r7, #15]
      break;
 800fa74:	bf00      	nop
  }

  return ret;
 800fa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3710      	adds	r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	460b      	mov	r3, r1
 800fa8a:	607a      	str	r2, [r7, #4]
 800fa8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fa92:	7afb      	ldrb	r3, [r7, #11]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d16e      	bne.n	800fb76 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fa9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800faa6:	2b03      	cmp	r3, #3
 800faa8:	f040 8098 	bne.w	800fbdc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	689a      	ldr	r2, [r3, #8]
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d913      	bls.n	800fae0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	689a      	ldr	r2, [r3, #8]
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	1ad2      	subs	r2, r2, r3
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	68da      	ldr	r2, [r3, #12]
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	689b      	ldr	r3, [r3, #8]
 800face:	4293      	cmp	r3, r2
 800fad0:	bf28      	it	cs
 800fad2:	4613      	movcs	r3, r2
 800fad4:	461a      	mov	r2, r3
 800fad6:	6879      	ldr	r1, [r7, #4]
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f001 f9b2 	bl	8010e42 <USBD_CtlContinueRx>
 800fade:	e07d      	b.n	800fbdc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fae6:	f003 031f 	and.w	r3, r3, #31
 800faea:	2b02      	cmp	r3, #2
 800faec:	d014      	beq.n	800fb18 <USBD_LL_DataOutStage+0x98>
 800faee:	2b02      	cmp	r3, #2
 800faf0:	d81d      	bhi.n	800fb2e <USBD_LL_DataOutStage+0xae>
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d002      	beq.n	800fafc <USBD_LL_DataOutStage+0x7c>
 800faf6:	2b01      	cmp	r3, #1
 800faf8:	d003      	beq.n	800fb02 <USBD_LL_DataOutStage+0x82>
 800fafa:	e018      	b.n	800fb2e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fafc:	2300      	movs	r3, #0
 800fafe:	75bb      	strb	r3, [r7, #22]
            break;
 800fb00:	e018      	b.n	800fb34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f000 fa64 	bl	800ffda <USBD_CoreFindIF>
 800fb12:	4603      	mov	r3, r0
 800fb14:	75bb      	strb	r3, [r7, #22]
            break;
 800fb16:	e00d      	b.n	800fb34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	4619      	mov	r1, r3
 800fb22:	68f8      	ldr	r0, [r7, #12]
 800fb24:	f000 fa66 	bl	800fff4 <USBD_CoreFindEP>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	75bb      	strb	r3, [r7, #22]
            break;
 800fb2c:	e002      	b.n	800fb34 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	75bb      	strb	r3, [r7, #22]
            break;
 800fb32:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fb34:	7dbb      	ldrb	r3, [r7, #22]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d119      	bne.n	800fb6e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	2b03      	cmp	r3, #3
 800fb44:	d113      	bne.n	800fb6e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fb46:	7dba      	ldrb	r2, [r7, #22]
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	32ae      	adds	r2, #174	@ 0xae
 800fb4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb50:	691b      	ldr	r3, [r3, #16]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d00b      	beq.n	800fb6e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fb56:	7dba      	ldrb	r2, [r7, #22]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fb5e:	7dba      	ldrb	r2, [r7, #22]
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	32ae      	adds	r2, #174	@ 0xae
 800fb64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb68:	691b      	ldr	r3, [r3, #16]
 800fb6a:	68f8      	ldr	r0, [r7, #12]
 800fb6c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fb6e:	68f8      	ldr	r0, [r7, #12]
 800fb70:	f001 f978 	bl	8010e64 <USBD_CtlSendStatus>
 800fb74:	e032      	b.n	800fbdc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fb76:	7afb      	ldrb	r3, [r7, #11]
 800fb78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	4619      	mov	r1, r3
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f000 fa37 	bl	800fff4 <USBD_CoreFindEP>
 800fb86:	4603      	mov	r3, r0
 800fb88:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb8a:	7dbb      	ldrb	r3, [r7, #22]
 800fb8c:	2bff      	cmp	r3, #255	@ 0xff
 800fb8e:	d025      	beq.n	800fbdc <USBD_LL_DataOutStage+0x15c>
 800fb90:	7dbb      	ldrb	r3, [r7, #22]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d122      	bne.n	800fbdc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	2b03      	cmp	r3, #3
 800fba0:	d117      	bne.n	800fbd2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fba2:	7dba      	ldrb	r2, [r7, #22]
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	32ae      	adds	r2, #174	@ 0xae
 800fba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbac:	699b      	ldr	r3, [r3, #24]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00f      	beq.n	800fbd2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fbb2:	7dba      	ldrb	r2, [r7, #22]
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fbba:	7dba      	ldrb	r2, [r7, #22]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	32ae      	adds	r2, #174	@ 0xae
 800fbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc4:	699b      	ldr	r3, [r3, #24]
 800fbc6:	7afa      	ldrb	r2, [r7, #11]
 800fbc8:	4611      	mov	r1, r2
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	4798      	blx	r3
 800fbce:	4603      	mov	r3, r0
 800fbd0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fbd2:	7dfb      	ldrb	r3, [r7, #23]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d001      	beq.n	800fbdc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fbd8:	7dfb      	ldrb	r3, [r7, #23]
 800fbda:	e000      	b.n	800fbde <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3718      	adds	r7, #24
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b086      	sub	sp, #24
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	60f8      	str	r0, [r7, #12]
 800fbee:	460b      	mov	r3, r1
 800fbf0:	607a      	str	r2, [r7, #4]
 800fbf2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fbf4:	7afb      	ldrb	r3, [r7, #11]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d16f      	bne.n	800fcda <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	3314      	adds	r3, #20
 800fbfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fc06:	2b02      	cmp	r3, #2
 800fc08:	d15a      	bne.n	800fcc0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	689a      	ldr	r2, [r3, #8]
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d914      	bls.n	800fc40 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	689a      	ldr	r2, [r3, #8]
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	1ad2      	subs	r2, r2, r3
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	689b      	ldr	r3, [r3, #8]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	6879      	ldr	r1, [r7, #4]
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f001 f8da 	bl	8010de6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fc32:	2300      	movs	r3, #0
 800fc34:	2200      	movs	r2, #0
 800fc36:	2100      	movs	r1, #0
 800fc38:	68f8      	ldr	r0, [r7, #12]
 800fc3a:	f002 fa73 	bl	8012124 <USBD_LL_PrepareReceive>
 800fc3e:	e03f      	b.n	800fcc0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	68da      	ldr	r2, [r3, #12]
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d11c      	bne.n	800fc86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	685a      	ldr	r2, [r3, #4]
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d316      	bcc.n	800fc86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	685a      	ldr	r2, [r3, #4]
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d20f      	bcs.n	800fc86 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fc66:	2200      	movs	r2, #0
 800fc68:	2100      	movs	r1, #0
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f001 f8bb 	bl	8010de6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fc78:	2300      	movs	r3, #0
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f002 fa50 	bl	8012124 <USBD_LL_PrepareReceive>
 800fc84:	e01c      	b.n	800fcc0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	2b03      	cmp	r3, #3
 800fc90:	d10f      	bne.n	800fcb2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc98:	68db      	ldr	r3, [r3, #12]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d009      	beq.n	800fcb2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2200      	movs	r2, #0
 800fca2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	68f8      	ldr	r0, [r7, #12]
 800fcb0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcb2:	2180      	movs	r1, #128	@ 0x80
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f002 f98b 	bl	8011fd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fcba:	68f8      	ldr	r0, [r7, #12]
 800fcbc:	f001 f8e5 	bl	8010e8a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d03a      	beq.n	800fd40 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f7ff fe42 	bl	800f954 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800fcd8:	e032      	b.n	800fd40 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fcda:	7afb      	ldrb	r3, [r7, #11]
 800fcdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fce0:	b2db      	uxtb	r3, r3
 800fce2:	4619      	mov	r1, r3
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f000 f985 	bl	800fff4 <USBD_CoreFindEP>
 800fcea:	4603      	mov	r3, r0
 800fcec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fcee:	7dfb      	ldrb	r3, [r7, #23]
 800fcf0:	2bff      	cmp	r3, #255	@ 0xff
 800fcf2:	d025      	beq.n	800fd40 <USBD_LL_DataInStage+0x15a>
 800fcf4:	7dfb      	ldrb	r3, [r7, #23]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d122      	bne.n	800fd40 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	2b03      	cmp	r3, #3
 800fd04:	d11c      	bne.n	800fd40 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fd06:	7dfa      	ldrb	r2, [r7, #23]
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	32ae      	adds	r2, #174	@ 0xae
 800fd0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd10:	695b      	ldr	r3, [r3, #20]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d014      	beq.n	800fd40 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fd16:	7dfa      	ldrb	r2, [r7, #23]
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fd1e:	7dfa      	ldrb	r2, [r7, #23]
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	32ae      	adds	r2, #174	@ 0xae
 800fd24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd28:	695b      	ldr	r3, [r3, #20]
 800fd2a:	7afa      	ldrb	r2, [r7, #11]
 800fd2c:	4611      	mov	r1, r2
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	4798      	blx	r3
 800fd32:	4603      	mov	r3, r0
 800fd34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fd36:	7dbb      	ldrb	r3, [r7, #22]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d001      	beq.n	800fd40 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fd3c:	7dbb      	ldrb	r3, [r7, #22]
 800fd3e:	e000      	b.n	800fd42 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3718      	adds	r7, #24
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}

0800fd4a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b084      	sub	sp, #16
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd52:	2300      	movs	r3, #0
 800fd54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2201      	movs	r2, #1
 800fd5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d014      	beq.n	800fdb0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d00e      	beq.n	800fdb0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	6852      	ldr	r2, [r2, #4]
 800fd9e:	b2d2      	uxtb	r2, r2
 800fda0:	4611      	mov	r1, r2
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	4798      	blx	r3
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fdac:	2303      	movs	r3, #3
 800fdae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fdb0:	2340      	movs	r3, #64	@ 0x40
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f002 f8c5 	bl	8011f46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2240      	movs	r2, #64	@ 0x40
 800fdc8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fdcc:	2340      	movs	r3, #64	@ 0x40
 800fdce:	2200      	movs	r2, #0
 800fdd0:	2180      	movs	r1, #128	@ 0x80
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f002 f8b7 	bl	8011f46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2201      	movs	r2, #1
 800fddc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2240      	movs	r2, #64	@ 0x40
 800fde2:	621a      	str	r2, [r3, #32]

  return ret;
 800fde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3710      	adds	r7, #16
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}

0800fdee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fdee:	b480      	push	{r7}
 800fdf0:	b083      	sub	sp, #12
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	78fa      	ldrb	r2, [r7, #3]
 800fdfe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	370c      	adds	r7, #12
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr

0800fe0e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fe0e:	b480      	push	{r7}
 800fe10:	b083      	sub	sp, #12
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	2b04      	cmp	r3, #4
 800fe20:	d006      	beq.n	800fe30 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe28:	b2da      	uxtb	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2204      	movs	r2, #4
 800fe34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800fe38:	2300      	movs	r3, #0
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	370c      	adds	r7, #12
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr

0800fe46 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fe46:	b480      	push	{r7}
 800fe48:	b083      	sub	sp, #12
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	2b04      	cmp	r3, #4
 800fe58:	d106      	bne.n	800fe68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800fe60:	b2da      	uxtb	r2, r3
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800fe68:	2300      	movs	r3, #0
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	370c      	adds	r7, #12
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr

0800fe76 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b082      	sub	sp, #8
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b03      	cmp	r3, #3
 800fe88:	d110      	bne.n	800feac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d00b      	beq.n	800feac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe9a:	69db      	ldr	r3, [r3, #28]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d005      	beq.n	800feac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fea6:	69db      	ldr	r3, [r3, #28]
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800feac:	2300      	movs	r3, #0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3708      	adds	r7, #8
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b082      	sub	sp, #8
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
 800febe:	460b      	mov	r3, r1
 800fec0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	32ae      	adds	r2, #174	@ 0xae
 800fecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d101      	bne.n	800fed8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fed4:	2303      	movs	r3, #3
 800fed6:	e01c      	b.n	800ff12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	2b03      	cmp	r3, #3
 800fee2:	d115      	bne.n	800ff10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	32ae      	adds	r2, #174	@ 0xae
 800feee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fef2:	6a1b      	ldr	r3, [r3, #32]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d00b      	beq.n	800ff10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	32ae      	adds	r2, #174	@ 0xae
 800ff02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff06:	6a1b      	ldr	r3, [r3, #32]
 800ff08:	78fa      	ldrb	r2, [r7, #3]
 800ff0a:	4611      	mov	r1, r2
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ff10:	2300      	movs	r3, #0
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3708      	adds	r7, #8
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b082      	sub	sp, #8
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
 800ff22:	460b      	mov	r3, r1
 800ff24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	32ae      	adds	r2, #174	@ 0xae
 800ff30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d101      	bne.n	800ff3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ff38:	2303      	movs	r3, #3
 800ff3a:	e01c      	b.n	800ff76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	2b03      	cmp	r3, #3
 800ff46:	d115      	bne.n	800ff74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	32ae      	adds	r2, #174	@ 0xae
 800ff52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d00b      	beq.n	800ff74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	32ae      	adds	r2, #174	@ 0xae
 800ff66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff6c:	78fa      	ldrb	r2, [r7, #3]
 800ff6e:	4611      	mov	r1, r2
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ff7e:	b480      	push	{r7}
 800ff80:	b083      	sub	sp, #12
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ff86:	2300      	movs	r3, #0
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00e      	beq.n	800ffd0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	687a      	ldr	r2, [r7, #4]
 800ffbc:	6852      	ldr	r2, [r2, #4]
 800ffbe:	b2d2      	uxtb	r2, r2
 800ffc0:	4611      	mov	r1, r2
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	4798      	blx	r3
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d001      	beq.n	800ffd0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ffcc:	2303      	movs	r3, #3
 800ffce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ffd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3710      	adds	r7, #16
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}

0800ffda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ffda:	b480      	push	{r7}
 800ffdc:	b083      	sub	sp, #12
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ffe6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	460b      	mov	r3, r1
 800fffe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010000:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010002:	4618      	mov	r0, r3
 8010004:	370c      	adds	r7, #12
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr

0801000e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801000e:	b580      	push	{r7, lr}
 8010010:	b086      	sub	sp, #24
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
 8010016:	460b      	mov	r3, r1
 8010018:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010022:	2300      	movs	r3, #0
 8010024:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	885b      	ldrh	r3, [r3, #2]
 801002a:	b29b      	uxth	r3, r3
 801002c:	68fa      	ldr	r2, [r7, #12]
 801002e:	7812      	ldrb	r2, [r2, #0]
 8010030:	4293      	cmp	r3, r2
 8010032:	d91f      	bls.n	8010074 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801003a:	e013      	b.n	8010064 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801003c:	f107 030a 	add.w	r3, r7, #10
 8010040:	4619      	mov	r1, r3
 8010042:	6978      	ldr	r0, [r7, #20]
 8010044:	f000 f81b 	bl	801007e <USBD_GetNextDesc>
 8010048:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	785b      	ldrb	r3, [r3, #1]
 801004e:	2b05      	cmp	r3, #5
 8010050:	d108      	bne.n	8010064 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	789b      	ldrb	r3, [r3, #2]
 801005a:	78fa      	ldrb	r2, [r7, #3]
 801005c:	429a      	cmp	r2, r3
 801005e:	d008      	beq.n	8010072 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010060:	2300      	movs	r3, #0
 8010062:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	885b      	ldrh	r3, [r3, #2]
 8010068:	b29a      	uxth	r2, r3
 801006a:	897b      	ldrh	r3, [r7, #10]
 801006c:	429a      	cmp	r2, r3
 801006e:	d8e5      	bhi.n	801003c <USBD_GetEpDesc+0x2e>
 8010070:	e000      	b.n	8010074 <USBD_GetEpDesc+0x66>
          break;
 8010072:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010074:	693b      	ldr	r3, [r7, #16]
}
 8010076:	4618      	mov	r0, r3
 8010078:	3718      	adds	r7, #24
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801007e:	b480      	push	{r7}
 8010080:	b085      	sub	sp, #20
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
 8010086:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	881b      	ldrh	r3, [r3, #0]
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	7812      	ldrb	r2, [r2, #0]
 8010094:	4413      	add	r3, r2
 8010096:	b29a      	uxth	r2, r3
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	461a      	mov	r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4413      	add	r3, r2
 80100a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80100a8:	68fb      	ldr	r3, [r7, #12]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3714      	adds	r7, #20
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr

080100b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80100b6:	b480      	push	{r7}
 80100b8:	b087      	sub	sp, #28
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	3301      	adds	r3, #1
 80100cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80100d4:	8a3b      	ldrh	r3, [r7, #16]
 80100d6:	021b      	lsls	r3, r3, #8
 80100d8:	b21a      	sxth	r2, r3
 80100da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80100de:	4313      	orrs	r3, r2
 80100e0:	b21b      	sxth	r3, r3
 80100e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80100e4:	89fb      	ldrh	r3, [r7, #14]
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	371c      	adds	r7, #28
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr
	...

080100f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80100fe:	2300      	movs	r3, #0
 8010100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801010a:	2b40      	cmp	r3, #64	@ 0x40
 801010c:	d005      	beq.n	801011a <USBD_StdDevReq+0x26>
 801010e:	2b40      	cmp	r3, #64	@ 0x40
 8010110:	d857      	bhi.n	80101c2 <USBD_StdDevReq+0xce>
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00f      	beq.n	8010136 <USBD_StdDevReq+0x42>
 8010116:	2b20      	cmp	r3, #32
 8010118:	d153      	bne.n	80101c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	32ae      	adds	r2, #174	@ 0xae
 8010124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010128:	689b      	ldr	r3, [r3, #8]
 801012a:	6839      	ldr	r1, [r7, #0]
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	4798      	blx	r3
 8010130:	4603      	mov	r3, r0
 8010132:	73fb      	strb	r3, [r7, #15]
      break;
 8010134:	e04a      	b.n	80101cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	785b      	ldrb	r3, [r3, #1]
 801013a:	2b09      	cmp	r3, #9
 801013c:	d83b      	bhi.n	80101b6 <USBD_StdDevReq+0xc2>
 801013e:	a201      	add	r2, pc, #4	@ (adr r2, 8010144 <USBD_StdDevReq+0x50>)
 8010140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010144:	08010199 	.word	0x08010199
 8010148:	080101ad 	.word	0x080101ad
 801014c:	080101b7 	.word	0x080101b7
 8010150:	080101a3 	.word	0x080101a3
 8010154:	080101b7 	.word	0x080101b7
 8010158:	08010177 	.word	0x08010177
 801015c:	0801016d 	.word	0x0801016d
 8010160:	080101b7 	.word	0x080101b7
 8010164:	0801018f 	.word	0x0801018f
 8010168:	08010181 	.word	0x08010181
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801016c:	6839      	ldr	r1, [r7, #0]
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f000 fa3c 	bl	80105ec <USBD_GetDescriptor>
          break;
 8010174:	e024      	b.n	80101c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010176:	6839      	ldr	r1, [r7, #0]
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 fbcb 	bl	8010914 <USBD_SetAddress>
          break;
 801017e:	e01f      	b.n	80101c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010180:	6839      	ldr	r1, [r7, #0]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 fc0a 	bl	801099c <USBD_SetConfig>
 8010188:	4603      	mov	r3, r0
 801018a:	73fb      	strb	r3, [r7, #15]
          break;
 801018c:	e018      	b.n	80101c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801018e:	6839      	ldr	r1, [r7, #0]
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f000 fcad 	bl	8010af0 <USBD_GetConfig>
          break;
 8010196:	e013      	b.n	80101c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010198:	6839      	ldr	r1, [r7, #0]
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 fcde 	bl	8010b5c <USBD_GetStatus>
          break;
 80101a0:	e00e      	b.n	80101c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80101a2:	6839      	ldr	r1, [r7, #0]
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f000 fd0d 	bl	8010bc4 <USBD_SetFeature>
          break;
 80101aa:	e009      	b.n	80101c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80101ac:	6839      	ldr	r1, [r7, #0]
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f000 fd31 	bl	8010c16 <USBD_ClrFeature>
          break;
 80101b4:	e004      	b.n	80101c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80101b6:	6839      	ldr	r1, [r7, #0]
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 fd88 	bl	8010cce <USBD_CtlError>
          break;
 80101be:	bf00      	nop
      }
      break;
 80101c0:	e004      	b.n	80101cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80101c2:	6839      	ldr	r1, [r7, #0]
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 fd82 	bl	8010cce <USBD_CtlError>
      break;
 80101ca:	bf00      	nop
  }

  return ret;
 80101cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop

080101d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80101e2:	2300      	movs	r3, #0
 80101e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80101ee:	2b40      	cmp	r3, #64	@ 0x40
 80101f0:	d005      	beq.n	80101fe <USBD_StdItfReq+0x26>
 80101f2:	2b40      	cmp	r3, #64	@ 0x40
 80101f4:	d852      	bhi.n	801029c <USBD_StdItfReq+0xc4>
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d001      	beq.n	80101fe <USBD_StdItfReq+0x26>
 80101fa:	2b20      	cmp	r3, #32
 80101fc:	d14e      	bne.n	801029c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010204:	b2db      	uxtb	r3, r3
 8010206:	3b01      	subs	r3, #1
 8010208:	2b02      	cmp	r3, #2
 801020a:	d840      	bhi.n	801028e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	889b      	ldrh	r3, [r3, #4]
 8010210:	b2db      	uxtb	r3, r3
 8010212:	2b01      	cmp	r3, #1
 8010214:	d836      	bhi.n	8010284 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	889b      	ldrh	r3, [r3, #4]
 801021a:	b2db      	uxtb	r3, r3
 801021c:	4619      	mov	r1, r3
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f7ff fedb 	bl	800ffda <USBD_CoreFindIF>
 8010224:	4603      	mov	r3, r0
 8010226:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010228:	7bbb      	ldrb	r3, [r7, #14]
 801022a:	2bff      	cmp	r3, #255	@ 0xff
 801022c:	d01d      	beq.n	801026a <USBD_StdItfReq+0x92>
 801022e:	7bbb      	ldrb	r3, [r7, #14]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d11a      	bne.n	801026a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010234:	7bba      	ldrb	r2, [r7, #14]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	32ae      	adds	r2, #174	@ 0xae
 801023a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00f      	beq.n	8010264 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010244:	7bba      	ldrb	r2, [r7, #14]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801024c:	7bba      	ldrb	r2, [r7, #14]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	32ae      	adds	r2, #174	@ 0xae
 8010252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010256:	689b      	ldr	r3, [r3, #8]
 8010258:	6839      	ldr	r1, [r7, #0]
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	4798      	blx	r3
 801025e:	4603      	mov	r3, r0
 8010260:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010262:	e004      	b.n	801026e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010264:	2303      	movs	r3, #3
 8010266:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010268:	e001      	b.n	801026e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801026a:	2303      	movs	r3, #3
 801026c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	88db      	ldrh	r3, [r3, #6]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d110      	bne.n	8010298 <USBD_StdItfReq+0xc0>
 8010276:	7bfb      	ldrb	r3, [r7, #15]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d10d      	bne.n	8010298 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 fdf1 	bl	8010e64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010282:	e009      	b.n	8010298 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010284:	6839      	ldr	r1, [r7, #0]
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 fd21 	bl	8010cce <USBD_CtlError>
          break;
 801028c:	e004      	b.n	8010298 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801028e:	6839      	ldr	r1, [r7, #0]
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f000 fd1c 	bl	8010cce <USBD_CtlError>
          break;
 8010296:	e000      	b.n	801029a <USBD_StdItfReq+0xc2>
          break;
 8010298:	bf00      	nop
      }
      break;
 801029a:	e004      	b.n	80102a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801029c:	6839      	ldr	r1, [r7, #0]
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f000 fd15 	bl	8010cce <USBD_CtlError>
      break;
 80102a4:	bf00      	nop
  }

  return ret;
 80102a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80102ba:	2300      	movs	r3, #0
 80102bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	889b      	ldrh	r3, [r3, #4]
 80102c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80102cc:	2b40      	cmp	r3, #64	@ 0x40
 80102ce:	d007      	beq.n	80102e0 <USBD_StdEPReq+0x30>
 80102d0:	2b40      	cmp	r3, #64	@ 0x40
 80102d2:	f200 817f 	bhi.w	80105d4 <USBD_StdEPReq+0x324>
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d02a      	beq.n	8010330 <USBD_StdEPReq+0x80>
 80102da:	2b20      	cmp	r3, #32
 80102dc:	f040 817a 	bne.w	80105d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80102e0:	7bbb      	ldrb	r3, [r7, #14]
 80102e2:	4619      	mov	r1, r3
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f7ff fe85 	bl	800fff4 <USBD_CoreFindEP>
 80102ea:	4603      	mov	r3, r0
 80102ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80102ee:	7b7b      	ldrb	r3, [r7, #13]
 80102f0:	2bff      	cmp	r3, #255	@ 0xff
 80102f2:	f000 8174 	beq.w	80105de <USBD_StdEPReq+0x32e>
 80102f6:	7b7b      	ldrb	r3, [r7, #13]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f040 8170 	bne.w	80105de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80102fe:	7b7a      	ldrb	r2, [r7, #13]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010306:	7b7a      	ldrb	r2, [r7, #13]
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	32ae      	adds	r2, #174	@ 0xae
 801030c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010310:	689b      	ldr	r3, [r3, #8]
 8010312:	2b00      	cmp	r3, #0
 8010314:	f000 8163 	beq.w	80105de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010318:	7b7a      	ldrb	r2, [r7, #13]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	32ae      	adds	r2, #174	@ 0xae
 801031e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010322:	689b      	ldr	r3, [r3, #8]
 8010324:	6839      	ldr	r1, [r7, #0]
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	4798      	blx	r3
 801032a:	4603      	mov	r3, r0
 801032c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801032e:	e156      	b.n	80105de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	785b      	ldrb	r3, [r3, #1]
 8010334:	2b03      	cmp	r3, #3
 8010336:	d008      	beq.n	801034a <USBD_StdEPReq+0x9a>
 8010338:	2b03      	cmp	r3, #3
 801033a:	f300 8145 	bgt.w	80105c8 <USBD_StdEPReq+0x318>
 801033e:	2b00      	cmp	r3, #0
 8010340:	f000 809b 	beq.w	801047a <USBD_StdEPReq+0x1ca>
 8010344:	2b01      	cmp	r3, #1
 8010346:	d03c      	beq.n	80103c2 <USBD_StdEPReq+0x112>
 8010348:	e13e      	b.n	80105c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010350:	b2db      	uxtb	r3, r3
 8010352:	2b02      	cmp	r3, #2
 8010354:	d002      	beq.n	801035c <USBD_StdEPReq+0xac>
 8010356:	2b03      	cmp	r3, #3
 8010358:	d016      	beq.n	8010388 <USBD_StdEPReq+0xd8>
 801035a:	e02c      	b.n	80103b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801035c:	7bbb      	ldrb	r3, [r7, #14]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00d      	beq.n	801037e <USBD_StdEPReq+0xce>
 8010362:	7bbb      	ldrb	r3, [r7, #14]
 8010364:	2b80      	cmp	r3, #128	@ 0x80
 8010366:	d00a      	beq.n	801037e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010368:	7bbb      	ldrb	r3, [r7, #14]
 801036a:	4619      	mov	r1, r3
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f001 fe2f 	bl	8011fd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010372:	2180      	movs	r1, #128	@ 0x80
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f001 fe2b 	bl	8011fd0 <USBD_LL_StallEP>
 801037a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801037c:	e020      	b.n	80103c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801037e:	6839      	ldr	r1, [r7, #0]
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 fca4 	bl	8010cce <USBD_CtlError>
              break;
 8010386:	e01b      	b.n	80103c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	885b      	ldrh	r3, [r3, #2]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d10e      	bne.n	80103ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010390:	7bbb      	ldrb	r3, [r7, #14]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00b      	beq.n	80103ae <USBD_StdEPReq+0xfe>
 8010396:	7bbb      	ldrb	r3, [r7, #14]
 8010398:	2b80      	cmp	r3, #128	@ 0x80
 801039a:	d008      	beq.n	80103ae <USBD_StdEPReq+0xfe>
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	88db      	ldrh	r3, [r3, #6]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d104      	bne.n	80103ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80103a4:	7bbb      	ldrb	r3, [r7, #14]
 80103a6:	4619      	mov	r1, r3
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f001 fe11 	bl	8011fd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 fd58 	bl	8010e64 <USBD_CtlSendStatus>

              break;
 80103b4:	e004      	b.n	80103c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80103b6:	6839      	ldr	r1, [r7, #0]
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 fc88 	bl	8010cce <USBD_CtlError>
              break;
 80103be:	bf00      	nop
          }
          break;
 80103c0:	e107      	b.n	80105d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	2b02      	cmp	r3, #2
 80103cc:	d002      	beq.n	80103d4 <USBD_StdEPReq+0x124>
 80103ce:	2b03      	cmp	r3, #3
 80103d0:	d016      	beq.n	8010400 <USBD_StdEPReq+0x150>
 80103d2:	e04b      	b.n	801046c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80103d4:	7bbb      	ldrb	r3, [r7, #14]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d00d      	beq.n	80103f6 <USBD_StdEPReq+0x146>
 80103da:	7bbb      	ldrb	r3, [r7, #14]
 80103dc:	2b80      	cmp	r3, #128	@ 0x80
 80103de:	d00a      	beq.n	80103f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80103e0:	7bbb      	ldrb	r3, [r7, #14]
 80103e2:	4619      	mov	r1, r3
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f001 fdf3 	bl	8011fd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80103ea:	2180      	movs	r1, #128	@ 0x80
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f001 fdef 	bl	8011fd0 <USBD_LL_StallEP>
 80103f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80103f4:	e040      	b.n	8010478 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80103f6:	6839      	ldr	r1, [r7, #0]
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 fc68 	bl	8010cce <USBD_CtlError>
              break;
 80103fe:	e03b      	b.n	8010478 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	885b      	ldrh	r3, [r3, #2]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d136      	bne.n	8010476 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010408:	7bbb      	ldrb	r3, [r7, #14]
 801040a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801040e:	2b00      	cmp	r3, #0
 8010410:	d004      	beq.n	801041c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010412:	7bbb      	ldrb	r3, [r7, #14]
 8010414:	4619      	mov	r1, r3
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f001 fdf9 	bl	801200e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f000 fd21 	bl	8010e64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010422:	7bbb      	ldrb	r3, [r7, #14]
 8010424:	4619      	mov	r1, r3
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f7ff fde4 	bl	800fff4 <USBD_CoreFindEP>
 801042c:	4603      	mov	r3, r0
 801042e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010430:	7b7b      	ldrb	r3, [r7, #13]
 8010432:	2bff      	cmp	r3, #255	@ 0xff
 8010434:	d01f      	beq.n	8010476 <USBD_StdEPReq+0x1c6>
 8010436:	7b7b      	ldrb	r3, [r7, #13]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d11c      	bne.n	8010476 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801043c:	7b7a      	ldrb	r2, [r7, #13]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010444:	7b7a      	ldrb	r2, [r7, #13]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	32ae      	adds	r2, #174	@ 0xae
 801044a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801044e:	689b      	ldr	r3, [r3, #8]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d010      	beq.n	8010476 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010454:	7b7a      	ldrb	r2, [r7, #13]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	32ae      	adds	r2, #174	@ 0xae
 801045a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801045e:	689b      	ldr	r3, [r3, #8]
 8010460:	6839      	ldr	r1, [r7, #0]
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	4798      	blx	r3
 8010466:	4603      	mov	r3, r0
 8010468:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801046a:	e004      	b.n	8010476 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801046c:	6839      	ldr	r1, [r7, #0]
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f000 fc2d 	bl	8010cce <USBD_CtlError>
              break;
 8010474:	e000      	b.n	8010478 <USBD_StdEPReq+0x1c8>
              break;
 8010476:	bf00      	nop
          }
          break;
 8010478:	e0ab      	b.n	80105d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010480:	b2db      	uxtb	r3, r3
 8010482:	2b02      	cmp	r3, #2
 8010484:	d002      	beq.n	801048c <USBD_StdEPReq+0x1dc>
 8010486:	2b03      	cmp	r3, #3
 8010488:	d032      	beq.n	80104f0 <USBD_StdEPReq+0x240>
 801048a:	e097      	b.n	80105bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801048c:	7bbb      	ldrb	r3, [r7, #14]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d007      	beq.n	80104a2 <USBD_StdEPReq+0x1f2>
 8010492:	7bbb      	ldrb	r3, [r7, #14]
 8010494:	2b80      	cmp	r3, #128	@ 0x80
 8010496:	d004      	beq.n	80104a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010498:	6839      	ldr	r1, [r7, #0]
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f000 fc17 	bl	8010cce <USBD_CtlError>
                break;
 80104a0:	e091      	b.n	80105c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	da0b      	bge.n	80104c2 <USBD_StdEPReq+0x212>
 80104aa:	7bbb      	ldrb	r3, [r7, #14]
 80104ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80104b0:	4613      	mov	r3, r2
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	4413      	add	r3, r2
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	3310      	adds	r3, #16
 80104ba:	687a      	ldr	r2, [r7, #4]
 80104bc:	4413      	add	r3, r2
 80104be:	3304      	adds	r3, #4
 80104c0:	e00b      	b.n	80104da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80104c2:	7bbb      	ldrb	r3, [r7, #14]
 80104c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104c8:	4613      	mov	r3, r2
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	4413      	add	r3, r2
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	4413      	add	r3, r2
 80104d8:	3304      	adds	r3, #4
 80104da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	2200      	movs	r2, #0
 80104e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	2202      	movs	r2, #2
 80104e6:	4619      	mov	r1, r3
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f000 fc61 	bl	8010db0 <USBD_CtlSendData>
              break;
 80104ee:	e06a      	b.n	80105c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80104f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	da11      	bge.n	801051c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80104f8:	7bbb      	ldrb	r3, [r7, #14]
 80104fa:	f003 020f 	and.w	r2, r3, #15
 80104fe:	6879      	ldr	r1, [r7, #4]
 8010500:	4613      	mov	r3, r2
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4413      	add	r3, r2
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	440b      	add	r3, r1
 801050a:	3324      	adds	r3, #36	@ 0x24
 801050c:	881b      	ldrh	r3, [r3, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d117      	bne.n	8010542 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010512:	6839      	ldr	r1, [r7, #0]
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f000 fbda 	bl	8010cce <USBD_CtlError>
                  break;
 801051a:	e054      	b.n	80105c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801051c:	7bbb      	ldrb	r3, [r7, #14]
 801051e:	f003 020f 	and.w	r2, r3, #15
 8010522:	6879      	ldr	r1, [r7, #4]
 8010524:	4613      	mov	r3, r2
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	4413      	add	r3, r2
 801052a:	009b      	lsls	r3, r3, #2
 801052c:	440b      	add	r3, r1
 801052e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010532:	881b      	ldrh	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d104      	bne.n	8010542 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010538:	6839      	ldr	r1, [r7, #0]
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f000 fbc7 	bl	8010cce <USBD_CtlError>
                  break;
 8010540:	e041      	b.n	80105c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010546:	2b00      	cmp	r3, #0
 8010548:	da0b      	bge.n	8010562 <USBD_StdEPReq+0x2b2>
 801054a:	7bbb      	ldrb	r3, [r7, #14]
 801054c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010550:	4613      	mov	r3, r2
 8010552:	009b      	lsls	r3, r3, #2
 8010554:	4413      	add	r3, r2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	3310      	adds	r3, #16
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	4413      	add	r3, r2
 801055e:	3304      	adds	r3, #4
 8010560:	e00b      	b.n	801057a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010562:	7bbb      	ldrb	r3, [r7, #14]
 8010564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010568:	4613      	mov	r3, r2
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4413      	add	r3, r2
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	4413      	add	r3, r2
 8010578:	3304      	adds	r3, #4
 801057a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801057c:	7bbb      	ldrb	r3, [r7, #14]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d002      	beq.n	8010588 <USBD_StdEPReq+0x2d8>
 8010582:	7bbb      	ldrb	r3, [r7, #14]
 8010584:	2b80      	cmp	r3, #128	@ 0x80
 8010586:	d103      	bne.n	8010590 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	2200      	movs	r2, #0
 801058c:	601a      	str	r2, [r3, #0]
 801058e:	e00e      	b.n	80105ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010590:	7bbb      	ldrb	r3, [r7, #14]
 8010592:	4619      	mov	r1, r3
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f001 fd59 	bl	801204c <USBD_LL_IsStallEP>
 801059a:	4603      	mov	r3, r0
 801059c:	2b00      	cmp	r3, #0
 801059e:	d003      	beq.n	80105a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	2201      	movs	r2, #1
 80105a4:	601a      	str	r2, [r3, #0]
 80105a6:	e002      	b.n	80105ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	2200      	movs	r2, #0
 80105ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	2202      	movs	r2, #2
 80105b2:	4619      	mov	r1, r3
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 fbfb 	bl	8010db0 <USBD_CtlSendData>
              break;
 80105ba:	e004      	b.n	80105c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80105bc:	6839      	ldr	r1, [r7, #0]
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 fb85 	bl	8010cce <USBD_CtlError>
              break;
 80105c4:	bf00      	nop
          }
          break;
 80105c6:	e004      	b.n	80105d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80105c8:	6839      	ldr	r1, [r7, #0]
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 fb7f 	bl	8010cce <USBD_CtlError>
          break;
 80105d0:	bf00      	nop
      }
      break;
 80105d2:	e005      	b.n	80105e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80105d4:	6839      	ldr	r1, [r7, #0]
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f000 fb79 	bl	8010cce <USBD_CtlError>
      break;
 80105dc:	e000      	b.n	80105e0 <USBD_StdEPReq+0x330>
      break;
 80105de:	bf00      	nop
  }

  return ret;
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
	...

080105ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80105f6:	2300      	movs	r3, #0
 80105f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80105fa:	2300      	movs	r3, #0
 80105fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80105fe:	2300      	movs	r3, #0
 8010600:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	885b      	ldrh	r3, [r3, #2]
 8010606:	0a1b      	lsrs	r3, r3, #8
 8010608:	b29b      	uxth	r3, r3
 801060a:	3b01      	subs	r3, #1
 801060c:	2b0e      	cmp	r3, #14
 801060e:	f200 8152 	bhi.w	80108b6 <USBD_GetDescriptor+0x2ca>
 8010612:	a201      	add	r2, pc, #4	@ (adr r2, 8010618 <USBD_GetDescriptor+0x2c>)
 8010614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010618:	08010689 	.word	0x08010689
 801061c:	080106a1 	.word	0x080106a1
 8010620:	080106e1 	.word	0x080106e1
 8010624:	080108b7 	.word	0x080108b7
 8010628:	080108b7 	.word	0x080108b7
 801062c:	08010857 	.word	0x08010857
 8010630:	08010883 	.word	0x08010883
 8010634:	080108b7 	.word	0x080108b7
 8010638:	080108b7 	.word	0x080108b7
 801063c:	080108b7 	.word	0x080108b7
 8010640:	080108b7 	.word	0x080108b7
 8010644:	080108b7 	.word	0x080108b7
 8010648:	080108b7 	.word	0x080108b7
 801064c:	080108b7 	.word	0x080108b7
 8010650:	08010655 	.word	0x08010655
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801065a:	69db      	ldr	r3, [r3, #28]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00b      	beq.n	8010678 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010666:	69db      	ldr	r3, [r3, #28]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	7c12      	ldrb	r2, [r2, #16]
 801066c:	f107 0108 	add.w	r1, r7, #8
 8010670:	4610      	mov	r0, r2
 8010672:	4798      	blx	r3
 8010674:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010676:	e126      	b.n	80108c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010678:	6839      	ldr	r1, [r7, #0]
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 fb27 	bl	8010cce <USBD_CtlError>
        err++;
 8010680:	7afb      	ldrb	r3, [r7, #11]
 8010682:	3301      	adds	r3, #1
 8010684:	72fb      	strb	r3, [r7, #11]
      break;
 8010686:	e11e      	b.n	80108c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	7c12      	ldrb	r2, [r2, #16]
 8010694:	f107 0108 	add.w	r1, r7, #8
 8010698:	4610      	mov	r0, r2
 801069a:	4798      	blx	r3
 801069c:	60f8      	str	r0, [r7, #12]
      break;
 801069e:	e112      	b.n	80108c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	7c1b      	ldrb	r3, [r3, #16]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d10d      	bne.n	80106c4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106b0:	f107 0208 	add.w	r2, r7, #8
 80106b4:	4610      	mov	r0, r2
 80106b6:	4798      	blx	r3
 80106b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	3301      	adds	r3, #1
 80106be:	2202      	movs	r2, #2
 80106c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80106c2:	e100      	b.n	80108c6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106cc:	f107 0208 	add.w	r2, r7, #8
 80106d0:	4610      	mov	r0, r2
 80106d2:	4798      	blx	r3
 80106d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	3301      	adds	r3, #1
 80106da:	2202      	movs	r2, #2
 80106dc:	701a      	strb	r2, [r3, #0]
      break;
 80106de:	e0f2      	b.n	80108c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	885b      	ldrh	r3, [r3, #2]
 80106e4:	b2db      	uxtb	r3, r3
 80106e6:	2b05      	cmp	r3, #5
 80106e8:	f200 80ac 	bhi.w	8010844 <USBD_GetDescriptor+0x258>
 80106ec:	a201      	add	r2, pc, #4	@ (adr r2, 80106f4 <USBD_GetDescriptor+0x108>)
 80106ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f2:	bf00      	nop
 80106f4:	0801070d 	.word	0x0801070d
 80106f8:	08010741 	.word	0x08010741
 80106fc:	08010775 	.word	0x08010775
 8010700:	080107a9 	.word	0x080107a9
 8010704:	080107dd 	.word	0x080107dd
 8010708:	08010811 	.word	0x08010811
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d00b      	beq.n	8010730 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	7c12      	ldrb	r2, [r2, #16]
 8010724:	f107 0108 	add.w	r1, r7, #8
 8010728:	4610      	mov	r0, r2
 801072a:	4798      	blx	r3
 801072c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801072e:	e091      	b.n	8010854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010730:	6839      	ldr	r1, [r7, #0]
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 facb 	bl	8010cce <USBD_CtlError>
            err++;
 8010738:	7afb      	ldrb	r3, [r7, #11]
 801073a:	3301      	adds	r3, #1
 801073c:	72fb      	strb	r3, [r7, #11]
          break;
 801073e:	e089      	b.n	8010854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010746:	689b      	ldr	r3, [r3, #8]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d00b      	beq.n	8010764 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	687a      	ldr	r2, [r7, #4]
 8010756:	7c12      	ldrb	r2, [r2, #16]
 8010758:	f107 0108 	add.w	r1, r7, #8
 801075c:	4610      	mov	r0, r2
 801075e:	4798      	blx	r3
 8010760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010762:	e077      	b.n	8010854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010764:	6839      	ldr	r1, [r7, #0]
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 fab1 	bl	8010cce <USBD_CtlError>
            err++;
 801076c:	7afb      	ldrb	r3, [r7, #11]
 801076e:	3301      	adds	r3, #1
 8010770:	72fb      	strb	r3, [r7, #11]
          break;
 8010772:	e06f      	b.n	8010854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d00b      	beq.n	8010798 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	7c12      	ldrb	r2, [r2, #16]
 801078c:	f107 0108 	add.w	r1, r7, #8
 8010790:	4610      	mov	r0, r2
 8010792:	4798      	blx	r3
 8010794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010796:	e05d      	b.n	8010854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010798:	6839      	ldr	r1, [r7, #0]
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 fa97 	bl	8010cce <USBD_CtlError>
            err++;
 80107a0:	7afb      	ldrb	r3, [r7, #11]
 80107a2:	3301      	adds	r3, #1
 80107a4:	72fb      	strb	r3, [r7, #11]
          break;
 80107a6:	e055      	b.n	8010854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107ae:	691b      	ldr	r3, [r3, #16]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d00b      	beq.n	80107cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107ba:	691b      	ldr	r3, [r3, #16]
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	7c12      	ldrb	r2, [r2, #16]
 80107c0:	f107 0108 	add.w	r1, r7, #8
 80107c4:	4610      	mov	r0, r2
 80107c6:	4798      	blx	r3
 80107c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80107ca:	e043      	b.n	8010854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80107cc:	6839      	ldr	r1, [r7, #0]
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 fa7d 	bl	8010cce <USBD_CtlError>
            err++;
 80107d4:	7afb      	ldrb	r3, [r7, #11]
 80107d6:	3301      	adds	r3, #1
 80107d8:	72fb      	strb	r3, [r7, #11]
          break;
 80107da:	e03b      	b.n	8010854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107e2:	695b      	ldr	r3, [r3, #20]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d00b      	beq.n	8010800 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107ee:	695b      	ldr	r3, [r3, #20]
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	7c12      	ldrb	r2, [r2, #16]
 80107f4:	f107 0108 	add.w	r1, r7, #8
 80107f8:	4610      	mov	r0, r2
 80107fa:	4798      	blx	r3
 80107fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80107fe:	e029      	b.n	8010854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010800:	6839      	ldr	r1, [r7, #0]
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 fa63 	bl	8010cce <USBD_CtlError>
            err++;
 8010808:	7afb      	ldrb	r3, [r7, #11]
 801080a:	3301      	adds	r3, #1
 801080c:	72fb      	strb	r3, [r7, #11]
          break;
 801080e:	e021      	b.n	8010854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010816:	699b      	ldr	r3, [r3, #24]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00b      	beq.n	8010834 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010822:	699b      	ldr	r3, [r3, #24]
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	7c12      	ldrb	r2, [r2, #16]
 8010828:	f107 0108 	add.w	r1, r7, #8
 801082c:	4610      	mov	r0, r2
 801082e:	4798      	blx	r3
 8010830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010832:	e00f      	b.n	8010854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010834:	6839      	ldr	r1, [r7, #0]
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 fa49 	bl	8010cce <USBD_CtlError>
            err++;
 801083c:	7afb      	ldrb	r3, [r7, #11]
 801083e:	3301      	adds	r3, #1
 8010840:	72fb      	strb	r3, [r7, #11]
          break;
 8010842:	e007      	b.n	8010854 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010844:	6839      	ldr	r1, [r7, #0]
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 fa41 	bl	8010cce <USBD_CtlError>
          err++;
 801084c:	7afb      	ldrb	r3, [r7, #11]
 801084e:	3301      	adds	r3, #1
 8010850:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010852:	bf00      	nop
      }
      break;
 8010854:	e037      	b.n	80108c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	7c1b      	ldrb	r3, [r3, #16]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d109      	bne.n	8010872 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010866:	f107 0208 	add.w	r2, r7, #8
 801086a:	4610      	mov	r0, r2
 801086c:	4798      	blx	r3
 801086e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010870:	e029      	b.n	80108c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010872:	6839      	ldr	r1, [r7, #0]
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f000 fa2a 	bl	8010cce <USBD_CtlError>
        err++;
 801087a:	7afb      	ldrb	r3, [r7, #11]
 801087c:	3301      	adds	r3, #1
 801087e:	72fb      	strb	r3, [r7, #11]
      break;
 8010880:	e021      	b.n	80108c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	7c1b      	ldrb	r3, [r3, #16]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d10d      	bne.n	80108a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010892:	f107 0208 	add.w	r2, r7, #8
 8010896:	4610      	mov	r0, r2
 8010898:	4798      	blx	r3
 801089a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	3301      	adds	r3, #1
 80108a0:	2207      	movs	r2, #7
 80108a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80108a4:	e00f      	b.n	80108c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80108a6:	6839      	ldr	r1, [r7, #0]
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f000 fa10 	bl	8010cce <USBD_CtlError>
        err++;
 80108ae:	7afb      	ldrb	r3, [r7, #11]
 80108b0:	3301      	adds	r3, #1
 80108b2:	72fb      	strb	r3, [r7, #11]
      break;
 80108b4:	e007      	b.n	80108c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80108b6:	6839      	ldr	r1, [r7, #0]
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f000 fa08 	bl	8010cce <USBD_CtlError>
      err++;
 80108be:	7afb      	ldrb	r3, [r7, #11]
 80108c0:	3301      	adds	r3, #1
 80108c2:	72fb      	strb	r3, [r7, #11]
      break;
 80108c4:	bf00      	nop
  }

  if (err != 0U)
 80108c6:	7afb      	ldrb	r3, [r7, #11]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d11e      	bne.n	801090a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	88db      	ldrh	r3, [r3, #6]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d016      	beq.n	8010902 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80108d4:	893b      	ldrh	r3, [r7, #8]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00e      	beq.n	80108f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	88da      	ldrh	r2, [r3, #6]
 80108de:	893b      	ldrh	r3, [r7, #8]
 80108e0:	4293      	cmp	r3, r2
 80108e2:	bf28      	it	cs
 80108e4:	4613      	movcs	r3, r2
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80108ea:	893b      	ldrh	r3, [r7, #8]
 80108ec:	461a      	mov	r2, r3
 80108ee:	68f9      	ldr	r1, [r7, #12]
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f000 fa5d 	bl	8010db0 <USBD_CtlSendData>
 80108f6:	e009      	b.n	801090c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80108f8:	6839      	ldr	r1, [r7, #0]
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 f9e7 	bl	8010cce <USBD_CtlError>
 8010900:	e004      	b.n	801090c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 faae 	bl	8010e64 <USBD_CtlSendStatus>
 8010908:	e000      	b.n	801090c <USBD_GetDescriptor+0x320>
    return;
 801090a:	bf00      	nop
  }
}
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop

08010914 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	889b      	ldrh	r3, [r3, #4]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d131      	bne.n	801098a <USBD_SetAddress+0x76>
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	88db      	ldrh	r3, [r3, #6]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d12d      	bne.n	801098a <USBD_SetAddress+0x76>
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	885b      	ldrh	r3, [r3, #2]
 8010932:	2b7f      	cmp	r3, #127	@ 0x7f
 8010934:	d829      	bhi.n	801098a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	885b      	ldrh	r3, [r3, #2]
 801093a:	b2db      	uxtb	r3, r3
 801093c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010940:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010948:	b2db      	uxtb	r3, r3
 801094a:	2b03      	cmp	r3, #3
 801094c:	d104      	bne.n	8010958 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801094e:	6839      	ldr	r1, [r7, #0]
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 f9bc 	bl	8010cce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010956:	e01d      	b.n	8010994 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	7bfa      	ldrb	r2, [r7, #15]
 801095c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010960:	7bfb      	ldrb	r3, [r7, #15]
 8010962:	4619      	mov	r1, r3
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f001 fb9d 	bl	80120a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 fa7a 	bl	8010e64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010970:	7bfb      	ldrb	r3, [r7, #15]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d004      	beq.n	8010980 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2202      	movs	r2, #2
 801097a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801097e:	e009      	b.n	8010994 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2201      	movs	r2, #1
 8010984:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010988:	e004      	b.n	8010994 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801098a:	6839      	ldr	r1, [r7, #0]
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 f99e 	bl	8010cce <USBD_CtlError>
  }
}
 8010992:	bf00      	nop
 8010994:	bf00      	nop
 8010996:	3710      	adds	r7, #16
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}

0801099c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80109a6:	2300      	movs	r3, #0
 80109a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	885b      	ldrh	r3, [r3, #2]
 80109ae:	b2da      	uxtb	r2, r3
 80109b0:	4b4e      	ldr	r3, [pc, #312]	@ (8010aec <USBD_SetConfig+0x150>)
 80109b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80109b4:	4b4d      	ldr	r3, [pc, #308]	@ (8010aec <USBD_SetConfig+0x150>)
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	d905      	bls.n	80109c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80109bc:	6839      	ldr	r1, [r7, #0]
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 f985 	bl	8010cce <USBD_CtlError>
    return USBD_FAIL;
 80109c4:	2303      	movs	r3, #3
 80109c6:	e08c      	b.n	8010ae2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	2b02      	cmp	r3, #2
 80109d2:	d002      	beq.n	80109da <USBD_SetConfig+0x3e>
 80109d4:	2b03      	cmp	r3, #3
 80109d6:	d029      	beq.n	8010a2c <USBD_SetConfig+0x90>
 80109d8:	e075      	b.n	8010ac6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80109da:	4b44      	ldr	r3, [pc, #272]	@ (8010aec <USBD_SetConfig+0x150>)
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d020      	beq.n	8010a24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80109e2:	4b42      	ldr	r3, [pc, #264]	@ (8010aec <USBD_SetConfig+0x150>)
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	461a      	mov	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80109ec:	4b3f      	ldr	r3, [pc, #252]	@ (8010aec <USBD_SetConfig+0x150>)
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	4619      	mov	r1, r3
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7fe ffb9 	bl	800f96a <USBD_SetClassConfig>
 80109f8:	4603      	mov	r3, r0
 80109fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80109fc:	7bfb      	ldrb	r3, [r7, #15]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d008      	beq.n	8010a14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010a02:	6839      	ldr	r1, [r7, #0]
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f000 f962 	bl	8010cce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2202      	movs	r2, #2
 8010a0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010a12:	e065      	b.n	8010ae0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 fa25 	bl	8010e64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2203      	movs	r2, #3
 8010a1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010a22:	e05d      	b.n	8010ae0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 fa1d 	bl	8010e64 <USBD_CtlSendStatus>
      break;
 8010a2a:	e059      	b.n	8010ae0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8010aec <USBD_SetConfig+0x150>)
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d112      	bne.n	8010a5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2202      	movs	r2, #2
 8010a38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8010aec <USBD_SetConfig+0x150>)
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	461a      	mov	r2, r3
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010a46:	4b29      	ldr	r3, [pc, #164]	@ (8010aec <USBD_SetConfig+0x150>)
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7fe ffa8 	bl	800f9a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 fa06 	bl	8010e64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010a58:	e042      	b.n	8010ae0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010a5a:	4b24      	ldr	r3, [pc, #144]	@ (8010aec <USBD_SetConfig+0x150>)
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	461a      	mov	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d02a      	beq.n	8010abe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	4619      	mov	r1, r3
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7fe ff96 	bl	800f9a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010a76:	4b1d      	ldr	r3, [pc, #116]	@ (8010aec <USBD_SetConfig+0x150>)
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010a80:	4b1a      	ldr	r3, [pc, #104]	@ (8010aec <USBD_SetConfig+0x150>)
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	4619      	mov	r1, r3
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f7fe ff6f 	bl	800f96a <USBD_SetClassConfig>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010a90:	7bfb      	ldrb	r3, [r7, #15]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d00f      	beq.n	8010ab6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010a96:	6839      	ldr	r1, [r7, #0]
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f000 f918 	bl	8010cce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f7fe ff7b 	bl	800f9a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2202      	movs	r2, #2
 8010ab0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010ab4:	e014      	b.n	8010ae0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f000 f9d4 	bl	8010e64 <USBD_CtlSendStatus>
      break;
 8010abc:	e010      	b.n	8010ae0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 f9d0 	bl	8010e64 <USBD_CtlSendStatus>
      break;
 8010ac4:	e00c      	b.n	8010ae0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010ac6:	6839      	ldr	r1, [r7, #0]
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f000 f900 	bl	8010cce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010ace:	4b07      	ldr	r3, [pc, #28]	@ (8010aec <USBD_SetConfig+0x150>)
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7fe ff64 	bl	800f9a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010ada:	2303      	movs	r3, #3
 8010adc:	73fb      	strb	r3, [r7, #15]
      break;
 8010ade:	bf00      	nop
  }

  return ret;
 8010ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	24000624 	.word	0x24000624

08010af0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	88db      	ldrh	r3, [r3, #6]
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d004      	beq.n	8010b0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010b02:	6839      	ldr	r1, [r7, #0]
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f000 f8e2 	bl	8010cce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010b0a:	e023      	b.n	8010b54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b02      	cmp	r3, #2
 8010b16:	dc02      	bgt.n	8010b1e <USBD_GetConfig+0x2e>
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	dc03      	bgt.n	8010b24 <USBD_GetConfig+0x34>
 8010b1c:	e015      	b.n	8010b4a <USBD_GetConfig+0x5a>
 8010b1e:	2b03      	cmp	r3, #3
 8010b20:	d00b      	beq.n	8010b3a <USBD_GetConfig+0x4a>
 8010b22:	e012      	b.n	8010b4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2200      	movs	r2, #0
 8010b28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	3308      	adds	r3, #8
 8010b2e:	2201      	movs	r2, #1
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f000 f93c 	bl	8010db0 <USBD_CtlSendData>
        break;
 8010b38:	e00c      	b.n	8010b54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	3304      	adds	r3, #4
 8010b3e:	2201      	movs	r2, #1
 8010b40:	4619      	mov	r1, r3
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 f934 	bl	8010db0 <USBD_CtlSendData>
        break;
 8010b48:	e004      	b.n	8010b54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010b4a:	6839      	ldr	r1, [r7, #0]
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f000 f8be 	bl	8010cce <USBD_CtlError>
        break;
 8010b52:	bf00      	nop
}
 8010b54:	bf00      	nop
 8010b56:	3708      	adds	r7, #8
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	3b01      	subs	r3, #1
 8010b70:	2b02      	cmp	r3, #2
 8010b72:	d81e      	bhi.n	8010bb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	88db      	ldrh	r3, [r3, #6]
 8010b78:	2b02      	cmp	r3, #2
 8010b7a:	d004      	beq.n	8010b86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010b7c:	6839      	ldr	r1, [r7, #0]
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 f8a5 	bl	8010cce <USBD_CtlError>
        break;
 8010b84:	e01a      	b.n	8010bbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d005      	beq.n	8010ba2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	f043 0202 	orr.w	r2, r3, #2
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	330c      	adds	r3, #12
 8010ba6:	2202      	movs	r2, #2
 8010ba8:	4619      	mov	r1, r3
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f000 f900 	bl	8010db0 <USBD_CtlSendData>
      break;
 8010bb0:	e004      	b.n	8010bbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010bb2:	6839      	ldr	r1, [r7, #0]
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 f88a 	bl	8010cce <USBD_CtlError>
      break;
 8010bba:	bf00      	nop
  }
}
 8010bbc:	bf00      	nop
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	885b      	ldrh	r3, [r3, #2]
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d107      	bne.n	8010be6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 f940 	bl	8010e64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010be4:	e013      	b.n	8010c0e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	885b      	ldrh	r3, [r3, #2]
 8010bea:	2b02      	cmp	r3, #2
 8010bec:	d10b      	bne.n	8010c06 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	889b      	ldrh	r3, [r3, #4]
 8010bf2:	0a1b      	lsrs	r3, r3, #8
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	b2da      	uxtb	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f000 f930 	bl	8010e64 <USBD_CtlSendStatus>
}
 8010c04:	e003      	b.n	8010c0e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010c06:	6839      	ldr	r1, [r7, #0]
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 f860 	bl	8010cce <USBD_CtlError>
}
 8010c0e:	bf00      	nop
 8010c10:	3708      	adds	r7, #8
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}

08010c16 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c16:	b580      	push	{r7, lr}
 8010c18:	b082      	sub	sp, #8
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	6078      	str	r0, [r7, #4]
 8010c1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	3b01      	subs	r3, #1
 8010c2a:	2b02      	cmp	r3, #2
 8010c2c:	d80b      	bhi.n	8010c46 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	885b      	ldrh	r3, [r3, #2]
 8010c32:	2b01      	cmp	r3, #1
 8010c34:	d10c      	bne.n	8010c50 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 f910 	bl	8010e64 <USBD_CtlSendStatus>
      }
      break;
 8010c44:	e004      	b.n	8010c50 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010c46:	6839      	ldr	r1, [r7, #0]
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 f840 	bl	8010cce <USBD_CtlError>
      break;
 8010c4e:	e000      	b.n	8010c52 <USBD_ClrFeature+0x3c>
      break;
 8010c50:	bf00      	nop
  }
}
 8010c52:	bf00      	nop
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b084      	sub	sp, #16
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
 8010c62:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	781a      	ldrb	r2, [r3, #0]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	3301      	adds	r3, #1
 8010c74:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	781a      	ldrb	r2, [r3, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	3301      	adds	r3, #1
 8010c82:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010c84:	68f8      	ldr	r0, [r7, #12]
 8010c86:	f7ff fa16 	bl	80100b6 <SWAPBYTE>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	3301      	adds	r3, #1
 8010c96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010c9e:	68f8      	ldr	r0, [r7, #12]
 8010ca0:	f7ff fa09 	bl	80100b6 <SWAPBYTE>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	3301      	adds	r3, #1
 8010cb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	f7ff f9fc 	bl	80100b6 <SWAPBYTE>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	80da      	strh	r2, [r3, #6]
}
 8010cc6:	bf00      	nop
 8010cc8:	3710      	adds	r7, #16
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b082      	sub	sp, #8
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
 8010cd6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010cd8:	2180      	movs	r1, #128	@ 0x80
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f001 f978 	bl	8011fd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010ce0:	2100      	movs	r1, #0
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f001 f974 	bl	8011fd0 <USBD_LL_StallEP>
}
 8010ce8:	bf00      	nop
 8010cea:	3708      	adds	r7, #8
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b086      	sub	sp, #24
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d036      	beq.n	8010d74 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010d0a:	6938      	ldr	r0, [r7, #16]
 8010d0c:	f000 f836 	bl	8010d7c <USBD_GetLen>
 8010d10:	4603      	mov	r3, r0
 8010d12:	3301      	adds	r3, #1
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	005b      	lsls	r3, r3, #1
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010d1e:	7dfb      	ldrb	r3, [r7, #23]
 8010d20:	68ba      	ldr	r2, [r7, #8]
 8010d22:	4413      	add	r3, r2
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	7812      	ldrb	r2, [r2, #0]
 8010d28:	701a      	strb	r2, [r3, #0]
  idx++;
 8010d2a:	7dfb      	ldrb	r3, [r7, #23]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010d30:	7dfb      	ldrb	r3, [r7, #23]
 8010d32:	68ba      	ldr	r2, [r7, #8]
 8010d34:	4413      	add	r3, r2
 8010d36:	2203      	movs	r2, #3
 8010d38:	701a      	strb	r2, [r3, #0]
  idx++;
 8010d3a:	7dfb      	ldrb	r3, [r7, #23]
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010d40:	e013      	b.n	8010d6a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010d42:	7dfb      	ldrb	r3, [r7, #23]
 8010d44:	68ba      	ldr	r2, [r7, #8]
 8010d46:	4413      	add	r3, r2
 8010d48:	693a      	ldr	r2, [r7, #16]
 8010d4a:	7812      	ldrb	r2, [r2, #0]
 8010d4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	3301      	adds	r3, #1
 8010d52:	613b      	str	r3, [r7, #16]
    idx++;
 8010d54:	7dfb      	ldrb	r3, [r7, #23]
 8010d56:	3301      	adds	r3, #1
 8010d58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
 8010d5c:	68ba      	ldr	r2, [r7, #8]
 8010d5e:	4413      	add	r3, r2
 8010d60:	2200      	movs	r2, #0
 8010d62:	701a      	strb	r2, [r3, #0]
    idx++;
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
 8010d66:	3301      	adds	r3, #1
 8010d68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d1e7      	bne.n	8010d42 <USBD_GetString+0x52>
 8010d72:	e000      	b.n	8010d76 <USBD_GetString+0x86>
    return;
 8010d74:	bf00      	nop
  }
}
 8010d76:	3718      	adds	r7, #24
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010d84:	2300      	movs	r3, #0
 8010d86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010d8c:	e005      	b.n	8010d9a <USBD_GetLen+0x1e>
  {
    len++;
 8010d8e:	7bfb      	ldrb	r3, [r7, #15]
 8010d90:	3301      	adds	r3, #1
 8010d92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	3301      	adds	r3, #1
 8010d98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d1f5      	bne.n	8010d8e <USBD_GetLen+0x12>
  }

  return len;
 8010da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3714      	adds	r7, #20
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr

08010db0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	60b9      	str	r1, [r7, #8]
 8010dba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2202      	movs	r2, #2
 8010dc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	68ba      	ldr	r2, [r7, #8]
 8010dd4:	2100      	movs	r1, #0
 8010dd6:	68f8      	ldr	r0, [r7, #12]
 8010dd8:	f001 f983 	bl	80120e2 <USBD_LL_Transmit>

  return USBD_OK;
 8010ddc:	2300      	movs	r3, #0
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3710      	adds	r7, #16
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}

08010de6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010de6:	b580      	push	{r7, lr}
 8010de8:	b084      	sub	sp, #16
 8010dea:	af00      	add	r7, sp, #0
 8010dec:	60f8      	str	r0, [r7, #12]
 8010dee:	60b9      	str	r1, [r7, #8]
 8010df0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	68ba      	ldr	r2, [r7, #8]
 8010df6:	2100      	movs	r1, #0
 8010df8:	68f8      	ldr	r0, [r7, #12]
 8010dfa:	f001 f972 	bl	80120e2 <USBD_LL_Transmit>

  return USBD_OK;
 8010dfe:	2300      	movs	r3, #0
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3710      	adds	r7, #16
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2203      	movs	r2, #3
 8010e18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	68ba      	ldr	r2, [r7, #8]
 8010e30:	2100      	movs	r1, #0
 8010e32:	68f8      	ldr	r0, [r7, #12]
 8010e34:	f001 f976 	bl	8012124 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010e38:	2300      	movs	r3, #0
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3710      	adds	r7, #16
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}

08010e42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010e42:	b580      	push	{r7, lr}
 8010e44:	b084      	sub	sp, #16
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	60f8      	str	r0, [r7, #12]
 8010e4a:	60b9      	str	r1, [r7, #8]
 8010e4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	68ba      	ldr	r2, [r7, #8]
 8010e52:	2100      	movs	r1, #0
 8010e54:	68f8      	ldr	r0, [r7, #12]
 8010e56:	f001 f965 	bl	8012124 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010e5a:	2300      	movs	r3, #0
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3710      	adds	r7, #16
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2204      	movs	r2, #4
 8010e70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010e74:	2300      	movs	r3, #0
 8010e76:	2200      	movs	r2, #0
 8010e78:	2100      	movs	r1, #0
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f001 f931 	bl	80120e2 <USBD_LL_Transmit>

  return USBD_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b082      	sub	sp, #8
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2205      	movs	r2, #5
 8010e96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	2100      	movs	r1, #0
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f001 f93f 	bl	8012124 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ea6:	2300      	movs	r3, #0
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <ina238_Init>:
 * @brief  INA238初始化
 * @param  hi2c: I2C句柄
 * @param  error: 误差纠正
 */
void ina238_Init(I2C_HandleTypeDef *hi2c, int8_t error)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b088      	sub	sp, #32
 8010eb4:	af04      	add	r7, sp, #16
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	460b      	mov	r3, r1
 8010eba:	70fb      	strb	r3, [r7, #3]
	uint8_t pData[2];
	pData[0] = 0x00;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x00;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100); // 量程选择为163.84mv
 8010ec4:	2364      	movs	r3, #100	@ 0x64
 8010ec6:	9302      	str	r3, [sp, #8]
 8010ec8:	2302      	movs	r3, #2
 8010eca:	9301      	str	r3, [sp, #4]
 8010ecc:	f107 030c 	add.w	r3, r7, #12
 8010ed0:	9300      	str	r3, [sp, #0]
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	2181      	movs	r1, #129	@ 0x81
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f7f5 f987 	bl	80061ec <HAL_I2C_Mem_Write>
	pData[0] = 0xf4;
 8010ede:	23f4      	movs	r3, #244	@ 0xf4
 8010ee0:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x93;
 8010ee2:	2393      	movs	r3, #147	@ 0x93
 8010ee4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100); // 转换时间设置为9.6ms
 8010ee6:	2364      	movs	r3, #100	@ 0x64
 8010ee8:	9302      	str	r3, [sp, #8]
 8010eea:	2302      	movs	r3, #2
 8010eec:	9301      	str	r3, [sp, #4]
 8010eee:	f107 030c 	add.w	r3, r7, #12
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	2181      	movs	r1, #129	@ 0x81
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7f5 f976 	bl	80061ec <HAL_I2C_Mem_Write>
	pData[0] = 0x0f;
 8010f00:	230f      	movs	r3, #15
 8010f02:	733b      	strb	r3, [r7, #12]
	pData[1] = 0xa0 + error;
 8010f04:	78fb      	ldrb	r3, [r7, #3]
 8010f06:	3b60      	subs	r3, #96	@ 0x60
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100); // 设置最大电流为8A，采样电阻为20mΩ
 8010f0c:	2364      	movs	r3, #100	@ 0x64
 8010f0e:	9302      	str	r3, [sp, #8]
 8010f10:	2302      	movs	r3, #2
 8010f12:	9301      	str	r3, [sp, #4]
 8010f14:	f107 030c 	add.w	r3, r7, #12
 8010f18:	9300      	str	r3, [sp, #0]
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	2202      	movs	r2, #2
 8010f1e:	2181      	movs	r1, #129	@ 0x81
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f7f5 f963 	bl	80061ec <HAL_I2C_Mem_Write>
}
 8010f26:	bf00      	nop
 8010f28:	3710      	adds	r7, #16
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
	...

08010f30 <OLED_WR_Byte>:
//[7]0 1 2 3 ... 127
// 向SSD1306写入一个字节
// dat:要写入的数据/命令
// cmd:数据/命令标志 0，表示命令；1，表示数据
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	4603      	mov	r3, r0
 8010f38:	460a      	mov	r2, r1
 8010f3a:	71fb      	strb	r3, [r7, #7]
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	71bb      	strb	r3, [r7, #6]
	if (cmd)
 8010f40:	79bb      	ldrb	r3, [r7, #6]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d005      	beq.n	8010f52 <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set(); // 命令/数据标志位置为1，则表示传送的是命令字节
 8010f46:	2201      	movs	r2, #1
 8010f48:	2140      	movs	r1, #64	@ 0x40
 8010f4a:	4811      	ldr	r0, [pc, #68]	@ (8010f90 <OLED_WR_Byte+0x60>)
 8010f4c:	f7f5 f88a 	bl	8006064 <HAL_GPIO_WritePin>
 8010f50:	e004      	b.n	8010f5c <OLED_WR_Byte+0x2c>
	}
	else
		OLED_DC_Clr();						 // 命令/数据标志位置为0，则表示传送的是数据字节
 8010f52:	2200      	movs	r2, #0
 8010f54:	2140      	movs	r1, #64	@ 0x40
 8010f56:	480e      	ldr	r0, [pc, #56]	@ (8010f90 <OLED_WR_Byte+0x60>)
 8010f58:	f7f5 f884 	bl	8006064 <HAL_GPIO_WritePin>
	OLED_CS_Clr();							 // 片选信号为低，表示选中OLED
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	2102      	movs	r1, #2
 8010f60:	480c      	ldr	r0, [pc, #48]	@ (8010f94 <OLED_WR_Byte+0x64>)
 8010f62:	f7f5 f87f 	bl	8006064 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 1000); // oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 8010f66:	1df9      	adds	r1, r7, #7
 8010f68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f6c:	2201      	movs	r2, #1
 8010f6e:	480a      	ldr	r0, [pc, #40]	@ (8010f98 <OLED_WR_Byte+0x68>)
 8010f70:	f7fa fe82 	bl	800bc78 <HAL_SPI_Transmit>
	OLED_CS_Set();
 8010f74:	2201      	movs	r2, #1
 8010f76:	2102      	movs	r1, #2
 8010f78:	4806      	ldr	r0, [pc, #24]	@ (8010f94 <OLED_WR_Byte+0x64>)
 8010f7a:	f7f5 f873 	bl	8006064 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 8010f7e:	2201      	movs	r2, #1
 8010f80:	2140      	movs	r1, #64	@ 0x40
 8010f82:	4803      	ldr	r0, [pc, #12]	@ (8010f90 <OLED_WR_Byte+0x60>)
 8010f84:	f7f5 f86e 	bl	8006064 <HAL_GPIO_WritePin>
}
 8010f88:	bf00      	nop
 8010f8a:	3708      	adds	r7, #8
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	58022000 	.word	0x58022000
 8010f94:	58020400 	.word	0x58020400
 8010f98:	240004b0 	.word	0x240004b0

08010f9c <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	460a      	mov	r2, r1
 8010fa6:	71fb      	strb	r3, [r7, #7]
 8010fa8:	4613      	mov	r3, r2
 8010faa:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0 + y, OLED_CMD);
 8010fac:	79bb      	ldrb	r3, [r7, #6]
 8010fae:	3b50      	subs	r3, #80	@ 0x50
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	2100      	movs	r1, #0
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7ff ffbb 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte((((x + 2) & 0xf0) >> 4) | 0x10, OLED_CMD);
 8010fba:	79fb      	ldrb	r3, [r7, #7]
 8010fbc:	3302      	adds	r3, #2
 8010fbe:	111b      	asrs	r3, r3, #4
 8010fc0:	b25b      	sxtb	r3, r3
 8010fc2:	f003 030f 	and.w	r3, r3, #15
 8010fc6:	b25b      	sxtb	r3, r3
 8010fc8:	f043 0310 	orr.w	r3, r3, #16
 8010fcc:	b25b      	sxtb	r3, r3
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	2100      	movs	r1, #0
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7ff ffac 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(((x + 2) & 0x0f), OLED_CMD);
 8010fd8:	79fb      	ldrb	r3, [r7, #7]
 8010fda:	3302      	adds	r3, #2
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	f003 030f 	and.w	r3, r3, #15
 8010fe2:	b2db      	uxtb	r3, r3
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7ff ffa2 	bl	8010f30 <OLED_WR_Byte>
}
 8010fec:	bf00      	nop
 8010fee:	3708      	adds	r7, #8
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <OLED_Clear>:
	OLED_WR_Byte(0X10, OLED_CMD); // 关闭电荷泵
	OLED_WR_Byte(0XAE, OLED_CMD); // DISPLAY OFF
}
// 清屏函数，清完后整个屏幕都是黑色的，没有一点光亮
void OLED_Clear(void)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	71fb      	strb	r3, [r7, #7]
 8010ffe:	e01f      	b.n	8011040 <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置页地址
 8011000:	79fb      	ldrb	r3, [r7, #7]
 8011002:	3b50      	subs	r3, #80	@ 0x50
 8011004:	b2db      	uxtb	r3, r3
 8011006:	2100      	movs	r1, #0
 8011008:	4618      	mov	r0, r3
 801100a:	f7ff ff91 	bl	8010f30 <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);	  // 设置起始列低地址
 801100e:	2100      	movs	r1, #0
 8011010:	2002      	movs	r0, #2
 8011012:	f7ff ff8d 	bl	8010f30 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置起始列高地址
 8011016:	2100      	movs	r1, #0
 8011018:	2010      	movs	r0, #16
 801101a:	f7ff ff89 	bl	8010f30 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 801101e:	2300      	movs	r3, #0
 8011020:	71bb      	strb	r3, [r7, #6]
 8011022:	e006      	b.n	8011032 <OLED_Clear+0x3e>
			OLED_WR_Byte(0, OLED_DATA);
 8011024:	2101      	movs	r1, #1
 8011026:	2000      	movs	r0, #0
 8011028:	f7ff ff82 	bl	8010f30 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 801102c:	79bb      	ldrb	r3, [r7, #6]
 801102e:	3301      	adds	r3, #1
 8011030:	71bb      	strb	r3, [r7, #6]
 8011032:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011036:	2b00      	cmp	r3, #0
 8011038:	daf4      	bge.n	8011024 <OLED_Clear+0x30>
	for (i = 0; i < 8; i++)
 801103a:	79fb      	ldrb	r3, [r7, #7]
 801103c:	3301      	adds	r3, #1
 801103e:	71fb      	strb	r3, [r7, #7]
 8011040:	79fb      	ldrb	r3, [r7, #7]
 8011042:	2b07      	cmp	r3, #7
 8011044:	d9dc      	bls.n	8011000 <OLED_Clear+0xc>
	} // 更新显示
}
 8011046:	bf00      	nop
 8011048:	bf00      	nop
 801104a:	3708      	adds	r7, #8
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <OLED_ShowChar>:
// x:0~127
// y:0~6
// mode:0,反白显示；1，正常显示
// size:选择字体大小 16/12
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	4603      	mov	r3, r0
 8011058:	71fb      	strb	r3, [r7, #7]
 801105a:	460b      	mov	r3, r1
 801105c:	71bb      	strb	r3, [r7, #6]
 801105e:	4613      	mov	r3, r2
 8011060:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0, i = 0;
 8011062:	2300      	movs	r3, #0
 8011064:	73bb      	strb	r3, [r7, #14]
 8011066:	2300      	movs	r3, #0
 8011068:	73fb      	strb	r3, [r7, #15]
	c = chr - ' '; // 得到偏移后的值
 801106a:	797b      	ldrb	r3, [r7, #5]
 801106c:	3b20      	subs	r3, #32
 801106e:	73bb      	strb	r3, [r7, #14]
	if (x > Max_Column - 1)
 8011070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011074:	2b00      	cmp	r3, #0
 8011076:	da04      	bge.n	8011082 <OLED_ShowChar+0x32>
	{
		x = 0;
 8011078:	2300      	movs	r3, #0
 801107a:	71fb      	strb	r3, [r7, #7]
		y = y + 2;
 801107c:	79bb      	ldrb	r3, [r7, #6]
 801107e:	3302      	adds	r3, #2
 8011080:	71bb      	strb	r3, [r7, #6]
	}
	if (SIZE == 16)
	{
		OLED_Set_Pos(x, y);
 8011082:	79ba      	ldrb	r2, [r7, #6]
 8011084:	79fb      	ldrb	r3, [r7, #7]
 8011086:	4611      	mov	r1, r2
 8011088:	4618      	mov	r0, r3
 801108a:	f7ff ff87 	bl	8010f9c <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 801108e:	2300      	movs	r3, #0
 8011090:	73fb      	strb	r3, [r7, #15]
 8011092:	e00c      	b.n	80110ae <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 8011094:	7bbb      	ldrb	r3, [r7, #14]
 8011096:	011a      	lsls	r2, r3, #4
 8011098:	7bfb      	ldrb	r3, [r7, #15]
 801109a:	4413      	add	r3, r2
 801109c:	4a16      	ldr	r2, [pc, #88]	@ (80110f8 <OLED_ShowChar+0xa8>)
 801109e:	5cd3      	ldrb	r3, [r2, r3]
 80110a0:	2101      	movs	r1, #1
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7ff ff44 	bl	8010f30 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 80110a8:	7bfb      	ldrb	r3, [r7, #15]
 80110aa:	3301      	adds	r3, #1
 80110ac:	73fb      	strb	r3, [r7, #15]
 80110ae:	7bfb      	ldrb	r3, [r7, #15]
 80110b0:	2b07      	cmp	r3, #7
 80110b2:	d9ef      	bls.n	8011094 <OLED_ShowChar+0x44>
		OLED_Set_Pos(x, y + 1);
 80110b4:	79bb      	ldrb	r3, [r7, #6]
 80110b6:	3301      	adds	r3, #1
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	79fb      	ldrb	r3, [r7, #7]
 80110bc:	4611      	mov	r1, r2
 80110be:	4618      	mov	r0, r3
 80110c0:	f7ff ff6c 	bl	8010f9c <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 80110c4:	2300      	movs	r3, #0
 80110c6:	73fb      	strb	r3, [r7, #15]
 80110c8:	e00d      	b.n	80110e6 <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 80110ca:	7bbb      	ldrb	r3, [r7, #14]
 80110cc:	011a      	lsls	r2, r3, #4
 80110ce:	7bfb      	ldrb	r3, [r7, #15]
 80110d0:	4413      	add	r3, r2
 80110d2:	3308      	adds	r3, #8
 80110d4:	4a08      	ldr	r2, [pc, #32]	@ (80110f8 <OLED_ShowChar+0xa8>)
 80110d6:	5cd3      	ldrb	r3, [r2, r3]
 80110d8:	2101      	movs	r1, #1
 80110da:	4618      	mov	r0, r3
 80110dc:	f7ff ff28 	bl	8010f30 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 80110e0:	7bfb      	ldrb	r3, [r7, #15]
 80110e2:	3301      	adds	r3, #1
 80110e4:	73fb      	strb	r3, [r7, #15]
 80110e6:	7bfb      	ldrb	r3, [r7, #15]
 80110e8:	2b07      	cmp	r3, #7
 80110ea:	d9ee      	bls.n	80110ca <OLED_ShowChar+0x7a>
	{
		OLED_Set_Pos(x, y + 1);
		for (i = 0; i < 6; i++)
			OLED_WR_Byte(F6x8[c][i], OLED_DATA);
	}
}
 80110ec:	bf00      	nop
 80110ee:	bf00      	nop
 80110f0:	3710      	adds	r7, #16
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	080151c8 	.word	0x080151c8

080110fc <OLED_ShowString>:
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0');
	}
}
// 显示一个字符串
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b084      	sub	sp, #16
 8011100:	af00      	add	r7, sp, #0
 8011102:	4603      	mov	r3, r0
 8011104:	603a      	str	r2, [r7, #0]
 8011106:	71fb      	strb	r3, [r7, #7]
 8011108:	460b      	mov	r3, r1
 801110a:	71bb      	strb	r3, [r7, #6]
	unsigned char j = 0;
 801110c:	2300      	movs	r3, #0
 801110e:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 8011110:	e016      	b.n	8011140 <OLED_ShowString+0x44>
	{
		OLED_ShowChar(x, y, chr[j]);
 8011112:	7bfb      	ldrb	r3, [r7, #15]
 8011114:	683a      	ldr	r2, [r7, #0]
 8011116:	4413      	add	r3, r2
 8011118:	781a      	ldrb	r2, [r3, #0]
 801111a:	79b9      	ldrb	r1, [r7, #6]
 801111c:	79fb      	ldrb	r3, [r7, #7]
 801111e:	4618      	mov	r0, r3
 8011120:	f7ff ff96 	bl	8011050 <OLED_ShowChar>
		x += 8;
 8011124:	79fb      	ldrb	r3, [r7, #7]
 8011126:	3308      	adds	r3, #8
 8011128:	71fb      	strb	r3, [r7, #7]
		if (x > 120)
 801112a:	79fb      	ldrb	r3, [r7, #7]
 801112c:	2b78      	cmp	r3, #120	@ 0x78
 801112e:	d904      	bls.n	801113a <OLED_ShowString+0x3e>
		{
			x = 0;
 8011130:	2300      	movs	r3, #0
 8011132:	71fb      	strb	r3, [r7, #7]
			y += 2;
 8011134:	79bb      	ldrb	r3, [r7, #6]
 8011136:	3302      	adds	r3, #2
 8011138:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 801113a:	7bfb      	ldrb	r3, [r7, #15]
 801113c:	3301      	adds	r3, #1
 801113e:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 8011140:	7bfb      	ldrb	r3, [r7, #15]
 8011142:	683a      	ldr	r2, [r7, #0]
 8011144:	4413      	add	r3, r2
 8011146:	781b      	ldrb	r3, [r3, #0]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d1e2      	bne.n	8011112 <OLED_ShowString+0x16>
	}
}
 801114c:	bf00      	nop
 801114e:	bf00      	nop
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}
	...

08011158 <OLED_Init>:
	}
}

// 初始化SSD1306
void OLED_Init(void)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	af00      	add	r7, sp, #0
	// 复位OLED
	OLED_RST_Clr(); // 拉低复位引脚
 801115c:	2200      	movs	r2, #0
 801115e:	2120      	movs	r1, #32
 8011160:	4841      	ldr	r0, [pc, #260]	@ (8011268 <OLED_Init+0x110>)
 8011162:	f7f4 ff7f 	bl	8006064 <HAL_GPIO_WritePin>
	HAL_Delay(200); // 延时200毫秒
 8011166:	20c8      	movs	r0, #200	@ 0xc8
 8011168:	f7f0 fd1a 	bl	8001ba0 <HAL_Delay>
	OLED_RST_Set(); // 拉高复位引脚
 801116c:	2201      	movs	r2, #1
 801116e:	2120      	movs	r1, #32
 8011170:	483d      	ldr	r0, [pc, #244]	@ (8011268 <OLED_Init+0x110>)
 8011172:	f7f4 ff77 	bl	8006064 <HAL_GPIO_WritePin>

	// 关闭OLED面板
	OLED_WR_Byte(0xAE, OLED_CMD); // 关闭面板指令
 8011176:	2100      	movs	r1, #0
 8011178:	20ae      	movs	r0, #174	@ 0xae
 801117a:	f7ff fed9 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // 设置低列地址
 801117e:	2100      	movs	r1, #0
 8011180:	2002      	movs	r0, #2
 8011182:	f7ff fed5 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址
 8011186:	2100      	movs	r1, #0
 8011188:	2010      	movs	r0, #16
 801118a:	f7ff fed1 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置起始行地址，映射RAM显示起始行（0x00~0x3F）
 801118e:	2100      	movs	r1, #0
 8011190:	2040      	movs	r0, #64	@ 0x40
 8011192:	f7ff fecd 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); // 设置对比度控制寄存器
 8011196:	2100      	movs	r1, #0
 8011198:	2081      	movs	r0, #129	@ 0x81
 801119a:	f7ff fec9 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // 设置SEG输出电流亮度
 801119e:	2100      	movs	r1, #0
 80111a0:	20cf      	movs	r0, #207	@ 0xcf
 80111a2:	f7ff fec5 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // 设置SEG/列映射，0Xa0左右反置，0Xa1正常
 80111a6:	2100      	movs	r1, #0
 80111a8:	20a1      	movs	r0, #161	@ 0xa1
 80111aa:	f7ff fec1 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // 设置COM/行扫描方向，0Xc0上下反置，0Xc8正常
 80111ae:	2100      	movs	r1, #0
 80111b0:	20c8      	movs	r0, #200	@ 0xc8
 80111b2:	f7ff febd 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 设置正常显示
 80111b6:	2100      	movs	r1, #0
 80111b8:	20a6      	movs	r0, #166	@ 0xa6
 80111ba:	f7ff feb9 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // 设置多路复用比（1到64）
 80111be:	2100      	movs	r1, #0
 80111c0:	20a8      	movs	r0, #168	@ 0xa8
 80111c2:	f7ff feb5 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); // 1/64 duty
 80111c6:	2100      	movs	r1, #0
 80111c8:	203f      	movs	r0, #63	@ 0x3f
 80111ca:	f7ff feb1 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // 设置显示偏移，移动映射RAM计数器（0x00~0x3F）
 80111ce:	2100      	movs	r1, #0
 80111d0:	20d3      	movs	r0, #211	@ 0xd3
 80111d2:	f7ff fead 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); // 不偏移
 80111d6:	2100      	movs	r1, #0
 80111d8:	2000      	movs	r0, #0
 80111da:	f7ff fea9 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); // 设置显示时钟分频比/振荡器频率
 80111de:	2100      	movs	r1, #0
 80111e0:	20d5      	movs	r0, #213	@ 0xd5
 80111e2:	f7ff fea5 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); // 设置分频比，设置时钟为100帧/秒
 80111e6:	2100      	movs	r1, #0
 80111e8:	2080      	movs	r0, #128	@ 0x80
 80111ea:	f7ff fea1 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // 设置预充电周期
 80111ee:	2100      	movs	r1, #0
 80111f0:	20d9      	movs	r0, #217	@ 0xd9
 80111f2:	f7ff fe9d 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // 设置预充电为15个时钟，放电为1个时钟
 80111f6:	2100      	movs	r1, #0
 80111f8:	20f1      	movs	r0, #241	@ 0xf1
 80111fa:	f7ff fe99 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // 设置COM引脚硬件配置
 80111fe:	2100      	movs	r1, #0
 8011200:	20da      	movs	r0, #218	@ 0xda
 8011202:	f7ff fe95 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8011206:	2100      	movs	r1, #0
 8011208:	2012      	movs	r0, #18
 801120a:	f7ff fe91 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // 设置vcomh
 801120e:	2100      	movs	r1, #0
 8011210:	20db      	movs	r0, #219	@ 0xdb
 8011212:	f7ff fe8d 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置VCOM取消电平
 8011216:	2100      	movs	r1, #0
 8011218:	2040      	movs	r0, #64	@ 0x40
 801121a:	f7ff fe89 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // 设置页面寻址模式（0x00/0x01/0x02）
 801121e:	2100      	movs	r1, #0
 8011220:	2020      	movs	r0, #32
 8011222:	f7ff fe85 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);
 8011226:	2100      	movs	r1, #0
 8011228:	2002      	movs	r0, #2
 801122a:	f7ff fe81 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); // 设置充电泵使能/禁用
 801122e:	2100      	movs	r1, #0
 8011230:	208d      	movs	r0, #141	@ 0x8d
 8011232:	f7ff fe7d 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // 设置（0x10）禁用
 8011236:	2100      	movs	r1, #0
 8011238:	2014      	movs	r0, #20
 801123a:	f7ff fe79 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // 禁用整个显示（0xa4/0xa5）
 801123e:	2100      	movs	r1, #0
 8011240:	20a4      	movs	r0, #164	@ 0xa4
 8011242:	f7ff fe75 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 禁用反相显示（0xa6/a7）
 8011246:	2100      	movs	r1, #0
 8011248:	20a6      	movs	r0, #166	@ 0xa6
 801124a:	f7ff fe71 	bl	8010f30 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // 打开OLED面板
 801124e:	2100      	movs	r1, #0
 8011250:	20af      	movs	r0, #175	@ 0xaf
 8011252:	f7ff fe6d 	bl	8010f30 <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); /*显示开*/
 8011256:	2100      	movs	r1, #0
 8011258:	20af      	movs	r0, #175	@ 0xaf
 801125a:	f7ff fe69 	bl	8010f30 <OLED_WR_Byte>
	OLED_Clear();				  // 清除显示
 801125e:	f7ff fec9 	bl	8010ff4 <OLED_Clear>
}
 8011262:	bf00      	nop
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	58020800 	.word	0x58020800

0801126c <pll_Init>:
 * @param config: 配置指针
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 801126c:	b480      	push	{r7}
 801126e:	b085      	sub	sp, #20
 8011270:	af00      	add	r7, sp, #0
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	ed87 0a01 	vstr	s0, [r7, #4]
 801127a:	4613      	mov	r3, r2
 801127c:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f04f 0200 	mov.w	r2, #0
 8011284:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	f04f 0200 	mov.w	r2, #0
 801128c:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	f04f 0200 	mov.w	r2, #0
 8011294:	609a      	str	r2, [r3, #8]

    signal->sogi_a_1 = 0.f;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f04f 0200 	mov.w	r2, #0
 801129c:	611a      	str	r2, [r3, #16]
    signal->sogi_a_2 = 0.f;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f04f 0200 	mov.w	r2, #0
 80112a4:	615a      	str	r2, [r3, #20]
    signal->sogi_b_1 = 0.f;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	f04f 0200 	mov.w	r2, #0
 80112ac:	61da      	str	r2, [r3, #28]
    signal->sogi_b_2 = 0.f;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f04f 0200 	mov.w	r2, #0
 80112b4:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f04f 0200 	mov.w	r2, #0
 80112bc:	635a      	str	r2, [r3, #52]	@ 0x34

    config->omiga = 2 * PI * f; // f典型值50
 80112be:	edd7 7a01 	vldr	s15, [r7, #4]
 80112c2:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011428 <pll_Init+0x1bc>
 80112c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 80112d0:	887b      	ldrh	r3, [r7, #2]
 80112d2:	ee07 3a90 	vmov	s15, r3
 80112d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80112da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80112de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	4a50      	ldr	r2, [pc, #320]	@ (801142c <pll_Init+0x1c0>)
 80112ec:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	f04f 0200 	mov.w	r2, #0
 80112f4:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	edd3 7a00 	vldr	s15, [r3]
 80112fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011300:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	edd3 7a01 	vldr	s15, [r3, #4]
 801130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	edd3 7a02 	vldr	s15, [r3, #8]
 801131a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	edd3 7a00 	vldr	s15, [r3]
 8011324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	edd3 7a01 	vldr	s15, [r3, #4]
 801132e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	ed93 7a00 	vldr	s14, [r3]
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	edd3 7a01 	vldr	s15, [r3, #4]
 8011344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	edd3 7a00 	vldr	s15, [r3]
 801134e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	edd3 7a01 	vldr	s15, [r3, #4]
 8011358:	ee67 7a27 	vmul.f32	s15, s14, s15
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011378:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801137c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011390:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011394:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8011398:	ee77 6a67 	vsub.f32	s13, s14, s15
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80113a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113ac:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80113b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80113b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80113ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113ce:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80113d2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80113e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113e6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80113ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80113ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	4a0d      	ldr	r2, [pc, #52]	@ (8011430 <pll_Init+0x1c4>)
 80113fc:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	4a0c      	ldr	r2, [pc, #48]	@ (8011434 <pll_Init+0x1c8>)
 8011402:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	f04f 0200 	mov.w	r2, #0
 801140a:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f04f 0200 	mov.w	r2, #0
 8011412:	641a      	str	r2, [r3, #64]	@ 0x40
    signal->pid_out = 0.f;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f04f 0200 	mov.w	r2, #0
 801141a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801141c:	bf00      	nop
 801141e:	3714      	adds	r7, #20
 8011420:	46bd      	mov	sp, r7
 8011422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011426:	4770      	bx	lr
 8011428:	40c90fdb 	.word	0x40c90fdb
 801142c:	3fb4fdf4 	.word	0x3fb4fdf4
 8011430:	428d78c3 	.word	0x428d78c3
 8011434:	46758fb9 	.word	0x46758fb9

08011438 <pll_Control>:
 * @param signal_In: 信号指针
 * @param config: 配置指针
 * @param signal_Target: 目标信号指针
 */
void pll_Control(pll_Signal *signal_In, pll_Config *config, pll_Signal *signal_Target)
{
 8011438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801143c:	ed2d 8b02 	vpush	{d8}
 8011440:	b090      	sub	sp, #64	@ 0x40
 8011442:	af00      	add	r7, sp, #0
 8011444:	60f8      	str	r0, [r7, #12]
 8011446:	60b9      	str	r1, [r7, #8]
 8011448:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_In);
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f000 f932 	bl	80116b4 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_In->sogi_a_0, signal_In->sogi_b_0 / 382 * 3, &signal_In->park_d, &signal_In->park_q, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	68de      	ldr	r6, [r3, #12]
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	ed93 7a06 	vldr	s14, [r3, #24]
 801145a:	eddf 6a67 	vldr	s13, [pc, #412]	@ 80115f8 <pll_Control+0x1c0>
 801145e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011462:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8011466:	ee27 8a87 	vmul.f32	s16, s15, s14
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801147c:	eeb0 0a67 	vmov.f32	s0, s15
 8011480:	f000 fec8 	bl	8012214 <arm_sin_f32>
 8011484:	eef0 8a40 	vmov.f32	s17, s0
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801148e:	eeb0 0a67 	vmov.f32	s0, s15
 8011492:	f000 ff05 	bl	80122a0 <arm_cos_f32>
 8011496:	eef0 7a40 	vmov.f32	s15, s0
 801149a:	627e      	str	r6, [r7, #36]	@ 0x24
 801149c:	ed87 8a08 	vstr	s16, [r7, #32]
 80114a0:	61fd      	str	r5, [r7, #28]
 80114a2:	61bc      	str	r4, [r7, #24]
 80114a4:	edc7 8a05 	vstr	s17, [r7, #20]
 80114a8:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80114ac:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80114b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80114b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80114b8:	edd7 6a08 	vldr	s13, [r7, #32]
 80114bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80114c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80114ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80114d2:	eeb1 7a67 	vneg.f32	s14, s15
 80114d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80114da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80114de:	edd7 6a08 	vldr	s13, [r7, #32]
 80114e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80114e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	edc3 7a00 	vstr	s15, [r3]
  }
 80114f4:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal_In, config);
 80114f6:	68b9      	ldr	r1, [r7, #8]
 80114f8:	68f8      	ldr	r0, [r7, #12]
 80114fa:	f000 f87f 	bl	80115fc <pll_Pid>
    // 更新theta
    signal_In->theta += (signal_In->pid_out + config->omiga) * config->Ts;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	edd3 7a00 	vldr	s15, [r3]
 8011510:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	edd3 7a01 	vldr	s15, [r3, #4]
 801151a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801151e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal_In->theta = (float)fmod(signal_In->theta, 2 * PI);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801152e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011532:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 80115f0 <pll_Control+0x1b8>
 8011536:	eeb0 0b47 	vmov.f64	d0, d7
 801153a:	f003 fcb5 	bl	8014ea8 <fmod>
 801153e:	eeb0 7b40 	vmov.f64	d7, d0
 8011542:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    // 反park变换
    arm_inv_park_f32(signal_In->park_d, signal_In->park_q, &signal_In->park_inv_a, &signal_In->park_inv_b, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	f103 052c 	add.w	r5, r3, #44	@ 0x2c
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8011568:	eeb0 0a67 	vmov.f32	s0, s15
 801156c:	f000 fe52 	bl	8012214 <arm_sin_f32>
 8011570:	eeb0 8a40 	vmov.f32	s16, s0
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801157a:	eeb0 0a67 	vmov.f32	s0, s15
 801157e:	f000 fe8f 	bl	80122a0 <arm_cos_f32>
 8011582:	eef0 7a40 	vmov.f32	s15, s0
 8011586:	f8c7 803c 	str.w	r8, [r7, #60]	@ 0x3c
 801158a:	63be      	str	r6, [r7, #56]	@ 0x38
 801158c:	637d      	str	r5, [r7, #52]	@ 0x34
 801158e:	633c      	str	r4, [r7, #48]	@ 0x30
 8011590:	ed87 8a0b 	vstr	s16, [r7, #44]	@ 0x2c
 8011594:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 8011598:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 801159c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80115a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80115a4:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80115a8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80115ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115b6:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 80115ba:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80115be:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80115c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80115c6:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80115ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80115ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115d8:	edc3 7a00 	vstr	s15, [r3]
  }
 80115dc:	bf00      	nop
}
 80115de:	bf00      	nop
 80115e0:	3740      	adds	r7, #64	@ 0x40
 80115e2:	46bd      	mov	sp, r7
 80115e4:	ecbd 8b02 	vpop	{d8}
 80115e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ec:	f3af 8000 	nop.w
 80115f0:	60000000 	.word	0x60000000
 80115f4:	401921fb 	.word	0x401921fb
 80115f8:	43bf0000 	.word	0x43bf0000

080115fc <pll_Pid>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 80115fc:	b480      	push	{r7}
 80115fe:	b083      	sub	sp, #12
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	edd3 7a03 	vldr	s15, [r3, #12]
 8011612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    signal->pid_out = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	edd3 6a04 	vldr	s13, [r3, #16]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8011634:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801163c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	edd3 6a05 	vldr	s13, [r3, #20]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801164c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8011660:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80116a4 <pll_Pid+0xa8>
 8011664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801166c:	dd03      	ble.n	8011676 <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4a0d      	ldr	r2, [pc, #52]	@ (80116a8 <pll_Pid+0xac>)
 8011672:	639a      	str	r2, [r3, #56]	@ 0x38
 8011674:	e00c      	b.n	8011690 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 801167c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80116ac <pll_Pid+0xb0>
 8011680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011688:	d502      	bpl.n	8011690 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4a08      	ldr	r2, [pc, #32]	@ (80116b0 <pll_Pid+0xb4>)
 801168e:	639a      	str	r2, [r3, #56]	@ 0x38

    signal->pid_err[1] = signal->pid_err[0];
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8011698:	bf00      	nop
 801169a:	370c      	adds	r7, #12
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr
 80116a4:	431d1463 	.word	0x431d1463
 80116a8:	431d1463 	.word	0x431d1463
 80116ac:	c27b53d2 	.word	0xc27b53d2
 80116b0:	c27b53d2 	.word	0xc27b53d2

080116b4 <pll_Sogi>:
 * @brief Sogi变换
 *
 * @param signal: 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b083      	sub	sp, #12
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
    signal->sogi_a_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_a_1 + signal->a2 * signal->sogi_a_2;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	edd3 7a00 	vldr	s15, [r3]
 80116c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80116d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80116ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8011700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_b_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_b_1 + signal->a2 * signal->sogi_b_2;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	edd3 7a00 	vldr	s15, [r3]
 801171a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8011724:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	edd3 7a01 	vldr	s15, [r3, #4]
 801172e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011746:	ee37 7a27 	vadd.f32	s14, s14, s15
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	edd3 7a07 	vldr	s15, [r3, #28]
 8011756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801175a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	edd3 7a08 	vldr	s15, [r3, #32]
 801176a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801176e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681a      	ldr	r2, [r3, #0]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	605a      	str	r2, [r3, #4]
    signal->sogi_a_2 = signal->sogi_a_1;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	691a      	ldr	r2, [r3, #16]
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	615a      	str	r2, [r3, #20]
    signal->sogi_a_1 = signal->sogi_a_0;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	68da      	ldr	r2, [r3, #12]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	611a      	str	r2, [r3, #16]
    signal->sogi_b_2 = signal->sogi_b_1;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	69da      	ldr	r2, [r3, #28]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	621a      	str	r2, [r3, #32]
    signal->sogi_b_1 = signal->sogi_b_0;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	699a      	ldr	r2, [r3, #24]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	61da      	str	r2, [r3, #28]
}
 80117a8:	bf00      	nop
 80117aa:	370c      	adds	r7, #12
 80117ac:	46bd      	mov	sp, r7
 80117ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b2:	4770      	bx	lr

080117b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80117b8:	2200      	movs	r2, #0
 80117ba:	4913      	ldr	r1, [pc, #76]	@ (8011808 <MX_USB_DEVICE_Init+0x54>)
 80117bc:	4813      	ldr	r0, [pc, #76]	@ (801180c <MX_USB_DEVICE_Init+0x58>)
 80117be:	f7fe f857 	bl	800f870 <USBD_Init>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d001      	beq.n	80117cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80117c8:	f7ef fcc4 	bl	8001154 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80117cc:	4910      	ldr	r1, [pc, #64]	@ (8011810 <MX_USB_DEVICE_Init+0x5c>)
 80117ce:	480f      	ldr	r0, [pc, #60]	@ (801180c <MX_USB_DEVICE_Init+0x58>)
 80117d0:	f7fe f87e 	bl	800f8d0 <USBD_RegisterClass>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d001      	beq.n	80117de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80117da:	f7ef fcbb 	bl	8001154 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80117de:	490d      	ldr	r1, [pc, #52]	@ (8011814 <MX_USB_DEVICE_Init+0x60>)
 80117e0:	480a      	ldr	r0, [pc, #40]	@ (801180c <MX_USB_DEVICE_Init+0x58>)
 80117e2:	f7fd ff75 	bl	800f6d0 <USBD_CDC_RegisterInterface>
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d001      	beq.n	80117f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80117ec:	f7ef fcb2 	bl	8001154 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80117f0:	4806      	ldr	r0, [pc, #24]	@ (801180c <MX_USB_DEVICE_Init+0x58>)
 80117f2:	f7fe f8a3 	bl	800f93c <USBD_Start>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d001      	beq.n	8011800 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80117fc:	f7ef fcaa 	bl	8001154 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011800:	f7f6 fbf6 	bl	8007ff0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011804:	bf00      	nop
 8011806:	bd80      	pop	{r7, pc}
 8011808:	240000b4 	.word	0x240000b4
 801180c:	24000628 	.word	0x24000628
 8011810:	24000020 	.word	0x24000020
 8011814:	240000a0 	.word	0x240000a0

08011818 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801181c:	2200      	movs	r2, #0
 801181e:	4905      	ldr	r1, [pc, #20]	@ (8011834 <CDC_Init_FS+0x1c>)
 8011820:	4805      	ldr	r0, [pc, #20]	@ (8011838 <CDC_Init_FS+0x20>)
 8011822:	f7fd ff6f 	bl	800f704 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011826:	4905      	ldr	r1, [pc, #20]	@ (801183c <CDC_Init_FS+0x24>)
 8011828:	4803      	ldr	r0, [pc, #12]	@ (8011838 <CDC_Init_FS+0x20>)
 801182a:	f7fd ff8d 	bl	800f748 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801182e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011830:	4618      	mov	r0, r3
 8011832:	bd80      	pop	{r7, pc}
 8011834:	24001104 	.word	0x24001104
 8011838:	24000628 	.word	0x24000628
 801183c:	24000904 	.word	0x24000904

08011840 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011840:	b480      	push	{r7}
 8011842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011844:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011846:	4618      	mov	r0, r3
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr

08011850 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011850:	b480      	push	{r7}
 8011852:	b083      	sub	sp, #12
 8011854:	af00      	add	r7, sp, #0
 8011856:	4603      	mov	r3, r0
 8011858:	6039      	str	r1, [r7, #0]
 801185a:	71fb      	strb	r3, [r7, #7]
 801185c:	4613      	mov	r3, r2
 801185e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011860:	79fb      	ldrb	r3, [r7, #7]
 8011862:	2b23      	cmp	r3, #35	@ 0x23
 8011864:	d84a      	bhi.n	80118fc <CDC_Control_FS+0xac>
 8011866:	a201      	add	r2, pc, #4	@ (adr r2, 801186c <CDC_Control_FS+0x1c>)
 8011868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801186c:	080118fd 	.word	0x080118fd
 8011870:	080118fd 	.word	0x080118fd
 8011874:	080118fd 	.word	0x080118fd
 8011878:	080118fd 	.word	0x080118fd
 801187c:	080118fd 	.word	0x080118fd
 8011880:	080118fd 	.word	0x080118fd
 8011884:	080118fd 	.word	0x080118fd
 8011888:	080118fd 	.word	0x080118fd
 801188c:	080118fd 	.word	0x080118fd
 8011890:	080118fd 	.word	0x080118fd
 8011894:	080118fd 	.word	0x080118fd
 8011898:	080118fd 	.word	0x080118fd
 801189c:	080118fd 	.word	0x080118fd
 80118a0:	080118fd 	.word	0x080118fd
 80118a4:	080118fd 	.word	0x080118fd
 80118a8:	080118fd 	.word	0x080118fd
 80118ac:	080118fd 	.word	0x080118fd
 80118b0:	080118fd 	.word	0x080118fd
 80118b4:	080118fd 	.word	0x080118fd
 80118b8:	080118fd 	.word	0x080118fd
 80118bc:	080118fd 	.word	0x080118fd
 80118c0:	080118fd 	.word	0x080118fd
 80118c4:	080118fd 	.word	0x080118fd
 80118c8:	080118fd 	.word	0x080118fd
 80118cc:	080118fd 	.word	0x080118fd
 80118d0:	080118fd 	.word	0x080118fd
 80118d4:	080118fd 	.word	0x080118fd
 80118d8:	080118fd 	.word	0x080118fd
 80118dc:	080118fd 	.word	0x080118fd
 80118e0:	080118fd 	.word	0x080118fd
 80118e4:	080118fd 	.word	0x080118fd
 80118e8:	080118fd 	.word	0x080118fd
 80118ec:	080118fd 	.word	0x080118fd
 80118f0:	080118fd 	.word	0x080118fd
 80118f4:	080118fd 	.word	0x080118fd
 80118f8:	080118fd 	.word	0x080118fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80118fc:	bf00      	nop
  }

  return (USBD_OK);
 80118fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011900:	4618      	mov	r0, r3
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011916:	6879      	ldr	r1, [r7, #4]
 8011918:	4805      	ldr	r0, [pc, #20]	@ (8011930 <CDC_Receive_FS+0x24>)
 801191a:	f7fd ff15 	bl	800f748 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801191e:	4804      	ldr	r0, [pc, #16]	@ (8011930 <CDC_Receive_FS+0x24>)
 8011920:	f7fd ff70 	bl	800f804 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011924:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011926:	4618      	mov	r0, r3
 8011928:	3708      	adds	r7, #8
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}
 801192e:	bf00      	nop
 8011930:	24000628 	.word	0x24000628

08011934 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	460b      	mov	r3, r1
 801193e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011940:	2300      	movs	r3, #0
 8011942:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011944:	4b0d      	ldr	r3, [pc, #52]	@ (801197c <CDC_Transmit_FS+0x48>)
 8011946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801194a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011952:	2b00      	cmp	r3, #0
 8011954:	d001      	beq.n	801195a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011956:	2301      	movs	r3, #1
 8011958:	e00b      	b.n	8011972 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801195a:	887b      	ldrh	r3, [r7, #2]
 801195c:	461a      	mov	r2, r3
 801195e:	6879      	ldr	r1, [r7, #4]
 8011960:	4806      	ldr	r0, [pc, #24]	@ (801197c <CDC_Transmit_FS+0x48>)
 8011962:	f7fd fecf 	bl	800f704 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011966:	4805      	ldr	r0, [pc, #20]	@ (801197c <CDC_Transmit_FS+0x48>)
 8011968:	f7fd ff0c 	bl	800f784 <USBD_CDC_TransmitPacket>
 801196c:	4603      	mov	r3, r0
 801196e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011970:	7bfb      	ldrb	r3, [r7, #15]
}
 8011972:	4618      	mov	r0, r3
 8011974:	3710      	adds	r7, #16
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	24000628 	.word	0x24000628

08011980 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011980:	b480      	push	{r7}
 8011982:	b087      	sub	sp, #28
 8011984:	af00      	add	r7, sp, #0
 8011986:	60f8      	str	r0, [r7, #12]
 8011988:	60b9      	str	r1, [r7, #8]
 801198a:	4613      	mov	r3, r2
 801198c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801198e:	2300      	movs	r3, #0
 8011990:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011996:	4618      	mov	r0, r3
 8011998:	371c      	adds	r7, #28
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
	...

080119a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119a4:	b480      	push	{r7}
 80119a6:	b083      	sub	sp, #12
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	4603      	mov	r3, r0
 80119ac:	6039      	str	r1, [r7, #0]
 80119ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	2212      	movs	r2, #18
 80119b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80119b6:	4b03      	ldr	r3, [pc, #12]	@ (80119c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	370c      	adds	r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr
 80119c4:	240000d4 	.word	0x240000d4

080119c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119c8:	b480      	push	{r7}
 80119ca:	b083      	sub	sp, #12
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	4603      	mov	r3, r0
 80119d0:	6039      	str	r1, [r7, #0]
 80119d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	2204      	movs	r2, #4
 80119d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80119da:	4b03      	ldr	r3, [pc, #12]	@ (80119e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80119dc:	4618      	mov	r0, r3
 80119de:	370c      	adds	r7, #12
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr
 80119e8:	240000e8 	.word	0x240000e8

080119ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	4603      	mov	r3, r0
 80119f4:	6039      	str	r1, [r7, #0]
 80119f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80119f8:	79fb      	ldrb	r3, [r7, #7]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d105      	bne.n	8011a0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80119fe:	683a      	ldr	r2, [r7, #0]
 8011a00:	4907      	ldr	r1, [pc, #28]	@ (8011a20 <USBD_FS_ProductStrDescriptor+0x34>)
 8011a02:	4808      	ldr	r0, [pc, #32]	@ (8011a24 <USBD_FS_ProductStrDescriptor+0x38>)
 8011a04:	f7ff f974 	bl	8010cf0 <USBD_GetString>
 8011a08:	e004      	b.n	8011a14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011a0a:	683a      	ldr	r2, [r7, #0]
 8011a0c:	4904      	ldr	r1, [pc, #16]	@ (8011a20 <USBD_FS_ProductStrDescriptor+0x34>)
 8011a0e:	4805      	ldr	r0, [pc, #20]	@ (8011a24 <USBD_FS_ProductStrDescriptor+0x38>)
 8011a10:	f7ff f96e 	bl	8010cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a14:	4b02      	ldr	r3, [pc, #8]	@ (8011a20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3708      	adds	r7, #8
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}
 8011a1e:	bf00      	nop
 8011a20:	24001904 	.word	0x24001904
 8011a24:	08015168 	.word	0x08015168

08011a28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	4603      	mov	r3, r0
 8011a30:	6039      	str	r1, [r7, #0]
 8011a32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011a34:	683a      	ldr	r2, [r7, #0]
 8011a36:	4904      	ldr	r1, [pc, #16]	@ (8011a48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011a38:	4804      	ldr	r0, [pc, #16]	@ (8011a4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011a3a:	f7ff f959 	bl	8010cf0 <USBD_GetString>
  return USBD_StrDesc;
 8011a3e:	4b02      	ldr	r3, [pc, #8]	@ (8011a48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	24001904 	.word	0x24001904
 8011a4c:	08015180 	.word	0x08015180

08011a50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	4603      	mov	r3, r0
 8011a58:	6039      	str	r1, [r7, #0]
 8011a5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	221a      	movs	r2, #26
 8011a60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011a62:	f000 f843 	bl	8011aec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011a66:	4b02      	ldr	r3, [pc, #8]	@ (8011a70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3708      	adds	r7, #8
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}
 8011a70:	240000ec 	.word	0x240000ec

08011a74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	6039      	str	r1, [r7, #0]
 8011a7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011a80:	79fb      	ldrb	r3, [r7, #7]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d105      	bne.n	8011a92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011a86:	683a      	ldr	r2, [r7, #0]
 8011a88:	4907      	ldr	r1, [pc, #28]	@ (8011aa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011a8a:	4808      	ldr	r0, [pc, #32]	@ (8011aac <USBD_FS_ConfigStrDescriptor+0x38>)
 8011a8c:	f7ff f930 	bl	8010cf0 <USBD_GetString>
 8011a90:	e004      	b.n	8011a9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011a92:	683a      	ldr	r2, [r7, #0]
 8011a94:	4904      	ldr	r1, [pc, #16]	@ (8011aa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011a96:	4805      	ldr	r0, [pc, #20]	@ (8011aac <USBD_FS_ConfigStrDescriptor+0x38>)
 8011a98:	f7ff f92a 	bl	8010cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a9c:	4b02      	ldr	r3, [pc, #8]	@ (8011aa8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3708      	adds	r7, #8
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	24001904 	.word	0x24001904
 8011aac:	08015194 	.word	0x08015194

08011ab0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	6039      	str	r1, [r7, #0]
 8011aba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011abc:	79fb      	ldrb	r3, [r7, #7]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d105      	bne.n	8011ace <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	4907      	ldr	r1, [pc, #28]	@ (8011ae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011ac6:	4808      	ldr	r0, [pc, #32]	@ (8011ae8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ac8:	f7ff f912 	bl	8010cf0 <USBD_GetString>
 8011acc:	e004      	b.n	8011ad8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011ace:	683a      	ldr	r2, [r7, #0]
 8011ad0:	4904      	ldr	r1, [pc, #16]	@ (8011ae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011ad2:	4805      	ldr	r0, [pc, #20]	@ (8011ae8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ad4:	f7ff f90c 	bl	8010cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ad8:	4b02      	ldr	r3, [pc, #8]	@ (8011ae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3708      	adds	r7, #8
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	24001904 	.word	0x24001904
 8011ae8:	080151a0 	.word	0x080151a0

08011aec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8011af2:	68fa      	ldr	r2, [r7, #12]
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	4413      	add	r3, r2
 8011af8:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d009      	beq.n	8011b14 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011b00:	2208      	movs	r2, #8
 8011b02:	4906      	ldr	r1, [pc, #24]	@ (8011b1c <Get_SerialNum+0x30>)
 8011b04:	68f8      	ldr	r0, [r7, #12]
 8011b06:	f000 f80d 	bl	8011b24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011b0a:	2204      	movs	r2, #4
 8011b0c:	4904      	ldr	r1, [pc, #16]	@ (8011b20 <Get_SerialNum+0x34>)
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f000 f808 	bl	8011b24 <IntToUnicode>
  }
}
 8011b14:	bf00      	nop
 8011b16:	3710      	adds	r7, #16
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	240000ee 	.word	0x240000ee
 8011b20:	240000fe 	.word	0x240000fe

08011b24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b087      	sub	sp, #28
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	60f8      	str	r0, [r7, #12]
 8011b2c:	60b9      	str	r1, [r7, #8]
 8011b2e:	4613      	mov	r3, r2
 8011b30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011b32:	2300      	movs	r3, #0
 8011b34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011b36:	2300      	movs	r3, #0
 8011b38:	75fb      	strb	r3, [r7, #23]
 8011b3a:	e027      	b.n	8011b8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	0f1b      	lsrs	r3, r3, #28
 8011b40:	2b09      	cmp	r3, #9
 8011b42:	d80b      	bhi.n	8011b5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	0f1b      	lsrs	r3, r3, #28
 8011b48:	b2da      	uxtb	r2, r3
 8011b4a:	7dfb      	ldrb	r3, [r7, #23]
 8011b4c:	005b      	lsls	r3, r3, #1
 8011b4e:	4619      	mov	r1, r3
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	440b      	add	r3, r1
 8011b54:	3230      	adds	r2, #48	@ 0x30
 8011b56:	b2d2      	uxtb	r2, r2
 8011b58:	701a      	strb	r2, [r3, #0]
 8011b5a:	e00a      	b.n	8011b72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	0f1b      	lsrs	r3, r3, #28
 8011b60:	b2da      	uxtb	r2, r3
 8011b62:	7dfb      	ldrb	r3, [r7, #23]
 8011b64:	005b      	lsls	r3, r3, #1
 8011b66:	4619      	mov	r1, r3
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	440b      	add	r3, r1
 8011b6c:	3237      	adds	r2, #55	@ 0x37
 8011b6e:	b2d2      	uxtb	r2, r2
 8011b70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	011b      	lsls	r3, r3, #4
 8011b76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011b78:	7dfb      	ldrb	r3, [r7, #23]
 8011b7a:	005b      	lsls	r3, r3, #1
 8011b7c:	3301      	adds	r3, #1
 8011b7e:	68ba      	ldr	r2, [r7, #8]
 8011b80:	4413      	add	r3, r2
 8011b82:	2200      	movs	r2, #0
 8011b84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011b86:	7dfb      	ldrb	r3, [r7, #23]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	75fb      	strb	r3, [r7, #23]
 8011b8c:	7dfa      	ldrb	r2, [r7, #23]
 8011b8e:	79fb      	ldrb	r3, [r7, #7]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d3d3      	bcc.n	8011b3c <IntToUnicode+0x18>
  }
}
 8011b94:	bf00      	nop
 8011b96:	bf00      	nop
 8011b98:	371c      	adds	r7, #28
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba0:	4770      	bx	lr
	...

08011ba4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b0ba      	sub	sp, #232	@ 0xe8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011bac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	601a      	str	r2, [r3, #0]
 8011bb4:	605a      	str	r2, [r3, #4]
 8011bb6:	609a      	str	r2, [r3, #8]
 8011bb8:	60da      	str	r2, [r3, #12]
 8011bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011bbc:	f107 0310 	add.w	r3, r7, #16
 8011bc0:	22c0      	movs	r2, #192	@ 0xc0
 8011bc2:	2100      	movs	r1, #0
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f001 f9c8 	bl	8012f5a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	4a2c      	ldr	r2, [pc, #176]	@ (8011c80 <HAL_PCD_MspInit+0xdc>)
 8011bd0:	4293      	cmp	r3, r2
 8011bd2:	d151      	bne.n	8011c78 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011bd4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011bd8:	f04f 0300 	mov.w	r3, #0
 8011bdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011be0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011be4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011be8:	f107 0310 	add.w	r3, r7, #16
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7f7 fa21 	bl	8009034 <HAL_RCCEx_PeriphCLKConfig>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d001      	beq.n	8011bfc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011bf8:	f7ef faac 	bl	8001154 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011bfc:	f7f6 f9f8 	bl	8007ff0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c00:	4b20      	ldr	r3, [pc, #128]	@ (8011c84 <HAL_PCD_MspInit+0xe0>)
 8011c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011c06:	4a1f      	ldr	r2, [pc, #124]	@ (8011c84 <HAL_PCD_MspInit+0xe0>)
 8011c08:	f043 0301 	orr.w	r3, r3, #1
 8011c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011c10:	4b1c      	ldr	r3, [pc, #112]	@ (8011c84 <HAL_PCD_MspInit+0xe0>)
 8011c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011c16:	f003 0301 	and.w	r3, r3, #1
 8011c1a:	60fb      	str	r3, [r7, #12]
 8011c1c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011c1e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c26:	2302      	movs	r3, #2
 8011c28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c32:	2300      	movs	r3, #0
 8011c34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011c38:	230a      	movs	r3, #10
 8011c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011c42:	4619      	mov	r1, r3
 8011c44:	4810      	ldr	r0, [pc, #64]	@ (8011c88 <HAL_PCD_MspInit+0xe4>)
 8011c46:	f7f4 f85d 	bl	8005d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8011c84 <HAL_PCD_MspInit+0xe0>)
 8011c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011c50:	4a0c      	ldr	r2, [pc, #48]	@ (8011c84 <HAL_PCD_MspInit+0xe0>)
 8011c52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011c56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8011c84 <HAL_PCD_MspInit+0xe0>)
 8011c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011c64:	60bb      	str	r3, [r7, #8]
 8011c66:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011c68:	2200      	movs	r2, #0
 8011c6a:	2100      	movs	r1, #0
 8011c6c:	2065      	movs	r0, #101	@ 0x65
 8011c6e:	f7f1 fc87 	bl	8003580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011c72:	2065      	movs	r0, #101	@ 0x65
 8011c74:	f7f1 fc9e 	bl	80035b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011c78:	bf00      	nop
 8011c7a:	37e8      	adds	r7, #232	@ 0xe8
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	40080000 	.word	0x40080000
 8011c84:	58024400 	.word	0x58024400
 8011c88:	58020000 	.word	0x58020000

08011c8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	4610      	mov	r0, r2
 8011ca4:	f7fd fe97 	bl	800f9d6 <USBD_LL_SetupStage>
}
 8011ca8:	bf00      	nop
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	460b      	mov	r3, r1
 8011cba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011cc2:	78fa      	ldrb	r2, [r7, #3]
 8011cc4:	6879      	ldr	r1, [r7, #4]
 8011cc6:	4613      	mov	r3, r2
 8011cc8:	00db      	lsls	r3, r3, #3
 8011cca:	4413      	add	r3, r2
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	440b      	add	r3, r1
 8011cd0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	78fb      	ldrb	r3, [r7, #3]
 8011cd8:	4619      	mov	r1, r3
 8011cda:	f7fd fed1 	bl	800fa80 <USBD_LL_DataOutStage>
}
 8011cde:	bf00      	nop
 8011ce0:	3708      	adds	r7, #8
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}

08011ce6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ce6:	b580      	push	{r7, lr}
 8011ce8:	b082      	sub	sp, #8
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
 8011cee:	460b      	mov	r3, r1
 8011cf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011cf8:	78fa      	ldrb	r2, [r7, #3]
 8011cfa:	6879      	ldr	r1, [r7, #4]
 8011cfc:	4613      	mov	r3, r2
 8011cfe:	00db      	lsls	r3, r3, #3
 8011d00:	4413      	add	r3, r2
 8011d02:	009b      	lsls	r3, r3, #2
 8011d04:	440b      	add	r3, r1
 8011d06:	3348      	adds	r3, #72	@ 0x48
 8011d08:	681a      	ldr	r2, [r3, #0]
 8011d0a:	78fb      	ldrb	r3, [r7, #3]
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	f7fd ff6a 	bl	800fbe6 <USBD_LL_DataInStage>
}
 8011d12:	bf00      	nop
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}

08011d1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b082      	sub	sp, #8
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f7fe f8a4 	bl	800fe76 <USBD_LL_SOF>
}
 8011d2e:	bf00      	nop
 8011d30:	3708      	adds	r7, #8
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}

08011d36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d36:	b580      	push	{r7, lr}
 8011d38:	b084      	sub	sp, #16
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011d3e:	2301      	movs	r3, #1
 8011d40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	691b      	ldr	r3, [r3, #16]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d102      	bne.n	8011d50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	73fb      	strb	r3, [r7, #15]
 8011d4e:	e008      	b.n	8011d62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	691b      	ldr	r3, [r3, #16]
 8011d54:	2b02      	cmp	r3, #2
 8011d56:	d102      	bne.n	8011d5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	73fb      	strb	r3, [r7, #15]
 8011d5c:	e001      	b.n	8011d62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011d5e:	f7ef f9f9 	bl	8001154 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d68:	7bfa      	ldrb	r2, [r7, #15]
 8011d6a:	4611      	mov	r1, r2
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7fe f83e 	bl	800fdee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7fd ffe6 	bl	800fd4a <USBD_LL_Reset>
}
 8011d7e:	bf00      	nop
 8011d80:	3710      	adds	r7, #16
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
	...

08011d88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fe f839 	bl	800fe0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	687a      	ldr	r2, [r7, #4]
 8011da8:	6812      	ldr	r2, [r2, #0]
 8011daa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011dae:	f043 0301 	orr.w	r3, r3, #1
 8011db2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6a1b      	ldr	r3, [r3, #32]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d005      	beq.n	8011dc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011dbc:	4b04      	ldr	r3, [pc, #16]	@ (8011dd0 <HAL_PCD_SuspendCallback+0x48>)
 8011dbe:	691b      	ldr	r3, [r3, #16]
 8011dc0:	4a03      	ldr	r2, [pc, #12]	@ (8011dd0 <HAL_PCD_SuspendCallback+0x48>)
 8011dc2:	f043 0306 	orr.w	r3, r3, #6
 8011dc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011dc8:	bf00      	nop
 8011dca:	3708      	adds	r7, #8
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}
 8011dd0:	e000ed00 	.word	0xe000ed00

08011dd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fe f82f 	bl	800fe46 <USBD_LL_Resume>
}
 8011de8:	bf00      	nop
 8011dea:	3708      	adds	r7, #8
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b082      	sub	sp, #8
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	460b      	mov	r3, r1
 8011dfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011e02:	78fa      	ldrb	r2, [r7, #3]
 8011e04:	4611      	mov	r1, r2
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fe f887 	bl	800ff1a <USBD_LL_IsoOUTIncomplete>
}
 8011e0c:	bf00      	nop
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b082      	sub	sp, #8
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	460b      	mov	r3, r1
 8011e1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011e26:	78fa      	ldrb	r2, [r7, #3]
 8011e28:	4611      	mov	r1, r2
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7fe f843 	bl	800feb6 <USBD_LL_IsoINIncomplete>
}
 8011e30:	bf00      	nop
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fe f899 	bl	800ff7e <USBD_LL_DevConnected>
}
 8011e4c:	bf00      	nop
 8011e4e:	3708      	adds	r7, #8
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}

08011e54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fe f896 	bl	800ff94 <USBD_LL_DevDisconnected>
}
 8011e68:	bf00      	nop
 8011e6a:	3708      	adds	r7, #8
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d13e      	bne.n	8011efe <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011e80:	4a21      	ldr	r2, [pc, #132]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011e8c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011e90:	4b1d      	ldr	r3, [pc, #116]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011e92:	4a1e      	ldr	r2, [pc, #120]	@ (8011f0c <USBD_LL_Init+0x9c>)
 8011e94:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011e96:	4b1c      	ldr	r3, [pc, #112]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011e98:	2209      	movs	r2, #9
 8011e9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011e9e:	2202      	movs	r2, #2
 8011ea0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011ea2:	4b19      	ldr	r3, [pc, #100]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011ea8:	4b17      	ldr	r3, [pc, #92]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011eaa:	2202      	movs	r2, #2
 8011eac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011eae:	4b16      	ldr	r3, [pc, #88]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011eb4:	4b14      	ldr	r3, [pc, #80]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011eba:	4b13      	ldr	r3, [pc, #76]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011ec0:	4b11      	ldr	r3, [pc, #68]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011ec6:	4b10      	ldr	r3, [pc, #64]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011ec8:	2200      	movs	r2, #0
 8011eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011ece:	2200      	movs	r2, #0
 8011ed0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011ed2:	480d      	ldr	r0, [pc, #52]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011ed4:	f7f4 fd99 	bl	8006a0a <HAL_PCD_Init>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d001      	beq.n	8011ee2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011ede:	f7ef f939 	bl	8001154 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011ee2:	2180      	movs	r1, #128	@ 0x80
 8011ee4:	4808      	ldr	r0, [pc, #32]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011ee6:	f7f6 f808 	bl	8007efa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011eea:	2240      	movs	r2, #64	@ 0x40
 8011eec:	2100      	movs	r1, #0
 8011eee:	4806      	ldr	r0, [pc, #24]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011ef0:	f7f5 ffbc 	bl	8007e6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011ef4:	2280      	movs	r2, #128	@ 0x80
 8011ef6:	2101      	movs	r1, #1
 8011ef8:	4803      	ldr	r0, [pc, #12]	@ (8011f08 <USBD_LL_Init+0x98>)
 8011efa:	f7f5 ffb7 	bl	8007e6c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011efe:	2300      	movs	r3, #0
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	24001b04 	.word	0x24001b04
 8011f0c:	40080000 	.word	0x40080000

08011f10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7f4 fe93 	bl	8006c52 <HAL_PCD_Start>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f30:	7bfb      	ldrb	r3, [r7, #15]
 8011f32:	4618      	mov	r0, r3
 8011f34:	f000 f942 	bl	80121bc <USBD_Get_USB_Status>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3710      	adds	r7, #16
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b084      	sub	sp, #16
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
 8011f4e:	4608      	mov	r0, r1
 8011f50:	4611      	mov	r1, r2
 8011f52:	461a      	mov	r2, r3
 8011f54:	4603      	mov	r3, r0
 8011f56:	70fb      	strb	r3, [r7, #3]
 8011f58:	460b      	mov	r3, r1
 8011f5a:	70bb      	strb	r3, [r7, #2]
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f60:	2300      	movs	r3, #0
 8011f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f64:	2300      	movs	r3, #0
 8011f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011f6e:	78bb      	ldrb	r3, [r7, #2]
 8011f70:	883a      	ldrh	r2, [r7, #0]
 8011f72:	78f9      	ldrb	r1, [r7, #3]
 8011f74:	f7f5 fb93 	bl	800769e <HAL_PCD_EP_Open>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f7c:	7bfb      	ldrb	r3, [r7, #15]
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f000 f91c 	bl	80121bc <USBD_Get_USB_Status>
 8011f84:	4603      	mov	r3, r0
 8011f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}

08011f92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f92:	b580      	push	{r7, lr}
 8011f94:	b084      	sub	sp, #16
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
 8011f9a:	460b      	mov	r3, r1
 8011f9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011fac:	78fa      	ldrb	r2, [r7, #3]
 8011fae:	4611      	mov	r1, r2
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7f5 fbdc 	bl	800776e <HAL_PCD_EP_Close>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fba:	7bfb      	ldrb	r3, [r7, #15]
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f000 f8fd 	bl	80121bc <USBD_Get_USB_Status>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3710      	adds	r7, #16
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b084      	sub	sp, #16
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	460b      	mov	r3, r1
 8011fda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011fea:	78fa      	ldrb	r2, [r7, #3]
 8011fec:	4611      	mov	r1, r2
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7f5 fc96 	bl	8007920 <HAL_PCD_EP_SetStall>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ff8:	7bfb      	ldrb	r3, [r7, #15]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f000 f8de 	bl	80121bc <USBD_Get_USB_Status>
 8012000:	4603      	mov	r3, r0
 8012002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012004:	7bbb      	ldrb	r3, [r7, #14]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3710      	adds	r7, #16
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}

0801200e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801200e:	b580      	push	{r7, lr}
 8012010:	b084      	sub	sp, #16
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
 8012016:	460b      	mov	r3, r1
 8012018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801201a:	2300      	movs	r3, #0
 801201c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801201e:	2300      	movs	r3, #0
 8012020:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012028:	78fa      	ldrb	r2, [r7, #3]
 801202a:	4611      	mov	r1, r2
 801202c:	4618      	mov	r0, r3
 801202e:	f7f5 fcdb 	bl	80079e8 <HAL_PCD_EP_ClrStall>
 8012032:	4603      	mov	r3, r0
 8012034:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012036:	7bfb      	ldrb	r3, [r7, #15]
 8012038:	4618      	mov	r0, r3
 801203a:	f000 f8bf 	bl	80121bc <USBD_Get_USB_Status>
 801203e:	4603      	mov	r3, r0
 8012040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012042:	7bbb      	ldrb	r3, [r7, #14]
}
 8012044:	4618      	mov	r0, r3
 8012046:	3710      	adds	r7, #16
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}

0801204c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801204c:	b480      	push	{r7}
 801204e:	b085      	sub	sp, #20
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	460b      	mov	r3, r1
 8012056:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801205e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012064:	2b00      	cmp	r3, #0
 8012066:	da0b      	bge.n	8012080 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012068:	78fb      	ldrb	r3, [r7, #3]
 801206a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801206e:	68f9      	ldr	r1, [r7, #12]
 8012070:	4613      	mov	r3, r2
 8012072:	00db      	lsls	r3, r3, #3
 8012074:	4413      	add	r3, r2
 8012076:	009b      	lsls	r3, r3, #2
 8012078:	440b      	add	r3, r1
 801207a:	333e      	adds	r3, #62	@ 0x3e
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	e00b      	b.n	8012098 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012080:	78fb      	ldrb	r3, [r7, #3]
 8012082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012086:	68f9      	ldr	r1, [r7, #12]
 8012088:	4613      	mov	r3, r2
 801208a:	00db      	lsls	r3, r3, #3
 801208c:	4413      	add	r3, r2
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	440b      	add	r3, r1
 8012092:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8012096:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012098:	4618      	mov	r0, r3
 801209a:	3714      	adds	r7, #20
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr

080120a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b084      	sub	sp, #16
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	460b      	mov	r3, r1
 80120ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120b0:	2300      	movs	r3, #0
 80120b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120b4:	2300      	movs	r3, #0
 80120b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80120be:	78fa      	ldrb	r2, [r7, #3]
 80120c0:	4611      	mov	r1, r2
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7f5 fac6 	bl	8007654 <HAL_PCD_SetAddress>
 80120c8:	4603      	mov	r3, r0
 80120ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120cc:	7bfb      	ldrb	r3, [r7, #15]
 80120ce:	4618      	mov	r0, r3
 80120d0:	f000 f874 	bl	80121bc <USBD_Get_USB_Status>
 80120d4:	4603      	mov	r3, r0
 80120d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3710      	adds	r7, #16
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b086      	sub	sp, #24
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	60f8      	str	r0, [r7, #12]
 80120ea:	607a      	str	r2, [r7, #4]
 80120ec:	603b      	str	r3, [r7, #0]
 80120ee:	460b      	mov	r3, r1
 80120f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120f2:	2300      	movs	r3, #0
 80120f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120f6:	2300      	movs	r3, #0
 80120f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012100:	7af9      	ldrb	r1, [r7, #11]
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	f7f5 fbd0 	bl	80078aa <HAL_PCD_EP_Transmit>
 801210a:	4603      	mov	r3, r0
 801210c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801210e:	7dfb      	ldrb	r3, [r7, #23]
 8012110:	4618      	mov	r0, r3
 8012112:	f000 f853 	bl	80121bc <USBD_Get_USB_Status>
 8012116:	4603      	mov	r3, r0
 8012118:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801211a:	7dbb      	ldrb	r3, [r7, #22]
}
 801211c:	4618      	mov	r0, r3
 801211e:	3718      	adds	r7, #24
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}

08012124 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b086      	sub	sp, #24
 8012128:	af00      	add	r7, sp, #0
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	607a      	str	r2, [r7, #4]
 801212e:	603b      	str	r3, [r7, #0]
 8012130:	460b      	mov	r3, r1
 8012132:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012134:	2300      	movs	r3, #0
 8012136:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012138:	2300      	movs	r3, #0
 801213a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012142:	7af9      	ldrb	r1, [r7, #11]
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	f7f5 fb5b 	bl	8007802 <HAL_PCD_EP_Receive>
 801214c:	4603      	mov	r3, r0
 801214e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012150:	7dfb      	ldrb	r3, [r7, #23]
 8012152:	4618      	mov	r0, r3
 8012154:	f000 f832 	bl	80121bc <USBD_Get_USB_Status>
 8012158:	4603      	mov	r3, r0
 801215a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801215c:	7dbb      	ldrb	r3, [r7, #22]
}
 801215e:	4618      	mov	r0, r3
 8012160:	3718      	adds	r7, #24
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}

08012166 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b082      	sub	sp, #8
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
 801216e:	460b      	mov	r3, r1
 8012170:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012178:	78fa      	ldrb	r2, [r7, #3]
 801217a:	4611      	mov	r1, r2
 801217c:	4618      	mov	r0, r3
 801217e:	f7f5 fb7c 	bl	800787a <HAL_PCD_EP_GetRxCount>
 8012182:	4603      	mov	r3, r0
}
 8012184:	4618      	mov	r0, r3
 8012186:	3708      	adds	r7, #8
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801218c:	b480      	push	{r7}
 801218e:	b083      	sub	sp, #12
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012194:	4b03      	ldr	r3, [pc, #12]	@ (80121a4 <USBD_static_malloc+0x18>)
}
 8012196:	4618      	mov	r0, r3
 8012198:	370c      	adds	r7, #12
 801219a:	46bd      	mov	sp, r7
 801219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a0:	4770      	bx	lr
 80121a2:	bf00      	nop
 80121a4:	24002010 	.word	0x24002010

080121a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80121a8:	b480      	push	{r7}
 80121aa:	b083      	sub	sp, #12
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80121b0:	bf00      	nop
 80121b2:	370c      	adds	r7, #12
 80121b4:	46bd      	mov	sp, r7
 80121b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ba:	4770      	bx	lr

080121bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80121bc:	b480      	push	{r7}
 80121be:	b085      	sub	sp, #20
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	4603      	mov	r3, r0
 80121c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121c6:	2300      	movs	r3, #0
 80121c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80121ca:	79fb      	ldrb	r3, [r7, #7]
 80121cc:	2b03      	cmp	r3, #3
 80121ce:	d817      	bhi.n	8012200 <USBD_Get_USB_Status+0x44>
 80121d0:	a201      	add	r2, pc, #4	@ (adr r2, 80121d8 <USBD_Get_USB_Status+0x1c>)
 80121d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121d6:	bf00      	nop
 80121d8:	080121e9 	.word	0x080121e9
 80121dc:	080121ef 	.word	0x080121ef
 80121e0:	080121f5 	.word	0x080121f5
 80121e4:	080121fb 	.word	0x080121fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80121e8:	2300      	movs	r3, #0
 80121ea:	73fb      	strb	r3, [r7, #15]
    break;
 80121ec:	e00b      	b.n	8012206 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80121ee:	2303      	movs	r3, #3
 80121f0:	73fb      	strb	r3, [r7, #15]
    break;
 80121f2:	e008      	b.n	8012206 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80121f4:	2301      	movs	r3, #1
 80121f6:	73fb      	strb	r3, [r7, #15]
    break;
 80121f8:	e005      	b.n	8012206 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80121fa:	2303      	movs	r3, #3
 80121fc:	73fb      	strb	r3, [r7, #15]
    break;
 80121fe:	e002      	b.n	8012206 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012200:	2303      	movs	r3, #3
 8012202:	73fb      	strb	r3, [r7, #15]
    break;
 8012204:	bf00      	nop
  }
  return usb_status;
 8012206:	7bfb      	ldrb	r3, [r7, #15]
}
 8012208:	4618      	mov	r0, r3
 801220a:	3714      	adds	r7, #20
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr

08012214 <arm_sin_f32>:
 8012214:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8012294 <arm_sin_f32+0x80>
 8012218:	ee20 0a27 	vmul.f32	s0, s0, s15
 801221c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012220:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012228:	d504      	bpl.n	8012234 <arm_sin_f32+0x20>
 801222a:	ee17 3a90 	vmov	r3, s15
 801222e:	3b01      	subs	r3, #1
 8012230:	ee07 3a90 	vmov	s15, r3
 8012234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012238:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012298 <arm_sin_f32+0x84>
 801223c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012240:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012244:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8012248:	ee17 3a10 	vmov	r3, s14
 801224c:	b29b      	uxth	r3, r3
 801224e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012252:	d21a      	bcs.n	801228a <arm_sin_f32+0x76>
 8012254:	ee07 3a10 	vmov	s14, r3
 8012258:	1c59      	adds	r1, r3, #1
 801225a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801225e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012262:	4a0e      	ldr	r2, [pc, #56]	@ (801229c <arm_sin_f32+0x88>)
 8012264:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012268:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801226c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012270:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012274:	edd3 6a00 	vldr	s13, [r3]
 8012278:	ed92 7a00 	vldr	s14, [r2]
 801227c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012284:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012288:	4770      	bx	lr
 801228a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801228e:	2101      	movs	r1, #1
 8012290:	2300      	movs	r3, #0
 8012292:	e7e6      	b.n	8012262 <arm_sin_f32+0x4e>
 8012294:	3e22f983 	.word	0x3e22f983
 8012298:	44000000 	.word	0x44000000
 801229c:	080157b8 	.word	0x080157b8

080122a0 <arm_cos_f32>:
 80122a0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8012328 <arm_cos_f32+0x88>
 80122a4:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80122a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80122ac:	ee30 0a07 	vadd.f32	s0, s0, s14
 80122b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80122b4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80122b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122bc:	d504      	bpl.n	80122c8 <arm_cos_f32+0x28>
 80122be:	ee17 3a90 	vmov	r3, s15
 80122c2:	3b01      	subs	r3, #1
 80122c4:	ee07 3a90 	vmov	s15, r3
 80122c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122cc:	eddf 6a17 	vldr	s13, [pc, #92]	@ 801232c <arm_cos_f32+0x8c>
 80122d0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80122d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80122d8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80122dc:	ee17 3a10 	vmov	r3, s14
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122e6:	d21a      	bcs.n	801231e <arm_cos_f32+0x7e>
 80122e8:	ee07 3a10 	vmov	s14, r3
 80122ec:	1c59      	adds	r1, r3, #1
 80122ee:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80122f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80122f6:	4a0e      	ldr	r2, [pc, #56]	@ (8012330 <arm_cos_f32+0x90>)
 80122f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80122fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012300:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012304:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012308:	edd3 6a00 	vldr	s13, [r3]
 801230c:	ed92 7a00 	vldr	s14, [r2]
 8012310:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012318:	ee30 0a27 	vadd.f32	s0, s0, s15
 801231c:	4770      	bx	lr
 801231e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012322:	2101      	movs	r1, #1
 8012324:	2300      	movs	r3, #0
 8012326:	e7e6      	b.n	80122f6 <arm_cos_f32+0x56>
 8012328:	3e22f983 	.word	0x3e22f983
 801232c:	44000000 	.word	0x44000000
 8012330:	080157b8 	.word	0x080157b8

08012334 <malloc>:
 8012334:	4b02      	ldr	r3, [pc, #8]	@ (8012340 <malloc+0xc>)
 8012336:	4601      	mov	r1, r0
 8012338:	6818      	ldr	r0, [r3, #0]
 801233a:	f000 b825 	b.w	8012388 <_malloc_r>
 801233e:	bf00      	nop
 8012340:	24000114 	.word	0x24000114

08012344 <sbrk_aligned>:
 8012344:	b570      	push	{r4, r5, r6, lr}
 8012346:	4e0f      	ldr	r6, [pc, #60]	@ (8012384 <sbrk_aligned+0x40>)
 8012348:	460c      	mov	r4, r1
 801234a:	6831      	ldr	r1, [r6, #0]
 801234c:	4605      	mov	r5, r0
 801234e:	b911      	cbnz	r1, 8012356 <sbrk_aligned+0x12>
 8012350:	f000 fe44 	bl	8012fdc <_sbrk_r>
 8012354:	6030      	str	r0, [r6, #0]
 8012356:	4621      	mov	r1, r4
 8012358:	4628      	mov	r0, r5
 801235a:	f000 fe3f 	bl	8012fdc <_sbrk_r>
 801235e:	1c43      	adds	r3, r0, #1
 8012360:	d103      	bne.n	801236a <sbrk_aligned+0x26>
 8012362:	f04f 34ff 	mov.w	r4, #4294967295
 8012366:	4620      	mov	r0, r4
 8012368:	bd70      	pop	{r4, r5, r6, pc}
 801236a:	1cc4      	adds	r4, r0, #3
 801236c:	f024 0403 	bic.w	r4, r4, #3
 8012370:	42a0      	cmp	r0, r4
 8012372:	d0f8      	beq.n	8012366 <sbrk_aligned+0x22>
 8012374:	1a21      	subs	r1, r4, r0
 8012376:	4628      	mov	r0, r5
 8012378:	f000 fe30 	bl	8012fdc <_sbrk_r>
 801237c:	3001      	adds	r0, #1
 801237e:	d1f2      	bne.n	8012366 <sbrk_aligned+0x22>
 8012380:	e7ef      	b.n	8012362 <sbrk_aligned+0x1e>
 8012382:	bf00      	nop
 8012384:	24002230 	.word	0x24002230

08012388 <_malloc_r>:
 8012388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801238c:	1ccd      	adds	r5, r1, #3
 801238e:	f025 0503 	bic.w	r5, r5, #3
 8012392:	3508      	adds	r5, #8
 8012394:	2d0c      	cmp	r5, #12
 8012396:	bf38      	it	cc
 8012398:	250c      	movcc	r5, #12
 801239a:	2d00      	cmp	r5, #0
 801239c:	4606      	mov	r6, r0
 801239e:	db01      	blt.n	80123a4 <_malloc_r+0x1c>
 80123a0:	42a9      	cmp	r1, r5
 80123a2:	d904      	bls.n	80123ae <_malloc_r+0x26>
 80123a4:	230c      	movs	r3, #12
 80123a6:	6033      	str	r3, [r6, #0]
 80123a8:	2000      	movs	r0, #0
 80123aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012484 <_malloc_r+0xfc>
 80123b2:	f000 f869 	bl	8012488 <__malloc_lock>
 80123b6:	f8d8 3000 	ldr.w	r3, [r8]
 80123ba:	461c      	mov	r4, r3
 80123bc:	bb44      	cbnz	r4, 8012410 <_malloc_r+0x88>
 80123be:	4629      	mov	r1, r5
 80123c0:	4630      	mov	r0, r6
 80123c2:	f7ff ffbf 	bl	8012344 <sbrk_aligned>
 80123c6:	1c43      	adds	r3, r0, #1
 80123c8:	4604      	mov	r4, r0
 80123ca:	d158      	bne.n	801247e <_malloc_r+0xf6>
 80123cc:	f8d8 4000 	ldr.w	r4, [r8]
 80123d0:	4627      	mov	r7, r4
 80123d2:	2f00      	cmp	r7, #0
 80123d4:	d143      	bne.n	801245e <_malloc_r+0xd6>
 80123d6:	2c00      	cmp	r4, #0
 80123d8:	d04b      	beq.n	8012472 <_malloc_r+0xea>
 80123da:	6823      	ldr	r3, [r4, #0]
 80123dc:	4639      	mov	r1, r7
 80123de:	4630      	mov	r0, r6
 80123e0:	eb04 0903 	add.w	r9, r4, r3
 80123e4:	f000 fdfa 	bl	8012fdc <_sbrk_r>
 80123e8:	4581      	cmp	r9, r0
 80123ea:	d142      	bne.n	8012472 <_malloc_r+0xea>
 80123ec:	6821      	ldr	r1, [r4, #0]
 80123ee:	1a6d      	subs	r5, r5, r1
 80123f0:	4629      	mov	r1, r5
 80123f2:	4630      	mov	r0, r6
 80123f4:	f7ff ffa6 	bl	8012344 <sbrk_aligned>
 80123f8:	3001      	adds	r0, #1
 80123fa:	d03a      	beq.n	8012472 <_malloc_r+0xea>
 80123fc:	6823      	ldr	r3, [r4, #0]
 80123fe:	442b      	add	r3, r5
 8012400:	6023      	str	r3, [r4, #0]
 8012402:	f8d8 3000 	ldr.w	r3, [r8]
 8012406:	685a      	ldr	r2, [r3, #4]
 8012408:	bb62      	cbnz	r2, 8012464 <_malloc_r+0xdc>
 801240a:	f8c8 7000 	str.w	r7, [r8]
 801240e:	e00f      	b.n	8012430 <_malloc_r+0xa8>
 8012410:	6822      	ldr	r2, [r4, #0]
 8012412:	1b52      	subs	r2, r2, r5
 8012414:	d420      	bmi.n	8012458 <_malloc_r+0xd0>
 8012416:	2a0b      	cmp	r2, #11
 8012418:	d917      	bls.n	801244a <_malloc_r+0xc2>
 801241a:	1961      	adds	r1, r4, r5
 801241c:	42a3      	cmp	r3, r4
 801241e:	6025      	str	r5, [r4, #0]
 8012420:	bf18      	it	ne
 8012422:	6059      	strne	r1, [r3, #4]
 8012424:	6863      	ldr	r3, [r4, #4]
 8012426:	bf08      	it	eq
 8012428:	f8c8 1000 	streq.w	r1, [r8]
 801242c:	5162      	str	r2, [r4, r5]
 801242e:	604b      	str	r3, [r1, #4]
 8012430:	4630      	mov	r0, r6
 8012432:	f000 f82f 	bl	8012494 <__malloc_unlock>
 8012436:	f104 000b 	add.w	r0, r4, #11
 801243a:	1d23      	adds	r3, r4, #4
 801243c:	f020 0007 	bic.w	r0, r0, #7
 8012440:	1ac2      	subs	r2, r0, r3
 8012442:	bf1c      	itt	ne
 8012444:	1a1b      	subne	r3, r3, r0
 8012446:	50a3      	strne	r3, [r4, r2]
 8012448:	e7af      	b.n	80123aa <_malloc_r+0x22>
 801244a:	6862      	ldr	r2, [r4, #4]
 801244c:	42a3      	cmp	r3, r4
 801244e:	bf0c      	ite	eq
 8012450:	f8c8 2000 	streq.w	r2, [r8]
 8012454:	605a      	strne	r2, [r3, #4]
 8012456:	e7eb      	b.n	8012430 <_malloc_r+0xa8>
 8012458:	4623      	mov	r3, r4
 801245a:	6864      	ldr	r4, [r4, #4]
 801245c:	e7ae      	b.n	80123bc <_malloc_r+0x34>
 801245e:	463c      	mov	r4, r7
 8012460:	687f      	ldr	r7, [r7, #4]
 8012462:	e7b6      	b.n	80123d2 <_malloc_r+0x4a>
 8012464:	461a      	mov	r2, r3
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	42a3      	cmp	r3, r4
 801246a:	d1fb      	bne.n	8012464 <_malloc_r+0xdc>
 801246c:	2300      	movs	r3, #0
 801246e:	6053      	str	r3, [r2, #4]
 8012470:	e7de      	b.n	8012430 <_malloc_r+0xa8>
 8012472:	230c      	movs	r3, #12
 8012474:	6033      	str	r3, [r6, #0]
 8012476:	4630      	mov	r0, r6
 8012478:	f000 f80c 	bl	8012494 <__malloc_unlock>
 801247c:	e794      	b.n	80123a8 <_malloc_r+0x20>
 801247e:	6005      	str	r5, [r0, #0]
 8012480:	e7d6      	b.n	8012430 <_malloc_r+0xa8>
 8012482:	bf00      	nop
 8012484:	24002234 	.word	0x24002234

08012488 <__malloc_lock>:
 8012488:	4801      	ldr	r0, [pc, #4]	@ (8012490 <__malloc_lock+0x8>)
 801248a:	f000 bdf4 	b.w	8013076 <__retarget_lock_acquire_recursive>
 801248e:	bf00      	nop
 8012490:	24002378 	.word	0x24002378

08012494 <__malloc_unlock>:
 8012494:	4801      	ldr	r0, [pc, #4]	@ (801249c <__malloc_unlock+0x8>)
 8012496:	f000 bdef 	b.w	8013078 <__retarget_lock_release_recursive>
 801249a:	bf00      	nop
 801249c:	24002378 	.word	0x24002378

080124a0 <__cvt>:
 80124a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124a2:	ed2d 8b02 	vpush	{d8}
 80124a6:	eeb0 8b40 	vmov.f64	d8, d0
 80124aa:	b085      	sub	sp, #20
 80124ac:	4617      	mov	r7, r2
 80124ae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80124b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80124b2:	ee18 2a90 	vmov	r2, s17
 80124b6:	f025 0520 	bic.w	r5, r5, #32
 80124ba:	2a00      	cmp	r2, #0
 80124bc:	bfb6      	itet	lt
 80124be:	222d      	movlt	r2, #45	@ 0x2d
 80124c0:	2200      	movge	r2, #0
 80124c2:	eeb1 8b40 	vneglt.f64	d8, d0
 80124c6:	2d46      	cmp	r5, #70	@ 0x46
 80124c8:	460c      	mov	r4, r1
 80124ca:	701a      	strb	r2, [r3, #0]
 80124cc:	d004      	beq.n	80124d8 <__cvt+0x38>
 80124ce:	2d45      	cmp	r5, #69	@ 0x45
 80124d0:	d100      	bne.n	80124d4 <__cvt+0x34>
 80124d2:	3401      	adds	r4, #1
 80124d4:	2102      	movs	r1, #2
 80124d6:	e000      	b.n	80124da <__cvt+0x3a>
 80124d8:	2103      	movs	r1, #3
 80124da:	ab03      	add	r3, sp, #12
 80124dc:	9301      	str	r3, [sp, #4]
 80124de:	ab02      	add	r3, sp, #8
 80124e0:	9300      	str	r3, [sp, #0]
 80124e2:	4622      	mov	r2, r4
 80124e4:	4633      	mov	r3, r6
 80124e6:	eeb0 0b48 	vmov.f64	d0, d8
 80124ea:	f000 fe51 	bl	8013190 <_dtoa_r>
 80124ee:	2d47      	cmp	r5, #71	@ 0x47
 80124f0:	d114      	bne.n	801251c <__cvt+0x7c>
 80124f2:	07fb      	lsls	r3, r7, #31
 80124f4:	d50a      	bpl.n	801250c <__cvt+0x6c>
 80124f6:	1902      	adds	r2, r0, r4
 80124f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80124fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012500:	bf08      	it	eq
 8012502:	9203      	streq	r2, [sp, #12]
 8012504:	2130      	movs	r1, #48	@ 0x30
 8012506:	9b03      	ldr	r3, [sp, #12]
 8012508:	4293      	cmp	r3, r2
 801250a:	d319      	bcc.n	8012540 <__cvt+0xa0>
 801250c:	9b03      	ldr	r3, [sp, #12]
 801250e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012510:	1a1b      	subs	r3, r3, r0
 8012512:	6013      	str	r3, [r2, #0]
 8012514:	b005      	add	sp, #20
 8012516:	ecbd 8b02 	vpop	{d8}
 801251a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801251c:	2d46      	cmp	r5, #70	@ 0x46
 801251e:	eb00 0204 	add.w	r2, r0, r4
 8012522:	d1e9      	bne.n	80124f8 <__cvt+0x58>
 8012524:	7803      	ldrb	r3, [r0, #0]
 8012526:	2b30      	cmp	r3, #48	@ 0x30
 8012528:	d107      	bne.n	801253a <__cvt+0x9a>
 801252a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012532:	bf1c      	itt	ne
 8012534:	f1c4 0401 	rsbne	r4, r4, #1
 8012538:	6034      	strne	r4, [r6, #0]
 801253a:	6833      	ldr	r3, [r6, #0]
 801253c:	441a      	add	r2, r3
 801253e:	e7db      	b.n	80124f8 <__cvt+0x58>
 8012540:	1c5c      	adds	r4, r3, #1
 8012542:	9403      	str	r4, [sp, #12]
 8012544:	7019      	strb	r1, [r3, #0]
 8012546:	e7de      	b.n	8012506 <__cvt+0x66>

08012548 <__exponent>:
 8012548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801254a:	2900      	cmp	r1, #0
 801254c:	bfba      	itte	lt
 801254e:	4249      	neglt	r1, r1
 8012550:	232d      	movlt	r3, #45	@ 0x2d
 8012552:	232b      	movge	r3, #43	@ 0x2b
 8012554:	2909      	cmp	r1, #9
 8012556:	7002      	strb	r2, [r0, #0]
 8012558:	7043      	strb	r3, [r0, #1]
 801255a:	dd29      	ble.n	80125b0 <__exponent+0x68>
 801255c:	f10d 0307 	add.w	r3, sp, #7
 8012560:	461d      	mov	r5, r3
 8012562:	270a      	movs	r7, #10
 8012564:	461a      	mov	r2, r3
 8012566:	fbb1 f6f7 	udiv	r6, r1, r7
 801256a:	fb07 1416 	mls	r4, r7, r6, r1
 801256e:	3430      	adds	r4, #48	@ 0x30
 8012570:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012574:	460c      	mov	r4, r1
 8012576:	2c63      	cmp	r4, #99	@ 0x63
 8012578:	f103 33ff 	add.w	r3, r3, #4294967295
 801257c:	4631      	mov	r1, r6
 801257e:	dcf1      	bgt.n	8012564 <__exponent+0x1c>
 8012580:	3130      	adds	r1, #48	@ 0x30
 8012582:	1e94      	subs	r4, r2, #2
 8012584:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012588:	1c41      	adds	r1, r0, #1
 801258a:	4623      	mov	r3, r4
 801258c:	42ab      	cmp	r3, r5
 801258e:	d30a      	bcc.n	80125a6 <__exponent+0x5e>
 8012590:	f10d 0309 	add.w	r3, sp, #9
 8012594:	1a9b      	subs	r3, r3, r2
 8012596:	42ac      	cmp	r4, r5
 8012598:	bf88      	it	hi
 801259a:	2300      	movhi	r3, #0
 801259c:	3302      	adds	r3, #2
 801259e:	4403      	add	r3, r0
 80125a0:	1a18      	subs	r0, r3, r0
 80125a2:	b003      	add	sp, #12
 80125a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80125aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80125ae:	e7ed      	b.n	801258c <__exponent+0x44>
 80125b0:	2330      	movs	r3, #48	@ 0x30
 80125b2:	3130      	adds	r1, #48	@ 0x30
 80125b4:	7083      	strb	r3, [r0, #2]
 80125b6:	70c1      	strb	r1, [r0, #3]
 80125b8:	1d03      	adds	r3, r0, #4
 80125ba:	e7f1      	b.n	80125a0 <__exponent+0x58>
 80125bc:	0000      	movs	r0, r0
	...

080125c0 <_printf_float>:
 80125c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c4:	b08d      	sub	sp, #52	@ 0x34
 80125c6:	460c      	mov	r4, r1
 80125c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80125cc:	4616      	mov	r6, r2
 80125ce:	461f      	mov	r7, r3
 80125d0:	4605      	mov	r5, r0
 80125d2:	f000 fccb 	bl	8012f6c <_localeconv_r>
 80125d6:	f8d0 b000 	ldr.w	fp, [r0]
 80125da:	4658      	mov	r0, fp
 80125dc:	f7ed fed0 	bl	8000380 <strlen>
 80125e0:	2300      	movs	r3, #0
 80125e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80125e4:	f8d8 3000 	ldr.w	r3, [r8]
 80125e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80125ec:	6822      	ldr	r2, [r4, #0]
 80125ee:	9005      	str	r0, [sp, #20]
 80125f0:	3307      	adds	r3, #7
 80125f2:	f023 0307 	bic.w	r3, r3, #7
 80125f6:	f103 0108 	add.w	r1, r3, #8
 80125fa:	f8c8 1000 	str.w	r1, [r8]
 80125fe:	ed93 0b00 	vldr	d0, [r3]
 8012602:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012860 <_printf_float+0x2a0>
 8012606:	eeb0 7bc0 	vabs.f64	d7, d0
 801260a:	eeb4 7b46 	vcmp.f64	d7, d6
 801260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012612:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8012616:	dd24      	ble.n	8012662 <_printf_float+0xa2>
 8012618:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012620:	d502      	bpl.n	8012628 <_printf_float+0x68>
 8012622:	232d      	movs	r3, #45	@ 0x2d
 8012624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012628:	498f      	ldr	r1, [pc, #572]	@ (8012868 <_printf_float+0x2a8>)
 801262a:	4b90      	ldr	r3, [pc, #576]	@ (801286c <_printf_float+0x2ac>)
 801262c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012630:	bf94      	ite	ls
 8012632:	4688      	movls	r8, r1
 8012634:	4698      	movhi	r8, r3
 8012636:	f022 0204 	bic.w	r2, r2, #4
 801263a:	2303      	movs	r3, #3
 801263c:	6123      	str	r3, [r4, #16]
 801263e:	6022      	str	r2, [r4, #0]
 8012640:	f04f 0a00 	mov.w	sl, #0
 8012644:	9700      	str	r7, [sp, #0]
 8012646:	4633      	mov	r3, r6
 8012648:	aa0b      	add	r2, sp, #44	@ 0x2c
 801264a:	4621      	mov	r1, r4
 801264c:	4628      	mov	r0, r5
 801264e:	f000 f9d1 	bl	80129f4 <_printf_common>
 8012652:	3001      	adds	r0, #1
 8012654:	f040 8089 	bne.w	801276a <_printf_float+0x1aa>
 8012658:	f04f 30ff 	mov.w	r0, #4294967295
 801265c:	b00d      	add	sp, #52	@ 0x34
 801265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012662:	eeb4 0b40 	vcmp.f64	d0, d0
 8012666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801266a:	d709      	bvc.n	8012680 <_printf_float+0xc0>
 801266c:	ee10 3a90 	vmov	r3, s1
 8012670:	2b00      	cmp	r3, #0
 8012672:	bfbc      	itt	lt
 8012674:	232d      	movlt	r3, #45	@ 0x2d
 8012676:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801267a:	497d      	ldr	r1, [pc, #500]	@ (8012870 <_printf_float+0x2b0>)
 801267c:	4b7d      	ldr	r3, [pc, #500]	@ (8012874 <_printf_float+0x2b4>)
 801267e:	e7d5      	b.n	801262c <_printf_float+0x6c>
 8012680:	6863      	ldr	r3, [r4, #4]
 8012682:	1c59      	adds	r1, r3, #1
 8012684:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012688:	d139      	bne.n	80126fe <_printf_float+0x13e>
 801268a:	2306      	movs	r3, #6
 801268c:	6063      	str	r3, [r4, #4]
 801268e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012692:	2300      	movs	r3, #0
 8012694:	6022      	str	r2, [r4, #0]
 8012696:	9303      	str	r3, [sp, #12]
 8012698:	ab0a      	add	r3, sp, #40	@ 0x28
 801269a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801269e:	ab09      	add	r3, sp, #36	@ 0x24
 80126a0:	9300      	str	r3, [sp, #0]
 80126a2:	6861      	ldr	r1, [r4, #4]
 80126a4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80126a8:	4628      	mov	r0, r5
 80126aa:	f7ff fef9 	bl	80124a0 <__cvt>
 80126ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80126b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80126b4:	4680      	mov	r8, r0
 80126b6:	d129      	bne.n	801270c <_printf_float+0x14c>
 80126b8:	1cc8      	adds	r0, r1, #3
 80126ba:	db02      	blt.n	80126c2 <_printf_float+0x102>
 80126bc:	6863      	ldr	r3, [r4, #4]
 80126be:	4299      	cmp	r1, r3
 80126c0:	dd41      	ble.n	8012746 <_printf_float+0x186>
 80126c2:	f1a9 0902 	sub.w	r9, r9, #2
 80126c6:	fa5f f989 	uxtb.w	r9, r9
 80126ca:	3901      	subs	r1, #1
 80126cc:	464a      	mov	r2, r9
 80126ce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80126d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80126d4:	f7ff ff38 	bl	8012548 <__exponent>
 80126d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80126da:	1813      	adds	r3, r2, r0
 80126dc:	2a01      	cmp	r2, #1
 80126de:	4682      	mov	sl, r0
 80126e0:	6123      	str	r3, [r4, #16]
 80126e2:	dc02      	bgt.n	80126ea <_printf_float+0x12a>
 80126e4:	6822      	ldr	r2, [r4, #0]
 80126e6:	07d2      	lsls	r2, r2, #31
 80126e8:	d501      	bpl.n	80126ee <_printf_float+0x12e>
 80126ea:	3301      	adds	r3, #1
 80126ec:	6123      	str	r3, [r4, #16]
 80126ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d0a6      	beq.n	8012644 <_printf_float+0x84>
 80126f6:	232d      	movs	r3, #45	@ 0x2d
 80126f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80126fc:	e7a2      	b.n	8012644 <_printf_float+0x84>
 80126fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012702:	d1c4      	bne.n	801268e <_printf_float+0xce>
 8012704:	2b00      	cmp	r3, #0
 8012706:	d1c2      	bne.n	801268e <_printf_float+0xce>
 8012708:	2301      	movs	r3, #1
 801270a:	e7bf      	b.n	801268c <_printf_float+0xcc>
 801270c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012710:	d9db      	bls.n	80126ca <_printf_float+0x10a>
 8012712:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012716:	d118      	bne.n	801274a <_printf_float+0x18a>
 8012718:	2900      	cmp	r1, #0
 801271a:	6863      	ldr	r3, [r4, #4]
 801271c:	dd0b      	ble.n	8012736 <_printf_float+0x176>
 801271e:	6121      	str	r1, [r4, #16]
 8012720:	b913      	cbnz	r3, 8012728 <_printf_float+0x168>
 8012722:	6822      	ldr	r2, [r4, #0]
 8012724:	07d0      	lsls	r0, r2, #31
 8012726:	d502      	bpl.n	801272e <_printf_float+0x16e>
 8012728:	3301      	adds	r3, #1
 801272a:	440b      	add	r3, r1
 801272c:	6123      	str	r3, [r4, #16]
 801272e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012730:	f04f 0a00 	mov.w	sl, #0
 8012734:	e7db      	b.n	80126ee <_printf_float+0x12e>
 8012736:	b913      	cbnz	r3, 801273e <_printf_float+0x17e>
 8012738:	6822      	ldr	r2, [r4, #0]
 801273a:	07d2      	lsls	r2, r2, #31
 801273c:	d501      	bpl.n	8012742 <_printf_float+0x182>
 801273e:	3302      	adds	r3, #2
 8012740:	e7f4      	b.n	801272c <_printf_float+0x16c>
 8012742:	2301      	movs	r3, #1
 8012744:	e7f2      	b.n	801272c <_printf_float+0x16c>
 8012746:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801274a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801274c:	4299      	cmp	r1, r3
 801274e:	db05      	blt.n	801275c <_printf_float+0x19c>
 8012750:	6823      	ldr	r3, [r4, #0]
 8012752:	6121      	str	r1, [r4, #16]
 8012754:	07d8      	lsls	r0, r3, #31
 8012756:	d5ea      	bpl.n	801272e <_printf_float+0x16e>
 8012758:	1c4b      	adds	r3, r1, #1
 801275a:	e7e7      	b.n	801272c <_printf_float+0x16c>
 801275c:	2900      	cmp	r1, #0
 801275e:	bfd4      	ite	le
 8012760:	f1c1 0202 	rsble	r2, r1, #2
 8012764:	2201      	movgt	r2, #1
 8012766:	4413      	add	r3, r2
 8012768:	e7e0      	b.n	801272c <_printf_float+0x16c>
 801276a:	6823      	ldr	r3, [r4, #0]
 801276c:	055a      	lsls	r2, r3, #21
 801276e:	d407      	bmi.n	8012780 <_printf_float+0x1c0>
 8012770:	6923      	ldr	r3, [r4, #16]
 8012772:	4642      	mov	r2, r8
 8012774:	4631      	mov	r1, r6
 8012776:	4628      	mov	r0, r5
 8012778:	47b8      	blx	r7
 801277a:	3001      	adds	r0, #1
 801277c:	d12a      	bne.n	80127d4 <_printf_float+0x214>
 801277e:	e76b      	b.n	8012658 <_printf_float+0x98>
 8012780:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012784:	f240 80e0 	bls.w	8012948 <_printf_float+0x388>
 8012788:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801278c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012794:	d133      	bne.n	80127fe <_printf_float+0x23e>
 8012796:	4a38      	ldr	r2, [pc, #224]	@ (8012878 <_printf_float+0x2b8>)
 8012798:	2301      	movs	r3, #1
 801279a:	4631      	mov	r1, r6
 801279c:	4628      	mov	r0, r5
 801279e:	47b8      	blx	r7
 80127a0:	3001      	adds	r0, #1
 80127a2:	f43f af59 	beq.w	8012658 <_printf_float+0x98>
 80127a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80127aa:	4543      	cmp	r3, r8
 80127ac:	db02      	blt.n	80127b4 <_printf_float+0x1f4>
 80127ae:	6823      	ldr	r3, [r4, #0]
 80127b0:	07d8      	lsls	r0, r3, #31
 80127b2:	d50f      	bpl.n	80127d4 <_printf_float+0x214>
 80127b4:	9b05      	ldr	r3, [sp, #20]
 80127b6:	465a      	mov	r2, fp
 80127b8:	4631      	mov	r1, r6
 80127ba:	4628      	mov	r0, r5
 80127bc:	47b8      	blx	r7
 80127be:	3001      	adds	r0, #1
 80127c0:	f43f af4a 	beq.w	8012658 <_printf_float+0x98>
 80127c4:	f04f 0900 	mov.w	r9, #0
 80127c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80127cc:	f104 0a1a 	add.w	sl, r4, #26
 80127d0:	45c8      	cmp	r8, r9
 80127d2:	dc09      	bgt.n	80127e8 <_printf_float+0x228>
 80127d4:	6823      	ldr	r3, [r4, #0]
 80127d6:	079b      	lsls	r3, r3, #30
 80127d8:	f100 8107 	bmi.w	80129ea <_printf_float+0x42a>
 80127dc:	68e0      	ldr	r0, [r4, #12]
 80127de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127e0:	4298      	cmp	r0, r3
 80127e2:	bfb8      	it	lt
 80127e4:	4618      	movlt	r0, r3
 80127e6:	e739      	b.n	801265c <_printf_float+0x9c>
 80127e8:	2301      	movs	r3, #1
 80127ea:	4652      	mov	r2, sl
 80127ec:	4631      	mov	r1, r6
 80127ee:	4628      	mov	r0, r5
 80127f0:	47b8      	blx	r7
 80127f2:	3001      	adds	r0, #1
 80127f4:	f43f af30 	beq.w	8012658 <_printf_float+0x98>
 80127f8:	f109 0901 	add.w	r9, r9, #1
 80127fc:	e7e8      	b.n	80127d0 <_printf_float+0x210>
 80127fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012800:	2b00      	cmp	r3, #0
 8012802:	dc3b      	bgt.n	801287c <_printf_float+0x2bc>
 8012804:	4a1c      	ldr	r2, [pc, #112]	@ (8012878 <_printf_float+0x2b8>)
 8012806:	2301      	movs	r3, #1
 8012808:	4631      	mov	r1, r6
 801280a:	4628      	mov	r0, r5
 801280c:	47b8      	blx	r7
 801280e:	3001      	adds	r0, #1
 8012810:	f43f af22 	beq.w	8012658 <_printf_float+0x98>
 8012814:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012818:	ea59 0303 	orrs.w	r3, r9, r3
 801281c:	d102      	bne.n	8012824 <_printf_float+0x264>
 801281e:	6823      	ldr	r3, [r4, #0]
 8012820:	07d9      	lsls	r1, r3, #31
 8012822:	d5d7      	bpl.n	80127d4 <_printf_float+0x214>
 8012824:	9b05      	ldr	r3, [sp, #20]
 8012826:	465a      	mov	r2, fp
 8012828:	4631      	mov	r1, r6
 801282a:	4628      	mov	r0, r5
 801282c:	47b8      	blx	r7
 801282e:	3001      	adds	r0, #1
 8012830:	f43f af12 	beq.w	8012658 <_printf_float+0x98>
 8012834:	f04f 0a00 	mov.w	sl, #0
 8012838:	f104 0b1a 	add.w	fp, r4, #26
 801283c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801283e:	425b      	negs	r3, r3
 8012840:	4553      	cmp	r3, sl
 8012842:	dc01      	bgt.n	8012848 <_printf_float+0x288>
 8012844:	464b      	mov	r3, r9
 8012846:	e794      	b.n	8012772 <_printf_float+0x1b2>
 8012848:	2301      	movs	r3, #1
 801284a:	465a      	mov	r2, fp
 801284c:	4631      	mov	r1, r6
 801284e:	4628      	mov	r0, r5
 8012850:	47b8      	blx	r7
 8012852:	3001      	adds	r0, #1
 8012854:	f43f af00 	beq.w	8012658 <_printf_float+0x98>
 8012858:	f10a 0a01 	add.w	sl, sl, #1
 801285c:	e7ee      	b.n	801283c <_printf_float+0x27c>
 801285e:	bf00      	nop
 8012860:	ffffffff 	.word	0xffffffff
 8012864:	7fefffff 	.word	0x7fefffff
 8012868:	08015fbc 	.word	0x08015fbc
 801286c:	08015fc0 	.word	0x08015fc0
 8012870:	08015fc4 	.word	0x08015fc4
 8012874:	08015fc8 	.word	0x08015fc8
 8012878:	08015fcc 	.word	0x08015fcc
 801287c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801287e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012882:	4553      	cmp	r3, sl
 8012884:	bfa8      	it	ge
 8012886:	4653      	movge	r3, sl
 8012888:	2b00      	cmp	r3, #0
 801288a:	4699      	mov	r9, r3
 801288c:	dc37      	bgt.n	80128fe <_printf_float+0x33e>
 801288e:	2300      	movs	r3, #0
 8012890:	9307      	str	r3, [sp, #28]
 8012892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012896:	f104 021a 	add.w	r2, r4, #26
 801289a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801289c:	9907      	ldr	r1, [sp, #28]
 801289e:	9306      	str	r3, [sp, #24]
 80128a0:	eba3 0309 	sub.w	r3, r3, r9
 80128a4:	428b      	cmp	r3, r1
 80128a6:	dc31      	bgt.n	801290c <_printf_float+0x34c>
 80128a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128aa:	459a      	cmp	sl, r3
 80128ac:	dc3b      	bgt.n	8012926 <_printf_float+0x366>
 80128ae:	6823      	ldr	r3, [r4, #0]
 80128b0:	07da      	lsls	r2, r3, #31
 80128b2:	d438      	bmi.n	8012926 <_printf_float+0x366>
 80128b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128b6:	ebaa 0903 	sub.w	r9, sl, r3
 80128ba:	9b06      	ldr	r3, [sp, #24]
 80128bc:	ebaa 0303 	sub.w	r3, sl, r3
 80128c0:	4599      	cmp	r9, r3
 80128c2:	bfa8      	it	ge
 80128c4:	4699      	movge	r9, r3
 80128c6:	f1b9 0f00 	cmp.w	r9, #0
 80128ca:	dc34      	bgt.n	8012936 <_printf_float+0x376>
 80128cc:	f04f 0800 	mov.w	r8, #0
 80128d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80128d4:	f104 0b1a 	add.w	fp, r4, #26
 80128d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128da:	ebaa 0303 	sub.w	r3, sl, r3
 80128de:	eba3 0309 	sub.w	r3, r3, r9
 80128e2:	4543      	cmp	r3, r8
 80128e4:	f77f af76 	ble.w	80127d4 <_printf_float+0x214>
 80128e8:	2301      	movs	r3, #1
 80128ea:	465a      	mov	r2, fp
 80128ec:	4631      	mov	r1, r6
 80128ee:	4628      	mov	r0, r5
 80128f0:	47b8      	blx	r7
 80128f2:	3001      	adds	r0, #1
 80128f4:	f43f aeb0 	beq.w	8012658 <_printf_float+0x98>
 80128f8:	f108 0801 	add.w	r8, r8, #1
 80128fc:	e7ec      	b.n	80128d8 <_printf_float+0x318>
 80128fe:	4642      	mov	r2, r8
 8012900:	4631      	mov	r1, r6
 8012902:	4628      	mov	r0, r5
 8012904:	47b8      	blx	r7
 8012906:	3001      	adds	r0, #1
 8012908:	d1c1      	bne.n	801288e <_printf_float+0x2ce>
 801290a:	e6a5      	b.n	8012658 <_printf_float+0x98>
 801290c:	2301      	movs	r3, #1
 801290e:	4631      	mov	r1, r6
 8012910:	4628      	mov	r0, r5
 8012912:	9206      	str	r2, [sp, #24]
 8012914:	47b8      	blx	r7
 8012916:	3001      	adds	r0, #1
 8012918:	f43f ae9e 	beq.w	8012658 <_printf_float+0x98>
 801291c:	9b07      	ldr	r3, [sp, #28]
 801291e:	9a06      	ldr	r2, [sp, #24]
 8012920:	3301      	adds	r3, #1
 8012922:	9307      	str	r3, [sp, #28]
 8012924:	e7b9      	b.n	801289a <_printf_float+0x2da>
 8012926:	9b05      	ldr	r3, [sp, #20]
 8012928:	465a      	mov	r2, fp
 801292a:	4631      	mov	r1, r6
 801292c:	4628      	mov	r0, r5
 801292e:	47b8      	blx	r7
 8012930:	3001      	adds	r0, #1
 8012932:	d1bf      	bne.n	80128b4 <_printf_float+0x2f4>
 8012934:	e690      	b.n	8012658 <_printf_float+0x98>
 8012936:	9a06      	ldr	r2, [sp, #24]
 8012938:	464b      	mov	r3, r9
 801293a:	4442      	add	r2, r8
 801293c:	4631      	mov	r1, r6
 801293e:	4628      	mov	r0, r5
 8012940:	47b8      	blx	r7
 8012942:	3001      	adds	r0, #1
 8012944:	d1c2      	bne.n	80128cc <_printf_float+0x30c>
 8012946:	e687      	b.n	8012658 <_printf_float+0x98>
 8012948:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801294c:	f1b9 0f01 	cmp.w	r9, #1
 8012950:	dc01      	bgt.n	8012956 <_printf_float+0x396>
 8012952:	07db      	lsls	r3, r3, #31
 8012954:	d536      	bpl.n	80129c4 <_printf_float+0x404>
 8012956:	2301      	movs	r3, #1
 8012958:	4642      	mov	r2, r8
 801295a:	4631      	mov	r1, r6
 801295c:	4628      	mov	r0, r5
 801295e:	47b8      	blx	r7
 8012960:	3001      	adds	r0, #1
 8012962:	f43f ae79 	beq.w	8012658 <_printf_float+0x98>
 8012966:	9b05      	ldr	r3, [sp, #20]
 8012968:	465a      	mov	r2, fp
 801296a:	4631      	mov	r1, r6
 801296c:	4628      	mov	r0, r5
 801296e:	47b8      	blx	r7
 8012970:	3001      	adds	r0, #1
 8012972:	f43f ae71 	beq.w	8012658 <_printf_float+0x98>
 8012976:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801297a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012982:	f109 39ff 	add.w	r9, r9, #4294967295
 8012986:	d018      	beq.n	80129ba <_printf_float+0x3fa>
 8012988:	464b      	mov	r3, r9
 801298a:	f108 0201 	add.w	r2, r8, #1
 801298e:	4631      	mov	r1, r6
 8012990:	4628      	mov	r0, r5
 8012992:	47b8      	blx	r7
 8012994:	3001      	adds	r0, #1
 8012996:	d10c      	bne.n	80129b2 <_printf_float+0x3f2>
 8012998:	e65e      	b.n	8012658 <_printf_float+0x98>
 801299a:	2301      	movs	r3, #1
 801299c:	465a      	mov	r2, fp
 801299e:	4631      	mov	r1, r6
 80129a0:	4628      	mov	r0, r5
 80129a2:	47b8      	blx	r7
 80129a4:	3001      	adds	r0, #1
 80129a6:	f43f ae57 	beq.w	8012658 <_printf_float+0x98>
 80129aa:	f108 0801 	add.w	r8, r8, #1
 80129ae:	45c8      	cmp	r8, r9
 80129b0:	dbf3      	blt.n	801299a <_printf_float+0x3da>
 80129b2:	4653      	mov	r3, sl
 80129b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80129b8:	e6dc      	b.n	8012774 <_printf_float+0x1b4>
 80129ba:	f04f 0800 	mov.w	r8, #0
 80129be:	f104 0b1a 	add.w	fp, r4, #26
 80129c2:	e7f4      	b.n	80129ae <_printf_float+0x3ee>
 80129c4:	2301      	movs	r3, #1
 80129c6:	4642      	mov	r2, r8
 80129c8:	e7e1      	b.n	801298e <_printf_float+0x3ce>
 80129ca:	2301      	movs	r3, #1
 80129cc:	464a      	mov	r2, r9
 80129ce:	4631      	mov	r1, r6
 80129d0:	4628      	mov	r0, r5
 80129d2:	47b8      	blx	r7
 80129d4:	3001      	adds	r0, #1
 80129d6:	f43f ae3f 	beq.w	8012658 <_printf_float+0x98>
 80129da:	f108 0801 	add.w	r8, r8, #1
 80129de:	68e3      	ldr	r3, [r4, #12]
 80129e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80129e2:	1a5b      	subs	r3, r3, r1
 80129e4:	4543      	cmp	r3, r8
 80129e6:	dcf0      	bgt.n	80129ca <_printf_float+0x40a>
 80129e8:	e6f8      	b.n	80127dc <_printf_float+0x21c>
 80129ea:	f04f 0800 	mov.w	r8, #0
 80129ee:	f104 0919 	add.w	r9, r4, #25
 80129f2:	e7f4      	b.n	80129de <_printf_float+0x41e>

080129f4 <_printf_common>:
 80129f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129f8:	4616      	mov	r6, r2
 80129fa:	4698      	mov	r8, r3
 80129fc:	688a      	ldr	r2, [r1, #8]
 80129fe:	690b      	ldr	r3, [r1, #16]
 8012a00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012a04:	4293      	cmp	r3, r2
 8012a06:	bfb8      	it	lt
 8012a08:	4613      	movlt	r3, r2
 8012a0a:	6033      	str	r3, [r6, #0]
 8012a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012a10:	4607      	mov	r7, r0
 8012a12:	460c      	mov	r4, r1
 8012a14:	b10a      	cbz	r2, 8012a1a <_printf_common+0x26>
 8012a16:	3301      	adds	r3, #1
 8012a18:	6033      	str	r3, [r6, #0]
 8012a1a:	6823      	ldr	r3, [r4, #0]
 8012a1c:	0699      	lsls	r1, r3, #26
 8012a1e:	bf42      	ittt	mi
 8012a20:	6833      	ldrmi	r3, [r6, #0]
 8012a22:	3302      	addmi	r3, #2
 8012a24:	6033      	strmi	r3, [r6, #0]
 8012a26:	6825      	ldr	r5, [r4, #0]
 8012a28:	f015 0506 	ands.w	r5, r5, #6
 8012a2c:	d106      	bne.n	8012a3c <_printf_common+0x48>
 8012a2e:	f104 0a19 	add.w	sl, r4, #25
 8012a32:	68e3      	ldr	r3, [r4, #12]
 8012a34:	6832      	ldr	r2, [r6, #0]
 8012a36:	1a9b      	subs	r3, r3, r2
 8012a38:	42ab      	cmp	r3, r5
 8012a3a:	dc26      	bgt.n	8012a8a <_printf_common+0x96>
 8012a3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012a40:	6822      	ldr	r2, [r4, #0]
 8012a42:	3b00      	subs	r3, #0
 8012a44:	bf18      	it	ne
 8012a46:	2301      	movne	r3, #1
 8012a48:	0692      	lsls	r2, r2, #26
 8012a4a:	d42b      	bmi.n	8012aa4 <_printf_common+0xb0>
 8012a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012a50:	4641      	mov	r1, r8
 8012a52:	4638      	mov	r0, r7
 8012a54:	47c8      	blx	r9
 8012a56:	3001      	adds	r0, #1
 8012a58:	d01e      	beq.n	8012a98 <_printf_common+0xa4>
 8012a5a:	6823      	ldr	r3, [r4, #0]
 8012a5c:	6922      	ldr	r2, [r4, #16]
 8012a5e:	f003 0306 	and.w	r3, r3, #6
 8012a62:	2b04      	cmp	r3, #4
 8012a64:	bf02      	ittt	eq
 8012a66:	68e5      	ldreq	r5, [r4, #12]
 8012a68:	6833      	ldreq	r3, [r6, #0]
 8012a6a:	1aed      	subeq	r5, r5, r3
 8012a6c:	68a3      	ldr	r3, [r4, #8]
 8012a6e:	bf0c      	ite	eq
 8012a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a74:	2500      	movne	r5, #0
 8012a76:	4293      	cmp	r3, r2
 8012a78:	bfc4      	itt	gt
 8012a7a:	1a9b      	subgt	r3, r3, r2
 8012a7c:	18ed      	addgt	r5, r5, r3
 8012a7e:	2600      	movs	r6, #0
 8012a80:	341a      	adds	r4, #26
 8012a82:	42b5      	cmp	r5, r6
 8012a84:	d11a      	bne.n	8012abc <_printf_common+0xc8>
 8012a86:	2000      	movs	r0, #0
 8012a88:	e008      	b.n	8012a9c <_printf_common+0xa8>
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	4652      	mov	r2, sl
 8012a8e:	4641      	mov	r1, r8
 8012a90:	4638      	mov	r0, r7
 8012a92:	47c8      	blx	r9
 8012a94:	3001      	adds	r0, #1
 8012a96:	d103      	bne.n	8012aa0 <_printf_common+0xac>
 8012a98:	f04f 30ff 	mov.w	r0, #4294967295
 8012a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aa0:	3501      	adds	r5, #1
 8012aa2:	e7c6      	b.n	8012a32 <_printf_common+0x3e>
 8012aa4:	18e1      	adds	r1, r4, r3
 8012aa6:	1c5a      	adds	r2, r3, #1
 8012aa8:	2030      	movs	r0, #48	@ 0x30
 8012aaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012aae:	4422      	add	r2, r4
 8012ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012ab4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012ab8:	3302      	adds	r3, #2
 8012aba:	e7c7      	b.n	8012a4c <_printf_common+0x58>
 8012abc:	2301      	movs	r3, #1
 8012abe:	4622      	mov	r2, r4
 8012ac0:	4641      	mov	r1, r8
 8012ac2:	4638      	mov	r0, r7
 8012ac4:	47c8      	blx	r9
 8012ac6:	3001      	adds	r0, #1
 8012ac8:	d0e6      	beq.n	8012a98 <_printf_common+0xa4>
 8012aca:	3601      	adds	r6, #1
 8012acc:	e7d9      	b.n	8012a82 <_printf_common+0x8e>
	...

08012ad0 <_printf_i>:
 8012ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ad4:	7e0f      	ldrb	r7, [r1, #24]
 8012ad6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012ad8:	2f78      	cmp	r7, #120	@ 0x78
 8012ada:	4691      	mov	r9, r2
 8012adc:	4680      	mov	r8, r0
 8012ade:	460c      	mov	r4, r1
 8012ae0:	469a      	mov	sl, r3
 8012ae2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012ae6:	d807      	bhi.n	8012af8 <_printf_i+0x28>
 8012ae8:	2f62      	cmp	r7, #98	@ 0x62
 8012aea:	d80a      	bhi.n	8012b02 <_printf_i+0x32>
 8012aec:	2f00      	cmp	r7, #0
 8012aee:	f000 80d2 	beq.w	8012c96 <_printf_i+0x1c6>
 8012af2:	2f58      	cmp	r7, #88	@ 0x58
 8012af4:	f000 80b9 	beq.w	8012c6a <_printf_i+0x19a>
 8012af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012afc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012b00:	e03a      	b.n	8012b78 <_printf_i+0xa8>
 8012b02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012b06:	2b15      	cmp	r3, #21
 8012b08:	d8f6      	bhi.n	8012af8 <_printf_i+0x28>
 8012b0a:	a101      	add	r1, pc, #4	@ (adr r1, 8012b10 <_printf_i+0x40>)
 8012b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b10:	08012b69 	.word	0x08012b69
 8012b14:	08012b7d 	.word	0x08012b7d
 8012b18:	08012af9 	.word	0x08012af9
 8012b1c:	08012af9 	.word	0x08012af9
 8012b20:	08012af9 	.word	0x08012af9
 8012b24:	08012af9 	.word	0x08012af9
 8012b28:	08012b7d 	.word	0x08012b7d
 8012b2c:	08012af9 	.word	0x08012af9
 8012b30:	08012af9 	.word	0x08012af9
 8012b34:	08012af9 	.word	0x08012af9
 8012b38:	08012af9 	.word	0x08012af9
 8012b3c:	08012c7d 	.word	0x08012c7d
 8012b40:	08012ba7 	.word	0x08012ba7
 8012b44:	08012c37 	.word	0x08012c37
 8012b48:	08012af9 	.word	0x08012af9
 8012b4c:	08012af9 	.word	0x08012af9
 8012b50:	08012c9f 	.word	0x08012c9f
 8012b54:	08012af9 	.word	0x08012af9
 8012b58:	08012ba7 	.word	0x08012ba7
 8012b5c:	08012af9 	.word	0x08012af9
 8012b60:	08012af9 	.word	0x08012af9
 8012b64:	08012c3f 	.word	0x08012c3f
 8012b68:	6833      	ldr	r3, [r6, #0]
 8012b6a:	1d1a      	adds	r2, r3, #4
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	6032      	str	r2, [r6, #0]
 8012b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012b78:	2301      	movs	r3, #1
 8012b7a:	e09d      	b.n	8012cb8 <_printf_i+0x1e8>
 8012b7c:	6833      	ldr	r3, [r6, #0]
 8012b7e:	6820      	ldr	r0, [r4, #0]
 8012b80:	1d19      	adds	r1, r3, #4
 8012b82:	6031      	str	r1, [r6, #0]
 8012b84:	0606      	lsls	r6, r0, #24
 8012b86:	d501      	bpl.n	8012b8c <_printf_i+0xbc>
 8012b88:	681d      	ldr	r5, [r3, #0]
 8012b8a:	e003      	b.n	8012b94 <_printf_i+0xc4>
 8012b8c:	0645      	lsls	r5, r0, #25
 8012b8e:	d5fb      	bpl.n	8012b88 <_printf_i+0xb8>
 8012b90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012b94:	2d00      	cmp	r5, #0
 8012b96:	da03      	bge.n	8012ba0 <_printf_i+0xd0>
 8012b98:	232d      	movs	r3, #45	@ 0x2d
 8012b9a:	426d      	negs	r5, r5
 8012b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ba0:	4859      	ldr	r0, [pc, #356]	@ (8012d08 <_printf_i+0x238>)
 8012ba2:	230a      	movs	r3, #10
 8012ba4:	e011      	b.n	8012bca <_printf_i+0xfa>
 8012ba6:	6821      	ldr	r1, [r4, #0]
 8012ba8:	6833      	ldr	r3, [r6, #0]
 8012baa:	0608      	lsls	r0, r1, #24
 8012bac:	f853 5b04 	ldr.w	r5, [r3], #4
 8012bb0:	d402      	bmi.n	8012bb8 <_printf_i+0xe8>
 8012bb2:	0649      	lsls	r1, r1, #25
 8012bb4:	bf48      	it	mi
 8012bb6:	b2ad      	uxthmi	r5, r5
 8012bb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8012bba:	4853      	ldr	r0, [pc, #332]	@ (8012d08 <_printf_i+0x238>)
 8012bbc:	6033      	str	r3, [r6, #0]
 8012bbe:	bf14      	ite	ne
 8012bc0:	230a      	movne	r3, #10
 8012bc2:	2308      	moveq	r3, #8
 8012bc4:	2100      	movs	r1, #0
 8012bc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012bca:	6866      	ldr	r6, [r4, #4]
 8012bcc:	60a6      	str	r6, [r4, #8]
 8012bce:	2e00      	cmp	r6, #0
 8012bd0:	bfa2      	ittt	ge
 8012bd2:	6821      	ldrge	r1, [r4, #0]
 8012bd4:	f021 0104 	bicge.w	r1, r1, #4
 8012bd8:	6021      	strge	r1, [r4, #0]
 8012bda:	b90d      	cbnz	r5, 8012be0 <_printf_i+0x110>
 8012bdc:	2e00      	cmp	r6, #0
 8012bde:	d04b      	beq.n	8012c78 <_printf_i+0x1a8>
 8012be0:	4616      	mov	r6, r2
 8012be2:	fbb5 f1f3 	udiv	r1, r5, r3
 8012be6:	fb03 5711 	mls	r7, r3, r1, r5
 8012bea:	5dc7      	ldrb	r7, [r0, r7]
 8012bec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012bf0:	462f      	mov	r7, r5
 8012bf2:	42bb      	cmp	r3, r7
 8012bf4:	460d      	mov	r5, r1
 8012bf6:	d9f4      	bls.n	8012be2 <_printf_i+0x112>
 8012bf8:	2b08      	cmp	r3, #8
 8012bfa:	d10b      	bne.n	8012c14 <_printf_i+0x144>
 8012bfc:	6823      	ldr	r3, [r4, #0]
 8012bfe:	07df      	lsls	r7, r3, #31
 8012c00:	d508      	bpl.n	8012c14 <_printf_i+0x144>
 8012c02:	6923      	ldr	r3, [r4, #16]
 8012c04:	6861      	ldr	r1, [r4, #4]
 8012c06:	4299      	cmp	r1, r3
 8012c08:	bfde      	ittt	le
 8012c0a:	2330      	movle	r3, #48	@ 0x30
 8012c0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012c10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012c14:	1b92      	subs	r2, r2, r6
 8012c16:	6122      	str	r2, [r4, #16]
 8012c18:	f8cd a000 	str.w	sl, [sp]
 8012c1c:	464b      	mov	r3, r9
 8012c1e:	aa03      	add	r2, sp, #12
 8012c20:	4621      	mov	r1, r4
 8012c22:	4640      	mov	r0, r8
 8012c24:	f7ff fee6 	bl	80129f4 <_printf_common>
 8012c28:	3001      	adds	r0, #1
 8012c2a:	d14a      	bne.n	8012cc2 <_printf_i+0x1f2>
 8012c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c30:	b004      	add	sp, #16
 8012c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c36:	6823      	ldr	r3, [r4, #0]
 8012c38:	f043 0320 	orr.w	r3, r3, #32
 8012c3c:	6023      	str	r3, [r4, #0]
 8012c3e:	4833      	ldr	r0, [pc, #204]	@ (8012d0c <_printf_i+0x23c>)
 8012c40:	2778      	movs	r7, #120	@ 0x78
 8012c42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012c46:	6823      	ldr	r3, [r4, #0]
 8012c48:	6831      	ldr	r1, [r6, #0]
 8012c4a:	061f      	lsls	r7, r3, #24
 8012c4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012c50:	d402      	bmi.n	8012c58 <_printf_i+0x188>
 8012c52:	065f      	lsls	r7, r3, #25
 8012c54:	bf48      	it	mi
 8012c56:	b2ad      	uxthmi	r5, r5
 8012c58:	6031      	str	r1, [r6, #0]
 8012c5a:	07d9      	lsls	r1, r3, #31
 8012c5c:	bf44      	itt	mi
 8012c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8012c62:	6023      	strmi	r3, [r4, #0]
 8012c64:	b11d      	cbz	r5, 8012c6e <_printf_i+0x19e>
 8012c66:	2310      	movs	r3, #16
 8012c68:	e7ac      	b.n	8012bc4 <_printf_i+0xf4>
 8012c6a:	4827      	ldr	r0, [pc, #156]	@ (8012d08 <_printf_i+0x238>)
 8012c6c:	e7e9      	b.n	8012c42 <_printf_i+0x172>
 8012c6e:	6823      	ldr	r3, [r4, #0]
 8012c70:	f023 0320 	bic.w	r3, r3, #32
 8012c74:	6023      	str	r3, [r4, #0]
 8012c76:	e7f6      	b.n	8012c66 <_printf_i+0x196>
 8012c78:	4616      	mov	r6, r2
 8012c7a:	e7bd      	b.n	8012bf8 <_printf_i+0x128>
 8012c7c:	6833      	ldr	r3, [r6, #0]
 8012c7e:	6825      	ldr	r5, [r4, #0]
 8012c80:	6961      	ldr	r1, [r4, #20]
 8012c82:	1d18      	adds	r0, r3, #4
 8012c84:	6030      	str	r0, [r6, #0]
 8012c86:	062e      	lsls	r6, r5, #24
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	d501      	bpl.n	8012c90 <_printf_i+0x1c0>
 8012c8c:	6019      	str	r1, [r3, #0]
 8012c8e:	e002      	b.n	8012c96 <_printf_i+0x1c6>
 8012c90:	0668      	lsls	r0, r5, #25
 8012c92:	d5fb      	bpl.n	8012c8c <_printf_i+0x1bc>
 8012c94:	8019      	strh	r1, [r3, #0]
 8012c96:	2300      	movs	r3, #0
 8012c98:	6123      	str	r3, [r4, #16]
 8012c9a:	4616      	mov	r6, r2
 8012c9c:	e7bc      	b.n	8012c18 <_printf_i+0x148>
 8012c9e:	6833      	ldr	r3, [r6, #0]
 8012ca0:	1d1a      	adds	r2, r3, #4
 8012ca2:	6032      	str	r2, [r6, #0]
 8012ca4:	681e      	ldr	r6, [r3, #0]
 8012ca6:	6862      	ldr	r2, [r4, #4]
 8012ca8:	2100      	movs	r1, #0
 8012caa:	4630      	mov	r0, r6
 8012cac:	f7ed fb18 	bl	80002e0 <memchr>
 8012cb0:	b108      	cbz	r0, 8012cb6 <_printf_i+0x1e6>
 8012cb2:	1b80      	subs	r0, r0, r6
 8012cb4:	6060      	str	r0, [r4, #4]
 8012cb6:	6863      	ldr	r3, [r4, #4]
 8012cb8:	6123      	str	r3, [r4, #16]
 8012cba:	2300      	movs	r3, #0
 8012cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012cc0:	e7aa      	b.n	8012c18 <_printf_i+0x148>
 8012cc2:	6923      	ldr	r3, [r4, #16]
 8012cc4:	4632      	mov	r2, r6
 8012cc6:	4649      	mov	r1, r9
 8012cc8:	4640      	mov	r0, r8
 8012cca:	47d0      	blx	sl
 8012ccc:	3001      	adds	r0, #1
 8012cce:	d0ad      	beq.n	8012c2c <_printf_i+0x15c>
 8012cd0:	6823      	ldr	r3, [r4, #0]
 8012cd2:	079b      	lsls	r3, r3, #30
 8012cd4:	d413      	bmi.n	8012cfe <_printf_i+0x22e>
 8012cd6:	68e0      	ldr	r0, [r4, #12]
 8012cd8:	9b03      	ldr	r3, [sp, #12]
 8012cda:	4298      	cmp	r0, r3
 8012cdc:	bfb8      	it	lt
 8012cde:	4618      	movlt	r0, r3
 8012ce0:	e7a6      	b.n	8012c30 <_printf_i+0x160>
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	4632      	mov	r2, r6
 8012ce6:	4649      	mov	r1, r9
 8012ce8:	4640      	mov	r0, r8
 8012cea:	47d0      	blx	sl
 8012cec:	3001      	adds	r0, #1
 8012cee:	d09d      	beq.n	8012c2c <_printf_i+0x15c>
 8012cf0:	3501      	adds	r5, #1
 8012cf2:	68e3      	ldr	r3, [r4, #12]
 8012cf4:	9903      	ldr	r1, [sp, #12]
 8012cf6:	1a5b      	subs	r3, r3, r1
 8012cf8:	42ab      	cmp	r3, r5
 8012cfa:	dcf2      	bgt.n	8012ce2 <_printf_i+0x212>
 8012cfc:	e7eb      	b.n	8012cd6 <_printf_i+0x206>
 8012cfe:	2500      	movs	r5, #0
 8012d00:	f104 0619 	add.w	r6, r4, #25
 8012d04:	e7f5      	b.n	8012cf2 <_printf_i+0x222>
 8012d06:	bf00      	nop
 8012d08:	08015fce 	.word	0x08015fce
 8012d0c:	08015fdf 	.word	0x08015fdf

08012d10 <std>:
 8012d10:	2300      	movs	r3, #0
 8012d12:	b510      	push	{r4, lr}
 8012d14:	4604      	mov	r4, r0
 8012d16:	e9c0 3300 	strd	r3, r3, [r0]
 8012d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d1e:	6083      	str	r3, [r0, #8]
 8012d20:	8181      	strh	r1, [r0, #12]
 8012d22:	6643      	str	r3, [r0, #100]	@ 0x64
 8012d24:	81c2      	strh	r2, [r0, #14]
 8012d26:	6183      	str	r3, [r0, #24]
 8012d28:	4619      	mov	r1, r3
 8012d2a:	2208      	movs	r2, #8
 8012d2c:	305c      	adds	r0, #92	@ 0x5c
 8012d2e:	f000 f914 	bl	8012f5a <memset>
 8012d32:	4b0d      	ldr	r3, [pc, #52]	@ (8012d68 <std+0x58>)
 8012d34:	6263      	str	r3, [r4, #36]	@ 0x24
 8012d36:	4b0d      	ldr	r3, [pc, #52]	@ (8012d6c <std+0x5c>)
 8012d38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012d70 <std+0x60>)
 8012d3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8012d74 <std+0x64>)
 8012d40:	6323      	str	r3, [r4, #48]	@ 0x30
 8012d42:	4b0d      	ldr	r3, [pc, #52]	@ (8012d78 <std+0x68>)
 8012d44:	6224      	str	r4, [r4, #32]
 8012d46:	429c      	cmp	r4, r3
 8012d48:	d006      	beq.n	8012d58 <std+0x48>
 8012d4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012d4e:	4294      	cmp	r4, r2
 8012d50:	d002      	beq.n	8012d58 <std+0x48>
 8012d52:	33d0      	adds	r3, #208	@ 0xd0
 8012d54:	429c      	cmp	r4, r3
 8012d56:	d105      	bne.n	8012d64 <std+0x54>
 8012d58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d60:	f000 b988 	b.w	8013074 <__retarget_lock_init_recursive>
 8012d64:	bd10      	pop	{r4, pc}
 8012d66:	bf00      	nop
 8012d68:	08012ed5 	.word	0x08012ed5
 8012d6c:	08012ef7 	.word	0x08012ef7
 8012d70:	08012f2f 	.word	0x08012f2f
 8012d74:	08012f53 	.word	0x08012f53
 8012d78:	24002238 	.word	0x24002238

08012d7c <stdio_exit_handler>:
 8012d7c:	4a02      	ldr	r2, [pc, #8]	@ (8012d88 <stdio_exit_handler+0xc>)
 8012d7e:	4903      	ldr	r1, [pc, #12]	@ (8012d8c <stdio_exit_handler+0x10>)
 8012d80:	4803      	ldr	r0, [pc, #12]	@ (8012d90 <stdio_exit_handler+0x14>)
 8012d82:	f000 b869 	b.w	8012e58 <_fwalk_sglue>
 8012d86:	bf00      	nop
 8012d88:	24000108 	.word	0x24000108
 8012d8c:	0801478d 	.word	0x0801478d
 8012d90:	24000118 	.word	0x24000118

08012d94 <cleanup_stdio>:
 8012d94:	6841      	ldr	r1, [r0, #4]
 8012d96:	4b0c      	ldr	r3, [pc, #48]	@ (8012dc8 <cleanup_stdio+0x34>)
 8012d98:	4299      	cmp	r1, r3
 8012d9a:	b510      	push	{r4, lr}
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	d001      	beq.n	8012da4 <cleanup_stdio+0x10>
 8012da0:	f001 fcf4 	bl	801478c <_fflush_r>
 8012da4:	68a1      	ldr	r1, [r4, #8]
 8012da6:	4b09      	ldr	r3, [pc, #36]	@ (8012dcc <cleanup_stdio+0x38>)
 8012da8:	4299      	cmp	r1, r3
 8012daa:	d002      	beq.n	8012db2 <cleanup_stdio+0x1e>
 8012dac:	4620      	mov	r0, r4
 8012dae:	f001 fced 	bl	801478c <_fflush_r>
 8012db2:	68e1      	ldr	r1, [r4, #12]
 8012db4:	4b06      	ldr	r3, [pc, #24]	@ (8012dd0 <cleanup_stdio+0x3c>)
 8012db6:	4299      	cmp	r1, r3
 8012db8:	d004      	beq.n	8012dc4 <cleanup_stdio+0x30>
 8012dba:	4620      	mov	r0, r4
 8012dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dc0:	f001 bce4 	b.w	801478c <_fflush_r>
 8012dc4:	bd10      	pop	{r4, pc}
 8012dc6:	bf00      	nop
 8012dc8:	24002238 	.word	0x24002238
 8012dcc:	240022a0 	.word	0x240022a0
 8012dd0:	24002308 	.word	0x24002308

08012dd4 <global_stdio_init.part.0>:
 8012dd4:	b510      	push	{r4, lr}
 8012dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8012e04 <global_stdio_init.part.0+0x30>)
 8012dd8:	4c0b      	ldr	r4, [pc, #44]	@ (8012e08 <global_stdio_init.part.0+0x34>)
 8012dda:	4a0c      	ldr	r2, [pc, #48]	@ (8012e0c <global_stdio_init.part.0+0x38>)
 8012ddc:	601a      	str	r2, [r3, #0]
 8012dde:	4620      	mov	r0, r4
 8012de0:	2200      	movs	r2, #0
 8012de2:	2104      	movs	r1, #4
 8012de4:	f7ff ff94 	bl	8012d10 <std>
 8012de8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012dec:	2201      	movs	r2, #1
 8012dee:	2109      	movs	r1, #9
 8012df0:	f7ff ff8e 	bl	8012d10 <std>
 8012df4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012df8:	2202      	movs	r2, #2
 8012dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dfe:	2112      	movs	r1, #18
 8012e00:	f7ff bf86 	b.w	8012d10 <std>
 8012e04:	24002370 	.word	0x24002370
 8012e08:	24002238 	.word	0x24002238
 8012e0c:	08012d7d 	.word	0x08012d7d

08012e10 <__sfp_lock_acquire>:
 8012e10:	4801      	ldr	r0, [pc, #4]	@ (8012e18 <__sfp_lock_acquire+0x8>)
 8012e12:	f000 b930 	b.w	8013076 <__retarget_lock_acquire_recursive>
 8012e16:	bf00      	nop
 8012e18:	24002379 	.word	0x24002379

08012e1c <__sfp_lock_release>:
 8012e1c:	4801      	ldr	r0, [pc, #4]	@ (8012e24 <__sfp_lock_release+0x8>)
 8012e1e:	f000 b92b 	b.w	8013078 <__retarget_lock_release_recursive>
 8012e22:	bf00      	nop
 8012e24:	24002379 	.word	0x24002379

08012e28 <__sinit>:
 8012e28:	b510      	push	{r4, lr}
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	f7ff fff0 	bl	8012e10 <__sfp_lock_acquire>
 8012e30:	6a23      	ldr	r3, [r4, #32]
 8012e32:	b11b      	cbz	r3, 8012e3c <__sinit+0x14>
 8012e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e38:	f7ff bff0 	b.w	8012e1c <__sfp_lock_release>
 8012e3c:	4b04      	ldr	r3, [pc, #16]	@ (8012e50 <__sinit+0x28>)
 8012e3e:	6223      	str	r3, [r4, #32]
 8012e40:	4b04      	ldr	r3, [pc, #16]	@ (8012e54 <__sinit+0x2c>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d1f5      	bne.n	8012e34 <__sinit+0xc>
 8012e48:	f7ff ffc4 	bl	8012dd4 <global_stdio_init.part.0>
 8012e4c:	e7f2      	b.n	8012e34 <__sinit+0xc>
 8012e4e:	bf00      	nop
 8012e50:	08012d95 	.word	0x08012d95
 8012e54:	24002370 	.word	0x24002370

08012e58 <_fwalk_sglue>:
 8012e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e5c:	4607      	mov	r7, r0
 8012e5e:	4688      	mov	r8, r1
 8012e60:	4614      	mov	r4, r2
 8012e62:	2600      	movs	r6, #0
 8012e64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012e68:	f1b9 0901 	subs.w	r9, r9, #1
 8012e6c:	d505      	bpl.n	8012e7a <_fwalk_sglue+0x22>
 8012e6e:	6824      	ldr	r4, [r4, #0]
 8012e70:	2c00      	cmp	r4, #0
 8012e72:	d1f7      	bne.n	8012e64 <_fwalk_sglue+0xc>
 8012e74:	4630      	mov	r0, r6
 8012e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e7a:	89ab      	ldrh	r3, [r5, #12]
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	d907      	bls.n	8012e90 <_fwalk_sglue+0x38>
 8012e80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012e84:	3301      	adds	r3, #1
 8012e86:	d003      	beq.n	8012e90 <_fwalk_sglue+0x38>
 8012e88:	4629      	mov	r1, r5
 8012e8a:	4638      	mov	r0, r7
 8012e8c:	47c0      	blx	r8
 8012e8e:	4306      	orrs	r6, r0
 8012e90:	3568      	adds	r5, #104	@ 0x68
 8012e92:	e7e9      	b.n	8012e68 <_fwalk_sglue+0x10>

08012e94 <siprintf>:
 8012e94:	b40e      	push	{r1, r2, r3}
 8012e96:	b500      	push	{lr}
 8012e98:	b09c      	sub	sp, #112	@ 0x70
 8012e9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8012e9c:	9002      	str	r0, [sp, #8]
 8012e9e:	9006      	str	r0, [sp, #24]
 8012ea0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012ea4:	4809      	ldr	r0, [pc, #36]	@ (8012ecc <siprintf+0x38>)
 8012ea6:	9107      	str	r1, [sp, #28]
 8012ea8:	9104      	str	r1, [sp, #16]
 8012eaa:	4909      	ldr	r1, [pc, #36]	@ (8012ed0 <siprintf+0x3c>)
 8012eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8012eb0:	9105      	str	r1, [sp, #20]
 8012eb2:	6800      	ldr	r0, [r0, #0]
 8012eb4:	9301      	str	r3, [sp, #4]
 8012eb6:	a902      	add	r1, sp, #8
 8012eb8:	f001 fae8 	bl	801448c <_svfiprintf_r>
 8012ebc:	9b02      	ldr	r3, [sp, #8]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	701a      	strb	r2, [r3, #0]
 8012ec2:	b01c      	add	sp, #112	@ 0x70
 8012ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ec8:	b003      	add	sp, #12
 8012eca:	4770      	bx	lr
 8012ecc:	24000114 	.word	0x24000114
 8012ed0:	ffff0208 	.word	0xffff0208

08012ed4 <__sread>:
 8012ed4:	b510      	push	{r4, lr}
 8012ed6:	460c      	mov	r4, r1
 8012ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012edc:	f000 f86c 	bl	8012fb8 <_read_r>
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	bfab      	itete	ge
 8012ee4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8012ee8:	181b      	addge	r3, r3, r0
 8012eea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012eee:	bfac      	ite	ge
 8012ef0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012ef2:	81a3      	strhlt	r3, [r4, #12]
 8012ef4:	bd10      	pop	{r4, pc}

08012ef6 <__swrite>:
 8012ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012efa:	461f      	mov	r7, r3
 8012efc:	898b      	ldrh	r3, [r1, #12]
 8012efe:	05db      	lsls	r3, r3, #23
 8012f00:	4605      	mov	r5, r0
 8012f02:	460c      	mov	r4, r1
 8012f04:	4616      	mov	r6, r2
 8012f06:	d505      	bpl.n	8012f14 <__swrite+0x1e>
 8012f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f0c:	2302      	movs	r3, #2
 8012f0e:	2200      	movs	r2, #0
 8012f10:	f000 f840 	bl	8012f94 <_lseek_r>
 8012f14:	89a3      	ldrh	r3, [r4, #12]
 8012f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012f1e:	81a3      	strh	r3, [r4, #12]
 8012f20:	4632      	mov	r2, r6
 8012f22:	463b      	mov	r3, r7
 8012f24:	4628      	mov	r0, r5
 8012f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f2a:	f000 b867 	b.w	8012ffc <_write_r>

08012f2e <__sseek>:
 8012f2e:	b510      	push	{r4, lr}
 8012f30:	460c      	mov	r4, r1
 8012f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f36:	f000 f82d 	bl	8012f94 <_lseek_r>
 8012f3a:	1c43      	adds	r3, r0, #1
 8012f3c:	89a3      	ldrh	r3, [r4, #12]
 8012f3e:	bf15      	itete	ne
 8012f40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012f42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012f46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012f4a:	81a3      	strheq	r3, [r4, #12]
 8012f4c:	bf18      	it	ne
 8012f4e:	81a3      	strhne	r3, [r4, #12]
 8012f50:	bd10      	pop	{r4, pc}

08012f52 <__sclose>:
 8012f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f56:	f000 b80d 	b.w	8012f74 <_close_r>

08012f5a <memset>:
 8012f5a:	4402      	add	r2, r0
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	d100      	bne.n	8012f64 <memset+0xa>
 8012f62:	4770      	bx	lr
 8012f64:	f803 1b01 	strb.w	r1, [r3], #1
 8012f68:	e7f9      	b.n	8012f5e <memset+0x4>
	...

08012f6c <_localeconv_r>:
 8012f6c:	4800      	ldr	r0, [pc, #0]	@ (8012f70 <_localeconv_r+0x4>)
 8012f6e:	4770      	bx	lr
 8012f70:	24000254 	.word	0x24000254

08012f74 <_close_r>:
 8012f74:	b538      	push	{r3, r4, r5, lr}
 8012f76:	4d06      	ldr	r5, [pc, #24]	@ (8012f90 <_close_r+0x1c>)
 8012f78:	2300      	movs	r3, #0
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	4608      	mov	r0, r1
 8012f7e:	602b      	str	r3, [r5, #0]
 8012f80:	f7ee fb16 	bl	80015b0 <_close>
 8012f84:	1c43      	adds	r3, r0, #1
 8012f86:	d102      	bne.n	8012f8e <_close_r+0x1a>
 8012f88:	682b      	ldr	r3, [r5, #0]
 8012f8a:	b103      	cbz	r3, 8012f8e <_close_r+0x1a>
 8012f8c:	6023      	str	r3, [r4, #0]
 8012f8e:	bd38      	pop	{r3, r4, r5, pc}
 8012f90:	24002374 	.word	0x24002374

08012f94 <_lseek_r>:
 8012f94:	b538      	push	{r3, r4, r5, lr}
 8012f96:	4d07      	ldr	r5, [pc, #28]	@ (8012fb4 <_lseek_r+0x20>)
 8012f98:	4604      	mov	r4, r0
 8012f9a:	4608      	mov	r0, r1
 8012f9c:	4611      	mov	r1, r2
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	602a      	str	r2, [r5, #0]
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	f7ee fb2b 	bl	80015fe <_lseek>
 8012fa8:	1c43      	adds	r3, r0, #1
 8012faa:	d102      	bne.n	8012fb2 <_lseek_r+0x1e>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	b103      	cbz	r3, 8012fb2 <_lseek_r+0x1e>
 8012fb0:	6023      	str	r3, [r4, #0]
 8012fb2:	bd38      	pop	{r3, r4, r5, pc}
 8012fb4:	24002374 	.word	0x24002374

08012fb8 <_read_r>:
 8012fb8:	b538      	push	{r3, r4, r5, lr}
 8012fba:	4d07      	ldr	r5, [pc, #28]	@ (8012fd8 <_read_r+0x20>)
 8012fbc:	4604      	mov	r4, r0
 8012fbe:	4608      	mov	r0, r1
 8012fc0:	4611      	mov	r1, r2
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	602a      	str	r2, [r5, #0]
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	f7ee fab9 	bl	800153e <_read>
 8012fcc:	1c43      	adds	r3, r0, #1
 8012fce:	d102      	bne.n	8012fd6 <_read_r+0x1e>
 8012fd0:	682b      	ldr	r3, [r5, #0]
 8012fd2:	b103      	cbz	r3, 8012fd6 <_read_r+0x1e>
 8012fd4:	6023      	str	r3, [r4, #0]
 8012fd6:	bd38      	pop	{r3, r4, r5, pc}
 8012fd8:	24002374 	.word	0x24002374

08012fdc <_sbrk_r>:
 8012fdc:	b538      	push	{r3, r4, r5, lr}
 8012fde:	4d06      	ldr	r5, [pc, #24]	@ (8012ff8 <_sbrk_r+0x1c>)
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	4608      	mov	r0, r1
 8012fe6:	602b      	str	r3, [r5, #0]
 8012fe8:	f7ee fb16 	bl	8001618 <_sbrk>
 8012fec:	1c43      	adds	r3, r0, #1
 8012fee:	d102      	bne.n	8012ff6 <_sbrk_r+0x1a>
 8012ff0:	682b      	ldr	r3, [r5, #0]
 8012ff2:	b103      	cbz	r3, 8012ff6 <_sbrk_r+0x1a>
 8012ff4:	6023      	str	r3, [r4, #0]
 8012ff6:	bd38      	pop	{r3, r4, r5, pc}
 8012ff8:	24002374 	.word	0x24002374

08012ffc <_write_r>:
 8012ffc:	b538      	push	{r3, r4, r5, lr}
 8012ffe:	4d07      	ldr	r5, [pc, #28]	@ (801301c <_write_r+0x20>)
 8013000:	4604      	mov	r4, r0
 8013002:	4608      	mov	r0, r1
 8013004:	4611      	mov	r1, r2
 8013006:	2200      	movs	r2, #0
 8013008:	602a      	str	r2, [r5, #0]
 801300a:	461a      	mov	r2, r3
 801300c:	f7ee fab4 	bl	8001578 <_write>
 8013010:	1c43      	adds	r3, r0, #1
 8013012:	d102      	bne.n	801301a <_write_r+0x1e>
 8013014:	682b      	ldr	r3, [r5, #0]
 8013016:	b103      	cbz	r3, 801301a <_write_r+0x1e>
 8013018:	6023      	str	r3, [r4, #0]
 801301a:	bd38      	pop	{r3, r4, r5, pc}
 801301c:	24002374 	.word	0x24002374

08013020 <__errno>:
 8013020:	4b01      	ldr	r3, [pc, #4]	@ (8013028 <__errno+0x8>)
 8013022:	6818      	ldr	r0, [r3, #0]
 8013024:	4770      	bx	lr
 8013026:	bf00      	nop
 8013028:	24000114 	.word	0x24000114

0801302c <__libc_init_array>:
 801302c:	b570      	push	{r4, r5, r6, lr}
 801302e:	4d0d      	ldr	r5, [pc, #52]	@ (8013064 <__libc_init_array+0x38>)
 8013030:	4c0d      	ldr	r4, [pc, #52]	@ (8013068 <__libc_init_array+0x3c>)
 8013032:	1b64      	subs	r4, r4, r5
 8013034:	10a4      	asrs	r4, r4, #2
 8013036:	2600      	movs	r6, #0
 8013038:	42a6      	cmp	r6, r4
 801303a:	d109      	bne.n	8013050 <__libc_init_array+0x24>
 801303c:	4d0b      	ldr	r5, [pc, #44]	@ (801306c <__libc_init_array+0x40>)
 801303e:	4c0c      	ldr	r4, [pc, #48]	@ (8013070 <__libc_init_array+0x44>)
 8013040:	f002 f862 	bl	8015108 <_init>
 8013044:	1b64      	subs	r4, r4, r5
 8013046:	10a4      	asrs	r4, r4, #2
 8013048:	2600      	movs	r6, #0
 801304a:	42a6      	cmp	r6, r4
 801304c:	d105      	bne.n	801305a <__libc_init_array+0x2e>
 801304e:	bd70      	pop	{r4, r5, r6, pc}
 8013050:	f855 3b04 	ldr.w	r3, [r5], #4
 8013054:	4798      	blx	r3
 8013056:	3601      	adds	r6, #1
 8013058:	e7ee      	b.n	8013038 <__libc_init_array+0xc>
 801305a:	f855 3b04 	ldr.w	r3, [r5], #4
 801305e:	4798      	blx	r3
 8013060:	3601      	adds	r6, #1
 8013062:	e7f2      	b.n	801304a <__libc_init_array+0x1e>
 8013064:	08016348 	.word	0x08016348
 8013068:	08016348 	.word	0x08016348
 801306c:	08016348 	.word	0x08016348
 8013070:	0801634c 	.word	0x0801634c

08013074 <__retarget_lock_init_recursive>:
 8013074:	4770      	bx	lr

08013076 <__retarget_lock_acquire_recursive>:
 8013076:	4770      	bx	lr

08013078 <__retarget_lock_release_recursive>:
 8013078:	4770      	bx	lr

0801307a <quorem>:
 801307a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801307e:	6903      	ldr	r3, [r0, #16]
 8013080:	690c      	ldr	r4, [r1, #16]
 8013082:	42a3      	cmp	r3, r4
 8013084:	4607      	mov	r7, r0
 8013086:	db7e      	blt.n	8013186 <quorem+0x10c>
 8013088:	3c01      	subs	r4, #1
 801308a:	f101 0814 	add.w	r8, r1, #20
 801308e:	00a3      	lsls	r3, r4, #2
 8013090:	f100 0514 	add.w	r5, r0, #20
 8013094:	9300      	str	r3, [sp, #0]
 8013096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801309a:	9301      	str	r3, [sp, #4]
 801309c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80130a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130a4:	3301      	adds	r3, #1
 80130a6:	429a      	cmp	r2, r3
 80130a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80130ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80130b0:	d32e      	bcc.n	8013110 <quorem+0x96>
 80130b2:	f04f 0a00 	mov.w	sl, #0
 80130b6:	46c4      	mov	ip, r8
 80130b8:	46ae      	mov	lr, r5
 80130ba:	46d3      	mov	fp, sl
 80130bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80130c0:	b298      	uxth	r0, r3
 80130c2:	fb06 a000 	mla	r0, r6, r0, sl
 80130c6:	0c02      	lsrs	r2, r0, #16
 80130c8:	0c1b      	lsrs	r3, r3, #16
 80130ca:	fb06 2303 	mla	r3, r6, r3, r2
 80130ce:	f8de 2000 	ldr.w	r2, [lr]
 80130d2:	b280      	uxth	r0, r0
 80130d4:	b292      	uxth	r2, r2
 80130d6:	1a12      	subs	r2, r2, r0
 80130d8:	445a      	add	r2, fp
 80130da:	f8de 0000 	ldr.w	r0, [lr]
 80130de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80130e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80130ec:	b292      	uxth	r2, r2
 80130ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80130f2:	45e1      	cmp	r9, ip
 80130f4:	f84e 2b04 	str.w	r2, [lr], #4
 80130f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80130fc:	d2de      	bcs.n	80130bc <quorem+0x42>
 80130fe:	9b00      	ldr	r3, [sp, #0]
 8013100:	58eb      	ldr	r3, [r5, r3]
 8013102:	b92b      	cbnz	r3, 8013110 <quorem+0x96>
 8013104:	9b01      	ldr	r3, [sp, #4]
 8013106:	3b04      	subs	r3, #4
 8013108:	429d      	cmp	r5, r3
 801310a:	461a      	mov	r2, r3
 801310c:	d32f      	bcc.n	801316e <quorem+0xf4>
 801310e:	613c      	str	r4, [r7, #16]
 8013110:	4638      	mov	r0, r7
 8013112:	f001 f857 	bl	80141c4 <__mcmp>
 8013116:	2800      	cmp	r0, #0
 8013118:	db25      	blt.n	8013166 <quorem+0xec>
 801311a:	4629      	mov	r1, r5
 801311c:	2000      	movs	r0, #0
 801311e:	f858 2b04 	ldr.w	r2, [r8], #4
 8013122:	f8d1 c000 	ldr.w	ip, [r1]
 8013126:	fa1f fe82 	uxth.w	lr, r2
 801312a:	fa1f f38c 	uxth.w	r3, ip
 801312e:	eba3 030e 	sub.w	r3, r3, lr
 8013132:	4403      	add	r3, r0
 8013134:	0c12      	lsrs	r2, r2, #16
 8013136:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801313a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801313e:	b29b      	uxth	r3, r3
 8013140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013144:	45c1      	cmp	r9, r8
 8013146:	f841 3b04 	str.w	r3, [r1], #4
 801314a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801314e:	d2e6      	bcs.n	801311e <quorem+0xa4>
 8013150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013154:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013158:	b922      	cbnz	r2, 8013164 <quorem+0xea>
 801315a:	3b04      	subs	r3, #4
 801315c:	429d      	cmp	r5, r3
 801315e:	461a      	mov	r2, r3
 8013160:	d30b      	bcc.n	801317a <quorem+0x100>
 8013162:	613c      	str	r4, [r7, #16]
 8013164:	3601      	adds	r6, #1
 8013166:	4630      	mov	r0, r6
 8013168:	b003      	add	sp, #12
 801316a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801316e:	6812      	ldr	r2, [r2, #0]
 8013170:	3b04      	subs	r3, #4
 8013172:	2a00      	cmp	r2, #0
 8013174:	d1cb      	bne.n	801310e <quorem+0x94>
 8013176:	3c01      	subs	r4, #1
 8013178:	e7c6      	b.n	8013108 <quorem+0x8e>
 801317a:	6812      	ldr	r2, [r2, #0]
 801317c:	3b04      	subs	r3, #4
 801317e:	2a00      	cmp	r2, #0
 8013180:	d1ef      	bne.n	8013162 <quorem+0xe8>
 8013182:	3c01      	subs	r4, #1
 8013184:	e7ea      	b.n	801315c <quorem+0xe2>
 8013186:	2000      	movs	r0, #0
 8013188:	e7ee      	b.n	8013168 <quorem+0xee>
 801318a:	0000      	movs	r0, r0
 801318c:	0000      	movs	r0, r0
	...

08013190 <_dtoa_r>:
 8013190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013194:	ed2d 8b02 	vpush	{d8}
 8013198:	69c7      	ldr	r7, [r0, #28]
 801319a:	b091      	sub	sp, #68	@ 0x44
 801319c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80131a0:	ec55 4b10 	vmov	r4, r5, d0
 80131a4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80131a6:	9107      	str	r1, [sp, #28]
 80131a8:	4681      	mov	r9, r0
 80131aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80131ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80131ae:	b97f      	cbnz	r7, 80131d0 <_dtoa_r+0x40>
 80131b0:	2010      	movs	r0, #16
 80131b2:	f7ff f8bf 	bl	8012334 <malloc>
 80131b6:	4602      	mov	r2, r0
 80131b8:	f8c9 001c 	str.w	r0, [r9, #28]
 80131bc:	b920      	cbnz	r0, 80131c8 <_dtoa_r+0x38>
 80131be:	4ba0      	ldr	r3, [pc, #640]	@ (8013440 <_dtoa_r+0x2b0>)
 80131c0:	21ef      	movs	r1, #239	@ 0xef
 80131c2:	48a0      	ldr	r0, [pc, #640]	@ (8013444 <_dtoa_r+0x2b4>)
 80131c4:	f001 fb32 	bl	801482c <__assert_func>
 80131c8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80131cc:	6007      	str	r7, [r0, #0]
 80131ce:	60c7      	str	r7, [r0, #12]
 80131d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80131d4:	6819      	ldr	r1, [r3, #0]
 80131d6:	b159      	cbz	r1, 80131f0 <_dtoa_r+0x60>
 80131d8:	685a      	ldr	r2, [r3, #4]
 80131da:	604a      	str	r2, [r1, #4]
 80131dc:	2301      	movs	r3, #1
 80131de:	4093      	lsls	r3, r2
 80131e0:	608b      	str	r3, [r1, #8]
 80131e2:	4648      	mov	r0, r9
 80131e4:	f000 fdb4 	bl	8013d50 <_Bfree>
 80131e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80131ec:	2200      	movs	r2, #0
 80131ee:	601a      	str	r2, [r3, #0]
 80131f0:	1e2b      	subs	r3, r5, #0
 80131f2:	bfbb      	ittet	lt
 80131f4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80131f8:	9303      	strlt	r3, [sp, #12]
 80131fa:	2300      	movge	r3, #0
 80131fc:	2201      	movlt	r2, #1
 80131fe:	bfac      	ite	ge
 8013200:	6033      	strge	r3, [r6, #0]
 8013202:	6032      	strlt	r2, [r6, #0]
 8013204:	4b90      	ldr	r3, [pc, #576]	@ (8013448 <_dtoa_r+0x2b8>)
 8013206:	9e03      	ldr	r6, [sp, #12]
 8013208:	43b3      	bics	r3, r6
 801320a:	d110      	bne.n	801322e <_dtoa_r+0x9e>
 801320c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801320e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013212:	6013      	str	r3, [r2, #0]
 8013214:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013218:	4323      	orrs	r3, r4
 801321a:	f000 84de 	beq.w	8013bda <_dtoa_r+0xa4a>
 801321e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013220:	4f8a      	ldr	r7, [pc, #552]	@ (801344c <_dtoa_r+0x2bc>)
 8013222:	2b00      	cmp	r3, #0
 8013224:	f000 84e0 	beq.w	8013be8 <_dtoa_r+0xa58>
 8013228:	1cfb      	adds	r3, r7, #3
 801322a:	f000 bcdb 	b.w	8013be4 <_dtoa_r+0xa54>
 801322e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013232:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801323a:	d10a      	bne.n	8013252 <_dtoa_r+0xc2>
 801323c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801323e:	2301      	movs	r3, #1
 8013240:	6013      	str	r3, [r2, #0]
 8013242:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013244:	b113      	cbz	r3, 801324c <_dtoa_r+0xbc>
 8013246:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013248:	4b81      	ldr	r3, [pc, #516]	@ (8013450 <_dtoa_r+0x2c0>)
 801324a:	6013      	str	r3, [r2, #0]
 801324c:	4f81      	ldr	r7, [pc, #516]	@ (8013454 <_dtoa_r+0x2c4>)
 801324e:	f000 bccb 	b.w	8013be8 <_dtoa_r+0xa58>
 8013252:	aa0e      	add	r2, sp, #56	@ 0x38
 8013254:	a90f      	add	r1, sp, #60	@ 0x3c
 8013256:	4648      	mov	r0, r9
 8013258:	eeb0 0b48 	vmov.f64	d0, d8
 801325c:	f001 f862 	bl	8014324 <__d2b>
 8013260:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8013264:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013266:	9001      	str	r0, [sp, #4]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d045      	beq.n	80132f8 <_dtoa_r+0x168>
 801326c:	eeb0 7b48 	vmov.f64	d7, d8
 8013270:	ee18 1a90 	vmov	r1, s17
 8013274:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013278:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801327c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013280:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013284:	2500      	movs	r5, #0
 8013286:	ee07 1a90 	vmov	s15, r1
 801328a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801328e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013428 <_dtoa_r+0x298>
 8013292:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013296:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013430 <_dtoa_r+0x2a0>
 801329a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801329e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013438 <_dtoa_r+0x2a8>
 80132a2:	ee07 3a90 	vmov	s15, r3
 80132a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80132aa:	eeb0 7b46 	vmov.f64	d7, d6
 80132ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80132b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80132b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80132ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132be:	ee16 8a90 	vmov	r8, s13
 80132c2:	d508      	bpl.n	80132d6 <_dtoa_r+0x146>
 80132c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80132c8:	eeb4 6b47 	vcmp.f64	d6, d7
 80132cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d0:	bf18      	it	ne
 80132d2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80132d6:	f1b8 0f16 	cmp.w	r8, #22
 80132da:	d82b      	bhi.n	8013334 <_dtoa_r+0x1a4>
 80132dc:	495e      	ldr	r1, [pc, #376]	@ (8013458 <_dtoa_r+0x2c8>)
 80132de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80132e2:	ed91 7b00 	vldr	d7, [r1]
 80132e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80132ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ee:	d501      	bpl.n	80132f4 <_dtoa_r+0x164>
 80132f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80132f4:	2100      	movs	r1, #0
 80132f6:	e01e      	b.n	8013336 <_dtoa_r+0x1a6>
 80132f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132fa:	4413      	add	r3, r2
 80132fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013300:	2920      	cmp	r1, #32
 8013302:	bfc1      	itttt	gt
 8013304:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013308:	408e      	lslgt	r6, r1
 801330a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801330e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8013312:	bfd6      	itet	le
 8013314:	f1c1 0120 	rsble	r1, r1, #32
 8013318:	4331      	orrgt	r1, r6
 801331a:	fa04 f101 	lslle.w	r1, r4, r1
 801331e:	ee07 1a90 	vmov	s15, r1
 8013322:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013326:	3b01      	subs	r3, #1
 8013328:	ee17 1a90 	vmov	r1, s15
 801332c:	2501      	movs	r5, #1
 801332e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013332:	e7a8      	b.n	8013286 <_dtoa_r+0xf6>
 8013334:	2101      	movs	r1, #1
 8013336:	1ad2      	subs	r2, r2, r3
 8013338:	1e53      	subs	r3, r2, #1
 801333a:	9306      	str	r3, [sp, #24]
 801333c:	bf45      	ittet	mi
 801333e:	f1c2 0301 	rsbmi	r3, r2, #1
 8013342:	9305      	strmi	r3, [sp, #20]
 8013344:	2300      	movpl	r3, #0
 8013346:	2300      	movmi	r3, #0
 8013348:	bf4c      	ite	mi
 801334a:	9306      	strmi	r3, [sp, #24]
 801334c:	9305      	strpl	r3, [sp, #20]
 801334e:	f1b8 0f00 	cmp.w	r8, #0
 8013352:	910c      	str	r1, [sp, #48]	@ 0x30
 8013354:	db18      	blt.n	8013388 <_dtoa_r+0x1f8>
 8013356:	9b06      	ldr	r3, [sp, #24]
 8013358:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801335c:	4443      	add	r3, r8
 801335e:	9306      	str	r3, [sp, #24]
 8013360:	2300      	movs	r3, #0
 8013362:	9a07      	ldr	r2, [sp, #28]
 8013364:	2a09      	cmp	r2, #9
 8013366:	d849      	bhi.n	80133fc <_dtoa_r+0x26c>
 8013368:	2a05      	cmp	r2, #5
 801336a:	bfc4      	itt	gt
 801336c:	3a04      	subgt	r2, #4
 801336e:	9207      	strgt	r2, [sp, #28]
 8013370:	9a07      	ldr	r2, [sp, #28]
 8013372:	f1a2 0202 	sub.w	r2, r2, #2
 8013376:	bfcc      	ite	gt
 8013378:	2400      	movgt	r4, #0
 801337a:	2401      	movle	r4, #1
 801337c:	2a03      	cmp	r2, #3
 801337e:	d848      	bhi.n	8013412 <_dtoa_r+0x282>
 8013380:	e8df f002 	tbb	[pc, r2]
 8013384:	3a2c2e0b 	.word	0x3a2c2e0b
 8013388:	9b05      	ldr	r3, [sp, #20]
 801338a:	2200      	movs	r2, #0
 801338c:	eba3 0308 	sub.w	r3, r3, r8
 8013390:	9305      	str	r3, [sp, #20]
 8013392:	920a      	str	r2, [sp, #40]	@ 0x28
 8013394:	f1c8 0300 	rsb	r3, r8, #0
 8013398:	e7e3      	b.n	8013362 <_dtoa_r+0x1d2>
 801339a:	2200      	movs	r2, #0
 801339c:	9208      	str	r2, [sp, #32]
 801339e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133a0:	2a00      	cmp	r2, #0
 80133a2:	dc39      	bgt.n	8013418 <_dtoa_r+0x288>
 80133a4:	f04f 0b01 	mov.w	fp, #1
 80133a8:	46da      	mov	sl, fp
 80133aa:	465a      	mov	r2, fp
 80133ac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80133b0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80133b4:	2100      	movs	r1, #0
 80133b6:	2004      	movs	r0, #4
 80133b8:	f100 0614 	add.w	r6, r0, #20
 80133bc:	4296      	cmp	r6, r2
 80133be:	d930      	bls.n	8013422 <_dtoa_r+0x292>
 80133c0:	6079      	str	r1, [r7, #4]
 80133c2:	4648      	mov	r0, r9
 80133c4:	9304      	str	r3, [sp, #16]
 80133c6:	f000 fc83 	bl	8013cd0 <_Balloc>
 80133ca:	9b04      	ldr	r3, [sp, #16]
 80133cc:	4607      	mov	r7, r0
 80133ce:	2800      	cmp	r0, #0
 80133d0:	d146      	bne.n	8013460 <_dtoa_r+0x2d0>
 80133d2:	4b22      	ldr	r3, [pc, #136]	@ (801345c <_dtoa_r+0x2cc>)
 80133d4:	4602      	mov	r2, r0
 80133d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80133da:	e6f2      	b.n	80131c2 <_dtoa_r+0x32>
 80133dc:	2201      	movs	r2, #1
 80133de:	e7dd      	b.n	801339c <_dtoa_r+0x20c>
 80133e0:	2200      	movs	r2, #0
 80133e2:	9208      	str	r2, [sp, #32]
 80133e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133e6:	eb08 0b02 	add.w	fp, r8, r2
 80133ea:	f10b 0a01 	add.w	sl, fp, #1
 80133ee:	4652      	mov	r2, sl
 80133f0:	2a01      	cmp	r2, #1
 80133f2:	bfb8      	it	lt
 80133f4:	2201      	movlt	r2, #1
 80133f6:	e7db      	b.n	80133b0 <_dtoa_r+0x220>
 80133f8:	2201      	movs	r2, #1
 80133fa:	e7f2      	b.n	80133e2 <_dtoa_r+0x252>
 80133fc:	2401      	movs	r4, #1
 80133fe:	2200      	movs	r2, #0
 8013400:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013404:	f04f 3bff 	mov.w	fp, #4294967295
 8013408:	2100      	movs	r1, #0
 801340a:	46da      	mov	sl, fp
 801340c:	2212      	movs	r2, #18
 801340e:	9109      	str	r1, [sp, #36]	@ 0x24
 8013410:	e7ce      	b.n	80133b0 <_dtoa_r+0x220>
 8013412:	2201      	movs	r2, #1
 8013414:	9208      	str	r2, [sp, #32]
 8013416:	e7f5      	b.n	8013404 <_dtoa_r+0x274>
 8013418:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801341c:	46da      	mov	sl, fp
 801341e:	465a      	mov	r2, fp
 8013420:	e7c6      	b.n	80133b0 <_dtoa_r+0x220>
 8013422:	3101      	adds	r1, #1
 8013424:	0040      	lsls	r0, r0, #1
 8013426:	e7c7      	b.n	80133b8 <_dtoa_r+0x228>
 8013428:	636f4361 	.word	0x636f4361
 801342c:	3fd287a7 	.word	0x3fd287a7
 8013430:	8b60c8b3 	.word	0x8b60c8b3
 8013434:	3fc68a28 	.word	0x3fc68a28
 8013438:	509f79fb 	.word	0x509f79fb
 801343c:	3fd34413 	.word	0x3fd34413
 8013440:	08015ffd 	.word	0x08015ffd
 8013444:	08016014 	.word	0x08016014
 8013448:	7ff00000 	.word	0x7ff00000
 801344c:	08015ff9 	.word	0x08015ff9
 8013450:	08015fcd 	.word	0x08015fcd
 8013454:	08015fcc 	.word	0x08015fcc
 8013458:	08016110 	.word	0x08016110
 801345c:	0801606c 	.word	0x0801606c
 8013460:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8013464:	f1ba 0f0e 	cmp.w	sl, #14
 8013468:	6010      	str	r0, [r2, #0]
 801346a:	d86f      	bhi.n	801354c <_dtoa_r+0x3bc>
 801346c:	2c00      	cmp	r4, #0
 801346e:	d06d      	beq.n	801354c <_dtoa_r+0x3bc>
 8013470:	f1b8 0f00 	cmp.w	r8, #0
 8013474:	f340 80c2 	ble.w	80135fc <_dtoa_r+0x46c>
 8013478:	4aca      	ldr	r2, [pc, #808]	@ (80137a4 <_dtoa_r+0x614>)
 801347a:	f008 010f 	and.w	r1, r8, #15
 801347e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013482:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8013486:	ed92 7b00 	vldr	d7, [r2]
 801348a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801348e:	f000 80a9 	beq.w	80135e4 <_dtoa_r+0x454>
 8013492:	4ac5      	ldr	r2, [pc, #788]	@ (80137a8 <_dtoa_r+0x618>)
 8013494:	ed92 6b08 	vldr	d6, [r2, #32]
 8013498:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801349c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80134a0:	f001 010f 	and.w	r1, r1, #15
 80134a4:	2203      	movs	r2, #3
 80134a6:	48c0      	ldr	r0, [pc, #768]	@ (80137a8 <_dtoa_r+0x618>)
 80134a8:	2900      	cmp	r1, #0
 80134aa:	f040 809d 	bne.w	80135e8 <_dtoa_r+0x458>
 80134ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80134b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80134b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80134ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80134bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80134c0:	2900      	cmp	r1, #0
 80134c2:	f000 80c1 	beq.w	8013648 <_dtoa_r+0x4b8>
 80134c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80134ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80134ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d2:	f140 80b9 	bpl.w	8013648 <_dtoa_r+0x4b8>
 80134d6:	f1ba 0f00 	cmp.w	sl, #0
 80134da:	f000 80b5 	beq.w	8013648 <_dtoa_r+0x4b8>
 80134de:	f1bb 0f00 	cmp.w	fp, #0
 80134e2:	dd31      	ble.n	8013548 <_dtoa_r+0x3b8>
 80134e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80134e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80134ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80134f0:	f108 31ff 	add.w	r1, r8, #4294967295
 80134f4:	9104      	str	r1, [sp, #16]
 80134f6:	3201      	adds	r2, #1
 80134f8:	465c      	mov	r4, fp
 80134fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80134fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013502:	ee07 2a90 	vmov	s15, r2
 8013506:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801350a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801350e:	ee15 2a90 	vmov	r2, s11
 8013512:	ec51 0b15 	vmov	r0, r1, d5
 8013516:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801351a:	2c00      	cmp	r4, #0
 801351c:	f040 8098 	bne.w	8013650 <_dtoa_r+0x4c0>
 8013520:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013524:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013528:	ec41 0b17 	vmov	d7, r0, r1
 801352c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013534:	f300 8261 	bgt.w	80139fa <_dtoa_r+0x86a>
 8013538:	eeb1 7b47 	vneg.f64	d7, d7
 801353c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013544:	f100 80f5 	bmi.w	8013732 <_dtoa_r+0x5a2>
 8013548:	ed8d 8b02 	vstr	d8, [sp, #8]
 801354c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801354e:	2a00      	cmp	r2, #0
 8013550:	f2c0 812c 	blt.w	80137ac <_dtoa_r+0x61c>
 8013554:	f1b8 0f0e 	cmp.w	r8, #14
 8013558:	f300 8128 	bgt.w	80137ac <_dtoa_r+0x61c>
 801355c:	4b91      	ldr	r3, [pc, #580]	@ (80137a4 <_dtoa_r+0x614>)
 801355e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013562:	ed93 6b00 	vldr	d6, [r3]
 8013566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013568:	2b00      	cmp	r3, #0
 801356a:	da03      	bge.n	8013574 <_dtoa_r+0x3e4>
 801356c:	f1ba 0f00 	cmp.w	sl, #0
 8013570:	f340 80d2 	ble.w	8013718 <_dtoa_r+0x588>
 8013574:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013578:	ed9d 7b02 	vldr	d7, [sp, #8]
 801357c:	463e      	mov	r6, r7
 801357e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013582:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013586:	ee15 3a10 	vmov	r3, s10
 801358a:	3330      	adds	r3, #48	@ 0x30
 801358c:	f806 3b01 	strb.w	r3, [r6], #1
 8013590:	1bf3      	subs	r3, r6, r7
 8013592:	459a      	cmp	sl, r3
 8013594:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013598:	eea3 7b46 	vfms.f64	d7, d3, d6
 801359c:	f040 80f8 	bne.w	8013790 <_dtoa_r+0x600>
 80135a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80135a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80135a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ac:	f300 80dd 	bgt.w	801376a <_dtoa_r+0x5da>
 80135b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80135b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b8:	d104      	bne.n	80135c4 <_dtoa_r+0x434>
 80135ba:	ee15 3a10 	vmov	r3, s10
 80135be:	07db      	lsls	r3, r3, #31
 80135c0:	f100 80d3 	bmi.w	801376a <_dtoa_r+0x5da>
 80135c4:	9901      	ldr	r1, [sp, #4]
 80135c6:	4648      	mov	r0, r9
 80135c8:	f000 fbc2 	bl	8013d50 <_Bfree>
 80135cc:	2300      	movs	r3, #0
 80135ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80135d0:	7033      	strb	r3, [r6, #0]
 80135d2:	f108 0301 	add.w	r3, r8, #1
 80135d6:	6013      	str	r3, [r2, #0]
 80135d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80135da:	2b00      	cmp	r3, #0
 80135dc:	f000 8304 	beq.w	8013be8 <_dtoa_r+0xa58>
 80135e0:	601e      	str	r6, [r3, #0]
 80135e2:	e301      	b.n	8013be8 <_dtoa_r+0xa58>
 80135e4:	2202      	movs	r2, #2
 80135e6:	e75e      	b.n	80134a6 <_dtoa_r+0x316>
 80135e8:	07cc      	lsls	r4, r1, #31
 80135ea:	d504      	bpl.n	80135f6 <_dtoa_r+0x466>
 80135ec:	ed90 6b00 	vldr	d6, [r0]
 80135f0:	3201      	adds	r2, #1
 80135f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80135f6:	1049      	asrs	r1, r1, #1
 80135f8:	3008      	adds	r0, #8
 80135fa:	e755      	b.n	80134a8 <_dtoa_r+0x318>
 80135fc:	d022      	beq.n	8013644 <_dtoa_r+0x4b4>
 80135fe:	f1c8 0100 	rsb	r1, r8, #0
 8013602:	4a68      	ldr	r2, [pc, #416]	@ (80137a4 <_dtoa_r+0x614>)
 8013604:	f001 000f 	and.w	r0, r1, #15
 8013608:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801360c:	ed92 7b00 	vldr	d7, [r2]
 8013610:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013618:	4863      	ldr	r0, [pc, #396]	@ (80137a8 <_dtoa_r+0x618>)
 801361a:	1109      	asrs	r1, r1, #4
 801361c:	2400      	movs	r4, #0
 801361e:	2202      	movs	r2, #2
 8013620:	b929      	cbnz	r1, 801362e <_dtoa_r+0x49e>
 8013622:	2c00      	cmp	r4, #0
 8013624:	f43f af49 	beq.w	80134ba <_dtoa_r+0x32a>
 8013628:	ed8d 7b02 	vstr	d7, [sp, #8]
 801362c:	e745      	b.n	80134ba <_dtoa_r+0x32a>
 801362e:	07ce      	lsls	r6, r1, #31
 8013630:	d505      	bpl.n	801363e <_dtoa_r+0x4ae>
 8013632:	ed90 6b00 	vldr	d6, [r0]
 8013636:	3201      	adds	r2, #1
 8013638:	2401      	movs	r4, #1
 801363a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801363e:	1049      	asrs	r1, r1, #1
 8013640:	3008      	adds	r0, #8
 8013642:	e7ed      	b.n	8013620 <_dtoa_r+0x490>
 8013644:	2202      	movs	r2, #2
 8013646:	e738      	b.n	80134ba <_dtoa_r+0x32a>
 8013648:	f8cd 8010 	str.w	r8, [sp, #16]
 801364c:	4654      	mov	r4, sl
 801364e:	e754      	b.n	80134fa <_dtoa_r+0x36a>
 8013650:	4a54      	ldr	r2, [pc, #336]	@ (80137a4 <_dtoa_r+0x614>)
 8013652:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013656:	ed12 4b02 	vldr	d4, [r2, #-8]
 801365a:	9a08      	ldr	r2, [sp, #32]
 801365c:	ec41 0b17 	vmov	d7, r0, r1
 8013660:	443c      	add	r4, r7
 8013662:	b34a      	cbz	r2, 80136b8 <_dtoa_r+0x528>
 8013664:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013668:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801366c:	463e      	mov	r6, r7
 801366e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013672:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013676:	ee35 7b47 	vsub.f64	d7, d5, d7
 801367a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801367e:	ee14 2a90 	vmov	r2, s9
 8013682:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013686:	3230      	adds	r2, #48	@ 0x30
 8013688:	ee36 6b45 	vsub.f64	d6, d6, d5
 801368c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013694:	f806 2b01 	strb.w	r2, [r6], #1
 8013698:	d438      	bmi.n	801370c <_dtoa_r+0x57c>
 801369a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801369e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80136a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136a6:	d462      	bmi.n	801376e <_dtoa_r+0x5de>
 80136a8:	42a6      	cmp	r6, r4
 80136aa:	f43f af4d 	beq.w	8013548 <_dtoa_r+0x3b8>
 80136ae:	ee27 7b03 	vmul.f64	d7, d7, d3
 80136b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80136b6:	e7e0      	b.n	801367a <_dtoa_r+0x4ea>
 80136b8:	4621      	mov	r1, r4
 80136ba:	463e      	mov	r6, r7
 80136bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80136c0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80136c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80136c8:	ee14 2a90 	vmov	r2, s9
 80136cc:	3230      	adds	r2, #48	@ 0x30
 80136ce:	f806 2b01 	strb.w	r2, [r6], #1
 80136d2:	42a6      	cmp	r6, r4
 80136d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80136d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80136dc:	d119      	bne.n	8013712 <_dtoa_r+0x582>
 80136de:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80136e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80136e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80136ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ee:	dc3e      	bgt.n	801376e <_dtoa_r+0x5de>
 80136f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80136f4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80136f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136fc:	f57f af24 	bpl.w	8013548 <_dtoa_r+0x3b8>
 8013700:	460e      	mov	r6, r1
 8013702:	3901      	subs	r1, #1
 8013704:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013708:	2b30      	cmp	r3, #48	@ 0x30
 801370a:	d0f9      	beq.n	8013700 <_dtoa_r+0x570>
 801370c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013710:	e758      	b.n	80135c4 <_dtoa_r+0x434>
 8013712:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013716:	e7d5      	b.n	80136c4 <_dtoa_r+0x534>
 8013718:	d10b      	bne.n	8013732 <_dtoa_r+0x5a2>
 801371a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801371e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013722:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013726:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801372e:	f2c0 8161 	blt.w	80139f4 <_dtoa_r+0x864>
 8013732:	2400      	movs	r4, #0
 8013734:	4625      	mov	r5, r4
 8013736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013738:	43db      	mvns	r3, r3
 801373a:	9304      	str	r3, [sp, #16]
 801373c:	463e      	mov	r6, r7
 801373e:	f04f 0800 	mov.w	r8, #0
 8013742:	4621      	mov	r1, r4
 8013744:	4648      	mov	r0, r9
 8013746:	f000 fb03 	bl	8013d50 <_Bfree>
 801374a:	2d00      	cmp	r5, #0
 801374c:	d0de      	beq.n	801370c <_dtoa_r+0x57c>
 801374e:	f1b8 0f00 	cmp.w	r8, #0
 8013752:	d005      	beq.n	8013760 <_dtoa_r+0x5d0>
 8013754:	45a8      	cmp	r8, r5
 8013756:	d003      	beq.n	8013760 <_dtoa_r+0x5d0>
 8013758:	4641      	mov	r1, r8
 801375a:	4648      	mov	r0, r9
 801375c:	f000 faf8 	bl	8013d50 <_Bfree>
 8013760:	4629      	mov	r1, r5
 8013762:	4648      	mov	r0, r9
 8013764:	f000 faf4 	bl	8013d50 <_Bfree>
 8013768:	e7d0      	b.n	801370c <_dtoa_r+0x57c>
 801376a:	f8cd 8010 	str.w	r8, [sp, #16]
 801376e:	4633      	mov	r3, r6
 8013770:	461e      	mov	r6, r3
 8013772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013776:	2a39      	cmp	r2, #57	@ 0x39
 8013778:	d106      	bne.n	8013788 <_dtoa_r+0x5f8>
 801377a:	429f      	cmp	r7, r3
 801377c:	d1f8      	bne.n	8013770 <_dtoa_r+0x5e0>
 801377e:	9a04      	ldr	r2, [sp, #16]
 8013780:	3201      	adds	r2, #1
 8013782:	9204      	str	r2, [sp, #16]
 8013784:	2230      	movs	r2, #48	@ 0x30
 8013786:	703a      	strb	r2, [r7, #0]
 8013788:	781a      	ldrb	r2, [r3, #0]
 801378a:	3201      	adds	r2, #1
 801378c:	701a      	strb	r2, [r3, #0]
 801378e:	e7bd      	b.n	801370c <_dtoa_r+0x57c>
 8013790:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013794:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801379c:	f47f aeef 	bne.w	801357e <_dtoa_r+0x3ee>
 80137a0:	e710      	b.n	80135c4 <_dtoa_r+0x434>
 80137a2:	bf00      	nop
 80137a4:	08016110 	.word	0x08016110
 80137a8:	080160e8 	.word	0x080160e8
 80137ac:	9908      	ldr	r1, [sp, #32]
 80137ae:	2900      	cmp	r1, #0
 80137b0:	f000 80e3 	beq.w	801397a <_dtoa_r+0x7ea>
 80137b4:	9907      	ldr	r1, [sp, #28]
 80137b6:	2901      	cmp	r1, #1
 80137b8:	f300 80c8 	bgt.w	801394c <_dtoa_r+0x7bc>
 80137bc:	2d00      	cmp	r5, #0
 80137be:	f000 80c1 	beq.w	8013944 <_dtoa_r+0x7b4>
 80137c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80137c6:	9e05      	ldr	r6, [sp, #20]
 80137c8:	461c      	mov	r4, r3
 80137ca:	9304      	str	r3, [sp, #16]
 80137cc:	9b05      	ldr	r3, [sp, #20]
 80137ce:	4413      	add	r3, r2
 80137d0:	9305      	str	r3, [sp, #20]
 80137d2:	9b06      	ldr	r3, [sp, #24]
 80137d4:	2101      	movs	r1, #1
 80137d6:	4413      	add	r3, r2
 80137d8:	4648      	mov	r0, r9
 80137da:	9306      	str	r3, [sp, #24]
 80137dc:	f000 fb6c 	bl	8013eb8 <__i2b>
 80137e0:	9b04      	ldr	r3, [sp, #16]
 80137e2:	4605      	mov	r5, r0
 80137e4:	b166      	cbz	r6, 8013800 <_dtoa_r+0x670>
 80137e6:	9a06      	ldr	r2, [sp, #24]
 80137e8:	2a00      	cmp	r2, #0
 80137ea:	dd09      	ble.n	8013800 <_dtoa_r+0x670>
 80137ec:	42b2      	cmp	r2, r6
 80137ee:	9905      	ldr	r1, [sp, #20]
 80137f0:	bfa8      	it	ge
 80137f2:	4632      	movge	r2, r6
 80137f4:	1a89      	subs	r1, r1, r2
 80137f6:	9105      	str	r1, [sp, #20]
 80137f8:	9906      	ldr	r1, [sp, #24]
 80137fa:	1ab6      	subs	r6, r6, r2
 80137fc:	1a8a      	subs	r2, r1, r2
 80137fe:	9206      	str	r2, [sp, #24]
 8013800:	b1fb      	cbz	r3, 8013842 <_dtoa_r+0x6b2>
 8013802:	9a08      	ldr	r2, [sp, #32]
 8013804:	2a00      	cmp	r2, #0
 8013806:	f000 80bc 	beq.w	8013982 <_dtoa_r+0x7f2>
 801380a:	b19c      	cbz	r4, 8013834 <_dtoa_r+0x6a4>
 801380c:	4629      	mov	r1, r5
 801380e:	4622      	mov	r2, r4
 8013810:	4648      	mov	r0, r9
 8013812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013814:	f000 fc10 	bl	8014038 <__pow5mult>
 8013818:	9a01      	ldr	r2, [sp, #4]
 801381a:	4601      	mov	r1, r0
 801381c:	4605      	mov	r5, r0
 801381e:	4648      	mov	r0, r9
 8013820:	f000 fb60 	bl	8013ee4 <__multiply>
 8013824:	9901      	ldr	r1, [sp, #4]
 8013826:	9004      	str	r0, [sp, #16]
 8013828:	4648      	mov	r0, r9
 801382a:	f000 fa91 	bl	8013d50 <_Bfree>
 801382e:	9a04      	ldr	r2, [sp, #16]
 8013830:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013832:	9201      	str	r2, [sp, #4]
 8013834:	1b1a      	subs	r2, r3, r4
 8013836:	d004      	beq.n	8013842 <_dtoa_r+0x6b2>
 8013838:	9901      	ldr	r1, [sp, #4]
 801383a:	4648      	mov	r0, r9
 801383c:	f000 fbfc 	bl	8014038 <__pow5mult>
 8013840:	9001      	str	r0, [sp, #4]
 8013842:	2101      	movs	r1, #1
 8013844:	4648      	mov	r0, r9
 8013846:	f000 fb37 	bl	8013eb8 <__i2b>
 801384a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801384c:	4604      	mov	r4, r0
 801384e:	2b00      	cmp	r3, #0
 8013850:	f000 81d0 	beq.w	8013bf4 <_dtoa_r+0xa64>
 8013854:	461a      	mov	r2, r3
 8013856:	4601      	mov	r1, r0
 8013858:	4648      	mov	r0, r9
 801385a:	f000 fbed 	bl	8014038 <__pow5mult>
 801385e:	9b07      	ldr	r3, [sp, #28]
 8013860:	2b01      	cmp	r3, #1
 8013862:	4604      	mov	r4, r0
 8013864:	f300 8095 	bgt.w	8013992 <_dtoa_r+0x802>
 8013868:	9b02      	ldr	r3, [sp, #8]
 801386a:	2b00      	cmp	r3, #0
 801386c:	f040 808b 	bne.w	8013986 <_dtoa_r+0x7f6>
 8013870:	9b03      	ldr	r3, [sp, #12]
 8013872:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013876:	2a00      	cmp	r2, #0
 8013878:	f040 8087 	bne.w	801398a <_dtoa_r+0x7fa>
 801387c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013880:	0d12      	lsrs	r2, r2, #20
 8013882:	0512      	lsls	r2, r2, #20
 8013884:	2a00      	cmp	r2, #0
 8013886:	f000 8082 	beq.w	801398e <_dtoa_r+0x7fe>
 801388a:	9b05      	ldr	r3, [sp, #20]
 801388c:	3301      	adds	r3, #1
 801388e:	9305      	str	r3, [sp, #20]
 8013890:	9b06      	ldr	r3, [sp, #24]
 8013892:	3301      	adds	r3, #1
 8013894:	9306      	str	r3, [sp, #24]
 8013896:	2301      	movs	r3, #1
 8013898:	930b      	str	r3, [sp, #44]	@ 0x2c
 801389a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801389c:	2b00      	cmp	r3, #0
 801389e:	f000 81af 	beq.w	8013c00 <_dtoa_r+0xa70>
 80138a2:	6922      	ldr	r2, [r4, #16]
 80138a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80138a8:	6910      	ldr	r0, [r2, #16]
 80138aa:	f000 fab9 	bl	8013e20 <__hi0bits>
 80138ae:	f1c0 0020 	rsb	r0, r0, #32
 80138b2:	9b06      	ldr	r3, [sp, #24]
 80138b4:	4418      	add	r0, r3
 80138b6:	f010 001f 	ands.w	r0, r0, #31
 80138ba:	d076      	beq.n	80139aa <_dtoa_r+0x81a>
 80138bc:	f1c0 0220 	rsb	r2, r0, #32
 80138c0:	2a04      	cmp	r2, #4
 80138c2:	dd69      	ble.n	8013998 <_dtoa_r+0x808>
 80138c4:	9b05      	ldr	r3, [sp, #20]
 80138c6:	f1c0 001c 	rsb	r0, r0, #28
 80138ca:	4403      	add	r3, r0
 80138cc:	9305      	str	r3, [sp, #20]
 80138ce:	9b06      	ldr	r3, [sp, #24]
 80138d0:	4406      	add	r6, r0
 80138d2:	4403      	add	r3, r0
 80138d4:	9306      	str	r3, [sp, #24]
 80138d6:	9b05      	ldr	r3, [sp, #20]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	dd05      	ble.n	80138e8 <_dtoa_r+0x758>
 80138dc:	9901      	ldr	r1, [sp, #4]
 80138de:	461a      	mov	r2, r3
 80138e0:	4648      	mov	r0, r9
 80138e2:	f000 fc03 	bl	80140ec <__lshift>
 80138e6:	9001      	str	r0, [sp, #4]
 80138e8:	9b06      	ldr	r3, [sp, #24]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	dd05      	ble.n	80138fa <_dtoa_r+0x76a>
 80138ee:	4621      	mov	r1, r4
 80138f0:	461a      	mov	r2, r3
 80138f2:	4648      	mov	r0, r9
 80138f4:	f000 fbfa 	bl	80140ec <__lshift>
 80138f8:	4604      	mov	r4, r0
 80138fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d056      	beq.n	80139ae <_dtoa_r+0x81e>
 8013900:	9801      	ldr	r0, [sp, #4]
 8013902:	4621      	mov	r1, r4
 8013904:	f000 fc5e 	bl	80141c4 <__mcmp>
 8013908:	2800      	cmp	r0, #0
 801390a:	da50      	bge.n	80139ae <_dtoa_r+0x81e>
 801390c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013910:	9304      	str	r3, [sp, #16]
 8013912:	9901      	ldr	r1, [sp, #4]
 8013914:	2300      	movs	r3, #0
 8013916:	220a      	movs	r2, #10
 8013918:	4648      	mov	r0, r9
 801391a:	f000 fa3b 	bl	8013d94 <__multadd>
 801391e:	9b08      	ldr	r3, [sp, #32]
 8013920:	9001      	str	r0, [sp, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	f000 816e 	beq.w	8013c04 <_dtoa_r+0xa74>
 8013928:	4629      	mov	r1, r5
 801392a:	2300      	movs	r3, #0
 801392c:	220a      	movs	r2, #10
 801392e:	4648      	mov	r0, r9
 8013930:	f000 fa30 	bl	8013d94 <__multadd>
 8013934:	f1bb 0f00 	cmp.w	fp, #0
 8013938:	4605      	mov	r5, r0
 801393a:	dc64      	bgt.n	8013a06 <_dtoa_r+0x876>
 801393c:	9b07      	ldr	r3, [sp, #28]
 801393e:	2b02      	cmp	r3, #2
 8013940:	dc3e      	bgt.n	80139c0 <_dtoa_r+0x830>
 8013942:	e060      	b.n	8013a06 <_dtoa_r+0x876>
 8013944:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013946:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801394a:	e73c      	b.n	80137c6 <_dtoa_r+0x636>
 801394c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013950:	42a3      	cmp	r3, r4
 8013952:	bfbf      	itttt	lt
 8013954:	1ae2      	sublt	r2, r4, r3
 8013956:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013958:	189b      	addlt	r3, r3, r2
 801395a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801395c:	bfae      	itee	ge
 801395e:	1b1c      	subge	r4, r3, r4
 8013960:	4623      	movlt	r3, r4
 8013962:	2400      	movlt	r4, #0
 8013964:	f1ba 0f00 	cmp.w	sl, #0
 8013968:	bfb5      	itete	lt
 801396a:	9a05      	ldrlt	r2, [sp, #20]
 801396c:	9e05      	ldrge	r6, [sp, #20]
 801396e:	eba2 060a 	sublt.w	r6, r2, sl
 8013972:	4652      	movge	r2, sl
 8013974:	bfb8      	it	lt
 8013976:	2200      	movlt	r2, #0
 8013978:	e727      	b.n	80137ca <_dtoa_r+0x63a>
 801397a:	9e05      	ldr	r6, [sp, #20]
 801397c:	9d08      	ldr	r5, [sp, #32]
 801397e:	461c      	mov	r4, r3
 8013980:	e730      	b.n	80137e4 <_dtoa_r+0x654>
 8013982:	461a      	mov	r2, r3
 8013984:	e758      	b.n	8013838 <_dtoa_r+0x6a8>
 8013986:	2300      	movs	r3, #0
 8013988:	e786      	b.n	8013898 <_dtoa_r+0x708>
 801398a:	9b02      	ldr	r3, [sp, #8]
 801398c:	e784      	b.n	8013898 <_dtoa_r+0x708>
 801398e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013990:	e783      	b.n	801389a <_dtoa_r+0x70a>
 8013992:	2300      	movs	r3, #0
 8013994:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013996:	e784      	b.n	80138a2 <_dtoa_r+0x712>
 8013998:	d09d      	beq.n	80138d6 <_dtoa_r+0x746>
 801399a:	9b05      	ldr	r3, [sp, #20]
 801399c:	321c      	adds	r2, #28
 801399e:	4413      	add	r3, r2
 80139a0:	9305      	str	r3, [sp, #20]
 80139a2:	9b06      	ldr	r3, [sp, #24]
 80139a4:	4416      	add	r6, r2
 80139a6:	4413      	add	r3, r2
 80139a8:	e794      	b.n	80138d4 <_dtoa_r+0x744>
 80139aa:	4602      	mov	r2, r0
 80139ac:	e7f5      	b.n	801399a <_dtoa_r+0x80a>
 80139ae:	f1ba 0f00 	cmp.w	sl, #0
 80139b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80139b6:	46d3      	mov	fp, sl
 80139b8:	dc21      	bgt.n	80139fe <_dtoa_r+0x86e>
 80139ba:	9b07      	ldr	r3, [sp, #28]
 80139bc:	2b02      	cmp	r3, #2
 80139be:	dd1e      	ble.n	80139fe <_dtoa_r+0x86e>
 80139c0:	f1bb 0f00 	cmp.w	fp, #0
 80139c4:	f47f aeb7 	bne.w	8013736 <_dtoa_r+0x5a6>
 80139c8:	4621      	mov	r1, r4
 80139ca:	465b      	mov	r3, fp
 80139cc:	2205      	movs	r2, #5
 80139ce:	4648      	mov	r0, r9
 80139d0:	f000 f9e0 	bl	8013d94 <__multadd>
 80139d4:	4601      	mov	r1, r0
 80139d6:	4604      	mov	r4, r0
 80139d8:	9801      	ldr	r0, [sp, #4]
 80139da:	f000 fbf3 	bl	80141c4 <__mcmp>
 80139de:	2800      	cmp	r0, #0
 80139e0:	f77f aea9 	ble.w	8013736 <_dtoa_r+0x5a6>
 80139e4:	463e      	mov	r6, r7
 80139e6:	2331      	movs	r3, #49	@ 0x31
 80139e8:	f806 3b01 	strb.w	r3, [r6], #1
 80139ec:	9b04      	ldr	r3, [sp, #16]
 80139ee:	3301      	adds	r3, #1
 80139f0:	9304      	str	r3, [sp, #16]
 80139f2:	e6a4      	b.n	801373e <_dtoa_r+0x5ae>
 80139f4:	f8cd 8010 	str.w	r8, [sp, #16]
 80139f8:	4654      	mov	r4, sl
 80139fa:	4625      	mov	r5, r4
 80139fc:	e7f2      	b.n	80139e4 <_dtoa_r+0x854>
 80139fe:	9b08      	ldr	r3, [sp, #32]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	f000 8103 	beq.w	8013c0c <_dtoa_r+0xa7c>
 8013a06:	2e00      	cmp	r6, #0
 8013a08:	dd05      	ble.n	8013a16 <_dtoa_r+0x886>
 8013a0a:	4629      	mov	r1, r5
 8013a0c:	4632      	mov	r2, r6
 8013a0e:	4648      	mov	r0, r9
 8013a10:	f000 fb6c 	bl	80140ec <__lshift>
 8013a14:	4605      	mov	r5, r0
 8013a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d058      	beq.n	8013ace <_dtoa_r+0x93e>
 8013a1c:	6869      	ldr	r1, [r5, #4]
 8013a1e:	4648      	mov	r0, r9
 8013a20:	f000 f956 	bl	8013cd0 <_Balloc>
 8013a24:	4606      	mov	r6, r0
 8013a26:	b928      	cbnz	r0, 8013a34 <_dtoa_r+0x8a4>
 8013a28:	4b82      	ldr	r3, [pc, #520]	@ (8013c34 <_dtoa_r+0xaa4>)
 8013a2a:	4602      	mov	r2, r0
 8013a2c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013a30:	f7ff bbc7 	b.w	80131c2 <_dtoa_r+0x32>
 8013a34:	692a      	ldr	r2, [r5, #16]
 8013a36:	3202      	adds	r2, #2
 8013a38:	0092      	lsls	r2, r2, #2
 8013a3a:	f105 010c 	add.w	r1, r5, #12
 8013a3e:	300c      	adds	r0, #12
 8013a40:	f000 fee6 	bl	8014810 <memcpy>
 8013a44:	2201      	movs	r2, #1
 8013a46:	4631      	mov	r1, r6
 8013a48:	4648      	mov	r0, r9
 8013a4a:	f000 fb4f 	bl	80140ec <__lshift>
 8013a4e:	1c7b      	adds	r3, r7, #1
 8013a50:	9305      	str	r3, [sp, #20]
 8013a52:	eb07 030b 	add.w	r3, r7, fp
 8013a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a58:	9b02      	ldr	r3, [sp, #8]
 8013a5a:	f003 0301 	and.w	r3, r3, #1
 8013a5e:	46a8      	mov	r8, r5
 8013a60:	9308      	str	r3, [sp, #32]
 8013a62:	4605      	mov	r5, r0
 8013a64:	9b05      	ldr	r3, [sp, #20]
 8013a66:	9801      	ldr	r0, [sp, #4]
 8013a68:	4621      	mov	r1, r4
 8013a6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8013a6e:	f7ff fb04 	bl	801307a <quorem>
 8013a72:	4641      	mov	r1, r8
 8013a74:	9002      	str	r0, [sp, #8]
 8013a76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013a7a:	9801      	ldr	r0, [sp, #4]
 8013a7c:	f000 fba2 	bl	80141c4 <__mcmp>
 8013a80:	462a      	mov	r2, r5
 8013a82:	9006      	str	r0, [sp, #24]
 8013a84:	4621      	mov	r1, r4
 8013a86:	4648      	mov	r0, r9
 8013a88:	f000 fbb8 	bl	80141fc <__mdiff>
 8013a8c:	68c2      	ldr	r2, [r0, #12]
 8013a8e:	4606      	mov	r6, r0
 8013a90:	b9fa      	cbnz	r2, 8013ad2 <_dtoa_r+0x942>
 8013a92:	4601      	mov	r1, r0
 8013a94:	9801      	ldr	r0, [sp, #4]
 8013a96:	f000 fb95 	bl	80141c4 <__mcmp>
 8013a9a:	4602      	mov	r2, r0
 8013a9c:	4631      	mov	r1, r6
 8013a9e:	4648      	mov	r0, r9
 8013aa0:	920a      	str	r2, [sp, #40]	@ 0x28
 8013aa2:	f000 f955 	bl	8013d50 <_Bfree>
 8013aa6:	9b07      	ldr	r3, [sp, #28]
 8013aa8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013aaa:	9e05      	ldr	r6, [sp, #20]
 8013aac:	ea43 0102 	orr.w	r1, r3, r2
 8013ab0:	9b08      	ldr	r3, [sp, #32]
 8013ab2:	4319      	orrs	r1, r3
 8013ab4:	d10f      	bne.n	8013ad6 <_dtoa_r+0x946>
 8013ab6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013aba:	d028      	beq.n	8013b0e <_dtoa_r+0x97e>
 8013abc:	9b06      	ldr	r3, [sp, #24]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	dd02      	ble.n	8013ac8 <_dtoa_r+0x938>
 8013ac2:	9b02      	ldr	r3, [sp, #8]
 8013ac4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013ac8:	f88b a000 	strb.w	sl, [fp]
 8013acc:	e639      	b.n	8013742 <_dtoa_r+0x5b2>
 8013ace:	4628      	mov	r0, r5
 8013ad0:	e7bd      	b.n	8013a4e <_dtoa_r+0x8be>
 8013ad2:	2201      	movs	r2, #1
 8013ad4:	e7e2      	b.n	8013a9c <_dtoa_r+0x90c>
 8013ad6:	9b06      	ldr	r3, [sp, #24]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	db04      	blt.n	8013ae6 <_dtoa_r+0x956>
 8013adc:	9907      	ldr	r1, [sp, #28]
 8013ade:	430b      	orrs	r3, r1
 8013ae0:	9908      	ldr	r1, [sp, #32]
 8013ae2:	430b      	orrs	r3, r1
 8013ae4:	d120      	bne.n	8013b28 <_dtoa_r+0x998>
 8013ae6:	2a00      	cmp	r2, #0
 8013ae8:	ddee      	ble.n	8013ac8 <_dtoa_r+0x938>
 8013aea:	9901      	ldr	r1, [sp, #4]
 8013aec:	2201      	movs	r2, #1
 8013aee:	4648      	mov	r0, r9
 8013af0:	f000 fafc 	bl	80140ec <__lshift>
 8013af4:	4621      	mov	r1, r4
 8013af6:	9001      	str	r0, [sp, #4]
 8013af8:	f000 fb64 	bl	80141c4 <__mcmp>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	dc03      	bgt.n	8013b08 <_dtoa_r+0x978>
 8013b00:	d1e2      	bne.n	8013ac8 <_dtoa_r+0x938>
 8013b02:	f01a 0f01 	tst.w	sl, #1
 8013b06:	d0df      	beq.n	8013ac8 <_dtoa_r+0x938>
 8013b08:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013b0c:	d1d9      	bne.n	8013ac2 <_dtoa_r+0x932>
 8013b0e:	2339      	movs	r3, #57	@ 0x39
 8013b10:	f88b 3000 	strb.w	r3, [fp]
 8013b14:	4633      	mov	r3, r6
 8013b16:	461e      	mov	r6, r3
 8013b18:	3b01      	subs	r3, #1
 8013b1a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013b1e:	2a39      	cmp	r2, #57	@ 0x39
 8013b20:	d053      	beq.n	8013bca <_dtoa_r+0xa3a>
 8013b22:	3201      	adds	r2, #1
 8013b24:	701a      	strb	r2, [r3, #0]
 8013b26:	e60c      	b.n	8013742 <_dtoa_r+0x5b2>
 8013b28:	2a00      	cmp	r2, #0
 8013b2a:	dd07      	ble.n	8013b3c <_dtoa_r+0x9ac>
 8013b2c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013b30:	d0ed      	beq.n	8013b0e <_dtoa_r+0x97e>
 8013b32:	f10a 0301 	add.w	r3, sl, #1
 8013b36:	f88b 3000 	strb.w	r3, [fp]
 8013b3a:	e602      	b.n	8013742 <_dtoa_r+0x5b2>
 8013b3c:	9b05      	ldr	r3, [sp, #20]
 8013b3e:	9a05      	ldr	r2, [sp, #20]
 8013b40:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b46:	4293      	cmp	r3, r2
 8013b48:	d029      	beq.n	8013b9e <_dtoa_r+0xa0e>
 8013b4a:	9901      	ldr	r1, [sp, #4]
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	220a      	movs	r2, #10
 8013b50:	4648      	mov	r0, r9
 8013b52:	f000 f91f 	bl	8013d94 <__multadd>
 8013b56:	45a8      	cmp	r8, r5
 8013b58:	9001      	str	r0, [sp, #4]
 8013b5a:	f04f 0300 	mov.w	r3, #0
 8013b5e:	f04f 020a 	mov.w	r2, #10
 8013b62:	4641      	mov	r1, r8
 8013b64:	4648      	mov	r0, r9
 8013b66:	d107      	bne.n	8013b78 <_dtoa_r+0x9e8>
 8013b68:	f000 f914 	bl	8013d94 <__multadd>
 8013b6c:	4680      	mov	r8, r0
 8013b6e:	4605      	mov	r5, r0
 8013b70:	9b05      	ldr	r3, [sp, #20]
 8013b72:	3301      	adds	r3, #1
 8013b74:	9305      	str	r3, [sp, #20]
 8013b76:	e775      	b.n	8013a64 <_dtoa_r+0x8d4>
 8013b78:	f000 f90c 	bl	8013d94 <__multadd>
 8013b7c:	4629      	mov	r1, r5
 8013b7e:	4680      	mov	r8, r0
 8013b80:	2300      	movs	r3, #0
 8013b82:	220a      	movs	r2, #10
 8013b84:	4648      	mov	r0, r9
 8013b86:	f000 f905 	bl	8013d94 <__multadd>
 8013b8a:	4605      	mov	r5, r0
 8013b8c:	e7f0      	b.n	8013b70 <_dtoa_r+0x9e0>
 8013b8e:	f1bb 0f00 	cmp.w	fp, #0
 8013b92:	bfcc      	ite	gt
 8013b94:	465e      	movgt	r6, fp
 8013b96:	2601      	movle	r6, #1
 8013b98:	443e      	add	r6, r7
 8013b9a:	f04f 0800 	mov.w	r8, #0
 8013b9e:	9901      	ldr	r1, [sp, #4]
 8013ba0:	2201      	movs	r2, #1
 8013ba2:	4648      	mov	r0, r9
 8013ba4:	f000 faa2 	bl	80140ec <__lshift>
 8013ba8:	4621      	mov	r1, r4
 8013baa:	9001      	str	r0, [sp, #4]
 8013bac:	f000 fb0a 	bl	80141c4 <__mcmp>
 8013bb0:	2800      	cmp	r0, #0
 8013bb2:	dcaf      	bgt.n	8013b14 <_dtoa_r+0x984>
 8013bb4:	d102      	bne.n	8013bbc <_dtoa_r+0xa2c>
 8013bb6:	f01a 0f01 	tst.w	sl, #1
 8013bba:	d1ab      	bne.n	8013b14 <_dtoa_r+0x984>
 8013bbc:	4633      	mov	r3, r6
 8013bbe:	461e      	mov	r6, r3
 8013bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013bc4:	2a30      	cmp	r2, #48	@ 0x30
 8013bc6:	d0fa      	beq.n	8013bbe <_dtoa_r+0xa2e>
 8013bc8:	e5bb      	b.n	8013742 <_dtoa_r+0x5b2>
 8013bca:	429f      	cmp	r7, r3
 8013bcc:	d1a3      	bne.n	8013b16 <_dtoa_r+0x986>
 8013bce:	9b04      	ldr	r3, [sp, #16]
 8013bd0:	3301      	adds	r3, #1
 8013bd2:	9304      	str	r3, [sp, #16]
 8013bd4:	2331      	movs	r3, #49	@ 0x31
 8013bd6:	703b      	strb	r3, [r7, #0]
 8013bd8:	e5b3      	b.n	8013742 <_dtoa_r+0x5b2>
 8013bda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013bdc:	4f16      	ldr	r7, [pc, #88]	@ (8013c38 <_dtoa_r+0xaa8>)
 8013bde:	b11b      	cbz	r3, 8013be8 <_dtoa_r+0xa58>
 8013be0:	f107 0308 	add.w	r3, r7, #8
 8013be4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013be6:	6013      	str	r3, [r2, #0]
 8013be8:	4638      	mov	r0, r7
 8013bea:	b011      	add	sp, #68	@ 0x44
 8013bec:	ecbd 8b02 	vpop	{d8}
 8013bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bf4:	9b07      	ldr	r3, [sp, #28]
 8013bf6:	2b01      	cmp	r3, #1
 8013bf8:	f77f ae36 	ble.w	8013868 <_dtoa_r+0x6d8>
 8013bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013bfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013c00:	2001      	movs	r0, #1
 8013c02:	e656      	b.n	80138b2 <_dtoa_r+0x722>
 8013c04:	f1bb 0f00 	cmp.w	fp, #0
 8013c08:	f77f aed7 	ble.w	80139ba <_dtoa_r+0x82a>
 8013c0c:	463e      	mov	r6, r7
 8013c0e:	9801      	ldr	r0, [sp, #4]
 8013c10:	4621      	mov	r1, r4
 8013c12:	f7ff fa32 	bl	801307a <quorem>
 8013c16:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013c1a:	f806 ab01 	strb.w	sl, [r6], #1
 8013c1e:	1bf2      	subs	r2, r6, r7
 8013c20:	4593      	cmp	fp, r2
 8013c22:	ddb4      	ble.n	8013b8e <_dtoa_r+0x9fe>
 8013c24:	9901      	ldr	r1, [sp, #4]
 8013c26:	2300      	movs	r3, #0
 8013c28:	220a      	movs	r2, #10
 8013c2a:	4648      	mov	r0, r9
 8013c2c:	f000 f8b2 	bl	8013d94 <__multadd>
 8013c30:	9001      	str	r0, [sp, #4]
 8013c32:	e7ec      	b.n	8013c0e <_dtoa_r+0xa7e>
 8013c34:	0801606c 	.word	0x0801606c
 8013c38:	08015ff0 	.word	0x08015ff0

08013c3c <_free_r>:
 8013c3c:	b538      	push	{r3, r4, r5, lr}
 8013c3e:	4605      	mov	r5, r0
 8013c40:	2900      	cmp	r1, #0
 8013c42:	d041      	beq.n	8013cc8 <_free_r+0x8c>
 8013c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c48:	1f0c      	subs	r4, r1, #4
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	bfb8      	it	lt
 8013c4e:	18e4      	addlt	r4, r4, r3
 8013c50:	f7fe fc1a 	bl	8012488 <__malloc_lock>
 8013c54:	4a1d      	ldr	r2, [pc, #116]	@ (8013ccc <_free_r+0x90>)
 8013c56:	6813      	ldr	r3, [r2, #0]
 8013c58:	b933      	cbnz	r3, 8013c68 <_free_r+0x2c>
 8013c5a:	6063      	str	r3, [r4, #4]
 8013c5c:	6014      	str	r4, [r2, #0]
 8013c5e:	4628      	mov	r0, r5
 8013c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c64:	f7fe bc16 	b.w	8012494 <__malloc_unlock>
 8013c68:	42a3      	cmp	r3, r4
 8013c6a:	d908      	bls.n	8013c7e <_free_r+0x42>
 8013c6c:	6820      	ldr	r0, [r4, #0]
 8013c6e:	1821      	adds	r1, r4, r0
 8013c70:	428b      	cmp	r3, r1
 8013c72:	bf01      	itttt	eq
 8013c74:	6819      	ldreq	r1, [r3, #0]
 8013c76:	685b      	ldreq	r3, [r3, #4]
 8013c78:	1809      	addeq	r1, r1, r0
 8013c7a:	6021      	streq	r1, [r4, #0]
 8013c7c:	e7ed      	b.n	8013c5a <_free_r+0x1e>
 8013c7e:	461a      	mov	r2, r3
 8013c80:	685b      	ldr	r3, [r3, #4]
 8013c82:	b10b      	cbz	r3, 8013c88 <_free_r+0x4c>
 8013c84:	42a3      	cmp	r3, r4
 8013c86:	d9fa      	bls.n	8013c7e <_free_r+0x42>
 8013c88:	6811      	ldr	r1, [r2, #0]
 8013c8a:	1850      	adds	r0, r2, r1
 8013c8c:	42a0      	cmp	r0, r4
 8013c8e:	d10b      	bne.n	8013ca8 <_free_r+0x6c>
 8013c90:	6820      	ldr	r0, [r4, #0]
 8013c92:	4401      	add	r1, r0
 8013c94:	1850      	adds	r0, r2, r1
 8013c96:	4283      	cmp	r3, r0
 8013c98:	6011      	str	r1, [r2, #0]
 8013c9a:	d1e0      	bne.n	8013c5e <_free_r+0x22>
 8013c9c:	6818      	ldr	r0, [r3, #0]
 8013c9e:	685b      	ldr	r3, [r3, #4]
 8013ca0:	6053      	str	r3, [r2, #4]
 8013ca2:	4408      	add	r0, r1
 8013ca4:	6010      	str	r0, [r2, #0]
 8013ca6:	e7da      	b.n	8013c5e <_free_r+0x22>
 8013ca8:	d902      	bls.n	8013cb0 <_free_r+0x74>
 8013caa:	230c      	movs	r3, #12
 8013cac:	602b      	str	r3, [r5, #0]
 8013cae:	e7d6      	b.n	8013c5e <_free_r+0x22>
 8013cb0:	6820      	ldr	r0, [r4, #0]
 8013cb2:	1821      	adds	r1, r4, r0
 8013cb4:	428b      	cmp	r3, r1
 8013cb6:	bf04      	itt	eq
 8013cb8:	6819      	ldreq	r1, [r3, #0]
 8013cba:	685b      	ldreq	r3, [r3, #4]
 8013cbc:	6063      	str	r3, [r4, #4]
 8013cbe:	bf04      	itt	eq
 8013cc0:	1809      	addeq	r1, r1, r0
 8013cc2:	6021      	streq	r1, [r4, #0]
 8013cc4:	6054      	str	r4, [r2, #4]
 8013cc6:	e7ca      	b.n	8013c5e <_free_r+0x22>
 8013cc8:	bd38      	pop	{r3, r4, r5, pc}
 8013cca:	bf00      	nop
 8013ccc:	24002234 	.word	0x24002234

08013cd0 <_Balloc>:
 8013cd0:	b570      	push	{r4, r5, r6, lr}
 8013cd2:	69c6      	ldr	r6, [r0, #28]
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	460d      	mov	r5, r1
 8013cd8:	b976      	cbnz	r6, 8013cf8 <_Balloc+0x28>
 8013cda:	2010      	movs	r0, #16
 8013cdc:	f7fe fb2a 	bl	8012334 <malloc>
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	61e0      	str	r0, [r4, #28]
 8013ce4:	b920      	cbnz	r0, 8013cf0 <_Balloc+0x20>
 8013ce6:	4b18      	ldr	r3, [pc, #96]	@ (8013d48 <_Balloc+0x78>)
 8013ce8:	4818      	ldr	r0, [pc, #96]	@ (8013d4c <_Balloc+0x7c>)
 8013cea:	216b      	movs	r1, #107	@ 0x6b
 8013cec:	f000 fd9e 	bl	801482c <__assert_func>
 8013cf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013cf4:	6006      	str	r6, [r0, #0]
 8013cf6:	60c6      	str	r6, [r0, #12]
 8013cf8:	69e6      	ldr	r6, [r4, #28]
 8013cfa:	68f3      	ldr	r3, [r6, #12]
 8013cfc:	b183      	cbz	r3, 8013d20 <_Balloc+0x50>
 8013cfe:	69e3      	ldr	r3, [r4, #28]
 8013d00:	68db      	ldr	r3, [r3, #12]
 8013d02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d06:	b9b8      	cbnz	r0, 8013d38 <_Balloc+0x68>
 8013d08:	2101      	movs	r1, #1
 8013d0a:	fa01 f605 	lsl.w	r6, r1, r5
 8013d0e:	1d72      	adds	r2, r6, #5
 8013d10:	0092      	lsls	r2, r2, #2
 8013d12:	4620      	mov	r0, r4
 8013d14:	f000 fda8 	bl	8014868 <_calloc_r>
 8013d18:	b160      	cbz	r0, 8013d34 <_Balloc+0x64>
 8013d1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013d1e:	e00e      	b.n	8013d3e <_Balloc+0x6e>
 8013d20:	2221      	movs	r2, #33	@ 0x21
 8013d22:	2104      	movs	r1, #4
 8013d24:	4620      	mov	r0, r4
 8013d26:	f000 fd9f 	bl	8014868 <_calloc_r>
 8013d2a:	69e3      	ldr	r3, [r4, #28]
 8013d2c:	60f0      	str	r0, [r6, #12]
 8013d2e:	68db      	ldr	r3, [r3, #12]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d1e4      	bne.n	8013cfe <_Balloc+0x2e>
 8013d34:	2000      	movs	r0, #0
 8013d36:	bd70      	pop	{r4, r5, r6, pc}
 8013d38:	6802      	ldr	r2, [r0, #0]
 8013d3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d3e:	2300      	movs	r3, #0
 8013d40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d44:	e7f7      	b.n	8013d36 <_Balloc+0x66>
 8013d46:	bf00      	nop
 8013d48:	08015ffd 	.word	0x08015ffd
 8013d4c:	0801607d 	.word	0x0801607d

08013d50 <_Bfree>:
 8013d50:	b570      	push	{r4, r5, r6, lr}
 8013d52:	69c6      	ldr	r6, [r0, #28]
 8013d54:	4605      	mov	r5, r0
 8013d56:	460c      	mov	r4, r1
 8013d58:	b976      	cbnz	r6, 8013d78 <_Bfree+0x28>
 8013d5a:	2010      	movs	r0, #16
 8013d5c:	f7fe faea 	bl	8012334 <malloc>
 8013d60:	4602      	mov	r2, r0
 8013d62:	61e8      	str	r0, [r5, #28]
 8013d64:	b920      	cbnz	r0, 8013d70 <_Bfree+0x20>
 8013d66:	4b09      	ldr	r3, [pc, #36]	@ (8013d8c <_Bfree+0x3c>)
 8013d68:	4809      	ldr	r0, [pc, #36]	@ (8013d90 <_Bfree+0x40>)
 8013d6a:	218f      	movs	r1, #143	@ 0x8f
 8013d6c:	f000 fd5e 	bl	801482c <__assert_func>
 8013d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d74:	6006      	str	r6, [r0, #0]
 8013d76:	60c6      	str	r6, [r0, #12]
 8013d78:	b13c      	cbz	r4, 8013d8a <_Bfree+0x3a>
 8013d7a:	69eb      	ldr	r3, [r5, #28]
 8013d7c:	6862      	ldr	r2, [r4, #4]
 8013d7e:	68db      	ldr	r3, [r3, #12]
 8013d80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013d84:	6021      	str	r1, [r4, #0]
 8013d86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013d8a:	bd70      	pop	{r4, r5, r6, pc}
 8013d8c:	08015ffd 	.word	0x08015ffd
 8013d90:	0801607d 	.word	0x0801607d

08013d94 <__multadd>:
 8013d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d98:	690d      	ldr	r5, [r1, #16]
 8013d9a:	4607      	mov	r7, r0
 8013d9c:	460c      	mov	r4, r1
 8013d9e:	461e      	mov	r6, r3
 8013da0:	f101 0c14 	add.w	ip, r1, #20
 8013da4:	2000      	movs	r0, #0
 8013da6:	f8dc 3000 	ldr.w	r3, [ip]
 8013daa:	b299      	uxth	r1, r3
 8013dac:	fb02 6101 	mla	r1, r2, r1, r6
 8013db0:	0c1e      	lsrs	r6, r3, #16
 8013db2:	0c0b      	lsrs	r3, r1, #16
 8013db4:	fb02 3306 	mla	r3, r2, r6, r3
 8013db8:	b289      	uxth	r1, r1
 8013dba:	3001      	adds	r0, #1
 8013dbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013dc0:	4285      	cmp	r5, r0
 8013dc2:	f84c 1b04 	str.w	r1, [ip], #4
 8013dc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013dca:	dcec      	bgt.n	8013da6 <__multadd+0x12>
 8013dcc:	b30e      	cbz	r6, 8013e12 <__multadd+0x7e>
 8013dce:	68a3      	ldr	r3, [r4, #8]
 8013dd0:	42ab      	cmp	r3, r5
 8013dd2:	dc19      	bgt.n	8013e08 <__multadd+0x74>
 8013dd4:	6861      	ldr	r1, [r4, #4]
 8013dd6:	4638      	mov	r0, r7
 8013dd8:	3101      	adds	r1, #1
 8013dda:	f7ff ff79 	bl	8013cd0 <_Balloc>
 8013dde:	4680      	mov	r8, r0
 8013de0:	b928      	cbnz	r0, 8013dee <__multadd+0x5a>
 8013de2:	4602      	mov	r2, r0
 8013de4:	4b0c      	ldr	r3, [pc, #48]	@ (8013e18 <__multadd+0x84>)
 8013de6:	480d      	ldr	r0, [pc, #52]	@ (8013e1c <__multadd+0x88>)
 8013de8:	21ba      	movs	r1, #186	@ 0xba
 8013dea:	f000 fd1f 	bl	801482c <__assert_func>
 8013dee:	6922      	ldr	r2, [r4, #16]
 8013df0:	3202      	adds	r2, #2
 8013df2:	f104 010c 	add.w	r1, r4, #12
 8013df6:	0092      	lsls	r2, r2, #2
 8013df8:	300c      	adds	r0, #12
 8013dfa:	f000 fd09 	bl	8014810 <memcpy>
 8013dfe:	4621      	mov	r1, r4
 8013e00:	4638      	mov	r0, r7
 8013e02:	f7ff ffa5 	bl	8013d50 <_Bfree>
 8013e06:	4644      	mov	r4, r8
 8013e08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e0c:	3501      	adds	r5, #1
 8013e0e:	615e      	str	r6, [r3, #20]
 8013e10:	6125      	str	r5, [r4, #16]
 8013e12:	4620      	mov	r0, r4
 8013e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e18:	0801606c 	.word	0x0801606c
 8013e1c:	0801607d 	.word	0x0801607d

08013e20 <__hi0bits>:
 8013e20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013e24:	4603      	mov	r3, r0
 8013e26:	bf36      	itet	cc
 8013e28:	0403      	lslcc	r3, r0, #16
 8013e2a:	2000      	movcs	r0, #0
 8013e2c:	2010      	movcc	r0, #16
 8013e2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013e32:	bf3c      	itt	cc
 8013e34:	021b      	lslcc	r3, r3, #8
 8013e36:	3008      	addcc	r0, #8
 8013e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013e3c:	bf3c      	itt	cc
 8013e3e:	011b      	lslcc	r3, r3, #4
 8013e40:	3004      	addcc	r0, #4
 8013e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013e46:	bf3c      	itt	cc
 8013e48:	009b      	lslcc	r3, r3, #2
 8013e4a:	3002      	addcc	r0, #2
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	db05      	blt.n	8013e5c <__hi0bits+0x3c>
 8013e50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013e54:	f100 0001 	add.w	r0, r0, #1
 8013e58:	bf08      	it	eq
 8013e5a:	2020      	moveq	r0, #32
 8013e5c:	4770      	bx	lr

08013e5e <__lo0bits>:
 8013e5e:	6803      	ldr	r3, [r0, #0]
 8013e60:	4602      	mov	r2, r0
 8013e62:	f013 0007 	ands.w	r0, r3, #7
 8013e66:	d00b      	beq.n	8013e80 <__lo0bits+0x22>
 8013e68:	07d9      	lsls	r1, r3, #31
 8013e6a:	d421      	bmi.n	8013eb0 <__lo0bits+0x52>
 8013e6c:	0798      	lsls	r0, r3, #30
 8013e6e:	bf49      	itett	mi
 8013e70:	085b      	lsrmi	r3, r3, #1
 8013e72:	089b      	lsrpl	r3, r3, #2
 8013e74:	2001      	movmi	r0, #1
 8013e76:	6013      	strmi	r3, [r2, #0]
 8013e78:	bf5c      	itt	pl
 8013e7a:	6013      	strpl	r3, [r2, #0]
 8013e7c:	2002      	movpl	r0, #2
 8013e7e:	4770      	bx	lr
 8013e80:	b299      	uxth	r1, r3
 8013e82:	b909      	cbnz	r1, 8013e88 <__lo0bits+0x2a>
 8013e84:	0c1b      	lsrs	r3, r3, #16
 8013e86:	2010      	movs	r0, #16
 8013e88:	b2d9      	uxtb	r1, r3
 8013e8a:	b909      	cbnz	r1, 8013e90 <__lo0bits+0x32>
 8013e8c:	3008      	adds	r0, #8
 8013e8e:	0a1b      	lsrs	r3, r3, #8
 8013e90:	0719      	lsls	r1, r3, #28
 8013e92:	bf04      	itt	eq
 8013e94:	091b      	lsreq	r3, r3, #4
 8013e96:	3004      	addeq	r0, #4
 8013e98:	0799      	lsls	r1, r3, #30
 8013e9a:	bf04      	itt	eq
 8013e9c:	089b      	lsreq	r3, r3, #2
 8013e9e:	3002      	addeq	r0, #2
 8013ea0:	07d9      	lsls	r1, r3, #31
 8013ea2:	d403      	bmi.n	8013eac <__lo0bits+0x4e>
 8013ea4:	085b      	lsrs	r3, r3, #1
 8013ea6:	f100 0001 	add.w	r0, r0, #1
 8013eaa:	d003      	beq.n	8013eb4 <__lo0bits+0x56>
 8013eac:	6013      	str	r3, [r2, #0]
 8013eae:	4770      	bx	lr
 8013eb0:	2000      	movs	r0, #0
 8013eb2:	4770      	bx	lr
 8013eb4:	2020      	movs	r0, #32
 8013eb6:	4770      	bx	lr

08013eb8 <__i2b>:
 8013eb8:	b510      	push	{r4, lr}
 8013eba:	460c      	mov	r4, r1
 8013ebc:	2101      	movs	r1, #1
 8013ebe:	f7ff ff07 	bl	8013cd0 <_Balloc>
 8013ec2:	4602      	mov	r2, r0
 8013ec4:	b928      	cbnz	r0, 8013ed2 <__i2b+0x1a>
 8013ec6:	4b05      	ldr	r3, [pc, #20]	@ (8013edc <__i2b+0x24>)
 8013ec8:	4805      	ldr	r0, [pc, #20]	@ (8013ee0 <__i2b+0x28>)
 8013eca:	f240 1145 	movw	r1, #325	@ 0x145
 8013ece:	f000 fcad 	bl	801482c <__assert_func>
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	6144      	str	r4, [r0, #20]
 8013ed6:	6103      	str	r3, [r0, #16]
 8013ed8:	bd10      	pop	{r4, pc}
 8013eda:	bf00      	nop
 8013edc:	0801606c 	.word	0x0801606c
 8013ee0:	0801607d 	.word	0x0801607d

08013ee4 <__multiply>:
 8013ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee8:	4614      	mov	r4, r2
 8013eea:	690a      	ldr	r2, [r1, #16]
 8013eec:	6923      	ldr	r3, [r4, #16]
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	bfa8      	it	ge
 8013ef2:	4623      	movge	r3, r4
 8013ef4:	460f      	mov	r7, r1
 8013ef6:	bfa4      	itt	ge
 8013ef8:	460c      	movge	r4, r1
 8013efa:	461f      	movge	r7, r3
 8013efc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013f00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013f04:	68a3      	ldr	r3, [r4, #8]
 8013f06:	6861      	ldr	r1, [r4, #4]
 8013f08:	eb0a 0609 	add.w	r6, sl, r9
 8013f0c:	42b3      	cmp	r3, r6
 8013f0e:	b085      	sub	sp, #20
 8013f10:	bfb8      	it	lt
 8013f12:	3101      	addlt	r1, #1
 8013f14:	f7ff fedc 	bl	8013cd0 <_Balloc>
 8013f18:	b930      	cbnz	r0, 8013f28 <__multiply+0x44>
 8013f1a:	4602      	mov	r2, r0
 8013f1c:	4b44      	ldr	r3, [pc, #272]	@ (8014030 <__multiply+0x14c>)
 8013f1e:	4845      	ldr	r0, [pc, #276]	@ (8014034 <__multiply+0x150>)
 8013f20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013f24:	f000 fc82 	bl	801482c <__assert_func>
 8013f28:	f100 0514 	add.w	r5, r0, #20
 8013f2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013f30:	462b      	mov	r3, r5
 8013f32:	2200      	movs	r2, #0
 8013f34:	4543      	cmp	r3, r8
 8013f36:	d321      	bcc.n	8013f7c <__multiply+0x98>
 8013f38:	f107 0114 	add.w	r1, r7, #20
 8013f3c:	f104 0214 	add.w	r2, r4, #20
 8013f40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013f44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013f48:	9302      	str	r3, [sp, #8]
 8013f4a:	1b13      	subs	r3, r2, r4
 8013f4c:	3b15      	subs	r3, #21
 8013f4e:	f023 0303 	bic.w	r3, r3, #3
 8013f52:	3304      	adds	r3, #4
 8013f54:	f104 0715 	add.w	r7, r4, #21
 8013f58:	42ba      	cmp	r2, r7
 8013f5a:	bf38      	it	cc
 8013f5c:	2304      	movcc	r3, #4
 8013f5e:	9301      	str	r3, [sp, #4]
 8013f60:	9b02      	ldr	r3, [sp, #8]
 8013f62:	9103      	str	r1, [sp, #12]
 8013f64:	428b      	cmp	r3, r1
 8013f66:	d80c      	bhi.n	8013f82 <__multiply+0x9e>
 8013f68:	2e00      	cmp	r6, #0
 8013f6a:	dd03      	ble.n	8013f74 <__multiply+0x90>
 8013f6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d05b      	beq.n	801402c <__multiply+0x148>
 8013f74:	6106      	str	r6, [r0, #16]
 8013f76:	b005      	add	sp, #20
 8013f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f7c:	f843 2b04 	str.w	r2, [r3], #4
 8013f80:	e7d8      	b.n	8013f34 <__multiply+0x50>
 8013f82:	f8b1 a000 	ldrh.w	sl, [r1]
 8013f86:	f1ba 0f00 	cmp.w	sl, #0
 8013f8a:	d024      	beq.n	8013fd6 <__multiply+0xf2>
 8013f8c:	f104 0e14 	add.w	lr, r4, #20
 8013f90:	46a9      	mov	r9, r5
 8013f92:	f04f 0c00 	mov.w	ip, #0
 8013f96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013f9a:	f8d9 3000 	ldr.w	r3, [r9]
 8013f9e:	fa1f fb87 	uxth.w	fp, r7
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	fb0a 330b 	mla	r3, sl, fp, r3
 8013fa8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013fac:	f8d9 7000 	ldr.w	r7, [r9]
 8013fb0:	4463      	add	r3, ip
 8013fb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013fb6:	fb0a c70b 	mla	r7, sl, fp, ip
 8013fba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013fc4:	4572      	cmp	r2, lr
 8013fc6:	f849 3b04 	str.w	r3, [r9], #4
 8013fca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013fce:	d8e2      	bhi.n	8013f96 <__multiply+0xb2>
 8013fd0:	9b01      	ldr	r3, [sp, #4]
 8013fd2:	f845 c003 	str.w	ip, [r5, r3]
 8013fd6:	9b03      	ldr	r3, [sp, #12]
 8013fd8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013fdc:	3104      	adds	r1, #4
 8013fde:	f1b9 0f00 	cmp.w	r9, #0
 8013fe2:	d021      	beq.n	8014028 <__multiply+0x144>
 8013fe4:	682b      	ldr	r3, [r5, #0]
 8013fe6:	f104 0c14 	add.w	ip, r4, #20
 8013fea:	46ae      	mov	lr, r5
 8013fec:	f04f 0a00 	mov.w	sl, #0
 8013ff0:	f8bc b000 	ldrh.w	fp, [ip]
 8013ff4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013ff8:	fb09 770b 	mla	r7, r9, fp, r7
 8013ffc:	4457      	add	r7, sl
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014004:	f84e 3b04 	str.w	r3, [lr], #4
 8014008:	f85c 3b04 	ldr.w	r3, [ip], #4
 801400c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014010:	f8be 3000 	ldrh.w	r3, [lr]
 8014014:	fb09 330a 	mla	r3, r9, sl, r3
 8014018:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801401c:	4562      	cmp	r2, ip
 801401e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014022:	d8e5      	bhi.n	8013ff0 <__multiply+0x10c>
 8014024:	9f01      	ldr	r7, [sp, #4]
 8014026:	51eb      	str	r3, [r5, r7]
 8014028:	3504      	adds	r5, #4
 801402a:	e799      	b.n	8013f60 <__multiply+0x7c>
 801402c:	3e01      	subs	r6, #1
 801402e:	e79b      	b.n	8013f68 <__multiply+0x84>
 8014030:	0801606c 	.word	0x0801606c
 8014034:	0801607d 	.word	0x0801607d

08014038 <__pow5mult>:
 8014038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801403c:	4615      	mov	r5, r2
 801403e:	f012 0203 	ands.w	r2, r2, #3
 8014042:	4607      	mov	r7, r0
 8014044:	460e      	mov	r6, r1
 8014046:	d007      	beq.n	8014058 <__pow5mult+0x20>
 8014048:	4c25      	ldr	r4, [pc, #148]	@ (80140e0 <__pow5mult+0xa8>)
 801404a:	3a01      	subs	r2, #1
 801404c:	2300      	movs	r3, #0
 801404e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014052:	f7ff fe9f 	bl	8013d94 <__multadd>
 8014056:	4606      	mov	r6, r0
 8014058:	10ad      	asrs	r5, r5, #2
 801405a:	d03d      	beq.n	80140d8 <__pow5mult+0xa0>
 801405c:	69fc      	ldr	r4, [r7, #28]
 801405e:	b97c      	cbnz	r4, 8014080 <__pow5mult+0x48>
 8014060:	2010      	movs	r0, #16
 8014062:	f7fe f967 	bl	8012334 <malloc>
 8014066:	4602      	mov	r2, r0
 8014068:	61f8      	str	r0, [r7, #28]
 801406a:	b928      	cbnz	r0, 8014078 <__pow5mult+0x40>
 801406c:	4b1d      	ldr	r3, [pc, #116]	@ (80140e4 <__pow5mult+0xac>)
 801406e:	481e      	ldr	r0, [pc, #120]	@ (80140e8 <__pow5mult+0xb0>)
 8014070:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014074:	f000 fbda 	bl	801482c <__assert_func>
 8014078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801407c:	6004      	str	r4, [r0, #0]
 801407e:	60c4      	str	r4, [r0, #12]
 8014080:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014088:	b94c      	cbnz	r4, 801409e <__pow5mult+0x66>
 801408a:	f240 2171 	movw	r1, #625	@ 0x271
 801408e:	4638      	mov	r0, r7
 8014090:	f7ff ff12 	bl	8013eb8 <__i2b>
 8014094:	2300      	movs	r3, #0
 8014096:	f8c8 0008 	str.w	r0, [r8, #8]
 801409a:	4604      	mov	r4, r0
 801409c:	6003      	str	r3, [r0, #0]
 801409e:	f04f 0900 	mov.w	r9, #0
 80140a2:	07eb      	lsls	r3, r5, #31
 80140a4:	d50a      	bpl.n	80140bc <__pow5mult+0x84>
 80140a6:	4631      	mov	r1, r6
 80140a8:	4622      	mov	r2, r4
 80140aa:	4638      	mov	r0, r7
 80140ac:	f7ff ff1a 	bl	8013ee4 <__multiply>
 80140b0:	4631      	mov	r1, r6
 80140b2:	4680      	mov	r8, r0
 80140b4:	4638      	mov	r0, r7
 80140b6:	f7ff fe4b 	bl	8013d50 <_Bfree>
 80140ba:	4646      	mov	r6, r8
 80140bc:	106d      	asrs	r5, r5, #1
 80140be:	d00b      	beq.n	80140d8 <__pow5mult+0xa0>
 80140c0:	6820      	ldr	r0, [r4, #0]
 80140c2:	b938      	cbnz	r0, 80140d4 <__pow5mult+0x9c>
 80140c4:	4622      	mov	r2, r4
 80140c6:	4621      	mov	r1, r4
 80140c8:	4638      	mov	r0, r7
 80140ca:	f7ff ff0b 	bl	8013ee4 <__multiply>
 80140ce:	6020      	str	r0, [r4, #0]
 80140d0:	f8c0 9000 	str.w	r9, [r0]
 80140d4:	4604      	mov	r4, r0
 80140d6:	e7e4      	b.n	80140a2 <__pow5mult+0x6a>
 80140d8:	4630      	mov	r0, r6
 80140da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140de:	bf00      	nop
 80140e0:	080160d8 	.word	0x080160d8
 80140e4:	08015ffd 	.word	0x08015ffd
 80140e8:	0801607d 	.word	0x0801607d

080140ec <__lshift>:
 80140ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140f0:	460c      	mov	r4, r1
 80140f2:	6849      	ldr	r1, [r1, #4]
 80140f4:	6923      	ldr	r3, [r4, #16]
 80140f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80140fa:	68a3      	ldr	r3, [r4, #8]
 80140fc:	4607      	mov	r7, r0
 80140fe:	4691      	mov	r9, r2
 8014100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014104:	f108 0601 	add.w	r6, r8, #1
 8014108:	42b3      	cmp	r3, r6
 801410a:	db0b      	blt.n	8014124 <__lshift+0x38>
 801410c:	4638      	mov	r0, r7
 801410e:	f7ff fddf 	bl	8013cd0 <_Balloc>
 8014112:	4605      	mov	r5, r0
 8014114:	b948      	cbnz	r0, 801412a <__lshift+0x3e>
 8014116:	4602      	mov	r2, r0
 8014118:	4b28      	ldr	r3, [pc, #160]	@ (80141bc <__lshift+0xd0>)
 801411a:	4829      	ldr	r0, [pc, #164]	@ (80141c0 <__lshift+0xd4>)
 801411c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014120:	f000 fb84 	bl	801482c <__assert_func>
 8014124:	3101      	adds	r1, #1
 8014126:	005b      	lsls	r3, r3, #1
 8014128:	e7ee      	b.n	8014108 <__lshift+0x1c>
 801412a:	2300      	movs	r3, #0
 801412c:	f100 0114 	add.w	r1, r0, #20
 8014130:	f100 0210 	add.w	r2, r0, #16
 8014134:	4618      	mov	r0, r3
 8014136:	4553      	cmp	r3, sl
 8014138:	db33      	blt.n	80141a2 <__lshift+0xb6>
 801413a:	6920      	ldr	r0, [r4, #16]
 801413c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014140:	f104 0314 	add.w	r3, r4, #20
 8014144:	f019 091f 	ands.w	r9, r9, #31
 8014148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801414c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014150:	d02b      	beq.n	80141aa <__lshift+0xbe>
 8014152:	f1c9 0e20 	rsb	lr, r9, #32
 8014156:	468a      	mov	sl, r1
 8014158:	2200      	movs	r2, #0
 801415a:	6818      	ldr	r0, [r3, #0]
 801415c:	fa00 f009 	lsl.w	r0, r0, r9
 8014160:	4310      	orrs	r0, r2
 8014162:	f84a 0b04 	str.w	r0, [sl], #4
 8014166:	f853 2b04 	ldr.w	r2, [r3], #4
 801416a:	459c      	cmp	ip, r3
 801416c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014170:	d8f3      	bhi.n	801415a <__lshift+0x6e>
 8014172:	ebac 0304 	sub.w	r3, ip, r4
 8014176:	3b15      	subs	r3, #21
 8014178:	f023 0303 	bic.w	r3, r3, #3
 801417c:	3304      	adds	r3, #4
 801417e:	f104 0015 	add.w	r0, r4, #21
 8014182:	4584      	cmp	ip, r0
 8014184:	bf38      	it	cc
 8014186:	2304      	movcc	r3, #4
 8014188:	50ca      	str	r2, [r1, r3]
 801418a:	b10a      	cbz	r2, 8014190 <__lshift+0xa4>
 801418c:	f108 0602 	add.w	r6, r8, #2
 8014190:	3e01      	subs	r6, #1
 8014192:	4638      	mov	r0, r7
 8014194:	612e      	str	r6, [r5, #16]
 8014196:	4621      	mov	r1, r4
 8014198:	f7ff fdda 	bl	8013d50 <_Bfree>
 801419c:	4628      	mov	r0, r5
 801419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80141a6:	3301      	adds	r3, #1
 80141a8:	e7c5      	b.n	8014136 <__lshift+0x4a>
 80141aa:	3904      	subs	r1, #4
 80141ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80141b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80141b4:	459c      	cmp	ip, r3
 80141b6:	d8f9      	bhi.n	80141ac <__lshift+0xc0>
 80141b8:	e7ea      	b.n	8014190 <__lshift+0xa4>
 80141ba:	bf00      	nop
 80141bc:	0801606c 	.word	0x0801606c
 80141c0:	0801607d 	.word	0x0801607d

080141c4 <__mcmp>:
 80141c4:	690a      	ldr	r2, [r1, #16]
 80141c6:	4603      	mov	r3, r0
 80141c8:	6900      	ldr	r0, [r0, #16]
 80141ca:	1a80      	subs	r0, r0, r2
 80141cc:	b530      	push	{r4, r5, lr}
 80141ce:	d10e      	bne.n	80141ee <__mcmp+0x2a>
 80141d0:	3314      	adds	r3, #20
 80141d2:	3114      	adds	r1, #20
 80141d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80141d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80141dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80141e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80141e4:	4295      	cmp	r5, r2
 80141e6:	d003      	beq.n	80141f0 <__mcmp+0x2c>
 80141e8:	d205      	bcs.n	80141f6 <__mcmp+0x32>
 80141ea:	f04f 30ff 	mov.w	r0, #4294967295
 80141ee:	bd30      	pop	{r4, r5, pc}
 80141f0:	42a3      	cmp	r3, r4
 80141f2:	d3f3      	bcc.n	80141dc <__mcmp+0x18>
 80141f4:	e7fb      	b.n	80141ee <__mcmp+0x2a>
 80141f6:	2001      	movs	r0, #1
 80141f8:	e7f9      	b.n	80141ee <__mcmp+0x2a>
	...

080141fc <__mdiff>:
 80141fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014200:	4689      	mov	r9, r1
 8014202:	4606      	mov	r6, r0
 8014204:	4611      	mov	r1, r2
 8014206:	4648      	mov	r0, r9
 8014208:	4614      	mov	r4, r2
 801420a:	f7ff ffdb 	bl	80141c4 <__mcmp>
 801420e:	1e05      	subs	r5, r0, #0
 8014210:	d112      	bne.n	8014238 <__mdiff+0x3c>
 8014212:	4629      	mov	r1, r5
 8014214:	4630      	mov	r0, r6
 8014216:	f7ff fd5b 	bl	8013cd0 <_Balloc>
 801421a:	4602      	mov	r2, r0
 801421c:	b928      	cbnz	r0, 801422a <__mdiff+0x2e>
 801421e:	4b3f      	ldr	r3, [pc, #252]	@ (801431c <__mdiff+0x120>)
 8014220:	f240 2137 	movw	r1, #567	@ 0x237
 8014224:	483e      	ldr	r0, [pc, #248]	@ (8014320 <__mdiff+0x124>)
 8014226:	f000 fb01 	bl	801482c <__assert_func>
 801422a:	2301      	movs	r3, #1
 801422c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014230:	4610      	mov	r0, r2
 8014232:	b003      	add	sp, #12
 8014234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014238:	bfbc      	itt	lt
 801423a:	464b      	movlt	r3, r9
 801423c:	46a1      	movlt	r9, r4
 801423e:	4630      	mov	r0, r6
 8014240:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014244:	bfba      	itte	lt
 8014246:	461c      	movlt	r4, r3
 8014248:	2501      	movlt	r5, #1
 801424a:	2500      	movge	r5, #0
 801424c:	f7ff fd40 	bl	8013cd0 <_Balloc>
 8014250:	4602      	mov	r2, r0
 8014252:	b918      	cbnz	r0, 801425c <__mdiff+0x60>
 8014254:	4b31      	ldr	r3, [pc, #196]	@ (801431c <__mdiff+0x120>)
 8014256:	f240 2145 	movw	r1, #581	@ 0x245
 801425a:	e7e3      	b.n	8014224 <__mdiff+0x28>
 801425c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014260:	6926      	ldr	r6, [r4, #16]
 8014262:	60c5      	str	r5, [r0, #12]
 8014264:	f109 0310 	add.w	r3, r9, #16
 8014268:	f109 0514 	add.w	r5, r9, #20
 801426c:	f104 0e14 	add.w	lr, r4, #20
 8014270:	f100 0b14 	add.w	fp, r0, #20
 8014274:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014278:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801427c:	9301      	str	r3, [sp, #4]
 801427e:	46d9      	mov	r9, fp
 8014280:	f04f 0c00 	mov.w	ip, #0
 8014284:	9b01      	ldr	r3, [sp, #4]
 8014286:	f85e 0b04 	ldr.w	r0, [lr], #4
 801428a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801428e:	9301      	str	r3, [sp, #4]
 8014290:	fa1f f38a 	uxth.w	r3, sl
 8014294:	4619      	mov	r1, r3
 8014296:	b283      	uxth	r3, r0
 8014298:	1acb      	subs	r3, r1, r3
 801429a:	0c00      	lsrs	r0, r0, #16
 801429c:	4463      	add	r3, ip
 801429e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80142a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80142ac:	4576      	cmp	r6, lr
 80142ae:	f849 3b04 	str.w	r3, [r9], #4
 80142b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80142b6:	d8e5      	bhi.n	8014284 <__mdiff+0x88>
 80142b8:	1b33      	subs	r3, r6, r4
 80142ba:	3b15      	subs	r3, #21
 80142bc:	f023 0303 	bic.w	r3, r3, #3
 80142c0:	3415      	adds	r4, #21
 80142c2:	3304      	adds	r3, #4
 80142c4:	42a6      	cmp	r6, r4
 80142c6:	bf38      	it	cc
 80142c8:	2304      	movcc	r3, #4
 80142ca:	441d      	add	r5, r3
 80142cc:	445b      	add	r3, fp
 80142ce:	461e      	mov	r6, r3
 80142d0:	462c      	mov	r4, r5
 80142d2:	4544      	cmp	r4, r8
 80142d4:	d30e      	bcc.n	80142f4 <__mdiff+0xf8>
 80142d6:	f108 0103 	add.w	r1, r8, #3
 80142da:	1b49      	subs	r1, r1, r5
 80142dc:	f021 0103 	bic.w	r1, r1, #3
 80142e0:	3d03      	subs	r5, #3
 80142e2:	45a8      	cmp	r8, r5
 80142e4:	bf38      	it	cc
 80142e6:	2100      	movcc	r1, #0
 80142e8:	440b      	add	r3, r1
 80142ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80142ee:	b191      	cbz	r1, 8014316 <__mdiff+0x11a>
 80142f0:	6117      	str	r7, [r2, #16]
 80142f2:	e79d      	b.n	8014230 <__mdiff+0x34>
 80142f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80142f8:	46e6      	mov	lr, ip
 80142fa:	0c08      	lsrs	r0, r1, #16
 80142fc:	fa1c fc81 	uxtah	ip, ip, r1
 8014300:	4471      	add	r1, lr
 8014302:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014306:	b289      	uxth	r1, r1
 8014308:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801430c:	f846 1b04 	str.w	r1, [r6], #4
 8014310:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014314:	e7dd      	b.n	80142d2 <__mdiff+0xd6>
 8014316:	3f01      	subs	r7, #1
 8014318:	e7e7      	b.n	80142ea <__mdiff+0xee>
 801431a:	bf00      	nop
 801431c:	0801606c 	.word	0x0801606c
 8014320:	0801607d 	.word	0x0801607d

08014324 <__d2b>:
 8014324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014328:	460f      	mov	r7, r1
 801432a:	2101      	movs	r1, #1
 801432c:	ec59 8b10 	vmov	r8, r9, d0
 8014330:	4616      	mov	r6, r2
 8014332:	f7ff fccd 	bl	8013cd0 <_Balloc>
 8014336:	4604      	mov	r4, r0
 8014338:	b930      	cbnz	r0, 8014348 <__d2b+0x24>
 801433a:	4602      	mov	r2, r0
 801433c:	4b23      	ldr	r3, [pc, #140]	@ (80143cc <__d2b+0xa8>)
 801433e:	4824      	ldr	r0, [pc, #144]	@ (80143d0 <__d2b+0xac>)
 8014340:	f240 310f 	movw	r1, #783	@ 0x30f
 8014344:	f000 fa72 	bl	801482c <__assert_func>
 8014348:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801434c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014350:	b10d      	cbz	r5, 8014356 <__d2b+0x32>
 8014352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014356:	9301      	str	r3, [sp, #4]
 8014358:	f1b8 0300 	subs.w	r3, r8, #0
 801435c:	d023      	beq.n	80143a6 <__d2b+0x82>
 801435e:	4668      	mov	r0, sp
 8014360:	9300      	str	r3, [sp, #0]
 8014362:	f7ff fd7c 	bl	8013e5e <__lo0bits>
 8014366:	e9dd 1200 	ldrd	r1, r2, [sp]
 801436a:	b1d0      	cbz	r0, 80143a2 <__d2b+0x7e>
 801436c:	f1c0 0320 	rsb	r3, r0, #32
 8014370:	fa02 f303 	lsl.w	r3, r2, r3
 8014374:	430b      	orrs	r3, r1
 8014376:	40c2      	lsrs	r2, r0
 8014378:	6163      	str	r3, [r4, #20]
 801437a:	9201      	str	r2, [sp, #4]
 801437c:	9b01      	ldr	r3, [sp, #4]
 801437e:	61a3      	str	r3, [r4, #24]
 8014380:	2b00      	cmp	r3, #0
 8014382:	bf0c      	ite	eq
 8014384:	2201      	moveq	r2, #1
 8014386:	2202      	movne	r2, #2
 8014388:	6122      	str	r2, [r4, #16]
 801438a:	b1a5      	cbz	r5, 80143b6 <__d2b+0x92>
 801438c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014390:	4405      	add	r5, r0
 8014392:	603d      	str	r5, [r7, #0]
 8014394:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014398:	6030      	str	r0, [r6, #0]
 801439a:	4620      	mov	r0, r4
 801439c:	b003      	add	sp, #12
 801439e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143a2:	6161      	str	r1, [r4, #20]
 80143a4:	e7ea      	b.n	801437c <__d2b+0x58>
 80143a6:	a801      	add	r0, sp, #4
 80143a8:	f7ff fd59 	bl	8013e5e <__lo0bits>
 80143ac:	9b01      	ldr	r3, [sp, #4]
 80143ae:	6163      	str	r3, [r4, #20]
 80143b0:	3020      	adds	r0, #32
 80143b2:	2201      	movs	r2, #1
 80143b4:	e7e8      	b.n	8014388 <__d2b+0x64>
 80143b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80143ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80143be:	6038      	str	r0, [r7, #0]
 80143c0:	6918      	ldr	r0, [r3, #16]
 80143c2:	f7ff fd2d 	bl	8013e20 <__hi0bits>
 80143c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80143ca:	e7e5      	b.n	8014398 <__d2b+0x74>
 80143cc:	0801606c 	.word	0x0801606c
 80143d0:	0801607d 	.word	0x0801607d

080143d4 <__ssputs_r>:
 80143d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143d8:	688e      	ldr	r6, [r1, #8]
 80143da:	461f      	mov	r7, r3
 80143dc:	42be      	cmp	r6, r7
 80143de:	680b      	ldr	r3, [r1, #0]
 80143e0:	4682      	mov	sl, r0
 80143e2:	460c      	mov	r4, r1
 80143e4:	4690      	mov	r8, r2
 80143e6:	d82d      	bhi.n	8014444 <__ssputs_r+0x70>
 80143e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80143ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80143f0:	d026      	beq.n	8014440 <__ssputs_r+0x6c>
 80143f2:	6965      	ldr	r5, [r4, #20]
 80143f4:	6909      	ldr	r1, [r1, #16]
 80143f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143fa:	eba3 0901 	sub.w	r9, r3, r1
 80143fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014402:	1c7b      	adds	r3, r7, #1
 8014404:	444b      	add	r3, r9
 8014406:	106d      	asrs	r5, r5, #1
 8014408:	429d      	cmp	r5, r3
 801440a:	bf38      	it	cc
 801440c:	461d      	movcc	r5, r3
 801440e:	0553      	lsls	r3, r2, #21
 8014410:	d527      	bpl.n	8014462 <__ssputs_r+0x8e>
 8014412:	4629      	mov	r1, r5
 8014414:	f7fd ffb8 	bl	8012388 <_malloc_r>
 8014418:	4606      	mov	r6, r0
 801441a:	b360      	cbz	r0, 8014476 <__ssputs_r+0xa2>
 801441c:	6921      	ldr	r1, [r4, #16]
 801441e:	464a      	mov	r2, r9
 8014420:	f000 f9f6 	bl	8014810 <memcpy>
 8014424:	89a3      	ldrh	r3, [r4, #12]
 8014426:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801442a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801442e:	81a3      	strh	r3, [r4, #12]
 8014430:	6126      	str	r6, [r4, #16]
 8014432:	6165      	str	r5, [r4, #20]
 8014434:	444e      	add	r6, r9
 8014436:	eba5 0509 	sub.w	r5, r5, r9
 801443a:	6026      	str	r6, [r4, #0]
 801443c:	60a5      	str	r5, [r4, #8]
 801443e:	463e      	mov	r6, r7
 8014440:	42be      	cmp	r6, r7
 8014442:	d900      	bls.n	8014446 <__ssputs_r+0x72>
 8014444:	463e      	mov	r6, r7
 8014446:	6820      	ldr	r0, [r4, #0]
 8014448:	4632      	mov	r2, r6
 801444a:	4641      	mov	r1, r8
 801444c:	f000 f9c6 	bl	80147dc <memmove>
 8014450:	68a3      	ldr	r3, [r4, #8]
 8014452:	1b9b      	subs	r3, r3, r6
 8014454:	60a3      	str	r3, [r4, #8]
 8014456:	6823      	ldr	r3, [r4, #0]
 8014458:	4433      	add	r3, r6
 801445a:	6023      	str	r3, [r4, #0]
 801445c:	2000      	movs	r0, #0
 801445e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014462:	462a      	mov	r2, r5
 8014464:	f000 fa26 	bl	80148b4 <_realloc_r>
 8014468:	4606      	mov	r6, r0
 801446a:	2800      	cmp	r0, #0
 801446c:	d1e0      	bne.n	8014430 <__ssputs_r+0x5c>
 801446e:	6921      	ldr	r1, [r4, #16]
 8014470:	4650      	mov	r0, sl
 8014472:	f7ff fbe3 	bl	8013c3c <_free_r>
 8014476:	230c      	movs	r3, #12
 8014478:	f8ca 3000 	str.w	r3, [sl]
 801447c:	89a3      	ldrh	r3, [r4, #12]
 801447e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014482:	81a3      	strh	r3, [r4, #12]
 8014484:	f04f 30ff 	mov.w	r0, #4294967295
 8014488:	e7e9      	b.n	801445e <__ssputs_r+0x8a>
	...

0801448c <_svfiprintf_r>:
 801448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014490:	4698      	mov	r8, r3
 8014492:	898b      	ldrh	r3, [r1, #12]
 8014494:	061b      	lsls	r3, r3, #24
 8014496:	b09d      	sub	sp, #116	@ 0x74
 8014498:	4607      	mov	r7, r0
 801449a:	460d      	mov	r5, r1
 801449c:	4614      	mov	r4, r2
 801449e:	d510      	bpl.n	80144c2 <_svfiprintf_r+0x36>
 80144a0:	690b      	ldr	r3, [r1, #16]
 80144a2:	b973      	cbnz	r3, 80144c2 <_svfiprintf_r+0x36>
 80144a4:	2140      	movs	r1, #64	@ 0x40
 80144a6:	f7fd ff6f 	bl	8012388 <_malloc_r>
 80144aa:	6028      	str	r0, [r5, #0]
 80144ac:	6128      	str	r0, [r5, #16]
 80144ae:	b930      	cbnz	r0, 80144be <_svfiprintf_r+0x32>
 80144b0:	230c      	movs	r3, #12
 80144b2:	603b      	str	r3, [r7, #0]
 80144b4:	f04f 30ff 	mov.w	r0, #4294967295
 80144b8:	b01d      	add	sp, #116	@ 0x74
 80144ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144be:	2340      	movs	r3, #64	@ 0x40
 80144c0:	616b      	str	r3, [r5, #20]
 80144c2:	2300      	movs	r3, #0
 80144c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80144c6:	2320      	movs	r3, #32
 80144c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80144cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80144d0:	2330      	movs	r3, #48	@ 0x30
 80144d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014670 <_svfiprintf_r+0x1e4>
 80144d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80144da:	f04f 0901 	mov.w	r9, #1
 80144de:	4623      	mov	r3, r4
 80144e0:	469a      	mov	sl, r3
 80144e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144e6:	b10a      	cbz	r2, 80144ec <_svfiprintf_r+0x60>
 80144e8:	2a25      	cmp	r2, #37	@ 0x25
 80144ea:	d1f9      	bne.n	80144e0 <_svfiprintf_r+0x54>
 80144ec:	ebba 0b04 	subs.w	fp, sl, r4
 80144f0:	d00b      	beq.n	801450a <_svfiprintf_r+0x7e>
 80144f2:	465b      	mov	r3, fp
 80144f4:	4622      	mov	r2, r4
 80144f6:	4629      	mov	r1, r5
 80144f8:	4638      	mov	r0, r7
 80144fa:	f7ff ff6b 	bl	80143d4 <__ssputs_r>
 80144fe:	3001      	adds	r0, #1
 8014500:	f000 80a7 	beq.w	8014652 <_svfiprintf_r+0x1c6>
 8014504:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014506:	445a      	add	r2, fp
 8014508:	9209      	str	r2, [sp, #36]	@ 0x24
 801450a:	f89a 3000 	ldrb.w	r3, [sl]
 801450e:	2b00      	cmp	r3, #0
 8014510:	f000 809f 	beq.w	8014652 <_svfiprintf_r+0x1c6>
 8014514:	2300      	movs	r3, #0
 8014516:	f04f 32ff 	mov.w	r2, #4294967295
 801451a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801451e:	f10a 0a01 	add.w	sl, sl, #1
 8014522:	9304      	str	r3, [sp, #16]
 8014524:	9307      	str	r3, [sp, #28]
 8014526:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801452a:	931a      	str	r3, [sp, #104]	@ 0x68
 801452c:	4654      	mov	r4, sl
 801452e:	2205      	movs	r2, #5
 8014530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014534:	484e      	ldr	r0, [pc, #312]	@ (8014670 <_svfiprintf_r+0x1e4>)
 8014536:	f7eb fed3 	bl	80002e0 <memchr>
 801453a:	9a04      	ldr	r2, [sp, #16]
 801453c:	b9d8      	cbnz	r0, 8014576 <_svfiprintf_r+0xea>
 801453e:	06d0      	lsls	r0, r2, #27
 8014540:	bf44      	itt	mi
 8014542:	2320      	movmi	r3, #32
 8014544:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014548:	0711      	lsls	r1, r2, #28
 801454a:	bf44      	itt	mi
 801454c:	232b      	movmi	r3, #43	@ 0x2b
 801454e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014552:	f89a 3000 	ldrb.w	r3, [sl]
 8014556:	2b2a      	cmp	r3, #42	@ 0x2a
 8014558:	d015      	beq.n	8014586 <_svfiprintf_r+0xfa>
 801455a:	9a07      	ldr	r2, [sp, #28]
 801455c:	4654      	mov	r4, sl
 801455e:	2000      	movs	r0, #0
 8014560:	f04f 0c0a 	mov.w	ip, #10
 8014564:	4621      	mov	r1, r4
 8014566:	f811 3b01 	ldrb.w	r3, [r1], #1
 801456a:	3b30      	subs	r3, #48	@ 0x30
 801456c:	2b09      	cmp	r3, #9
 801456e:	d94b      	bls.n	8014608 <_svfiprintf_r+0x17c>
 8014570:	b1b0      	cbz	r0, 80145a0 <_svfiprintf_r+0x114>
 8014572:	9207      	str	r2, [sp, #28]
 8014574:	e014      	b.n	80145a0 <_svfiprintf_r+0x114>
 8014576:	eba0 0308 	sub.w	r3, r0, r8
 801457a:	fa09 f303 	lsl.w	r3, r9, r3
 801457e:	4313      	orrs	r3, r2
 8014580:	9304      	str	r3, [sp, #16]
 8014582:	46a2      	mov	sl, r4
 8014584:	e7d2      	b.n	801452c <_svfiprintf_r+0xa0>
 8014586:	9b03      	ldr	r3, [sp, #12]
 8014588:	1d19      	adds	r1, r3, #4
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	9103      	str	r1, [sp, #12]
 801458e:	2b00      	cmp	r3, #0
 8014590:	bfbb      	ittet	lt
 8014592:	425b      	neglt	r3, r3
 8014594:	f042 0202 	orrlt.w	r2, r2, #2
 8014598:	9307      	strge	r3, [sp, #28]
 801459a:	9307      	strlt	r3, [sp, #28]
 801459c:	bfb8      	it	lt
 801459e:	9204      	strlt	r2, [sp, #16]
 80145a0:	7823      	ldrb	r3, [r4, #0]
 80145a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80145a4:	d10a      	bne.n	80145bc <_svfiprintf_r+0x130>
 80145a6:	7863      	ldrb	r3, [r4, #1]
 80145a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80145aa:	d132      	bne.n	8014612 <_svfiprintf_r+0x186>
 80145ac:	9b03      	ldr	r3, [sp, #12]
 80145ae:	1d1a      	adds	r2, r3, #4
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	9203      	str	r2, [sp, #12]
 80145b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80145b8:	3402      	adds	r4, #2
 80145ba:	9305      	str	r3, [sp, #20]
 80145bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014680 <_svfiprintf_r+0x1f4>
 80145c0:	7821      	ldrb	r1, [r4, #0]
 80145c2:	2203      	movs	r2, #3
 80145c4:	4650      	mov	r0, sl
 80145c6:	f7eb fe8b 	bl	80002e0 <memchr>
 80145ca:	b138      	cbz	r0, 80145dc <_svfiprintf_r+0x150>
 80145cc:	9b04      	ldr	r3, [sp, #16]
 80145ce:	eba0 000a 	sub.w	r0, r0, sl
 80145d2:	2240      	movs	r2, #64	@ 0x40
 80145d4:	4082      	lsls	r2, r0
 80145d6:	4313      	orrs	r3, r2
 80145d8:	3401      	adds	r4, #1
 80145da:	9304      	str	r3, [sp, #16]
 80145dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145e0:	4824      	ldr	r0, [pc, #144]	@ (8014674 <_svfiprintf_r+0x1e8>)
 80145e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80145e6:	2206      	movs	r2, #6
 80145e8:	f7eb fe7a 	bl	80002e0 <memchr>
 80145ec:	2800      	cmp	r0, #0
 80145ee:	d036      	beq.n	801465e <_svfiprintf_r+0x1d2>
 80145f0:	4b21      	ldr	r3, [pc, #132]	@ (8014678 <_svfiprintf_r+0x1ec>)
 80145f2:	bb1b      	cbnz	r3, 801463c <_svfiprintf_r+0x1b0>
 80145f4:	9b03      	ldr	r3, [sp, #12]
 80145f6:	3307      	adds	r3, #7
 80145f8:	f023 0307 	bic.w	r3, r3, #7
 80145fc:	3308      	adds	r3, #8
 80145fe:	9303      	str	r3, [sp, #12]
 8014600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014602:	4433      	add	r3, r6
 8014604:	9309      	str	r3, [sp, #36]	@ 0x24
 8014606:	e76a      	b.n	80144de <_svfiprintf_r+0x52>
 8014608:	fb0c 3202 	mla	r2, ip, r2, r3
 801460c:	460c      	mov	r4, r1
 801460e:	2001      	movs	r0, #1
 8014610:	e7a8      	b.n	8014564 <_svfiprintf_r+0xd8>
 8014612:	2300      	movs	r3, #0
 8014614:	3401      	adds	r4, #1
 8014616:	9305      	str	r3, [sp, #20]
 8014618:	4619      	mov	r1, r3
 801461a:	f04f 0c0a 	mov.w	ip, #10
 801461e:	4620      	mov	r0, r4
 8014620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014624:	3a30      	subs	r2, #48	@ 0x30
 8014626:	2a09      	cmp	r2, #9
 8014628:	d903      	bls.n	8014632 <_svfiprintf_r+0x1a6>
 801462a:	2b00      	cmp	r3, #0
 801462c:	d0c6      	beq.n	80145bc <_svfiprintf_r+0x130>
 801462e:	9105      	str	r1, [sp, #20]
 8014630:	e7c4      	b.n	80145bc <_svfiprintf_r+0x130>
 8014632:	fb0c 2101 	mla	r1, ip, r1, r2
 8014636:	4604      	mov	r4, r0
 8014638:	2301      	movs	r3, #1
 801463a:	e7f0      	b.n	801461e <_svfiprintf_r+0x192>
 801463c:	ab03      	add	r3, sp, #12
 801463e:	9300      	str	r3, [sp, #0]
 8014640:	462a      	mov	r2, r5
 8014642:	4b0e      	ldr	r3, [pc, #56]	@ (801467c <_svfiprintf_r+0x1f0>)
 8014644:	a904      	add	r1, sp, #16
 8014646:	4638      	mov	r0, r7
 8014648:	f7fd ffba 	bl	80125c0 <_printf_float>
 801464c:	1c42      	adds	r2, r0, #1
 801464e:	4606      	mov	r6, r0
 8014650:	d1d6      	bne.n	8014600 <_svfiprintf_r+0x174>
 8014652:	89ab      	ldrh	r3, [r5, #12]
 8014654:	065b      	lsls	r3, r3, #25
 8014656:	f53f af2d 	bmi.w	80144b4 <_svfiprintf_r+0x28>
 801465a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801465c:	e72c      	b.n	80144b8 <_svfiprintf_r+0x2c>
 801465e:	ab03      	add	r3, sp, #12
 8014660:	9300      	str	r3, [sp, #0]
 8014662:	462a      	mov	r2, r5
 8014664:	4b05      	ldr	r3, [pc, #20]	@ (801467c <_svfiprintf_r+0x1f0>)
 8014666:	a904      	add	r1, sp, #16
 8014668:	4638      	mov	r0, r7
 801466a:	f7fe fa31 	bl	8012ad0 <_printf_i>
 801466e:	e7ed      	b.n	801464c <_svfiprintf_r+0x1c0>
 8014670:	080161d8 	.word	0x080161d8
 8014674:	080161e2 	.word	0x080161e2
 8014678:	080125c1 	.word	0x080125c1
 801467c:	080143d5 	.word	0x080143d5
 8014680:	080161de 	.word	0x080161de

08014684 <__sflush_r>:
 8014684:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801468c:	0716      	lsls	r6, r2, #28
 801468e:	4605      	mov	r5, r0
 8014690:	460c      	mov	r4, r1
 8014692:	d454      	bmi.n	801473e <__sflush_r+0xba>
 8014694:	684b      	ldr	r3, [r1, #4]
 8014696:	2b00      	cmp	r3, #0
 8014698:	dc02      	bgt.n	80146a0 <__sflush_r+0x1c>
 801469a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801469c:	2b00      	cmp	r3, #0
 801469e:	dd48      	ble.n	8014732 <__sflush_r+0xae>
 80146a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80146a2:	2e00      	cmp	r6, #0
 80146a4:	d045      	beq.n	8014732 <__sflush_r+0xae>
 80146a6:	2300      	movs	r3, #0
 80146a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80146ac:	682f      	ldr	r7, [r5, #0]
 80146ae:	6a21      	ldr	r1, [r4, #32]
 80146b0:	602b      	str	r3, [r5, #0]
 80146b2:	d030      	beq.n	8014716 <__sflush_r+0x92>
 80146b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80146b6:	89a3      	ldrh	r3, [r4, #12]
 80146b8:	0759      	lsls	r1, r3, #29
 80146ba:	d505      	bpl.n	80146c8 <__sflush_r+0x44>
 80146bc:	6863      	ldr	r3, [r4, #4]
 80146be:	1ad2      	subs	r2, r2, r3
 80146c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80146c2:	b10b      	cbz	r3, 80146c8 <__sflush_r+0x44>
 80146c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80146c6:	1ad2      	subs	r2, r2, r3
 80146c8:	2300      	movs	r3, #0
 80146ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80146cc:	6a21      	ldr	r1, [r4, #32]
 80146ce:	4628      	mov	r0, r5
 80146d0:	47b0      	blx	r6
 80146d2:	1c43      	adds	r3, r0, #1
 80146d4:	89a3      	ldrh	r3, [r4, #12]
 80146d6:	d106      	bne.n	80146e6 <__sflush_r+0x62>
 80146d8:	6829      	ldr	r1, [r5, #0]
 80146da:	291d      	cmp	r1, #29
 80146dc:	d82b      	bhi.n	8014736 <__sflush_r+0xb2>
 80146de:	4a2a      	ldr	r2, [pc, #168]	@ (8014788 <__sflush_r+0x104>)
 80146e0:	410a      	asrs	r2, r1
 80146e2:	07d6      	lsls	r6, r2, #31
 80146e4:	d427      	bmi.n	8014736 <__sflush_r+0xb2>
 80146e6:	2200      	movs	r2, #0
 80146e8:	6062      	str	r2, [r4, #4]
 80146ea:	04d9      	lsls	r1, r3, #19
 80146ec:	6922      	ldr	r2, [r4, #16]
 80146ee:	6022      	str	r2, [r4, #0]
 80146f0:	d504      	bpl.n	80146fc <__sflush_r+0x78>
 80146f2:	1c42      	adds	r2, r0, #1
 80146f4:	d101      	bne.n	80146fa <__sflush_r+0x76>
 80146f6:	682b      	ldr	r3, [r5, #0]
 80146f8:	b903      	cbnz	r3, 80146fc <__sflush_r+0x78>
 80146fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80146fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146fe:	602f      	str	r7, [r5, #0]
 8014700:	b1b9      	cbz	r1, 8014732 <__sflush_r+0xae>
 8014702:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014706:	4299      	cmp	r1, r3
 8014708:	d002      	beq.n	8014710 <__sflush_r+0x8c>
 801470a:	4628      	mov	r0, r5
 801470c:	f7ff fa96 	bl	8013c3c <_free_r>
 8014710:	2300      	movs	r3, #0
 8014712:	6363      	str	r3, [r4, #52]	@ 0x34
 8014714:	e00d      	b.n	8014732 <__sflush_r+0xae>
 8014716:	2301      	movs	r3, #1
 8014718:	4628      	mov	r0, r5
 801471a:	47b0      	blx	r6
 801471c:	4602      	mov	r2, r0
 801471e:	1c50      	adds	r0, r2, #1
 8014720:	d1c9      	bne.n	80146b6 <__sflush_r+0x32>
 8014722:	682b      	ldr	r3, [r5, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d0c6      	beq.n	80146b6 <__sflush_r+0x32>
 8014728:	2b1d      	cmp	r3, #29
 801472a:	d001      	beq.n	8014730 <__sflush_r+0xac>
 801472c:	2b16      	cmp	r3, #22
 801472e:	d11e      	bne.n	801476e <__sflush_r+0xea>
 8014730:	602f      	str	r7, [r5, #0]
 8014732:	2000      	movs	r0, #0
 8014734:	e022      	b.n	801477c <__sflush_r+0xf8>
 8014736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801473a:	b21b      	sxth	r3, r3
 801473c:	e01b      	b.n	8014776 <__sflush_r+0xf2>
 801473e:	690f      	ldr	r7, [r1, #16]
 8014740:	2f00      	cmp	r7, #0
 8014742:	d0f6      	beq.n	8014732 <__sflush_r+0xae>
 8014744:	0793      	lsls	r3, r2, #30
 8014746:	680e      	ldr	r6, [r1, #0]
 8014748:	bf08      	it	eq
 801474a:	694b      	ldreq	r3, [r1, #20]
 801474c:	600f      	str	r7, [r1, #0]
 801474e:	bf18      	it	ne
 8014750:	2300      	movne	r3, #0
 8014752:	eba6 0807 	sub.w	r8, r6, r7
 8014756:	608b      	str	r3, [r1, #8]
 8014758:	f1b8 0f00 	cmp.w	r8, #0
 801475c:	dde9      	ble.n	8014732 <__sflush_r+0xae>
 801475e:	6a21      	ldr	r1, [r4, #32]
 8014760:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014762:	4643      	mov	r3, r8
 8014764:	463a      	mov	r2, r7
 8014766:	4628      	mov	r0, r5
 8014768:	47b0      	blx	r6
 801476a:	2800      	cmp	r0, #0
 801476c:	dc08      	bgt.n	8014780 <__sflush_r+0xfc>
 801476e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014776:	81a3      	strh	r3, [r4, #12]
 8014778:	f04f 30ff 	mov.w	r0, #4294967295
 801477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014780:	4407      	add	r7, r0
 8014782:	eba8 0800 	sub.w	r8, r8, r0
 8014786:	e7e7      	b.n	8014758 <__sflush_r+0xd4>
 8014788:	dfbffffe 	.word	0xdfbffffe

0801478c <_fflush_r>:
 801478c:	b538      	push	{r3, r4, r5, lr}
 801478e:	690b      	ldr	r3, [r1, #16]
 8014790:	4605      	mov	r5, r0
 8014792:	460c      	mov	r4, r1
 8014794:	b913      	cbnz	r3, 801479c <_fflush_r+0x10>
 8014796:	2500      	movs	r5, #0
 8014798:	4628      	mov	r0, r5
 801479a:	bd38      	pop	{r3, r4, r5, pc}
 801479c:	b118      	cbz	r0, 80147a6 <_fflush_r+0x1a>
 801479e:	6a03      	ldr	r3, [r0, #32]
 80147a0:	b90b      	cbnz	r3, 80147a6 <_fflush_r+0x1a>
 80147a2:	f7fe fb41 	bl	8012e28 <__sinit>
 80147a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d0f3      	beq.n	8014796 <_fflush_r+0xa>
 80147ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80147b0:	07d0      	lsls	r0, r2, #31
 80147b2:	d404      	bmi.n	80147be <_fflush_r+0x32>
 80147b4:	0599      	lsls	r1, r3, #22
 80147b6:	d402      	bmi.n	80147be <_fflush_r+0x32>
 80147b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147ba:	f7fe fc5c 	bl	8013076 <__retarget_lock_acquire_recursive>
 80147be:	4628      	mov	r0, r5
 80147c0:	4621      	mov	r1, r4
 80147c2:	f7ff ff5f 	bl	8014684 <__sflush_r>
 80147c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80147c8:	07da      	lsls	r2, r3, #31
 80147ca:	4605      	mov	r5, r0
 80147cc:	d4e4      	bmi.n	8014798 <_fflush_r+0xc>
 80147ce:	89a3      	ldrh	r3, [r4, #12]
 80147d0:	059b      	lsls	r3, r3, #22
 80147d2:	d4e1      	bmi.n	8014798 <_fflush_r+0xc>
 80147d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147d6:	f7fe fc4f 	bl	8013078 <__retarget_lock_release_recursive>
 80147da:	e7dd      	b.n	8014798 <_fflush_r+0xc>

080147dc <memmove>:
 80147dc:	4288      	cmp	r0, r1
 80147de:	b510      	push	{r4, lr}
 80147e0:	eb01 0402 	add.w	r4, r1, r2
 80147e4:	d902      	bls.n	80147ec <memmove+0x10>
 80147e6:	4284      	cmp	r4, r0
 80147e8:	4623      	mov	r3, r4
 80147ea:	d807      	bhi.n	80147fc <memmove+0x20>
 80147ec:	1e43      	subs	r3, r0, #1
 80147ee:	42a1      	cmp	r1, r4
 80147f0:	d008      	beq.n	8014804 <memmove+0x28>
 80147f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80147fa:	e7f8      	b.n	80147ee <memmove+0x12>
 80147fc:	4402      	add	r2, r0
 80147fe:	4601      	mov	r1, r0
 8014800:	428a      	cmp	r2, r1
 8014802:	d100      	bne.n	8014806 <memmove+0x2a>
 8014804:	bd10      	pop	{r4, pc}
 8014806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801480a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801480e:	e7f7      	b.n	8014800 <memmove+0x24>

08014810 <memcpy>:
 8014810:	440a      	add	r2, r1
 8014812:	4291      	cmp	r1, r2
 8014814:	f100 33ff 	add.w	r3, r0, #4294967295
 8014818:	d100      	bne.n	801481c <memcpy+0xc>
 801481a:	4770      	bx	lr
 801481c:	b510      	push	{r4, lr}
 801481e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014826:	4291      	cmp	r1, r2
 8014828:	d1f9      	bne.n	801481e <memcpy+0xe>
 801482a:	bd10      	pop	{r4, pc}

0801482c <__assert_func>:
 801482c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801482e:	4614      	mov	r4, r2
 8014830:	461a      	mov	r2, r3
 8014832:	4b09      	ldr	r3, [pc, #36]	@ (8014858 <__assert_func+0x2c>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	4605      	mov	r5, r0
 8014838:	68d8      	ldr	r0, [r3, #12]
 801483a:	b954      	cbnz	r4, 8014852 <__assert_func+0x26>
 801483c:	4b07      	ldr	r3, [pc, #28]	@ (801485c <__assert_func+0x30>)
 801483e:	461c      	mov	r4, r3
 8014840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014844:	9100      	str	r1, [sp, #0]
 8014846:	462b      	mov	r3, r5
 8014848:	4905      	ldr	r1, [pc, #20]	@ (8014860 <__assert_func+0x34>)
 801484a:	f000 f86f 	bl	801492c <fiprintf>
 801484e:	f000 f87f 	bl	8014950 <abort>
 8014852:	4b04      	ldr	r3, [pc, #16]	@ (8014864 <__assert_func+0x38>)
 8014854:	e7f4      	b.n	8014840 <__assert_func+0x14>
 8014856:	bf00      	nop
 8014858:	24000114 	.word	0x24000114
 801485c:	0801622e 	.word	0x0801622e
 8014860:	08016200 	.word	0x08016200
 8014864:	080161f3 	.word	0x080161f3

08014868 <_calloc_r>:
 8014868:	b570      	push	{r4, r5, r6, lr}
 801486a:	fba1 5402 	umull	r5, r4, r1, r2
 801486e:	b93c      	cbnz	r4, 8014880 <_calloc_r+0x18>
 8014870:	4629      	mov	r1, r5
 8014872:	f7fd fd89 	bl	8012388 <_malloc_r>
 8014876:	4606      	mov	r6, r0
 8014878:	b928      	cbnz	r0, 8014886 <_calloc_r+0x1e>
 801487a:	2600      	movs	r6, #0
 801487c:	4630      	mov	r0, r6
 801487e:	bd70      	pop	{r4, r5, r6, pc}
 8014880:	220c      	movs	r2, #12
 8014882:	6002      	str	r2, [r0, #0]
 8014884:	e7f9      	b.n	801487a <_calloc_r+0x12>
 8014886:	462a      	mov	r2, r5
 8014888:	4621      	mov	r1, r4
 801488a:	f7fe fb66 	bl	8012f5a <memset>
 801488e:	e7f5      	b.n	801487c <_calloc_r+0x14>

08014890 <__ascii_mbtowc>:
 8014890:	b082      	sub	sp, #8
 8014892:	b901      	cbnz	r1, 8014896 <__ascii_mbtowc+0x6>
 8014894:	a901      	add	r1, sp, #4
 8014896:	b142      	cbz	r2, 80148aa <__ascii_mbtowc+0x1a>
 8014898:	b14b      	cbz	r3, 80148ae <__ascii_mbtowc+0x1e>
 801489a:	7813      	ldrb	r3, [r2, #0]
 801489c:	600b      	str	r3, [r1, #0]
 801489e:	7812      	ldrb	r2, [r2, #0]
 80148a0:	1e10      	subs	r0, r2, #0
 80148a2:	bf18      	it	ne
 80148a4:	2001      	movne	r0, #1
 80148a6:	b002      	add	sp, #8
 80148a8:	4770      	bx	lr
 80148aa:	4610      	mov	r0, r2
 80148ac:	e7fb      	b.n	80148a6 <__ascii_mbtowc+0x16>
 80148ae:	f06f 0001 	mvn.w	r0, #1
 80148b2:	e7f8      	b.n	80148a6 <__ascii_mbtowc+0x16>

080148b4 <_realloc_r>:
 80148b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148b8:	4680      	mov	r8, r0
 80148ba:	4615      	mov	r5, r2
 80148bc:	460c      	mov	r4, r1
 80148be:	b921      	cbnz	r1, 80148ca <_realloc_r+0x16>
 80148c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148c4:	4611      	mov	r1, r2
 80148c6:	f7fd bd5f 	b.w	8012388 <_malloc_r>
 80148ca:	b92a      	cbnz	r2, 80148d8 <_realloc_r+0x24>
 80148cc:	f7ff f9b6 	bl	8013c3c <_free_r>
 80148d0:	2400      	movs	r4, #0
 80148d2:	4620      	mov	r0, r4
 80148d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148d8:	f000 f841 	bl	801495e <_malloc_usable_size_r>
 80148dc:	4285      	cmp	r5, r0
 80148de:	4606      	mov	r6, r0
 80148e0:	d802      	bhi.n	80148e8 <_realloc_r+0x34>
 80148e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80148e6:	d8f4      	bhi.n	80148d2 <_realloc_r+0x1e>
 80148e8:	4629      	mov	r1, r5
 80148ea:	4640      	mov	r0, r8
 80148ec:	f7fd fd4c 	bl	8012388 <_malloc_r>
 80148f0:	4607      	mov	r7, r0
 80148f2:	2800      	cmp	r0, #0
 80148f4:	d0ec      	beq.n	80148d0 <_realloc_r+0x1c>
 80148f6:	42b5      	cmp	r5, r6
 80148f8:	462a      	mov	r2, r5
 80148fa:	4621      	mov	r1, r4
 80148fc:	bf28      	it	cs
 80148fe:	4632      	movcs	r2, r6
 8014900:	f7ff ff86 	bl	8014810 <memcpy>
 8014904:	4621      	mov	r1, r4
 8014906:	4640      	mov	r0, r8
 8014908:	f7ff f998 	bl	8013c3c <_free_r>
 801490c:	463c      	mov	r4, r7
 801490e:	e7e0      	b.n	80148d2 <_realloc_r+0x1e>

08014910 <__ascii_wctomb>:
 8014910:	4603      	mov	r3, r0
 8014912:	4608      	mov	r0, r1
 8014914:	b141      	cbz	r1, 8014928 <__ascii_wctomb+0x18>
 8014916:	2aff      	cmp	r2, #255	@ 0xff
 8014918:	d904      	bls.n	8014924 <__ascii_wctomb+0x14>
 801491a:	228a      	movs	r2, #138	@ 0x8a
 801491c:	601a      	str	r2, [r3, #0]
 801491e:	f04f 30ff 	mov.w	r0, #4294967295
 8014922:	4770      	bx	lr
 8014924:	700a      	strb	r2, [r1, #0]
 8014926:	2001      	movs	r0, #1
 8014928:	4770      	bx	lr
	...

0801492c <fiprintf>:
 801492c:	b40e      	push	{r1, r2, r3}
 801492e:	b503      	push	{r0, r1, lr}
 8014930:	4601      	mov	r1, r0
 8014932:	ab03      	add	r3, sp, #12
 8014934:	4805      	ldr	r0, [pc, #20]	@ (801494c <fiprintf+0x20>)
 8014936:	f853 2b04 	ldr.w	r2, [r3], #4
 801493a:	6800      	ldr	r0, [r0, #0]
 801493c:	9301      	str	r3, [sp, #4]
 801493e:	f000 f83f 	bl	80149c0 <_vfiprintf_r>
 8014942:	b002      	add	sp, #8
 8014944:	f85d eb04 	ldr.w	lr, [sp], #4
 8014948:	b003      	add	sp, #12
 801494a:	4770      	bx	lr
 801494c:	24000114 	.word	0x24000114

08014950 <abort>:
 8014950:	b508      	push	{r3, lr}
 8014952:	2006      	movs	r0, #6
 8014954:	f000 fa08 	bl	8014d68 <raise>
 8014958:	2001      	movs	r0, #1
 801495a:	f7ec fde5 	bl	8001528 <_exit>

0801495e <_malloc_usable_size_r>:
 801495e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014962:	1f18      	subs	r0, r3, #4
 8014964:	2b00      	cmp	r3, #0
 8014966:	bfbc      	itt	lt
 8014968:	580b      	ldrlt	r3, [r1, r0]
 801496a:	18c0      	addlt	r0, r0, r3
 801496c:	4770      	bx	lr

0801496e <__sfputc_r>:
 801496e:	6893      	ldr	r3, [r2, #8]
 8014970:	3b01      	subs	r3, #1
 8014972:	2b00      	cmp	r3, #0
 8014974:	b410      	push	{r4}
 8014976:	6093      	str	r3, [r2, #8]
 8014978:	da08      	bge.n	801498c <__sfputc_r+0x1e>
 801497a:	6994      	ldr	r4, [r2, #24]
 801497c:	42a3      	cmp	r3, r4
 801497e:	db01      	blt.n	8014984 <__sfputc_r+0x16>
 8014980:	290a      	cmp	r1, #10
 8014982:	d103      	bne.n	801498c <__sfputc_r+0x1e>
 8014984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014988:	f000 b932 	b.w	8014bf0 <__swbuf_r>
 801498c:	6813      	ldr	r3, [r2, #0]
 801498e:	1c58      	adds	r0, r3, #1
 8014990:	6010      	str	r0, [r2, #0]
 8014992:	7019      	strb	r1, [r3, #0]
 8014994:	4608      	mov	r0, r1
 8014996:	f85d 4b04 	ldr.w	r4, [sp], #4
 801499a:	4770      	bx	lr

0801499c <__sfputs_r>:
 801499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801499e:	4606      	mov	r6, r0
 80149a0:	460f      	mov	r7, r1
 80149a2:	4614      	mov	r4, r2
 80149a4:	18d5      	adds	r5, r2, r3
 80149a6:	42ac      	cmp	r4, r5
 80149a8:	d101      	bne.n	80149ae <__sfputs_r+0x12>
 80149aa:	2000      	movs	r0, #0
 80149ac:	e007      	b.n	80149be <__sfputs_r+0x22>
 80149ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149b2:	463a      	mov	r2, r7
 80149b4:	4630      	mov	r0, r6
 80149b6:	f7ff ffda 	bl	801496e <__sfputc_r>
 80149ba:	1c43      	adds	r3, r0, #1
 80149bc:	d1f3      	bne.n	80149a6 <__sfputs_r+0xa>
 80149be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080149c0 <_vfiprintf_r>:
 80149c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149c4:	460d      	mov	r5, r1
 80149c6:	b09d      	sub	sp, #116	@ 0x74
 80149c8:	4614      	mov	r4, r2
 80149ca:	4698      	mov	r8, r3
 80149cc:	4606      	mov	r6, r0
 80149ce:	b118      	cbz	r0, 80149d8 <_vfiprintf_r+0x18>
 80149d0:	6a03      	ldr	r3, [r0, #32]
 80149d2:	b90b      	cbnz	r3, 80149d8 <_vfiprintf_r+0x18>
 80149d4:	f7fe fa28 	bl	8012e28 <__sinit>
 80149d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80149da:	07d9      	lsls	r1, r3, #31
 80149dc:	d405      	bmi.n	80149ea <_vfiprintf_r+0x2a>
 80149de:	89ab      	ldrh	r3, [r5, #12]
 80149e0:	059a      	lsls	r2, r3, #22
 80149e2:	d402      	bmi.n	80149ea <_vfiprintf_r+0x2a>
 80149e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80149e6:	f7fe fb46 	bl	8013076 <__retarget_lock_acquire_recursive>
 80149ea:	89ab      	ldrh	r3, [r5, #12]
 80149ec:	071b      	lsls	r3, r3, #28
 80149ee:	d501      	bpl.n	80149f4 <_vfiprintf_r+0x34>
 80149f0:	692b      	ldr	r3, [r5, #16]
 80149f2:	b99b      	cbnz	r3, 8014a1c <_vfiprintf_r+0x5c>
 80149f4:	4629      	mov	r1, r5
 80149f6:	4630      	mov	r0, r6
 80149f8:	f000 f938 	bl	8014c6c <__swsetup_r>
 80149fc:	b170      	cbz	r0, 8014a1c <_vfiprintf_r+0x5c>
 80149fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a00:	07dc      	lsls	r4, r3, #31
 8014a02:	d504      	bpl.n	8014a0e <_vfiprintf_r+0x4e>
 8014a04:	f04f 30ff 	mov.w	r0, #4294967295
 8014a08:	b01d      	add	sp, #116	@ 0x74
 8014a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a0e:	89ab      	ldrh	r3, [r5, #12]
 8014a10:	0598      	lsls	r0, r3, #22
 8014a12:	d4f7      	bmi.n	8014a04 <_vfiprintf_r+0x44>
 8014a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a16:	f7fe fb2f 	bl	8013078 <__retarget_lock_release_recursive>
 8014a1a:	e7f3      	b.n	8014a04 <_vfiprintf_r+0x44>
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a20:	2320      	movs	r3, #32
 8014a22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a2a:	2330      	movs	r3, #48	@ 0x30
 8014a2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014bdc <_vfiprintf_r+0x21c>
 8014a30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014a34:	f04f 0901 	mov.w	r9, #1
 8014a38:	4623      	mov	r3, r4
 8014a3a:	469a      	mov	sl, r3
 8014a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a40:	b10a      	cbz	r2, 8014a46 <_vfiprintf_r+0x86>
 8014a42:	2a25      	cmp	r2, #37	@ 0x25
 8014a44:	d1f9      	bne.n	8014a3a <_vfiprintf_r+0x7a>
 8014a46:	ebba 0b04 	subs.w	fp, sl, r4
 8014a4a:	d00b      	beq.n	8014a64 <_vfiprintf_r+0xa4>
 8014a4c:	465b      	mov	r3, fp
 8014a4e:	4622      	mov	r2, r4
 8014a50:	4629      	mov	r1, r5
 8014a52:	4630      	mov	r0, r6
 8014a54:	f7ff ffa2 	bl	801499c <__sfputs_r>
 8014a58:	3001      	adds	r0, #1
 8014a5a:	f000 80a7 	beq.w	8014bac <_vfiprintf_r+0x1ec>
 8014a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a60:	445a      	add	r2, fp
 8014a62:	9209      	str	r2, [sp, #36]	@ 0x24
 8014a64:	f89a 3000 	ldrb.w	r3, [sl]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	f000 809f 	beq.w	8014bac <_vfiprintf_r+0x1ec>
 8014a6e:	2300      	movs	r3, #0
 8014a70:	f04f 32ff 	mov.w	r2, #4294967295
 8014a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a78:	f10a 0a01 	add.w	sl, sl, #1
 8014a7c:	9304      	str	r3, [sp, #16]
 8014a7e:	9307      	str	r3, [sp, #28]
 8014a80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014a84:	931a      	str	r3, [sp, #104]	@ 0x68
 8014a86:	4654      	mov	r4, sl
 8014a88:	2205      	movs	r2, #5
 8014a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a8e:	4853      	ldr	r0, [pc, #332]	@ (8014bdc <_vfiprintf_r+0x21c>)
 8014a90:	f7eb fc26 	bl	80002e0 <memchr>
 8014a94:	9a04      	ldr	r2, [sp, #16]
 8014a96:	b9d8      	cbnz	r0, 8014ad0 <_vfiprintf_r+0x110>
 8014a98:	06d1      	lsls	r1, r2, #27
 8014a9a:	bf44      	itt	mi
 8014a9c:	2320      	movmi	r3, #32
 8014a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014aa2:	0713      	lsls	r3, r2, #28
 8014aa4:	bf44      	itt	mi
 8014aa6:	232b      	movmi	r3, #43	@ 0x2b
 8014aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014aac:	f89a 3000 	ldrb.w	r3, [sl]
 8014ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ab2:	d015      	beq.n	8014ae0 <_vfiprintf_r+0x120>
 8014ab4:	9a07      	ldr	r2, [sp, #28]
 8014ab6:	4654      	mov	r4, sl
 8014ab8:	2000      	movs	r0, #0
 8014aba:	f04f 0c0a 	mov.w	ip, #10
 8014abe:	4621      	mov	r1, r4
 8014ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ac4:	3b30      	subs	r3, #48	@ 0x30
 8014ac6:	2b09      	cmp	r3, #9
 8014ac8:	d94b      	bls.n	8014b62 <_vfiprintf_r+0x1a2>
 8014aca:	b1b0      	cbz	r0, 8014afa <_vfiprintf_r+0x13a>
 8014acc:	9207      	str	r2, [sp, #28]
 8014ace:	e014      	b.n	8014afa <_vfiprintf_r+0x13a>
 8014ad0:	eba0 0308 	sub.w	r3, r0, r8
 8014ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8014ad8:	4313      	orrs	r3, r2
 8014ada:	9304      	str	r3, [sp, #16]
 8014adc:	46a2      	mov	sl, r4
 8014ade:	e7d2      	b.n	8014a86 <_vfiprintf_r+0xc6>
 8014ae0:	9b03      	ldr	r3, [sp, #12]
 8014ae2:	1d19      	adds	r1, r3, #4
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	9103      	str	r1, [sp, #12]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	bfbb      	ittet	lt
 8014aec:	425b      	neglt	r3, r3
 8014aee:	f042 0202 	orrlt.w	r2, r2, #2
 8014af2:	9307      	strge	r3, [sp, #28]
 8014af4:	9307      	strlt	r3, [sp, #28]
 8014af6:	bfb8      	it	lt
 8014af8:	9204      	strlt	r2, [sp, #16]
 8014afa:	7823      	ldrb	r3, [r4, #0]
 8014afc:	2b2e      	cmp	r3, #46	@ 0x2e
 8014afe:	d10a      	bne.n	8014b16 <_vfiprintf_r+0x156>
 8014b00:	7863      	ldrb	r3, [r4, #1]
 8014b02:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b04:	d132      	bne.n	8014b6c <_vfiprintf_r+0x1ac>
 8014b06:	9b03      	ldr	r3, [sp, #12]
 8014b08:	1d1a      	adds	r2, r3, #4
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	9203      	str	r2, [sp, #12]
 8014b0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014b12:	3402      	adds	r4, #2
 8014b14:	9305      	str	r3, [sp, #20]
 8014b16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014bec <_vfiprintf_r+0x22c>
 8014b1a:	7821      	ldrb	r1, [r4, #0]
 8014b1c:	2203      	movs	r2, #3
 8014b1e:	4650      	mov	r0, sl
 8014b20:	f7eb fbde 	bl	80002e0 <memchr>
 8014b24:	b138      	cbz	r0, 8014b36 <_vfiprintf_r+0x176>
 8014b26:	9b04      	ldr	r3, [sp, #16]
 8014b28:	eba0 000a 	sub.w	r0, r0, sl
 8014b2c:	2240      	movs	r2, #64	@ 0x40
 8014b2e:	4082      	lsls	r2, r0
 8014b30:	4313      	orrs	r3, r2
 8014b32:	3401      	adds	r4, #1
 8014b34:	9304      	str	r3, [sp, #16]
 8014b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b3a:	4829      	ldr	r0, [pc, #164]	@ (8014be0 <_vfiprintf_r+0x220>)
 8014b3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014b40:	2206      	movs	r2, #6
 8014b42:	f7eb fbcd 	bl	80002e0 <memchr>
 8014b46:	2800      	cmp	r0, #0
 8014b48:	d03f      	beq.n	8014bca <_vfiprintf_r+0x20a>
 8014b4a:	4b26      	ldr	r3, [pc, #152]	@ (8014be4 <_vfiprintf_r+0x224>)
 8014b4c:	bb1b      	cbnz	r3, 8014b96 <_vfiprintf_r+0x1d6>
 8014b4e:	9b03      	ldr	r3, [sp, #12]
 8014b50:	3307      	adds	r3, #7
 8014b52:	f023 0307 	bic.w	r3, r3, #7
 8014b56:	3308      	adds	r3, #8
 8014b58:	9303      	str	r3, [sp, #12]
 8014b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b5c:	443b      	add	r3, r7
 8014b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b60:	e76a      	b.n	8014a38 <_vfiprintf_r+0x78>
 8014b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b66:	460c      	mov	r4, r1
 8014b68:	2001      	movs	r0, #1
 8014b6a:	e7a8      	b.n	8014abe <_vfiprintf_r+0xfe>
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	3401      	adds	r4, #1
 8014b70:	9305      	str	r3, [sp, #20]
 8014b72:	4619      	mov	r1, r3
 8014b74:	f04f 0c0a 	mov.w	ip, #10
 8014b78:	4620      	mov	r0, r4
 8014b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b7e:	3a30      	subs	r2, #48	@ 0x30
 8014b80:	2a09      	cmp	r2, #9
 8014b82:	d903      	bls.n	8014b8c <_vfiprintf_r+0x1cc>
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d0c6      	beq.n	8014b16 <_vfiprintf_r+0x156>
 8014b88:	9105      	str	r1, [sp, #20]
 8014b8a:	e7c4      	b.n	8014b16 <_vfiprintf_r+0x156>
 8014b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b90:	4604      	mov	r4, r0
 8014b92:	2301      	movs	r3, #1
 8014b94:	e7f0      	b.n	8014b78 <_vfiprintf_r+0x1b8>
 8014b96:	ab03      	add	r3, sp, #12
 8014b98:	9300      	str	r3, [sp, #0]
 8014b9a:	462a      	mov	r2, r5
 8014b9c:	4b12      	ldr	r3, [pc, #72]	@ (8014be8 <_vfiprintf_r+0x228>)
 8014b9e:	a904      	add	r1, sp, #16
 8014ba0:	4630      	mov	r0, r6
 8014ba2:	f7fd fd0d 	bl	80125c0 <_printf_float>
 8014ba6:	4607      	mov	r7, r0
 8014ba8:	1c78      	adds	r0, r7, #1
 8014baa:	d1d6      	bne.n	8014b5a <_vfiprintf_r+0x19a>
 8014bac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014bae:	07d9      	lsls	r1, r3, #31
 8014bb0:	d405      	bmi.n	8014bbe <_vfiprintf_r+0x1fe>
 8014bb2:	89ab      	ldrh	r3, [r5, #12]
 8014bb4:	059a      	lsls	r2, r3, #22
 8014bb6:	d402      	bmi.n	8014bbe <_vfiprintf_r+0x1fe>
 8014bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014bba:	f7fe fa5d 	bl	8013078 <__retarget_lock_release_recursive>
 8014bbe:	89ab      	ldrh	r3, [r5, #12]
 8014bc0:	065b      	lsls	r3, r3, #25
 8014bc2:	f53f af1f 	bmi.w	8014a04 <_vfiprintf_r+0x44>
 8014bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014bc8:	e71e      	b.n	8014a08 <_vfiprintf_r+0x48>
 8014bca:	ab03      	add	r3, sp, #12
 8014bcc:	9300      	str	r3, [sp, #0]
 8014bce:	462a      	mov	r2, r5
 8014bd0:	4b05      	ldr	r3, [pc, #20]	@ (8014be8 <_vfiprintf_r+0x228>)
 8014bd2:	a904      	add	r1, sp, #16
 8014bd4:	4630      	mov	r0, r6
 8014bd6:	f7fd ff7b 	bl	8012ad0 <_printf_i>
 8014bda:	e7e4      	b.n	8014ba6 <_vfiprintf_r+0x1e6>
 8014bdc:	080161d8 	.word	0x080161d8
 8014be0:	080161e2 	.word	0x080161e2
 8014be4:	080125c1 	.word	0x080125c1
 8014be8:	0801499d 	.word	0x0801499d
 8014bec:	080161de 	.word	0x080161de

08014bf0 <__swbuf_r>:
 8014bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bf2:	460e      	mov	r6, r1
 8014bf4:	4614      	mov	r4, r2
 8014bf6:	4605      	mov	r5, r0
 8014bf8:	b118      	cbz	r0, 8014c02 <__swbuf_r+0x12>
 8014bfa:	6a03      	ldr	r3, [r0, #32]
 8014bfc:	b90b      	cbnz	r3, 8014c02 <__swbuf_r+0x12>
 8014bfe:	f7fe f913 	bl	8012e28 <__sinit>
 8014c02:	69a3      	ldr	r3, [r4, #24]
 8014c04:	60a3      	str	r3, [r4, #8]
 8014c06:	89a3      	ldrh	r3, [r4, #12]
 8014c08:	071a      	lsls	r2, r3, #28
 8014c0a:	d501      	bpl.n	8014c10 <__swbuf_r+0x20>
 8014c0c:	6923      	ldr	r3, [r4, #16]
 8014c0e:	b943      	cbnz	r3, 8014c22 <__swbuf_r+0x32>
 8014c10:	4621      	mov	r1, r4
 8014c12:	4628      	mov	r0, r5
 8014c14:	f000 f82a 	bl	8014c6c <__swsetup_r>
 8014c18:	b118      	cbz	r0, 8014c22 <__swbuf_r+0x32>
 8014c1a:	f04f 37ff 	mov.w	r7, #4294967295
 8014c1e:	4638      	mov	r0, r7
 8014c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c22:	6823      	ldr	r3, [r4, #0]
 8014c24:	6922      	ldr	r2, [r4, #16]
 8014c26:	1a98      	subs	r0, r3, r2
 8014c28:	6963      	ldr	r3, [r4, #20]
 8014c2a:	b2f6      	uxtb	r6, r6
 8014c2c:	4283      	cmp	r3, r0
 8014c2e:	4637      	mov	r7, r6
 8014c30:	dc05      	bgt.n	8014c3e <__swbuf_r+0x4e>
 8014c32:	4621      	mov	r1, r4
 8014c34:	4628      	mov	r0, r5
 8014c36:	f7ff fda9 	bl	801478c <_fflush_r>
 8014c3a:	2800      	cmp	r0, #0
 8014c3c:	d1ed      	bne.n	8014c1a <__swbuf_r+0x2a>
 8014c3e:	68a3      	ldr	r3, [r4, #8]
 8014c40:	3b01      	subs	r3, #1
 8014c42:	60a3      	str	r3, [r4, #8]
 8014c44:	6823      	ldr	r3, [r4, #0]
 8014c46:	1c5a      	adds	r2, r3, #1
 8014c48:	6022      	str	r2, [r4, #0]
 8014c4a:	701e      	strb	r6, [r3, #0]
 8014c4c:	6962      	ldr	r2, [r4, #20]
 8014c4e:	1c43      	adds	r3, r0, #1
 8014c50:	429a      	cmp	r2, r3
 8014c52:	d004      	beq.n	8014c5e <__swbuf_r+0x6e>
 8014c54:	89a3      	ldrh	r3, [r4, #12]
 8014c56:	07db      	lsls	r3, r3, #31
 8014c58:	d5e1      	bpl.n	8014c1e <__swbuf_r+0x2e>
 8014c5a:	2e0a      	cmp	r6, #10
 8014c5c:	d1df      	bne.n	8014c1e <__swbuf_r+0x2e>
 8014c5e:	4621      	mov	r1, r4
 8014c60:	4628      	mov	r0, r5
 8014c62:	f7ff fd93 	bl	801478c <_fflush_r>
 8014c66:	2800      	cmp	r0, #0
 8014c68:	d0d9      	beq.n	8014c1e <__swbuf_r+0x2e>
 8014c6a:	e7d6      	b.n	8014c1a <__swbuf_r+0x2a>

08014c6c <__swsetup_r>:
 8014c6c:	b538      	push	{r3, r4, r5, lr}
 8014c6e:	4b29      	ldr	r3, [pc, #164]	@ (8014d14 <__swsetup_r+0xa8>)
 8014c70:	4605      	mov	r5, r0
 8014c72:	6818      	ldr	r0, [r3, #0]
 8014c74:	460c      	mov	r4, r1
 8014c76:	b118      	cbz	r0, 8014c80 <__swsetup_r+0x14>
 8014c78:	6a03      	ldr	r3, [r0, #32]
 8014c7a:	b90b      	cbnz	r3, 8014c80 <__swsetup_r+0x14>
 8014c7c:	f7fe f8d4 	bl	8012e28 <__sinit>
 8014c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c84:	0719      	lsls	r1, r3, #28
 8014c86:	d422      	bmi.n	8014cce <__swsetup_r+0x62>
 8014c88:	06da      	lsls	r2, r3, #27
 8014c8a:	d407      	bmi.n	8014c9c <__swsetup_r+0x30>
 8014c8c:	2209      	movs	r2, #9
 8014c8e:	602a      	str	r2, [r5, #0]
 8014c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c94:	81a3      	strh	r3, [r4, #12]
 8014c96:	f04f 30ff 	mov.w	r0, #4294967295
 8014c9a:	e033      	b.n	8014d04 <__swsetup_r+0x98>
 8014c9c:	0758      	lsls	r0, r3, #29
 8014c9e:	d512      	bpl.n	8014cc6 <__swsetup_r+0x5a>
 8014ca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ca2:	b141      	cbz	r1, 8014cb6 <__swsetup_r+0x4a>
 8014ca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014ca8:	4299      	cmp	r1, r3
 8014caa:	d002      	beq.n	8014cb2 <__swsetup_r+0x46>
 8014cac:	4628      	mov	r0, r5
 8014cae:	f7fe ffc5 	bl	8013c3c <_free_r>
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8014cb6:	89a3      	ldrh	r3, [r4, #12]
 8014cb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014cbc:	81a3      	strh	r3, [r4, #12]
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	6063      	str	r3, [r4, #4]
 8014cc2:	6923      	ldr	r3, [r4, #16]
 8014cc4:	6023      	str	r3, [r4, #0]
 8014cc6:	89a3      	ldrh	r3, [r4, #12]
 8014cc8:	f043 0308 	orr.w	r3, r3, #8
 8014ccc:	81a3      	strh	r3, [r4, #12]
 8014cce:	6923      	ldr	r3, [r4, #16]
 8014cd0:	b94b      	cbnz	r3, 8014ce6 <__swsetup_r+0x7a>
 8014cd2:	89a3      	ldrh	r3, [r4, #12]
 8014cd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014cdc:	d003      	beq.n	8014ce6 <__swsetup_r+0x7a>
 8014cde:	4621      	mov	r1, r4
 8014ce0:	4628      	mov	r0, r5
 8014ce2:	f000 f883 	bl	8014dec <__smakebuf_r>
 8014ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cea:	f013 0201 	ands.w	r2, r3, #1
 8014cee:	d00a      	beq.n	8014d06 <__swsetup_r+0x9a>
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	60a2      	str	r2, [r4, #8]
 8014cf4:	6962      	ldr	r2, [r4, #20]
 8014cf6:	4252      	negs	r2, r2
 8014cf8:	61a2      	str	r2, [r4, #24]
 8014cfa:	6922      	ldr	r2, [r4, #16]
 8014cfc:	b942      	cbnz	r2, 8014d10 <__swsetup_r+0xa4>
 8014cfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014d02:	d1c5      	bne.n	8014c90 <__swsetup_r+0x24>
 8014d04:	bd38      	pop	{r3, r4, r5, pc}
 8014d06:	0799      	lsls	r1, r3, #30
 8014d08:	bf58      	it	pl
 8014d0a:	6962      	ldrpl	r2, [r4, #20]
 8014d0c:	60a2      	str	r2, [r4, #8]
 8014d0e:	e7f4      	b.n	8014cfa <__swsetup_r+0x8e>
 8014d10:	2000      	movs	r0, #0
 8014d12:	e7f7      	b.n	8014d04 <__swsetup_r+0x98>
 8014d14:	24000114 	.word	0x24000114

08014d18 <_raise_r>:
 8014d18:	291f      	cmp	r1, #31
 8014d1a:	b538      	push	{r3, r4, r5, lr}
 8014d1c:	4605      	mov	r5, r0
 8014d1e:	460c      	mov	r4, r1
 8014d20:	d904      	bls.n	8014d2c <_raise_r+0x14>
 8014d22:	2316      	movs	r3, #22
 8014d24:	6003      	str	r3, [r0, #0]
 8014d26:	f04f 30ff 	mov.w	r0, #4294967295
 8014d2a:	bd38      	pop	{r3, r4, r5, pc}
 8014d2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014d2e:	b112      	cbz	r2, 8014d36 <_raise_r+0x1e>
 8014d30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d34:	b94b      	cbnz	r3, 8014d4a <_raise_r+0x32>
 8014d36:	4628      	mov	r0, r5
 8014d38:	f000 f830 	bl	8014d9c <_getpid_r>
 8014d3c:	4622      	mov	r2, r4
 8014d3e:	4601      	mov	r1, r0
 8014d40:	4628      	mov	r0, r5
 8014d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d46:	f000 b817 	b.w	8014d78 <_kill_r>
 8014d4a:	2b01      	cmp	r3, #1
 8014d4c:	d00a      	beq.n	8014d64 <_raise_r+0x4c>
 8014d4e:	1c59      	adds	r1, r3, #1
 8014d50:	d103      	bne.n	8014d5a <_raise_r+0x42>
 8014d52:	2316      	movs	r3, #22
 8014d54:	6003      	str	r3, [r0, #0]
 8014d56:	2001      	movs	r0, #1
 8014d58:	e7e7      	b.n	8014d2a <_raise_r+0x12>
 8014d5a:	2100      	movs	r1, #0
 8014d5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014d60:	4620      	mov	r0, r4
 8014d62:	4798      	blx	r3
 8014d64:	2000      	movs	r0, #0
 8014d66:	e7e0      	b.n	8014d2a <_raise_r+0x12>

08014d68 <raise>:
 8014d68:	4b02      	ldr	r3, [pc, #8]	@ (8014d74 <raise+0xc>)
 8014d6a:	4601      	mov	r1, r0
 8014d6c:	6818      	ldr	r0, [r3, #0]
 8014d6e:	f7ff bfd3 	b.w	8014d18 <_raise_r>
 8014d72:	bf00      	nop
 8014d74:	24000114 	.word	0x24000114

08014d78 <_kill_r>:
 8014d78:	b538      	push	{r3, r4, r5, lr}
 8014d7a:	4d07      	ldr	r5, [pc, #28]	@ (8014d98 <_kill_r+0x20>)
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	4604      	mov	r4, r0
 8014d80:	4608      	mov	r0, r1
 8014d82:	4611      	mov	r1, r2
 8014d84:	602b      	str	r3, [r5, #0]
 8014d86:	f7ec fbbf 	bl	8001508 <_kill>
 8014d8a:	1c43      	adds	r3, r0, #1
 8014d8c:	d102      	bne.n	8014d94 <_kill_r+0x1c>
 8014d8e:	682b      	ldr	r3, [r5, #0]
 8014d90:	b103      	cbz	r3, 8014d94 <_kill_r+0x1c>
 8014d92:	6023      	str	r3, [r4, #0]
 8014d94:	bd38      	pop	{r3, r4, r5, pc}
 8014d96:	bf00      	nop
 8014d98:	24002374 	.word	0x24002374

08014d9c <_getpid_r>:
 8014d9c:	f7ec bbac 	b.w	80014f8 <_getpid>

08014da0 <__swhatbuf_r>:
 8014da0:	b570      	push	{r4, r5, r6, lr}
 8014da2:	460c      	mov	r4, r1
 8014da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014da8:	2900      	cmp	r1, #0
 8014daa:	b096      	sub	sp, #88	@ 0x58
 8014dac:	4615      	mov	r5, r2
 8014dae:	461e      	mov	r6, r3
 8014db0:	da0d      	bge.n	8014dce <__swhatbuf_r+0x2e>
 8014db2:	89a3      	ldrh	r3, [r4, #12]
 8014db4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014db8:	f04f 0100 	mov.w	r1, #0
 8014dbc:	bf14      	ite	ne
 8014dbe:	2340      	movne	r3, #64	@ 0x40
 8014dc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	6031      	str	r1, [r6, #0]
 8014dc8:	602b      	str	r3, [r5, #0]
 8014dca:	b016      	add	sp, #88	@ 0x58
 8014dcc:	bd70      	pop	{r4, r5, r6, pc}
 8014dce:	466a      	mov	r2, sp
 8014dd0:	f000 f848 	bl	8014e64 <_fstat_r>
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	dbec      	blt.n	8014db2 <__swhatbuf_r+0x12>
 8014dd8:	9901      	ldr	r1, [sp, #4]
 8014dda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014dde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014de2:	4259      	negs	r1, r3
 8014de4:	4159      	adcs	r1, r3
 8014de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014dea:	e7eb      	b.n	8014dc4 <__swhatbuf_r+0x24>

08014dec <__smakebuf_r>:
 8014dec:	898b      	ldrh	r3, [r1, #12]
 8014dee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014df0:	079d      	lsls	r5, r3, #30
 8014df2:	4606      	mov	r6, r0
 8014df4:	460c      	mov	r4, r1
 8014df6:	d507      	bpl.n	8014e08 <__smakebuf_r+0x1c>
 8014df8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014dfc:	6023      	str	r3, [r4, #0]
 8014dfe:	6123      	str	r3, [r4, #16]
 8014e00:	2301      	movs	r3, #1
 8014e02:	6163      	str	r3, [r4, #20]
 8014e04:	b003      	add	sp, #12
 8014e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e08:	ab01      	add	r3, sp, #4
 8014e0a:	466a      	mov	r2, sp
 8014e0c:	f7ff ffc8 	bl	8014da0 <__swhatbuf_r>
 8014e10:	9f00      	ldr	r7, [sp, #0]
 8014e12:	4605      	mov	r5, r0
 8014e14:	4639      	mov	r1, r7
 8014e16:	4630      	mov	r0, r6
 8014e18:	f7fd fab6 	bl	8012388 <_malloc_r>
 8014e1c:	b948      	cbnz	r0, 8014e32 <__smakebuf_r+0x46>
 8014e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e22:	059a      	lsls	r2, r3, #22
 8014e24:	d4ee      	bmi.n	8014e04 <__smakebuf_r+0x18>
 8014e26:	f023 0303 	bic.w	r3, r3, #3
 8014e2a:	f043 0302 	orr.w	r3, r3, #2
 8014e2e:	81a3      	strh	r3, [r4, #12]
 8014e30:	e7e2      	b.n	8014df8 <__smakebuf_r+0xc>
 8014e32:	89a3      	ldrh	r3, [r4, #12]
 8014e34:	6020      	str	r0, [r4, #0]
 8014e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e3a:	81a3      	strh	r3, [r4, #12]
 8014e3c:	9b01      	ldr	r3, [sp, #4]
 8014e3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014e42:	b15b      	cbz	r3, 8014e5c <__smakebuf_r+0x70>
 8014e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e48:	4630      	mov	r0, r6
 8014e4a:	f000 f81d 	bl	8014e88 <_isatty_r>
 8014e4e:	b128      	cbz	r0, 8014e5c <__smakebuf_r+0x70>
 8014e50:	89a3      	ldrh	r3, [r4, #12]
 8014e52:	f023 0303 	bic.w	r3, r3, #3
 8014e56:	f043 0301 	orr.w	r3, r3, #1
 8014e5a:	81a3      	strh	r3, [r4, #12]
 8014e5c:	89a3      	ldrh	r3, [r4, #12]
 8014e5e:	431d      	orrs	r5, r3
 8014e60:	81a5      	strh	r5, [r4, #12]
 8014e62:	e7cf      	b.n	8014e04 <__smakebuf_r+0x18>

08014e64 <_fstat_r>:
 8014e64:	b538      	push	{r3, r4, r5, lr}
 8014e66:	4d07      	ldr	r5, [pc, #28]	@ (8014e84 <_fstat_r+0x20>)
 8014e68:	2300      	movs	r3, #0
 8014e6a:	4604      	mov	r4, r0
 8014e6c:	4608      	mov	r0, r1
 8014e6e:	4611      	mov	r1, r2
 8014e70:	602b      	str	r3, [r5, #0]
 8014e72:	f7ec fba9 	bl	80015c8 <_fstat>
 8014e76:	1c43      	adds	r3, r0, #1
 8014e78:	d102      	bne.n	8014e80 <_fstat_r+0x1c>
 8014e7a:	682b      	ldr	r3, [r5, #0]
 8014e7c:	b103      	cbz	r3, 8014e80 <_fstat_r+0x1c>
 8014e7e:	6023      	str	r3, [r4, #0]
 8014e80:	bd38      	pop	{r3, r4, r5, pc}
 8014e82:	bf00      	nop
 8014e84:	24002374 	.word	0x24002374

08014e88 <_isatty_r>:
 8014e88:	b538      	push	{r3, r4, r5, lr}
 8014e8a:	4d06      	ldr	r5, [pc, #24]	@ (8014ea4 <_isatty_r+0x1c>)
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	4604      	mov	r4, r0
 8014e90:	4608      	mov	r0, r1
 8014e92:	602b      	str	r3, [r5, #0]
 8014e94:	f7ec fba8 	bl	80015e8 <_isatty>
 8014e98:	1c43      	adds	r3, r0, #1
 8014e9a:	d102      	bne.n	8014ea2 <_isatty_r+0x1a>
 8014e9c:	682b      	ldr	r3, [r5, #0]
 8014e9e:	b103      	cbz	r3, 8014ea2 <_isatty_r+0x1a>
 8014ea0:	6023      	str	r3, [r4, #0]
 8014ea2:	bd38      	pop	{r3, r4, r5, pc}
 8014ea4:	24002374 	.word	0x24002374

08014ea8 <fmod>:
 8014ea8:	b508      	push	{r3, lr}
 8014eaa:	ed2d 8b04 	vpush	{d8-d9}
 8014eae:	eeb0 9b40 	vmov.f64	d9, d0
 8014eb2:	eeb0 8b41 	vmov.f64	d8, d1
 8014eb6:	f000 f81b 	bl	8014ef0 <__ieee754_fmod>
 8014eba:	eeb4 9b48 	vcmp.f64	d9, d8
 8014ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ec2:	d60c      	bvs.n	8014ede <fmod+0x36>
 8014ec4:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014ee8 <fmod+0x40>
 8014ec8:	eeb4 8b49 	vcmp.f64	d8, d9
 8014ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed0:	d105      	bne.n	8014ede <fmod+0x36>
 8014ed2:	f7fe f8a5 	bl	8013020 <__errno>
 8014ed6:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014eda:	2321      	movs	r3, #33	@ 0x21
 8014edc:	6003      	str	r3, [r0, #0]
 8014ede:	ecbd 8b04 	vpop	{d8-d9}
 8014ee2:	bd08      	pop	{r3, pc}
 8014ee4:	f3af 8000 	nop.w
	...

08014ef0 <__ieee754_fmod>:
 8014ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ef4:	ed8d 1b00 	vstr	d1, [sp]
 8014ef8:	e9dd 6500 	ldrd	r6, r5, [sp]
 8014efc:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8014f00:	ea56 0307 	orrs.w	r3, r6, r7
 8014f04:	46b6      	mov	lr, r6
 8014f06:	d00d      	beq.n	8014f24 <__ieee754_fmod+0x34>
 8014f08:	ee10 ca90 	vmov	ip, s1
 8014f0c:	4b78      	ldr	r3, [pc, #480]	@ (80150f0 <__ieee754_fmod+0x200>)
 8014f0e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8014f12:	4598      	cmp	r8, r3
 8014f14:	d806      	bhi.n	8014f24 <__ieee754_fmod+0x34>
 8014f16:	4273      	negs	r3, r6
 8014f18:	4a76      	ldr	r2, [pc, #472]	@ (80150f4 <__ieee754_fmod+0x204>)
 8014f1a:	4333      	orrs	r3, r6
 8014f1c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8014f20:	4293      	cmp	r3, r2
 8014f22:	d908      	bls.n	8014f36 <__ieee754_fmod+0x46>
 8014f24:	ed9d 7b00 	vldr	d7, [sp]
 8014f28:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014f2c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014f30:	b003      	add	sp, #12
 8014f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f36:	ee10 9a10 	vmov	r9, s0
 8014f3a:	45b8      	cmp	r8, r7
 8014f3c:	4649      	mov	r1, r9
 8014f3e:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8014f42:	dc09      	bgt.n	8014f58 <__ieee754_fmod+0x68>
 8014f44:	dbf4      	blt.n	8014f30 <__ieee754_fmod+0x40>
 8014f46:	454e      	cmp	r6, r9
 8014f48:	d8f2      	bhi.n	8014f30 <__ieee754_fmod+0x40>
 8014f4a:	d105      	bne.n	8014f58 <__ieee754_fmod+0x68>
 8014f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80150f8 <__ieee754_fmod+0x208>)
 8014f4e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8014f52:	ed93 0b00 	vldr	d0, [r3]
 8014f56:	e7eb      	b.n	8014f30 <__ieee754_fmod+0x40>
 8014f58:	4a66      	ldr	r2, [pc, #408]	@ (80150f4 <__ieee754_fmod+0x204>)
 8014f5a:	ea1c 0f02 	tst.w	ip, r2
 8014f5e:	d14a      	bne.n	8014ff6 <__ieee754_fmod+0x106>
 8014f60:	f1b8 0f00 	cmp.w	r8, #0
 8014f64:	d13f      	bne.n	8014fe6 <__ieee754_fmod+0xf6>
 8014f66:	4865      	ldr	r0, [pc, #404]	@ (80150fc <__ieee754_fmod+0x20c>)
 8014f68:	464b      	mov	r3, r9
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	dc38      	bgt.n	8014fe0 <__ieee754_fmod+0xf0>
 8014f6e:	4215      	tst	r5, r2
 8014f70:	d150      	bne.n	8015014 <__ieee754_fmod+0x124>
 8014f72:	2f00      	cmp	r7, #0
 8014f74:	d147      	bne.n	8015006 <__ieee754_fmod+0x116>
 8014f76:	4a61      	ldr	r2, [pc, #388]	@ (80150fc <__ieee754_fmod+0x20c>)
 8014f78:	4633      	mov	r3, r6
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	dc40      	bgt.n	8015000 <__ieee754_fmod+0x110>
 8014f7e:	4b60      	ldr	r3, [pc, #384]	@ (8015100 <__ieee754_fmod+0x210>)
 8014f80:	4298      	cmp	r0, r3
 8014f82:	db4b      	blt.n	801501c <__ieee754_fmod+0x12c>
 8014f84:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8014f88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014f8c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8015100 <__ieee754_fmod+0x210>
 8014f90:	4562      	cmp	r2, ip
 8014f92:	db58      	blt.n	8015046 <__ieee754_fmod+0x156>
 8014f94:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014f98:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014f9c:	1a80      	subs	r0, r0, r2
 8014f9e:	1b5e      	subs	r6, r3, r5
 8014fa0:	eba1 070e 	sub.w	r7, r1, lr
 8014fa4:	2800      	cmp	r0, #0
 8014fa6:	d164      	bne.n	8015072 <__ieee754_fmod+0x182>
 8014fa8:	4571      	cmp	r1, lr
 8014faa:	bf38      	it	cc
 8014fac:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014fb0:	2e00      	cmp	r6, #0
 8014fb2:	bfa4      	itt	ge
 8014fb4:	4639      	movge	r1, r7
 8014fb6:	4633      	movge	r3, r6
 8014fb8:	ea53 0001 	orrs.w	r0, r3, r1
 8014fbc:	d0c6      	beq.n	8014f4c <__ieee754_fmod+0x5c>
 8014fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014fc2:	db6b      	blt.n	801509c <__ieee754_fmod+0x1ac>
 8014fc4:	484e      	ldr	r0, [pc, #312]	@ (8015100 <__ieee754_fmod+0x210>)
 8014fc6:	4282      	cmp	r2, r0
 8014fc8:	db6e      	blt.n	80150a8 <__ieee754_fmod+0x1b8>
 8014fca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014fce:	4323      	orrs	r3, r4
 8014fd0:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8014fd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014fd8:	460c      	mov	r4, r1
 8014fda:	ec45 4b10 	vmov	d0, r4, r5
 8014fde:	e7a7      	b.n	8014f30 <__ieee754_fmod+0x40>
 8014fe0:	3801      	subs	r0, #1
 8014fe2:	005b      	lsls	r3, r3, #1
 8014fe4:	e7c1      	b.n	8014f6a <__ieee754_fmod+0x7a>
 8014fe6:	4846      	ldr	r0, [pc, #280]	@ (8015100 <__ieee754_fmod+0x210>)
 8014fe8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	ddbe      	ble.n	8014f6e <__ieee754_fmod+0x7e>
 8014ff0:	3801      	subs	r0, #1
 8014ff2:	005b      	lsls	r3, r3, #1
 8014ff4:	e7fa      	b.n	8014fec <__ieee754_fmod+0xfc>
 8014ff6:	ea4f 5028 	mov.w	r0, r8, asr #20
 8014ffa:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8014ffe:	e7b6      	b.n	8014f6e <__ieee754_fmod+0x7e>
 8015000:	3a01      	subs	r2, #1
 8015002:	005b      	lsls	r3, r3, #1
 8015004:	e7b9      	b.n	8014f7a <__ieee754_fmod+0x8a>
 8015006:	4a3e      	ldr	r2, [pc, #248]	@ (8015100 <__ieee754_fmod+0x210>)
 8015008:	02fb      	lsls	r3, r7, #11
 801500a:	2b00      	cmp	r3, #0
 801500c:	ddb7      	ble.n	8014f7e <__ieee754_fmod+0x8e>
 801500e:	3a01      	subs	r2, #1
 8015010:	005b      	lsls	r3, r3, #1
 8015012:	e7fa      	b.n	801500a <__ieee754_fmod+0x11a>
 8015014:	153a      	asrs	r2, r7, #20
 8015016:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801501a:	e7b0      	b.n	8014f7e <__ieee754_fmod+0x8e>
 801501c:	eba3 0c00 	sub.w	ip, r3, r0
 8015020:	f1bc 0f1f 	cmp.w	ip, #31
 8015024:	dc09      	bgt.n	801503a <__ieee754_fmod+0x14a>
 8015026:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 801502a:	fa08 f10c 	lsl.w	r1, r8, ip
 801502e:	fa29 f303 	lsr.w	r3, r9, r3
 8015032:	430b      	orrs	r3, r1
 8015034:	fa09 f10c 	lsl.w	r1, r9, ip
 8015038:	e7a8      	b.n	8014f8c <__ieee754_fmod+0x9c>
 801503a:	4b32      	ldr	r3, [pc, #200]	@ (8015104 <__ieee754_fmod+0x214>)
 801503c:	1a1b      	subs	r3, r3, r0
 801503e:	fa09 f303 	lsl.w	r3, r9, r3
 8015042:	2100      	movs	r1, #0
 8015044:	e7a2      	b.n	8014f8c <__ieee754_fmod+0x9c>
 8015046:	ebac 0c02 	sub.w	ip, ip, r2
 801504a:	f1bc 0f1f 	cmp.w	ip, #31
 801504e:	dc09      	bgt.n	8015064 <__ieee754_fmod+0x174>
 8015050:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8015054:	fa07 f70c 	lsl.w	r7, r7, ip
 8015058:	fa26 f505 	lsr.w	r5, r6, r5
 801505c:	433d      	orrs	r5, r7
 801505e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8015062:	e79b      	b.n	8014f9c <__ieee754_fmod+0xac>
 8015064:	4d27      	ldr	r5, [pc, #156]	@ (8015104 <__ieee754_fmod+0x214>)
 8015066:	1aad      	subs	r5, r5, r2
 8015068:	fa06 f505 	lsl.w	r5, r6, r5
 801506c:	f04f 0e00 	mov.w	lr, #0
 8015070:	e794      	b.n	8014f9c <__ieee754_fmod+0xac>
 8015072:	4571      	cmp	r1, lr
 8015074:	bf38      	it	cc
 8015076:	f106 36ff 	addcc.w	r6, r6, #4294967295
 801507a:	2e00      	cmp	r6, #0
 801507c:	da05      	bge.n	801508a <__ieee754_fmod+0x19a>
 801507e:	0fce      	lsrs	r6, r1, #31
 8015080:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8015084:	0049      	lsls	r1, r1, #1
 8015086:	3801      	subs	r0, #1
 8015088:	e789      	b.n	8014f9e <__ieee754_fmod+0xae>
 801508a:	ea56 0307 	orrs.w	r3, r6, r7
 801508e:	f43f af5d 	beq.w	8014f4c <__ieee754_fmod+0x5c>
 8015092:	0ffb      	lsrs	r3, r7, #31
 8015094:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015098:	0079      	lsls	r1, r7, #1
 801509a:	e7f4      	b.n	8015086 <__ieee754_fmod+0x196>
 801509c:	0fc8      	lsrs	r0, r1, #31
 801509e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80150a2:	0049      	lsls	r1, r1, #1
 80150a4:	3a01      	subs	r2, #1
 80150a6:	e78a      	b.n	8014fbe <__ieee754_fmod+0xce>
 80150a8:	1a80      	subs	r0, r0, r2
 80150aa:	2814      	cmp	r0, #20
 80150ac:	dc0c      	bgt.n	80150c8 <__ieee754_fmod+0x1d8>
 80150ae:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80150b2:	fa03 f202 	lsl.w	r2, r3, r2
 80150b6:	40c1      	lsrs	r1, r0
 80150b8:	430a      	orrs	r2, r1
 80150ba:	4103      	asrs	r3, r0
 80150bc:	ea43 0104 	orr.w	r1, r3, r4
 80150c0:	4610      	mov	r0, r2
 80150c2:	ec41 0b10 	vmov	d0, r0, r1
 80150c6:	e733      	b.n	8014f30 <__ieee754_fmod+0x40>
 80150c8:	281f      	cmp	r0, #31
 80150ca:	dc07      	bgt.n	80150dc <__ieee754_fmod+0x1ec>
 80150cc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80150d0:	40c1      	lsrs	r1, r0
 80150d2:	fa03 f202 	lsl.w	r2, r3, r2
 80150d6:	430a      	orrs	r2, r1
 80150d8:	4623      	mov	r3, r4
 80150da:	e7ef      	b.n	80150bc <__ieee754_fmod+0x1cc>
 80150dc:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80150e0:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80150e4:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80150e8:	32e2      	adds	r2, #226	@ 0xe2
 80150ea:	fa43 f202 	asr.w	r2, r3, r2
 80150ee:	e7f3      	b.n	80150d8 <__ieee754_fmod+0x1e8>
 80150f0:	7fefffff 	.word	0x7fefffff
 80150f4:	7ff00000 	.word	0x7ff00000
 80150f8:	08016330 	.word	0x08016330
 80150fc:	fffffbed 	.word	0xfffffbed
 8015100:	fffffc02 	.word	0xfffffc02
 8015104:	fffffbe2 	.word	0xfffffbe2

08015108 <_init>:
 8015108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801510a:	bf00      	nop
 801510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801510e:	bc08      	pop	{r3}
 8015110:	469e      	mov	lr, r3
 8015112:	4770      	bx	lr

08015114 <_fini>:
 8015114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015116:	bf00      	nop
 8015118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801511a:	bc08      	pop	{r3}
 801511c:	469e      	mov	lr, r3
 801511e:	4770      	bx	lr
