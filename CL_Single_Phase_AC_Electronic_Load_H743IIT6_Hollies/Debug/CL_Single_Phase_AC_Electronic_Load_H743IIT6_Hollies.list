
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014584  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002428  08014828  08014828  00015828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016c50  08016c50  00017c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016c58  08016c58  00017c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016c5c  08016c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  08016c60  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000025fc  240002cc  08016f2c  000182cc  2**2
                  ALLOC
  8 ._user_heap_stack 0000c000  240028c8  08016f2c  000188c8  2**0
                  ALLOC
  9 ._D3_Area     00000000  38000000  38000000  00019018  2**0
                  CONTENTS
 10 ._DTCM_Area   00000018  20000000  20000000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  00019018  2**0
                  CONTENTS, READONLY
 12 .debug_line   000315f3  00000000  00000000  00019046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000081  00000000  00000000  0004a639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00033735  00000000  00000000  0004a6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006bf9  00000000  00000000  0007ddef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002220  00000000  00000000  000849e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d65a  00000000  00000000  00086c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001993  00000000  00000000  00204262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003fc7e  00000000  00000000  00205bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  00245873  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009e1c  00000000  00000000  0024592c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000a31  00000000  00000000  0024f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000040  00000000  00000000  00250179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002cc 	.word	0x240002cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801480c 	.word	0x0801480c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d0 	.word	0x240002d0
 80002dc:	0801480c 	.word	0x0801480c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f010 f94c 	bl	8010630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003be:	f012 f95f 	bl	8012680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f00f fac5 	bl	800f950 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80003cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80003d0:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 80003d4:	08016c60 	.word	0x08016c60
  ldr r2, =_sbss
 80003d8:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 80003dc:	240028c8 	.word	0x240028c8

080003e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC3_IRQHandler>
	...

080003e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ea:	2003      	movs	r0, #3
 80003ec:	f001 fc91 	bl	8001d12 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80003f0:	f005 f8bc 	bl	800556c <HAL_RCC_GetSysClockFreq>
 80003f4:	4602      	mov	r2, r0
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <HAL_Init+0x68>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	0a1b      	lsrs	r3, r3, #8
 80003fc:	f003 030f 	and.w	r3, r3, #15
 8000400:	4913      	ldr	r1, [pc, #76]	@ (8000450 <HAL_Init+0x6c>)
 8000402:	5ccb      	ldrb	r3, [r1, r3]
 8000404:	f003 031f 	and.w	r3, r3, #31
 8000408:	fa22 f303 	lsr.w	r3, r2, r3
 800040c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_Init+0x68>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 030f 	and.w	r3, r3, #15
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <HAL_Init+0x6c>)
 8000418:	5cd3      	ldrb	r3, [r2, r3]
 800041a:	f003 031f 	and.w	r3, r3, #31
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	fa22 f303 	lsr.w	r3, r2, r3
 8000424:	4a0b      	ldr	r2, [pc, #44]	@ (8000454 <HAL_Init+0x70>)
 8000426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000428:	4a0b      	ldr	r2, [pc, #44]	@ (8000458 <HAL_Init+0x74>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800042e:	200f      	movs	r0, #15
 8000430:	f010 f832 	bl	8010498 <HAL_InitTick>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800043a:	2301      	movs	r3, #1
 800043c:	e002      	b.n	8000444 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800043e:	f010 f811 	bl	8010464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	58024400 	.word	0x58024400
 8000450:	080160bc 	.word	0x080160bc
 8000454:	24000098 	.word	0x24000098
 8000458:	24000094 	.word	0x24000094

0800045c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_IncTick+0x20>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <HAL_IncTick+0x24>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4413      	add	r3, r2
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <HAL_IncTick+0x24>)
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	24000004 	.word	0x24000004
 8000480:	240002e8 	.word	0x240002e8

08000484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  return uwTick;
 8000488:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <HAL_GetTick+0x14>)
 800048a:	681b      	ldr	r3, [r3, #0]
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	240002e8 	.word	0x240002e8

0800049c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004a4:	f7ff ffee 	bl	8000484 <HAL_GetTick>
 80004a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b4:	d005      	beq.n	80004c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b6:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <HAL_Delay+0x44>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	4413      	add	r3, r2
 80004c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c2:	bf00      	nop
 80004c4:	f7ff ffde 	bl	8000484 <HAL_GetTick>
 80004c8:	4602      	mov	r2, r0
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d8f7      	bhi.n	80004c4 <HAL_Delay+0x28>
  {
  }
}
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000004 	.word	0x24000004

080004e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80004e8:	4b03      	ldr	r3, [pc, #12]	@ (80004f8 <HAL_GetREVID+0x14>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	0c1b      	lsrs	r3, r3, #16
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	5c001000 	.word	0x5c001000

080004fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	609a      	str	r2, [r3, #8]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	431a      	orrs	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000564:	b480      	push	{r7}
 8000566:	b087      	sub	sp, #28
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3360      	adds	r3, #96	@ 0x60
 8000576:	461a      	mov	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	430b      	orrs	r3, r1
 8000592:	431a      	orrs	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000598:	bf00      	nop
 800059a:	371c      	adds	r7, #28
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	f003 031f 	and.w	r3, r3, #31
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	431a      	orrs	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	611a      	str	r2, [r3, #16]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b087      	sub	sp, #28
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3360      	adds	r3, #96	@ 0x60
 80005e6:	461a      	mov	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	431a      	orrs	r2, r3
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	601a      	str	r2, [r3, #0]
  }
}
 8000600:	bf00      	nop
 8000602:	371c      	adds	r7, #28
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800061c:	2b00      	cmp	r3, #0
 800061e:	d101      	bne.n	8000624 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000620:	2301      	movs	r3, #1
 8000622:	e000      	b.n	8000626 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000632:	b480      	push	{r7}
 8000634:	b087      	sub	sp, #28
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3330      	adds	r3, #48	@ 0x30
 8000642:	461a      	mov	r2, r3
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	0a1b      	lsrs	r3, r3, #8
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	f003 030c 	and.w	r3, r3, #12
 800064e:	4413      	add	r3, r2
 8000650:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	211f      	movs	r1, #31
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	401a      	ands	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	0e9b      	lsrs	r3, r3, #26
 800066a:	f003 011f 	and.w	r1, r3, #31
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	f003 031f 	and.w	r3, r3, #31
 8000674:	fa01 f303 	lsl.w	r3, r1, r3
 8000678:	431a      	orrs	r2, r3
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800067e:	bf00      	nop
 8000680:	371c      	adds	r7, #28
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800068a:	b480      	push	{r7}
 800068c:	b087      	sub	sp, #28
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3314      	adds	r3, #20
 800069a:	461a      	mov	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	0e5b      	lsrs	r3, r3, #25
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	4413      	add	r3, r2
 80006a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	0d1b      	lsrs	r3, r3, #20
 80006b2:	f003 031f 	and.w	r3, r3, #31
 80006b6:	2107      	movs	r1, #7
 80006b8:	fa01 f303 	lsl.w	r3, r1, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	401a      	ands	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	0d1b      	lsrs	r3, r3, #20
 80006c4:	f003 031f 	and.w	r3, r3, #31
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	431a      	orrs	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80006d4:	bf00      	nop
 80006d6:	371c      	adds	r7, #28
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80006f8:	43db      	mvns	r3, r3
 80006fa:	401a      	ands	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f003 0318 	and.w	r3, r3, #24
 8000702:	4908      	ldr	r1, [pc, #32]	@ (8000724 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000704:	40d9      	lsrs	r1, r3
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	400b      	ands	r3, r1
 800070a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800070e:	431a      	orrs	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	000fffff 	.word	0x000fffff

08000728 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	f003 031f 	and.w	r3, r3, #31
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	689a      	ldr	r2, [r3, #8]
 800076c:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <LL_ADC_DisableDeepPowerDown+0x20>)
 800076e:	4013      	ands	r3, r2
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	6093      	str	r3, [r2, #8]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	5fffffc0 	.word	0x5fffffc0

08000784 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000794:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000798:	d101      	bne.n	800079e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	6fffffc0 	.word	0x6fffffc0

080007d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80007e8:	d101      	bne.n	80007ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80007ea:	2301      	movs	r3, #1
 80007ec:	e000      	b.n	80007f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	689a      	ldr	r2, [r3, #8]
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <LL_ADC_Enable+0x24>)
 800080a:	4013      	ands	r3, r2
 800080c:	f043 0201 	orr.w	r2, r3, #1
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	7fffffc0 	.word	0x7fffffc0

08000824 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <LL_ADC_Disable+0x24>)
 8000832:	4013      	ands	r3, r2
 8000834:	f043 0202 	orr.w	r2, r3, #2
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	7fffffc0 	.word	0x7fffffc0

0800084c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b01      	cmp	r3, #1
 800085e:	d101      	bne.n	8000864 <LL_ADC_IsEnabled+0x18>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <LL_ADC_IsEnabled+0x1a>
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	2b02      	cmp	r3, #2
 8000884:	d101      	bne.n	800088a <LL_ADC_IsDisableOngoing+0x18>
 8000886:	2301      	movs	r3, #1
 8000888:	e000      	b.n	800088c <LL_ADC_IsDisableOngoing+0x1a>
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689a      	ldr	r2, [r3, #8]
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <LL_ADC_REG_StartConversion+0x24>)
 80008a6:	4013      	ands	r3, r2
 80008a8:	f043 0204 	orr.w	r2, r3, #4
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	7fffffc0 	.word	0x7fffffc0

080008c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d101      	bne.n	80008d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d101      	bne.n	80008fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b089      	sub	sp, #36	@ 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000914:	2300      	movs	r3, #0
 8000916:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e18f      	b.n	8000c46 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000930:	2b00      	cmp	r3, #0
 8000932:	d109      	bne.n	8000948 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f00e fc25 	bl	800f184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff19 	bl	8000784 <LL_ADC_IsDeepPowerDownEnabled>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d004      	beq.n	8000962 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff feff 	bl	8000760 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff34 	bl	80007d4 <LL_ADC_IsInternalRegulatorEnabled>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d114      	bne.n	800099c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff18 	bl	80007ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800097c:	4b87      	ldr	r3, [pc, #540]	@ (8000b9c <HAL_ADC_Init+0x290>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	099b      	lsrs	r3, r3, #6
 8000982:	4a87      	ldr	r2, [pc, #540]	@ (8000ba0 <HAL_ADC_Init+0x294>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	099b      	lsrs	r3, r3, #6
 800098a:	3301      	adds	r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800098e:	e002      	b.n	8000996 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	3b01      	subs	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1f9      	bne.n	8000990 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff17 	bl	80007d4 <LL_ADC_IsInternalRegulatorEnabled>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10d      	bne.n	80009c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009b0:	f043 0210 	orr.w	r2, r3, #16
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009bc:	f043 0201 	orr.w	r2, r3, #1
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff77 	bl	80008c0 <LL_ADC_REG_IsConversionOngoing>
 80009d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009d8:	f003 0310 	and.w	r3, r3, #16
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f040 8129 	bne.w	8000c34 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f040 8125 	bne.w	8000c34 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009ee:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80009f2:	f043 0202 	orr.w	r2, r3, #2
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff24 	bl	800084c <LL_ADC_IsEnabled>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d136      	bne.n	8000a78 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a65      	ldr	r2, [pc, #404]	@ (8000ba4 <HAL_ADC_Init+0x298>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d004      	beq.n	8000a1e <HAL_ADC_Init+0x112>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a63      	ldr	r2, [pc, #396]	@ (8000ba8 <HAL_ADC_Init+0x29c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d10e      	bne.n	8000a3c <HAL_ADC_Init+0x130>
 8000a1e:	4861      	ldr	r0, [pc, #388]	@ (8000ba4 <HAL_ADC_Init+0x298>)
 8000a20:	f7ff ff14 	bl	800084c <LL_ADC_IsEnabled>
 8000a24:	4604      	mov	r4, r0
 8000a26:	4860      	ldr	r0, [pc, #384]	@ (8000ba8 <HAL_ADC_Init+0x29c>)
 8000a28:	f7ff ff10 	bl	800084c <LL_ADC_IsEnabled>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4323      	orrs	r3, r4
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bf0c      	ite	eq
 8000a34:	2301      	moveq	r3, #1
 8000a36:	2300      	movne	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	e008      	b.n	8000a4e <HAL_ADC_Init+0x142>
 8000a3c:	485b      	ldr	r0, [pc, #364]	@ (8000bac <HAL_ADC_Init+0x2a0>)
 8000a3e:	f7ff ff05 	bl	800084c <LL_ADC_IsEnabled>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf0c      	ite	eq
 8000a48:	2301      	moveq	r3, #1
 8000a4a:	2300      	movne	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d012      	beq.n	8000a78 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a53      	ldr	r2, [pc, #332]	@ (8000ba4 <HAL_ADC_Init+0x298>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d004      	beq.n	8000a66 <HAL_ADC_Init+0x15a>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a51      	ldr	r2, [pc, #324]	@ (8000ba8 <HAL_ADC_Init+0x29c>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <HAL_ADC_Init+0x15e>
 8000a66:	4a52      	ldr	r2, [pc, #328]	@ (8000bb0 <HAL_ADC_Init+0x2a4>)
 8000a68:	e000      	b.n	8000a6c <HAL_ADC_Init+0x160>
 8000a6a:	4a52      	ldr	r2, [pc, #328]	@ (8000bb4 <HAL_ADC_Init+0x2a8>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4619      	mov	r1, r3
 8000a72:	4610      	mov	r0, r2
 8000a74:	f7ff fd42 	bl	80004fc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000a78:	f7ff fd34 	bl	80004e4 <HAL_GetREVID>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d914      	bls.n	8000ab0 <HAL_ADC_Init+0x1a4>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	2b10      	cmp	r3, #16
 8000a8c:	d110      	bne.n	8000ab0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7d5b      	ldrb	r3, [r3, #21]
 8000a92:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000a98:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000a9e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7f1b      	ldrb	r3, [r3, #28]
 8000aa4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000aa6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000aa8:	f043 030c 	orr.w	r3, r3, #12
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	e00d      	b.n	8000acc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7d5b      	ldrb	r3, [r3, #21]
 8000ab4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000aba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000ac0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7f1b      	ldrb	r3, [r3, #28]
 8000ac6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7f1b      	ldrb	r3, [r3, #28]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d106      	bne.n	8000ae2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6a1b      	ldr	r3, [r3, #32]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	045b      	lsls	r3, r3, #17
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d009      	beq.n	8000afe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aee:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <HAL_ADC_Init+0x2ac>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	69b9      	ldr	r1, [r7, #24]
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fed2 	bl	80008c0 <LL_ADC_REG_IsConversionOngoing>
 8000b1c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fedf 	bl	80008e6 <LL_ADC_INJ_IsConversionOngoing>
 8000b28:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d15f      	bne.n	8000bf0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d15c      	bne.n	8000bf0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7d1b      	ldrb	r3, [r3, #20]
 8000b3a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8000b40:	4313      	orrs	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bbc <HAL_ADC_Init+0x2b0>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	69b9      	ldr	r1, [r7, #24]
 8000b54:	430b      	orrs	r3, r1
 8000b56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d130      	bne.n	8000bc4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b66:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_ADC_Init+0x2b4>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000b76:	3a01      	subs	r2, #1
 8000b78:	0411      	lsls	r1, r2, #16
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000b7e:	4311      	orrs	r1, r2
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000b84:	4311      	orrs	r1, r2
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0201 	orr.w	r2, r2, #1
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	e01c      	b.n	8000bd4 <HAL_ADC_Init+0x2c8>
 8000b9a:	bf00      	nop
 8000b9c:	24000094 	.word	0x24000094
 8000ba0:	053e2d63 	.word	0x053e2d63
 8000ba4:	40022000 	.word	0x40022000
 8000ba8:	40022100 	.word	0x40022100
 8000bac:	58026000 	.word	0x58026000
 8000bb0:	40022300 	.word	0x40022300
 8000bb4:	58026300 	.word	0x58026300
 8000bb8:	fff0c003 	.word	0xfff0c003
 8000bbc:	ffffbffc 	.word	0xffffbffc
 8000bc0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	691a      	ldr	r2, [r3, #16]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 0201 	bic.w	r2, r2, #1
 8000bd2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 fe42 	bl	8001874 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d10c      	bne.n	8000c12 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f023 010f 	bic.w	r1, r3, #15
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c10:	e007      	b.n	8000c22 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 020f 	bic.w	r2, r2, #15
 8000c20:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c26:	f023 0303 	bic.w	r3, r3, #3
 8000c2a:	f043 0201 	orr.w	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c32:	e007      	b.n	8000c44 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c38:	f043 0210 	orr.w	r2, r3, #16
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	bf00      	nop

08000c50 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a5c      	ldr	r2, [pc, #368]	@ (8000dd0 <HAL_ADC_Start+0x180>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d004      	beq.n	8000c6c <HAL_ADC_Start+0x1c>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a5b      	ldr	r2, [pc, #364]	@ (8000dd4 <HAL_ADC_Start+0x184>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d101      	bne.n	8000c70 <HAL_ADC_Start+0x20>
 8000c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd8 <HAL_ADC_Start+0x188>)
 8000c6e:	e000      	b.n	8000c72 <HAL_ADC_Start+0x22>
 8000c70:	4b5a      	ldr	r3, [pc, #360]	@ (8000ddc <HAL_ADC_Start+0x18c>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fd58 	bl	8000728 <LL_ADC_GetMultimode>
 8000c78:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe1e 	bl	80008c0 <LL_ADC_REG_IsConversionOngoing>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 809a 	bne.w	8000dc0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d101      	bne.n	8000c9a <HAL_ADC_Start+0x4a>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e095      	b.n	8000dc6 <HAL_ADC_Start+0x176>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fcfc 	bl	80016a0 <ADC_Enable>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 8081 	bne.w	8000db6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000cb8:	4b49      	ldr	r3, [pc, #292]	@ (8000de0 <HAL_ADC_Start+0x190>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a42      	ldr	r2, [pc, #264]	@ (8000dd4 <HAL_ADC_Start+0x184>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d002      	beq.n	8000cd4 <HAL_ADC_Start+0x84>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	e000      	b.n	8000cd6 <HAL_ADC_Start+0x86>
 8000cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd0 <HAL_ADC_Start+0x180>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d002      	beq.n	8000ce4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d105      	bne.n	8000cf0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ce8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000cfc:	d106      	bne.n	8000d0c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	f023 0206 	bic.w	r2, r3, #6
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d0a:	e002      	b.n	8000d12 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	221c      	movs	r2, #28
 8000d18:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a2b      	ldr	r2, [pc, #172]	@ (8000dd4 <HAL_ADC_Start+0x184>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d002      	beq.n	8000d32 <HAL_ADC_Start+0xe2>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	e000      	b.n	8000d34 <HAL_ADC_Start+0xe4>
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <HAL_ADC_Start+0x180>)
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d008      	beq.n	8000d4e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	2b05      	cmp	r3, #5
 8000d46:	d002      	beq.n	8000d4e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	2b09      	cmp	r3, #9
 8000d4c:	d114      	bne.n	8000d78 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d007      	beq.n	8000d6c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fd91 	bl	8000898 <LL_ADC_REG_StartConversion>
 8000d76:	e025      	b.n	8000dc4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d7c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <HAL_ADC_Start+0x184>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d002      	beq.n	8000d94 <HAL_ADC_Start+0x144>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	e000      	b.n	8000d96 <HAL_ADC_Start+0x146>
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_ADC_Start+0x180>)
 8000d96:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00f      	beq.n	8000dc4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000da8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	655a      	str	r2, [r3, #84]	@ 0x54
 8000db4:	e006      	b.n	8000dc4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000dbe:	e001      	b.n	8000dc4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000
 8000dd4:	40022100 	.word	0x40022100
 8000dd8:	40022300 	.word	0x40022300
 8000ddc:	58026300 	.word	0x58026300
 8000de0:	fffff0fe 	.word	0xfffff0fe

08000de4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a72      	ldr	r2, [pc, #456]	@ (8000fbc <HAL_ADC_PollForConversion+0x1d8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d004      	beq.n	8000e02 <HAL_ADC_PollForConversion+0x1e>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a70      	ldr	r2, [pc, #448]	@ (8000fc0 <HAL_ADC_PollForConversion+0x1dc>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_ADC_PollForConversion+0x22>
 8000e02:	4b70      	ldr	r3, [pc, #448]	@ (8000fc4 <HAL_ADC_PollForConversion+0x1e0>)
 8000e04:	e000      	b.n	8000e08 <HAL_ADC_PollForConversion+0x24>
 8000e06:	4b70      	ldr	r3, [pc, #448]	@ (8000fc8 <HAL_ADC_PollForConversion+0x1e4>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fc8d 	bl	8000728 <LL_ADC_GetMultimode>
 8000e0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d102      	bne.n	8000e1e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	61fb      	str	r3, [r7, #28]
 8000e1c:	e037      	b.n	8000e8e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d002      	beq.n	8000e30 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d111      	bne.n	8000e54 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d007      	beq.n	8000e4e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e42:	f043 0220 	orr.w	r2, r3, #32
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e0b1      	b.n	8000fb2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000e4e:	2304      	movs	r3, #4
 8000e50:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8000e52:	e01c      	b.n	8000e8e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a58      	ldr	r2, [pc, #352]	@ (8000fbc <HAL_ADC_PollForConversion+0x1d8>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d004      	beq.n	8000e68 <HAL_ADC_PollForConversion+0x84>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a57      	ldr	r2, [pc, #348]	@ (8000fc0 <HAL_ADC_PollForConversion+0x1dc>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d101      	bne.n	8000e6c <HAL_ADC_PollForConversion+0x88>
 8000e68:	4b56      	ldr	r3, [pc, #344]	@ (8000fc4 <HAL_ADC_PollForConversion+0x1e0>)
 8000e6a:	e000      	b.n	8000e6e <HAL_ADC_PollForConversion+0x8a>
 8000e6c:	4b56      	ldr	r3, [pc, #344]	@ (8000fc8 <HAL_ADC_PollForConversion+0x1e4>)
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fc68 	bl	8000744 <LL_ADC_GetMultiDMATransfer>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d007      	beq.n	8000e8a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e7e:	f043 0220 	orr.w	r2, r3, #32
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e093      	b.n	8000fb2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e8e:	f7ff faf9 	bl	8000484 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000e94:	e021      	b.n	8000eda <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d01d      	beq.n	8000eda <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000e9e:	f7ff faf1 	bl	8000484 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d302      	bcc.n	8000eb4 <HAL_ADC_PollForConversion+0xd0>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d112      	bne.n	8000eda <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10b      	bne.n	8000eda <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ec6:	f043 0204 	orr.w	r2, r3, #4
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e06b      	b.n	8000fb2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0d6      	beq.n	8000e96 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fb87 	bl	800060c <LL_ADC_REG_IsTriggerSourceSWStart>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d01c      	beq.n	8000f3e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7d5b      	ldrb	r3, [r3, #21]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d118      	bne.n	8000f3e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d111      	bne.n	8000f3e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f36:	f043 0201 	orr.w	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc0 <HAL_ADC_PollForConversion+0x1dc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d002      	beq.n	8000f4e <HAL_ADC_PollForConversion+0x16a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	e000      	b.n	8000f50 <HAL_ADC_PollForConversion+0x16c>
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <HAL_ADC_PollForConversion+0x1d8>)
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	6812      	ldr	r2, [r2, #0]
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d008      	beq.n	8000f6a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b05      	cmp	r3, #5
 8000f62:	d002      	beq.n	8000f6a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b09      	cmp	r3, #9
 8000f68:	d104      	bne.n	8000f74 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	e00c      	b.n	8000f8e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a11      	ldr	r2, [pc, #68]	@ (8000fc0 <HAL_ADC_PollForConversion+0x1dc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d002      	beq.n	8000f84 <HAL_ADC_PollForConversion+0x1a0>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	e000      	b.n	8000f86 <HAL_ADC_PollForConversion+0x1a2>
 8000f84:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_ADC_PollForConversion+0x1d8>)
 8000f86:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d104      	bne.n	8000f9e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2208      	movs	r2, #8
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e008      	b.n	8000fb0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d103      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	220c      	movs	r2, #12
 8000fae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40022000 	.word	0x40022000
 8000fc0:	40022100 	.word	0x40022100
 8000fc4:	40022300 	.word	0x40022300
 8000fc8:	58026300 	.word	0x58026300

08000fcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b0a1      	sub	sp, #132	@ 0x84
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4a65      	ldr	r2, [pc, #404]	@ (8001198 <HAL_ADC_ConfigChannel+0x1b0>)
 8001002:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <HAL_ADC_ConfigChannel+0x2a>
 800100e:	2302      	movs	r3, #2
 8001010:	e32e      	b.n	8001670 <HAL_ADC_ConfigChannel+0x688>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fc4e 	bl	80008c0 <LL_ADC_REG_IsConversionOngoing>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 8313 	bne.w	8001652 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db2c      	blt.n	800108e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800103c:	2b00      	cmp	r3, #0
 800103e:	d108      	bne.n	8001052 <HAL_ADC_ConfigChannel+0x6a>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0e9b      	lsrs	r3, r3, #26
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	2201      	movs	r2, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	e016      	b.n	8001080 <HAL_ADC_ConfigChannel+0x98>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001060:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001062:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800106a:	2320      	movs	r3, #32
 800106c:	e003      	b.n	8001076 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800106e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001070:	fab3 f383 	clz	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	2201      	movs	r2, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	69d1      	ldr	r1, [r2, #28]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	430b      	orrs	r3, r1
 800108c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	6859      	ldr	r1, [r3, #4]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	f7ff fac9 	bl	8000632 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fc0b 	bl	80008c0 <LL_ADC_REG_IsConversionOngoing>
 80010aa:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fc18 	bl	80008e6 <LL_ADC_INJ_IsConversionOngoing>
 80010b6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 80b8 	bne.w	8001230 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f040 80b4 	bne.w	8001230 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f7ff fad8 	bl	800068a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80010da:	4b30      	ldr	r3, [pc, #192]	@ (800119c <HAL_ADC_ConfigChannel+0x1b4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80010e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010e6:	d10b      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x118>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	e01d      	b.n	800113c <HAL_ADC_ConfigChannel+0x154>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10b      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x13e>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	e00a      	b.n	800113c <HAL_ADC_ConfigChannel+0x154>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d02c      	beq.n	80011a0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	6919      	ldr	r1, [r3, #16]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001154:	f7ff fa06 	bl	8000564 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	6919      	ldr	r1, [r3, #16]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	7e5b      	ldrb	r3, [r3, #25]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d102      	bne.n	800116e <HAL_ADC_ConfigChannel+0x186>
 8001168:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800116c:	e000      	b.n	8001170 <HAL_ADC_ConfigChannel+0x188>
 800116e:	2300      	movs	r3, #0
 8001170:	461a      	mov	r2, r3
 8001172:	f7ff fa30 	bl	80005d6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	6919      	ldr	r1, [r3, #16]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d102      	bne.n	800118c <HAL_ADC_ConfigChannel+0x1a4>
 8001186:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800118a:	e000      	b.n	800118e <HAL_ADC_ConfigChannel+0x1a6>
 800118c:	2300      	movs	r3, #0
 800118e:	461a      	mov	r2, r3
 8001190:	f7ff fa08 	bl	80005a4 <LL_ADC_SetDataRightShift>
 8001194:	e04c      	b.n	8001230 <HAL_ADC_ConfigChannel+0x248>
 8001196:	bf00      	nop
 8001198:	47ff0000 	.word	0x47ff0000
 800119c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	069b      	lsls	r3, r3, #26
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d107      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011c2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80011ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	069b      	lsls	r3, r3, #26
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d107      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011e6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	069b      	lsls	r3, r3, #26
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d107      	bne.n	800120c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800120a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001212:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	069b      	lsls	r3, r3, #26
 800121c:	429a      	cmp	r2, r3
 800121e:	d107      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800122e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fb09 	bl	800084c <LL_ADC_IsEnabled>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 8211 	bne.w	8001664 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6819      	ldr	r1, [r3, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	461a      	mov	r2, r3
 8001250:	f7ff fa46 	bl	80006e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4aa1      	ldr	r2, [pc, #644]	@ (80014e0 <HAL_ADC_ConfigChannel+0x4f8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	f040 812e 	bne.w	80014bc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x2a0>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0e9b      	lsrs	r3, r3, #26
 8001276:	3301      	adds	r3, #1
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	2b09      	cmp	r3, #9
 800127e:	bf94      	ite	ls
 8001280:	2301      	movls	r3, #1
 8001282:	2300      	movhi	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	e019      	b.n	80012bc <HAL_ADC_ConfigChannel+0x2d4>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001290:	fa93 f3a3 	rbit	r3, r3
 8001294:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001298:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800129a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80012a0:	2320      	movs	r3, #32
 80012a2:	e003      	b.n	80012ac <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80012a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	3301      	adds	r3, #1
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	2b09      	cmp	r3, #9
 80012b4:	bf94      	ite	ls
 80012b6:	2301      	movls	r3, #1
 80012b8:	2300      	movhi	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d079      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d107      	bne.n	80012dc <HAL_ADC_ConfigChannel+0x2f4>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0e9b      	lsrs	r3, r3, #26
 80012d2:	3301      	adds	r3, #1
 80012d4:	069b      	lsls	r3, r3, #26
 80012d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012da:	e015      	b.n	8001308 <HAL_ADC_ConfigChannel+0x320>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80012ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80012ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80012f4:	2320      	movs	r3, #32
 80012f6:	e003      	b.n	8001300 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80012f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012fa:	fab3 f383 	clz	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	3301      	adds	r3, #1
 8001302:	069b      	lsls	r3, r3, #26
 8001304:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x340>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0e9b      	lsrs	r3, r3, #26
 800131a:	3301      	adds	r3, #1
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	e017      	b.n	8001358 <HAL_ADC_ConfigChannel+0x370>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001338:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800133a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001340:	2320      	movs	r3, #32
 8001342:	e003      	b.n	800134c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	2101      	movs	r1, #1
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	ea42 0103 	orr.w	r1, r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10a      	bne.n	800137e <HAL_ADC_ConfigChannel+0x396>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0e9b      	lsrs	r3, r3, #26
 800136e:	3301      	adds	r3, #1
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	051b      	lsls	r3, r3, #20
 800137c:	e018      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x3c8>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800138c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800138e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001396:	2320      	movs	r3, #32
 8001398:	e003      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800139a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800139c:	fab3 f383 	clz	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013b0:	430b      	orrs	r3, r1
 80013b2:	e07e      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d107      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x3e8>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0e9b      	lsrs	r3, r3, #26
 80013c6:	3301      	adds	r3, #1
 80013c8:	069b      	lsls	r3, r3, #26
 80013ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013ce:	e015      	b.n	80013fc <HAL_ADC_ConfigChannel+0x414>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80013e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80013e8:	2320      	movs	r3, #32
 80013ea:	e003      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80013ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	069b      	lsls	r3, r3, #26
 80013f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001404:	2b00      	cmp	r3, #0
 8001406:	d109      	bne.n	800141c <HAL_ADC_ConfigChannel+0x434>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0e9b      	lsrs	r3, r3, #26
 800140e:	3301      	adds	r3, #1
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	2101      	movs	r1, #1
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	e017      	b.n	800144c <HAL_ADC_ConfigChannel+0x464>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	61bb      	str	r3, [r7, #24]
  return result;
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8001434:	2320      	movs	r3, #32
 8001436:	e003      	b.n	8001440 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	ea42 0103 	orr.w	r1, r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10d      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x490>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0e9b      	lsrs	r3, r3, #26
 8001462:	3301      	adds	r3, #1
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	3b1e      	subs	r3, #30
 8001470:	051b      	lsls	r3, r3, #20
 8001472:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001476:	e01b      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x4c8>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	60fb      	str	r3, [r7, #12]
  return result;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001490:	2320      	movs	r3, #32
 8001492:	e003      	b.n	800149c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	3301      	adds	r3, #1
 800149e:	f003 021f 	and.w	r2, r3, #31
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	3b1e      	subs	r3, #30
 80014aa:	051b      	lsls	r3, r3, #20
 80014ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014b0:	430b      	orrs	r3, r1
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	6892      	ldr	r2, [r2, #8]
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff f8e7 	bl	800068a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f280 80cf 	bge.w	8001664 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <HAL_ADC_ConfigChannel+0x4fc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d004      	beq.n	80014da <HAL_ADC_ConfigChannel+0x4f2>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_ADC_ConfigChannel+0x500>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10a      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x508>
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <HAL_ADC_ConfigChannel+0x504>)
 80014dc:	e009      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x50a>
 80014de:	bf00      	nop
 80014e0:	47ff0000 	.word	0x47ff0000
 80014e4:	40022000 	.word	0x40022000
 80014e8:	40022100 	.word	0x40022100
 80014ec:	40022300 	.word	0x40022300
 80014f0:	4b61      	ldr	r3, [pc, #388]	@ (8001678 <HAL_ADC_ConfigChannel+0x690>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f828 	bl	8000548 <LL_ADC_GetCommonPathInternalCh>
 80014f8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a5f      	ldr	r2, [pc, #380]	@ (800167c <HAL_ADC_ConfigChannel+0x694>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d004      	beq.n	800150e <HAL_ADC_ConfigChannel+0x526>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a5d      	ldr	r2, [pc, #372]	@ (8001680 <HAL_ADC_ConfigChannel+0x698>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10e      	bne.n	800152c <HAL_ADC_ConfigChannel+0x544>
 800150e:	485b      	ldr	r0, [pc, #364]	@ (800167c <HAL_ADC_ConfigChannel+0x694>)
 8001510:	f7ff f99c 	bl	800084c <LL_ADC_IsEnabled>
 8001514:	4604      	mov	r4, r0
 8001516:	485a      	ldr	r0, [pc, #360]	@ (8001680 <HAL_ADC_ConfigChannel+0x698>)
 8001518:	f7ff f998 	bl	800084c <LL_ADC_IsEnabled>
 800151c:	4603      	mov	r3, r0
 800151e:	4323      	orrs	r3, r4
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	e008      	b.n	800153e <HAL_ADC_ConfigChannel+0x556>
 800152c:	4855      	ldr	r0, [pc, #340]	@ (8001684 <HAL_ADC_ConfigChannel+0x69c>)
 800152e:	f7ff f98d 	bl	800084c <LL_ADC_IsEnabled>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d07d      	beq.n	800163e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a50      	ldr	r2, [pc, #320]	@ (8001688 <HAL_ADC_ConfigChannel+0x6a0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d130      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x5c6>
 800154c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800154e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d12b      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a4a      	ldr	r2, [pc, #296]	@ (8001684 <HAL_ADC_ConfigChannel+0x69c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	f040 8081 	bne.w	8001664 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a45      	ldr	r2, [pc, #276]	@ (800167c <HAL_ADC_ConfigChannel+0x694>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d004      	beq.n	8001576 <HAL_ADC_ConfigChannel+0x58e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a43      	ldr	r2, [pc, #268]	@ (8001680 <HAL_ADC_ConfigChannel+0x698>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_ADC_ConfigChannel+0x592>
 8001576:	4a45      	ldr	r2, [pc, #276]	@ (800168c <HAL_ADC_ConfigChannel+0x6a4>)
 8001578:	e000      	b.n	800157c <HAL_ADC_ConfigChannel+0x594>
 800157a:	4a3f      	ldr	r2, [pc, #252]	@ (8001678 <HAL_ADC_ConfigChannel+0x690>)
 800157c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800157e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001582:	4619      	mov	r1, r3
 8001584:	4610      	mov	r0, r2
 8001586:	f7fe ffcc 	bl	8000522 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800158a:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <HAL_ADC_ConfigChannel+0x6a8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	099b      	lsrs	r3, r3, #6
 8001590:	4a40      	ldr	r2, [pc, #256]	@ (8001694 <HAL_ADC_ConfigChannel+0x6ac>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	099b      	lsrs	r3, r3, #6
 8001598:	3301      	adds	r3, #1
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800159e:	e002      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f9      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80015ac:	e05a      	b.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a39      	ldr	r2, [pc, #228]	@ (8001698 <HAL_ADC_ConfigChannel+0x6b0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d11e      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x60e>
 80015b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d119      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001684 <HAL_ADC_ConfigChannel+0x69c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d14b      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a2a      	ldr	r2, [pc, #168]	@ (800167c <HAL_ADC_ConfigChannel+0x694>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_ConfigChannel+0x5f8>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a29      	ldr	r2, [pc, #164]	@ (8001680 <HAL_ADC_ConfigChannel+0x698>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x5fc>
 80015e0:	4a2a      	ldr	r2, [pc, #168]	@ (800168c <HAL_ADC_ConfigChannel+0x6a4>)
 80015e2:	e000      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x5fe>
 80015e4:	4a24      	ldr	r2, [pc, #144]	@ (8001678 <HAL_ADC_ConfigChannel+0x690>)
 80015e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ec:	4619      	mov	r1, r3
 80015ee:	4610      	mov	r0, r2
 80015f0:	f7fe ff97 	bl	8000522 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80015f4:	e036      	b.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a28      	ldr	r2, [pc, #160]	@ (800169c <HAL_ADC_ConfigChannel+0x6b4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d131      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
 8001600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d12c      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1d      	ldr	r2, [pc, #116]	@ (8001684 <HAL_ADC_ConfigChannel+0x69c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d127      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a18      	ldr	r2, [pc, #96]	@ (800167c <HAL_ADC_ConfigChannel+0x694>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d004      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x640>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_ADC_ConfigChannel+0x698>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d101      	bne.n	800162c <HAL_ADC_ConfigChannel+0x644>
 8001628:	4a18      	ldr	r2, [pc, #96]	@ (800168c <HAL_ADC_ConfigChannel+0x6a4>)
 800162a:	e000      	b.n	800162e <HAL_ADC_ConfigChannel+0x646>
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <HAL_ADC_ConfigChannel+0x690>)
 800162e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001630:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f7fe ff73 	bl	8000522 <LL_ADC_SetCommonPathInternalCh>
 800163c:	e012      	b.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001642:	f043 0220 	orr.w	r2, r3, #32
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001650:	e008      	b.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001656:	f043 0220 	orr.w	r2, r3, #32
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800166c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001670:	4618      	mov	r0, r3
 8001672:	3784      	adds	r7, #132	@ 0x84
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	58026300 	.word	0x58026300
 800167c:	40022000 	.word	0x40022000
 8001680:	40022100 	.word	0x40022100
 8001684:	58026000 	.word	0x58026000
 8001688:	cb840000 	.word	0xcb840000
 800168c:	40022300 	.word	0x40022300
 8001690:	24000094 	.word	0x24000094
 8001694:	053e2d63 	.word	0x053e2d63
 8001698:	c7520000 	.word	0xc7520000
 800169c:	cfb80000 	.word	0xcfb80000

080016a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff f8cd 	bl	800084c <LL_ADC_IsEnabled>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d16e      	bne.n	8001796 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	4b38      	ldr	r3, [pc, #224]	@ (80017a0 <ADC_Enable+0x100>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00d      	beq.n	80016e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ca:	f043 0210 	orr.w	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	f043 0201 	orr.w	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e05a      	b.n	8001798 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f888 	bl	80007fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80016ec:	f7fe feca 	bl	8000484 <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a2b      	ldr	r2, [pc, #172]	@ (80017a4 <ADC_Enable+0x104>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d004      	beq.n	8001706 <ADC_Enable+0x66>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a29      	ldr	r2, [pc, #164]	@ (80017a8 <ADC_Enable+0x108>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <ADC_Enable+0x6a>
 8001706:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <ADC_Enable+0x10c>)
 8001708:	e000      	b.n	800170c <ADC_Enable+0x6c>
 800170a:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <ADC_Enable+0x110>)
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff f80b 	bl	8000728 <LL_ADC_GetMultimode>
 8001712:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a23      	ldr	r2, [pc, #140]	@ (80017a8 <ADC_Enable+0x108>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d002      	beq.n	8001724 <ADC_Enable+0x84>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	e000      	b.n	8001726 <ADC_Enable+0x86>
 8001724:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <ADC_Enable+0x104>)
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d130      	bne.n	8001796 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001734:	e028      	b.n	8001788 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f886 	bl	800084c <LL_ADC_IsEnabled>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d104      	bne.n	8001750 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f856 	bl	80007fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001750:	f7fe fe98 	bl	8000484 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d914      	bls.n	8001788 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b01      	cmp	r3, #1
 800176a:	d00d      	beq.n	8001788 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001770:	f043 0210 	orr.w	r2, r3, #16
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e007      	b.n	8001798 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b01      	cmp	r3, #1
 8001794:	d1cf      	bne.n	8001736 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	8000003f 	.word	0x8000003f
 80017a4:	40022000 	.word	0x40022000
 80017a8:	40022100 	.word	0x40022100
 80017ac:	40022300 	.word	0x40022300
 80017b0:	58026300 	.word	0x58026300

080017b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f856 	bl	8000872 <LL_ADC_IsDisableOngoing>
 80017c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff f83d 	bl	800084c <LL_ADC_IsEnabled>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d047      	beq.n	8001868 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d144      	bne.n	8001868 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030d 	and.w	r3, r3, #13
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d10c      	bne.n	8001806 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f817 	bl	8000824 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2203      	movs	r2, #3
 80017fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017fe:	f7fe fe41 	bl	8000484 <HAL_GetTick>
 8001802:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001804:	e029      	b.n	800185a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180a:	f043 0210 	orr.w	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e023      	b.n	800186a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001822:	f7fe fe2f 	bl	8000484 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d914      	bls.n	800185a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00d      	beq.n	800185a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001842:	f043 0210 	orr.w	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	f043 0201 	orr.w	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e007      	b.n	800186a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1dc      	bne.n	8001822 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a7a      	ldr	r2, [pc, #488]	@ (8001a6c <ADC_ConfigureBoostMode+0x1f8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d004      	beq.n	8001890 <ADC_ConfigureBoostMode+0x1c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a79      	ldr	r2, [pc, #484]	@ (8001a70 <ADC_ConfigureBoostMode+0x1fc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d109      	bne.n	80018a4 <ADC_ConfigureBoostMode+0x30>
 8001890:	4b78      	ldr	r3, [pc, #480]	@ (8001a74 <ADC_ConfigureBoostMode+0x200>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	e008      	b.n	80018b6 <ADC_ConfigureBoostMode+0x42>
 80018a4:	4b74      	ldr	r3, [pc, #464]	@ (8001a78 <ADC_ConfigureBoostMode+0x204>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01c      	beq.n	80018f4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80018ba:	f003 ffd1 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 80018be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80018c8:	d010      	beq.n	80018ec <ADC_ConfigureBoostMode+0x78>
 80018ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80018ce:	d873      	bhi.n	80019b8 <ADC_ConfigureBoostMode+0x144>
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d4:	d002      	beq.n	80018dc <ADC_ConfigureBoostMode+0x68>
 80018d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80018da:	d16d      	bne.n	80019b8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	60fb      	str	r3, [r7, #12]
        break;
 80018ea:	e068      	b.n	80019be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	60fb      	str	r3, [r7, #12]
        break;
 80018f2:	e064      	b.n	80019be <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80018f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	f005 fa42 	bl	8006d84 <HAL_RCCEx_GetPeriphCLKFreq>
 8001900:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800190a:	d051      	beq.n	80019b0 <ADC_ConfigureBoostMode+0x13c>
 800190c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001910:	d854      	bhi.n	80019bc <ADC_ConfigureBoostMode+0x148>
 8001912:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001916:	d047      	beq.n	80019a8 <ADC_ConfigureBoostMode+0x134>
 8001918:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800191c:	d84e      	bhi.n	80019bc <ADC_ConfigureBoostMode+0x148>
 800191e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001922:	d03d      	beq.n	80019a0 <ADC_ConfigureBoostMode+0x12c>
 8001924:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001928:	d848      	bhi.n	80019bc <ADC_ConfigureBoostMode+0x148>
 800192a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800192e:	d033      	beq.n	8001998 <ADC_ConfigureBoostMode+0x124>
 8001930:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001934:	d842      	bhi.n	80019bc <ADC_ConfigureBoostMode+0x148>
 8001936:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800193a:	d029      	beq.n	8001990 <ADC_ConfigureBoostMode+0x11c>
 800193c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001940:	d83c      	bhi.n	80019bc <ADC_ConfigureBoostMode+0x148>
 8001942:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001946:	d01a      	beq.n	800197e <ADC_ConfigureBoostMode+0x10a>
 8001948:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800194c:	d836      	bhi.n	80019bc <ADC_ConfigureBoostMode+0x148>
 800194e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001952:	d014      	beq.n	800197e <ADC_ConfigureBoostMode+0x10a>
 8001954:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001958:	d830      	bhi.n	80019bc <ADC_ConfigureBoostMode+0x148>
 800195a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800195e:	d00e      	beq.n	800197e <ADC_ConfigureBoostMode+0x10a>
 8001960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001964:	d82a      	bhi.n	80019bc <ADC_ConfigureBoostMode+0x148>
 8001966:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800196a:	d008      	beq.n	800197e <ADC_ConfigureBoostMode+0x10a>
 800196c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001970:	d824      	bhi.n	80019bc <ADC_ConfigureBoostMode+0x148>
 8001972:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001976:	d002      	beq.n	800197e <ADC_ConfigureBoostMode+0x10a>
 8001978:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800197c:	d11e      	bne.n	80019bc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	0c9b      	lsrs	r3, r3, #18
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	60fb      	str	r3, [r7, #12]
        break;
 800198e:	e016      	b.n	80019be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	60fb      	str	r3, [r7, #12]
        break;
 8001996:	e012      	b.n	80019be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	60fb      	str	r3, [r7, #12]
        break;
 800199e:	e00e      	b.n	80019be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	099b      	lsrs	r3, r3, #6
 80019a4:	60fb      	str	r3, [r7, #12]
        break;
 80019a6:	e00a      	b.n	80019be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	09db      	lsrs	r3, r3, #7
 80019ac:	60fb      	str	r3, [r7, #12]
        break;
 80019ae:	e006      	b.n	80019be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	60fb      	str	r3, [r7, #12]
        break;
 80019b6:	e002      	b.n	80019be <ADC_ConfigureBoostMode+0x14a>
        break;
 80019b8:	bf00      	nop
 80019ba:	e000      	b.n	80019be <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80019bc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80019be:	f7fe fd91 	bl	80004e4 <HAL_GetREVID>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d815      	bhi.n	80019f8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a2b      	ldr	r2, [pc, #172]	@ (8001a7c <ADC_ConfigureBoostMode+0x208>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d908      	bls.n	80019e6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80019e4:	e03e      	b.n	8001a64 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019f4:	609a      	str	r2, [r3, #8]
}
 80019f6:	e035      	b.n	8001a64 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4a1f      	ldr	r2, [pc, #124]	@ (8001a80 <ADC_ConfigureBoostMode+0x20c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d808      	bhi.n	8001a18 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001a14:	609a      	str	r2, [r3, #8]
}
 8001a16:	e025      	b.n	8001a64 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001a84 <ADC_ConfigureBoostMode+0x210>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d80a      	bhi.n	8001a36 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a32:	609a      	str	r2, [r3, #8]
}
 8001a34:	e016      	b.n	8001a64 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4a13      	ldr	r2, [pc, #76]	@ (8001a88 <ADC_ConfigureBoostMode+0x214>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d80a      	bhi.n	8001a54 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a50:	609a      	str	r2, [r3, #8]
}
 8001a52:	e007      	b.n	8001a64 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001a62:	609a      	str	r2, [r3, #8]
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	40022100 	.word	0x40022100
 8001a74:	40022300 	.word	0x40022300
 8001a78:	58026300 	.word	0x58026300
 8001a7c:	01312d00 	.word	0x01312d00
 8001a80:	005f5e10 	.word	0x005f5e10
 8001a84:	00bebc20 	.word	0x00bebc20
 8001a88:	017d7840 	.word	0x017d7840

08001a8c <LL_ADC_StartCalibration>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <LL_ADC_StartCalibration+0x38>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001aac:	430a      	orrs	r2, r1
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	609a      	str	r2, [r3, #8]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	3ffeffc0 	.word	0x3ffeffc0

08001ac8 <LL_ADC_IsCalibrationOnGoing>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001adc:	d101      	bne.n	8001ae2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_ADCEx_Calibration_Start+0x1e>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e04c      	b.n	8001ba8 <HAL_ADCEx_Calibration_Start+0xb8>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff fe4c 	bl	80017b4 <ADC_Disable>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d135      	bne.n	8001b92 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b2a:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	f043 0202 	orr.w	r2, r3, #2
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ffa4 	bl	8001a8c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001b44:	e014      	b.n	8001b70 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4a19      	ldr	r2, [pc, #100]	@ (8001bb4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d30d      	bcc.n	8001b70 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b58:	f023 0312 	bic.w	r3, r3, #18
 8001b5c:	f043 0210 	orr.w	r2, r3, #16
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e01b      	b.n	8001ba8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ffa7 	bl	8001ac8 <LL_ADC_IsCalibrationOnGoing>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1e2      	bne.n	8001b46 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b84:	f023 0303 	bic.w	r3, r3, #3
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b90:	e005      	b.n	8001b9e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	f043 0210 	orr.w	r2, r3, #16
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	ffffeefd 	.word	0xffffeefd
 8001bb4:	25c3f800 	.word	0x25c3f800

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001be0:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00
 8001bfc:	05fa0000 	.word	0x05fa0000

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4907      	ldr	r1, [pc, #28]	@ (8001c54 <__NVIC_EnableIRQ+0x38>)
 8001c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	@ (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	@ (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	@ 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff4c 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d36:	f7ff ff63 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	6978      	ldr	r0, [r7, #20]
 8001d42:	f7ff ffb3 	bl	8001cac <NVIC_EncodePriority>
 8001d46:	4602      	mov	r2, r0
 8001d48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff82 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff56 	bl	8001c1c <__NVIC_EnableIRQ>
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001d7c:	f3bf 8f5f 	dmb	sy
}
 8001d80:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d82:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <HAL_MPU_Disable+0x28>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	4a06      	ldr	r2, [pc, #24]	@ (8001da0 <HAL_MPU_Disable+0x28>)
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <HAL_MPU_Disable+0x2c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00
 8001da4:	e000ed90 	.word	0xe000ed90

08001da8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001db0:	4a0b      	ldr	r2, [pc, #44]	@ (8001de0 <HAL_MPU_Enable+0x38>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_MPU_Enable+0x3c>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	4a09      	ldr	r2, [pc, #36]	@ (8001de4 <HAL_MPU_Enable+0x3c>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001dc6:	f3bf 8f4f 	dsb	sy
}
 8001dca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dcc:	f3bf 8f6f 	isb	sy
}
 8001dd0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed90 	.word	0xe000ed90
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	785a      	ldrb	r2, [r3, #1]
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_MPU_ConfigRegion+0x7c>)
 8001df6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001df8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <HAL_MPU_ConfigRegion+0x7c>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	@ (8001e64 <HAL_MPU_ConfigRegion+0x7c>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e04:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <HAL_MPU_ConfigRegion+0x7c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7b1b      	ldrb	r3, [r3, #12]
 8001e10:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7adb      	ldrb	r3, [r3, #11]
 8001e16:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7a9b      	ldrb	r3, [r3, #10]
 8001e1e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7b5b      	ldrb	r3, [r3, #13]
 8001e26:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7b9b      	ldrb	r3, [r3, #14]
 8001e2e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7bdb      	ldrb	r3, [r3, #15]
 8001e36:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7a5b      	ldrb	r3, [r3, #9]
 8001e3e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7a1b      	ldrb	r3, [r3, #8]
 8001e46:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e48:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e52:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e54:	6113      	str	r3, [r2, #16]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed90 	.word	0xe000ed90

08001e68 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e014      	b.n	8001ea4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	791b      	ldrb	r3, [r3, #4]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f00d f9f8 	bl	800f280 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e046      	b.n	8001f4e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	795b      	ldrb	r3, [r3, #5]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_DAC_Start+0x20>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e040      	b.n	8001f4e <HAL_DAC_Start+0xa2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d11d      	bne.n	8001f40 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	e014      	b.n	8001f40 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2102      	movs	r1, #2
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0202 	orr.w	r2, r2, #2
 8001f3e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f70:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01d      	beq.n	8001fb8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d018      	beq.n	8001fb8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fb0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f851 	bl	800205a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d01d      	beq.n	8001ffe <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d018      	beq.n	8001ffe <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f043 0202 	orr.w	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001fe6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f97b 	bl	80022f4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002006:	b480      	push	{r7}
 8002008:	b087      	sub	sp, #28
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e015      	b.n	800204e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	3308      	adds	r3, #8
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e004      	b.n	8002044 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	3314      	adds	r3, #20
 8002042:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	461a      	mov	r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_DAC_ConfigChannel+0x1e>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e12a      	b.n	80022e8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	795b      	ldrb	r3, [r3, #5]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_DAC_ConfigChannel+0x2e>
 800209a:	2302      	movs	r3, #2
 800209c:	e124      	b.n	80022e8 <HAL_DAC_ConfigChannel+0x278>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2202      	movs	r2, #2
 80020a8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d17a      	bne.n	80021a8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80020b2:	f7fe f9e7 	bl	8000484 <HAL_GetTick>
 80020b6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d13d      	bne.n	800213a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80020be:	e018      	b.n	80020f2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80020c0:	f7fe f9e0 	bl	8000484 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d911      	bls.n	80020f2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020d4:	4b86      	ldr	r3, [pc, #536]	@ (80022f0 <HAL_DAC_ConfigChannel+0x280>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f043 0208 	orr.w	r2, r3, #8
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2203      	movs	r2, #3
 80020ec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e0fa      	b.n	80022e8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020f8:	4b7d      	ldr	r3, [pc, #500]	@ (80022f0 <HAL_DAC_ConfigChannel+0x280>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1df      	bne.n	80020c0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	6992      	ldr	r2, [r2, #24]
 8002108:	641a      	str	r2, [r3, #64]	@ 0x40
 800210a:	e020      	b.n	800214e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800210c:	f7fe f9ba 	bl	8000484 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d90f      	bls.n	800213a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002120:	2b00      	cmp	r3, #0
 8002122:	da0a      	bge.n	800213a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f043 0208 	orr.w	r2, r3, #8
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2203      	movs	r2, #3
 8002134:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0d6      	b.n	80022e8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002140:	2b00      	cmp	r3, #0
 8002142:	dbe3      	blt.n	800210c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	6992      	ldr	r2, [r2, #24]
 800214c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	ea02 0103 	and.w	r1, r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	69da      	ldr	r2, [r3, #28]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	409a      	lsls	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	21ff      	movs	r1, #255	@ 0xff
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	ea02 0103 	and.w	r1, r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	409a      	lsls	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d11d      	bne.n	80021ec <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	221f      	movs	r2, #31
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2207      	movs	r2, #7
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d102      	bne.n	8002216 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
 8002214:	e00f      	b.n	8002236 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d102      	bne.n	8002224 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800221e:	2301      	movs	r3, #1
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
 8002222:	e008      	b.n	8002236 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800222c:	2301      	movs	r3, #1
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002230:	e001      	b.n	8002236 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4313      	orrs	r3, r2
 8002240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002242:	4313      	orrs	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6819      	ldr	r1, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43da      	mvns	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	400a      	ands	r2, r1
 800227c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	22c0      	movs	r2, #192	@ 0xc0
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80022e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3728      	adds	r7, #40	@ 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20008000 	.word	0x20008000

080022f4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	@ 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002316:	4b89      	ldr	r3, [pc, #548]	@ (800253c <HAL_GPIO_Init+0x234>)
 8002318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800231a:	e194      	b.n	8002646 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8186 	beq.w	8002640 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d005      	beq.n	800234c <HAL_GPIO_Init+0x44>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d130      	bne.n	80023ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002382:	2201      	movs	r2, #1
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 0201 	and.w	r2, r3, #1
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d017      	beq.n	80023ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d123      	bne.n	800243e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	08da      	lsrs	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	69b9      	ldr	r1, [r7, #24]
 800243a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0203 	and.w	r2, r3, #3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80e0 	beq.w	8002640 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002480:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <HAL_GPIO_Init+0x238>)
 8002482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002486:	4a2e      	ldr	r2, [pc, #184]	@ (8002540 <HAL_GPIO_Init+0x238>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002490:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <HAL_GPIO_Init+0x238>)
 8002492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249e:	4a29      	ldr	r2, [pc, #164]	@ (8002544 <HAL_GPIO_Init+0x23c>)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	220f      	movs	r2, #15
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a20      	ldr	r2, [pc, #128]	@ (8002548 <HAL_GPIO_Init+0x240>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d052      	beq.n	8002570 <HAL_GPIO_Init+0x268>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a1f      	ldr	r2, [pc, #124]	@ (800254c <HAL_GPIO_Init+0x244>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d031      	beq.n	8002536 <HAL_GPIO_Init+0x22e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002550 <HAL_GPIO_Init+0x248>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02b      	beq.n	8002532 <HAL_GPIO_Init+0x22a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <HAL_GPIO_Init+0x24c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d025      	beq.n	800252e <HAL_GPIO_Init+0x226>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002558 <HAL_GPIO_Init+0x250>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01f      	beq.n	800252a <HAL_GPIO_Init+0x222>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a1b      	ldr	r2, [pc, #108]	@ (800255c <HAL_GPIO_Init+0x254>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x21e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002560 <HAL_GPIO_Init+0x258>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x21a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a19      	ldr	r2, [pc, #100]	@ (8002564 <HAL_GPIO_Init+0x25c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x216>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a18      	ldr	r2, [pc, #96]	@ (8002568 <HAL_GPIO_Init+0x260>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x212>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a17      	ldr	r2, [pc, #92]	@ (800256c <HAL_GPIO_Init+0x264>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x20e>
 8002512:	2309      	movs	r3, #9
 8002514:	e02d      	b.n	8002572 <HAL_GPIO_Init+0x26a>
 8002516:	230a      	movs	r3, #10
 8002518:	e02b      	b.n	8002572 <HAL_GPIO_Init+0x26a>
 800251a:	2308      	movs	r3, #8
 800251c:	e029      	b.n	8002572 <HAL_GPIO_Init+0x26a>
 800251e:	2307      	movs	r3, #7
 8002520:	e027      	b.n	8002572 <HAL_GPIO_Init+0x26a>
 8002522:	2306      	movs	r3, #6
 8002524:	e025      	b.n	8002572 <HAL_GPIO_Init+0x26a>
 8002526:	2305      	movs	r3, #5
 8002528:	e023      	b.n	8002572 <HAL_GPIO_Init+0x26a>
 800252a:	2304      	movs	r3, #4
 800252c:	e021      	b.n	8002572 <HAL_GPIO_Init+0x26a>
 800252e:	2303      	movs	r3, #3
 8002530:	e01f      	b.n	8002572 <HAL_GPIO_Init+0x26a>
 8002532:	2302      	movs	r3, #2
 8002534:	e01d      	b.n	8002572 <HAL_GPIO_Init+0x26a>
 8002536:	2301      	movs	r3, #1
 8002538:	e01b      	b.n	8002572 <HAL_GPIO_Init+0x26a>
 800253a:	bf00      	nop
 800253c:	58000080 	.word	0x58000080
 8002540:	58024400 	.word	0x58024400
 8002544:	58000400 	.word	0x58000400
 8002548:	58020000 	.word	0x58020000
 800254c:	58020400 	.word	0x58020400
 8002550:	58020800 	.word	0x58020800
 8002554:	58020c00 	.word	0x58020c00
 8002558:	58021000 	.word	0x58021000
 800255c:	58021400 	.word	0x58021400
 8002560:	58021800 	.word	0x58021800
 8002564:	58021c00 	.word	0x58021c00
 8002568:	58022000 	.word	0x58022000
 800256c:	58022400 	.word	0x58022400
 8002570:	2300      	movs	r3, #0
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	f002 0203 	and.w	r2, r2, #3
 8002578:	0092      	lsls	r2, r2, #2
 800257a:	4093      	lsls	r3, r2
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002582:	4938      	ldr	r1, [pc, #224]	@ (8002664 <HAL_GPIO_Init+0x35c>)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3301      	adds	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	f47f ae63 	bne.w	800231c <HAL_GPIO_Init+0x14>
  }
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	3724      	adds	r7, #36	@ 0x24
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	58000400 	.word	0x58000400

08002668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	887b      	ldrh	r3, [r7, #2]
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e001      	b.n	800268a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026b4:	e003      	b.n	80026be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	041a      	lsls	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	619a      	str	r2, [r3, #24]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026dc:	887a      	ldrh	r2, [r7, #2]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	041a      	lsls	r2, r3, #16
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	400b      	ands	r3, r1
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	619a      	str	r2, [r3, #24]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800270c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002718:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	4618      	mov	r0, r3
 8002726:	f00d fb3d 	bl	800fda4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e08b      	b.n	800285e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f00c ff28 	bl	800f5b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	@ 0x24
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002784:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002794:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d107      	bne.n	80027ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e006      	b.n	80027bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d108      	bne.n	80027d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	e007      	b.n	80027e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002868 <HAL_I2C_Init+0x134>)
 80027f2:	430b      	orrs	r3, r1
 80027f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002804:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69d9      	ldr	r1, [r3, #28]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	02008000 	.word	0x02008000

0800286c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4603      	mov	r3, r0
 800287c:	817b      	strh	r3, [r7, #10]
 800287e:	460b      	mov	r3, r1
 8002880:	813b      	strh	r3, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b20      	cmp	r3, #32
 8002890:	f040 80f9 	bne.w	8002a86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_I2C_Mem_Write+0x34>
 800289a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0ed      	b.n	8002a88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_I2C_Mem_Write+0x4e>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e0e6      	b.n	8002a88 <HAL_I2C_Mem_Write+0x21c>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028c2:	f7fd fddf 	bl	8000484 <HAL_GetTick>
 80028c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2319      	movs	r3, #25
 80028ce:	2201      	movs	r2, #1
 80028d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fac3 	bl	8002e60 <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0d1      	b.n	8002a88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2221      	movs	r2, #33	@ 0x21
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2240      	movs	r2, #64	@ 0x40
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a3a      	ldr	r2, [r7, #32]
 80028fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002904:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800290c:	88f8      	ldrh	r0, [r7, #6]
 800290e:	893a      	ldrh	r2, [r7, #8]
 8002910:	8979      	ldrh	r1, [r7, #10]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	4603      	mov	r3, r0
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f9d3 	bl	8002cc8 <I2C_RequestMemoryWrite>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0a9      	b.n	8002a88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2bff      	cmp	r3, #255	@ 0xff
 800293c:	d90e      	bls.n	800295c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	22ff      	movs	r2, #255	@ 0xff
 8002942:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002948:	b2da      	uxtb	r2, r3
 800294a:	8979      	ldrh	r1, [r7, #10]
 800294c:	2300      	movs	r3, #0
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fc47 	bl	80031e8 <I2C_TransferConfig>
 800295a:	e00f      	b.n	800297c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296a:	b2da      	uxtb	r2, r3
 800296c:	8979      	ldrh	r1, [r7, #10]
 800296e:	2300      	movs	r3, #0
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fc36 	bl	80031e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fac6 	bl	8002f12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e07b      	b.n	8002a88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d034      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x1c8>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d130      	bne.n	8002a34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	2200      	movs	r2, #0
 80029da:	2180      	movs	r1, #128	@ 0x80
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fa3f 	bl	8002e60 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e04d      	b.n	8002a88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2bff      	cmp	r3, #255	@ 0xff
 80029f4:	d90e      	bls.n	8002a14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	22ff      	movs	r2, #255	@ 0xff
 80029fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	8979      	ldrh	r1, [r7, #10]
 8002a04:	2300      	movs	r3, #0
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fbeb 	bl	80031e8 <I2C_TransferConfig>
 8002a12:	e00f      	b.n	8002a34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	8979      	ldrh	r1, [r7, #10]
 8002a26:	2300      	movs	r3, #0
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fbda 	bl	80031e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d19e      	bne.n	800297c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 faac 	bl	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e01a      	b.n	8002a88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2220      	movs	r2, #32
 8002a58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <HAL_I2C_Mem_Write+0x224>)
 8002a66:	400b      	ands	r3, r1
 8002a68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
  }
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	fe00e800 	.word	0xfe00e800

08002a94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	817b      	strh	r3, [r7, #10]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	813b      	strh	r3, [r7, #8]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	f040 80fd 	bne.w	8002cb6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_I2C_Mem_Read+0x34>
 8002ac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0f1      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_Mem_Read+0x4e>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e0ea      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x224>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aea:	f7fd fccb 	bl	8000484 <HAL_GetTick>
 8002aee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2319      	movs	r3, #25
 8002af6:	2201      	movs	r2, #1
 8002af8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f9af 	bl	8002e60 <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0d5      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2222      	movs	r2, #34	@ 0x22
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2240      	movs	r2, #64	@ 0x40
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a3a      	ldr	r2, [r7, #32]
 8002b26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b34:	88f8      	ldrh	r0, [r7, #6]
 8002b36:	893a      	ldrh	r2, [r7, #8]
 8002b38:	8979      	ldrh	r1, [r7, #10]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4603      	mov	r3, r0
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f913 	bl	8002d70 <I2C_RequestMemoryRead>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0ad      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2bff      	cmp	r3, #255	@ 0xff
 8002b64:	d90e      	bls.n	8002b84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	22ff      	movs	r2, #255	@ 0xff
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	8979      	ldrh	r1, [r7, #10]
 8002b74:	4b52      	ldr	r3, [pc, #328]	@ (8002cc0 <HAL_I2C_Mem_Read+0x22c>)
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fb33 	bl	80031e8 <I2C_TransferConfig>
 8002b82:	e00f      	b.n	8002ba4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	8979      	ldrh	r1, [r7, #10]
 8002b96:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <HAL_I2C_Mem_Read+0x22c>)
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fb22 	bl	80031e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002baa:	2200      	movs	r2, #0
 8002bac:	2104      	movs	r1, #4
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f956 	bl	8002e60 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07c      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d034      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x1d0>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d130      	bne.n	8002c64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2180      	movs	r1, #128	@ 0x80
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f927 	bl	8002e60 <I2C_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e04d      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2bff      	cmp	r3, #255	@ 0xff
 8002c24:	d90e      	bls.n	8002c44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	22ff      	movs	r2, #255	@ 0xff
 8002c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	8979      	ldrh	r1, [r7, #10]
 8002c34:	2300      	movs	r3, #0
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fad3 	bl	80031e8 <I2C_TransferConfig>
 8002c42:	e00f      	b.n	8002c64 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	8979      	ldrh	r1, [r7, #10]
 8002c56:	2300      	movs	r3, #0
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fac2 	bl	80031e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d19a      	bne.n	8002ba4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f994 	bl	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e01a      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2220      	movs	r2, #32
 8002c88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <HAL_I2C_Mem_Read+0x230>)
 8002c96:	400b      	ands	r3, r1
 8002c98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	80002400 	.word	0x80002400
 8002cc4:	fe00e800 	.word	0xfe00e800

08002cc8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	817b      	strh	r3, [r7, #10]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	813b      	strh	r3, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	8979      	ldrh	r1, [r7, #10]
 8002ce8:	4b20      	ldr	r3, [pc, #128]	@ (8002d6c <I2C_RequestMemoryWrite+0xa4>)
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fa79 	bl	80031e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	69b9      	ldr	r1, [r7, #24]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f909 	bl	8002f12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e02c      	b.n	8002d64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d1a:	e015      	b.n	8002d48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	69b9      	ldr	r1, [r7, #24]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f8ef 	bl	8002f12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e012      	b.n	8002d64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d3e:	893b      	ldrh	r3, [r7, #8]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2180      	movs	r1, #128	@ 0x80
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f884 	bl	8002e60 <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	80002000 	.word	0x80002000

08002d70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	460b      	mov	r3, r1
 8002d84:	813b      	strh	r3, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	8979      	ldrh	r1, [r7, #10]
 8002d90:	4b20      	ldr	r3, [pc, #128]	@ (8002e14 <I2C_RequestMemoryRead+0xa4>)
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2300      	movs	r3, #0
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fa26 	bl	80031e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	69b9      	ldr	r1, [r7, #24]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f8b6 	bl	8002f12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e02c      	b.n	8002e0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d105      	bne.n	8002dc2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002db6:	893b      	ldrh	r3, [r7, #8]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dc0:	e015      	b.n	8002dee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dc2:	893b      	ldrh	r3, [r7, #8]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	69b9      	ldr	r1, [r7, #24]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f89c 	bl	8002f12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e012      	b.n	8002e0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002de4:	893b      	ldrh	r3, [r7, #8]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2140      	movs	r1, #64	@ 0x40
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f831 	bl	8002e60 <I2C_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	80002000 	.word	0x80002000

08002e18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d103      	bne.n	8002e36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d007      	beq.n	8002e54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	619a      	str	r2, [r3, #24]
  }
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e70:	e03b      	b.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	6839      	ldr	r1, [r7, #0]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8d6 	bl	8003028 <I2C_IsErrorOccurred>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e041      	b.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d02d      	beq.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fd faf9 	bl	8000484 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d122      	bne.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d113      	bne.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00f      	b.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d0b4      	beq.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f1e:	e033      	b.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f87f 	bl	8003028 <I2C_IsErrorOccurred>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e031      	b.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d025      	beq.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7fd faa2 	bl	8000484 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11a      	bne.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d013      	beq.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e007      	b.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d1c4      	bne.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fac:	e02f      	b.n	800300e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f838 	bl	8003028 <I2C_IsErrorOccurred>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e02d      	b.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	f7fd fa5f 	bl	8000484 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11a      	bne.n	800300e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d013      	beq.n	800300e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	f043 0220 	orr.w	r2, r3, #32
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e007      	b.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b20      	cmp	r3, #32
 800301a:	d1c8      	bne.n	8002fae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	@ 0x28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d068      	beq.n	8003126 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2210      	movs	r2, #16
 800305a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800305c:	e049      	b.n	80030f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d045      	beq.n	80030f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fd fa0d 	bl	8000484 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_IsErrorOccurred+0x54>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d13a      	bne.n	80030f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003086:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800308e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800309a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800309e:	d121      	bne.n	80030e4 <I2C_IsErrorOccurred+0xbc>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030a6:	d01d      	beq.n	80030e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	d01a      	beq.n	80030e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030be:	f7fd f9e1 	bl	8000484 <HAL_GetTick>
 80030c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c4:	e00e      	b.n	80030e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030c6:	f7fd f9dd 	bl	8000484 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b19      	cmp	r3, #25
 80030d2:	d907      	bls.n	80030e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	f043 0320 	orr.w	r3, r3, #32
 80030da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030e2:	e006      	b.n	80030f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d1e9      	bne.n	80030c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d003      	beq.n	8003108 <I2C_IsErrorOccurred+0xe0>
 8003100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0aa      	beq.n	800305e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2220      	movs	r2, #32
 8003116:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	f043 0304 	orr.w	r3, r3, #4
 800311e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	f043 0308 	orr.w	r3, r3, #8
 8003160:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800316a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800318c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01c      	beq.n	80031d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff fe3b 	bl	8002e18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <I2C_IsErrorOccurred+0x1bc>)
 80031ae:	400b      	ands	r3, r1
 80031b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3728      	adds	r7, #40	@ 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	fe00e800 	.word	0xfe00e800

080031e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	817b      	strh	r3, [r7, #10]
 80031f6:	4613      	mov	r3, r2
 80031f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003200:	7a7b      	ldrb	r3, [r7, #9]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003208:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	4313      	orrs	r3, r2
 8003212:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003216:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	0d5b      	lsrs	r3, r3, #21
 8003222:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003226:	4b08      	ldr	r3, [pc, #32]	@ (8003248 <I2C_TransferConfig+0x60>)
 8003228:	430b      	orrs	r3, r1
 800322a:	43db      	mvns	r3, r3
 800322c:	ea02 0103 	and.w	r1, r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	03ff63ff 	.word	0x03ff63ff

0800324c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	d138      	bne.n	80032d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800326c:	2302      	movs	r3, #2
 800326e:	e032      	b.n	80032d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	@ 0x24
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800329e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e000      	b.n	80032d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032d4:	2302      	movs	r3, #2
  }
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d139      	bne.n	800336c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003302:	2302      	movs	r3, #2
 8003304:	e033      	b.n	800336e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2224      	movs	r2, #36	@ 0x24
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003334:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800336c:	2302      	movs	r3, #2
  }
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af02      	add	r7, sp, #8
 8003380:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0fe      	b.n	800358a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f00d fd15 	bl	8010dd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2203      	movs	r2, #3
 80033aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f007 fb39 	bl	800aa2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7c1a      	ldrb	r2, [r3, #16]
 80033c0:	f88d 2000 	strb.w	r2, [sp]
 80033c4:	3304      	adds	r3, #4
 80033c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c8:	f007 fa0a 	bl	800a7e0 <USB_CoreInit>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0d5      	b.n	800358a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f007 fb31 	bl	800aa4c <USB_SetCurrentMode>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0c6      	b.n	800358a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e04a      	b.n	8003498 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3315      	adds	r3, #21
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3314      	adds	r3, #20
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	b298      	uxth	r0, r3
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	332e      	adds	r3, #46	@ 0x2e
 800343e:	4602      	mov	r2, r0
 8003440:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3318      	adds	r3, #24
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	331c      	adds	r3, #28
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3320      	adds	r3, #32
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3324      	adds	r3, #36	@ 0x24
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	3301      	adds	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	791b      	ldrb	r3, [r3, #4]
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d3af      	bcc.n	8003402 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e044      	b.n	8003532 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	3301      	adds	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	791b      	ldrb	r3, [r3, #4]
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	429a      	cmp	r2, r3
 800353a:	d3b5      	bcc.n	80034a8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7c1a      	ldrb	r2, [r3, #16]
 8003544:	f88d 2000 	strb.w	r2, [sp]
 8003548:	3304      	adds	r3, #4
 800354a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800354c:	f007 faca 	bl	800aae4 <USB_DevInit>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e013      	b.n	800358a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7b1b      	ldrb	r3, [r3, #12]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d102      	bne.n	800357e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f001 f96d 	bl	8004858 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f008 fb09 	bl	800bb9a <USB_DevDisconnect>

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_PCD_Start+0x1c>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e022      	b.n	80035f4 <HAL_PCD_Start+0x62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f007 fa14 	bl	800aa08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f008 fab7 	bl	800bb58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b08d      	sub	sp, #52	@ 0x34
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f008 fb75 	bl	800bd02 <USB_GetMode>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 84b9 	bne.w	8003f92 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f008 fad9 	bl	800bbdc <USB_ReadInterrupts>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 84af 	beq.w	8003f90 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f008 fac6 	bl	800bbdc <USB_ReadInterrupts>
 8003650:	4603      	mov	r3, r0
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d107      	bne.n	800366a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f002 0202 	and.w	r2, r2, #2
 8003668:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f008 fab4 	bl	800bbdc <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b10      	cmp	r3, #16
 800367c:	d161      	bne.n	8003742 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0210 	bic.w	r2, r2, #16
 800368c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f003 020f 	and.w	r2, r3, #15
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	3304      	adds	r3, #4
 80036ac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	0c5b      	lsrs	r3, r3, #17
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d124      	bne.n	8003704 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d035      	beq.n	8003732 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	6a38      	ldr	r0, [r7, #32]
 80036da:	f008 f8eb 	bl	800b8b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ea:	441a      	add	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036fc:	441a      	add	r2, r3
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	615a      	str	r2, [r3, #20]
 8003702:	e016      	b.n	8003732 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	0c5b      	lsrs	r3, r3, #17
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	2b06      	cmp	r3, #6
 800370e:	d110      	bne.n	8003732 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003716:	2208      	movs	r2, #8
 8003718:	4619      	mov	r1, r3
 800371a:	6a38      	ldr	r0, [r7, #32]
 800371c:	f008 f8ca 	bl	800b8b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800372c:	441a      	add	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0210 	orr.w	r2, r2, #16
 8003740:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f008 fa48 	bl	800bbdc <USB_ReadInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003752:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003756:	f040 80a7 	bne.w	80038a8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f008 fa4d 	bl	800bc02 <USB_ReadDevAllOutEpInterrupt>
 8003768:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800376a:	e099      	b.n	80038a0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 808e 	beq.w	8003894 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f008 fa71 	bl	800bc6a <USB_ReadDevOutEPInterrupt>
 8003788:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00c      	beq.n	80037ae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a0:	461a      	mov	r2, r3
 80037a2:	2301      	movs	r3, #1
 80037a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fecf 	bl	800454c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00c      	beq.n	80037d2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c4:	461a      	mov	r2, r3
 80037c6:	2308      	movs	r3, #8
 80037c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 ffa5 	bl	800471c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e8:	461a      	mov	r2, r3
 80037ea:	2310      	movs	r3, #16
 80037ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d030      	beq.n	800385a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003800:	2b80      	cmp	r3, #128	@ 0x80
 8003802:	d109      	bne.n	8003818 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003816:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	3304      	adds	r3, #4
 800382c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	78db      	ldrb	r3, [r3, #3]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	b2db      	uxtb	r3, r3
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f00d fbea 	bl	801101c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003854:	461a      	mov	r2, r3
 8003856:	2302      	movs	r3, #2
 8003858:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003870:	461a      	mov	r2, r3
 8003872:	2320      	movs	r3, #32
 8003874:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d009      	beq.n	8003894 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800388c:	461a      	mov	r2, r3
 800388e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003892:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	3301      	adds	r3, #1
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80038a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f47f af62 	bne.w	800376c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f008 f995 	bl	800bbdc <USB_ReadInterrupts>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038bc:	f040 80db 	bne.w	8003a76 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f008 f9b6 	bl	800bc36 <USB_ReadDevAllInEpInterrupt>
 80038ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80038d0:	e0cd      	b.n	8003a6e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80c2 	beq.w	8003a62 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f008 f9dc 	bl	800bca6 <USB_ReadDevInEPInterrupt>
 80038ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d057      	beq.n	80039aa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	2201      	movs	r2, #1
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800390e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43db      	mvns	r3, r3
 8003914:	69f9      	ldr	r1, [r7, #28]
 8003916:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800391a:	4013      	ands	r3, r2
 800391c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800392a:	461a      	mov	r2, r3
 800392c:	2301      	movs	r3, #1
 800392e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	799b      	ldrb	r3, [r3, #6]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d132      	bne.n	800399e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3320      	adds	r3, #32
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4403      	add	r3, r0
 8003958:	331c      	adds	r3, #28
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4419      	add	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4403      	add	r3, r0
 800396c:	3320      	adds	r3, #32
 800396e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	2b00      	cmp	r3, #0
 8003974:	d113      	bne.n	800399e <HAL_PCD_IRQHandler+0x3a2>
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	3324      	adds	r3, #36	@ 0x24
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d108      	bne.n	800399e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003996:	461a      	mov	r2, r3
 8003998:	2101      	movs	r1, #1
 800399a:	f008 f9e5 	bl	800bd68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f00d fab4 	bl	8010f12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c0:	461a      	mov	r2, r3
 80039c2:	2308      	movs	r3, #8
 80039c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039dc:	461a      	mov	r2, r3
 80039de:	2310      	movs	r3, #16
 80039e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039f8:	461a      	mov	r2, r3
 80039fa:	2340      	movs	r3, #64	@ 0x40
 80039fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d023      	beq.n	8003a50 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a0a:	6a38      	ldr	r0, [r7, #32]
 8003a0c:	f007 f9c8 	bl	800ada0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	3310      	adds	r3, #16
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3304      	adds	r3, #4
 8003a22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	78db      	ldrb	r3, [r3, #3]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d108      	bne.n	8003a3e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f00d fb01 	bl	8011040 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fce8 	bl	8004432 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	3301      	adds	r3, #1
 8003a66:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f af2e 	bne.w	80038d2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f008 f8ae 	bl	800bbdc <USB_ReadInterrupts>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a8a:	d122      	bne.n	8003ad2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d108      	bne.n	8003abc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fef3 	bl	80048a0 <HAL_PCDEx_LPM_Callback>
 8003aba:	e002      	b.n	8003ac2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f00d fa9f 	bl	8011000 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f008 f880 	bl	800bbdc <USB_ReadInterrupts>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae6:	d112      	bne.n	8003b0e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d102      	bne.n	8003afe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f00d fa5b 	bl	8010fb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f008 f862 	bl	800bbdc <USB_ReadInterrupts>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b22:	d121      	bne.n	8003b68 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003b32:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d111      	bne.n	8003b62 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	f003 020f 	and.w	r2, r3, #15
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b58:	2101      	movs	r1, #1
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fea0 	bl	80048a0 <HAL_PCDEx_LPM_Callback>
 8003b60:	e002      	b.n	8003b68 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f00d fa26 	bl	8010fb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f008 f835 	bl	800bbdc <USB_ReadInterrupts>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7c:	f040 80b7 	bne.w	8003cee <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2110      	movs	r1, #16
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f007 f900 	bl	800ada0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba4:	e046      	b.n	8003c34 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bb8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bca:	0151      	lsls	r1, r2, #5
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	440a      	add	r2, r1
 8003bd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bd4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be6:	461a      	mov	r2, r3
 8003be8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bfe:	0151      	lsls	r1, r2, #5
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	440a      	add	r2, r1
 8003c04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	3301      	adds	r3, #1
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	791b      	ldrb	r3, [r3, #4]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d3b2      	bcc.n	8003ba6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c4e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003c52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	7bdb      	ldrb	r3, [r3, #15]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d016      	beq.n	8003c8a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c6c:	f043 030b 	orr.w	r3, r3, #11
 8003c70:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c82:	f043 030b 	orr.w	r3, r3, #11
 8003c86:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c88:	e015      	b.n	8003cb6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cb0:	f043 030b 	orr.w	r3, r3, #11
 8003cb4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003cc8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f008 f845 	bl	800bd68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f007 ff72 	bl	800bbdc <USB_ReadInterrupts>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d02:	d123      	bne.n	8003d4c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f008 f809 	bl	800bd20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f007 f8bd 	bl	800ae92 <USB_GetDevSpeed>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681c      	ldr	r4, [r3, #0]
 8003d24:	f001 fd9c 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8003d28:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4620      	mov	r0, r4
 8003d32:	f006 fdc7 	bl	800a8c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f00d f913 	bl	8010f62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f007 ff43 	bl	800bbdc <USB_ReadInterrupts>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d10a      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f00d f8f0 	bl	8010f46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f002 0208 	and.w	r2, r2, #8
 8003d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f007 ff2e 	bl	800bbdc <USB_ReadInterrupts>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d86:	2b80      	cmp	r3, #128	@ 0x80
 8003d88:	d123      	bne.n	8003dd2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d96:	2301      	movs	r3, #1
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9a:	e014      	b.n	8003dc6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	4619      	mov	r1, r3
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fb08 	bl	80043d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	791b      	ldrb	r3, [r3, #4]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d3e4      	bcc.n	8003d9c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f007 ff00 	bl	800bbdc <USB_ReadInterrupts>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003de6:	d13c      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003de8:	2301      	movs	r3, #1
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dec:	e02b      	b.n	8003e46 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d115      	bne.n	8003e40 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da12      	bge.n	8003e40 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	3317      	adds	r3, #23
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fac8 	bl	80043d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	3301      	adds	r3, #1
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	791b      	ldrb	r3, [r3, #4]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d3cd      	bcc.n	8003dee <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f007 feb8 	bl	800bbdc <USB_ReadInterrupts>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e76:	d156      	bne.n	8003f26 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e78:	2301      	movs	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e7c:	e045      	b.n	8003f0a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d12e      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ea6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da2b      	bge.n	8003f04 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003eb8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d121      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003efc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f00:	6053      	str	r3, [r2, #4]
            break;
 8003f02:	e008      	b.n	8003f16 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	3301      	adds	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	791b      	ldrb	r3, [r3, #4]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d3b3      	bcc.n	8003e7e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f007 fe56 	bl	800bbdc <USB_ReadInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3a:	d10a      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f00d f891 	bl	8011064 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f007 fe40 	bl	800bbdc <USB_ReadInterrupts>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d115      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f00d f881 	bl	8011080 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	e000      	b.n	8003f92 <HAL_PCD_IRQHandler+0x996>
      return;
 8003f90:	bf00      	nop
    }
  }
}
 8003f92:	3734      	adds	r7, #52	@ 0x34
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd90      	pop	{r4, r7, pc}

08003f98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_PCD_SetAddress+0x1a>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e012      	b.n	8003fd8 <HAL_PCD_SetAddress+0x40>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f007 fd9f 	bl	800bb0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	70fb      	strb	r3, [r7, #3]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	803b      	strh	r3, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004002:	2b00      	cmp	r3, #0
 8004004:	da0f      	bge.n	8004026 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	f003 020f 	and.w	r2, r3, #15
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	3310      	adds	r3, #16
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	3304      	adds	r3, #4
 800401c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	705a      	strb	r2, [r3, #1]
 8004024:	e00f      	b.n	8004046 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	3304      	adds	r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004052:	883a      	ldrh	r2, [r7, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	78ba      	ldrb	r2, [r7, #2]
 800405c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	785b      	ldrb	r3, [r3, #1]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004070:	78bb      	ldrb	r3, [r7, #2]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d102      	bne.n	800407c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_PCD_EP_Open+0xaa>
 8004086:	2302      	movs	r3, #2
 8004088:	e00e      	b.n	80040a8 <HAL_PCD_EP_Open+0xc8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	4618      	mov	r0, r3
 800409a:	f006 ff1f 	bl	800aedc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80040a6:	7afb      	ldrb	r3, [r7, #11]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	da0f      	bge.n	80040e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	f003 020f 	and.w	r2, r3, #15
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	3310      	adds	r3, #16
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	3304      	adds	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	705a      	strb	r2, [r3, #1]
 80040e2:	e00f      	b.n	8004104 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 020f 	and.w	r2, r3, #15
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_PCD_EP_Close+0x6e>
 800411a:	2302      	movs	r3, #2
 800411c:	e00e      	b.n	800413c <HAL_PCD_EP_Close+0x8c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	4618      	mov	r0, r3
 800412e:	f006 ff5d 	bl	800afec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	460b      	mov	r3, r1
 8004152:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	f003 020f 	and.w	r2, r3, #15
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	3304      	adds	r3, #4
 800416c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2200      	movs	r2, #0
 8004184:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004186:	7afb      	ldrb	r3, [r7, #11]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	b2da      	uxtb	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	799b      	ldrb	r3, [r3, #6]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d102      	bne.n	80041a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	799b      	ldrb	r3, [r3, #6]
 80041a8:	461a      	mov	r2, r3
 80041aa:	6979      	ldr	r1, [r7, #20]
 80041ac:	f006 fffa 	bl	800b1a4 <USB_EPStartXfer>

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 020f 	and.w	r2, r3, #15
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80041dc:	681b      	ldr	r3, [r3, #0]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	460b      	mov	r3, r1
 80041f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	7afb      	ldrb	r3, [r7, #11]
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	3310      	adds	r3, #16
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	3304      	adds	r3, #4
 8004210:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2201      	movs	r2, #1
 8004228:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800422a:	7afb      	ldrb	r3, [r7, #11]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	b2da      	uxtb	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	799b      	ldrb	r3, [r3, #6]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d102      	bne.n	8004244 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	799b      	ldrb	r3, [r3, #6]
 800424c:	461a      	mov	r2, r3
 800424e:	6979      	ldr	r1, [r7, #20]
 8004250:	f006 ffa8 	bl	800b1a4 <USB_EPStartXfer>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	7912      	ldrb	r2, [r2, #4]
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e04f      	b.n	800431c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800427c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004280:	2b00      	cmp	r3, #0
 8004282:	da0f      	bge.n	80042a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	f003 020f 	and.w	r2, r3, #15
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	3310      	adds	r3, #16
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	3304      	adds	r3, #4
 800429a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	705a      	strb	r2, [r3, #1]
 80042a2:	e00d      	b.n	80042c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	4613      	mov	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	3304      	adds	r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_PCD_EP_SetStall+0x82>
 80042dc:	2302      	movs	r3, #2
 80042de:	e01d      	b.n	800431c <HAL_PCD_EP_SetStall+0xbe>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68f9      	ldr	r1, [r7, #12]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f007 fb38 	bl	800b964 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	7999      	ldrb	r1, [r3, #6]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800430c:	461a      	mov	r2, r3
 800430e:	f007 fd2b 	bl	800bd68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	7912      	ldrb	r2, [r2, #4]
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e042      	b.n	80043c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004346:	2b00      	cmp	r3, #0
 8004348:	da0f      	bge.n	800436a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	f003 020f 	and.w	r2, r3, #15
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	3310      	adds	r3, #16
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	3304      	adds	r3, #4
 8004360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	705a      	strb	r2, [r3, #1]
 8004368:	e00f      	b.n	800438a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	f003 020f 	and.w	r2, r3, #15
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4413      	add	r3, r2
 8004380:	3304      	adds	r3, #4
 8004382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_PCD_EP_ClrStall+0x86>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e00e      	b.n	80043c8 <HAL_PCD_EP_ClrStall+0xa4>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68f9      	ldr	r1, [r7, #12]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f007 fb41 	bl	800ba40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	da0c      	bge.n	80043fe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 020f 	and.w	r2, r3, #15
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	3310      	adds	r3, #16
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	3304      	adds	r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e00c      	b.n	8004418 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	f003 020f 	and.w	r2, r3, #15
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	3304      	adds	r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68f9      	ldr	r1, [r7, #12]
 800441e:	4618      	mov	r0, r3
 8004420:	f007 f960 	bl	800b6e4 <USB_EPStopXfer>
 8004424:	4603      	mov	r3, r0
 8004426:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004428:	7afb      	ldrb	r3, [r7, #11]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b08a      	sub	sp, #40	@ 0x28
 8004436:	af02      	add	r7, sp, #8
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	3310      	adds	r3, #16
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	429a      	cmp	r2, r3
 8004464:	d901      	bls.n	800446a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e06b      	b.n	8004542 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	429a      	cmp	r2, r3
 800447e:	d902      	bls.n	8004486 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3303      	adds	r3, #3
 800448a:	089b      	lsrs	r3, r3, #2
 800448c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800448e:	e02a      	b.n	80044e6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d902      	bls.n	80044ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3303      	adds	r3, #3
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68d9      	ldr	r1, [r3, #12]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	4603      	mov	r3, r0
 80044c8:	6978      	ldr	r0, [r7, #20]
 80044ca:	f007 f9b5 	bl	800b838 <USB_WritePacket>

    ep->xfer_buff  += len;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	441a      	add	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	441a      	add	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d809      	bhi.n	8004510 <PCD_WriteEmptyTxFifo+0xde>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004504:	429a      	cmp	r2, r3
 8004506:	d203      	bcs.n	8004510 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1bf      	bne.n	8004490 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	429a      	cmp	r2, r3
 800451a:	d811      	bhi.n	8004540 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	2201      	movs	r2, #1
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	43db      	mvns	r3, r3
 8004536:	6939      	ldr	r1, [r7, #16]
 8004538:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800453c:	4013      	ands	r3, r2
 800453e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	333c      	adds	r3, #60	@ 0x3c
 8004564:	3304      	adds	r3, #4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	799b      	ldrb	r3, [r3, #6]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d17b      	bne.n	800467a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4a61      	ldr	r2, [pc, #388]	@ (8004714 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	f240 80b9 	bls.w	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80b3 	beq.w	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ae:	461a      	mov	r2, r3
 80045b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045b4:	6093      	str	r3, [r2, #8]
 80045b6:	e0a7      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ce:	461a      	mov	r2, r3
 80045d0:	2320      	movs	r3, #32
 80045d2:	6093      	str	r3, [r2, #8]
 80045d4:	e098      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f040 8093 	bne.w	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004714 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d90f      	bls.n	800460a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004600:	461a      	mov	r2, r3
 8004602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004606:	6093      	str	r3, [r2, #8]
 8004608:	e07e      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	3304      	adds	r3, #4
 800461e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	0159      	lsls	r1, r3, #5
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	440b      	add	r3, r1
 800462c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d114      	bne.n	800466c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004654:	461a      	mov	r2, r3
 8004656:	2101      	movs	r1, #1
 8004658:	f007 fb86 	bl	800bd68 <USB_EP0_OutStart>
 800465c:	e006      	b.n	800466c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	441a      	add	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f00c fc32 	bl	8010edc <HAL_PCD_DataOutStageCallback>
 8004678:	e046      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	4a26      	ldr	r2, [pc, #152]	@ (8004718 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d124      	bne.n	80046cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004698:	461a      	mov	r2, r3
 800469a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469e:	6093      	str	r3, [r2, #8]
 80046a0:	e032      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b8:	461a      	mov	r2, r3
 80046ba:	2320      	movs	r3, #32
 80046bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f00c fc09 	bl	8010edc <HAL_PCD_DataOutStageCallback>
 80046ca:	e01d      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d114      	bne.n	80046fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d108      	bne.n	80046fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046f4:	461a      	mov	r2, r3
 80046f6:	2100      	movs	r1, #0
 80046f8:	f007 fb36 	bl	800bd68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f00c fbea 	bl	8010edc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	4f54300a 	.word	0x4f54300a
 8004718:	4f54310a 	.word	0x4f54310a

0800471c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	333c      	adds	r3, #60	@ 0x3c
 8004734:	3304      	adds	r3, #4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a15      	ldr	r2, [pc, #84]	@ (80047a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d90e      	bls.n	8004770 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004758:	2b00      	cmp	r3, #0
 800475a:	d009      	beq.n	8004770 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004768:	461a      	mov	r2, r3
 800476a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800476e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f00c fba1 	bl	8010eb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a0a      	ldr	r2, [pc, #40]	@ (80047a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d90c      	bls.n	8004798 <PCD_EP_OutSetupPacket_int+0x7c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	799b      	ldrb	r3, [r3, #6]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d108      	bne.n	8004798 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004790:	461a      	mov	r2, r3
 8004792:	2101      	movs	r1, #1
 8004794:	f007 fae8 	bl	800bd68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	4f54300a 	.word	0x4f54300a

080047a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	70fb      	strb	r3, [r7, #3]
 80047b4:	4613      	mov	r3, r2
 80047b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047c6:	883b      	ldrh	r3, [r7, #0]
 80047c8:	0419      	lsls	r1, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80047d4:	e028      	b.n	8004828 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	e00d      	b.n	8004806 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	3340      	adds	r3, #64	@ 0x40
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	0c1b      	lsrs	r3, r3, #16
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4413      	add	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	3301      	adds	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	3b01      	subs	r3, #1
 800480c:	429a      	cmp	r2, r3
 800480e:	d3ec      	bcc.n	80047ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004810:	883b      	ldrh	r3, [r7, #0]
 8004812:	0418      	lsls	r0, r3, #16
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6819      	ldr	r1, [r3, #0]
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	3b01      	subs	r3, #1
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	4302      	orrs	r2, r0
 8004820:	3340      	adds	r3, #64	@ 0x40
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004886:	4b05      	ldr	r3, [pc, #20]	@ (800489c <HAL_PCDEx_ActivateLPM+0x44>)
 8004888:	4313      	orrs	r3, r2
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	10000003 	.word	0x10000003

080048a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80048c0:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <HAL_PWREx_ConfigSupply+0x70>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d00a      	beq.n	80048e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048cc:	4b16      	ldr	r3, [pc, #88]	@ (8004928 <HAL_PWREx_ConfigSupply+0x70>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e01f      	b.n	800491e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e01d      	b.n	800491e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048e2:	4b11      	ldr	r3, [pc, #68]	@ (8004928 <HAL_PWREx_ConfigSupply+0x70>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f023 0207 	bic.w	r2, r3, #7
 80048ea:	490f      	ldr	r1, [pc, #60]	@ (8004928 <HAL_PWREx_ConfigSupply+0x70>)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048f2:	f7fb fdc7 	bl	8000484 <HAL_GetTick>
 80048f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048f8:	e009      	b.n	800490e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048fa:	f7fb fdc3 	bl	8000484 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004908:	d901      	bls.n	800490e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e007      	b.n	800491e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <HAL_PWREx_ConfigSupply+0x70>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800491a:	d1ee      	bne.n	80048fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	58024800 	.word	0x58024800

0800492c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a04      	ldr	r2, [pc, #16]	@ (8004948 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800493a:	60d3      	str	r3, [r2, #12]
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	58024800 	.word	0x58024800

0800494c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	@ 0x30
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f000 bc48 	b.w	80051f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8088 	beq.w	8004a7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800496e:	4b99      	ldr	r3, [pc, #612]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004978:	4b96      	ldr	r3, [pc, #600]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800497e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004980:	2b10      	cmp	r3, #16
 8004982:	d007      	beq.n	8004994 <HAL_RCC_OscConfig+0x48>
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004986:	2b18      	cmp	r3, #24
 8004988:	d111      	bne.n	80049ae <HAL_RCC_OscConfig+0x62>
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d10c      	bne.n	80049ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d06d      	beq.n	8004a7c <HAL_RCC_OscConfig+0x130>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d169      	bne.n	8004a7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f000 bc21 	b.w	80051f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x7a>
 80049b8:	4b86      	ldr	r3, [pc, #536]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a85      	ldr	r2, [pc, #532]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e02e      	b.n	8004a24 <HAL_RCC_OscConfig+0xd8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x9c>
 80049ce:	4b81      	ldr	r3, [pc, #516]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a80      	ldr	r2, [pc, #512]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	4b7e      	ldr	r3, [pc, #504]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7d      	ldr	r2, [pc, #500]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xd8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0xc0>
 80049f2:	4b78      	ldr	r3, [pc, #480]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a77      	ldr	r2, [pc, #476]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b75      	ldr	r3, [pc, #468]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a74      	ldr	r2, [pc, #464]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xd8>
 8004a0c:	4b71      	ldr	r3, [pc, #452]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a70      	ldr	r2, [pc, #448]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b6e      	ldr	r3, [pc, #440]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6d      	ldr	r2, [pc, #436]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fb fd2a 	bl	8000484 <HAL_GetTick>
 8004a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fb fd26 	bl	8000484 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e3d4      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a46:	4b63      	ldr	r3, [pc, #396]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xe8>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fb fd16 	bl	8000484 <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fb fd12 	bl	8000484 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	@ 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e3c0      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a6e:	4b59      	ldr	r3, [pc, #356]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x110>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80ca 	beq.w	8004c20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8c:	4b51      	ldr	r3, [pc, #324]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a96:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x166>
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2b18      	cmp	r3, #24
 8004aa6:	d156      	bne.n	8004b56 <HAL_RCC_OscConfig+0x20a>
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d151      	bne.n	8004b56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab2:	4b48      	ldr	r3, [pc, #288]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_RCC_OscConfig+0x17e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e392      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004aca:	4b42      	ldr	r3, [pc, #264]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 0219 	bic.w	r2, r3, #25
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	493f      	ldr	r1, [pc, #252]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fb fcd2 	bl	8000484 <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae4:	f7fb fcce 	bl	8000484 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e37c      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af6:	4b37      	ldr	r3, [pc, #220]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b02:	f7fb fcef 	bl	80004e4 <HAL_GetREVID>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d817      	bhi.n	8004b40 <HAL_RCC_OscConfig+0x1f4>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b40      	cmp	r3, #64	@ 0x40
 8004b16:	d108      	bne.n	8004b2a <HAL_RCC_OscConfig+0x1de>
 8004b18:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b20:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b28:	e07a      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	031b      	lsls	r3, r3, #12
 8004b38:	4926      	ldr	r1, [pc, #152]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b3e:	e06f      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b40:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	4921      	ldr	r1, [pc, #132]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b54:	e064      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d047      	beq.n	8004bee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 0219 	bic.w	r2, r3, #25
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	491a      	ldr	r1, [pc, #104]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fb fc88 	bl	8000484 <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b78:	f7fb fc84 	bl	8000484 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e332      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b8a:	4b12      	ldr	r3, [pc, #72]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	f7fb fca5 	bl	80004e4 <HAL_GetREVID>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d819      	bhi.n	8004bd8 <HAL_RCC_OscConfig+0x28c>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b40      	cmp	r3, #64	@ 0x40
 8004baa:	d108      	bne.n	8004bbe <HAL_RCC_OscConfig+0x272>
 8004bac:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004bb4:	4a07      	ldr	r2, [pc, #28]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bba:	6053      	str	r3, [r2, #4]
 8004bbc:	e030      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
 8004bbe:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	031b      	lsls	r3, r3, #12
 8004bcc:	4901      	ldr	r1, [pc, #4]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
 8004bd2:	e025      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	4b9a      	ldr	r3, [pc, #616]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	4997      	ldr	r1, [pc, #604]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]
 8004bec:	e018      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bee:	4b95      	ldr	r3, [pc, #596]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a94      	ldr	r2, [pc, #592]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfa:	f7fb fc43 	bl	8000484 <HAL_GetTick>
 8004bfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c02:	f7fb fc3f 	bl	8000484 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e2ed      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c14:	4b8b      	ldr	r3, [pc, #556]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80a9 	beq.w	8004d80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2e:	4b85      	ldr	r3, [pc, #532]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c38:	4b82      	ldr	r3, [pc, #520]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d007      	beq.n	8004c54 <HAL_RCC_OscConfig+0x308>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b18      	cmp	r3, #24
 8004c48:	d13a      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x374>
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d135      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c54:	4b7b      	ldr	r3, [pc, #492]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_OscConfig+0x320>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	2b80      	cmp	r3, #128	@ 0x80
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e2c1      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c6c:	f7fb fc3a 	bl	80004e4 <HAL_GetREVID>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d817      	bhi.n	8004caa <HAL_RCC_OscConfig+0x35e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d108      	bne.n	8004c94 <HAL_RCC_OscConfig+0x348>
 8004c82:	4b70      	ldr	r3, [pc, #448]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c90:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c92:	e075      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c94:	4b6b      	ldr	r3, [pc, #428]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	069b      	lsls	r3, r3, #26
 8004ca2:	4968      	ldr	r1, [pc, #416]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ca8:	e06a      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004caa:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	4962      	ldr	r1, [pc, #392]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cbe:	e05f      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d042      	beq.n	8004d4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fb fbd6 	bl	8000484 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004cdc:	f7fb fbd2 	bl	8000484 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e280      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cee:	4b55      	ldr	r3, [pc, #340]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cfa:	f7fb fbf3 	bl	80004e4 <HAL_GetREVID>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d817      	bhi.n	8004d38 <HAL_RCC_OscConfig+0x3ec>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d108      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3d6>
 8004d10:	4b4c      	ldr	r3, [pc, #304]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d18:	4a4a      	ldr	r2, [pc, #296]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d1e:	6053      	str	r3, [r2, #4]
 8004d20:	e02e      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
 8004d22:	4b48      	ldr	r3, [pc, #288]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	069b      	lsls	r3, r3, #26
 8004d30:	4944      	ldr	r1, [pc, #272]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
 8004d36:	e023      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
 8004d38:	4b42      	ldr	r3, [pc, #264]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	493f      	ldr	r1, [pc, #252]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60cb      	str	r3, [r1, #12]
 8004d4c:	e018      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a3c      	ldr	r2, [pc, #240]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fb fb93 	bl	8000484 <HAL_GetTick>
 8004d5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d62:	f7fb fb8f 	bl	8000484 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e23d      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d74:	4b33      	ldr	r3, [pc, #204]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d036      	beq.n	8004dfa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d019      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d94:	4b2b      	ldr	r3, [pc, #172]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d98:	4a2a      	ldr	r2, [pc, #168]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da0:	f7fb fb70 	bl	8000484 <HAL_GetTick>
 8004da4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da8:	f7fb fb6c 	bl	8000484 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e21a      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dba:	4b22      	ldr	r3, [pc, #136]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCC_OscConfig+0x45c>
 8004dc6:	e018      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd4:	f7fb fb56 	bl	8000484 <HAL_GetTick>
 8004dd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ddc:	f7fb fb52 	bl	8000484 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e200      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dee:	4b15      	ldr	r3, [pc, #84]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d039      	beq.n	8004e7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01c      	beq.n	8004e48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a0c      	ldr	r2, [pc, #48]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004e14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e1a:	f7fb fb33 	bl	8000484 <HAL_GetTick>
 8004e1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e22:	f7fb fb2f 	bl	8000484 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e1dd      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e34:	4b03      	ldr	r3, [pc, #12]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x4d6>
 8004e40:	e01b      	b.n	8004e7a <HAL_RCC_OscConfig+0x52e>
 8004e42:	bf00      	nop
 8004e44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e48:	4b9b      	ldr	r3, [pc, #620]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a9a      	ldr	r2, [pc, #616]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e54:	f7fb fb16 	bl	8000484 <HAL_GetTick>
 8004e58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e5c:	f7fb fb12 	bl	8000484 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e1c0      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e6e:	4b92      	ldr	r3, [pc, #584]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 8081 	beq.w	8004f8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e88:	4b8c      	ldr	r3, [pc, #560]	@ (80050bc <HAL_RCC_OscConfig+0x770>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a8b      	ldr	r2, [pc, #556]	@ (80050bc <HAL_RCC_OscConfig+0x770>)
 8004e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e94:	f7fb faf6 	bl	8000484 <HAL_GetTick>
 8004e98:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9c:	f7fb faf2 	bl	8000484 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b64      	cmp	r3, #100	@ 0x64
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1a0      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eae:	4b83      	ldr	r3, [pc, #524]	@ (80050bc <HAL_RCC_OscConfig+0x770>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d106      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x584>
 8004ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec6:	4a7c      	ldr	r2, [pc, #496]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ece:	e02d      	b.n	8004f2c <HAL_RCC_OscConfig+0x5e0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10c      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x5a6>
 8004ed8:	4b77      	ldr	r3, [pc, #476]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004edc:	4a76      	ldr	r2, [pc, #472]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee4:	4b74      	ldr	r3, [pc, #464]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee8:	4a73      	ldr	r2, [pc, #460]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004eea:	f023 0304 	bic.w	r3, r3, #4
 8004eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef0:	e01c      	b.n	8004f2c <HAL_RCC_OscConfig+0x5e0>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x5c8>
 8004efa:	4b6f      	ldr	r3, [pc, #444]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	4a6e      	ldr	r2, [pc, #440]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f06:	4b6c      	ldr	r3, [pc, #432]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0a:	4a6b      	ldr	r2, [pc, #428]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0x5e0>
 8004f14:	4b68      	ldr	r3, [pc, #416]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f18:	4a67      	ldr	r2, [pc, #412]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f20:	4b65      	ldr	r3, [pc, #404]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f24:	4a64      	ldr	r2, [pc, #400]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f26:	f023 0304 	bic.w	r3, r3, #4
 8004f2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d015      	beq.n	8004f60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fb faa6 	bl	8000484 <HAL_GetTick>
 8004f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3c:	f7fb faa2 	bl	8000484 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e14e      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f52:	4b59      	ldr	r3, [pc, #356]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ee      	beq.n	8004f3c <HAL_RCC_OscConfig+0x5f0>
 8004f5e:	e014      	b.n	8004f8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f60:	f7fb fa90 	bl	8000484 <HAL_GetTick>
 8004f64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f66:	e00a      	b.n	8004f7e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fb fa8c 	bl	8000484 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e138      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1ee      	bne.n	8004f68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 812d 	beq.w	80051ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f94:	4b48      	ldr	r3, [pc, #288]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f9c:	2b18      	cmp	r3, #24
 8004f9e:	f000 80bd 	beq.w	800511c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	f040 809e 	bne.w	80050e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fac:	4b42      	ldr	r3, [pc, #264]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a41      	ldr	r2, [pc, #260]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fb fa64 	bl	8000484 <HAL_GetTick>
 8004fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fb fa60 	bl	8000484 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e10e      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fd2:	4b39      	ldr	r3, [pc, #228]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fde:	4b36      	ldr	r3, [pc, #216]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fe2:	4b37      	ldr	r3, [pc, #220]	@ (80050c0 <HAL_RCC_OscConfig+0x774>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	4931      	ldr	r1, [pc, #196]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	3b01      	subs	r3, #1
 8005008:	025b      	lsls	r3, r3, #9
 800500a:	b29b      	uxth	r3, r3
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	3b01      	subs	r3, #1
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005020:	3b01      	subs	r3, #1
 8005022:	061b      	lsls	r3, r3, #24
 8005024:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005028:	4923      	ldr	r1, [pc, #140]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800502e:	4b22      	ldr	r3, [pc, #136]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	4a21      	ldr	r2, [pc, #132]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800503a:	4b1f      	ldr	r3, [pc, #124]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800503c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503e:	4b21      	ldr	r3, [pc, #132]	@ (80050c4 <HAL_RCC_OscConfig+0x778>)
 8005040:	4013      	ands	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005046:	00d2      	lsls	r2, r2, #3
 8005048:	491b      	ldr	r1, [pc, #108]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800504e:	4b1a      	ldr	r3, [pc, #104]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005052:	f023 020c 	bic.w	r2, r3, #12
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	4917      	ldr	r1, [pc, #92]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800505c:	4313      	orrs	r3, r2
 800505e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005060:	4b15      	ldr	r3, [pc, #84]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	f023 0202 	bic.w	r2, r3, #2
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506c:	4912      	ldr	r1, [pc, #72]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800506e:	4313      	orrs	r3, r2
 8005070:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005072:	4b11      	ldr	r3, [pc, #68]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	4a10      	ldr	r2, [pc, #64]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800507e:	4b0e      	ldr	r3, [pc, #56]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	4a0d      	ldr	r2, [pc, #52]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800508a:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	4a0a      	ldr	r2, [pc, #40]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005096:	4b08      	ldr	r3, [pc, #32]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	4a07      	ldr	r2, [pc, #28]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a2:	4b05      	ldr	r3, [pc, #20]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a04      	ldr	r2, [pc, #16]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 80050a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ae:	f7fb f9e9 	bl	8000484 <HAL_GetTick>
 80050b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050b4:	e011      	b.n	80050da <HAL_RCC_OscConfig+0x78e>
 80050b6:	bf00      	nop
 80050b8:	58024400 	.word	0x58024400
 80050bc:	58024800 	.word	0x58024800
 80050c0:	fffffc0c 	.word	0xfffffc0c
 80050c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fb f9dc 	bl	8000484 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e08a      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050da:	4b47      	ldr	r3, [pc, #284]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x77c>
 80050e6:	e082      	b.n	80051ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e8:	4b43      	ldr	r3, [pc, #268]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a42      	ldr	r2, [pc, #264]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80050ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fb f9c6 	bl	8000484 <HAL_GetTick>
 80050f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fb f9c2 	bl	8000484 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e070      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800510e:	4b3a      	ldr	r3, [pc, #232]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x7b0>
 800511a:	e068      	b.n	80051ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800511c:	4b36      	ldr	r3, [pc, #216]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005122:	4b35      	ldr	r3, [pc, #212]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005126:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	2b01      	cmp	r3, #1
 800512e:	d031      	beq.n	8005194 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f003 0203 	and.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d12a      	bne.n	8005194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	091b      	lsrs	r3, r3, #4
 8005142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d122      	bne.n	8005194 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005158:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d11a      	bne.n	8005194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	0a5b      	lsrs	r3, r3, #9
 8005162:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d111      	bne.n	8005194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d108      	bne.n	8005194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	0e1b      	lsrs	r3, r3, #24
 8005186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e02b      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005198:	4b17      	ldr	r3, [pc, #92]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 800519a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519c:	08db      	lsrs	r3, r3, #3
 800519e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d01f      	beq.n	80051ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80051ae:	4b12      	ldr	r3, [pc, #72]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b2:	4a11      	ldr	r2, [pc, #68]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051ba:	f7fb f963 	bl	8000484 <HAL_GetTick>
 80051be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80051c0:	bf00      	nop
 80051c2:	f7fb f95f 	bl	8000484 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d0f9      	beq.n	80051c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051ce:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051d2:	4b0a      	ldr	r3, [pc, #40]	@ (80051fc <HAL_RCC_OscConfig+0x8b0>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051da:	00d2      	lsls	r2, r2, #3
 80051dc:	4906      	ldr	r1, [pc, #24]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80051e2:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	4a04      	ldr	r2, [pc, #16]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3730      	adds	r7, #48	@ 0x30
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	58024400 	.word	0x58024400
 80051fc:	ffff0007 	.word	0xffff0007

08005200 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e19c      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005214:	4b8a      	ldr	r3, [pc, #552]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d910      	bls.n	8005244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b87      	ldr	r3, [pc, #540]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f023 020f 	bic.w	r2, r3, #15
 800522a:	4985      	ldr	r1, [pc, #532]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	4313      	orrs	r3, r2
 8005230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005232:	4b83      	ldr	r3, [pc, #524]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d001      	beq.n	8005244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e184      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d010      	beq.n	8005272 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	4b7b      	ldr	r3, [pc, #492]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800525c:	429a      	cmp	r2, r3
 800525e:	d908      	bls.n	8005272 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005260:	4b78      	ldr	r3, [pc, #480]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	4975      	ldr	r1, [pc, #468]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800526e:	4313      	orrs	r3, r2
 8005270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	4b70      	ldr	r3, [pc, #448]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800528a:	429a      	cmp	r2, r3
 800528c:	d908      	bls.n	80052a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800528e:	4b6d      	ldr	r3, [pc, #436]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	496a      	ldr	r1, [pc, #424]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800529c:	4313      	orrs	r3, r2
 800529e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d010      	beq.n	80052ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	4b64      	ldr	r3, [pc, #400]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d908      	bls.n	80052ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052bc:	4b61      	ldr	r3, [pc, #388]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	495e      	ldr	r1, [pc, #376]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d010      	beq.n	80052fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	4b59      	ldr	r3, [pc, #356]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d908      	bls.n	80052fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052ea:	4b56      	ldr	r3, [pc, #344]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4953      	ldr	r1, [pc, #332]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d010      	beq.n	800532a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	4b4d      	ldr	r3, [pc, #308]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	429a      	cmp	r2, r3
 8005316:	d908      	bls.n	800532a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005318:	4b4a      	ldr	r3, [pc, #296]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	f023 020f 	bic.w	r2, r3, #15
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4947      	ldr	r1, [pc, #284]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005326:	4313      	orrs	r3, r2
 8005328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d055      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005336:	4b43      	ldr	r3, [pc, #268]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	4940      	ldr	r1, [pc, #256]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005344:	4313      	orrs	r3, r2
 8005346:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d107      	bne.n	8005360 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005350:	4b3c      	ldr	r3, [pc, #240]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d121      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0f6      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d107      	bne.n	8005378 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005368:	4b36      	ldr	r3, [pc, #216]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d115      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0ea      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d107      	bne.n	8005390 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005380:	4b30      	ldr	r3, [pc, #192]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0de      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005390:	4b2c      	ldr	r3, [pc, #176]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0d6      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053a0:	4b28      	ldr	r3, [pc, #160]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f023 0207 	bic.w	r2, r3, #7
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4925      	ldr	r1, [pc, #148]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b2:	f7fb f867 	bl	8000484 <HAL_GetTick>
 80053b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b8:	e00a      	b.n	80053d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ba:	f7fb f863 	bl	8000484 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e0be      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	429a      	cmp	r2, r3
 80053e0:	d1eb      	bne.n	80053ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d010      	beq.n	8005410 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	4b14      	ldr	r3, [pc, #80]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d208      	bcs.n	8005410 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053fe:	4b11      	ldr	r3, [pc, #68]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f023 020f 	bic.w	r2, r3, #15
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	490e      	ldr	r1, [pc, #56]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800540c:	4313      	orrs	r3, r2
 800540e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d214      	bcs.n	8005448 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541e:	4b08      	ldr	r3, [pc, #32]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 020f 	bic.w	r2, r3, #15
 8005426:	4906      	ldr	r1, [pc, #24]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d005      	beq.n	8005448 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e086      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
 8005440:	52002000 	.word	0x52002000
 8005444:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d010      	beq.n	8005476 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	4b3f      	ldr	r3, [pc, #252]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005460:	429a      	cmp	r2, r3
 8005462:	d208      	bcs.n	8005476 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005464:	4b3c      	ldr	r3, [pc, #240]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	4939      	ldr	r1, [pc, #228]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005472:	4313      	orrs	r3, r2
 8005474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d010      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	4b34      	ldr	r3, [pc, #208]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800548e:	429a      	cmp	r2, r3
 8005490:	d208      	bcs.n	80054a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005492:	4b31      	ldr	r3, [pc, #196]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	492e      	ldr	r1, [pc, #184]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d010      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699a      	ldr	r2, [r3, #24]
 80054b4:	4b28      	ldr	r3, [pc, #160]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054bc:	429a      	cmp	r2, r3
 80054be:	d208      	bcs.n	80054d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054c0:	4b25      	ldr	r3, [pc, #148]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	4922      	ldr	r1, [pc, #136]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d010      	beq.n	8005500 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d208      	bcs.n	8005500 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	4917      	ldr	r1, [pc, #92]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005500:	f000 f834 	bl	800556c <HAL_RCC_GetSysClockFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b14      	ldr	r3, [pc, #80]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	4912      	ldr	r1, [pc, #72]	@ (800555c <HAL_RCC_ClockConfig+0x35c>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
 800551c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800551e:	4b0e      	ldr	r3, [pc, #56]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	4a0d      	ldr	r2, [pc, #52]	@ (800555c <HAL_RCC_ClockConfig+0x35c>)
 8005528:	5cd3      	ldrb	r3, [r2, r3]
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
 8005534:	4a0a      	ldr	r2, [pc, #40]	@ (8005560 <HAL_RCC_ClockConfig+0x360>)
 8005536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005538:	4a0a      	ldr	r2, [pc, #40]	@ (8005564 <HAL_RCC_ClockConfig+0x364>)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800553e:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <HAL_RCC_ClockConfig+0x368>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f00a ffa8 	bl	8010498 <HAL_InitTick>
 8005548:	4603      	mov	r3, r0
 800554a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	58024400 	.word	0x58024400
 800555c:	080160bc 	.word	0x080160bc
 8005560:	24000098 	.word	0x24000098
 8005564:	24000094 	.word	0x24000094
 8005568:	24000000 	.word	0x24000000

0800556c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800556c:	b480      	push	{r7}
 800556e:	b089      	sub	sp, #36	@ 0x24
 8005570:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005572:	4bb3      	ldr	r3, [pc, #716]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800557a:	2b18      	cmp	r3, #24
 800557c:	f200 8155 	bhi.w	800582a <HAL_RCC_GetSysClockFreq+0x2be>
 8005580:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	080055ed 	.word	0x080055ed
 800558c:	0800582b 	.word	0x0800582b
 8005590:	0800582b 	.word	0x0800582b
 8005594:	0800582b 	.word	0x0800582b
 8005598:	0800582b 	.word	0x0800582b
 800559c:	0800582b 	.word	0x0800582b
 80055a0:	0800582b 	.word	0x0800582b
 80055a4:	0800582b 	.word	0x0800582b
 80055a8:	08005613 	.word	0x08005613
 80055ac:	0800582b 	.word	0x0800582b
 80055b0:	0800582b 	.word	0x0800582b
 80055b4:	0800582b 	.word	0x0800582b
 80055b8:	0800582b 	.word	0x0800582b
 80055bc:	0800582b 	.word	0x0800582b
 80055c0:	0800582b 	.word	0x0800582b
 80055c4:	0800582b 	.word	0x0800582b
 80055c8:	08005619 	.word	0x08005619
 80055cc:	0800582b 	.word	0x0800582b
 80055d0:	0800582b 	.word	0x0800582b
 80055d4:	0800582b 	.word	0x0800582b
 80055d8:	0800582b 	.word	0x0800582b
 80055dc:	0800582b 	.word	0x0800582b
 80055e0:	0800582b 	.word	0x0800582b
 80055e4:	0800582b 	.word	0x0800582b
 80055e8:	0800561f 	.word	0x0800561f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ec:	4b94      	ldr	r3, [pc, #592]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d009      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055f8:	4b91      	ldr	r3, [pc, #580]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	08db      	lsrs	r3, r3, #3
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	4a90      	ldr	r2, [pc, #576]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800560a:	e111      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800560c:	4b8d      	ldr	r3, [pc, #564]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800560e:	61bb      	str	r3, [r7, #24]
      break;
 8005610:	e10e      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005612:	4b8d      	ldr	r3, [pc, #564]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005614:	61bb      	str	r3, [r7, #24]
      break;
 8005616:	e10b      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005618:	4b8c      	ldr	r3, [pc, #560]	@ (800584c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800561a:	61bb      	str	r3, [r7, #24]
      break;
 800561c:	e108      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800561e:	4b88      	ldr	r3, [pc, #544]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005628:	4b85      	ldr	r3, [pc, #532]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005632:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005634:	4b82      	ldr	r3, [pc, #520]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800563e:	4b80      	ldr	r3, [pc, #512]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005642:	08db      	lsrs	r3, r3, #3
 8005644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	fb02 f303 	mul.w	r3, r2, r3
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005656:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80e1 	beq.w	8005824 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b02      	cmp	r3, #2
 8005666:	f000 8083 	beq.w	8005770 <HAL_RCC_GetSysClockFreq+0x204>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b02      	cmp	r3, #2
 800566e:	f200 80a1 	bhi.w	80057b4 <HAL_RCC_GetSysClockFreq+0x248>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0x114>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d056      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0x1c0>
 800567e:	e099      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005680:	4b6f      	ldr	r3, [pc, #444]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02d      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800568c:	4b6c      	ldr	r3, [pc, #432]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	08db      	lsrs	r3, r3, #3
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	4a6b      	ldr	r2, [pc, #428]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
 800569c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b6:	4b62      	ldr	r3, [pc, #392]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80056e6:	e087      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005854 <HAL_RCC_GetSysClockFreq+0x2e8>
 80056f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fa:	4b51      	ldr	r3, [pc, #324]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570a:	ed97 6a02 	vldr	s12, [r7, #8]
 800570e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800571e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800572a:	e065      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005858 <HAL_RCC_GetSysClockFreq+0x2ec>
 800573a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573e:	4b40      	ldr	r3, [pc, #256]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005752:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800576e:	e043      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800585c <HAL_RCC_GetSysClockFreq+0x2f0>
 800577e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005782:	4b2f      	ldr	r3, [pc, #188]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005792:	ed97 6a02 	vldr	s12, [r7, #8]
 8005796:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800579a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057b2:	e021      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005858 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80057f8:	4b11      	ldr	r3, [pc, #68]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fc:	0a5b      	lsrs	r3, r3, #9
 80057fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005802:	3301      	adds	r3, #1
 8005804:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	ee07 3a90 	vmov	s15, r3
 800580c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005810:	edd7 6a07 	vldr	s13, [r7, #28]
 8005814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800581c:	ee17 3a90 	vmov	r3, s15
 8005820:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005822:	e005      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	61bb      	str	r3, [r7, #24]
      break;
 8005828:	e002      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800582a:	4b07      	ldr	r3, [pc, #28]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800582c:	61bb      	str	r3, [r7, #24]
      break;
 800582e:	bf00      	nop
  }

  return sysclockfreq;
 8005830:	69bb      	ldr	r3, [r7, #24]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3724      	adds	r7, #36	@ 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
 8005844:	03d09000 	.word	0x03d09000
 8005848:	003d0900 	.word	0x003d0900
 800584c:	017d7840 	.word	0x017d7840
 8005850:	46000000 	.word	0x46000000
 8005854:	4c742400 	.word	0x4c742400
 8005858:	4a742400 	.word	0x4a742400
 800585c:	4bbebc20 	.word	0x4bbebc20

08005860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005866:	f7ff fe81 	bl	800556c <HAL_RCC_GetSysClockFreq>
 800586a:	4602      	mov	r2, r0
 800586c:	4b10      	ldr	r3, [pc, #64]	@ (80058b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	0a1b      	lsrs	r3, r3, #8
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	490f      	ldr	r1, [pc, #60]	@ (80058b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005878:	5ccb      	ldrb	r3, [r1, r3]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005884:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	4a09      	ldr	r2, [pc, #36]	@ (80058b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800588e:	5cd3      	ldrb	r3, [r2, r3]
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	4a07      	ldr	r2, [pc, #28]	@ (80058b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800589c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800589e:	4a07      	ldr	r2, [pc, #28]	@ (80058bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058a4:	4b04      	ldr	r3, [pc, #16]	@ (80058b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80058a6:	681b      	ldr	r3, [r3, #0]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	58024400 	.word	0x58024400
 80058b4:	080160bc 	.word	0x080160bc
 80058b8:	24000098 	.word	0x24000098
 80058bc:	24000094 	.word	0x24000094

080058c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058c4:	f7ff ffcc 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	091b      	lsrs	r3, r3, #4
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4904      	ldr	r1, [pc, #16]	@ (80058e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	58024400 	.word	0x58024400
 80058e8:	080160bc 	.word	0x080160bc

080058ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	223f      	movs	r2, #63	@ 0x3f
 80058fa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0207 	and.w	r2, r3, #7
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005908:	4b17      	ldr	r3, [pc, #92]	@ (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005914:	4b14      	ldr	r3, [pc, #80]	@ (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	f003 020f 	and.w	r2, r3, #15
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005920:	4b11      	ldr	r3, [pc, #68]	@ (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800592c:	4b0e      	ldr	r3, [pc, #56]	@ (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005938:	4b0b      	ldr	r3, [pc, #44]	@ (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005944:	4b08      	ldr	r3, [pc, #32]	@ (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005950:	4b06      	ldr	r3, [pc, #24]	@ (800596c <HAL_RCC_GetClockConfig+0x80>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	601a      	str	r2, [r3, #0]
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	58024400 	.word	0x58024400
 800596c:	52002000 	.word	0x52002000

08005970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005974:	b0ca      	sub	sp, #296	@ 0x128
 8005976:	af00      	add	r7, sp, #0
 8005978:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005982:	2300      	movs	r3, #0
 8005984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005994:	2500      	movs	r5, #0
 8005996:	ea54 0305 	orrs.w	r3, r4, r5
 800599a:	d049      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059a6:	d02f      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80059a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059ac:	d828      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059b2:	d01a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059b8:	d822      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80059be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059c2:	d007      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059c4:	e01c      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c6:	4bb8      	ldr	r3, [pc, #736]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	4ab7      	ldr	r2, [pc, #732]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059d2:	e01a      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	3308      	adds	r3, #8
 80059da:	2102      	movs	r1, #2
 80059dc:	4618      	mov	r0, r3
 80059de:	f002 fb61 	bl	80080a4 <RCCEx_PLL2_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059e8:	e00f      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	3328      	adds	r3, #40	@ 0x28
 80059f0:	2102      	movs	r1, #2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f002 fc08 	bl	8008208 <RCCEx_PLL3_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059fe:	e004      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a06:	e000      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a12:	4ba5      	ldr	r3, [pc, #660]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a20:	4aa1      	ldr	r2, [pc, #644]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005a3c:	f04f 0900 	mov.w	r9, #0
 8005a40:	ea58 0309 	orrs.w	r3, r8, r9
 8005a44:	d047      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d82a      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a50:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005a6d 	.word	0x08005a6d
 8005a5c:	08005a7b 	.word	0x08005a7b
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005aaf 	.word	0x08005aaf
 8005a68:	08005aaf 	.word	0x08005aaf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	4a8d      	ldr	r2, [pc, #564]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a78:	e01a      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7e:	3308      	adds	r3, #8
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f002 fb0e 	bl	80080a4 <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a8e:	e00f      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a94:	3328      	adds	r3, #40	@ 0x28
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f002 fbb5 	bl	8008208 <RCCEx_PLL3_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aa4:	e004      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aac:	e000      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005abc:	f023 0107 	bic.w	r1, r3, #7
 8005ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac6:	4a78      	ldr	r2, [pc, #480]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6513      	str	r3, [r2, #80]	@ 0x50
 8005acc:	e003      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005ae2:	f04f 0b00 	mov.w	fp, #0
 8005ae6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005aea:	d04c      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005af6:	d030      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afc:	d829      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b00:	d02d      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b04:	d825      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b06:	2b80      	cmp	r3, #128	@ 0x80
 8005b08:	d018      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b0a:	2b80      	cmp	r3, #128	@ 0x80
 8005b0c:	d821      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b12:	2b40      	cmp	r3, #64	@ 0x40
 8005b14:	d007      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b16:	e01c      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b18:	4b63      	ldr	r3, [pc, #396]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1c:	4a62      	ldr	r2, [pc, #392]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b24:	e01c      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f002 fab8 	bl	80080a4 <RCCEx_PLL2_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b3a:	e011      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b40:	3328      	adds	r3, #40	@ 0x28
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f002 fb5f 	bl	8008208 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b50:	e006      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b68:	4b4f      	ldr	r3, [pc, #316]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b76:	4a4c      	ldr	r2, [pc, #304]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b7c:	e003      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005b92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005b96:	2300      	movs	r3, #0
 8005b98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005b9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	d053      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005baa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005bae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bb2:	d035      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005bb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bb8:	d82e      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005bbe:	d031      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005bc0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005bc4:	d828      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bca:	d01a      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bd0:	d822      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bda:	d007      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005bdc:	e01c      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bde:	4b32      	ldr	r3, [pc, #200]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be2:	4a31      	ldr	r2, [pc, #196]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bea:	e01c      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f002 fa55 	bl	80080a4 <RCCEx_PLL2_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c00:	e011      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	3328      	adds	r3, #40	@ 0x28
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f002 fafc 	bl	8008208 <RCCEx_PLL3_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c16:	e006      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c1e:	e002      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10b      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c32:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c44:	e003      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005c5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	d056      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c7a:	d038      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c80:	d831      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c86:	d034      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005c88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c8c:	d82b      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c92:	d01d      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005c94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c98:	d825      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ca4:	e01f      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ca6:	bf00      	nop
 8005ca8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cac:	4ba2      	ldr	r3, [pc, #648]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	4aa1      	ldr	r2, [pc, #644]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cb8:	e01c      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f002 f9ee 	bl	80080a4 <RCCEx_PLL2_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cce:	e011      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	3328      	adds	r3, #40	@ 0x28
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f002 fa95 	bl	8008208 <RCCEx_PLL3_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce4:	e006      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cec:	e002      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005cfc:	4b8e      	ldr	r3, [pc, #568]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d0c:	4a8a      	ldr	r2, [pc, #552]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d12:	e003      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d36:	460b      	mov	r3, r1
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	d03a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d42:	2b30      	cmp	r3, #48	@ 0x30
 8005d44:	d01f      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005d46:	2b30      	cmp	r3, #48	@ 0x30
 8005d48:	d819      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d00c      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d815      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d019      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d111      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5a:	4b77      	ldr	r3, [pc, #476]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	4a76      	ldr	r2, [pc, #472]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d66:	e011      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2102      	movs	r1, #2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f002 f997 	bl	80080a4 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d7c:	e006      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d84:	e002      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d94:	4b68      	ldr	r3, [pc, #416]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da2:	4a65      	ldr	r2, [pc, #404]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	d051      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ddc:	d035      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005dde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005de2:	d82e      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005de4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005de8:	d031      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005dea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dee:	d828      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df4:	d01a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfa:	d822      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e04:	d007      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e06:	e01c      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e08:	4b4b      	ldr	r3, [pc, #300]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e14:	e01c      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f002 f940 	bl	80080a4 <RCCEx_PLL2_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e2a:	e011      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	3328      	adds	r3, #40	@ 0x28
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f002 f9e7 	bl	8008208 <RCCEx_PLL3_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e40:	e006      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e48:	e002      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e4a:	bf00      	nop
 8005e4c:	e000      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e58:	4b37      	ldr	r3, [pc, #220]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e66:	4a34      	ldr	r2, [pc, #208]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e6c:	e003      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005e82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e86:	2300      	movs	r3, #0
 8005e88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e90:	460b      	mov	r3, r1
 8005e92:	4313      	orrs	r3, r2
 8005e94:	d056      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea0:	d033      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005ea2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea6:	d82c      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ea8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eac:	d02f      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005eae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eb2:	d826      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005eb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005eb8:	d02b      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005eba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ebe:	d820      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec4:	d012      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eca:	d81a      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d022      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed4:	d115      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eda:	3308      	adds	r3, #8
 8005edc:	2101      	movs	r1, #1
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f002 f8e0 	bl	80080a4 <RCCEx_PLL2_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005eea:	e015      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef0:	3328      	adds	r3, #40	@ 0x28
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f002 f987 	bl	8008208 <RCCEx_PLL3_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f00:	e00a      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f08:	e006      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f0a:	bf00      	nop
 8005f0c:	e004      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f0e:	bf00      	nop
 8005f10:	e002      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10d      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f20:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f2e:	4a02      	ldr	r2, [pc, #8]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f34:	e006      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f36:	bf00      	nop
 8005f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f54:	2300      	movs	r3, #0
 8005f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4313      	orrs	r3, r2
 8005f62:	d055      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f70:	d033      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f76:	d82c      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f7c:	d02f      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f82:	d826      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f88:	d02b      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005f8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f8e:	d820      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f94:	d012      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005f96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f9a:	d81a      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d022      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005fa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa4:	d115      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005faa:	3308      	adds	r3, #8
 8005fac:	2101      	movs	r1, #1
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f002 f878 	bl	80080a4 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fba:	e015      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	3328      	adds	r3, #40	@ 0x28
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f002 f91f 	bl	8008208 <RCCEx_PLL3_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fda:	bf00      	nop
 8005fdc:	e004      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ff0:	4ba3      	ldr	r3, [pc, #652]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006000:	4a9f      	ldr	r2, [pc, #636]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006002:	430b      	orrs	r3, r1
 8006004:	6593      	str	r3, [r2, #88]	@ 0x58
 8006006:	e003      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800600c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800601c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006020:	2300      	movs	r3, #0
 8006022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800602a:	460b      	mov	r3, r1
 800602c:	4313      	orrs	r3, r2
 800602e:	d037      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800603a:	d00e      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800603c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006040:	d816      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d018      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800604a:	d111      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604c:	4b8c      	ldr	r3, [pc, #560]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006050:	4a8b      	ldr	r2, [pc, #556]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006056:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006058:	e00f      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	3308      	adds	r3, #8
 8006060:	2101      	movs	r1, #1
 8006062:	4618      	mov	r0, r3
 8006064:	f002 f81e 	bl	80080a4 <RCCEx_PLL2_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800606e:	e004      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006082:	4b7f      	ldr	r3, [pc, #508]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006086:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800608a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006090:	4a7b      	ldr	r2, [pc, #492]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006092:	430b      	orrs	r3, r1
 8006094:	6513      	str	r3, [r2, #80]	@ 0x50
 8006096:	e003      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80060ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d039      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d81c      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80060ca:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	0800610d 	.word	0x0800610d
 80060d4:	080060e1 	.word	0x080060e1
 80060d8:	080060ef 	.word	0x080060ef
 80060dc:	0800610d 	.word	0x0800610d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e0:	4b67      	ldr	r3, [pc, #412]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e4:	4a66      	ldr	r2, [pc, #408]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060ec:	e00f      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f2:	3308      	adds	r3, #8
 80060f4:	2102      	movs	r1, #2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 ffd4 	bl	80080a4 <RCCEx_PLL2_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006102:	e004      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800610c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006116:	4b5a      	ldr	r3, [pc, #360]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611a:	f023 0103 	bic.w	r1, r3, #3
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006124:	4a56      	ldr	r2, [pc, #344]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006126:	430b      	orrs	r3, r1
 8006128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800612a:	e003      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006140:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800614a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800614e:	460b      	mov	r3, r1
 8006150:	4313      	orrs	r3, r2
 8006152:	f000 809f 	beq.w	8006294 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006156:	4b4b      	ldr	r3, [pc, #300]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a4a      	ldr	r2, [pc, #296]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006160:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006162:	f7fa f98f 	bl	8000484 <HAL_GetTick>
 8006166:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800616a:	e00b      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800616c:	f7fa f98a 	bl	8000484 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b64      	cmp	r3, #100	@ 0x64
 800617a:	d903      	bls.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006182:	e005      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006184:	4b3f      	ldr	r3, [pc, #252]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0ed      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006194:	2b00      	cmp	r3, #0
 8006196:	d179      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006198:	4b39      	ldr	r3, [pc, #228]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800619a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061a4:	4053      	eors	r3, r2
 80061a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d015      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061ae:	4b34      	ldr	r3, [pc, #208]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061ba:	4b31      	ldr	r3, [pc, #196]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061be:	4a30      	ldr	r2, [pc, #192]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e6:	d118      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e8:	f7fa f94c 	bl	8000484 <HAL_GetTick>
 80061ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061f0:	e00d      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f2:	f7fa f947 	bl	8000484 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061fc:	1ad2      	subs	r2, r2, r3
 80061fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006202:	429a      	cmp	r2, r3
 8006204:	d903      	bls.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800620c:	e005      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800620e:	4b1c      	ldr	r3, [pc, #112]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0eb      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800621a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621e:	2b00      	cmp	r3, #0
 8006220:	d129      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800622a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006232:	d10e      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006234:	4b12      	ldr	r3, [pc, #72]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006244:	091a      	lsrs	r2, r3, #4
 8006246:	4b10      	ldr	r3, [pc, #64]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006248:	4013      	ands	r3, r2
 800624a:	4a0d      	ldr	r2, [pc, #52]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800624c:	430b      	orrs	r3, r1
 800624e:	6113      	str	r3, [r2, #16]
 8006250:	e005      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006252:	4b0b      	ldr	r3, [pc, #44]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	4a0a      	ldr	r2, [pc, #40]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006258:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800625c:	6113      	str	r3, [r2, #16]
 800625e:	4b08      	ldr	r3, [pc, #32]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006260:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006266:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800626a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626e:	4a04      	ldr	r2, [pc, #16]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006270:	430b      	orrs	r3, r1
 8006272:	6713      	str	r3, [r2, #112]	@ 0x70
 8006274:	e00e      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800627a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800627e:	e009      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006280:	58024400 	.word	0x58024400
 8006284:	58024800 	.word	0x58024800
 8006288:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f002 0301 	and.w	r3, r2, #1
 80062a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062a4:	2300      	movs	r3, #0
 80062a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f000 8089 	beq.w	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062bc:	2b28      	cmp	r3, #40	@ 0x28
 80062be:	d86b      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80062c0:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080063a1 	.word	0x080063a1
 80062cc:	08006399 	.word	0x08006399
 80062d0:	08006399 	.word	0x08006399
 80062d4:	08006399 	.word	0x08006399
 80062d8:	08006399 	.word	0x08006399
 80062dc:	08006399 	.word	0x08006399
 80062e0:	08006399 	.word	0x08006399
 80062e4:	08006399 	.word	0x08006399
 80062e8:	0800636d 	.word	0x0800636d
 80062ec:	08006399 	.word	0x08006399
 80062f0:	08006399 	.word	0x08006399
 80062f4:	08006399 	.word	0x08006399
 80062f8:	08006399 	.word	0x08006399
 80062fc:	08006399 	.word	0x08006399
 8006300:	08006399 	.word	0x08006399
 8006304:	08006399 	.word	0x08006399
 8006308:	08006383 	.word	0x08006383
 800630c:	08006399 	.word	0x08006399
 8006310:	08006399 	.word	0x08006399
 8006314:	08006399 	.word	0x08006399
 8006318:	08006399 	.word	0x08006399
 800631c:	08006399 	.word	0x08006399
 8006320:	08006399 	.word	0x08006399
 8006324:	08006399 	.word	0x08006399
 8006328:	080063a1 	.word	0x080063a1
 800632c:	08006399 	.word	0x08006399
 8006330:	08006399 	.word	0x08006399
 8006334:	08006399 	.word	0x08006399
 8006338:	08006399 	.word	0x08006399
 800633c:	08006399 	.word	0x08006399
 8006340:	08006399 	.word	0x08006399
 8006344:	08006399 	.word	0x08006399
 8006348:	080063a1 	.word	0x080063a1
 800634c:	08006399 	.word	0x08006399
 8006350:	08006399 	.word	0x08006399
 8006354:	08006399 	.word	0x08006399
 8006358:	08006399 	.word	0x08006399
 800635c:	08006399 	.word	0x08006399
 8006360:	08006399 	.word	0x08006399
 8006364:	08006399 	.word	0x08006399
 8006368:	080063a1 	.word	0x080063a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006370:	3308      	adds	r3, #8
 8006372:	2101      	movs	r1, #1
 8006374:	4618      	mov	r0, r3
 8006376:	f001 fe95 	bl	80080a4 <RCCEx_PLL2_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006380:	e00f      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006386:	3328      	adds	r3, #40	@ 0x28
 8006388:	2101      	movs	r1, #1
 800638a:	4618      	mov	r0, r3
 800638c:	f001 ff3c 	bl	8008208 <RCCEx_PLL3_Config>
 8006390:	4603      	mov	r3, r0
 8006392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006396:	e004      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800639e:	e000      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80063a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063aa:	4bbf      	ldr	r3, [pc, #764]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80063b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063b8:	4abb      	ldr	r2, [pc, #748]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063ba:	430b      	orrs	r3, r1
 80063bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80063be:	e003      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	f002 0302 	and.w	r3, r2, #2
 80063d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063d8:	2300      	movs	r3, #0
 80063da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063e2:	460b      	mov	r3, r1
 80063e4:	4313      	orrs	r3, r2
 80063e6:	d041      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80063e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063ee:	2b05      	cmp	r3, #5
 80063f0:	d824      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80063f2:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006445 	.word	0x08006445
 80063fc:	08006411 	.word	0x08006411
 8006400:	08006427 	.word	0x08006427
 8006404:	08006445 	.word	0x08006445
 8006408:	08006445 	.word	0x08006445
 800640c:	08006445 	.word	0x08006445
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006414:	3308      	adds	r3, #8
 8006416:	2101      	movs	r1, #1
 8006418:	4618      	mov	r0, r3
 800641a:	f001 fe43 	bl	80080a4 <RCCEx_PLL2_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006424:	e00f      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	3328      	adds	r3, #40	@ 0x28
 800642c:	2101      	movs	r1, #1
 800642e:	4618      	mov	r0, r3
 8006430:	f001 feea 	bl	8008208 <RCCEx_PLL3_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800643a:	e004      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006442:	e000      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800644e:	4b96      	ldr	r3, [pc, #600]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006452:	f023 0107 	bic.w	r1, r3, #7
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800645c:	4a92      	ldr	r2, [pc, #584]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800645e:	430b      	orrs	r3, r1
 8006460:	6553      	str	r3, [r2, #84]	@ 0x54
 8006462:	e003      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f002 0304 	and.w	r3, r2, #4
 8006478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800647c:	2300      	movs	r3, #0
 800647e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006482:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006486:	460b      	mov	r3, r1
 8006488:	4313      	orrs	r3, r2
 800648a:	d044      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006494:	2b05      	cmp	r3, #5
 8006496:	d825      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006498:	a201      	add	r2, pc, #4	@ (adr r2, 80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064ed 	.word	0x080064ed
 80064a4:	080064b9 	.word	0x080064b9
 80064a8:	080064cf 	.word	0x080064cf
 80064ac:	080064ed 	.word	0x080064ed
 80064b0:	080064ed 	.word	0x080064ed
 80064b4:	080064ed 	.word	0x080064ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	3308      	adds	r3, #8
 80064be:	2101      	movs	r1, #1
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 fdef 	bl	80080a4 <RCCEx_PLL2_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064cc:	e00f      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	3328      	adds	r3, #40	@ 0x28
 80064d4:	2101      	movs	r1, #1
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 fe96 	bl	8008208 <RCCEx_PLL3_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064e2:	e004      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ea:	e000      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80064ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10b      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064f6:	4b6c      	ldr	r3, [pc, #432]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064fa:	f023 0107 	bic.w	r1, r3, #7
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006506:	4a68      	ldr	r2, [pc, #416]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006508:	430b      	orrs	r3, r1
 800650a:	6593      	str	r3, [r2, #88]	@ 0x58
 800650c:	e003      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f002 0320 	and.w	r3, r2, #32
 8006522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006526:	2300      	movs	r3, #0
 8006528:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800652c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006530:	460b      	mov	r3, r1
 8006532:	4313      	orrs	r3, r2
 8006534:	d055      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006542:	d033      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006544:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006548:	d82c      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800654a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800654e:	d02f      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006554:	d826      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006556:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800655a:	d02b      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800655c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006560:	d820      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006566:	d012      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800656c:	d81a      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d022      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006576:	d115      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657c:	3308      	adds	r3, #8
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f001 fd8f 	bl	80080a4 <RCCEx_PLL2_Config>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800658c:	e015      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	3328      	adds	r3, #40	@ 0x28
 8006594:	2102      	movs	r1, #2
 8006596:	4618      	mov	r0, r3
 8006598:	f001 fe36 	bl	8008208 <RCCEx_PLL3_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065a2:	e00a      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065aa:	e006      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065ac:	bf00      	nop
 80065ae:	e004      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065b0:	bf00      	nop
 80065b2:	e002      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065b4:	bf00      	nop
 80065b6:	e000      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065c2:	4b39      	ldr	r3, [pc, #228]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d2:	4a35      	ldr	r2, [pc, #212]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80065d8:	e003      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80065ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065f2:	2300      	movs	r3, #0
 80065f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4313      	orrs	r3, r2
 8006600:	d058      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800660a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800660e:	d033      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006610:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006614:	d82c      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661a:	d02f      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800661c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006620:	d826      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006622:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006626:	d02b      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006628:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800662c:	d820      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800662e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006632:	d012      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006638:	d81a      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d022      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800663e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006642:	d115      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006648:	3308      	adds	r3, #8
 800664a:	2100      	movs	r1, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f001 fd29 	bl	80080a4 <RCCEx_PLL2_Config>
 8006652:	4603      	mov	r3, r0
 8006654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006658:	e015      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665e:	3328      	adds	r3, #40	@ 0x28
 8006660:	2102      	movs	r1, #2
 8006662:	4618      	mov	r0, r3
 8006664:	f001 fdd0 	bl	8008208 <RCCEx_PLL3_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800666e:	e00a      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006676:	e006      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006678:	bf00      	nop
 800667a:	e004      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800667c:	bf00      	nop
 800667e:	e002      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006680:	bf00      	nop
 8006682:	e000      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10e      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800668e:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006692:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800669e:	4a02      	ldr	r2, [pc, #8]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066a0:	430b      	orrs	r3, r1
 80066a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80066a4:	e006      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80066a6:	bf00      	nop
 80066a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80066c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066c4:	2300      	movs	r3, #0
 80066c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066ce:	460b      	mov	r3, r1
 80066d0:	4313      	orrs	r3, r2
 80066d2:	d055      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066e0:	d033      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80066e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066e6:	d82c      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066ec:	d02f      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80066ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066f2:	d826      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066f8:	d02b      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80066fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066fe:	d820      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006700:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006704:	d012      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006706:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800670a:	d81a      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d022      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006714:	d115      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	3308      	adds	r3, #8
 800671c:	2100      	movs	r1, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f001 fcc0 	bl	80080a4 <RCCEx_PLL2_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800672a:	e015      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	3328      	adds	r3, #40	@ 0x28
 8006732:	2102      	movs	r1, #2
 8006734:	4618      	mov	r0, r3
 8006736:	f001 fd67 	bl	8008208 <RCCEx_PLL3_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006740:	e00a      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006748:	e006      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800674a:	bf00      	nop
 800674c:	e004      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800674e:	bf00      	nop
 8006750:	e002      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006752:	bf00      	nop
 8006754:	e000      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006760:	4ba1      	ldr	r3, [pc, #644]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006764:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006770:	4a9d      	ldr	r2, [pc, #628]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006772:	430b      	orrs	r3, r1
 8006774:	6593      	str	r3, [r2, #88]	@ 0x58
 8006776:	e003      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f002 0308 	and.w	r3, r2, #8
 800678c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006790:	2300      	movs	r3, #0
 8006792:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006796:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800679a:	460b      	mov	r3, r1
 800679c:	4313      	orrs	r3, r2
 800679e:	d01e      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80067a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ac:	d10c      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b2:	3328      	adds	r3, #40	@ 0x28
 80067b4:	2102      	movs	r1, #2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 fd26 	bl	8008208 <RCCEx_PLL3_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80067c8:	4b87      	ldr	r3, [pc, #540]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067d8:	4a83      	ldr	r2, [pc, #524]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067da:	430b      	orrs	r3, r1
 80067dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f002 0310 	and.w	r3, r2, #16
 80067ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067ee:	2300      	movs	r3, #0
 80067f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	d01e      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800680a:	d10c      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800680c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006810:	3328      	adds	r3, #40	@ 0x28
 8006812:	2102      	movs	r1, #2
 8006814:	4618      	mov	r0, r3
 8006816:	f001 fcf7 	bl	8008208 <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006826:	4b70      	ldr	r3, [pc, #448]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006832:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006836:	4a6c      	ldr	r2, [pc, #432]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006838:	430b      	orrs	r3, r1
 800683a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006848:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006852:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006856:	460b      	mov	r3, r1
 8006858:	4313      	orrs	r3, r2
 800685a:	d03e      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800685c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006868:	d022      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800686a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800686e:	d81b      	bhi.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006878:	d00b      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800687a:	e015      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800687c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006880:	3308      	adds	r3, #8
 8006882:	2100      	movs	r1, #0
 8006884:	4618      	mov	r0, r3
 8006886:	f001 fc0d 	bl	80080a4 <RCCEx_PLL2_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006890:	e00f      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	3328      	adds	r3, #40	@ 0x28
 8006898:	2102      	movs	r1, #2
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fcb4 	bl	8008208 <RCCEx_PLL3_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068a6:	e004      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ae:	e000      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80068b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10b      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068ba:	4b4b      	ldr	r3, [pc, #300]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068ca:	4a47      	ldr	r2, [pc, #284]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80068d0:	e003      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80068e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068e8:	2300      	movs	r3, #0
 80068ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068f0:	460b      	mov	r3, r1
 80068f2:	4313      	orrs	r3, r2
 80068f4:	d03b      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006902:	d01f      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006904:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006908:	d818      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800690a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800690e:	d003      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006910:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006914:	d007      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006916:	e011      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006918:	4b33      	ldr	r3, [pc, #204]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	4a32      	ldr	r2, [pc, #200]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800691e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006924:	e00f      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692a:	3328      	adds	r3, #40	@ 0x28
 800692c:	2101      	movs	r1, #1
 800692e:	4618      	mov	r0, r3
 8006930:	f001 fc6a 	bl	8008208 <RCCEx_PLL3_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800693a:	e004      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006942:	e000      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800694e:	4b26      	ldr	r3, [pc, #152]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006952:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695e:	4a22      	ldr	r2, [pc, #136]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006960:	430b      	orrs	r3, r1
 8006962:	6553      	str	r3, [r2, #84]	@ 0x54
 8006964:	e003      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800697a:	673b      	str	r3, [r7, #112]	@ 0x70
 800697c:	2300      	movs	r3, #0
 800697e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006980:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006984:	460b      	mov	r3, r1
 8006986:	4313      	orrs	r3, r2
 8006988:	d034      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006998:	d007      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800699a:	e011      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800699c:	4b12      	ldr	r3, [pc, #72]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	4a11      	ldr	r2, [pc, #68]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069a8:	e00e      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ae:	3308      	adds	r3, #8
 80069b0:	2102      	movs	r1, #2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f001 fb76 	bl	80080a4 <RCCEx_PLL2_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069be:	e003      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10d      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069d0:	4b05      	ldr	r3, [pc, #20]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069de:	4a02      	ldr	r2, [pc, #8]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e0:	430b      	orrs	r3, r1
 80069e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069e4:	e006      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80069e6:	bf00      	nop
 80069e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a02:	2300      	movs	r3, #0
 8006a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	d00c      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a14:	3328      	adds	r3, #40	@ 0x28
 8006a16:	2102      	movs	r1, #2
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 fbf5 	bl	8008208 <RCCEx_PLL3_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a36:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a38:	2300      	movs	r3, #0
 8006a3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d038      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a52:	d018      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006a54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a58:	d811      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a5e:	d014      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a64:	d80b      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d011      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a6e:	d106      	bne.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a70:	4bc3      	ldr	r3, [pc, #780]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	4ac2      	ldr	r2, [pc, #776]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006a7c:	e008      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a84:	e004      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a86:	bf00      	nop
 8006a88:	e002      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a8a:	bf00      	nop
 8006a8c:	e000      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10b      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a98:	4bb9      	ldr	r3, [pc, #740]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aa8:	4ab5      	ldr	r2, [pc, #724]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	6553      	str	r3, [r2, #84]	@ 0x54
 8006aae:	e003      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ac4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	d009      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ad4:	4baa      	ldr	r3, [pc, #680]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae2:	4aa7      	ldr	r2, [pc, #668]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006af4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af6:	2300      	movs	r3, #0
 8006af8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006afa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d00a      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b04:	4b9e      	ldr	r3, [pc, #632]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b14:	4a9a      	ldr	r2, [pc, #616]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b28:	2300      	movs	r3, #0
 8006b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b30:	460b      	mov	r3, r1
 8006b32:	4313      	orrs	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b36:	4b92      	ldr	r3, [pc, #584]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b3a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b44:	4a8e      	ldr	r2, [pc, #568]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b46:	430b      	orrs	r3, r1
 8006b48:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b58:	2300      	movs	r3, #0
 8006b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b60:	460b      	mov	r3, r1
 8006b62:	4313      	orrs	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b66:	4b86      	ldr	r3, [pc, #536]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	4a85      	ldr	r2, [pc, #532]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b70:	6113      	str	r3, [r2, #16]
 8006b72:	4b83      	ldr	r3, [pc, #524]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b74:	6919      	ldr	r1, [r3, #16]
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b7e:	4a80      	ldr	r2, [pc, #512]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b92:	2300      	movs	r3, #0
 8006b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	d009      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ba0:	4b77      	ldr	r3, [pc, #476]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bae:	4a74      	ldr	r2, [pc, #464]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	d00a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bd0:	4b6b      	ldr	r3, [pc, #428]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006be0:	4a67      	ldr	r2, [pc, #412]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006be2:	430b      	orrs	r3, r1
 8006be4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	2100      	movs	r1, #0
 8006bf0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bf8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	d011      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c06:	3308      	adds	r3, #8
 8006c08:	2100      	movs	r1, #0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 fa4a 	bl	80080a4 <RCCEx_PLL2_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	6239      	str	r1, [r7, #32]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	d011      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	3308      	adds	r3, #8
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 fa2a 	bl	80080a4 <RCCEx_PLL2_Config>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	2100      	movs	r1, #0
 8006c70:	61b9      	str	r1, [r7, #24]
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	d011      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c86:	3308      	adds	r3, #8
 8006c88:	2102      	movs	r1, #2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fa0a 	bl	80080a4 <RCCEx_PLL2_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	2100      	movs	r1, #0
 8006cb0:	6139      	str	r1, [r7, #16]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	d011      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc6:	3328      	adds	r3, #40	@ 0x28
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 fa9c 	bl	8008208 <RCCEx_PLL3_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	2100      	movs	r1, #0
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	d011      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d06:	3328      	adds	r3, #40	@ 0x28
 8006d08:	2101      	movs	r1, #1
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 fa7c 	bl	8008208 <RCCEx_PLL3_Config>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	2100      	movs	r1, #0
 8006d30:	6039      	str	r1, [r7, #0]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	607b      	str	r3, [r7, #4]
 8006d38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	d011      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d46:	3328      	adds	r3, #40	@ 0x28
 8006d48:	2102      	movs	r1, #2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fa5c 	bl	8008208 <RCCEx_PLL3_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006d66:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d80:	58024400 	.word	0x58024400

08006d84 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b090      	sub	sp, #64	@ 0x40
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d92:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006d96:	430b      	orrs	r3, r1
 8006d98:	f040 8094 	bne.w	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006d9c:	4b9e      	ldr	r3, [pc, #632]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	f200 8087 	bhi.w	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006dae:	a201      	add	r2, pc, #4	@ (adr r2, 8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006dc9 	.word	0x08006dc9
 8006db8:	08006df1 	.word	0x08006df1
 8006dbc:	08006e19 	.word	0x08006e19
 8006dc0:	08006eb5 	.word	0x08006eb5
 8006dc4:	08006e41 	.word	0x08006e41
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dc8:	4b93      	ldr	r3, [pc, #588]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dd4:	d108      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 f810 	bl	8007e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de4:	f000 bd45 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dec:	f000 bd41 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006df0:	4b89      	ldr	r3, [pc, #548]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006df8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dfc:	d108      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dfe:	f107 0318 	add.w	r3, r7, #24
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fd54 	bl	80078b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e0c:	f000 bd31 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e14:	f000 bd2d 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e18:	4b7f      	ldr	r3, [pc, #508]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e24:	d108      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e26:	f107 030c 	add.w	r3, r7, #12
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fe94 	bl	8007b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e34:	f000 bd1d 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e3c:	f000 bd19 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e40:	4b75      	ldr	r3, [pc, #468]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e4a:	4b73      	ldr	r3, [pc, #460]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d109      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e5c:	4b6e      	ldr	r3, [pc, #440]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	08db      	lsrs	r3, r3, #3
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	4a6d      	ldr	r2, [pc, #436]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e6e:	e01f      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e70:	4b69      	ldr	r3, [pc, #420]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e7c:	d106      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e84:	d102      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e86:	4b66      	ldr	r3, [pc, #408]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e8a:	e011      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e8c:	4b62      	ldr	r3, [pc, #392]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e98:	d106      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ea0:	d102      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ea2:	4b60      	ldr	r3, [pc, #384]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ea6:	e003      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006eac:	f000 bce1 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006eb0:	f000 bcdf 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006eb4:	4b5c      	ldr	r3, [pc, #368]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eb8:	f000 bcdb 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec0:	f000 bcd7 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ec8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	f040 80ad 	bne.w	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006ed2:	4b51      	ldr	r3, [pc, #324]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006eda:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ee2:	d056      	beq.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eea:	f200 8090 	bhi.w	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ef2:	f000 8088 	beq.w	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006efa:	f200 8088 	bhi.w	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	2b80      	cmp	r3, #128	@ 0x80
 8006f02:	d032      	beq.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	2b80      	cmp	r3, #128	@ 0x80
 8006f08:	f200 8081 	bhi.w	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	2b40      	cmp	r3, #64	@ 0x40
 8006f16:	d014      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006f18:	e079      	b.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f26:	d108      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 ff67 	bl	8007e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f36:	f000 bc9c 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3e:	f000 bc98 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f42:	4b35      	ldr	r3, [pc, #212]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f4e:	d108      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f50:	f107 0318 	add.w	r3, r7, #24
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fcab 	bl	80078b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f5e:	f000 bc88 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f66:	f000 bc84 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f76:	d108      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f78:	f107 030c 	add.w	r3, r7, #12
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fdeb 	bl	8007b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f86:	f000 bc74 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f8e:	f000 bc70 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f92:	4b21      	ldr	r3, [pc, #132]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d10c      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d109      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fae:	4b1a      	ldr	r3, [pc, #104]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	08db      	lsrs	r3, r3, #3
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	4a18      	ldr	r2, [pc, #96]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fba:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fc0:	e01f      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fc2:	4b15      	ldr	r3, [pc, #84]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fce:	d106      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fd6:	d102      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006fd8:	4b11      	ldr	r3, [pc, #68]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fdc:	e011      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fde:	4b0e      	ldr	r3, [pc, #56]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fea:	d106      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff2:	d102      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ff8:	e003      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ffe:	f000 bc38 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007002:	f000 bc36 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007006:	4b08      	ldr	r3, [pc, #32]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800700a:	f000 bc32 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007012:	f000 bc2e 	b.w	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007016:	bf00      	nop
 8007018:	58024400 	.word	0x58024400
 800701c:	03d09000 	.word	0x03d09000
 8007020:	003d0900 	.word	0x003d0900
 8007024:	017d7840 	.word	0x017d7840
 8007028:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800702c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007030:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007034:	430b      	orrs	r3, r1
 8007036:	f040 809c 	bne.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800703a:	4b9e      	ldr	r3, [pc, #632]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800703c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007042:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007046:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800704a:	d054      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800704c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007052:	f200 808b 	bhi.w	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800705c:	f000 8083 	beq.w	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007066:	f200 8081 	bhi.w	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007070:	d02f      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007078:	d878      	bhi.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007086:	d012      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007088:	e070      	b.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800708a:	4b8a      	ldr	r3, [pc, #552]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007096:	d107      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800709c:	4618      	mov	r0, r3
 800709e:	f000 feaf 	bl	8007e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070a6:	e3e4      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ac:	e3e1      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ae:	4b81      	ldr	r3, [pc, #516]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ba:	d107      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070bc:	f107 0318 	add.w	r3, r7, #24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 fbf5 	bl	80078b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ca:	e3d2      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d0:	e3cf      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070d2:	4b78      	ldr	r3, [pc, #480]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070de:	d107      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e0:	f107 030c 	add.w	r3, r7, #12
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fd37 	bl	8007b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ee:	e3c0      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f4:	e3bd      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070f6:	4b6f      	ldr	r3, [pc, #444]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007100:	4b6c      	ldr	r3, [pc, #432]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b04      	cmp	r3, #4
 800710a:	d10c      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800710c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710e:	2b00      	cmp	r3, #0
 8007110:	d109      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007112:	4b68      	ldr	r3, [pc, #416]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	4a66      	ldr	r2, [pc, #408]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800711e:	fa22 f303 	lsr.w	r3, r2, r3
 8007122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007124:	e01e      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007126:	4b63      	ldr	r3, [pc, #396]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800712e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007132:	d106      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800713a:	d102      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800713c:	4b5f      	ldr	r3, [pc, #380]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007140:	e010      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007142:	4b5c      	ldr	r3, [pc, #368]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800714a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800714e:	d106      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007156:	d102      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007158:	4b59      	ldr	r3, [pc, #356]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800715c:	e002      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007162:	e386      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007164:	e385      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007166:	4b57      	ldr	r3, [pc, #348]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800716a:	e382      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007170:	e37f      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007176:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800717a:	430b      	orrs	r3, r1
 800717c:	f040 80a7 	bne.w	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007180:	4b4c      	ldr	r3, [pc, #304]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007184:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007188:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007190:	d055      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007194:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007198:	f200 8096 	bhi.w	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071a2:	f000 8084 	beq.w	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071ac:	f200 808c 	bhi.w	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071b6:	d030      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80071b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071be:	f200 8083 	bhi.w	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d004      	beq.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071ce:	d012      	beq.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80071d0:	e07a      	b.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071d2:	4b38      	ldr	r3, [pc, #224]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071de:	d107      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fe0b 	bl	8007e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ee:	e340      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f4:	e33d      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071f6:	4b2f      	ldr	r3, [pc, #188]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007202:	d107      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007204:	f107 0318 	add.w	r3, r7, #24
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fb51 	bl	80078b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007212:	e32e      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007218:	e32b      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800721a:	4b26      	ldr	r3, [pc, #152]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007226:	d107      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007228:	f107 030c 	add.w	r3, r7, #12
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fc93 	bl	8007b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007236:	e31c      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800723c:	e319      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800723e:	4b1d      	ldr	r3, [pc, #116]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007242:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007248:	4b1a      	ldr	r3, [pc, #104]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b04      	cmp	r3, #4
 8007252:	d10c      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800725a:	4b16      	ldr	r3, [pc, #88]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	08db      	lsrs	r3, r3, #3
 8007260:	f003 0303 	and.w	r3, r3, #3
 8007264:	4a14      	ldr	r2, [pc, #80]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007266:	fa22 f303 	lsr.w	r3, r2, r3
 800726a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800726c:	e01e      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800726e:	4b11      	ldr	r3, [pc, #68]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800727a:	d106      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800727c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007282:	d102      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007284:	4b0d      	ldr	r3, [pc, #52]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007288:	e010      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800728a:	4b0a      	ldr	r3, [pc, #40]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007296:	d106      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800729e:	d102      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072a0:	4b07      	ldr	r3, [pc, #28]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80072a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072a4:	e002      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072aa:	e2e2      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072ac:	e2e1      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072ae:	4b05      	ldr	r3, [pc, #20]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80072b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b2:	e2de      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072b4:	58024400 	.word	0x58024400
 80072b8:	03d09000 	.word	0x03d09000
 80072bc:	003d0900 	.word	0x003d0900
 80072c0:	017d7840 	.word	0x017d7840
 80072c4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072cc:	e2d1      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80072d6:	430b      	orrs	r3, r1
 80072d8:	f040 809c 	bne.w	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80072dc:	4b93      	ldr	r3, [pc, #588]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80072e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80072e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072ec:	d054      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80072ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072f4:	f200 808b 	bhi.w	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072fe:	f000 8083 	beq.w	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007304:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007308:	f200 8081 	bhi.w	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800730c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007312:	d02f      	beq.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800731a:	d878      	bhi.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800731c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731e:	2b00      	cmp	r3, #0
 8007320:	d004      	beq.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007328:	d012      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800732a:	e070      	b.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800732c:	4b7f      	ldr	r3, [pc, #508]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007338:	d107      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800733a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fd5e 	bl	8007e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007348:	e293      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800734e:	e290      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007350:	4b76      	ldr	r3, [pc, #472]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007358:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800735c:	d107      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800735e:	f107 0318 	add.w	r3, r7, #24
 8007362:	4618      	mov	r0, r3
 8007364:	f000 faa4 	bl	80078b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800736c:	e281      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007372:	e27e      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007374:	4b6d      	ldr	r3, [pc, #436]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800737c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007380:	d107      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007382:	f107 030c 	add.w	r3, r7, #12
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fbe6 	bl	8007b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007390:	e26f      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007396:	e26c      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007398:	4b64      	ldr	r3, [pc, #400]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800739a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800739c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073a2:	4b62      	ldr	r3, [pc, #392]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d10c      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80073ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d109      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073b4:	4b5d      	ldr	r3, [pc, #372]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	08db      	lsrs	r3, r3, #3
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	4a5c      	ldr	r2, [pc, #368]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
 80073c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073c6:	e01e      	b.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073c8:	4b58      	ldr	r3, [pc, #352]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073d4:	d106      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80073d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073dc:	d102      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073de:	4b55      	ldr	r3, [pc, #340]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80073e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073e2:	e010      	b.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073e4:	4b51      	ldr	r3, [pc, #324]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073f0:	d106      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80073f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073f8:	d102      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073fe:	e002      	b.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007404:	e235      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007406:	e234      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007408:	4b4c      	ldr	r3, [pc, #304]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800740a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800740c:	e231      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007412:	e22e      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007418:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800741c:	430b      	orrs	r3, r1
 800741e:	f040 808f 	bne.w	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007422:	4b42      	ldr	r3, [pc, #264]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007426:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800742a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800742c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007432:	d06b      	beq.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800743a:	d874      	bhi.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800743c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007442:	d056      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800744a:	d86c      	bhi.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800744c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007452:	d03b      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800745a:	d864      	bhi.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800745c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007462:	d021      	beq.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800746a:	d85c      	bhi.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	2b00      	cmp	r3, #0
 8007470:	d004      	beq.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007478:	d004      	beq.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800747a:	e054      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800747c:	f7fe fa20 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8007480:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007482:	e1f6      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007484:	4b29      	ldr	r3, [pc, #164]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800748c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007490:	d107      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007492:	f107 0318 	add.w	r3, r7, #24
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fa0a 	bl	80078b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074a0:	e1e7      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074a6:	e1e4      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074a8:	4b20      	ldr	r3, [pc, #128]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b4:	d107      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074b6:	f107 030c 	add.w	r3, r7, #12
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fb4c 	bl	8007b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074c4:	e1d5      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ca:	e1d2      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074cc:	4b17      	ldr	r3, [pc, #92]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d109      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074d8:	4b14      	ldr	r3, [pc, #80]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	08db      	lsrs	r3, r3, #3
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	4a13      	ldr	r2, [pc, #76]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80074e4:	fa22 f303 	lsr.w	r3, r2, r3
 80074e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ea:	e1c2      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f0:	e1bf      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80074f2:	4b0e      	ldr	r3, [pc, #56]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074fe:	d102      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007500:	4b0c      	ldr	r3, [pc, #48]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007504:	e1b5      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800750a:	e1b2      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800750c:	4b07      	ldr	r3, [pc, #28]	@ (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007518:	d102      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800751a:	4b07      	ldr	r3, [pc, #28]	@ (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800751c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800751e:	e1a8      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007524:	e1a5      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752a:	e1a2      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800752c:	58024400 	.word	0x58024400
 8007530:	03d09000 	.word	0x03d09000
 8007534:	003d0900 	.word	0x003d0900
 8007538:	017d7840 	.word	0x017d7840
 800753c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007544:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007548:	430b      	orrs	r3, r1
 800754a:	d173      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800754c:	4b9c      	ldr	r3, [pc, #624]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800754e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007550:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007554:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800755c:	d02f      	beq.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800755e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007560:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007564:	d863      	bhi.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800756c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007572:	d012      	beq.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007574:	e05b      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007576:	4b92      	ldr	r3, [pc, #584]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800757e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007582:	d107      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007584:	f107 0318 	add.w	r3, r7, #24
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f991 	bl	80078b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007592:	e16e      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007598:	e16b      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800759a:	4b89      	ldr	r3, [pc, #548]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075a6:	d107      	bne.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075a8:	f107 030c 	add.w	r3, r7, #12
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fad3 	bl	8007b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b6:	e15c      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075bc:	e159      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075be:	4b80      	ldr	r3, [pc, #512]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075c8:	4b7d      	ldr	r3, [pc, #500]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d10c      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80075d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d109      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075da:	4b79      	ldr	r3, [pc, #484]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	08db      	lsrs	r3, r3, #3
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	4a77      	ldr	r2, [pc, #476]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80075e6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075ec:	e01e      	b.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075ee:	4b74      	ldr	r3, [pc, #464]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075fa:	d106      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80075fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007602:	d102      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007604:	4b70      	ldr	r3, [pc, #448]	@ (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007608:	e010      	b.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800760a:	4b6d      	ldr	r3, [pc, #436]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007612:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007616:	d106      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800761e:	d102      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007620:	4b6a      	ldr	r3, [pc, #424]	@ (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007624:	e002      	b.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800762a:	e122      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800762c:	e121      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007632:	e11e      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007638:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800763c:	430b      	orrs	r3, r1
 800763e:	d133      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007640:	4b5f      	ldr	r3, [pc, #380]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007648:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800764a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	d004      	beq.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007656:	d012      	beq.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007658:	e023      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800765a:	4b59      	ldr	r3, [pc, #356]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007662:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007666:	d107      	bne.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fbc7 	bl	8007e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007676:	e0fc      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800767c:	e0f9      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800767e:	4b50      	ldr	r3, [pc, #320]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007686:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800768a:	d107      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800768c:	f107 0318 	add.w	r3, r7, #24
 8007690:	4618      	mov	r0, r3
 8007692:	f000 f90d 	bl	80078b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800769a:	e0ea      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a0:	e0e7      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a6:	e0e4      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80076a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80076b0:	430b      	orrs	r3, r1
 80076b2:	f040 808d 	bne.w	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80076b6:	4b42      	ldr	r3, [pc, #264]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80076be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076c6:	d06b      	beq.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80076c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076ce:	d874      	bhi.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d6:	d056      	beq.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80076d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076de:	d86c      	bhi.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80076e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076e6:	d03b      	beq.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076ee:	d864      	bhi.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80076f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f6:	d021      	beq.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076fe:	d85c      	bhi.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800770c:	d004      	beq.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800770e:	e054      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007710:	f000 f8b8 	bl	8007884 <HAL_RCCEx_GetD3PCLK1Freq>
 8007714:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007716:	e0ac      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007718:	4b29      	ldr	r3, [pc, #164]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007724:	d107      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007726:	f107 0318 	add.w	r3, r7, #24
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f8c0 	bl	80078b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007734:	e09d      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800773a:	e09a      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800773c:	4b20      	ldr	r3, [pc, #128]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007748:	d107      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800774a:	f107 030c 	add.w	r3, r7, #12
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fa02 	bl	8007b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007758:	e08b      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800775e:	e088      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007760:	4b17      	ldr	r3, [pc, #92]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b04      	cmp	r3, #4
 800776a:	d109      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800776c:	4b14      	ldr	r3, [pc, #80]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	08db      	lsrs	r3, r3, #3
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	4a13      	ldr	r2, [pc, #76]	@ (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007778:	fa22 f303 	lsr.w	r3, r2, r3
 800777c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800777e:	e078      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007784:	e075      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007786:	4b0e      	ldr	r3, [pc, #56]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800778e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007792:	d102      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007794:	4b0c      	ldr	r3, [pc, #48]	@ (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007798:	e06b      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800779e:	e068      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077a0:	4b07      	ldr	r3, [pc, #28]	@ (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ac:	d102      	bne.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80077ae:	4b07      	ldr	r3, [pc, #28]	@ (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80077b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b2:	e05e      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077b8:	e05b      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077be:	e058      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077c0:	58024400 	.word	0x58024400
 80077c4:	03d09000 	.word	0x03d09000
 80077c8:	003d0900 	.word	0x003d0900
 80077cc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80077d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80077d8:	430b      	orrs	r3, r1
 80077da:	d148      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80077dc:	4b27      	ldr	r3, [pc, #156]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80077de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80077e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ec:	d02a      	beq.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077f4:	d838      	bhi.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80077f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007802:	d00d      	beq.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007804:	e030      	b.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007806:	4b1d      	ldr	r3, [pc, #116]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007812:	d102      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007814:	4b1a      	ldr	r3, [pc, #104]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007818:	e02b      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800781e:	e028      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007820:	4b16      	ldr	r3, [pc, #88]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007828:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800782c:	d107      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800782e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fae4 	bl	8007e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800783c:	e019      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007842:	e016      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007844:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800784c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007850:	d107      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007852:	f107 0318 	add.w	r3, r7, #24
 8007856:	4618      	mov	r0, r3
 8007858:	f000 f82a 	bl	80078b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007860:	e007      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007866:	e004      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800786c:	e001      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800786e:	2300      	movs	r3, #0
 8007870:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007874:	4618      	mov	r0, r3
 8007876:	3740      	adds	r7, #64	@ 0x40
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	58024400 	.word	0x58024400
 8007880:	017d7840 	.word	0x017d7840

08007884 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007888:	f7fd ffea 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 800788c:	4602      	mov	r2, r0
 800788e:	4b06      	ldr	r3, [pc, #24]	@ (80078a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	091b      	lsrs	r3, r3, #4
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	4904      	ldr	r1, [pc, #16]	@ (80078ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800789a:	5ccb      	ldrb	r3, [r1, r3]
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	58024400 	.word	0x58024400
 80078ac:	080160bc 	.word	0x080160bc

080078b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b089      	sub	sp, #36	@ 0x24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078b8:	4ba1      	ldr	r3, [pc, #644]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80078c2:	4b9f      	ldr	r3, [pc, #636]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c6:	0b1b      	lsrs	r3, r3, #12
 80078c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80078ce:	4b9c      	ldr	r3, [pc, #624]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d2:	091b      	lsrs	r3, r3, #4
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80078da:	4b99      	ldr	r3, [pc, #612]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078de:	08db      	lsrs	r3, r3, #3
 80078e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	fb02 f303 	mul.w	r3, r2, r3
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8111 	beq.w	8007b20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2b02      	cmp	r3, #2
 8007902:	f000 8083 	beq.w	8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b02      	cmp	r3, #2
 800790a:	f200 80a1 	bhi.w	8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d056      	beq.n	80079c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800791a:	e099      	b.n	8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800791c:	4b88      	ldr	r3, [pc, #544]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	d02d      	beq.n	8007984 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007928:	4b85      	ldr	r3, [pc, #532]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	08db      	lsrs	r3, r3, #3
 800792e:	f003 0303 	and.w	r3, r3, #3
 8007932:	4a84      	ldr	r2, [pc, #528]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
 8007938:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	ee07 3a90 	vmov	s15, r3
 8007940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007952:	4b7b      	ldr	r3, [pc, #492]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007962:	ed97 6a03 	vldr	s12, [r7, #12]
 8007966:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800796a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007982:	e087      	b.n	8007a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	ee07 3a90 	vmov	s15, r3
 800798a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007996:	4b6a      	ldr	r3, [pc, #424]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079c6:	e065      	b.n	8007a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	ee07 3a90 	vmov	s15, r3
 80079ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079da:	4b59      	ldr	r3, [pc, #356]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a0a:	e043      	b.n	8007a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1e:	4b48      	ldr	r3, [pc, #288]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a4e:	e021      	b.n	8007a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a62:	4b37      	ldr	r3, [pc, #220]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007a94:	4b2a      	ldr	r3, [pc, #168]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a98:	0a5b      	lsrs	r3, r3, #9
 8007a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aba:	ee17 2a90 	vmov	r2, s15
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	0c1b      	lsrs	r3, r3, #16
 8007ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007acc:	ee07 3a90 	vmov	s15, r3
 8007ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae8:	ee17 2a90 	vmov	r2, s15
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007af0:	4b13      	ldr	r3, [pc, #76]	@ (8007b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af4:	0e1b      	lsrs	r3, r3, #24
 8007af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b16:	ee17 2a90 	vmov	r2, s15
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b1e:	e008      	b.n	8007b32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	609a      	str	r2, [r3, #8]
}
 8007b32:	bf00      	nop
 8007b34:	3724      	adds	r7, #36	@ 0x24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	58024400 	.word	0x58024400
 8007b44:	03d09000 	.word	0x03d09000
 8007b48:	46000000 	.word	0x46000000
 8007b4c:	4c742400 	.word	0x4c742400
 8007b50:	4a742400 	.word	0x4a742400
 8007b54:	4bbebc20 	.word	0x4bbebc20

08007b58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b089      	sub	sp, #36	@ 0x24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b60:	4ba1      	ldr	r3, [pc, #644]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b64:	f003 0303 	and.w	r3, r3, #3
 8007b68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007b6a:	4b9f      	ldr	r3, [pc, #636]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6e:	0d1b      	lsrs	r3, r3, #20
 8007b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b76:	4b9c      	ldr	r3, [pc, #624]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7a:	0a1b      	lsrs	r3, r3, #8
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007b82:	4b99      	ldr	r3, [pc, #612]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b86:	08db      	lsrs	r3, r3, #3
 8007b88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	fb02 f303 	mul.w	r3, r2, r3
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 8111 	beq.w	8007dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	f000 8083 	beq.w	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	f200 80a1 	bhi.w	8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d056      	beq.n	8007c70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007bc2:	e099      	b.n	8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bc4:	4b88      	ldr	r3, [pc, #544]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d02d      	beq.n	8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bd0:	4b85      	ldr	r3, [pc, #532]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	08db      	lsrs	r3, r3, #3
 8007bd6:	f003 0303 	and.w	r3, r3, #3
 8007bda:	4a84      	ldr	r2, [pc, #528]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8007be0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	ee07 3a90 	vmov	s15, r3
 8007be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c2a:	e087      	b.n	8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007df4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c6e:	e065      	b.n	8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c82:	4b59      	ldr	r3, [pc, #356]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cb2:	e043      	b.n	8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cbe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc6:	4b48      	ldr	r3, [pc, #288]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cf6:	e021      	b.n	8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d0a:	4b37      	ldr	r3, [pc, #220]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d40:	0a5b      	lsrs	r3, r3, #9
 8007d42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d62:	ee17 2a90 	vmov	r2, s15
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6e:	0c1b      	lsrs	r3, r3, #16
 8007d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d74:	ee07 3a90 	vmov	s15, r3
 8007d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d90:	ee17 2a90 	vmov	r2, s15
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007d98:	4b13      	ldr	r3, [pc, #76]	@ (8007de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9c:	0e1b      	lsrs	r3, r3, #24
 8007d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007daa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dbe:	ee17 2a90 	vmov	r2, s15
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007dc6:	e008      	b.n	8007dda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	609a      	str	r2, [r3, #8]
}
 8007dda:	bf00      	nop
 8007ddc:	3724      	adds	r7, #36	@ 0x24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	58024400 	.word	0x58024400
 8007dec:	03d09000 	.word	0x03d09000
 8007df0:	46000000 	.word	0x46000000
 8007df4:	4c742400 	.word	0x4c742400
 8007df8:	4a742400 	.word	0x4a742400
 8007dfc:	4bbebc20 	.word	0x4bbebc20

08007e00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b089      	sub	sp, #36	@ 0x24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e08:	4ba0      	ldr	r3, [pc, #640]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007e12:	4b9e      	ldr	r3, [pc, #632]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e16:	091b      	lsrs	r3, r3, #4
 8007e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e1c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007e1e:	4b9b      	ldr	r3, [pc, #620]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e28:	4b98      	ldr	r3, [pc, #608]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e2c:	08db      	lsrs	r3, r3, #3
 8007e2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	fb02 f303 	mul.w	r3, r2, r3
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e40:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 8111 	beq.w	800806e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	f000 8083 	beq.w	8007f5a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	f200 80a1 	bhi.w	8007f9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d056      	beq.n	8007f16 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007e68:	e099      	b.n	8007f9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e6a:	4b88      	ldr	r3, [pc, #544]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0320 	and.w	r3, r3, #32
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d02d      	beq.n	8007ed2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e76:	4b85      	ldr	r3, [pc, #532]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	08db      	lsrs	r3, r3, #3
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	4a83      	ldr	r2, [pc, #524]	@ (8008090 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007e82:	fa22 f303 	lsr.w	r3, r2, r3
 8007e86:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea0:	4b7a      	ldr	r3, [pc, #488]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea8:	ee07 3a90 	vmov	s15, r3
 8007eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007eb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ecc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ed0:	e087      	b.n	8007fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	ee07 3a90 	vmov	s15, r3
 8007ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007edc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee4:	4b69      	ldr	r3, [pc, #420]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eec:	ee07 3a90 	vmov	s15, r3
 8007ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f14:	e065      	b.n	8007fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	ee07 3a90 	vmov	s15, r3
 8007f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f20:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800809c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f28:	4b58      	ldr	r3, [pc, #352]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f30:	ee07 3a90 	vmov	s15, r3
 8007f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f38:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f3c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f58:	e043      	b.n	8007fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	ee07 3a90 	vmov	s15, r3
 8007f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f64:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80080a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007f68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6c:	4b47      	ldr	r3, [pc, #284]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f74:	ee07 3a90 	vmov	s15, r3
 8007f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f80:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f9c:	e021      	b.n	8007fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	ee07 3a90 	vmov	s15, r3
 8007fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb0:	4b36      	ldr	r3, [pc, #216]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fe0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe6:	0a5b      	lsrs	r3, r3, #9
 8007fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fec:	ee07 3a90 	vmov	s15, r3
 8007ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ff8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008008:	ee17 2a90 	vmov	r2, s15
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008010:	4b1e      	ldr	r3, [pc, #120]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008014:	0c1b      	lsrs	r3, r3, #16
 8008016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008022:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800802a:	edd7 6a07 	vldr	s13, [r7, #28]
 800802e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008036:	ee17 2a90 	vmov	r2, s15
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800803e:	4b13      	ldr	r3, [pc, #76]	@ (800808c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008042:	0e1b      	lsrs	r3, r3, #24
 8008044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008048:	ee07 3a90 	vmov	s15, r3
 800804c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008054:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008058:	edd7 6a07 	vldr	s13, [r7, #28]
 800805c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008064:	ee17 2a90 	vmov	r2, s15
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800806c:	e008      	b.n	8008080 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	609a      	str	r2, [r3, #8]
}
 8008080:	bf00      	nop
 8008082:	3724      	adds	r7, #36	@ 0x24
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	58024400 	.word	0x58024400
 8008090:	03d09000 	.word	0x03d09000
 8008094:	46000000 	.word	0x46000000
 8008098:	4c742400 	.word	0x4c742400
 800809c:	4a742400 	.word	0x4a742400
 80080a0:	4bbebc20 	.word	0x4bbebc20

080080a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080b2:	4b53      	ldr	r3, [pc, #332]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d101      	bne.n	80080c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e099      	b.n	80081f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80080c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80080c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ce:	f7f8 f9d9 	bl	8000484 <HAL_GetTick>
 80080d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080d4:	e008      	b.n	80080e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080d6:	f7f8 f9d5 	bl	8000484 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d901      	bls.n	80080e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e086      	b.n	80081f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080e8:	4b45      	ldr	r3, [pc, #276]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1f0      	bne.n	80080d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080f4:	4b42      	ldr	r3, [pc, #264]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80080f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	031b      	lsls	r3, r3, #12
 8008102:	493f      	ldr	r1, [pc, #252]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 8008104:	4313      	orrs	r3, r2
 8008106:	628b      	str	r3, [r1, #40]	@ 0x28
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	3b01      	subs	r3, #1
 800810e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	3b01      	subs	r3, #1
 8008118:	025b      	lsls	r3, r3, #9
 800811a:	b29b      	uxth	r3, r3
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	3b01      	subs	r3, #1
 8008124:	041b      	lsls	r3, r3, #16
 8008126:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800812a:	431a      	orrs	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	3b01      	subs	r3, #1
 8008132:	061b      	lsls	r3, r3, #24
 8008134:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008138:	4931      	ldr	r1, [pc, #196]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 800813a:	4313      	orrs	r3, r2
 800813c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800813e:	4b30      	ldr	r3, [pc, #192]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	492d      	ldr	r1, [pc, #180]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 800814c:	4313      	orrs	r3, r2
 800814e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008150:	4b2b      	ldr	r3, [pc, #172]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	f023 0220 	bic.w	r2, r3, #32
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	4928      	ldr	r1, [pc, #160]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 800815e:	4313      	orrs	r3, r2
 8008160:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008162:	4b27      	ldr	r3, [pc, #156]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 8008164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008166:	4a26      	ldr	r2, [pc, #152]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 8008168:	f023 0310 	bic.w	r3, r3, #16
 800816c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800816e:	4b24      	ldr	r3, [pc, #144]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 8008170:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008172:	4b24      	ldr	r3, [pc, #144]	@ (8008204 <RCCEx_PLL2_Config+0x160>)
 8008174:	4013      	ands	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	69d2      	ldr	r2, [r2, #28]
 800817a:	00d2      	lsls	r2, r2, #3
 800817c:	4920      	ldr	r1, [pc, #128]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 800817e:	4313      	orrs	r3, r2
 8008180:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008182:	4b1f      	ldr	r3, [pc, #124]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 8008184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008186:	4a1e      	ldr	r2, [pc, #120]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 8008188:	f043 0310 	orr.w	r3, r3, #16
 800818c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d106      	bne.n	80081a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008194:	4b1a      	ldr	r3, [pc, #104]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 8008196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008198:	4a19      	ldr	r2, [pc, #100]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 800819a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800819e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081a0:	e00f      	b.n	80081c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d106      	bne.n	80081b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80081a8:	4b15      	ldr	r3, [pc, #84]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80081aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ac:	4a14      	ldr	r2, [pc, #80]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80081ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081b4:	e005      	b.n	80081c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80081b6:	4b12      	ldr	r3, [pc, #72]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ba:	4a11      	ldr	r2, [pc, #68]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80081bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80081c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a0e      	ldr	r2, [pc, #56]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80081c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ce:	f7f8 f959 	bl	8000484 <HAL_GetTick>
 80081d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081d4:	e008      	b.n	80081e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081d6:	f7f8 f955 	bl	8000484 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d901      	bls.n	80081e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e006      	b.n	80081f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081e8:	4b05      	ldr	r3, [pc, #20]	@ (8008200 <RCCEx_PLL2_Config+0x15c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0f0      	beq.n	80081d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	58024400 	.word	0x58024400
 8008204:	ffff0007 	.word	0xffff0007

08008208 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008216:	4b53      	ldr	r3, [pc, #332]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 8008218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b03      	cmp	r3, #3
 8008220:	d101      	bne.n	8008226 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e099      	b.n	800835a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008226:	4b4f      	ldr	r3, [pc, #316]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a4e      	ldr	r2, [pc, #312]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 800822c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008232:	f7f8 f927 	bl	8000484 <HAL_GetTick>
 8008236:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008238:	e008      	b.n	800824c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800823a:	f7f8 f923 	bl	8000484 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d901      	bls.n	800824c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e086      	b.n	800835a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800824c:	4b45      	ldr	r3, [pc, #276]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f0      	bne.n	800823a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008258:	4b42      	ldr	r3, [pc, #264]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 800825a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	051b      	lsls	r3, r3, #20
 8008266:	493f      	ldr	r1, [pc, #252]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 8008268:	4313      	orrs	r3, r2
 800826a:	628b      	str	r3, [r1, #40]	@ 0x28
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	3b01      	subs	r3, #1
 8008272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	3b01      	subs	r3, #1
 800827c:	025b      	lsls	r3, r3, #9
 800827e:	b29b      	uxth	r3, r3
 8008280:	431a      	orrs	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	3b01      	subs	r3, #1
 8008288:	041b      	lsls	r3, r3, #16
 800828a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800828e:	431a      	orrs	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	3b01      	subs	r3, #1
 8008296:	061b      	lsls	r3, r3, #24
 8008298:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800829c:	4931      	ldr	r1, [pc, #196]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082a2:	4b30      	ldr	r3, [pc, #192]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	492d      	ldr	r1, [pc, #180]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80082b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	4928      	ldr	r1, [pc, #160]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082c6:	4b27      	ldr	r3, [pc, #156]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ca:	4a26      	ldr	r2, [pc, #152]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082d2:	4b24      	ldr	r3, [pc, #144]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082d6:	4b24      	ldr	r3, [pc, #144]	@ (8008368 <RCCEx_PLL3_Config+0x160>)
 80082d8:	4013      	ands	r3, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	69d2      	ldr	r2, [r2, #28]
 80082de:	00d2      	lsls	r2, r2, #3
 80082e0:	4920      	ldr	r1, [pc, #128]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fc:	4a19      	ldr	r2, [pc, #100]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 80082fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008302:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008304:	e00f      	b.n	8008326 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d106      	bne.n	800831a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800830c:	4b15      	ldr	r3, [pc, #84]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 800830e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008310:	4a14      	ldr	r2, [pc, #80]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 8008312:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008316:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008318:	e005      	b.n	8008326 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800831a:	4b12      	ldr	r3, [pc, #72]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 800831c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831e:	4a11      	ldr	r2, [pc, #68]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 8008320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008324:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008326:	4b0f      	ldr	r3, [pc, #60]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a0e      	ldr	r2, [pc, #56]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 800832c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008332:	f7f8 f8a7 	bl	8000484 <HAL_GetTick>
 8008336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008338:	e008      	b.n	800834c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800833a:	f7f8 f8a3 	bl	8000484 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b02      	cmp	r3, #2
 8008346:	d901      	bls.n	800834c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e006      	b.n	800835a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800834c:	4b05      	ldr	r3, [pc, #20]	@ (8008364 <RCCEx_PLL3_Config+0x15c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0f0      	beq.n	800833a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	58024400 	.word	0x58024400
 8008368:	ffff0007 	.word	0xffff0007

0800836c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e10f      	b.n	800859e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a87      	ldr	r2, [pc, #540]	@ (80085a8 <HAL_SPI_Init+0x23c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d00f      	beq.n	80083ae <HAL_SPI_Init+0x42>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a86      	ldr	r2, [pc, #536]	@ (80085ac <HAL_SPI_Init+0x240>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00a      	beq.n	80083ae <HAL_SPI_Init+0x42>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a84      	ldr	r2, [pc, #528]	@ (80085b0 <HAL_SPI_Init+0x244>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d005      	beq.n	80083ae <HAL_SPI_Init+0x42>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	2b0f      	cmp	r3, #15
 80083a8:	d901      	bls.n	80083ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e0f7      	b.n	800859e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fe2e 	bl	8009010 <SPI_GetPacketSize>
 80083b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a7b      	ldr	r2, [pc, #492]	@ (80085a8 <HAL_SPI_Init+0x23c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00c      	beq.n	80083da <HAL_SPI_Init+0x6e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a79      	ldr	r2, [pc, #484]	@ (80085ac <HAL_SPI_Init+0x240>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d007      	beq.n	80083da <HAL_SPI_Init+0x6e>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a78      	ldr	r2, [pc, #480]	@ (80085b0 <HAL_SPI_Init+0x244>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d002      	beq.n	80083da <HAL_SPI_Init+0x6e>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b08      	cmp	r3, #8
 80083d8:	d811      	bhi.n	80083fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083de:	4a72      	ldr	r2, [pc, #456]	@ (80085a8 <HAL_SPI_Init+0x23c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d009      	beq.n	80083f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a70      	ldr	r2, [pc, #448]	@ (80085ac <HAL_SPI_Init+0x240>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d004      	beq.n	80083f8 <HAL_SPI_Init+0x8c>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a6f      	ldr	r2, [pc, #444]	@ (80085b0 <HAL_SPI_Init+0x244>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d104      	bne.n	8008402 <HAL_SPI_Init+0x96>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b10      	cmp	r3, #16
 80083fc:	d901      	bls.n	8008402 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e0cd      	b.n	800859e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d106      	bne.n	800841c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f007 ffa2 	bl	8010360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0201 	bic.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800843e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008448:	d119      	bne.n	800847e <HAL_SPI_Init+0x112>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008452:	d103      	bne.n	800845c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008458:	2b00      	cmp	r3, #0
 800845a:	d008      	beq.n	800846e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10c      	bne.n	800847e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008468:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800846c:	d107      	bne.n	800847e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800847c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00f      	beq.n	80084aa <HAL_SPI_Init+0x13e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2b06      	cmp	r3, #6
 8008490:	d90b      	bls.n	80084aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	e007      	b.n	80084ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69da      	ldr	r2, [r3, #28]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c2:	431a      	orrs	r2, r3
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084cc:	ea42 0103 	orr.w	r1, r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	431a      	orrs	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	431a      	orrs	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800851a:	ea42 0103 	orr.w	r1, r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d113      	bne.n	800855a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008544:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008558:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0201 	bic.w	r2, r2, #1
 8008568:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	40013000 	.word	0x40013000
 80085ac:	40003800 	.word	0x40003800
 80085b0:	40003c00 	.word	0x40003c00

080085b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	603b      	str	r3, [r7, #0]
 80085c0:	4613      	mov	r3, r2
 80085c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3320      	adds	r3, #32
 80085ca:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085cc:	f7f7 ff5a 	bl	8000484 <HAL_GetTick>
 80085d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d001      	beq.n	80085e2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80085de:	2302      	movs	r3, #2
 80085e0:	e1d1      	b.n	8008986 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <HAL_SPI_Transmit+0x3a>
 80085e8:	88fb      	ldrh	r3, [r7, #6]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e1c9      	b.n	8008986 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <HAL_SPI_Transmit+0x4c>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e1c2      	b.n	8008986 <HAL_SPI_Transmit+0x3d2>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2203      	movs	r2, #3
 800860c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	88fa      	ldrh	r2, [r7, #6]
 8008622:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	88fa      	ldrh	r2, [r7, #6]
 800862a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008658:	d108      	bne.n	800866c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	e009      	b.n	8008680 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800867e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	4b96      	ldr	r3, [pc, #600]	@ (80088e0 <HAL_SPI_Transmit+0x32c>)
 8008688:	4013      	ands	r3, r2
 800868a:	88f9      	ldrh	r1, [r7, #6]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	6812      	ldr	r2, [r2, #0]
 8008690:	430b      	orrs	r3, r1
 8008692:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0201 	orr.w	r2, r2, #1
 80086a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086ac:	d107      	bne.n	80086be <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b0f      	cmp	r3, #15
 80086c4:	d947      	bls.n	8008756 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086c6:	e03f      	b.n	8008748 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d114      	bne.n	8008700 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6812      	ldr	r2, [r2, #0]
 80086e0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086e6:	1d1a      	adds	r2, r3, #4
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80086fe:	e023      	b.n	8008748 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008700:	f7f7 fec0 	bl	8000484 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	429a      	cmp	r2, r3
 800870e:	d803      	bhi.n	8008718 <HAL_SPI_Transmit+0x164>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d102      	bne.n	800871e <HAL_SPI_Transmit+0x16a>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d114      	bne.n	8008748 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 fba8 	bl	8008e74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800872a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	e11e      	b.n	8008986 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1b9      	bne.n	80086c8 <HAL_SPI_Transmit+0x114>
 8008754:	e0f1      	b.n	800893a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	2b07      	cmp	r3, #7
 800875c:	f240 80e6 	bls.w	800892c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008760:	e05d      	b.n	800881e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b02      	cmp	r3, #2
 800876e:	d132      	bne.n	80087d6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008776:	b29b      	uxth	r3, r3
 8008778:	2b01      	cmp	r3, #1
 800877a:	d918      	bls.n	80087ae <HAL_SPI_Transmit+0x1fa>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d014      	beq.n	80087ae <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6812      	ldr	r2, [r2, #0]
 800878e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008794:	1d1a      	adds	r2, r3, #4
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b02      	subs	r3, #2
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087ac:	e037      	b.n	800881e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087b2:	881a      	ldrh	r2, [r3, #0]
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087bc:	1c9a      	adds	r2, r3, #2
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	3b01      	subs	r3, #1
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087d4:	e023      	b.n	800881e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087d6:	f7f7 fe55 	bl	8000484 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d803      	bhi.n	80087ee <HAL_SPI_Transmit+0x23a>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d102      	bne.n	80087f4 <HAL_SPI_Transmit+0x240>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d114      	bne.n	800881e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fb3d 	bl	8008e74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008800:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e0b3      	b.n	8008986 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008824:	b29b      	uxth	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d19b      	bne.n	8008762 <HAL_SPI_Transmit+0x1ae>
 800882a:	e086      	b.n	800893a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b02      	cmp	r3, #2
 8008838:	d154      	bne.n	80088e4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008840:	b29b      	uxth	r3, r3
 8008842:	2b03      	cmp	r3, #3
 8008844:	d918      	bls.n	8008878 <HAL_SPI_Transmit+0x2c4>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884a:	2b40      	cmp	r3, #64	@ 0x40
 800884c:	d914      	bls.n	8008878 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6812      	ldr	r2, [r2, #0]
 8008858:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800885e:	1d1a      	adds	r2, r3, #4
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b04      	subs	r3, #4
 800886e:	b29a      	uxth	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008876:	e059      	b.n	800892c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800887e:	b29b      	uxth	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	d917      	bls.n	80088b4 <HAL_SPI_Transmit+0x300>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d013      	beq.n	80088b4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008890:	881a      	ldrh	r2, [r3, #0]
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800889a:	1c9a      	adds	r2, r3, #2
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b02      	subs	r3, #2
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088b2:	e03b      	b.n	800892c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3320      	adds	r3, #32
 80088be:	7812      	ldrb	r2, [r2, #0]
 80088c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088de:	e025      	b.n	800892c <HAL_SPI_Transmit+0x378>
 80088e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088e4:	f7f7 fdce 	bl	8000484 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d803      	bhi.n	80088fc <HAL_SPI_Transmit+0x348>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d102      	bne.n	8008902 <HAL_SPI_Transmit+0x34e>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d114      	bne.n	800892c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 fab6 	bl	8008e74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800890e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e02c      	b.n	8008986 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008932:	b29b      	uxth	r3, r3
 8008934:	2b00      	cmp	r3, #0
 8008936:	f47f af79 	bne.w	800882c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2200      	movs	r2, #0
 8008942:	2108      	movs	r1, #8
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 fb35 	bl	8008fb4 <SPI_WaitOnFlagUntilTimeout>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d007      	beq.n	8008960 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008956:	f043 0220 	orr.w	r2, r3, #32
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 fa87 	bl	8008e74 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008984:	2300      	movs	r3, #0
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop

08008990 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	4613      	mov	r3, r2
 800899e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a4:	095b      	lsrs	r3, r3, #5
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	3301      	adds	r3, #1
 80089aa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3330      	adds	r3, #48	@ 0x30
 80089b2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089b4:	f7f7 fd66 	bl	8000484 <HAL_GetTick>
 80089b8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d001      	beq.n	80089ca <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80089c6:	2302      	movs	r3, #2
 80089c8:	e250      	b.n	8008e6c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <HAL_SPI_Receive+0x46>
 80089d0:	88fb      	ldrh	r3, [r7, #6]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e248      	b.n	8008e6c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_SPI_Receive+0x58>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e241      	b.n	8008e6c <HAL_SPI_Receive+0x4dc>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2204      	movs	r2, #4
 80089f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	88fa      	ldrh	r2, [r7, #6]
 8008a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	88fa      	ldrh	r2, [r7, #6]
 8008a12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008a40:	d108      	bne.n	8008a54 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	e009      	b.n	8008a68 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008a66:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	4b95      	ldr	r3, [pc, #596]	@ (8008cc4 <HAL_SPI_Receive+0x334>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	88f9      	ldrh	r1, [r7, #6]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	6812      	ldr	r2, [r2, #0]
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f042 0201 	orr.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a94:	d107      	bne.n	8008aa6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aa4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	2b0f      	cmp	r3, #15
 8008aac:	d96c      	bls.n	8008b88 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008aae:	e064      	b.n	8008b7a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d114      	bne.n	8008af0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ace:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008ad0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ad6:	1d1a      	adds	r2, r3, #4
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008aee:	e044      	b.n	8008b7a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	8bfa      	ldrh	r2, [r7, #30]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d919      	bls.n	8008b32 <HAL_SPI_Receive+0x1a2>
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d014      	beq.n	8008b32 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b12:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b18:	1d1a      	adds	r2, r3, #4
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	3b01      	subs	r3, #1
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b30:	e023      	b.n	8008b7a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b32:	f7f7 fca7 	bl	8000484 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d803      	bhi.n	8008b4a <HAL_SPI_Receive+0x1ba>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b48:	d102      	bne.n	8008b50 <HAL_SPI_Receive+0x1c0>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d114      	bne.n	8008b7a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 f98f 	bl	8008e74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e178      	b.n	8008e6c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d194      	bne.n	8008ab0 <HAL_SPI_Receive+0x120>
 8008b86:	e15e      	b.n	8008e46 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	2b07      	cmp	r3, #7
 8008b8e:	f240 8153 	bls.w	8008e38 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008b92:	e08f      	b.n	8008cb4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d114      	bne.n	8008bd4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	8812      	ldrh	r2, [r2, #0]
 8008bb2:	b292      	uxth	r2, r2
 8008bb4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bba:	1c9a      	adds	r2, r3, #2
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008bd2:	e06f      	b.n	8008cb4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	8bfa      	ldrh	r2, [r7, #30]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d924      	bls.n	8008c2c <HAL_SPI_Receive+0x29c>
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d01f      	beq.n	8008c2c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	8812      	ldrh	r2, [r2, #0]
 8008bf4:	b292      	uxth	r2, r2
 8008bf6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bfc:	1c9a      	adds	r2, r3, #2
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	8812      	ldrh	r2, [r2, #0]
 8008c0a:	b292      	uxth	r2, r2
 8008c0c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c12:	1c9a      	adds	r2, r3, #2
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	3b02      	subs	r3, #2
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c2a:	e043      	b.n	8008cb4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d119      	bne.n	8008c6c <HAL_SPI_Receive+0x2dc>
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d014      	beq.n	8008c6c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	8812      	ldrh	r2, [r2, #0]
 8008c4a:	b292      	uxth	r2, r2
 8008c4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c52:	1c9a      	adds	r2, r3, #2
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c6a:	e023      	b.n	8008cb4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c6c:	f7f7 fc0a 	bl	8000484 <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d803      	bhi.n	8008c84 <HAL_SPI_Receive+0x2f4>
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c82:	d102      	bne.n	8008c8a <HAL_SPI_Receive+0x2fa>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d114      	bne.n	8008cb4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 f8f2 	bl	8008e74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e0db      	b.n	8008e6c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f47f af69 	bne.w	8008b94 <HAL_SPI_Receive+0x204>
 8008cc2:	e0c0      	b.n	8008e46 <HAL_SPI_Receive+0x4b6>
 8008cc4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d117      	bne.n	8008d0e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cea:	7812      	ldrb	r2, [r2, #0]
 8008cec:	b2d2      	uxtb	r2, r2
 8008cee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d0c:	e094      	b.n	8008e38 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	8bfa      	ldrh	r2, [r7, #30]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d946      	bls.n	8008daa <HAL_SPI_Receive+0x41a>
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d041      	beq.n	8008daa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d32:	7812      	ldrb	r2, [r2, #0]
 8008d34:	b2d2      	uxtb	r2, r2
 8008d36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d4e:	7812      	ldrb	r2, [r2, #0]
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d6a:	7812      	ldrb	r2, [r2, #0]
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d86:	7812      	ldrb	r2, [r2, #0]
 8008d88:	b2d2      	uxtb	r2, r2
 8008d8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	3b04      	subs	r3, #4
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008da8:	e046      	b.n	8008e38 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d81c      	bhi.n	8008df0 <HAL_SPI_Receive+0x460>
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d017      	beq.n	8008df0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dcc:	7812      	ldrb	r2, [r2, #0]
 8008dce:	b2d2      	uxtb	r2, r2
 8008dd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	3b01      	subs	r3, #1
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008dee:	e023      	b.n	8008e38 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008df0:	f7f7 fb48 	bl	8000484 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d803      	bhi.n	8008e08 <HAL_SPI_Receive+0x478>
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e06:	d102      	bne.n	8008e0e <HAL_SPI_Receive+0x47e>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d114      	bne.n	8008e38 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 f830 	bl	8008e74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e019      	b.n	8008e6c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f47f af41 	bne.w	8008cc8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 f814 	bl	8008e74 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e000      	b.n	8008e6c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
  }
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3720      	adds	r7, #32
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	699a      	ldr	r2, [r3, #24]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f042 0208 	orr.w	r2, r2, #8
 8008e92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	699a      	ldr	r2, [r3, #24]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f042 0210 	orr.w	r2, r2, #16
 8008ea2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 0201 	bic.w	r2, r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6919      	ldr	r1, [r3, #16]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8008fb0 <SPI_CloseTransfer+0x13c>)
 8008ec0:	400b      	ands	r3, r1
 8008ec2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008ed2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	d014      	beq.n	8008f0a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00f      	beq.n	8008f0a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ef0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	699a      	ldr	r2, [r3, #24]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f042 0220 	orr.w	r2, r2, #32
 8008f08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d014      	beq.n	8008f40 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00f      	beq.n	8008f40 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f26:	f043 0204 	orr.w	r2, r3, #4
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	699a      	ldr	r2, [r3, #24]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00f      	beq.n	8008f6a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f50:	f043 0201 	orr.w	r2, r3, #1
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	699a      	ldr	r2, [r3, #24]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00f      	beq.n	8008f94 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f7a:	f043 0208 	orr.w	r2, r3, #8
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699a      	ldr	r2, [r3, #24]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008fa4:	bf00      	nop
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	fffffc90 	.word	0xfffffc90

08008fb4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	603b      	str	r3, [r7, #0]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fc4:	e010      	b.n	8008fe8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fc6:	f7f7 fa5d 	bl	8000484 <HAL_GetTick>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d803      	bhi.n	8008fde <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fdc:	d102      	bne.n	8008fe4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e00f      	b.n	8009008 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	695a      	ldr	r2, [r3, #20]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	bf0c      	ite	eq
 8008ff8:	2301      	moveq	r3, #1
 8008ffa:	2300      	movne	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	461a      	mov	r2, r3
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	429a      	cmp	r2, r3
 8009004:	d0df      	beq.n	8008fc6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800901c:	095b      	lsrs	r3, r3, #5
 800901e:	3301      	adds	r3, #1
 8009020:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	3301      	adds	r3, #1
 8009028:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	3307      	adds	r3, #7
 800902e:	08db      	lsrs	r3, r3, #3
 8009030:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	fb02 f303 	mul.w	r3, r2, r3
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e049      	b.n	80090ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f007 fce5 	bl	8010a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2202      	movs	r2, #2
 8009076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3304      	adds	r3, #4
 8009082:	4619      	mov	r1, r3
 8009084:	4610      	mov	r0, r2
 8009086:	f000 fd59 	bl	8009b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b01      	cmp	r3, #1
 8009106:	d001      	beq.n	800910c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e054      	b.n	80091b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0201 	orr.w	r2, r2, #1
 8009122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a26      	ldr	r2, [pc, #152]	@ (80091c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d022      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009136:	d01d      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a22      	ldr	r2, [pc, #136]	@ (80091c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d018      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a21      	ldr	r2, [pc, #132]	@ (80091cc <HAL_TIM_Base_Start_IT+0xd8>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d013      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a1f      	ldr	r2, [pc, #124]	@ (80091d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d00e      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a1e      	ldr	r2, [pc, #120]	@ (80091d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d009      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a1c      	ldr	r2, [pc, #112]	@ (80091d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d004      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a1b      	ldr	r2, [pc, #108]	@ (80091dc <HAL_TIM_Base_Start_IT+0xe8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d115      	bne.n	80091a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	689a      	ldr	r2, [r3, #8]
 800917a:	4b19      	ldr	r3, [pc, #100]	@ (80091e0 <HAL_TIM_Base_Start_IT+0xec>)
 800917c:	4013      	ands	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b06      	cmp	r3, #6
 8009184:	d015      	beq.n	80091b2 <HAL_TIM_Base_Start_IT+0xbe>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800918c:	d011      	beq.n	80091b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f042 0201 	orr.w	r2, r2, #1
 800919c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800919e:	e008      	b.n	80091b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0201 	orr.w	r2, r2, #1
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	e000      	b.n	80091b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	40010000 	.word	0x40010000
 80091c8:	40000400 	.word	0x40000400
 80091cc:	40000800 	.word	0x40000800
 80091d0:	40000c00 	.word	0x40000c00
 80091d4:	40010400 	.word	0x40010400
 80091d8:	40001800 	.word	0x40001800
 80091dc:	40014000 	.word	0x40014000
 80091e0:	00010007 	.word	0x00010007

080091e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e049      	b.n	800928a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f841 	bl	8009292 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f000 fc8a 	bl	8009b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800929a:	bf00      	nop
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
	...

080092a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d109      	bne.n	80092cc <HAL_TIM_PWM_Start+0x24>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	bf14      	ite	ne
 80092c4:	2301      	movne	r3, #1
 80092c6:	2300      	moveq	r3, #0
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	e03c      	b.n	8009346 <HAL_TIM_PWM_Start+0x9e>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	d109      	bne.n	80092e6 <HAL_TIM_PWM_Start+0x3e>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b01      	cmp	r3, #1
 80092dc:	bf14      	ite	ne
 80092de:	2301      	movne	r3, #1
 80092e0:	2300      	moveq	r3, #0
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	e02f      	b.n	8009346 <HAL_TIM_PWM_Start+0x9e>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b08      	cmp	r3, #8
 80092ea:	d109      	bne.n	8009300 <HAL_TIM_PWM_Start+0x58>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	bf14      	ite	ne
 80092f8:	2301      	movne	r3, #1
 80092fa:	2300      	moveq	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	e022      	b.n	8009346 <HAL_TIM_PWM_Start+0x9e>
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2b0c      	cmp	r3, #12
 8009304:	d109      	bne.n	800931a <HAL_TIM_PWM_Start+0x72>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b01      	cmp	r3, #1
 8009310:	bf14      	ite	ne
 8009312:	2301      	movne	r3, #1
 8009314:	2300      	moveq	r3, #0
 8009316:	b2db      	uxtb	r3, r3
 8009318:	e015      	b.n	8009346 <HAL_TIM_PWM_Start+0x9e>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b10      	cmp	r3, #16
 800931e:	d109      	bne.n	8009334 <HAL_TIM_PWM_Start+0x8c>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b01      	cmp	r3, #1
 800932a:	bf14      	ite	ne
 800932c:	2301      	movne	r3, #1
 800932e:	2300      	moveq	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	e008      	b.n	8009346 <HAL_TIM_PWM_Start+0x9e>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b01      	cmp	r3, #1
 800933e:	bf14      	ite	ne
 8009340:	2301      	movne	r3, #1
 8009342:	2300      	moveq	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e0a1      	b.n	8009492 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d104      	bne.n	800935e <HAL_TIM_PWM_Start+0xb6>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2202      	movs	r2, #2
 8009358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800935c:	e023      	b.n	80093a6 <HAL_TIM_PWM_Start+0xfe>
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b04      	cmp	r3, #4
 8009362:	d104      	bne.n	800936e <HAL_TIM_PWM_Start+0xc6>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800936c:	e01b      	b.n	80093a6 <HAL_TIM_PWM_Start+0xfe>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b08      	cmp	r3, #8
 8009372:	d104      	bne.n	800937e <HAL_TIM_PWM_Start+0xd6>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800937c:	e013      	b.n	80093a6 <HAL_TIM_PWM_Start+0xfe>
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	2b0c      	cmp	r3, #12
 8009382:	d104      	bne.n	800938e <HAL_TIM_PWM_Start+0xe6>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2202      	movs	r2, #2
 8009388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800938c:	e00b      	b.n	80093a6 <HAL_TIM_PWM_Start+0xfe>
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2b10      	cmp	r3, #16
 8009392:	d104      	bne.n	800939e <HAL_TIM_PWM_Start+0xf6>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2202      	movs	r2, #2
 8009398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800939c:	e003      	b.n	80093a6 <HAL_TIM_PWM_Start+0xfe>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2202      	movs	r2, #2
 80093a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2201      	movs	r2, #1
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 ffde 	bl	800a370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a38      	ldr	r2, [pc, #224]	@ (800949c <HAL_TIM_PWM_Start+0x1f4>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d013      	beq.n	80093e6 <HAL_TIM_PWM_Start+0x13e>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a37      	ldr	r2, [pc, #220]	@ (80094a0 <HAL_TIM_PWM_Start+0x1f8>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00e      	beq.n	80093e6 <HAL_TIM_PWM_Start+0x13e>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a35      	ldr	r2, [pc, #212]	@ (80094a4 <HAL_TIM_PWM_Start+0x1fc>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d009      	beq.n	80093e6 <HAL_TIM_PWM_Start+0x13e>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a34      	ldr	r2, [pc, #208]	@ (80094a8 <HAL_TIM_PWM_Start+0x200>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d004      	beq.n	80093e6 <HAL_TIM_PWM_Start+0x13e>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a32      	ldr	r2, [pc, #200]	@ (80094ac <HAL_TIM_PWM_Start+0x204>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d101      	bne.n	80093ea <HAL_TIM_PWM_Start+0x142>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <HAL_TIM_PWM_Start+0x144>
 80093ea:	2300      	movs	r3, #0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a25      	ldr	r2, [pc, #148]	@ (800949c <HAL_TIM_PWM_Start+0x1f4>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d022      	beq.n	8009450 <HAL_TIM_PWM_Start+0x1a8>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009412:	d01d      	beq.n	8009450 <HAL_TIM_PWM_Start+0x1a8>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a25      	ldr	r2, [pc, #148]	@ (80094b0 <HAL_TIM_PWM_Start+0x208>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d018      	beq.n	8009450 <HAL_TIM_PWM_Start+0x1a8>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a24      	ldr	r2, [pc, #144]	@ (80094b4 <HAL_TIM_PWM_Start+0x20c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d013      	beq.n	8009450 <HAL_TIM_PWM_Start+0x1a8>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a22      	ldr	r2, [pc, #136]	@ (80094b8 <HAL_TIM_PWM_Start+0x210>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d00e      	beq.n	8009450 <HAL_TIM_PWM_Start+0x1a8>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a1a      	ldr	r2, [pc, #104]	@ (80094a0 <HAL_TIM_PWM_Start+0x1f8>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d009      	beq.n	8009450 <HAL_TIM_PWM_Start+0x1a8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a1e      	ldr	r2, [pc, #120]	@ (80094bc <HAL_TIM_PWM_Start+0x214>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d004      	beq.n	8009450 <HAL_TIM_PWM_Start+0x1a8>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a16      	ldr	r2, [pc, #88]	@ (80094a4 <HAL_TIM_PWM_Start+0x1fc>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d115      	bne.n	800947c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	4b1a      	ldr	r3, [pc, #104]	@ (80094c0 <HAL_TIM_PWM_Start+0x218>)
 8009458:	4013      	ands	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b06      	cmp	r3, #6
 8009460:	d015      	beq.n	800948e <HAL_TIM_PWM_Start+0x1e6>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009468:	d011      	beq.n	800948e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0201 	orr.w	r2, r2, #1
 8009478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800947a:	e008      	b.n	800948e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f042 0201 	orr.w	r2, r2, #1
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	e000      	b.n	8009490 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800948e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	40010000 	.word	0x40010000
 80094a0:	40010400 	.word	0x40010400
 80094a4:	40014000 	.word	0x40014000
 80094a8:	40014400 	.word	0x40014400
 80094ac:	40014800 	.word	0x40014800
 80094b0:	40000400 	.word	0x40000400
 80094b4:	40000800 	.word	0x40000800
 80094b8:	40000c00 	.word	0x40000c00
 80094bc:	40001800 	.word	0x40001800
 80094c0:	00010007 	.word	0x00010007

080094c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d020      	beq.n	8009528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01b      	beq.n	8009528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f06f 0202 	mvn.w	r2, #2
 80094f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 faf6 	bl	8009b00 <HAL_TIM_IC_CaptureCallback>
 8009514:	e005      	b.n	8009522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fae8 	bl	8009aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 faf9 	bl	8009b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f003 0304 	and.w	r3, r3, #4
 800952e:	2b00      	cmp	r3, #0
 8009530:	d020      	beq.n	8009574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01b      	beq.n	8009574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f06f 0204 	mvn.w	r2, #4
 8009544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2202      	movs	r2, #2
 800954a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fad0 	bl	8009b00 <HAL_TIM_IC_CaptureCallback>
 8009560:	e005      	b.n	800956e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fac2 	bl	8009aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fad3 	bl	8009b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f003 0308 	and.w	r3, r3, #8
 800957a:	2b00      	cmp	r3, #0
 800957c:	d020      	beq.n	80095c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01b      	beq.n	80095c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f06f 0208 	mvn.w	r2, #8
 8009590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2204      	movs	r2, #4
 8009596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 faaa 	bl	8009b00 <HAL_TIM_IC_CaptureCallback>
 80095ac:	e005      	b.n	80095ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fa9c 	bl	8009aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 faad 	bl	8009b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f003 0310 	and.w	r3, r3, #16
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d020      	beq.n	800960c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f003 0310 	and.w	r3, r3, #16
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01b      	beq.n	800960c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f06f 0210 	mvn.w	r2, #16
 80095dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2208      	movs	r2, #8
 80095e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa84 	bl	8009b00 <HAL_TIM_IC_CaptureCallback>
 80095f8:	e005      	b.n	8009606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fa76 	bl	8009aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fa87 	bl	8009b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00c      	beq.n	8009630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d007      	beq.n	8009630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f06f 0201 	mvn.w	r2, #1
 8009628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f006 fd5c 	bl	80100e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009636:	2b00      	cmp	r3, #0
 8009638:	d104      	bne.n	8009644 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00c      	beq.n	800965e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800964a:	2b00      	cmp	r3, #0
 800964c:	d007      	beq.n	800965e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f001 f887 	bl	800a76c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00c      	beq.n	8009682 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800966e:	2b00      	cmp	r3, #0
 8009670:	d007      	beq.n	8009682 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800967a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 f87f 	bl	800a780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00c      	beq.n	80096a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009692:	2b00      	cmp	r3, #0
 8009694:	d007      	beq.n	80096a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800969e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fa41 	bl	8009b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f003 0320 	and.w	r3, r3, #32
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00c      	beq.n	80096ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f003 0320 	and.w	r3, r3, #32
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d007      	beq.n	80096ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f06f 0220 	mvn.w	r2, #32
 80096c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 f847 	bl	800a758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e0ff      	b.n	80098f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b14      	cmp	r3, #20
 80096fe:	f200 80f0 	bhi.w	80098e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009702:	a201      	add	r2, pc, #4	@ (adr r2, 8009708 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009708:	0800975d 	.word	0x0800975d
 800970c:	080098e3 	.word	0x080098e3
 8009710:	080098e3 	.word	0x080098e3
 8009714:	080098e3 	.word	0x080098e3
 8009718:	0800979d 	.word	0x0800979d
 800971c:	080098e3 	.word	0x080098e3
 8009720:	080098e3 	.word	0x080098e3
 8009724:	080098e3 	.word	0x080098e3
 8009728:	080097df 	.word	0x080097df
 800972c:	080098e3 	.word	0x080098e3
 8009730:	080098e3 	.word	0x080098e3
 8009734:	080098e3 	.word	0x080098e3
 8009738:	0800981f 	.word	0x0800981f
 800973c:	080098e3 	.word	0x080098e3
 8009740:	080098e3 	.word	0x080098e3
 8009744:	080098e3 	.word	0x080098e3
 8009748:	08009861 	.word	0x08009861
 800974c:	080098e3 	.word	0x080098e3
 8009750:	080098e3 	.word	0x080098e3
 8009754:	080098e3 	.word	0x080098e3
 8009758:	080098a1 	.word	0x080098a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68b9      	ldr	r1, [r7, #8]
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fa90 	bl	8009c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699a      	ldr	r2, [r3, #24]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f042 0208 	orr.w	r2, r2, #8
 8009776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	699a      	ldr	r2, [r3, #24]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f022 0204 	bic.w	r2, r2, #4
 8009786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6999      	ldr	r1, [r3, #24]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	691a      	ldr	r2, [r3, #16]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	619a      	str	r2, [r3, #24]
      break;
 800979a:	e0a5      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fb00 	bl	8009da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6999      	ldr	r1, [r3, #24]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	021a      	lsls	r2, r3, #8
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	619a      	str	r2, [r3, #24]
      break;
 80097dc:	e084      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68b9      	ldr	r1, [r7, #8]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 fb69 	bl	8009ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f042 0208 	orr.w	r2, r2, #8
 80097f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69da      	ldr	r2, [r3, #28]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f022 0204 	bic.w	r2, r2, #4
 8009808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69d9      	ldr	r1, [r3, #28]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	691a      	ldr	r2, [r3, #16]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	61da      	str	r2, [r3, #28]
      break;
 800981c:	e064      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fbd1 	bl	8009fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69da      	ldr	r2, [r3, #28]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69da      	ldr	r2, [r3, #28]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	69d9      	ldr	r1, [r3, #28]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	021a      	lsls	r2, r3, #8
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	61da      	str	r2, [r3, #28]
      break;
 800985e:	e043      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68b9      	ldr	r1, [r7, #8]
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fc1a 	bl	800a0a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f042 0208 	orr.w	r2, r2, #8
 800987a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0204 	bic.w	r2, r2, #4
 800988a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	691a      	ldr	r2, [r3, #16]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800989e:	e023      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68b9      	ldr	r1, [r7, #8]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fc5e 	bl	800a168 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	021a      	lsls	r2, r3, #8
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	430a      	orrs	r2, r1
 80098de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80098e0:	e002      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	75fb      	strb	r3, [r7, #23]
      break;
 80098e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop

080098fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009910:	2b01      	cmp	r3, #1
 8009912:	d101      	bne.n	8009918 <HAL_TIM_ConfigClockSource+0x1c>
 8009914:	2302      	movs	r3, #2
 8009916:	e0dc      	b.n	8009ad2 <HAL_TIM_ConfigClockSource+0x1d6>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	4b6a      	ldr	r3, [pc, #424]	@ (8009adc <HAL_TIM_ConfigClockSource+0x1e0>)
 8009934:	4013      	ands	r3, r2
 8009936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800993e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a64      	ldr	r2, [pc, #400]	@ (8009ae0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800994e:	4293      	cmp	r3, r2
 8009950:	f000 80a9 	beq.w	8009aa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009954:	4a62      	ldr	r2, [pc, #392]	@ (8009ae0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009956:	4293      	cmp	r3, r2
 8009958:	f200 80ae 	bhi.w	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800995c:	4a61      	ldr	r2, [pc, #388]	@ (8009ae4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800995e:	4293      	cmp	r3, r2
 8009960:	f000 80a1 	beq.w	8009aa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009964:	4a5f      	ldr	r2, [pc, #380]	@ (8009ae4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009966:	4293      	cmp	r3, r2
 8009968:	f200 80a6 	bhi.w	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800996c:	4a5e      	ldr	r2, [pc, #376]	@ (8009ae8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800996e:	4293      	cmp	r3, r2
 8009970:	f000 8099 	beq.w	8009aa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009974:	4a5c      	ldr	r2, [pc, #368]	@ (8009ae8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009976:	4293      	cmp	r3, r2
 8009978:	f200 809e 	bhi.w	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800997c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009980:	f000 8091 	beq.w	8009aa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009984:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009988:	f200 8096 	bhi.w	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800998c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009990:	f000 8089 	beq.w	8009aa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009994:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009998:	f200 808e 	bhi.w	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800999c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099a0:	d03e      	beq.n	8009a20 <HAL_TIM_ConfigClockSource+0x124>
 80099a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099a6:	f200 8087 	bhi.w	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ae:	f000 8086 	beq.w	8009abe <HAL_TIM_ConfigClockSource+0x1c2>
 80099b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099b6:	d87f      	bhi.n	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099b8:	2b70      	cmp	r3, #112	@ 0x70
 80099ba:	d01a      	beq.n	80099f2 <HAL_TIM_ConfigClockSource+0xf6>
 80099bc:	2b70      	cmp	r3, #112	@ 0x70
 80099be:	d87b      	bhi.n	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099c0:	2b60      	cmp	r3, #96	@ 0x60
 80099c2:	d050      	beq.n	8009a66 <HAL_TIM_ConfigClockSource+0x16a>
 80099c4:	2b60      	cmp	r3, #96	@ 0x60
 80099c6:	d877      	bhi.n	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099c8:	2b50      	cmp	r3, #80	@ 0x50
 80099ca:	d03c      	beq.n	8009a46 <HAL_TIM_ConfigClockSource+0x14a>
 80099cc:	2b50      	cmp	r3, #80	@ 0x50
 80099ce:	d873      	bhi.n	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099d0:	2b40      	cmp	r3, #64	@ 0x40
 80099d2:	d058      	beq.n	8009a86 <HAL_TIM_ConfigClockSource+0x18a>
 80099d4:	2b40      	cmp	r3, #64	@ 0x40
 80099d6:	d86f      	bhi.n	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099d8:	2b30      	cmp	r3, #48	@ 0x30
 80099da:	d064      	beq.n	8009aa6 <HAL_TIM_ConfigClockSource+0x1aa>
 80099dc:	2b30      	cmp	r3, #48	@ 0x30
 80099de:	d86b      	bhi.n	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099e0:	2b20      	cmp	r3, #32
 80099e2:	d060      	beq.n	8009aa6 <HAL_TIM_ConfigClockSource+0x1aa>
 80099e4:	2b20      	cmp	r3, #32
 80099e6:	d867      	bhi.n	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d05c      	beq.n	8009aa6 <HAL_TIM_ConfigClockSource+0x1aa>
 80099ec:	2b10      	cmp	r3, #16
 80099ee:	d05a      	beq.n	8009aa6 <HAL_TIM_ConfigClockSource+0x1aa>
 80099f0:	e062      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a02:	f000 fc95 	bl	800a330 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	609a      	str	r2, [r3, #8]
      break;
 8009a1e:	e04f      	b.n	8009ac0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a30:	f000 fc7e 	bl	800a330 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689a      	ldr	r2, [r3, #8]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a42:	609a      	str	r2, [r3, #8]
      break;
 8009a44:	e03c      	b.n	8009ac0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a52:	461a      	mov	r2, r3
 8009a54:	f000 fbee 	bl	800a234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2150      	movs	r1, #80	@ 0x50
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 fc48 	bl	800a2f4 <TIM_ITRx_SetConfig>
      break;
 8009a64:	e02c      	b.n	8009ac0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a72:	461a      	mov	r2, r3
 8009a74:	f000 fc0d 	bl	800a292 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2160      	movs	r1, #96	@ 0x60
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fc38 	bl	800a2f4 <TIM_ITRx_SetConfig>
      break;
 8009a84:	e01c      	b.n	8009ac0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a92:	461a      	mov	r2, r3
 8009a94:	f000 fbce 	bl	800a234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2140      	movs	r1, #64	@ 0x40
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 fc28 	bl	800a2f4 <TIM_ITRx_SetConfig>
      break;
 8009aa4:	e00c      	b.n	8009ac0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	f000 fc1f 	bl	800a2f4 <TIM_ITRx_SetConfig>
      break;
 8009ab6:	e003      	b.n	8009ac0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	73fb      	strb	r3, [r7, #15]
      break;
 8009abc:	e000      	b.n	8009ac0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009abe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	ffceff88 	.word	0xffceff88
 8009ae0:	00100040 	.word	0x00100040
 8009ae4:	00100030 	.word	0x00100030
 8009ae8:	00100020 	.word	0x00100020

08009aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a46      	ldr	r2, [pc, #280]	@ (8009c68 <TIM_Base_SetConfig+0x12c>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d013      	beq.n	8009b7c <TIM_Base_SetConfig+0x40>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b5a:	d00f      	beq.n	8009b7c <TIM_Base_SetConfig+0x40>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a43      	ldr	r2, [pc, #268]	@ (8009c6c <TIM_Base_SetConfig+0x130>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d00b      	beq.n	8009b7c <TIM_Base_SetConfig+0x40>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a42      	ldr	r2, [pc, #264]	@ (8009c70 <TIM_Base_SetConfig+0x134>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d007      	beq.n	8009b7c <TIM_Base_SetConfig+0x40>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a41      	ldr	r2, [pc, #260]	@ (8009c74 <TIM_Base_SetConfig+0x138>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d003      	beq.n	8009b7c <TIM_Base_SetConfig+0x40>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a40      	ldr	r2, [pc, #256]	@ (8009c78 <TIM_Base_SetConfig+0x13c>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d108      	bne.n	8009b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a35      	ldr	r2, [pc, #212]	@ (8009c68 <TIM_Base_SetConfig+0x12c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d01f      	beq.n	8009bd6 <TIM_Base_SetConfig+0x9a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b9c:	d01b      	beq.n	8009bd6 <TIM_Base_SetConfig+0x9a>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a32      	ldr	r2, [pc, #200]	@ (8009c6c <TIM_Base_SetConfig+0x130>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d017      	beq.n	8009bd6 <TIM_Base_SetConfig+0x9a>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a31      	ldr	r2, [pc, #196]	@ (8009c70 <TIM_Base_SetConfig+0x134>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d013      	beq.n	8009bd6 <TIM_Base_SetConfig+0x9a>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a30      	ldr	r2, [pc, #192]	@ (8009c74 <TIM_Base_SetConfig+0x138>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d00f      	beq.n	8009bd6 <TIM_Base_SetConfig+0x9a>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8009c78 <TIM_Base_SetConfig+0x13c>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d00b      	beq.n	8009bd6 <TIM_Base_SetConfig+0x9a>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8009c7c <TIM_Base_SetConfig+0x140>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d007      	beq.n	8009bd6 <TIM_Base_SetConfig+0x9a>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8009c80 <TIM_Base_SetConfig+0x144>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d003      	beq.n	8009bd6 <TIM_Base_SetConfig+0x9a>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8009c84 <TIM_Base_SetConfig+0x148>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d108      	bne.n	8009be8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	689a      	ldr	r2, [r3, #8]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a16      	ldr	r2, [pc, #88]	@ (8009c68 <TIM_Base_SetConfig+0x12c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d00f      	beq.n	8009c34 <TIM_Base_SetConfig+0xf8>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a18      	ldr	r2, [pc, #96]	@ (8009c78 <TIM_Base_SetConfig+0x13c>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d00b      	beq.n	8009c34 <TIM_Base_SetConfig+0xf8>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a17      	ldr	r2, [pc, #92]	@ (8009c7c <TIM_Base_SetConfig+0x140>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d007      	beq.n	8009c34 <TIM_Base_SetConfig+0xf8>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a16      	ldr	r2, [pc, #88]	@ (8009c80 <TIM_Base_SetConfig+0x144>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d003      	beq.n	8009c34 <TIM_Base_SetConfig+0xf8>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a15      	ldr	r2, [pc, #84]	@ (8009c84 <TIM_Base_SetConfig+0x148>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d103      	bne.n	8009c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	691a      	ldr	r2, [r3, #16]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d105      	bne.n	8009c5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	f023 0201 	bic.w	r2, r3, #1
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	611a      	str	r2, [r3, #16]
  }
}
 8009c5a:	bf00      	nop
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	40010000 	.word	0x40010000
 8009c6c:	40000400 	.word	0x40000400
 8009c70:	40000800 	.word	0x40000800
 8009c74:	40000c00 	.word	0x40000c00
 8009c78:	40010400 	.word	0x40010400
 8009c7c:	40014000 	.word	0x40014000
 8009c80:	40014400 	.word	0x40014400
 8009c84:	40014800 	.word	0x40014800

08009c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	f023 0201 	bic.w	r2, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	4b37      	ldr	r3, [pc, #220]	@ (8009d90 <TIM_OC1_SetConfig+0x108>)
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 0303 	bic.w	r3, r3, #3
 8009cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f023 0302 	bic.w	r3, r3, #2
 8009cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a2d      	ldr	r2, [pc, #180]	@ (8009d94 <TIM_OC1_SetConfig+0x10c>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00f      	beq.n	8009d04 <TIM_OC1_SetConfig+0x7c>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8009d98 <TIM_OC1_SetConfig+0x110>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d00b      	beq.n	8009d04 <TIM_OC1_SetConfig+0x7c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a2b      	ldr	r2, [pc, #172]	@ (8009d9c <TIM_OC1_SetConfig+0x114>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d007      	beq.n	8009d04 <TIM_OC1_SetConfig+0x7c>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8009da0 <TIM_OC1_SetConfig+0x118>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d003      	beq.n	8009d04 <TIM_OC1_SetConfig+0x7c>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a29      	ldr	r2, [pc, #164]	@ (8009da4 <TIM_OC1_SetConfig+0x11c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d10c      	bne.n	8009d1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f023 0308 	bic.w	r3, r3, #8
 8009d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f023 0304 	bic.w	r3, r3, #4
 8009d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a1c      	ldr	r2, [pc, #112]	@ (8009d94 <TIM_OC1_SetConfig+0x10c>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d00f      	beq.n	8009d46 <TIM_OC1_SetConfig+0xbe>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a1b      	ldr	r2, [pc, #108]	@ (8009d98 <TIM_OC1_SetConfig+0x110>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d00b      	beq.n	8009d46 <TIM_OC1_SetConfig+0xbe>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a1a      	ldr	r2, [pc, #104]	@ (8009d9c <TIM_OC1_SetConfig+0x114>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d007      	beq.n	8009d46 <TIM_OC1_SetConfig+0xbe>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a19      	ldr	r2, [pc, #100]	@ (8009da0 <TIM_OC1_SetConfig+0x118>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d003      	beq.n	8009d46 <TIM_OC1_SetConfig+0xbe>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a18      	ldr	r2, [pc, #96]	@ (8009da4 <TIM_OC1_SetConfig+0x11c>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d111      	bne.n	8009d6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	621a      	str	r2, [r3, #32]
}
 8009d84:	bf00      	nop
 8009d86:	371c      	adds	r7, #28
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	fffeff8f 	.word	0xfffeff8f
 8009d94:	40010000 	.word	0x40010000
 8009d98:	40010400 	.word	0x40010400
 8009d9c:	40014000 	.word	0x40014000
 8009da0:	40014400 	.word	0x40014400
 8009da4:	40014800 	.word	0x40014800

08009da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	f023 0210 	bic.w	r2, r3, #16
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4b34      	ldr	r3, [pc, #208]	@ (8009ea4 <TIM_OC2_SetConfig+0xfc>)
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	021b      	lsls	r3, r3, #8
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f023 0320 	bic.w	r3, r3, #32
 8009df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	011b      	lsls	r3, r3, #4
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a29      	ldr	r2, [pc, #164]	@ (8009ea8 <TIM_OC2_SetConfig+0x100>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d003      	beq.n	8009e10 <TIM_OC2_SetConfig+0x68>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a28      	ldr	r2, [pc, #160]	@ (8009eac <TIM_OC2_SetConfig+0x104>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d10d      	bne.n	8009e2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	011b      	lsls	r3, r3, #4
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ea8 <TIM_OC2_SetConfig+0x100>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d00f      	beq.n	8009e54 <TIM_OC2_SetConfig+0xac>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a1d      	ldr	r2, [pc, #116]	@ (8009eac <TIM_OC2_SetConfig+0x104>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d00b      	beq.n	8009e54 <TIM_OC2_SetConfig+0xac>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8009eb0 <TIM_OC2_SetConfig+0x108>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d007      	beq.n	8009e54 <TIM_OC2_SetConfig+0xac>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a1b      	ldr	r2, [pc, #108]	@ (8009eb4 <TIM_OC2_SetConfig+0x10c>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d003      	beq.n	8009e54 <TIM_OC2_SetConfig+0xac>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8009eb8 <TIM_OC2_SetConfig+0x110>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d113      	bne.n	8009e7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	621a      	str	r2, [r3, #32]
}
 8009e96:	bf00      	nop
 8009e98:	371c      	adds	r7, #28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	feff8fff 	.word	0xfeff8fff
 8009ea8:	40010000 	.word	0x40010000
 8009eac:	40010400 	.word	0x40010400
 8009eb0:	40014000 	.word	0x40014000
 8009eb4:	40014400 	.word	0x40014400
 8009eb8:	40014800 	.word	0x40014800

08009ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	69db      	ldr	r3, [r3, #28]
 8009ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	4b33      	ldr	r3, [pc, #204]	@ (8009fb4 <TIM_OC3_SetConfig+0xf8>)
 8009ee8:	4013      	ands	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f023 0303 	bic.w	r3, r3, #3
 8009ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	021b      	lsls	r3, r3, #8
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a28      	ldr	r2, [pc, #160]	@ (8009fb8 <TIM_OC3_SetConfig+0xfc>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d003      	beq.n	8009f22 <TIM_OC3_SetConfig+0x66>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a27      	ldr	r2, [pc, #156]	@ (8009fbc <TIM_OC3_SetConfig+0x100>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d10d      	bne.n	8009f3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	021b      	lsls	r3, r3, #8
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a1d      	ldr	r2, [pc, #116]	@ (8009fb8 <TIM_OC3_SetConfig+0xfc>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d00f      	beq.n	8009f66 <TIM_OC3_SetConfig+0xaa>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a1c      	ldr	r2, [pc, #112]	@ (8009fbc <TIM_OC3_SetConfig+0x100>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d00b      	beq.n	8009f66 <TIM_OC3_SetConfig+0xaa>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a1b      	ldr	r2, [pc, #108]	@ (8009fc0 <TIM_OC3_SetConfig+0x104>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d007      	beq.n	8009f66 <TIM_OC3_SetConfig+0xaa>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a1a      	ldr	r2, [pc, #104]	@ (8009fc4 <TIM_OC3_SetConfig+0x108>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d003      	beq.n	8009f66 <TIM_OC3_SetConfig+0xaa>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a19      	ldr	r2, [pc, #100]	@ (8009fc8 <TIM_OC3_SetConfig+0x10c>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d113      	bne.n	8009f8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	621a      	str	r2, [r3, #32]
}
 8009fa8:	bf00      	nop
 8009faa:	371c      	adds	r7, #28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	fffeff8f 	.word	0xfffeff8f
 8009fb8:	40010000 	.word	0x40010000
 8009fbc:	40010400 	.word	0x40010400
 8009fc0:	40014000 	.word	0x40014000
 8009fc4:	40014400 	.word	0x40014400
 8009fc8:	40014800 	.word	0x40014800

08009fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b087      	sub	sp, #28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	4b24      	ldr	r3, [pc, #144]	@ (800a088 <TIM_OC4_SetConfig+0xbc>)
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	021b      	lsls	r3, r3, #8
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	031b      	lsls	r3, r3, #12
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	4313      	orrs	r3, r2
 800a022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a19      	ldr	r2, [pc, #100]	@ (800a08c <TIM_OC4_SetConfig+0xc0>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d00f      	beq.n	800a04c <TIM_OC4_SetConfig+0x80>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a18      	ldr	r2, [pc, #96]	@ (800a090 <TIM_OC4_SetConfig+0xc4>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d00b      	beq.n	800a04c <TIM_OC4_SetConfig+0x80>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a17      	ldr	r2, [pc, #92]	@ (800a094 <TIM_OC4_SetConfig+0xc8>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d007      	beq.n	800a04c <TIM_OC4_SetConfig+0x80>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a16      	ldr	r2, [pc, #88]	@ (800a098 <TIM_OC4_SetConfig+0xcc>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d003      	beq.n	800a04c <TIM_OC4_SetConfig+0x80>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a15      	ldr	r2, [pc, #84]	@ (800a09c <TIM_OC4_SetConfig+0xd0>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d109      	bne.n	800a060 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	019b      	lsls	r3, r3, #6
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	621a      	str	r2, [r3, #32]
}
 800a07a:	bf00      	nop
 800a07c:	371c      	adds	r7, #28
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	feff8fff 	.word	0xfeff8fff
 800a08c:	40010000 	.word	0x40010000
 800a090:	40010400 	.word	0x40010400
 800a094:	40014000 	.word	0x40014000
 800a098:	40014400 	.word	0x40014400
 800a09c:	40014800 	.word	0x40014800

0800a0a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b087      	sub	sp, #28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4b21      	ldr	r3, [pc, #132]	@ (800a150 <TIM_OC5_SetConfig+0xb0>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a0e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	041b      	lsls	r3, r3, #16
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a18      	ldr	r2, [pc, #96]	@ (800a154 <TIM_OC5_SetConfig+0xb4>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d00f      	beq.n	800a116 <TIM_OC5_SetConfig+0x76>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a17      	ldr	r2, [pc, #92]	@ (800a158 <TIM_OC5_SetConfig+0xb8>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d00b      	beq.n	800a116 <TIM_OC5_SetConfig+0x76>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a16      	ldr	r2, [pc, #88]	@ (800a15c <TIM_OC5_SetConfig+0xbc>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d007      	beq.n	800a116 <TIM_OC5_SetConfig+0x76>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a15      	ldr	r2, [pc, #84]	@ (800a160 <TIM_OC5_SetConfig+0xc0>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d003      	beq.n	800a116 <TIM_OC5_SetConfig+0x76>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a14      	ldr	r2, [pc, #80]	@ (800a164 <TIM_OC5_SetConfig+0xc4>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d109      	bne.n	800a12a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a11c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	021b      	lsls	r3, r3, #8
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	4313      	orrs	r3, r2
 800a128:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	685a      	ldr	r2, [r3, #4]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	621a      	str	r2, [r3, #32]
}
 800a144:	bf00      	nop
 800a146:	371c      	adds	r7, #28
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	fffeff8f 	.word	0xfffeff8f
 800a154:	40010000 	.word	0x40010000
 800a158:	40010400 	.word	0x40010400
 800a15c:	40014000 	.word	0x40014000
 800a160:	40014400 	.word	0x40014400
 800a164:	40014800 	.word	0x40014800

0800a168 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	4b22      	ldr	r3, [pc, #136]	@ (800a21c <TIM_OC6_SetConfig+0xb4>)
 800a194:	4013      	ands	r3, r2
 800a196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	021b      	lsls	r3, r3, #8
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	051b      	lsls	r3, r3, #20
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a19      	ldr	r2, [pc, #100]	@ (800a220 <TIM_OC6_SetConfig+0xb8>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d00f      	beq.n	800a1e0 <TIM_OC6_SetConfig+0x78>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a18      	ldr	r2, [pc, #96]	@ (800a224 <TIM_OC6_SetConfig+0xbc>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d00b      	beq.n	800a1e0 <TIM_OC6_SetConfig+0x78>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a17      	ldr	r2, [pc, #92]	@ (800a228 <TIM_OC6_SetConfig+0xc0>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d007      	beq.n	800a1e0 <TIM_OC6_SetConfig+0x78>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a16      	ldr	r2, [pc, #88]	@ (800a22c <TIM_OC6_SetConfig+0xc4>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d003      	beq.n	800a1e0 <TIM_OC6_SetConfig+0x78>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a15      	ldr	r2, [pc, #84]	@ (800a230 <TIM_OC6_SetConfig+0xc8>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d109      	bne.n	800a1f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a1e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	029b      	lsls	r3, r3, #10
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	621a      	str	r2, [r3, #32]
}
 800a20e:	bf00      	nop
 800a210:	371c      	adds	r7, #28
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	feff8fff 	.word	0xfeff8fff
 800a220:	40010000 	.word	0x40010000
 800a224:	40010400 	.word	0x40010400
 800a228:	40014000 	.word	0x40014000
 800a22c:	40014400 	.word	0x40014400
 800a230:	40014800 	.word	0x40014800

0800a234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	f023 0201 	bic.w	r2, r3, #1
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a25e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4313      	orrs	r3, r2
 800a268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f023 030a 	bic.w	r3, r3, #10
 800a270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	4313      	orrs	r3, r2
 800a278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	621a      	str	r2, [r3, #32]
}
 800a286:	bf00      	nop
 800a288:	371c      	adds	r7, #28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a292:	b480      	push	{r7}
 800a294:	b087      	sub	sp, #28
 800a296:	af00      	add	r7, sp, #0
 800a298:	60f8      	str	r0, [r7, #12]
 800a29a:	60b9      	str	r1, [r7, #8]
 800a29c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	f023 0210 	bic.w	r2, r3, #16
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	031b      	lsls	r3, r3, #12
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a2ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	621a      	str	r2, [r3, #32]
}
 800a2e6:	bf00      	nop
 800a2e8:	371c      	adds	r7, #28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
	...

0800a2f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	4b09      	ldr	r3, [pc, #36]	@ (800a32c <TIM_ITRx_SetConfig+0x38>)
 800a308:	4013      	ands	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4313      	orrs	r3, r2
 800a312:	f043 0307 	orr.w	r3, r3, #7
 800a316:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	609a      	str	r2, [r3, #8]
}
 800a31e:	bf00      	nop
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	ffcfff8f 	.word	0xffcfff8f

0800a330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a34a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	021a      	lsls	r2, r3, #8
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	431a      	orrs	r2, r3
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	4313      	orrs	r3, r2
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	609a      	str	r2, [r3, #8]
}
 800a364:	bf00      	nop
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f003 031f 	and.w	r3, r3, #31
 800a382:	2201      	movs	r2, #1
 800a384:	fa02 f303 	lsl.w	r3, r2, r3
 800a388:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6a1a      	ldr	r2, [r3, #32]
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	43db      	mvns	r3, r3
 800a392:	401a      	ands	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a1a      	ldr	r2, [r3, #32]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	f003 031f 	and.w	r3, r3, #31
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	621a      	str	r2, [r3, #32]
}
 800a3ae:	bf00      	nop
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
	...

0800a3bc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d109      	bne.n	800a3e0 <HAL_TIMEx_PWMN_Start+0x24>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	bf14      	ite	ne
 800a3d8:	2301      	movne	r3, #1
 800a3da:	2300      	moveq	r3, #0
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	e022      	b.n	800a426 <HAL_TIMEx_PWMN_Start+0x6a>
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2b04      	cmp	r3, #4
 800a3e4:	d109      	bne.n	800a3fa <HAL_TIMEx_PWMN_Start+0x3e>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	bf14      	ite	ne
 800a3f2:	2301      	movne	r3, #1
 800a3f4:	2300      	moveq	r3, #0
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	e015      	b.n	800a426 <HAL_TIMEx_PWMN_Start+0x6a>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	d109      	bne.n	800a414 <HAL_TIMEx_PWMN_Start+0x58>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b01      	cmp	r3, #1
 800a40a:	bf14      	ite	ne
 800a40c:	2301      	movne	r3, #1
 800a40e:	2300      	moveq	r3, #0
 800a410:	b2db      	uxtb	r3, r3
 800a412:	e008      	b.n	800a426 <HAL_TIMEx_PWMN_Start+0x6a>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	bf14      	ite	ne
 800a420:	2301      	movne	r3, #1
 800a422:	2300      	moveq	r3, #0
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e073      	b.n	800a516 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d104      	bne.n	800a43e <HAL_TIMEx_PWMN_Start+0x82>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2202      	movs	r2, #2
 800a438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a43c:	e013      	b.n	800a466 <HAL_TIMEx_PWMN_Start+0xaa>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2b04      	cmp	r3, #4
 800a442:	d104      	bne.n	800a44e <HAL_TIMEx_PWMN_Start+0x92>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2202      	movs	r2, #2
 800a448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a44c:	e00b      	b.n	800a466 <HAL_TIMEx_PWMN_Start+0xaa>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b08      	cmp	r3, #8
 800a452:	d104      	bne.n	800a45e <HAL_TIMEx_PWMN_Start+0xa2>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a45c:	e003      	b.n	800a466 <HAL_TIMEx_PWMN_Start+0xaa>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2202      	movs	r2, #2
 800a462:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2204      	movs	r2, #4
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 f990 	bl	800a794 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a482:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a25      	ldr	r2, [pc, #148]	@ (800a520 <HAL_TIMEx_PWMN_Start+0x164>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d022      	beq.n	800a4d4 <HAL_TIMEx_PWMN_Start+0x118>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a496:	d01d      	beq.n	800a4d4 <HAL_TIMEx_PWMN_Start+0x118>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a21      	ldr	r2, [pc, #132]	@ (800a524 <HAL_TIMEx_PWMN_Start+0x168>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d018      	beq.n	800a4d4 <HAL_TIMEx_PWMN_Start+0x118>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a20      	ldr	r2, [pc, #128]	@ (800a528 <HAL_TIMEx_PWMN_Start+0x16c>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d013      	beq.n	800a4d4 <HAL_TIMEx_PWMN_Start+0x118>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a1e      	ldr	r2, [pc, #120]	@ (800a52c <HAL_TIMEx_PWMN_Start+0x170>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d00e      	beq.n	800a4d4 <HAL_TIMEx_PWMN_Start+0x118>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a1d      	ldr	r2, [pc, #116]	@ (800a530 <HAL_TIMEx_PWMN_Start+0x174>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d009      	beq.n	800a4d4 <HAL_TIMEx_PWMN_Start+0x118>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a534 <HAL_TIMEx_PWMN_Start+0x178>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d004      	beq.n	800a4d4 <HAL_TIMEx_PWMN_Start+0x118>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a1a      	ldr	r2, [pc, #104]	@ (800a538 <HAL_TIMEx_PWMN_Start+0x17c>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d115      	bne.n	800a500 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689a      	ldr	r2, [r3, #8]
 800a4da:	4b18      	ldr	r3, [pc, #96]	@ (800a53c <HAL_TIMEx_PWMN_Start+0x180>)
 800a4dc:	4013      	ands	r3, r2
 800a4de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b06      	cmp	r3, #6
 800a4e4:	d015      	beq.n	800a512 <HAL_TIMEx_PWMN_Start+0x156>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4ec:	d011      	beq.n	800a512 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f042 0201 	orr.w	r2, r2, #1
 800a4fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4fe:	e008      	b.n	800a512 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f042 0201 	orr.w	r2, r2, #1
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	e000      	b.n	800a514 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a512:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	40010000 	.word	0x40010000
 800a524:	40000400 	.word	0x40000400
 800a528:	40000800 	.word	0x40000800
 800a52c:	40000c00 	.word	0x40000c00
 800a530:	40010400 	.word	0x40010400
 800a534:	40001800 	.word	0x40001800
 800a538:	40014000 	.word	0x40014000
 800a53c:	00010007 	.word	0x00010007

0800a540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a550:	2b01      	cmp	r3, #1
 800a552:	d101      	bne.n	800a558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a554:	2302      	movs	r3, #2
 800a556:	e06d      	b.n	800a634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a30      	ldr	r2, [pc, #192]	@ (800a640 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d004      	beq.n	800a58c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a2f      	ldr	r2, [pc, #188]	@ (800a644 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d108      	bne.n	800a59e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a592:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a20      	ldr	r2, [pc, #128]	@ (800a640 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d022      	beq.n	800a608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ca:	d01d      	beq.n	800a608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a648 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d018      	beq.n	800a608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a1c      	ldr	r2, [pc, #112]	@ (800a64c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d013      	beq.n	800a608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a1a      	ldr	r2, [pc, #104]	@ (800a650 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d00e      	beq.n	800a608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a15      	ldr	r2, [pc, #84]	@ (800a644 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d009      	beq.n	800a608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a16      	ldr	r2, [pc, #88]	@ (800a654 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d004      	beq.n	800a608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a15      	ldr	r2, [pc, #84]	@ (800a658 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d10c      	bne.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a60e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	4313      	orrs	r3, r2
 800a618:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	40010000 	.word	0x40010000
 800a644:	40010400 	.word	0x40010400
 800a648:	40000400 	.word	0x40000400
 800a64c:	40000800 	.word	0x40000800
 800a650:	40000c00 	.word	0x40000c00
 800a654:	40001800 	.word	0x40001800
 800a658:	40014000 	.word	0x40014000

0800a65c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a670:	2b01      	cmp	r3, #1
 800a672:	d101      	bne.n	800a678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a674:	2302      	movs	r3, #2
 800a676:	e065      	b.n	800a744 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	4313      	orrs	r3, r2
 800a69a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	041b      	lsls	r3, r3, #16
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a16      	ldr	r2, [pc, #88]	@ (800a750 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d004      	beq.n	800a706 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a14      	ldr	r2, [pc, #80]	@ (800a754 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d115      	bne.n	800a732 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	051b      	lsls	r3, r3, #20
 800a712:	4313      	orrs	r3, r2
 800a714:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	40010000 	.word	0x40010000
 800a754:	40010400 	.word	0x40010400

0800a758 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	f003 030f 	and.w	r3, r3, #15
 800a7a6:	2204      	movs	r2, #4
 800a7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6a1a      	ldr	r2, [r3, #32]
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	43db      	mvns	r3, r3
 800a7b6:	401a      	ands	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6a1a      	ldr	r2, [r3, #32]
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f003 030f 	and.w	r3, r3, #15
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a7cc:	431a      	orrs	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	621a      	str	r2, [r3, #32]
}
 800a7d2:	bf00      	nop
 800a7d4:	371c      	adds	r7, #28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
	...

0800a7e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b084      	sub	sp, #16
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	f107 001c 	add.w	r0, r7, #28
 800a7ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d121      	bne.n	800a83e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	4b2c      	ldr	r3, [pc, #176]	@ (800a8bc <USB_CoreInit+0xdc>)
 800a80c:	4013      	ands	r3, r2
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a81e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a822:	2b01      	cmp	r3, #1
 800a824:	d105      	bne.n	800a832 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f001 faf6 	bl	800be24 <USB_CoreReset>
 800a838:	4603      	mov	r3, r0
 800a83a:	73fb      	strb	r3, [r7, #15]
 800a83c:	e01b      	b.n	800a876 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 faea 	bl	800be24 <USB_CoreReset>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a854:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d106      	bne.n	800a86a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a860:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	639a      	str	r2, [r3, #56]	@ 0x38
 800a868:	e005      	b.n	800a876 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a876:	7fbb      	ldrb	r3, [r7, #30]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d116      	bne.n	800a8aa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a880:	b29a      	uxth	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a88a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c0 <USB_CoreInit+0xe0>)
 800a88c:	4313      	orrs	r3, r2
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	f043 0206 	orr.w	r2, r3, #6
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	f043 0220 	orr.w	r2, r3, #32
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8b6:	b004      	add	sp, #16
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	ffbdffbf 	.word	0xffbdffbf
 800a8c0:	03ee0000 	.word	0x03ee0000

0800a8c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a8d2:	79fb      	ldrb	r3, [r7, #7]
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d165      	bne.n	800a9a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	4a41      	ldr	r2, [pc, #260]	@ (800a9e0 <USB_SetTurnaroundTime+0x11c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d906      	bls.n	800a8ee <USB_SetTurnaroundTime+0x2a>
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	4a40      	ldr	r2, [pc, #256]	@ (800a9e4 <USB_SetTurnaroundTime+0x120>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d202      	bcs.n	800a8ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a8e8:	230f      	movs	r3, #15
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	e062      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	4a3c      	ldr	r2, [pc, #240]	@ (800a9e4 <USB_SetTurnaroundTime+0x120>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d306      	bcc.n	800a904 <USB_SetTurnaroundTime+0x40>
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	4a3b      	ldr	r2, [pc, #236]	@ (800a9e8 <USB_SetTurnaroundTime+0x124>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d202      	bcs.n	800a904 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a8fe:	230e      	movs	r3, #14
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	e057      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	4a38      	ldr	r2, [pc, #224]	@ (800a9e8 <USB_SetTurnaroundTime+0x124>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d306      	bcc.n	800a91a <USB_SetTurnaroundTime+0x56>
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	4a37      	ldr	r2, [pc, #220]	@ (800a9ec <USB_SetTurnaroundTime+0x128>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d202      	bcs.n	800a91a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a914:	230d      	movs	r3, #13
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	e04c      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	4a33      	ldr	r2, [pc, #204]	@ (800a9ec <USB_SetTurnaroundTime+0x128>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d306      	bcc.n	800a930 <USB_SetTurnaroundTime+0x6c>
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	4a32      	ldr	r2, [pc, #200]	@ (800a9f0 <USB_SetTurnaroundTime+0x12c>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d802      	bhi.n	800a930 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a92a:	230c      	movs	r3, #12
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	e041      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	4a2f      	ldr	r2, [pc, #188]	@ (800a9f0 <USB_SetTurnaroundTime+0x12c>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d906      	bls.n	800a946 <USB_SetTurnaroundTime+0x82>
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	4a2e      	ldr	r2, [pc, #184]	@ (800a9f4 <USB_SetTurnaroundTime+0x130>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d802      	bhi.n	800a946 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a940:	230b      	movs	r3, #11
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	e036      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	4a2a      	ldr	r2, [pc, #168]	@ (800a9f4 <USB_SetTurnaroundTime+0x130>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d906      	bls.n	800a95c <USB_SetTurnaroundTime+0x98>
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	4a29      	ldr	r2, [pc, #164]	@ (800a9f8 <USB_SetTurnaroundTime+0x134>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d802      	bhi.n	800a95c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a956:	230a      	movs	r3, #10
 800a958:	617b      	str	r3, [r7, #20]
 800a95a:	e02b      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	4a26      	ldr	r2, [pc, #152]	@ (800a9f8 <USB_SetTurnaroundTime+0x134>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d906      	bls.n	800a972 <USB_SetTurnaroundTime+0xae>
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4a25      	ldr	r2, [pc, #148]	@ (800a9fc <USB_SetTurnaroundTime+0x138>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d202      	bcs.n	800a972 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a96c:	2309      	movs	r3, #9
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	e020      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	4a21      	ldr	r2, [pc, #132]	@ (800a9fc <USB_SetTurnaroundTime+0x138>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d306      	bcc.n	800a988 <USB_SetTurnaroundTime+0xc4>
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	4a20      	ldr	r2, [pc, #128]	@ (800aa00 <USB_SetTurnaroundTime+0x13c>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d802      	bhi.n	800a988 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a982:	2308      	movs	r3, #8
 800a984:	617b      	str	r3, [r7, #20]
 800a986:	e015      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	4a1d      	ldr	r2, [pc, #116]	@ (800aa00 <USB_SetTurnaroundTime+0x13c>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d906      	bls.n	800a99e <USB_SetTurnaroundTime+0xda>
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	4a1c      	ldr	r2, [pc, #112]	@ (800aa04 <USB_SetTurnaroundTime+0x140>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d202      	bcs.n	800a99e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a998:	2307      	movs	r3, #7
 800a99a:	617b      	str	r3, [r7, #20]
 800a99c:	e00a      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a99e:	2306      	movs	r3, #6
 800a9a0:	617b      	str	r3, [r7, #20]
 800a9a2:	e007      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a9a4:	79fb      	ldrb	r3, [r7, #7]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a9aa:	2309      	movs	r3, #9
 800a9ac:	617b      	str	r3, [r7, #20]
 800a9ae:	e001      	b.n	800a9b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a9b0:	2309      	movs	r3, #9
 800a9b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	68da      	ldr	r2, [r3, #12]
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	029b      	lsls	r3, r3, #10
 800a9c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a9cc:	431a      	orrs	r2, r3
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	371c      	adds	r7, #28
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	00d8acbf 	.word	0x00d8acbf
 800a9e4:	00e4e1c0 	.word	0x00e4e1c0
 800a9e8:	00f42400 	.word	0x00f42400
 800a9ec:	01067380 	.word	0x01067380
 800a9f0:	011a499f 	.word	0x011a499f
 800a9f4:	01312cff 	.word	0x01312cff
 800a9f8:	014ca43f 	.word	0x014ca43f
 800a9fc:	016e3600 	.word	0x016e3600
 800aa00:	01a6ab1f 	.word	0x01a6ab1f
 800aa04:	01e84800 	.word	0x01e84800

0800aa08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f043 0201 	orr.w	r2, r3, #1
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f023 0201 	bic.w	r2, r3, #1
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aa68:	78fb      	ldrb	r3, [r7, #3]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d115      	bne.n	800aa9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa7a:	200a      	movs	r0, #10
 800aa7c:	f7f5 fd0e 	bl	800049c <HAL_Delay>
      ms += 10U;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	330a      	adds	r3, #10
 800aa84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f001 f93b 	bl	800bd02 <USB_GetMode>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d01e      	beq.n	800aad0 <USB_SetCurrentMode+0x84>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa96:	d9f0      	bls.n	800aa7a <USB_SetCurrentMode+0x2e>
 800aa98:	e01a      	b.n	800aad0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa9a:	78fb      	ldrb	r3, [r7, #3]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d115      	bne.n	800aacc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aaac:	200a      	movs	r0, #10
 800aaae:	f7f5 fcf5 	bl	800049c <HAL_Delay>
      ms += 10U;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	330a      	adds	r3, #10
 800aab6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f001 f922 	bl	800bd02 <USB_GetMode>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d005      	beq.n	800aad0 <USB_SetCurrentMode+0x84>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2bc7      	cmp	r3, #199	@ 0xc7
 800aac8:	d9f0      	bls.n	800aaac <USB_SetCurrentMode+0x60>
 800aaca:	e001      	b.n	800aad0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e005      	b.n	800aadc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2bc8      	cmp	r3, #200	@ 0xc8
 800aad4:	d101      	bne.n	800aada <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e000      	b.n	800aadc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aae4:	b084      	sub	sp, #16
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b086      	sub	sp, #24
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aaf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aafe:	2300      	movs	r3, #0
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	e009      	b.n	800ab18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	3340      	adds	r3, #64	@ 0x40
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	2200      	movs	r2, #0
 800ab10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	3301      	adds	r3, #1
 800ab16:	613b      	str	r3, [r7, #16]
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	2b0e      	cmp	r3, #14
 800ab1c:	d9f2      	bls.n	800ab04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ab1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d11c      	bne.n	800ab60 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab34:	f043 0302 	orr.w	r3, r3, #2
 800ab38:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab3e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	601a      	str	r2, [r3, #0]
 800ab5e:	e005      	b.n	800ab6c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab72:	461a      	mov	r2, r3
 800ab74:	2300      	movs	r3, #0
 800ab76:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d10d      	bne.n	800ab9c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d104      	bne.n	800ab92 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab88:	2100      	movs	r1, #0
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f968 	bl	800ae60 <USB_SetDevSpeed>
 800ab90:	e008      	b.n	800aba4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab92:	2101      	movs	r1, #1
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f963 	bl	800ae60 <USB_SetDevSpeed>
 800ab9a:	e003      	b.n	800aba4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab9c:	2103      	movs	r1, #3
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f95e 	bl	800ae60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aba4:	2110      	movs	r1, #16
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f8fa 	bl	800ada0 <USB_FlushTxFifo>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d001      	beq.n	800abb6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f924 	bl	800ae04 <USB_FlushRxFifo>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abcc:	461a      	mov	r2, r3
 800abce:	2300      	movs	r3, #0
 800abd0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abd8:	461a      	mov	r2, r3
 800abda:	2300      	movs	r3, #0
 800abdc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abe4:	461a      	mov	r2, r3
 800abe6:	2300      	movs	r3, #0
 800abe8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abea:	2300      	movs	r3, #0
 800abec:	613b      	str	r3, [r7, #16]
 800abee:	e043      	b.n	800ac78 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	015a      	lsls	r2, r3, #5
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4413      	add	r3, r2
 800abf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac06:	d118      	bne.n	800ac3a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10a      	bne.n	800ac24 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	015a      	lsls	r2, r3, #5
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	e013      	b.n	800ac4c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac30:	461a      	mov	r2, r3
 800ac32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	e008      	b.n	800ac4c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac46:	461a      	mov	r2, r3
 800ac48:	2300      	movs	r3, #0
 800ac4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac58:	461a      	mov	r2, r3
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	015a      	lsls	r2, r3, #5
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	4413      	add	r3, r2
 800ac66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ac70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	3301      	adds	r3, #1
 800ac76:	613b      	str	r3, [r7, #16]
 800ac78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d3b5      	bcc.n	800abf0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac84:	2300      	movs	r3, #0
 800ac86:	613b      	str	r3, [r7, #16]
 800ac88:	e043      	b.n	800ad12 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aca0:	d118      	bne.n	800acd4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	015a      	lsls	r2, r3, #5
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4413      	add	r3, r2
 800acb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acb4:	461a      	mov	r2, r3
 800acb6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800acba:	6013      	str	r3, [r2, #0]
 800acbc:	e013      	b.n	800ace6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	015a      	lsls	r2, r3, #5
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	4413      	add	r3, r2
 800acc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acca:	461a      	mov	r2, r3
 800accc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	e008      	b.n	800ace6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	015a      	lsls	r2, r3, #5
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4413      	add	r3, r2
 800acdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ace0:	461a      	mov	r2, r3
 800ace2:	2300      	movs	r3, #0
 800ace4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4413      	add	r3, r2
 800acee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acf2:	461a      	mov	r2, r3
 800acf4:	2300      	movs	r3, #0
 800acf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad04:	461a      	mov	r2, r3
 800ad06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ad0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	613b      	str	r3, [r7, #16]
 800ad12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad16:	461a      	mov	r2, r3
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d3b5      	bcc.n	800ac8a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ad3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ad40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d105      	bne.n	800ad54 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	f043 0210 	orr.w	r2, r3, #16
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	699a      	ldr	r2, [r3, #24]
 800ad58:	4b0f      	ldr	r3, [pc, #60]	@ (800ad98 <USB_DevInit+0x2b4>)
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ad60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d005      	beq.n	800ad74 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	f043 0208 	orr.w	r2, r3, #8
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ad74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d105      	bne.n	800ad88 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	699a      	ldr	r2, [r3, #24]
 800ad80:	4b06      	ldr	r3, [pc, #24]	@ (800ad9c <USB_DevInit+0x2b8>)
 800ad82:	4313      	orrs	r3, r2
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad94:	b004      	add	sp, #16
 800ad96:	4770      	bx	lr
 800ad98:	803c3800 	.word	0x803c3800
 800ad9c:	40000004 	.word	0x40000004

0800ada0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3301      	adds	r3, #1
 800adb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800adba:	d901      	bls.n	800adc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e01b      	b.n	800adf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	daf2      	bge.n	800adae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800adc8:	2300      	movs	r3, #0
 800adca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	019b      	lsls	r3, r3, #6
 800add0:	f043 0220 	orr.w	r2, r3, #32
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3301      	adds	r3, #1
 800addc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ade4:	d901      	bls.n	800adea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e006      	b.n	800adf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	f003 0320 	and.w	r3, r3, #32
 800adf2:	2b20      	cmp	r3, #32
 800adf4:	d0f0      	beq.n	800add8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	3301      	adds	r3, #1
 800ae14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae1c:	d901      	bls.n	800ae22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e018      	b.n	800ae54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	daf2      	bge.n	800ae10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2210      	movs	r2, #16
 800ae32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	3301      	adds	r3, #1
 800ae38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae40:	d901      	bls.n	800ae46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e006      	b.n	800ae54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	f003 0310 	and.w	r3, r3, #16
 800ae4e:	2b10      	cmp	r3, #16
 800ae50:	d0f0      	beq.n	800ae34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	68f9      	ldr	r1, [r7, #12]
 800ae7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae80:	4313      	orrs	r3, r2
 800ae82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b087      	sub	sp, #28
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	f003 0306 	and.w	r3, r3, #6
 800aeaa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d102      	bne.n	800aeb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	75fb      	strb	r3, [r7, #23]
 800aeb6:	e00a      	b.n	800aece <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d002      	beq.n	800aec4 <USB_GetDevSpeed+0x32>
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2b06      	cmp	r3, #6
 800aec2:	d102      	bne.n	800aeca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aec4:	2302      	movs	r3, #2
 800aec6:	75fb      	strb	r3, [r7, #23]
 800aec8:	e001      	b.n	800aece <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800aeca:	230f      	movs	r3, #15
 800aecc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aece:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	371c      	adds	r7, #28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	785b      	ldrb	r3, [r3, #1]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d139      	bne.n	800af6c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aefe:	69da      	ldr	r2, [r3, #28]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f003 030f 	and.w	r3, r3, #15
 800af08:	2101      	movs	r1, #1
 800af0a:	fa01 f303 	lsl.w	r3, r1, r3
 800af0e:	b29b      	uxth	r3, r3
 800af10:	68f9      	ldr	r1, [r7, #12]
 800af12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af16:	4313      	orrs	r3, r2
 800af18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	015a      	lsls	r2, r3, #5
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	4413      	add	r3, r2
 800af22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d153      	bne.n	800afd8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	791b      	ldrb	r3, [r3, #4]
 800af4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	059b      	lsls	r3, r3, #22
 800af52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af54:	431a      	orrs	r2, r3
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	0159      	lsls	r1, r3, #5
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	440b      	add	r3, r1
 800af5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af62:	4619      	mov	r1, r3
 800af64:	4b20      	ldr	r3, [pc, #128]	@ (800afe8 <USB_ActivateEndpoint+0x10c>)
 800af66:	4313      	orrs	r3, r2
 800af68:	600b      	str	r3, [r1, #0]
 800af6a:	e035      	b.n	800afd8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af72:	69da      	ldr	r2, [r3, #28]
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	f003 030f 	and.w	r3, r3, #15
 800af7c:	2101      	movs	r1, #1
 800af7e:	fa01 f303 	lsl.w	r3, r1, r3
 800af82:	041b      	lsls	r3, r3, #16
 800af84:	68f9      	ldr	r1, [r7, #12]
 800af86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af8a:	4313      	orrs	r3, r2
 800af8c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4413      	add	r3, r2
 800af96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d119      	bne.n	800afd8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	791b      	ldrb	r3, [r3, #4]
 800afbe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800afc0:	430b      	orrs	r3, r1
 800afc2:	431a      	orrs	r2, r3
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	0159      	lsls	r1, r3, #5
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	440b      	add	r3, r1
 800afcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afd0:	4619      	mov	r1, r3
 800afd2:	4b05      	ldr	r3, [pc, #20]	@ (800afe8 <USB_ActivateEndpoint+0x10c>)
 800afd4:	4313      	orrs	r3, r2
 800afd6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	10008000 	.word	0x10008000

0800afec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	785b      	ldrb	r3, [r3, #1]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d161      	bne.n	800b0cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	015a      	lsls	r2, r3, #5
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b01a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b01e:	d11f      	bne.n	800b060 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	015a      	lsls	r2, r3, #5
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	4413      	add	r3, r2
 800b028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	0151      	lsls	r1, r2, #5
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	440a      	add	r2, r1
 800b036:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b03a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b03e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	0151      	lsls	r1, r2, #5
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	440a      	add	r2, r1
 800b056:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b05a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b05e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	f003 030f 	and.w	r3, r3, #15
 800b070:	2101      	movs	r1, #1
 800b072:	fa01 f303 	lsl.w	r3, r1, r3
 800b076:	b29b      	uxth	r3, r3
 800b078:	43db      	mvns	r3, r3
 800b07a:	68f9      	ldr	r1, [r7, #12]
 800b07c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b080:	4013      	ands	r3, r2
 800b082:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b08a:	69da      	ldr	r2, [r3, #28]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	f003 030f 	and.w	r3, r3, #15
 800b094:	2101      	movs	r1, #1
 800b096:	fa01 f303 	lsl.w	r3, r1, r3
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	43db      	mvns	r3, r3
 800b09e:	68f9      	ldr	r1, [r7, #12]
 800b0a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	0159      	lsls	r1, r3, #5
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	440b      	add	r3, r1
 800b0be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4b35      	ldr	r3, [pc, #212]	@ (800b19c <USB_DeactivateEndpoint+0x1b0>)
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	600b      	str	r3, [r1, #0]
 800b0ca:	e060      	b.n	800b18e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	015a      	lsls	r2, r3, #5
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0e2:	d11f      	bne.n	800b124 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	015a      	lsls	r2, r3, #5
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	0151      	lsls	r1, r2, #5
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	440a      	add	r2, r1
 800b0fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b102:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	0151      	lsls	r1, r2, #5
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	440a      	add	r2, r1
 800b11a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b11e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b122:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b12a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	f003 030f 	and.w	r3, r3, #15
 800b134:	2101      	movs	r1, #1
 800b136:	fa01 f303 	lsl.w	r3, r1, r3
 800b13a:	041b      	lsls	r3, r3, #16
 800b13c:	43db      	mvns	r3, r3
 800b13e:	68f9      	ldr	r1, [r7, #12]
 800b140:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b144:	4013      	ands	r3, r2
 800b146:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b14e:	69da      	ldr	r2, [r3, #28]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f003 030f 	and.w	r3, r3, #15
 800b158:	2101      	movs	r1, #1
 800b15a:	fa01 f303 	lsl.w	r3, r1, r3
 800b15e:	041b      	lsls	r3, r3, #16
 800b160:	43db      	mvns	r3, r3
 800b162:	68f9      	ldr	r1, [r7, #12]
 800b164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b168:	4013      	ands	r3, r2
 800b16a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	015a      	lsls	r2, r3, #5
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4413      	add	r3, r2
 800b174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	0159      	lsls	r1, r3, #5
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	440b      	add	r3, r1
 800b182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b186:	4619      	mov	r1, r3
 800b188:	4b05      	ldr	r3, [pc, #20]	@ (800b1a0 <USB_DeactivateEndpoint+0x1b4>)
 800b18a:	4013      	ands	r3, r2
 800b18c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	ec337800 	.word	0xec337800
 800b1a0:	eff37800 	.word	0xeff37800

0800b1a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08a      	sub	sp, #40	@ 0x28
 800b1a8:	af02      	add	r7, sp, #8
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	785b      	ldrb	r3, [r3, #1]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	f040 8181 	bne.w	800b4c8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d132      	bne.n	800b234 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	015a      	lsls	r2, r3, #5
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1da:	691a      	ldr	r2, [r3, #16]
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	0159      	lsls	r1, r3, #5
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	440b      	add	r3, r1
 800b1e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4ba5      	ldr	r3, [pc, #660]	@ (800b480 <USB_EPStartXfer+0x2dc>)
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	015a      	lsls	r2, r3, #5
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	0151      	lsls	r1, r2, #5
 800b202:	69fa      	ldr	r2, [r7, #28]
 800b204:	440a      	add	r2, r1
 800b206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b20a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b20e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	015a      	lsls	r2, r3, #5
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	4413      	add	r3, r2
 800b218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b21c:	691a      	ldr	r2, [r3, #16]
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	0159      	lsls	r1, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	440b      	add	r3, r1
 800b226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b22a:	4619      	mov	r1, r3
 800b22c:	4b95      	ldr	r3, [pc, #596]	@ (800b484 <USB_EPStartXfer+0x2e0>)
 800b22e:	4013      	ands	r3, r2
 800b230:	610b      	str	r3, [r1, #16]
 800b232:	e092      	b.n	800b35a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	015a      	lsls	r2, r3, #5
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	4413      	add	r3, r2
 800b23c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b240:	691a      	ldr	r2, [r3, #16]
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	0159      	lsls	r1, r3, #5
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	440b      	add	r3, r1
 800b24a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b24e:	4619      	mov	r1, r3
 800b250:	4b8c      	ldr	r3, [pc, #560]	@ (800b484 <USB_EPStartXfer+0x2e0>)
 800b252:	4013      	ands	r3, r2
 800b254:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	015a      	lsls	r2, r3, #5
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b262:	691a      	ldr	r2, [r3, #16]
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	0159      	lsls	r1, r3, #5
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	440b      	add	r3, r1
 800b26c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b270:	4619      	mov	r1, r3
 800b272:	4b83      	ldr	r3, [pc, #524]	@ (800b480 <USB_EPStartXfer+0x2dc>)
 800b274:	4013      	ands	r3, r2
 800b276:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d11a      	bne.n	800b2b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	691a      	ldr	r2, [r3, #16]
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	429a      	cmp	r2, r3
 800b288:	d903      	bls.n	800b292 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	689a      	ldr	r2, [r3, #8]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	015a      	lsls	r2, r3, #5
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	4413      	add	r3, r2
 800b29a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	0151      	lsls	r1, r2, #5
 800b2a4:	69fa      	ldr	r2, [r7, #28]
 800b2a6:	440a      	add	r2, r1
 800b2a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2b0:	6113      	str	r3, [r2, #16]
 800b2b2:	e01b      	b.n	800b2ec <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	015a      	lsls	r2, r3, #5
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2c0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	6919      	ldr	r1, [r3, #16]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	440b      	add	r3, r1
 800b2cc:	1e59      	subs	r1, r3, #1
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2d6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b2d8:	4b6b      	ldr	r3, [pc, #428]	@ (800b488 <USB_EPStartXfer+0x2e4>)
 800b2da:	400b      	ands	r3, r1
 800b2dc:	69b9      	ldr	r1, [r7, #24]
 800b2de:	0148      	lsls	r0, r1, #5
 800b2e0:	69f9      	ldr	r1, [r7, #28]
 800b2e2:	4401      	add	r1, r0
 800b2e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2f8:	691a      	ldr	r2, [r3, #16]
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b302:	69b9      	ldr	r1, [r7, #24]
 800b304:	0148      	lsls	r0, r1, #5
 800b306:	69f9      	ldr	r1, [r7, #28]
 800b308:	4401      	add	r1, r0
 800b30a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b30e:	4313      	orrs	r3, r2
 800b310:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	791b      	ldrb	r3, [r3, #4]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d11f      	bne.n	800b35a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	015a      	lsls	r2, r3, #5
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	4413      	add	r3, r2
 800b322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	69ba      	ldr	r2, [r7, #24]
 800b32a:	0151      	lsls	r1, r2, #5
 800b32c:	69fa      	ldr	r2, [r7, #28]
 800b32e:	440a      	add	r2, r1
 800b330:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b334:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b338:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	015a      	lsls	r2, r3, #5
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	4413      	add	r3, r2
 800b342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	69ba      	ldr	r2, [r7, #24]
 800b34a:	0151      	lsls	r1, r2, #5
 800b34c:	69fa      	ldr	r2, [r7, #28]
 800b34e:	440a      	add	r2, r1
 800b350:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b354:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b358:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d14b      	bne.n	800b3f8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	69db      	ldr	r3, [r3, #28]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d009      	beq.n	800b37c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b374:	461a      	mov	r2, r3
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	791b      	ldrb	r3, [r3, #4]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d128      	bne.n	800b3d6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b390:	2b00      	cmp	r3, #0
 800b392:	d110      	bne.n	800b3b6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	015a      	lsls	r2, r3, #5
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	4413      	add	r3, r2
 800b39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	69ba      	ldr	r2, [r7, #24]
 800b3a4:	0151      	lsls	r1, r2, #5
 800b3a6:	69fa      	ldr	r2, [r7, #28]
 800b3a8:	440a      	add	r2, r1
 800b3aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b3b2:	6013      	str	r3, [r2, #0]
 800b3b4:	e00f      	b.n	800b3d6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	015a      	lsls	r2, r3, #5
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	4413      	add	r3, r2
 800b3be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	69ba      	ldr	r2, [r7, #24]
 800b3c6:	0151      	lsls	r1, r2, #5
 800b3c8:	69fa      	ldr	r2, [r7, #28]
 800b3ca:	440a      	add	r2, r1
 800b3cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	015a      	lsls	r2, r3, #5
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	69ba      	ldr	r2, [r7, #24]
 800b3e6:	0151      	lsls	r1, r2, #5
 800b3e8:	69fa      	ldr	r2, [r7, #28]
 800b3ea:	440a      	add	r2, r1
 800b3ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	e16a      	b.n	800b6ce <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	015a      	lsls	r2, r3, #5
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	0151      	lsls	r1, r2, #5
 800b40a:	69fa      	ldr	r2, [r7, #28]
 800b40c:	440a      	add	r2, r1
 800b40e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b412:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b416:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	791b      	ldrb	r3, [r3, #4]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d015      	beq.n	800b44c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 8152 	beq.w	800b6ce <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	f003 030f 	and.w	r3, r3, #15
 800b43a:	2101      	movs	r1, #1
 800b43c:	fa01 f303 	lsl.w	r3, r1, r3
 800b440:	69f9      	ldr	r1, [r7, #28]
 800b442:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b446:	4313      	orrs	r3, r2
 800b448:	634b      	str	r3, [r1, #52]	@ 0x34
 800b44a:	e140      	b.n	800b6ce <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d117      	bne.n	800b48c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	69ba      	ldr	r2, [r7, #24]
 800b46c:	0151      	lsls	r1, r2, #5
 800b46e:	69fa      	ldr	r2, [r7, #28]
 800b470:	440a      	add	r2, r1
 800b472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b476:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	e016      	b.n	800b4ac <USB_EPStartXfer+0x308>
 800b47e:	bf00      	nop
 800b480:	e007ffff 	.word	0xe007ffff
 800b484:	fff80000 	.word	0xfff80000
 800b488:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	69ba      	ldr	r2, [r7, #24]
 800b49c:	0151      	lsls	r1, r2, #5
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	440a      	add	r2, r1
 800b4a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	68d9      	ldr	r1, [r3, #12]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	781a      	ldrb	r2, [r3, #0]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	b298      	uxth	r0, r3
 800b4ba:	79fb      	ldrb	r3, [r7, #7]
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	4603      	mov	r3, r0
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f000 f9b9 	bl	800b838 <USB_WritePacket>
 800b4c6:	e102      	b.n	800b6ce <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4d4:	691a      	ldr	r2, [r3, #16]
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	0159      	lsls	r1, r3, #5
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	440b      	add	r3, r1
 800b4de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4b7c      	ldr	r3, [pc, #496]	@ (800b6d8 <USB_EPStartXfer+0x534>)
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	015a      	lsls	r2, r3, #5
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4f6:	691a      	ldr	r2, [r3, #16]
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	0159      	lsls	r1, r3, #5
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	440b      	add	r3, r1
 800b500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b504:	4619      	mov	r1, r3
 800b506:	4b75      	ldr	r3, [pc, #468]	@ (800b6dc <USB_EPStartXfer+0x538>)
 800b508:	4013      	ands	r3, r2
 800b50a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d12f      	bne.n	800b572 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d003      	beq.n	800b522 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	689a      	ldr	r2, [r3, #8]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	689a      	ldr	r2, [r3, #8]
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	015a      	lsls	r2, r3, #5
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	4413      	add	r3, r2
 800b532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b536:	691a      	ldr	r2, [r3, #16]
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	6a1b      	ldr	r3, [r3, #32]
 800b53c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b540:	69b9      	ldr	r1, [r7, #24]
 800b542:	0148      	lsls	r0, r1, #5
 800b544:	69f9      	ldr	r1, [r7, #28]
 800b546:	4401      	add	r1, r0
 800b548:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b54c:	4313      	orrs	r3, r2
 800b54e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	015a      	lsls	r2, r3, #5
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	4413      	add	r3, r2
 800b558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	0151      	lsls	r1, r2, #5
 800b562:	69fa      	ldr	r2, [r7, #28]
 800b564:	440a      	add	r2, r1
 800b566:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b56a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b56e:	6113      	str	r3, [r2, #16]
 800b570:	e05f      	b.n	800b632 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d123      	bne.n	800b5c2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	015a      	lsls	r2, r3, #5
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	4413      	add	r3, r2
 800b582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b586:	691a      	ldr	r2, [r3, #16]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b590:	69b9      	ldr	r1, [r7, #24]
 800b592:	0148      	lsls	r0, r1, #5
 800b594:	69f9      	ldr	r1, [r7, #28]
 800b596:	4401      	add	r1, r0
 800b598:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b59c:	4313      	orrs	r3, r2
 800b59e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	015a      	lsls	r2, r3, #5
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	69ba      	ldr	r2, [r7, #24]
 800b5b0:	0151      	lsls	r1, r2, #5
 800b5b2:	69fa      	ldr	r2, [r7, #28]
 800b5b4:	440a      	add	r2, r1
 800b5b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b5be:	6113      	str	r3, [r2, #16]
 800b5c0:	e037      	b.n	800b632 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	691a      	ldr	r2, [r3, #16]
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	1e5a      	subs	r2, r3, #1
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	8afa      	ldrh	r2, [r7, #22]
 800b5de:	fb03 f202 	mul.w	r2, r3, r2
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	015a      	lsls	r2, r3, #5
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5f2:	691a      	ldr	r2, [r3, #16]
 800b5f4:	8afb      	ldrh	r3, [r7, #22]
 800b5f6:	04d9      	lsls	r1, r3, #19
 800b5f8:	4b39      	ldr	r3, [pc, #228]	@ (800b6e0 <USB_EPStartXfer+0x53c>)
 800b5fa:	400b      	ands	r3, r1
 800b5fc:	69b9      	ldr	r1, [r7, #24]
 800b5fe:	0148      	lsls	r0, r1, #5
 800b600:	69f9      	ldr	r1, [r7, #28]
 800b602:	4401      	add	r1, r0
 800b604:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b608:	4313      	orrs	r3, r2
 800b60a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	015a      	lsls	r2, r3, #5
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	4413      	add	r3, r2
 800b614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b618:	691a      	ldr	r2, [r3, #16]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b622:	69b9      	ldr	r1, [r7, #24]
 800b624:	0148      	lsls	r0, r1, #5
 800b626:	69f9      	ldr	r1, [r7, #28]
 800b628:	4401      	add	r1, r0
 800b62a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b62e:	4313      	orrs	r3, r2
 800b630:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b632:	79fb      	ldrb	r3, [r7, #7]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d10d      	bne.n	800b654 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d009      	beq.n	800b654 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	68d9      	ldr	r1, [r3, #12]
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b650:	460a      	mov	r2, r1
 800b652:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	791b      	ldrb	r3, [r3, #4]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d128      	bne.n	800b6ae <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d110      	bne.n	800b68e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	69ba      	ldr	r2, [r7, #24]
 800b67c:	0151      	lsls	r1, r2, #5
 800b67e:	69fa      	ldr	r2, [r7, #28]
 800b680:	440a      	add	r2, r1
 800b682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b686:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b68a:	6013      	str	r3, [r2, #0]
 800b68c:	e00f      	b.n	800b6ae <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	4413      	add	r3, r2
 800b696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	69ba      	ldr	r2, [r7, #24]
 800b69e:	0151      	lsls	r1, r2, #5
 800b6a0:	69fa      	ldr	r2, [r7, #28]
 800b6a2:	440a      	add	r2, r1
 800b6a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6ac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	015a      	lsls	r2, r3, #5
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	69ba      	ldr	r2, [r7, #24]
 800b6be:	0151      	lsls	r1, r2, #5
 800b6c0:	69fa      	ldr	r2, [r7, #28]
 800b6c2:	440a      	add	r2, r1
 800b6c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b6cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3720      	adds	r7, #32
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	fff80000 	.word	0xfff80000
 800b6dc:	e007ffff 	.word	0xe007ffff
 800b6e0:	1ff80000 	.word	0x1ff80000

0800b6e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d14a      	bne.n	800b798 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	015a      	lsls	r2, r3, #5
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b716:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b71a:	f040 8086 	bne.w	800b82a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	015a      	lsls	r2, r3, #5
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	4413      	add	r3, r2
 800b728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	7812      	ldrb	r2, [r2, #0]
 800b732:	0151      	lsls	r1, r2, #5
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	440a      	add	r2, r1
 800b738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b73c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b740:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	015a      	lsls	r2, r3, #5
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	4413      	add	r3, r2
 800b74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	7812      	ldrb	r2, [r2, #0]
 800b756:	0151      	lsls	r1, r2, #5
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	440a      	add	r2, r1
 800b75c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b760:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b764:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3301      	adds	r3, #1
 800b76a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b772:	4293      	cmp	r3, r2
 800b774:	d902      	bls.n	800b77c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b776:	2301      	movs	r3, #1
 800b778:	75fb      	strb	r3, [r7, #23]
          break;
 800b77a:	e056      	b.n	800b82a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b794:	d0e7      	beq.n	800b766 <USB_EPStopXfer+0x82>
 800b796:	e048      	b.n	800b82a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7b0:	d13b      	bne.n	800b82a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	7812      	ldrb	r2, [r2, #0]
 800b7c6:	0151      	lsls	r1, r2, #5
 800b7c8:	693a      	ldr	r2, [r7, #16]
 800b7ca:	440a      	add	r2, r1
 800b7cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b7d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	015a      	lsls	r2, r3, #5
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	4413      	add	r3, r2
 800b7e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	7812      	ldrb	r2, [r2, #0]
 800b7ea:	0151      	lsls	r1, r2, #5
 800b7ec:	693a      	ldr	r2, [r7, #16]
 800b7ee:	440a      	add	r2, r1
 800b7f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b7f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b806:	4293      	cmp	r3, r2
 800b808:	d902      	bls.n	800b810 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	75fb      	strb	r3, [r7, #23]
          break;
 800b80e:	e00c      	b.n	800b82a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	015a      	lsls	r2, r3, #5
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	4413      	add	r3, r2
 800b81a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b828:	d0e7      	beq.n	800b7fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	371c      	adds	r7, #28
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b838:	b480      	push	{r7}
 800b83a:	b089      	sub	sp, #36	@ 0x24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	4611      	mov	r1, r2
 800b844:	461a      	mov	r2, r3
 800b846:	460b      	mov	r3, r1
 800b848:	71fb      	strb	r3, [r7, #7]
 800b84a:	4613      	mov	r3, r2
 800b84c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d123      	bne.n	800b8a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b85e:	88bb      	ldrh	r3, [r7, #4]
 800b860:	3303      	adds	r3, #3
 800b862:	089b      	lsrs	r3, r3, #2
 800b864:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b866:	2300      	movs	r3, #0
 800b868:	61bb      	str	r3, [r7, #24]
 800b86a:	e018      	b.n	800b89e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b86c:	79fb      	ldrb	r3, [r7, #7]
 800b86e:	031a      	lsls	r2, r3, #12
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	4413      	add	r3, r2
 800b874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b878:	461a      	mov	r2, r3
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	3301      	adds	r3, #1
 800b884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	3301      	adds	r3, #1
 800b88a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	3301      	adds	r3, #1
 800b890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	3301      	adds	r3, #1
 800b896:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	3301      	adds	r3, #1
 800b89c:	61bb      	str	r3, [r7, #24]
 800b89e:	69ba      	ldr	r2, [r7, #24]
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d3e2      	bcc.n	800b86c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3724      	adds	r7, #36	@ 0x24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b08b      	sub	sp, #44	@ 0x2c
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	4613      	mov	r3, r2
 800b8c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b8ca:	88fb      	ldrh	r3, [r7, #6]
 800b8cc:	089b      	lsrs	r3, r3, #2
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b8d2:	88fb      	ldrh	r3, [r7, #6]
 800b8d4:	f003 0303 	and.w	r3, r3, #3
 800b8d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b8da:	2300      	movs	r3, #0
 800b8dc:	623b      	str	r3, [r7, #32]
 800b8de:	e014      	b.n	800b90a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b900:	3301      	adds	r3, #1
 800b902:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b904:	6a3b      	ldr	r3, [r7, #32]
 800b906:	3301      	adds	r3, #1
 800b908:	623b      	str	r3, [r7, #32]
 800b90a:	6a3a      	ldr	r2, [r7, #32]
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d3e6      	bcc.n	800b8e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b912:	8bfb      	ldrh	r3, [r7, #30]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d01e      	beq.n	800b956 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b918:	2300      	movs	r3, #0
 800b91a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b922:	461a      	mov	r2, r3
 800b924:	f107 0310 	add.w	r3, r7, #16
 800b928:	6812      	ldr	r2, [r2, #0]
 800b92a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b92c:	693a      	ldr	r2, [r7, #16]
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	b2db      	uxtb	r3, r3
 800b932:	00db      	lsls	r3, r3, #3
 800b934:	fa22 f303 	lsr.w	r3, r2, r3
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93c:	701a      	strb	r2, [r3, #0]
      i++;
 800b93e:	6a3b      	ldr	r3, [r7, #32]
 800b940:	3301      	adds	r3, #1
 800b942:	623b      	str	r3, [r7, #32]
      pDest++;
 800b944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b946:	3301      	adds	r3, #1
 800b948:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b94a:	8bfb      	ldrh	r3, [r7, #30]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b950:	8bfb      	ldrh	r3, [r7, #30]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1ea      	bne.n	800b92c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b958:	4618      	mov	r0, r3
 800b95a:	372c      	adds	r7, #44	@ 0x2c
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	785b      	ldrb	r3, [r3, #1]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d12c      	bne.n	800b9da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	015a      	lsls	r2, r3, #5
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	4413      	add	r3, r2
 800b988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	db12      	blt.n	800b9b8 <USB_EPSetStall+0x54>
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00f      	beq.n	800b9b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	015a      	lsls	r2, r3, #5
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	0151      	lsls	r1, r2, #5
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	440a      	add	r2, r1
 800b9ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b9b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	015a      	lsls	r2, r3, #5
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	4413      	add	r3, r2
 800b9c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	0151      	lsls	r1, r2, #5
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	440a      	add	r2, r1
 800b9ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	e02b      	b.n	800ba32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	015a      	lsls	r2, r3, #5
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	db12      	blt.n	800ba12 <USB_EPSetStall+0xae>
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00f      	beq.n	800ba12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	015a      	lsls	r2, r3, #5
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	0151      	lsls	r1, r2, #5
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	440a      	add	r2, r1
 800ba08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ba10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	015a      	lsls	r2, r3, #5
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	4413      	add	r3, r2
 800ba1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	0151      	lsls	r1, r2, #5
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	440a      	add	r2, r1
 800ba28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ba30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b085      	sub	sp, #20
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	785b      	ldrb	r3, [r3, #1]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d128      	bne.n	800baae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	015a      	lsls	r2, r3, #5
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	4413      	add	r3, r2
 800ba64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	0151      	lsls	r1, r2, #5
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	440a      	add	r2, r1
 800ba72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ba7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	791b      	ldrb	r3, [r3, #4]
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d003      	beq.n	800ba8c <USB_EPClearStall+0x4c>
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	791b      	ldrb	r3, [r3, #4]
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d138      	bne.n	800bafe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	0151      	lsls	r1, r2, #5
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	440a      	add	r2, r1
 800baa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800baa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	e027      	b.n	800bafe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	015a      	lsls	r2, r3, #5
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	4413      	add	r3, r2
 800bab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	0151      	lsls	r1, r2, #5
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	440a      	add	r2, r1
 800bac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bac8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bacc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	791b      	ldrb	r3, [r3, #4]
 800bad2:	2b03      	cmp	r3, #3
 800bad4:	d003      	beq.n	800bade <USB_EPClearStall+0x9e>
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	791b      	ldrb	r3, [r3, #4]
 800bada:	2b02      	cmp	r3, #2
 800badc:	d10f      	bne.n	800bafe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	015a      	lsls	r2, r3, #5
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	4413      	add	r3, r2
 800bae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	0151      	lsls	r1, r2, #5
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	440a      	add	r2, r1
 800baf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800baf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bafc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	460b      	mov	r3, r1
 800bb16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bb2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	78fb      	ldrb	r3, [r7, #3]
 800bb3a:	011b      	lsls	r3, r3, #4
 800bb3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bb40:	68f9      	ldr	r1, [r7, #12]
 800bb42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb46:	4313      	orrs	r3, r2
 800bb48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bb72:	f023 0303 	bic.w	r3, r3, #3
 800bb76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb86:	f023 0302 	bic.w	r3, r3, #2
 800bb8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b085      	sub	sp, #20
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bbb4:	f023 0303 	bic.w	r3, r3, #3
 800bbb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbc8:	f043 0302 	orr.w	r3, r3, #2
 800bbcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	695b      	ldr	r3, [r3, #20]
 800bbe8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3714      	adds	r7, #20
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc02:	b480      	push	{r7}
 800bc04:	b085      	sub	sp, #20
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc1e:	69db      	ldr	r3, [r3, #28]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	4013      	ands	r3, r2
 800bc24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	0c1b      	lsrs	r3, r3, #16
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr

0800bc36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc36:	b480      	push	{r7}
 800bc38:	b085      	sub	sp, #20
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	4013      	ands	r3, r2
 800bc58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	b29b      	uxth	r3, r3
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3714      	adds	r7, #20
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b085      	sub	sp, #20
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	460b      	mov	r3, r1
 800bc74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bc7a:	78fb      	ldrb	r3, [r7, #3]
 800bc7c:	015a      	lsls	r2, r3, #5
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	4413      	add	r3, r2
 800bc82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	4013      	ands	r3, r2
 800bc96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc98:	68bb      	ldr	r3, [r7, #8]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b087      	sub	sp, #28
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bcca:	78fb      	ldrb	r3, [r7, #3]
 800bccc:	f003 030f 	and.w	r3, r3, #15
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd6:	01db      	lsls	r3, r3, #7
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bcf4:	68bb      	ldr	r3, [r7, #8]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	371c      	adds	r7, #28
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	f003 0301 	and.w	r3, r3, #1
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	370c      	adds	r7, #12
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
	...

0800bd20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4b09      	ldr	r3, [pc, #36]	@ (800bd64 <USB_ActivateSetup+0x44>)
 800bd3e:	4013      	ands	r3, r2
 800bd40:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	fffff800 	.word	0xfffff800

0800bd68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	460b      	mov	r3, r1
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	333c      	adds	r3, #60	@ 0x3c
 800bd7e:	3304      	adds	r3, #4
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	4a26      	ldr	r2, [pc, #152]	@ (800be20 <USB_EP0_OutStart+0xb8>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d90a      	bls.n	800bda2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd9c:	d101      	bne.n	800bda2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e037      	b.n	800be12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bda8:	461a      	mov	r2, r3
 800bdaa:	2300      	movs	r3, #0
 800bdac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bdc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdd0:	f043 0318 	orr.w	r3, r3, #24
 800bdd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bde4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bde8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bdea:	7afb      	ldrb	r3, [r7, #11]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d10f      	bne.n	800be10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be0a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800be0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	4f54300a 	.word	0x4f54300a

0800be24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be2c:	2300      	movs	r3, #0
 800be2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	3301      	adds	r3, #1
 800be34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be3c:	d901      	bls.n	800be42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be3e:	2303      	movs	r3, #3
 800be40:	e01b      	b.n	800be7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	daf2      	bge.n	800be30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be4a:	2300      	movs	r3, #0
 800be4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	f043 0201 	orr.w	r2, r3, #1
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	3301      	adds	r3, #1
 800be5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be66:	d901      	bls.n	800be6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be68:	2303      	movs	r3, #3
 800be6a:	e006      	b.n	800be7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	2b01      	cmp	r3, #1
 800be76:	d0f0      	beq.n	800be5a <USB_CoreReset+0x36>

  return HAL_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
	...

0800be88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800be98:	f005 fa8e 	bl	80113b8 <USBD_static_malloc>
 800be9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d109      	bne.n	800beb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	32b0      	adds	r2, #176	@ 0xb0
 800beae:	2100      	movs	r1, #0
 800beb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800beb4:	2302      	movs	r3, #2
 800beb6:	e0d4      	b.n	800c062 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800beb8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bebc:	2100      	movs	r1, #0
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	f006 fb7b 	bl	80125ba <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	32b0      	adds	r2, #176	@ 0xb0
 800bece:	68f9      	ldr	r1, [r7, #12]
 800bed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	32b0      	adds	r2, #176	@ 0xb0
 800bede:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	7c1b      	ldrb	r3, [r3, #16]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d138      	bne.n	800bf62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bef0:	4b5e      	ldr	r3, [pc, #376]	@ (800c06c <USBD_CDC_Init+0x1e4>)
 800bef2:	7819      	ldrb	r1, [r3, #0]
 800bef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bef8:	2202      	movs	r2, #2
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f005 f939 	bl	8011172 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf00:	4b5a      	ldr	r3, [pc, #360]	@ (800c06c <USBD_CDC_Init+0x1e4>)
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	f003 020f 	and.w	r2, r3, #15
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4413      	add	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	440b      	add	r3, r1
 800bf14:	3324      	adds	r3, #36	@ 0x24
 800bf16:	2201      	movs	r2, #1
 800bf18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf1a:	4b55      	ldr	r3, [pc, #340]	@ (800c070 <USBD_CDC_Init+0x1e8>)
 800bf1c:	7819      	ldrb	r1, [r3, #0]
 800bf1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf22:	2202      	movs	r2, #2
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f005 f924 	bl	8011172 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf2a:	4b51      	ldr	r3, [pc, #324]	@ (800c070 <USBD_CDC_Init+0x1e8>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	f003 020f 	and.w	r2, r3, #15
 800bf32:	6879      	ldr	r1, [r7, #4]
 800bf34:	4613      	mov	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	440b      	add	r3, r1
 800bf3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bf42:	2201      	movs	r2, #1
 800bf44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bf46:	4b4b      	ldr	r3, [pc, #300]	@ (800c074 <USBD_CDC_Init+0x1ec>)
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	f003 020f 	and.w	r2, r3, #15
 800bf4e:	6879      	ldr	r1, [r7, #4]
 800bf50:	4613      	mov	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	440b      	add	r3, r1
 800bf5a:	3326      	adds	r3, #38	@ 0x26
 800bf5c:	2210      	movs	r2, #16
 800bf5e:	801a      	strh	r2, [r3, #0]
 800bf60:	e035      	b.n	800bfce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf62:	4b42      	ldr	r3, [pc, #264]	@ (800c06c <USBD_CDC_Init+0x1e4>)
 800bf64:	7819      	ldrb	r1, [r3, #0]
 800bf66:	2340      	movs	r3, #64	@ 0x40
 800bf68:	2202      	movs	r2, #2
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f005 f901 	bl	8011172 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf70:	4b3e      	ldr	r3, [pc, #248]	@ (800c06c <USBD_CDC_Init+0x1e4>)
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	f003 020f 	and.w	r2, r3, #15
 800bf78:	6879      	ldr	r1, [r7, #4]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4413      	add	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	440b      	add	r3, r1
 800bf84:	3324      	adds	r3, #36	@ 0x24
 800bf86:	2201      	movs	r2, #1
 800bf88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf8a:	4b39      	ldr	r3, [pc, #228]	@ (800c070 <USBD_CDC_Init+0x1e8>)
 800bf8c:	7819      	ldrb	r1, [r3, #0]
 800bf8e:	2340      	movs	r3, #64	@ 0x40
 800bf90:	2202      	movs	r2, #2
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f005 f8ed 	bl	8011172 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf98:	4b35      	ldr	r3, [pc, #212]	@ (800c070 <USBD_CDC_Init+0x1e8>)
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	f003 020f 	and.w	r2, r3, #15
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	440b      	add	r3, r1
 800bfac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bfb4:	4b2f      	ldr	r3, [pc, #188]	@ (800c074 <USBD_CDC_Init+0x1ec>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	f003 020f 	and.w	r2, r3, #15
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	440b      	add	r3, r1
 800bfc8:	3326      	adds	r3, #38	@ 0x26
 800bfca:	2210      	movs	r2, #16
 800bfcc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bfce:	4b29      	ldr	r3, [pc, #164]	@ (800c074 <USBD_CDC_Init+0x1ec>)
 800bfd0:	7819      	ldrb	r1, [r3, #0]
 800bfd2:	2308      	movs	r3, #8
 800bfd4:	2203      	movs	r2, #3
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f005 f8cb 	bl	8011172 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bfdc:	4b25      	ldr	r3, [pc, #148]	@ (800c074 <USBD_CDC_Init+0x1ec>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	f003 020f 	and.w	r2, r3, #15
 800bfe4:	6879      	ldr	r1, [r7, #4]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	440b      	add	r3, r1
 800bff0:	3324      	adds	r3, #36	@ 0x24
 800bff2:	2201      	movs	r2, #1
 800bff4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	33b0      	adds	r3, #176	@ 0xb0
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d101      	bne.n	800c030 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c02c:	2302      	movs	r3, #2
 800c02e:	e018      	b.n	800c062 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	7c1b      	ldrb	r3, [r3, #16]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c038:	4b0d      	ldr	r3, [pc, #52]	@ (800c070 <USBD_CDC_Init+0x1e8>)
 800c03a:	7819      	ldrb	r1, [r3, #0]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c042:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f005 f982 	bl	8011350 <USBD_LL_PrepareReceive>
 800c04c:	e008      	b.n	800c060 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c04e:	4b08      	ldr	r3, [pc, #32]	@ (800c070 <USBD_CDC_Init+0x1e8>)
 800c050:	7819      	ldrb	r1, [r3, #0]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c058:	2340      	movs	r3, #64	@ 0x40
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f005 f978 	bl	8011350 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	2400008f 	.word	0x2400008f
 800c070:	24000090 	.word	0x24000090
 800c074:	24000091 	.word	0x24000091

0800c078 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c084:	4b3a      	ldr	r3, [pc, #232]	@ (800c170 <USBD_CDC_DeInit+0xf8>)
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	4619      	mov	r1, r3
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f005 f897 	bl	80111be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c090:	4b37      	ldr	r3, [pc, #220]	@ (800c170 <USBD_CDC_DeInit+0xf8>)
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	f003 020f 	and.w	r2, r3, #15
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	4613      	mov	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	440b      	add	r3, r1
 800c0a4:	3324      	adds	r3, #36	@ 0x24
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c0aa:	4b32      	ldr	r3, [pc, #200]	@ (800c174 <USBD_CDC_DeInit+0xfc>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f005 f884 	bl	80111be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c0b6:	4b2f      	ldr	r3, [pc, #188]	@ (800c174 <USBD_CDC_DeInit+0xfc>)
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	f003 020f 	and.w	r2, r3, #15
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	440b      	add	r3, r1
 800c0ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c0d2:	4b29      	ldr	r3, [pc, #164]	@ (800c178 <USBD_CDC_DeInit+0x100>)
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f005 f870 	bl	80111be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c0de:	4b26      	ldr	r3, [pc, #152]	@ (800c178 <USBD_CDC_DeInit+0x100>)
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	f003 020f 	and.w	r2, r3, #15
 800c0e6:	6879      	ldr	r1, [r7, #4]
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	4413      	add	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	440b      	add	r3, r1
 800c0f2:	3324      	adds	r3, #36	@ 0x24
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c0f8:	4b1f      	ldr	r3, [pc, #124]	@ (800c178 <USBD_CDC_DeInit+0x100>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	f003 020f 	and.w	r2, r3, #15
 800c100:	6879      	ldr	r1, [r7, #4]
 800c102:	4613      	mov	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	440b      	add	r3, r1
 800c10c:	3326      	adds	r3, #38	@ 0x26
 800c10e:	2200      	movs	r2, #0
 800c110:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	32b0      	adds	r2, #176	@ 0xb0
 800c11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d01f      	beq.n	800c164 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	33b0      	adds	r3, #176	@ 0xb0
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	32b0      	adds	r2, #176	@ 0xb0
 800c142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c146:	4618      	mov	r0, r3
 800c148:	f005 f944 	bl	80113d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	32b0      	adds	r2, #176	@ 0xb0
 800c156:	2100      	movs	r1, #0
 800c158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c164:	2300      	movs	r3, #0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	2400008f 	.word	0x2400008f
 800c174:	24000090 	.word	0x24000090
 800c178:	24000091 	.word	0x24000091

0800c17c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	32b0      	adds	r2, #176	@ 0xb0
 800c190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c194:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c196:	2300      	movs	r3, #0
 800c198:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c19a:	2300      	movs	r3, #0
 800c19c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d101      	bne.n	800c1ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	e0bf      	b.n	800c32c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d050      	beq.n	800c25a <USBD_CDC_Setup+0xde>
 800c1b8:	2b20      	cmp	r3, #32
 800c1ba:	f040 80af 	bne.w	800c31c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	88db      	ldrh	r3, [r3, #6]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d03a      	beq.n	800c23c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	b25b      	sxtb	r3, r3
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	da1b      	bge.n	800c208 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	33b0      	adds	r3, #176	@ 0xb0
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	683a      	ldr	r2, [r7, #0]
 800c1e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c1e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1e8:	683a      	ldr	r2, [r7, #0]
 800c1ea:	88d2      	ldrh	r2, [r2, #6]
 800c1ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	88db      	ldrh	r3, [r3, #6]
 800c1f2:	2b07      	cmp	r3, #7
 800c1f4:	bf28      	it	cs
 800c1f6:	2307      	movcs	r3, #7
 800c1f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	89fa      	ldrh	r2, [r7, #14]
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f001 fd7d 	bl	800dd00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c206:	e090      	b.n	800c32a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	785a      	ldrb	r2, [r3, #1]
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	88db      	ldrh	r3, [r3, #6]
 800c216:	2b3f      	cmp	r3, #63	@ 0x3f
 800c218:	d803      	bhi.n	800c222 <USBD_CDC_Setup+0xa6>
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	88db      	ldrh	r3, [r3, #6]
 800c21e:	b2da      	uxtb	r2, r3
 800c220:	e000      	b.n	800c224 <USBD_CDC_Setup+0xa8>
 800c222:	2240      	movs	r2, #64	@ 0x40
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c22a:	6939      	ldr	r1, [r7, #16]
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c232:	461a      	mov	r2, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f001 fd8f 	bl	800dd58 <USBD_CtlPrepareRx>
      break;
 800c23a:	e076      	b.n	800c32a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	33b0      	adds	r3, #176	@ 0xb0
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	7850      	ldrb	r0, [r2, #1]
 800c252:	2200      	movs	r2, #0
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	4798      	blx	r3
      break;
 800c258:	e067      	b.n	800c32a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	785b      	ldrb	r3, [r3, #1]
 800c25e:	2b0b      	cmp	r3, #11
 800c260:	d851      	bhi.n	800c306 <USBD_CDC_Setup+0x18a>
 800c262:	a201      	add	r2, pc, #4	@ (adr r2, 800c268 <USBD_CDC_Setup+0xec>)
 800c264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c268:	0800c299 	.word	0x0800c299
 800c26c:	0800c315 	.word	0x0800c315
 800c270:	0800c307 	.word	0x0800c307
 800c274:	0800c307 	.word	0x0800c307
 800c278:	0800c307 	.word	0x0800c307
 800c27c:	0800c307 	.word	0x0800c307
 800c280:	0800c307 	.word	0x0800c307
 800c284:	0800c307 	.word	0x0800c307
 800c288:	0800c307 	.word	0x0800c307
 800c28c:	0800c307 	.word	0x0800c307
 800c290:	0800c2c3 	.word	0x0800c2c3
 800c294:	0800c2ed 	.word	0x0800c2ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b03      	cmp	r3, #3
 800c2a2:	d107      	bne.n	800c2b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c2a4:	f107 030a 	add.w	r3, r7, #10
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f001 fd27 	bl	800dd00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2b2:	e032      	b.n	800c31a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f001 fca5 	bl	800dc06 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2bc:	2303      	movs	r3, #3
 800c2be:	75fb      	strb	r3, [r7, #23]
          break;
 800c2c0:	e02b      	b.n	800c31a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b03      	cmp	r3, #3
 800c2cc:	d107      	bne.n	800c2de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c2ce:	f107 030d 	add.w	r3, r7, #13
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f001 fd12 	bl	800dd00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2dc:	e01d      	b.n	800c31a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f001 fc90 	bl	800dc06 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	75fb      	strb	r3, [r7, #23]
          break;
 800c2ea:	e016      	b.n	800c31a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b03      	cmp	r3, #3
 800c2f6:	d00f      	beq.n	800c318 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f001 fc83 	bl	800dc06 <USBD_CtlError>
            ret = USBD_FAIL;
 800c300:	2303      	movs	r3, #3
 800c302:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c304:	e008      	b.n	800c318 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f001 fc7c 	bl	800dc06 <USBD_CtlError>
          ret = USBD_FAIL;
 800c30e:	2303      	movs	r3, #3
 800c310:	75fb      	strb	r3, [r7, #23]
          break;
 800c312:	e002      	b.n	800c31a <USBD_CDC_Setup+0x19e>
          break;
 800c314:	bf00      	nop
 800c316:	e008      	b.n	800c32a <USBD_CDC_Setup+0x1ae>
          break;
 800c318:	bf00      	nop
      }
      break;
 800c31a:	e006      	b.n	800c32a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f001 fc71 	bl	800dc06 <USBD_CtlError>
      ret = USBD_FAIL;
 800c324:	2303      	movs	r3, #3
 800c326:	75fb      	strb	r3, [r7, #23]
      break;
 800c328:	bf00      	nop
  }

  return (uint8_t)ret;
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3718      	adds	r7, #24
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c346:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	32b0      	adds	r2, #176	@ 0xb0
 800c352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d101      	bne.n	800c35e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c35a:	2303      	movs	r3, #3
 800c35c:	e065      	b.n	800c42a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	32b0      	adds	r2, #176	@ 0xb0
 800c368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c36e:	78fb      	ldrb	r3, [r7, #3]
 800c370:	f003 020f 	and.w	r2, r3, #15
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	440b      	add	r3, r1
 800c380:	3318      	adds	r3, #24
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d02f      	beq.n	800c3e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c388:	78fb      	ldrb	r3, [r7, #3]
 800c38a:	f003 020f 	and.w	r2, r3, #15
 800c38e:	6879      	ldr	r1, [r7, #4]
 800c390:	4613      	mov	r3, r2
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	4413      	add	r3, r2
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	440b      	add	r3, r1
 800c39a:	3318      	adds	r3, #24
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	78fb      	ldrb	r3, [r7, #3]
 800c3a0:	f003 010f 	and.w	r1, r3, #15
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	00db      	lsls	r3, r3, #3
 800c3aa:	440b      	add	r3, r1
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	4403      	add	r3, r0
 800c3b0:	331c      	adds	r3, #28
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800c3b8:	fb01 f303 	mul.w	r3, r1, r3
 800c3bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d112      	bne.n	800c3e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c3c2:	78fb      	ldrb	r3, [r7, #3]
 800c3c4:	f003 020f 	and.w	r2, r3, #15
 800c3c8:	6879      	ldr	r1, [r7, #4]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	440b      	add	r3, r1
 800c3d4:	3318      	adds	r3, #24
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c3da:	78f9      	ldrb	r1, [r7, #3]
 800c3dc:	2300      	movs	r3, #0
 800c3de:	2200      	movs	r2, #0
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f004 ff94 	bl	801130e <USBD_LL_Transmit>
 800c3e6:	e01f      	b.n	800c428 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	33b0      	adds	r3, #176	@ 0xb0
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d010      	beq.n	800c428 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	33b0      	adds	r3, #176	@ 0xb0
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	4413      	add	r3, r2
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c424:	78fa      	ldrb	r2, [r7, #3]
 800c426:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	460b      	mov	r3, r1
 800c43c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	32b0      	adds	r2, #176	@ 0xb0
 800c448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	32b0      	adds	r2, #176	@ 0xb0
 800c458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c460:	2303      	movs	r3, #3
 800c462:	e01a      	b.n	800c49a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c464:	78fb      	ldrb	r3, [r7, #3]
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f004 ff92 	bl	8011392 <USBD_LL_GetRxDataSize>
 800c46e:	4602      	mov	r2, r0
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	33b0      	adds	r3, #176	@ 0xb0
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4413      	add	r3, r2
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c494:	4611      	mov	r1, r2
 800c496:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b084      	sub	sp, #16
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	32b0      	adds	r2, #176	@ 0xb0
 800c4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d101      	bne.n	800c4c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	e024      	b.n	800c50e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	33b0      	adds	r3, #176	@ 0xb0
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d019      	beq.n	800c50c <USBD_CDC_EP0_RxReady+0x6a>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c4de:	2bff      	cmp	r3, #255	@ 0xff
 800c4e0:	d014      	beq.n	800c50c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	33b0      	adds	r3, #176	@ 0xb0
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	4413      	add	r3, r2
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c4fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c502:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	22ff      	movs	r2, #255	@ 0xff
 800c508:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c520:	2182      	movs	r1, #130	@ 0x82
 800c522:	4818      	ldr	r0, [pc, #96]	@ (800c584 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c524:	f000 fd0f 	bl	800cf46 <USBD_GetEpDesc>
 800c528:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c52a:	2101      	movs	r1, #1
 800c52c:	4815      	ldr	r0, [pc, #84]	@ (800c584 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c52e:	f000 fd0a 	bl	800cf46 <USBD_GetEpDesc>
 800c532:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c534:	2181      	movs	r1, #129	@ 0x81
 800c536:	4813      	ldr	r0, [pc, #76]	@ (800c584 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c538:	f000 fd05 	bl	800cf46 <USBD_GetEpDesc>
 800c53c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	2210      	movs	r2, #16
 800c548:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d006      	beq.n	800c55e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	2200      	movs	r2, #0
 800c554:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c558:	711a      	strb	r2, [r3, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d006      	beq.n	800c572 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c56c:	711a      	strb	r2, [r3, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2243      	movs	r2, #67	@ 0x43
 800c576:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c578:	4b02      	ldr	r3, [pc, #8]	@ (800c584 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3718      	adds	r7, #24
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	2400004c 	.word	0x2400004c

0800c588 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c590:	2182      	movs	r1, #130	@ 0x82
 800c592:	4818      	ldr	r0, [pc, #96]	@ (800c5f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c594:	f000 fcd7 	bl	800cf46 <USBD_GetEpDesc>
 800c598:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c59a:	2101      	movs	r1, #1
 800c59c:	4815      	ldr	r0, [pc, #84]	@ (800c5f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c59e:	f000 fcd2 	bl	800cf46 <USBD_GetEpDesc>
 800c5a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5a4:	2181      	movs	r1, #129	@ 0x81
 800c5a6:	4813      	ldr	r0, [pc, #76]	@ (800c5f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5a8:	f000 fccd 	bl	800cf46 <USBD_GetEpDesc>
 800c5ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d002      	beq.n	800c5ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	2210      	movs	r2, #16
 800c5b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d006      	beq.n	800c5ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	711a      	strb	r2, [r3, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f042 0202 	orr.w	r2, r2, #2
 800c5cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d006      	beq.n	800c5e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	711a      	strb	r2, [r3, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f042 0202 	orr.w	r2, r2, #2
 800c5e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2243      	movs	r2, #67	@ 0x43
 800c5e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5e8:	4b02      	ldr	r3, [pc, #8]	@ (800c5f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3718      	adds	r7, #24
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	2400004c 	.word	0x2400004c

0800c5f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c600:	2182      	movs	r1, #130	@ 0x82
 800c602:	4818      	ldr	r0, [pc, #96]	@ (800c664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c604:	f000 fc9f 	bl	800cf46 <USBD_GetEpDesc>
 800c608:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c60a:	2101      	movs	r1, #1
 800c60c:	4815      	ldr	r0, [pc, #84]	@ (800c664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c60e:	f000 fc9a 	bl	800cf46 <USBD_GetEpDesc>
 800c612:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c614:	2181      	movs	r1, #129	@ 0x81
 800c616:	4813      	ldr	r0, [pc, #76]	@ (800c664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c618:	f000 fc95 	bl	800cf46 <USBD_GetEpDesc>
 800c61c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	2210      	movs	r2, #16
 800c628:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d006      	beq.n	800c63e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	2200      	movs	r2, #0
 800c634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c638:	711a      	strb	r2, [r3, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d006      	beq.n	800c652 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c64c:	711a      	strb	r2, [r3, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2243      	movs	r2, #67	@ 0x43
 800c656:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c658:	4b02      	ldr	r3, [pc, #8]	@ (800c664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	2400004c 	.word	0x2400004c

0800c668 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	220a      	movs	r2, #10
 800c674:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c676:	4b03      	ldr	r3, [pc, #12]	@ (800c684 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c678:	4618      	mov	r0, r3
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr
 800c684:	24000008 	.word	0x24000008

0800c688 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d101      	bne.n	800c69c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c698:	2303      	movs	r3, #3
 800c69a:	e009      	b.n	800c6b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	33b0      	adds	r3, #176	@ 0xb0
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4413      	add	r3, r2
 800c6aa:	683a      	ldr	r2, [r7, #0]
 800c6ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c6ae:	2300      	movs	r3, #0
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b087      	sub	sp, #28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	32b0      	adds	r2, #176	@ 0xb0
 800c6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d101      	bne.n	800c6e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c6de:	2303      	movs	r3, #3
 800c6e0:	e008      	b.n	800c6f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	371c      	adds	r7, #28
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	32b0      	adds	r2, #176	@ 0xb0
 800c714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c718:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d101      	bne.n	800c724 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c720:	2303      	movs	r3, #3
 800c722:	e004      	b.n	800c72e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
	...

0800c73c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	32b0      	adds	r2, #176	@ 0xb0
 800c74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c752:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	32b0      	adds	r2, #176	@ 0xb0
 800c75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d101      	bne.n	800c76a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c766:	2303      	movs	r3, #3
 800c768:	e018      	b.n	800c79c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	7c1b      	ldrb	r3, [r3, #16]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10a      	bne.n	800c788 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c772:	4b0c      	ldr	r3, [pc, #48]	@ (800c7a4 <USBD_CDC_ReceivePacket+0x68>)
 800c774:	7819      	ldrb	r1, [r3, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c77c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f004 fde5 	bl	8011350 <USBD_LL_PrepareReceive>
 800c786:	e008      	b.n	800c79a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c788:	4b06      	ldr	r3, [pc, #24]	@ (800c7a4 <USBD_CDC_ReceivePacket+0x68>)
 800c78a:	7819      	ldrb	r1, [r3, #0]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c792:	2340      	movs	r3, #64	@ 0x40
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f004 fddb 	bl	8011350 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3710      	adds	r7, #16
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	24000090 	.word	0x24000090

0800c7a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d101      	bne.n	800c7c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e01f      	b.n	800c800 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d003      	beq.n	800c7e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	79fa      	ldrb	r2, [r7, #7]
 800c7f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f004 fc51 	bl	801109c <USBD_LL_Init>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3718      	adds	r7, #24
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c812:	2300      	movs	r3, #0
 800c814:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d101      	bne.n	800c820 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c81c:	2303      	movs	r3, #3
 800c81e:	e025      	b.n	800c86c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	32ae      	adds	r2, #174	@ 0xae
 800c832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00f      	beq.n	800c85c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	32ae      	adds	r2, #174	@ 0xae
 800c846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c84c:	f107 020e 	add.w	r2, r7, #14
 800c850:	4610      	mov	r0, r2
 800c852:	4798      	blx	r3
 800c854:	4602      	mov	r2, r0
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c862:	1c5a      	adds	r2, r3, #1
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3710      	adds	r7, #16
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f004 fc5d 	bl	801113c <USBD_LL_Start>
 800c882:	4603      	mov	r3, r0
}
 800c884:	4618      	mov	r0, r3
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c894:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c896:	4618      	mov	r0, r3
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d009      	beq.n	800c8d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	78fa      	ldrb	r2, [r7, #3]
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	4798      	blx	r3
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	78fa      	ldrb	r2, [r7, #3]
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	4798      	blx	r3
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d001      	beq.n	800c904 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c900:	2303      	movs	r3, #3
 800c902:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c904:	7bfb      	ldrb	r3, [r7, #15]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b084      	sub	sp, #16
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	4618      	mov	r0, r3
 800c922:	f001 f936 	bl	800db92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2201      	movs	r2, #1
 800c92a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c934:	461a      	mov	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c942:	f003 031f 	and.w	r3, r3, #31
 800c946:	2b02      	cmp	r3, #2
 800c948:	d01a      	beq.n	800c980 <USBD_LL_SetupStage+0x72>
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d822      	bhi.n	800c994 <USBD_LL_SetupStage+0x86>
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d002      	beq.n	800c958 <USBD_LL_SetupStage+0x4a>
 800c952:	2b01      	cmp	r3, #1
 800c954:	d00a      	beq.n	800c96c <USBD_LL_SetupStage+0x5e>
 800c956:	e01d      	b.n	800c994 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fb63 	bl	800d02c <USBD_StdDevReq>
 800c966:	4603      	mov	r3, r0
 800c968:	73fb      	strb	r3, [r7, #15]
      break;
 800c96a:	e020      	b.n	800c9ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c972:	4619      	mov	r1, r3
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fbcb 	bl	800d110 <USBD_StdItfReq>
 800c97a:	4603      	mov	r3, r0
 800c97c:	73fb      	strb	r3, [r7, #15]
      break;
 800c97e:	e016      	b.n	800c9ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c986:	4619      	mov	r1, r3
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fc2d 	bl	800d1e8 <USBD_StdEPReq>
 800c98e:	4603      	mov	r3, r0
 800c990:	73fb      	strb	r3, [r7, #15]
      break;
 800c992:	e00c      	b.n	800c9ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c99a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f004 fc2a 	bl	80111fc <USBD_LL_StallEP>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c9ac:	bf00      	nop
  }

  return ret;
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	607a      	str	r2, [r7, #4]
 800c9c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c9ca:	7afb      	ldrb	r3, [r7, #11]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d16e      	bne.n	800caae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c9d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c9de:	2b03      	cmp	r3, #3
 800c9e0:	f040 8098 	bne.w	800cb14 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	689a      	ldr	r2, [r3, #8]
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d913      	bls.n	800ca18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	689a      	ldr	r2, [r3, #8]
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	1ad2      	subs	r2, r2, r3
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	68da      	ldr	r2, [r3, #12]
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	4293      	cmp	r3, r2
 800ca08:	bf28      	it	cs
 800ca0a:	4613      	movcs	r3, r2
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	6879      	ldr	r1, [r7, #4]
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f001 f9be 	bl	800dd92 <USBD_CtlContinueRx>
 800ca16:	e07d      	b.n	800cb14 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ca1e:	f003 031f 	and.w	r3, r3, #31
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d014      	beq.n	800ca50 <USBD_LL_DataOutStage+0x98>
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	d81d      	bhi.n	800ca66 <USBD_LL_DataOutStage+0xae>
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d002      	beq.n	800ca34 <USBD_LL_DataOutStage+0x7c>
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d003      	beq.n	800ca3a <USBD_LL_DataOutStage+0x82>
 800ca32:	e018      	b.n	800ca66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ca34:	2300      	movs	r3, #0
 800ca36:	75bb      	strb	r3, [r7, #22]
            break;
 800ca38:	e018      	b.n	800ca6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	4619      	mov	r1, r3
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f000 fa64 	bl	800cf12 <USBD_CoreFindIF>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	75bb      	strb	r3, [r7, #22]
            break;
 800ca4e:	e00d      	b.n	800ca6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	4619      	mov	r1, r3
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f000 fa66 	bl	800cf2c <USBD_CoreFindEP>
 800ca60:	4603      	mov	r3, r0
 800ca62:	75bb      	strb	r3, [r7, #22]
            break;
 800ca64:	e002      	b.n	800ca6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ca66:	2300      	movs	r3, #0
 800ca68:	75bb      	strb	r3, [r7, #22]
            break;
 800ca6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ca6c:	7dbb      	ldrb	r3, [r7, #22]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d119      	bne.n	800caa6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	2b03      	cmp	r3, #3
 800ca7c:	d113      	bne.n	800caa6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ca7e:	7dba      	ldrb	r2, [r7, #22]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	32ae      	adds	r2, #174	@ 0xae
 800ca84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00b      	beq.n	800caa6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ca8e:	7dba      	ldrb	r2, [r7, #22]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ca96:	7dba      	ldrb	r2, [r7, #22]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	32ae      	adds	r2, #174	@ 0xae
 800ca9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f001 f984 	bl	800ddb4 <USBD_CtlSendStatus>
 800caac:	e032      	b.n	800cb14 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800caae:	7afb      	ldrb	r3, [r7, #11]
 800cab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	4619      	mov	r1, r3
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f000 fa37 	bl	800cf2c <USBD_CoreFindEP>
 800cabe:	4603      	mov	r3, r0
 800cac0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cac2:	7dbb      	ldrb	r3, [r7, #22]
 800cac4:	2bff      	cmp	r3, #255	@ 0xff
 800cac6:	d025      	beq.n	800cb14 <USBD_LL_DataOutStage+0x15c>
 800cac8:	7dbb      	ldrb	r3, [r7, #22]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d122      	bne.n	800cb14 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b03      	cmp	r3, #3
 800cad8:	d117      	bne.n	800cb0a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cada:	7dba      	ldrb	r2, [r7, #22]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	32ae      	adds	r2, #174	@ 0xae
 800cae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae4:	699b      	ldr	r3, [r3, #24]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00f      	beq.n	800cb0a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800caea:	7dba      	ldrb	r2, [r7, #22]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800caf2:	7dba      	ldrb	r2, [r7, #22]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	32ae      	adds	r2, #174	@ 0xae
 800caf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	7afa      	ldrb	r2, [r7, #11]
 800cb00:	4611      	mov	r1, r2
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	4798      	blx	r3
 800cb06:	4603      	mov	r3, r0
 800cb08:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cb0a:	7dfb      	ldrb	r3, [r7, #23]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d001      	beq.n	800cb14 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cb10:	7dfb      	ldrb	r3, [r7, #23]
 800cb12:	e000      	b.n	800cb16 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3718      	adds	r7, #24
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b086      	sub	sp, #24
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	60f8      	str	r0, [r7, #12]
 800cb26:	460b      	mov	r3, r1
 800cb28:	607a      	str	r2, [r7, #4]
 800cb2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cb2c:	7afb      	ldrb	r3, [r7, #11]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d16f      	bne.n	800cc12 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3314      	adds	r3, #20
 800cb36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d15a      	bne.n	800cbf8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	689a      	ldr	r2, [r3, #8]
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d914      	bls.n	800cb78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	689a      	ldr	r2, [r3, #8]
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	1ad2      	subs	r2, r2, r3
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	461a      	mov	r2, r3
 800cb62:	6879      	ldr	r1, [r7, #4]
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f001 f8e6 	bl	800dd36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	2100      	movs	r1, #0
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f004 fbed 	bl	8011350 <USBD_LL_PrepareReceive>
 800cb76:	e03f      	b.n	800cbf8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	68da      	ldr	r2, [r3, #12]
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d11c      	bne.n	800cbbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	685a      	ldr	r2, [r3, #4]
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d316      	bcc.n	800cbbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d20f      	bcs.n	800cbbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2100      	movs	r1, #0
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f001 f8c7 	bl	800dd36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f004 fbca 	bl	8011350 <USBD_LL_PrepareReceive>
 800cbbc:	e01c      	b.n	800cbf8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	d10f      	bne.n	800cbea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d009      	beq.n	800cbea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbea:	2180      	movs	r1, #128	@ 0x80
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f004 fb05 	bl	80111fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f001 f8f1 	bl	800ddda <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d03a      	beq.n	800cc78 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f7ff fe42 	bl	800c88c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cc10:	e032      	b.n	800cc78 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cc12:	7afb      	ldrb	r3, [r7, #11]
 800cc14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f000 f985 	bl	800cf2c <USBD_CoreFindEP>
 800cc22:	4603      	mov	r3, r0
 800cc24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	2bff      	cmp	r3, #255	@ 0xff
 800cc2a:	d025      	beq.n	800cc78 <USBD_LL_DataInStage+0x15a>
 800cc2c:	7dfb      	ldrb	r3, [r7, #23]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d122      	bne.n	800cc78 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d11c      	bne.n	800cc78 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cc3e:	7dfa      	ldrb	r2, [r7, #23]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	32ae      	adds	r2, #174	@ 0xae
 800cc44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d014      	beq.n	800cc78 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cc4e:	7dfa      	ldrb	r2, [r7, #23]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cc56:	7dfa      	ldrb	r2, [r7, #23]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	32ae      	adds	r2, #174	@ 0xae
 800cc5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc60:	695b      	ldr	r3, [r3, #20]
 800cc62:	7afa      	ldrb	r2, [r7, #11]
 800cc64:	4611      	mov	r1, r2
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	4798      	blx	r3
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cc6e:	7dbb      	ldrb	r3, [r7, #22]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d001      	beq.n	800cc78 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cc74:	7dbb      	ldrb	r3, [r7, #22]
 800cc76:	e000      	b.n	800cc7a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3718      	adds	r7, #24
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b084      	sub	sp, #16
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2201      	movs	r2, #1
 800cc92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d014      	beq.n	800cce8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00e      	beq.n	800cce8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	6852      	ldr	r2, [r2, #4]
 800ccd6:	b2d2      	uxtb	r2, r2
 800ccd8:	4611      	mov	r1, r2
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	4798      	blx	r3
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d001      	beq.n	800cce8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cce4:	2303      	movs	r3, #3
 800cce6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cce8:	2340      	movs	r3, #64	@ 0x40
 800ccea:	2200      	movs	r2, #0
 800ccec:	2100      	movs	r1, #0
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f004 fa3f 	bl	8011172 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2240      	movs	r2, #64	@ 0x40
 800cd00:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd04:	2340      	movs	r3, #64	@ 0x40
 800cd06:	2200      	movs	r2, #0
 800cd08:	2180      	movs	r1, #128	@ 0x80
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f004 fa31 	bl	8011172 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2240      	movs	r2, #64	@ 0x40
 800cd1a:	621a      	str	r2, [r3, #32]

  return ret;
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd26:	b480      	push	{r7}
 800cd28:	b083      	sub	sp, #12
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	460b      	mov	r3, r1
 800cd30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	78fa      	ldrb	r2, [r7, #3]
 800cd36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cd38:	2300      	movs	r3, #0
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	370c      	adds	r7, #12
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cd46:	b480      	push	{r7}
 800cd48:	b083      	sub	sp, #12
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	2b04      	cmp	r3, #4
 800cd58:	d006      	beq.n	800cd68 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2204      	movs	r2, #4
 800cd6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	370c      	adds	r7, #12
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd7e:	b480      	push	{r7}
 800cd80:	b083      	sub	sp, #12
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b04      	cmp	r3, #4
 800cd90:	d106      	bne.n	800cda0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b082      	sub	sp, #8
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	d110      	bne.n	800cde4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00b      	beq.n	800cde4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdd2:	69db      	ldr	r3, [r3, #28]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d005      	beq.n	800cde4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdde:	69db      	ldr	r3, [r3, #28]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b082      	sub	sp, #8
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	32ae      	adds	r2, #174	@ 0xae
 800ce04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d101      	bne.n	800ce10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	e01c      	b.n	800ce4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	2b03      	cmp	r3, #3
 800ce1a:	d115      	bne.n	800ce48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	32ae      	adds	r2, #174	@ 0xae
 800ce26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce2a:	6a1b      	ldr	r3, [r3, #32]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00b      	beq.n	800ce48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	32ae      	adds	r2, #174	@ 0xae
 800ce3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce3e:	6a1b      	ldr	r3, [r3, #32]
 800ce40:	78fa      	ldrb	r2, [r7, #3]
 800ce42:	4611      	mov	r1, r2
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b082      	sub	sp, #8
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	32ae      	adds	r2, #174	@ 0xae
 800ce68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d101      	bne.n	800ce74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e01c      	b.n	800ceae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	2b03      	cmp	r3, #3
 800ce7e:	d115      	bne.n	800ceac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	32ae      	adds	r2, #174	@ 0xae
 800ce8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00b      	beq.n	800ceac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	32ae      	adds	r2, #174	@ 0xae
 800ce9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea4:	78fa      	ldrb	r2, [r7, #3]
 800cea6:	4611      	mov	r1, r2
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ceb6:	b480      	push	{r7}
 800ceb8:	b083      	sub	sp, #12
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cebe:	2300      	movs	r3, #0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ced4:	2300      	movs	r3, #0
 800ced6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00e      	beq.n	800cf08 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	6852      	ldr	r2, [r2, #4]
 800cef6:	b2d2      	uxtb	r2, r2
 800cef8:	4611      	mov	r1, r2
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	4798      	blx	r3
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d001      	beq.n	800cf08 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cf04:	2303      	movs	r3, #3
 800cf06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf08:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf12:	b480      	push	{r7}
 800cf14:	b083      	sub	sp, #12
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cf1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b083      	sub	sp, #12
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cf38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b086      	sub	sp, #24
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	460b      	mov	r3, r1
 800cf50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	885b      	ldrh	r3, [r3, #2]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	7812      	ldrb	r2, [r2, #0]
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d91f      	bls.n	800cfac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cf72:	e013      	b.n	800cf9c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cf74:	f107 030a 	add.w	r3, r7, #10
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6978      	ldr	r0, [r7, #20]
 800cf7c:	f000 f81b 	bl	800cfb6 <USBD_GetNextDesc>
 800cf80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	785b      	ldrb	r3, [r3, #1]
 800cf86:	2b05      	cmp	r3, #5
 800cf88:	d108      	bne.n	800cf9c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	789b      	ldrb	r3, [r3, #2]
 800cf92:	78fa      	ldrb	r2, [r7, #3]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d008      	beq.n	800cfaa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	885b      	ldrh	r3, [r3, #2]
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	897b      	ldrh	r3, [r7, #10]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d8e5      	bhi.n	800cf74 <USBD_GetEpDesc+0x2e>
 800cfa8:	e000      	b.n	800cfac <USBD_GetEpDesc+0x66>
          break;
 800cfaa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cfac:	693b      	ldr	r3, [r7, #16]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cfb6:	b480      	push	{r7}
 800cfb8:	b085      	sub	sp, #20
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	881b      	ldrh	r3, [r3, #0]
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	7812      	ldrb	r2, [r2, #0]
 800cfcc:	4413      	add	r3, r2
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	461a      	mov	r2, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4413      	add	r3, r2
 800cfde:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cfee:	b480      	push	{r7}
 800cff0:	b087      	sub	sp, #28
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	3301      	adds	r3, #1
 800d004:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d00c:	8a3b      	ldrh	r3, [r7, #16]
 800d00e:	021b      	lsls	r3, r3, #8
 800d010:	b21a      	sxth	r2, r3
 800d012:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d016:	4313      	orrs	r3, r2
 800d018:	b21b      	sxth	r3, r3
 800d01a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d01c:	89fb      	ldrh	r3, [r7, #14]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	371c      	adds	r7, #28
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
	...

0800d02c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d036:	2300      	movs	r3, #0
 800d038:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d042:	2b40      	cmp	r3, #64	@ 0x40
 800d044:	d005      	beq.n	800d052 <USBD_StdDevReq+0x26>
 800d046:	2b40      	cmp	r3, #64	@ 0x40
 800d048:	d857      	bhi.n	800d0fa <USBD_StdDevReq+0xce>
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00f      	beq.n	800d06e <USBD_StdDevReq+0x42>
 800d04e:	2b20      	cmp	r3, #32
 800d050:	d153      	bne.n	800d0fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	32ae      	adds	r2, #174	@ 0xae
 800d05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	4798      	blx	r3
 800d068:	4603      	mov	r3, r0
 800d06a:	73fb      	strb	r3, [r7, #15]
      break;
 800d06c:	e04a      	b.n	800d104 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	785b      	ldrb	r3, [r3, #1]
 800d072:	2b09      	cmp	r3, #9
 800d074:	d83b      	bhi.n	800d0ee <USBD_StdDevReq+0xc2>
 800d076:	a201      	add	r2, pc, #4	@ (adr r2, 800d07c <USBD_StdDevReq+0x50>)
 800d078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d07c:	0800d0d1 	.word	0x0800d0d1
 800d080:	0800d0e5 	.word	0x0800d0e5
 800d084:	0800d0ef 	.word	0x0800d0ef
 800d088:	0800d0db 	.word	0x0800d0db
 800d08c:	0800d0ef 	.word	0x0800d0ef
 800d090:	0800d0af 	.word	0x0800d0af
 800d094:	0800d0a5 	.word	0x0800d0a5
 800d098:	0800d0ef 	.word	0x0800d0ef
 800d09c:	0800d0c7 	.word	0x0800d0c7
 800d0a0:	0800d0b9 	.word	0x0800d0b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d0a4:	6839      	ldr	r1, [r7, #0]
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 fa3c 	bl	800d524 <USBD_GetDescriptor>
          break;
 800d0ac:	e024      	b.n	800d0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d0ae:	6839      	ldr	r1, [r7, #0]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fbcb 	bl	800d84c <USBD_SetAddress>
          break;
 800d0b6:	e01f      	b.n	800d0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d0b8:	6839      	ldr	r1, [r7, #0]
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 fc0a 	bl	800d8d4 <USBD_SetConfig>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	73fb      	strb	r3, [r7, #15]
          break;
 800d0c4:	e018      	b.n	800d0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fcad 	bl	800da28 <USBD_GetConfig>
          break;
 800d0ce:	e013      	b.n	800d0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d0d0:	6839      	ldr	r1, [r7, #0]
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 fcde 	bl	800da94 <USBD_GetStatus>
          break;
 800d0d8:	e00e      	b.n	800d0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d0da:	6839      	ldr	r1, [r7, #0]
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 fd0d 	bl	800dafc <USBD_SetFeature>
          break;
 800d0e2:	e009      	b.n	800d0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fd31 	bl	800db4e <USBD_ClrFeature>
          break;
 800d0ec:	e004      	b.n	800d0f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d0ee:	6839      	ldr	r1, [r7, #0]
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 fd88 	bl	800dc06 <USBD_CtlError>
          break;
 800d0f6:	bf00      	nop
      }
      break;
 800d0f8:	e004      	b.n	800d104 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d0fa:	6839      	ldr	r1, [r7, #0]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 fd82 	bl	800dc06 <USBD_CtlError>
      break;
 800d102:	bf00      	nop
  }

  return ret;
 800d104:	7bfb      	ldrb	r3, [r7, #15]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop

0800d110 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d126:	2b40      	cmp	r3, #64	@ 0x40
 800d128:	d005      	beq.n	800d136 <USBD_StdItfReq+0x26>
 800d12a:	2b40      	cmp	r3, #64	@ 0x40
 800d12c:	d852      	bhi.n	800d1d4 <USBD_StdItfReq+0xc4>
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d001      	beq.n	800d136 <USBD_StdItfReq+0x26>
 800d132:	2b20      	cmp	r3, #32
 800d134:	d14e      	bne.n	800d1d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	3b01      	subs	r3, #1
 800d140:	2b02      	cmp	r3, #2
 800d142:	d840      	bhi.n	800d1c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	889b      	ldrh	r3, [r3, #4]
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d836      	bhi.n	800d1bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	889b      	ldrh	r3, [r3, #4]
 800d152:	b2db      	uxtb	r3, r3
 800d154:	4619      	mov	r1, r3
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff fedb 	bl	800cf12 <USBD_CoreFindIF>
 800d15c:	4603      	mov	r3, r0
 800d15e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d160:	7bbb      	ldrb	r3, [r7, #14]
 800d162:	2bff      	cmp	r3, #255	@ 0xff
 800d164:	d01d      	beq.n	800d1a2 <USBD_StdItfReq+0x92>
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d11a      	bne.n	800d1a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d16c:	7bba      	ldrb	r2, [r7, #14]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	32ae      	adds	r2, #174	@ 0xae
 800d172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00f      	beq.n	800d19c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d17c:	7bba      	ldrb	r2, [r7, #14]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d184:	7bba      	ldrb	r2, [r7, #14]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	32ae      	adds	r2, #174	@ 0xae
 800d18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	6839      	ldr	r1, [r7, #0]
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	4798      	blx	r3
 800d196:	4603      	mov	r3, r0
 800d198:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d19a:	e004      	b.n	800d1a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d19c:	2303      	movs	r3, #3
 800d19e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d1a0:	e001      	b.n	800d1a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	88db      	ldrh	r3, [r3, #6]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d110      	bne.n	800d1d0 <USBD_StdItfReq+0xc0>
 800d1ae:	7bfb      	ldrb	r3, [r7, #15]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d10d      	bne.n	800d1d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fdfd 	bl	800ddb4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d1ba:	e009      	b.n	800d1d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d1bc:	6839      	ldr	r1, [r7, #0]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 fd21 	bl	800dc06 <USBD_CtlError>
          break;
 800d1c4:	e004      	b.n	800d1d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fd1c 	bl	800dc06 <USBD_CtlError>
          break;
 800d1ce:	e000      	b.n	800d1d2 <USBD_StdItfReq+0xc2>
          break;
 800d1d0:	bf00      	nop
      }
      break;
 800d1d2:	e004      	b.n	800d1de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 fd15 	bl	800dc06 <USBD_CtlError>
      break;
 800d1dc:	bf00      	nop
  }

  return ret;
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	889b      	ldrh	r3, [r3, #4]
 800d1fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d204:	2b40      	cmp	r3, #64	@ 0x40
 800d206:	d007      	beq.n	800d218 <USBD_StdEPReq+0x30>
 800d208:	2b40      	cmp	r3, #64	@ 0x40
 800d20a:	f200 817f 	bhi.w	800d50c <USBD_StdEPReq+0x324>
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d02a      	beq.n	800d268 <USBD_StdEPReq+0x80>
 800d212:	2b20      	cmp	r3, #32
 800d214:	f040 817a 	bne.w	800d50c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d218:	7bbb      	ldrb	r3, [r7, #14]
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff fe85 	bl	800cf2c <USBD_CoreFindEP>
 800d222:	4603      	mov	r3, r0
 800d224:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d226:	7b7b      	ldrb	r3, [r7, #13]
 800d228:	2bff      	cmp	r3, #255	@ 0xff
 800d22a:	f000 8174 	beq.w	800d516 <USBD_StdEPReq+0x32e>
 800d22e:	7b7b      	ldrb	r3, [r7, #13]
 800d230:	2b00      	cmp	r3, #0
 800d232:	f040 8170 	bne.w	800d516 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d236:	7b7a      	ldrb	r2, [r7, #13]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d23e:	7b7a      	ldrb	r2, [r7, #13]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	32ae      	adds	r2, #174	@ 0xae
 800d244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f000 8163 	beq.w	800d516 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d250:	7b7a      	ldrb	r2, [r7, #13]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	32ae      	adds	r2, #174	@ 0xae
 800d256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	6839      	ldr	r1, [r7, #0]
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	4798      	blx	r3
 800d262:	4603      	mov	r3, r0
 800d264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d266:	e156      	b.n	800d516 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	785b      	ldrb	r3, [r3, #1]
 800d26c:	2b03      	cmp	r3, #3
 800d26e:	d008      	beq.n	800d282 <USBD_StdEPReq+0x9a>
 800d270:	2b03      	cmp	r3, #3
 800d272:	f300 8145 	bgt.w	800d500 <USBD_StdEPReq+0x318>
 800d276:	2b00      	cmp	r3, #0
 800d278:	f000 809b 	beq.w	800d3b2 <USBD_StdEPReq+0x1ca>
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d03c      	beq.n	800d2fa <USBD_StdEPReq+0x112>
 800d280:	e13e      	b.n	800d500 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d002      	beq.n	800d294 <USBD_StdEPReq+0xac>
 800d28e:	2b03      	cmp	r3, #3
 800d290:	d016      	beq.n	800d2c0 <USBD_StdEPReq+0xd8>
 800d292:	e02c      	b.n	800d2ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d294:	7bbb      	ldrb	r3, [r7, #14]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00d      	beq.n	800d2b6 <USBD_StdEPReq+0xce>
 800d29a:	7bbb      	ldrb	r3, [r7, #14]
 800d29c:	2b80      	cmp	r3, #128	@ 0x80
 800d29e:	d00a      	beq.n	800d2b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2a0:	7bbb      	ldrb	r3, [r7, #14]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f003 ffa9 	bl	80111fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2aa:	2180      	movs	r1, #128	@ 0x80
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f003 ffa5 	bl	80111fc <USBD_LL_StallEP>
 800d2b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d2b4:	e020      	b.n	800d2f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 fca4 	bl	800dc06 <USBD_CtlError>
              break;
 800d2be:	e01b      	b.n	800d2f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	885b      	ldrh	r3, [r3, #2]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10e      	bne.n	800d2e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d2c8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00b      	beq.n	800d2e6 <USBD_StdEPReq+0xfe>
 800d2ce:	7bbb      	ldrb	r3, [r7, #14]
 800d2d0:	2b80      	cmp	r3, #128	@ 0x80
 800d2d2:	d008      	beq.n	800d2e6 <USBD_StdEPReq+0xfe>
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	88db      	ldrh	r3, [r3, #6]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d104      	bne.n	800d2e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2dc:	7bbb      	ldrb	r3, [r7, #14]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f003 ff8b 	bl	80111fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 fd64 	bl	800ddb4 <USBD_CtlSendStatus>

              break;
 800d2ec:	e004      	b.n	800d2f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d2ee:	6839      	ldr	r1, [r7, #0]
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fc88 	bl	800dc06 <USBD_CtlError>
              break;
 800d2f6:	bf00      	nop
          }
          break;
 800d2f8:	e107      	b.n	800d50a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d300:	b2db      	uxtb	r3, r3
 800d302:	2b02      	cmp	r3, #2
 800d304:	d002      	beq.n	800d30c <USBD_StdEPReq+0x124>
 800d306:	2b03      	cmp	r3, #3
 800d308:	d016      	beq.n	800d338 <USBD_StdEPReq+0x150>
 800d30a:	e04b      	b.n	800d3a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d30c:	7bbb      	ldrb	r3, [r7, #14]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00d      	beq.n	800d32e <USBD_StdEPReq+0x146>
 800d312:	7bbb      	ldrb	r3, [r7, #14]
 800d314:	2b80      	cmp	r3, #128	@ 0x80
 800d316:	d00a      	beq.n	800d32e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d318:	7bbb      	ldrb	r3, [r7, #14]
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f003 ff6d 	bl	80111fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d322:	2180      	movs	r1, #128	@ 0x80
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f003 ff69 	bl	80111fc <USBD_LL_StallEP>
 800d32a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d32c:	e040      	b.n	800d3b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d32e:	6839      	ldr	r1, [r7, #0]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 fc68 	bl	800dc06 <USBD_CtlError>
              break;
 800d336:	e03b      	b.n	800d3b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	885b      	ldrh	r3, [r3, #2]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d136      	bne.n	800d3ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d340:	7bbb      	ldrb	r3, [r7, #14]
 800d342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d346:	2b00      	cmp	r3, #0
 800d348:	d004      	beq.n	800d354 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d34a:	7bbb      	ldrb	r3, [r7, #14]
 800d34c:	4619      	mov	r1, r3
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f003 ff73 	bl	801123a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fd2d 	bl	800ddb4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d35a:	7bbb      	ldrb	r3, [r7, #14]
 800d35c:	4619      	mov	r1, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7ff fde4 	bl	800cf2c <USBD_CoreFindEP>
 800d364:	4603      	mov	r3, r0
 800d366:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d368:	7b7b      	ldrb	r3, [r7, #13]
 800d36a:	2bff      	cmp	r3, #255	@ 0xff
 800d36c:	d01f      	beq.n	800d3ae <USBD_StdEPReq+0x1c6>
 800d36e:	7b7b      	ldrb	r3, [r7, #13]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d11c      	bne.n	800d3ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d374:	7b7a      	ldrb	r2, [r7, #13]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d37c:	7b7a      	ldrb	r2, [r7, #13]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	32ae      	adds	r2, #174	@ 0xae
 800d382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d010      	beq.n	800d3ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d38c:	7b7a      	ldrb	r2, [r7, #13]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	32ae      	adds	r2, #174	@ 0xae
 800d392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	6839      	ldr	r1, [r7, #0]
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	4798      	blx	r3
 800d39e:	4603      	mov	r3, r0
 800d3a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d3a2:	e004      	b.n	800d3ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 fc2d 	bl	800dc06 <USBD_CtlError>
              break;
 800d3ac:	e000      	b.n	800d3b0 <USBD_StdEPReq+0x1c8>
              break;
 800d3ae:	bf00      	nop
          }
          break;
 800d3b0:	e0ab      	b.n	800d50a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	d002      	beq.n	800d3c4 <USBD_StdEPReq+0x1dc>
 800d3be:	2b03      	cmp	r3, #3
 800d3c0:	d032      	beq.n	800d428 <USBD_StdEPReq+0x240>
 800d3c2:	e097      	b.n	800d4f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3c4:	7bbb      	ldrb	r3, [r7, #14]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d007      	beq.n	800d3da <USBD_StdEPReq+0x1f2>
 800d3ca:	7bbb      	ldrb	r3, [r7, #14]
 800d3cc:	2b80      	cmp	r3, #128	@ 0x80
 800d3ce:	d004      	beq.n	800d3da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d3d0:	6839      	ldr	r1, [r7, #0]
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 fc17 	bl	800dc06 <USBD_CtlError>
                break;
 800d3d8:	e091      	b.n	800d4fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	da0b      	bge.n	800d3fa <USBD_StdEPReq+0x212>
 800d3e2:	7bbb      	ldrb	r3, [r7, #14]
 800d3e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	3310      	adds	r3, #16
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	e00b      	b.n	800d412 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3fa:	7bbb      	ldrb	r3, [r7, #14]
 800d3fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d400:	4613      	mov	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4413      	add	r3, r2
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d40c:	687a      	ldr	r2, [r7, #4]
 800d40e:	4413      	add	r3, r2
 800d410:	3304      	adds	r3, #4
 800d412:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	2200      	movs	r2, #0
 800d418:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	2202      	movs	r2, #2
 800d41e:	4619      	mov	r1, r3
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 fc6d 	bl	800dd00 <USBD_CtlSendData>
              break;
 800d426:	e06a      	b.n	800d4fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	da11      	bge.n	800d454 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d430:	7bbb      	ldrb	r3, [r7, #14]
 800d432:	f003 020f 	and.w	r2, r3, #15
 800d436:	6879      	ldr	r1, [r7, #4]
 800d438:	4613      	mov	r3, r2
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	440b      	add	r3, r1
 800d442:	3324      	adds	r3, #36	@ 0x24
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d117      	bne.n	800d47a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d44a:	6839      	ldr	r1, [r7, #0]
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 fbda 	bl	800dc06 <USBD_CtlError>
                  break;
 800d452:	e054      	b.n	800d4fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	f003 020f 	and.w	r2, r3, #15
 800d45a:	6879      	ldr	r1, [r7, #4]
 800d45c:	4613      	mov	r3, r2
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4413      	add	r3, r2
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	440b      	add	r3, r1
 800d466:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d46a:	881b      	ldrh	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d104      	bne.n	800d47a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fbc7 	bl	800dc06 <USBD_CtlError>
                  break;
 800d478:	e041      	b.n	800d4fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d47a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	da0b      	bge.n	800d49a <USBD_StdEPReq+0x2b2>
 800d482:	7bbb      	ldrb	r3, [r7, #14]
 800d484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d488:	4613      	mov	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4413      	add	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	3310      	adds	r3, #16
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	4413      	add	r3, r2
 800d496:	3304      	adds	r3, #4
 800d498:	e00b      	b.n	800d4b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d49a:	7bbb      	ldrb	r3, [r7, #14]
 800d49c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	4413      	add	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d4b4:	7bbb      	ldrb	r3, [r7, #14]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <USBD_StdEPReq+0x2d8>
 800d4ba:	7bbb      	ldrb	r3, [r7, #14]
 800d4bc:	2b80      	cmp	r3, #128	@ 0x80
 800d4be:	d103      	bne.n	800d4c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]
 800d4c6:	e00e      	b.n	800d4e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d4c8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f003 fed3 	bl	8011278 <USBD_LL_IsStallEP>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d003      	beq.n	800d4e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	e002      	b.n	800d4e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	2202      	movs	r2, #2
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 fc07 	bl	800dd00 <USBD_CtlSendData>
              break;
 800d4f2:	e004      	b.n	800d4fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fb85 	bl	800dc06 <USBD_CtlError>
              break;
 800d4fc:	bf00      	nop
          }
          break;
 800d4fe:	e004      	b.n	800d50a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d500:	6839      	ldr	r1, [r7, #0]
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 fb7f 	bl	800dc06 <USBD_CtlError>
          break;
 800d508:	bf00      	nop
      }
      break;
 800d50a:	e005      	b.n	800d518 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d50c:	6839      	ldr	r1, [r7, #0]
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 fb79 	bl	800dc06 <USBD_CtlError>
      break;
 800d514:	e000      	b.n	800d518 <USBD_StdEPReq+0x330>
      break;
 800d516:	bf00      	nop
  }

  return ret;
 800d518:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
	...

0800d524 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d52e:	2300      	movs	r3, #0
 800d530:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d532:	2300      	movs	r3, #0
 800d534:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d536:	2300      	movs	r3, #0
 800d538:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	885b      	ldrh	r3, [r3, #2]
 800d53e:	0a1b      	lsrs	r3, r3, #8
 800d540:	b29b      	uxth	r3, r3
 800d542:	3b01      	subs	r3, #1
 800d544:	2b0e      	cmp	r3, #14
 800d546:	f200 8152 	bhi.w	800d7ee <USBD_GetDescriptor+0x2ca>
 800d54a:	a201      	add	r2, pc, #4	@ (adr r2, 800d550 <USBD_GetDescriptor+0x2c>)
 800d54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d550:	0800d5c1 	.word	0x0800d5c1
 800d554:	0800d5d9 	.word	0x0800d5d9
 800d558:	0800d619 	.word	0x0800d619
 800d55c:	0800d7ef 	.word	0x0800d7ef
 800d560:	0800d7ef 	.word	0x0800d7ef
 800d564:	0800d78f 	.word	0x0800d78f
 800d568:	0800d7bb 	.word	0x0800d7bb
 800d56c:	0800d7ef 	.word	0x0800d7ef
 800d570:	0800d7ef 	.word	0x0800d7ef
 800d574:	0800d7ef 	.word	0x0800d7ef
 800d578:	0800d7ef 	.word	0x0800d7ef
 800d57c:	0800d7ef 	.word	0x0800d7ef
 800d580:	0800d7ef 	.word	0x0800d7ef
 800d584:	0800d7ef 	.word	0x0800d7ef
 800d588:	0800d58d 	.word	0x0800d58d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00b      	beq.n	800d5b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d59e:	69db      	ldr	r3, [r3, #28]
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	7c12      	ldrb	r2, [r2, #16]
 800d5a4:	f107 0108 	add.w	r1, r7, #8
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	4798      	blx	r3
 800d5ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5ae:	e126      	b.n	800d7fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 fb27 	bl	800dc06 <USBD_CtlError>
        err++;
 800d5b8:	7afb      	ldrb	r3, [r7, #11]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	72fb      	strb	r3, [r7, #11]
      break;
 800d5be:	e11e      	b.n	800d7fe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	7c12      	ldrb	r2, [r2, #16]
 800d5cc:	f107 0108 	add.w	r1, r7, #8
 800d5d0:	4610      	mov	r0, r2
 800d5d2:	4798      	blx	r3
 800d5d4:	60f8      	str	r0, [r7, #12]
      break;
 800d5d6:	e112      	b.n	800d7fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	7c1b      	ldrb	r3, [r3, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d10d      	bne.n	800d5fc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e8:	f107 0208 	add.w	r2, r7, #8
 800d5ec:	4610      	mov	r0, r2
 800d5ee:	4798      	blx	r3
 800d5f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d5fa:	e100      	b.n	800d7fe <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d604:	f107 0208 	add.w	r2, r7, #8
 800d608:	4610      	mov	r0, r2
 800d60a:	4798      	blx	r3
 800d60c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	3301      	adds	r3, #1
 800d612:	2202      	movs	r2, #2
 800d614:	701a      	strb	r2, [r3, #0]
      break;
 800d616:	e0f2      	b.n	800d7fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	885b      	ldrh	r3, [r3, #2]
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	2b05      	cmp	r3, #5
 800d620:	f200 80ac 	bhi.w	800d77c <USBD_GetDescriptor+0x258>
 800d624:	a201      	add	r2, pc, #4	@ (adr r2, 800d62c <USBD_GetDescriptor+0x108>)
 800d626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62a:	bf00      	nop
 800d62c:	0800d645 	.word	0x0800d645
 800d630:	0800d679 	.word	0x0800d679
 800d634:	0800d6ad 	.word	0x0800d6ad
 800d638:	0800d6e1 	.word	0x0800d6e1
 800d63c:	0800d715 	.word	0x0800d715
 800d640:	0800d749 	.word	0x0800d749
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00b      	beq.n	800d668 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	7c12      	ldrb	r2, [r2, #16]
 800d65c:	f107 0108 	add.w	r1, r7, #8
 800d660:	4610      	mov	r0, r2
 800d662:	4798      	blx	r3
 800d664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d666:	e091      	b.n	800d78c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d668:	6839      	ldr	r1, [r7, #0]
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 facb 	bl	800dc06 <USBD_CtlError>
            err++;
 800d670:	7afb      	ldrb	r3, [r7, #11]
 800d672:	3301      	adds	r3, #1
 800d674:	72fb      	strb	r3, [r7, #11]
          break;
 800d676:	e089      	b.n	800d78c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00b      	beq.n	800d69c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	7c12      	ldrb	r2, [r2, #16]
 800d690:	f107 0108 	add.w	r1, r7, #8
 800d694:	4610      	mov	r0, r2
 800d696:	4798      	blx	r3
 800d698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d69a:	e077      	b.n	800d78c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fab1 	bl	800dc06 <USBD_CtlError>
            err++;
 800d6a4:	7afb      	ldrb	r3, [r7, #11]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6aa:	e06f      	b.n	800d78c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00b      	beq.n	800d6d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	7c12      	ldrb	r2, [r2, #16]
 800d6c4:	f107 0108 	add.w	r1, r7, #8
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	4798      	blx	r3
 800d6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ce:	e05d      	b.n	800d78c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fa97 	bl	800dc06 <USBD_CtlError>
            err++;
 800d6d8:	7afb      	ldrb	r3, [r7, #11]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800d6de:	e055      	b.n	800d78c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00b      	beq.n	800d704 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6f2:	691b      	ldr	r3, [r3, #16]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	7c12      	ldrb	r2, [r2, #16]
 800d6f8:	f107 0108 	add.w	r1, r7, #8
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	4798      	blx	r3
 800d700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d702:	e043      	b.n	800d78c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fa7d 	bl	800dc06 <USBD_CtlError>
            err++;
 800d70c:	7afb      	ldrb	r3, [r7, #11]
 800d70e:	3301      	adds	r3, #1
 800d710:	72fb      	strb	r3, [r7, #11]
          break;
 800d712:	e03b      	b.n	800d78c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00b      	beq.n	800d738 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d726:	695b      	ldr	r3, [r3, #20]
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	7c12      	ldrb	r2, [r2, #16]
 800d72c:	f107 0108 	add.w	r1, r7, #8
 800d730:	4610      	mov	r0, r2
 800d732:	4798      	blx	r3
 800d734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d736:	e029      	b.n	800d78c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d738:	6839      	ldr	r1, [r7, #0]
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fa63 	bl	800dc06 <USBD_CtlError>
            err++;
 800d740:	7afb      	ldrb	r3, [r7, #11]
 800d742:	3301      	adds	r3, #1
 800d744:	72fb      	strb	r3, [r7, #11]
          break;
 800d746:	e021      	b.n	800d78c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d74e:	699b      	ldr	r3, [r3, #24]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00b      	beq.n	800d76c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	7c12      	ldrb	r2, [r2, #16]
 800d760:	f107 0108 	add.w	r1, r7, #8
 800d764:	4610      	mov	r0, r2
 800d766:	4798      	blx	r3
 800d768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d76a:	e00f      	b.n	800d78c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fa49 	bl	800dc06 <USBD_CtlError>
            err++;
 800d774:	7afb      	ldrb	r3, [r7, #11]
 800d776:	3301      	adds	r3, #1
 800d778:	72fb      	strb	r3, [r7, #11]
          break;
 800d77a:	e007      	b.n	800d78c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d77c:	6839      	ldr	r1, [r7, #0]
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 fa41 	bl	800dc06 <USBD_CtlError>
          err++;
 800d784:	7afb      	ldrb	r3, [r7, #11]
 800d786:	3301      	adds	r3, #1
 800d788:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d78a:	bf00      	nop
      }
      break;
 800d78c:	e037      	b.n	800d7fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	7c1b      	ldrb	r3, [r3, #16]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d109      	bne.n	800d7aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d79c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d79e:	f107 0208 	add.w	r2, r7, #8
 800d7a2:	4610      	mov	r0, r2
 800d7a4:	4798      	blx	r3
 800d7a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7a8:	e029      	b.n	800d7fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d7aa:	6839      	ldr	r1, [r7, #0]
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fa2a 	bl	800dc06 <USBD_CtlError>
        err++;
 800d7b2:	7afb      	ldrb	r3, [r7, #11]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	72fb      	strb	r3, [r7, #11]
      break;
 800d7b8:	e021      	b.n	800d7fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	7c1b      	ldrb	r3, [r3, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10d      	bne.n	800d7de <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7ca:	f107 0208 	add.w	r2, r7, #8
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	4798      	blx	r3
 800d7d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	2207      	movs	r2, #7
 800d7da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7dc:	e00f      	b.n	800d7fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fa10 	bl	800dc06 <USBD_CtlError>
        err++;
 800d7e6:	7afb      	ldrb	r3, [r7, #11]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	72fb      	strb	r3, [r7, #11]
      break;
 800d7ec:	e007      	b.n	800d7fe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d7ee:	6839      	ldr	r1, [r7, #0]
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 fa08 	bl	800dc06 <USBD_CtlError>
      err++;
 800d7f6:	7afb      	ldrb	r3, [r7, #11]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	72fb      	strb	r3, [r7, #11]
      break;
 800d7fc:	bf00      	nop
  }

  if (err != 0U)
 800d7fe:	7afb      	ldrb	r3, [r7, #11]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d11e      	bne.n	800d842 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	88db      	ldrh	r3, [r3, #6]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d016      	beq.n	800d83a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d80c:	893b      	ldrh	r3, [r7, #8]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00e      	beq.n	800d830 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	88da      	ldrh	r2, [r3, #6]
 800d816:	893b      	ldrh	r3, [r7, #8]
 800d818:	4293      	cmp	r3, r2
 800d81a:	bf28      	it	cs
 800d81c:	4613      	movcs	r3, r2
 800d81e:	b29b      	uxth	r3, r3
 800d820:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d822:	893b      	ldrh	r3, [r7, #8]
 800d824:	461a      	mov	r2, r3
 800d826:	68f9      	ldr	r1, [r7, #12]
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fa69 	bl	800dd00 <USBD_CtlSendData>
 800d82e:	e009      	b.n	800d844 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d830:	6839      	ldr	r1, [r7, #0]
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 f9e7 	bl	800dc06 <USBD_CtlError>
 800d838:	e004      	b.n	800d844 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 faba 	bl	800ddb4 <USBD_CtlSendStatus>
 800d840:	e000      	b.n	800d844 <USBD_GetDescriptor+0x320>
    return;
 800d842:	bf00      	nop
  }
}
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop

0800d84c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	889b      	ldrh	r3, [r3, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d131      	bne.n	800d8c2 <USBD_SetAddress+0x76>
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	88db      	ldrh	r3, [r3, #6]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d12d      	bne.n	800d8c2 <USBD_SetAddress+0x76>
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	885b      	ldrh	r3, [r3, #2]
 800d86a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d86c:	d829      	bhi.n	800d8c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	885b      	ldrh	r3, [r3, #2]
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d878:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b03      	cmp	r3, #3
 800d884:	d104      	bne.n	800d890 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d886:	6839      	ldr	r1, [r7, #0]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 f9bc 	bl	800dc06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d88e:	e01d      	b.n	800d8cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	7bfa      	ldrb	r2, [r7, #15]
 800d894:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d898:	7bfb      	ldrb	r3, [r7, #15]
 800d89a:	4619      	mov	r1, r3
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f003 fd17 	bl	80112d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 fa86 	bl	800ddb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d004      	beq.n	800d8b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2202      	movs	r2, #2
 800d8b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8b6:	e009      	b.n	800d8cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8c0:	e004      	b.n	800d8cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 f99e 	bl	800dc06 <USBD_CtlError>
  }
}
 800d8ca:	bf00      	nop
 800d8cc:	bf00      	nop
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	885b      	ldrh	r3, [r3, #2]
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	4b4e      	ldr	r3, [pc, #312]	@ (800da24 <USBD_SetConfig+0x150>)
 800d8ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d8ec:	4b4d      	ldr	r3, [pc, #308]	@ (800da24 <USBD_SetConfig+0x150>)
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d905      	bls.n	800d900 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d8f4:	6839      	ldr	r1, [r7, #0]
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f985 	bl	800dc06 <USBD_CtlError>
    return USBD_FAIL;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	e08c      	b.n	800da1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d906:	b2db      	uxtb	r3, r3
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d002      	beq.n	800d912 <USBD_SetConfig+0x3e>
 800d90c:	2b03      	cmp	r3, #3
 800d90e:	d029      	beq.n	800d964 <USBD_SetConfig+0x90>
 800d910:	e075      	b.n	800d9fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d912:	4b44      	ldr	r3, [pc, #272]	@ (800da24 <USBD_SetConfig+0x150>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d020      	beq.n	800d95c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d91a:	4b42      	ldr	r3, [pc, #264]	@ (800da24 <USBD_SetConfig+0x150>)
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	461a      	mov	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d924:	4b3f      	ldr	r3, [pc, #252]	@ (800da24 <USBD_SetConfig+0x150>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7fe ffb9 	bl	800c8a2 <USBD_SetClassConfig>
 800d930:	4603      	mov	r3, r0
 800d932:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d934:	7bfb      	ldrb	r3, [r7, #15]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d008      	beq.n	800d94c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 f962 	bl	800dc06 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2202      	movs	r2, #2
 800d946:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d94a:	e065      	b.n	800da18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fa31 	bl	800ddb4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2203      	movs	r2, #3
 800d956:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d95a:	e05d      	b.n	800da18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fa29 	bl	800ddb4 <USBD_CtlSendStatus>
      break;
 800d962:	e059      	b.n	800da18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d964:	4b2f      	ldr	r3, [pc, #188]	@ (800da24 <USBD_SetConfig+0x150>)
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d112      	bne.n	800d992 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2202      	movs	r2, #2
 800d970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d974:	4b2b      	ldr	r3, [pc, #172]	@ (800da24 <USBD_SetConfig+0x150>)
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	461a      	mov	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d97e:	4b29      	ldr	r3, [pc, #164]	@ (800da24 <USBD_SetConfig+0x150>)
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7fe ffa8 	bl	800c8da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f000 fa12 	bl	800ddb4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d990:	e042      	b.n	800da18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d992:	4b24      	ldr	r3, [pc, #144]	@ (800da24 <USBD_SetConfig+0x150>)
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	461a      	mov	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d02a      	beq.n	800d9f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7fe ff96 	bl	800c8da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d9ae:	4b1d      	ldr	r3, [pc, #116]	@ (800da24 <USBD_SetConfig+0x150>)
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d9b8:	4b1a      	ldr	r3, [pc, #104]	@ (800da24 <USBD_SetConfig+0x150>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	4619      	mov	r1, r3
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7fe ff6f 	bl	800c8a2 <USBD_SetClassConfig>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00f      	beq.n	800d9ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d9ce:	6839      	ldr	r1, [r7, #0]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f918 	bl	800dc06 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	4619      	mov	r1, r3
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7fe ff7b 	bl	800c8da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d9ec:	e014      	b.n	800da18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 f9e0 	bl	800ddb4 <USBD_CtlSendStatus>
      break;
 800d9f4:	e010      	b.n	800da18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 f9dc 	bl	800ddb4 <USBD_CtlSendStatus>
      break;
 800d9fc:	e00c      	b.n	800da18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f900 	bl	800dc06 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da06:	4b07      	ldr	r3, [pc, #28]	@ (800da24 <USBD_SetConfig+0x150>)
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	4619      	mov	r1, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f7fe ff64 	bl	800c8da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800da12:	2303      	movs	r3, #3
 800da14:	73fb      	strb	r3, [r7, #15]
      break;
 800da16:	bf00      	nop
  }

  return ret;
 800da18:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	240002ec 	.word	0x240002ec

0800da28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	88db      	ldrh	r3, [r3, #6]
 800da36:	2b01      	cmp	r3, #1
 800da38:	d004      	beq.n	800da44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da3a:	6839      	ldr	r1, [r7, #0]
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f8e2 	bl	800dc06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da42:	e023      	b.n	800da8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	dc02      	bgt.n	800da56 <USBD_GetConfig+0x2e>
 800da50:	2b00      	cmp	r3, #0
 800da52:	dc03      	bgt.n	800da5c <USBD_GetConfig+0x34>
 800da54:	e015      	b.n	800da82 <USBD_GetConfig+0x5a>
 800da56:	2b03      	cmp	r3, #3
 800da58:	d00b      	beq.n	800da72 <USBD_GetConfig+0x4a>
 800da5a:	e012      	b.n	800da82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	3308      	adds	r3, #8
 800da66:	2201      	movs	r2, #1
 800da68:	4619      	mov	r1, r3
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f948 	bl	800dd00 <USBD_CtlSendData>
        break;
 800da70:	e00c      	b.n	800da8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	3304      	adds	r3, #4
 800da76:	2201      	movs	r2, #1
 800da78:	4619      	mov	r1, r3
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 f940 	bl	800dd00 <USBD_CtlSendData>
        break;
 800da80:	e004      	b.n	800da8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800da82:	6839      	ldr	r1, [r7, #0]
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 f8be 	bl	800dc06 <USBD_CtlError>
        break;
 800da8a:	bf00      	nop
}
 800da8c:	bf00      	nop
 800da8e:	3708      	adds	r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	3b01      	subs	r3, #1
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d81e      	bhi.n	800daea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	88db      	ldrh	r3, [r3, #6]
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d004      	beq.n	800dabe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dab4:	6839      	ldr	r1, [r7, #0]
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f8a5 	bl	800dc06 <USBD_CtlError>
        break;
 800dabc:	e01a      	b.n	800daf4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2201      	movs	r2, #1
 800dac2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d005      	beq.n	800dada <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	f043 0202 	orr.w	r2, r3, #2
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	330c      	adds	r3, #12
 800dade:	2202      	movs	r2, #2
 800dae0:	4619      	mov	r1, r3
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f90c 	bl	800dd00 <USBD_CtlSendData>
      break;
 800dae8:	e004      	b.n	800daf4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800daea:	6839      	ldr	r1, [r7, #0]
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 f88a 	bl	800dc06 <USBD_CtlError>
      break;
 800daf2:	bf00      	nop
  }
}
 800daf4:	bf00      	nop
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	885b      	ldrh	r3, [r3, #2]
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d107      	bne.n	800db1e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f94c 	bl	800ddb4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800db1c:	e013      	b.n	800db46 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	885b      	ldrh	r3, [r3, #2]
 800db22:	2b02      	cmp	r3, #2
 800db24:	d10b      	bne.n	800db3e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	889b      	ldrh	r3, [r3, #4]
 800db2a:	0a1b      	lsrs	r3, r3, #8
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 f93c 	bl	800ddb4 <USBD_CtlSendStatus>
}
 800db3c:	e003      	b.n	800db46 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800db3e:	6839      	ldr	r1, [r7, #0]
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 f860 	bl	800dc06 <USBD_CtlError>
}
 800db46:	bf00      	nop
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b082      	sub	sp, #8
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
 800db56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	3b01      	subs	r3, #1
 800db62:	2b02      	cmp	r3, #2
 800db64:	d80b      	bhi.n	800db7e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	885b      	ldrh	r3, [r3, #2]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d10c      	bne.n	800db88 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2200      	movs	r2, #0
 800db72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 f91c 	bl	800ddb4 <USBD_CtlSendStatus>
      }
      break;
 800db7c:	e004      	b.n	800db88 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800db7e:	6839      	ldr	r1, [r7, #0]
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 f840 	bl	800dc06 <USBD_CtlError>
      break;
 800db86:	e000      	b.n	800db8a <USBD_ClrFeature+0x3c>
      break;
 800db88:	bf00      	nop
  }
}
 800db8a:	bf00      	nop
 800db8c:	3708      	adds	r7, #8
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	781a      	ldrb	r2, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	781a      	ldrb	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f7ff fa16 	bl	800cfee <SWAPBYTE>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f7ff fa09 	bl	800cfee <SWAPBYTE>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	461a      	mov	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3301      	adds	r3, #1
 800dbee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7ff f9fc 	bl	800cfee <SWAPBYTE>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	80da      	strh	r2, [r3, #6]
}
 800dbfe:	bf00      	nop
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b082      	sub	sp, #8
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc10:	2180      	movs	r1, #128	@ 0x80
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f003 faf2 	bl	80111fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dc18:	2100      	movs	r1, #0
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f003 faee 	bl	80111fc <USBD_LL_StallEP>
}
 800dc20:	bf00      	nop
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b086      	sub	sp, #24
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc34:	2300      	movs	r3, #0
 800dc36:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d042      	beq.n	800dcc4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800dc42:	6938      	ldr	r0, [r7, #16]
 800dc44:	f000 f842 	bl	800dccc <USBD_GetLen>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	005b      	lsls	r3, r3, #1
 800dc4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc52:	d808      	bhi.n	800dc66 <USBD_GetString+0x3e>
 800dc54:	6938      	ldr	r0, [r7, #16]
 800dc56:	f000 f839 	bl	800dccc <USBD_GetLen>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	005b      	lsls	r3, r3, #1
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	e001      	b.n	800dc6a <USBD_GetString+0x42>
 800dc66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dc6e:	7dfb      	ldrb	r3, [r7, #23]
 800dc70:	68ba      	ldr	r2, [r7, #8]
 800dc72:	4413      	add	r3, r2
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	7812      	ldrb	r2, [r2, #0]
 800dc78:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dc80:	7dfb      	ldrb	r3, [r7, #23]
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	4413      	add	r3, r2
 800dc86:	2203      	movs	r2, #3
 800dc88:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc8a:	7dfb      	ldrb	r3, [r7, #23]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dc90:	e013      	b.n	800dcba <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	4413      	add	r3, r2
 800dc98:	693a      	ldr	r2, [r7, #16]
 800dc9a:	7812      	ldrb	r2, [r2, #0]
 800dc9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	3301      	adds	r3, #1
 800dca2:	613b      	str	r3, [r7, #16]
    idx++;
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
 800dca6:	3301      	adds	r3, #1
 800dca8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dcaa:	7dfb      	ldrb	r3, [r7, #23]
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	4413      	add	r3, r2
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	701a      	strb	r2, [r3, #0]
    idx++;
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1e7      	bne.n	800dc92 <USBD_GetString+0x6a>
 800dcc2:	e000      	b.n	800dcc6 <USBD_GetString+0x9e>
    return;
 800dcc4:	bf00      	nop
  }
}
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dcdc:	e005      	b.n	800dcea <USBD_GetLen+0x1e>
  {
    len++;
 800dcde:	7bfb      	ldrb	r3, [r7, #15]
 800dce0:	3301      	adds	r3, #1
 800dce2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	3301      	adds	r3, #1
 800dce8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1f5      	bne.n	800dcde <USBD_GetLen+0x12>
  }

  return len;
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2202      	movs	r2, #2
 800dd10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	2100      	movs	r1, #0
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f003 faf1 	bl	801130e <USBD_LL_Transmit>

  return USBD_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b084      	sub	sp, #16
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	60f8      	str	r0, [r7, #12]
 800dd3e:	60b9      	str	r1, [r7, #8]
 800dd40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	2100      	movs	r1, #0
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f003 fae0 	bl	801130e <USBD_LL_Transmit>

  return USBD_OK;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2203      	movs	r2, #3
 800dd68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	2100      	movs	r1, #0
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f003 fae4 	bl	8011350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b084      	sub	sp, #16
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	60f8      	str	r0, [r7, #12]
 800dd9a:	60b9      	str	r1, [r7, #8]
 800dd9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	2100      	movs	r1, #0
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f003 fad3 	bl	8011350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2204      	movs	r2, #4
 800ddc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	2100      	movs	r1, #0
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f003 fa9f 	bl	801130e <USBD_LL_Transmit>

  return USBD_OK;
 800ddd0:	2300      	movs	r3, #0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b082      	sub	sp, #8
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2205      	movs	r2, #5
 800dde6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddea:	2300      	movs	r3, #0
 800ddec:	2200      	movs	r2, #0
 800ddee:	2100      	movs	r1, #0
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f003 faad 	bl	8011350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 800de04:	2200      	movs	r2, #0
 800de06:	2108      	movs	r1, #8
 800de08:	480a      	ldr	r0, [pc, #40]	@ (800de34 <ad7606_Init+0x34>)
 800de0a:	f7f4 fc45 	bl	8002698 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800de0e:	2001      	movs	r0, #1
 800de10:	f7f2 fb44 	bl	800049c <HAL_Delay>
    AD7606_RST_SET();
 800de14:	2201      	movs	r2, #1
 800de16:	2108      	movs	r1, #8
 800de18:	4806      	ldr	r0, [pc, #24]	@ (800de34 <ad7606_Init+0x34>)
 800de1a:	f7f4 fc3d 	bl	8002698 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800de1e:	2001      	movs	r0, #1
 800de20:	f7f2 fb3c 	bl	800049c <HAL_Delay>
    AD7606_RST_RESET();
 800de24:	2200      	movs	r2, #0
 800de26:	2108      	movs	r1, #8
 800de28:	4802      	ldr	r0, [pc, #8]	@ (800de34 <ad7606_Init+0x34>)
 800de2a:	f7f4 fc35 	bl	8002698 <HAL_GPIO_WritePin>
}
 800de2e:	bf00      	nop
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	58021800 	.word	0x58021800

0800de38 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	4613      	mov	r3, r2
 800de44:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 800de46:	2200      	movs	r2, #0
 800de48:	2180      	movs	r1, #128	@ 0x80
 800de4a:	4809      	ldr	r0, [pc, #36]	@ (800de70 <ad7606_Read+0x38>)
 800de4c:	f7f4 fc24 	bl	8002698 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 800de50:	88fa      	ldrh	r2, [r7, #6]
 800de52:	2364      	movs	r3, #100	@ 0x64
 800de54:	68b9      	ldr	r1, [r7, #8]
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f7fa fd9a 	bl	8008990 <HAL_SPI_Receive>
    AD7606_CS_SET();
 800de5c:	2201      	movs	r2, #1
 800de5e:	2180      	movs	r1, #128	@ 0x80
 800de60:	4803      	ldr	r0, [pc, #12]	@ (800de70 <ad7606_Read+0x38>)
 800de62:	f7f4 fc19 	bl	8002698 <HAL_GPIO_WritePin>
}
 800de66:	bf00      	nop
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	58021800 	.word	0x58021800

0800de74 <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7fb fa11 	bl	80092a8 <HAL_TIM_PWM_Start>
}
 800de86:	bf00      	nop
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
	...

0800de90 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 800de90:	b480      	push	{r7}
 800de92:	b087      	sub	sp, #28
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	460b      	mov	r3, r1
 800de9a:	607a      	str	r2, [r7, #4]
 800de9c:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 800de9e:	2300      	movs	r3, #0
 800dea0:	617b      	str	r3, [r7, #20]
 800dea2:	e03d      	b.n	800df20 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	4413      	add	r3, r2
 800deac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	da0f      	bge.n	800ded4 <ad7606_Convert+0x44>
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	4413      	add	r3, r2
 800debc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	425b      	negs	r3, r3
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800deca:	b29b      	uxth	r3, r3
 800decc:	425b      	negs	r3, r3
 800dece:	b29b      	uxth	r3, r3
 800ded0:	b21b      	sxth	r3, r3
 800ded2:	e005      	b.n	800dee0 <ad7606_Convert+0x50>
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	005b      	lsls	r3, r3, #1
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	4413      	add	r3, r2
 800dedc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dee0:	697a      	ldr	r2, [r7, #20]
 800dee2:	0052      	lsls	r2, r2, #1
 800dee4:	68f9      	ldr	r1, [r7, #12]
 800dee6:	440a      	add	r2, r1
 800dee8:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	005b      	lsls	r3, r3, #1
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	4413      	add	r3, r2
 800def2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800def6:	ee07 3a90 	vmov	s15, r3
 800defa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800defe:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800df02:	ee27 7a87 	vmul.f32	s14, s15, s14
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	4413      	add	r3, r2
 800df0e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800df38 <ad7606_Convert+0xa8>
 800df12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800df16:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	3301      	adds	r3, #1
 800df1e:	617b      	str	r3, [r7, #20]
 800df20:	897b      	ldrh	r3, [r7, #10]
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	429a      	cmp	r2, r3
 800df26:	dbbd      	blt.n	800dea4 <ad7606_Convert+0x14>
    }
}
 800df28:	bf00      	nop
 800df2a:	bf00      	nop
 800df2c:	371c      	adds	r7, #28
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	47000000 	.word	0x47000000

0800df3c <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 800df3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df40:	b087      	sub	sp, #28
 800df42:	af00      	add	r7, sp, #0
 800df44:	60f8      	str	r0, [r7, #12]
 800df46:	460b      	mov	r3, r1
 800df48:	607a      	str	r2, [r7, #4]
 800df4a:	817b      	strh	r3, [r7, #10]
 800df4c:	466b      	mov	r3, sp
 800df4e:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 800df50:	8979      	ldrh	r1, [r7, #10]
 800df52:	460b      	mov	r3, r1
 800df54:	3b01      	subs	r3, #1
 800df56:	617b      	str	r3, [r7, #20]
 800df58:	b28b      	uxth	r3, r1
 800df5a:	2200      	movs	r2, #0
 800df5c:	4698      	mov	r8, r3
 800df5e:	4691      	mov	r9, r2
 800df60:	f04f 0200 	mov.w	r2, #0
 800df64:	f04f 0300 	mov.w	r3, #0
 800df68:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800df6c:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800df70:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800df74:	b28b      	uxth	r3, r1
 800df76:	2200      	movs	r2, #0
 800df78:	461c      	mov	r4, r3
 800df7a:	4615      	mov	r5, r2
 800df7c:	f04f 0200 	mov.w	r2, #0
 800df80:	f04f 0300 	mov.w	r3, #0
 800df84:	012b      	lsls	r3, r5, #4
 800df86:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800df8a:	0122      	lsls	r2, r4, #4
 800df8c:	460b      	mov	r3, r1
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	3307      	adds	r3, #7
 800df92:	08db      	lsrs	r3, r3, #3
 800df94:	00db      	lsls	r3, r3, #3
 800df96:	ebad 0d03 	sub.w	sp, sp, r3
 800df9a:	466b      	mov	r3, sp
 800df9c:	3301      	adds	r3, #1
 800df9e:	085b      	lsrs	r3, r3, #1
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 800dfa4:	897b      	ldrh	r3, [r7, #10]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	6939      	ldr	r1, [r7, #16]
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f7ff ff44 	bl	800de38 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 800dfb0:	897b      	ldrh	r3, [r7, #10]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	6938      	ldr	r0, [r7, #16]
 800dfb8:	f7ff ff6a 	bl	800de90 <ad7606_Convert>
 800dfbc:	46b5      	mov	sp, r6
}
 800dfbe:	bf00      	nop
 800dfc0:	371c      	adds	r7, #28
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800dfc8 <ina238_Init>:
 * @brief  INA238初始化
 * @param  hi2c I2C句柄
 * @param  error 误差纠正
 */
void ina238_Init(I2C_HandleTypeDef *hi2c, int8_t error)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b088      	sub	sp, #32
 800dfcc:	af04      	add	r7, sp, #16
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70fb      	strb	r3, [r7, #3]
	uint8_t pData[2];
	pData[0] = 0x00;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x00;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100); // 量程选择为163.84mv
 800dfdc:	2364      	movs	r3, #100	@ 0x64
 800dfde:	9302      	str	r3, [sp, #8]
 800dfe0:	2302      	movs	r3, #2
 800dfe2:	9301      	str	r3, [sp, #4]
 800dfe4:	f107 030c 	add.w	r3, r7, #12
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	2301      	movs	r3, #1
 800dfec:	2200      	movs	r2, #0
 800dfee:	2181      	movs	r1, #129	@ 0x81
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7f4 fc3b 	bl	800286c <HAL_I2C_Mem_Write>
	pData[0] = 0xf4;
 800dff6:	23f4      	movs	r3, #244	@ 0xf4
 800dff8:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x93;
 800dffa:	2393      	movs	r3, #147	@ 0x93
 800dffc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100); // 转换时间设置为9.6ms
 800dffe:	2364      	movs	r3, #100	@ 0x64
 800e000:	9302      	str	r3, [sp, #8]
 800e002:	2302      	movs	r3, #2
 800e004:	9301      	str	r3, [sp, #4]
 800e006:	f107 030c 	add.w	r3, r7, #12
 800e00a:	9300      	str	r3, [sp, #0]
 800e00c:	2301      	movs	r3, #1
 800e00e:	2201      	movs	r2, #1
 800e010:	2181      	movs	r1, #129	@ 0x81
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7f4 fc2a 	bl	800286c <HAL_I2C_Mem_Write>
	pData[0] = 0x0f;
 800e018:	230f      	movs	r3, #15
 800e01a:	733b      	strb	r3, [r7, #12]
	pData[1] = 0xa0 + error;
 800e01c:	78fb      	ldrb	r3, [r7, #3]
 800e01e:	3b60      	subs	r3, #96	@ 0x60
 800e020:	b2db      	uxtb	r3, r3
 800e022:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100); // 设置最大电流为8A，采样电阻为20mΩ
 800e024:	2364      	movs	r3, #100	@ 0x64
 800e026:	9302      	str	r3, [sp, #8]
 800e028:	2302      	movs	r3, #2
 800e02a:	9301      	str	r3, [sp, #4]
 800e02c:	f107 030c 	add.w	r3, r7, #12
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	2301      	movs	r3, #1
 800e034:	2202      	movs	r2, #2
 800e036:	2181      	movs	r1, #129	@ 0x81
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f7f4 fc17 	bl	800286c <HAL_I2C_Mem_Write>
}
 800e03e:	bf00      	nop
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
	...

0800e048 <ina238_GetVolt>:
 * @brief  INA238读取电压
 * @param  hi2c I2C句柄
 * @retval 电压值
 */
float ina238_GetVolt(I2C_HandleTypeDef *hi2c)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b088      	sub	sp, #32
 800e04c:	af04      	add	r7, sp, #16
 800e04e:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float volt;
	if (HAL_I2C_Mem_Read(hi2c, ADDR_READ, VBUS, 1, pData, 2, 100) == HAL_OK)
 800e050:	2364      	movs	r3, #100	@ 0x64
 800e052:	9302      	str	r3, [sp, #8]
 800e054:	2302      	movs	r3, #2
 800e056:	9301      	str	r3, [sp, #4]
 800e058:	f107 0308 	add.w	r3, r7, #8
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	2301      	movs	r3, #1
 800e060:	2205      	movs	r2, #5
 800e062:	2180      	movs	r1, #128	@ 0x80
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f7f4 fd15 	bl	8002a94 <HAL_I2C_Mem_Read>
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d137      	bne.n	800e0e0 <ina238_GetVolt+0x98>
	{
		volt = pData[0] * 256 + pData[1];
 800e070:	7a3b      	ldrb	r3, [r7, #8]
 800e072:	021b      	lsls	r3, r3, #8
 800e074:	7a7a      	ldrb	r2, [r7, #9]
 800e076:	4413      	add	r3, r2
 800e078:	ee07 3a90 	vmov	s15, r3
 800e07c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e080:	edc7 7a03 	vstr	s15, [r7, #12]
		if (volt > 32767) // 为负数的情况
 800e084:	edd7 7a03 	vldr	s15, [r7, #12]
 800e088:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800e0f8 <ina238_GetVolt+0xb0>
 800e08c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e094:	dd14      	ble.n	800e0c0 <ina238_GetVolt+0x78>
			volt = (volt - 65536) * 3.125 / 1000;
 800e096:	edd7 7a03 	vldr	s15, [r7, #12]
 800e09a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e0fc <ina238_GetVolt+0xb4>
 800e09e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e0a6:	eeb0 6b09 	vmov.f64	d6, #9	@ 0x40480000  3.125
 800e0aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e0ae:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 800e0f0 <ina238_GetVolt+0xa8>
 800e0b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e0b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e0ba:	edc7 7a03 	vstr	s15, [r7, #12]
 800e0be:	e00f      	b.n	800e0e0 <ina238_GetVolt+0x98>
		else
			volt = volt * 3.125 / 1000;
 800e0c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e0c8:	eeb0 6b09 	vmov.f64	d6, #9	@ 0x40480000  3.125
 800e0cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e0d0:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 800e0f0 <ina238_GetVolt+0xa8>
 800e0d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e0d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e0dc:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return volt;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	ee07 3a90 	vmov	s15, r3
}
 800e0e6:	eeb0 0a67 	vmov.f32	s0, s15
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	00000000 	.word	0x00000000
 800e0f4:	408f4000 	.word	0x408f4000
 800e0f8:	46fffe00 	.word	0x46fffe00
 800e0fc:	47800000 	.word	0x47800000

0800e100 <ina238_GetCurrent>:
 * @brief  INA238读取电流
 * @param  hi2c I2C句柄
 * @retval 电流值
 */
float ina238_GetCurrent(I2C_HandleTypeDef *hi2c)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b088      	sub	sp, #32
 800e104:	af04      	add	r7, sp, #16
 800e106:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float current;
	if (HAL_I2C_Mem_Read(hi2c, ADDR_READ, CURRENT, 1, pData, 2, 100) == HAL_OK)
 800e108:	2364      	movs	r3, #100	@ 0x64
 800e10a:	9302      	str	r3, [sp, #8]
 800e10c:	2302      	movs	r3, #2
 800e10e:	9301      	str	r3, [sp, #4]
 800e110:	f107 0308 	add.w	r3, r7, #8
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	2301      	movs	r3, #1
 800e118:	2207      	movs	r2, #7
 800e11a:	2180      	movs	r1, #128	@ 0x80
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7f4 fcb9 	bl	8002a94 <HAL_I2C_Mem_Read>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d127      	bne.n	800e178 <ina238_GetCurrent+0x78>
	{
		current = pData[0] * 256 + pData[1];
 800e128:	7a3b      	ldrb	r3, [r7, #8]
 800e12a:	021b      	lsls	r3, r3, #8
 800e12c:	7a7a      	ldrb	r2, [r7, #9]
 800e12e:	4413      	add	r3, r2
 800e130:	ee07 3a90 	vmov	s15, r3
 800e134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e138:	edc7 7a03 	vstr	s15, [r7, #12]
		if (current > 32767)
 800e13c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e140:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800e188 <ina238_GetCurrent+0x88>
 800e144:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e14c:	dd0c      	ble.n	800e168 <ina238_GetCurrent+0x68>
			current = (current - 65536) * (8 / 32768.0);
 800e14e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e152:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e18c <ina238_GetCurrent+0x8c>
 800e156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e15a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e190 <ina238_GetCurrent+0x90>
 800e15e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e162:	edc7 7a03 	vstr	s15, [r7, #12]
 800e166:	e007      	b.n	800e178 <ina238_GetCurrent+0x78>
		else
			current = current * (8 / 32768.0);
 800e168:	edd7 7a03 	vldr	s15, [r7, #12]
 800e16c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800e190 <ina238_GetCurrent+0x90>
 800e170:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e174:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return current;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	ee07 3a90 	vmov	s15, r3
}
 800e17e:	eeb0 0a67 	vmov.f32	s0, s15
 800e182:	3710      	adds	r7, #16
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	46fffe00 	.word	0x46fffe00
 800e18c:	47800000 	.word	0x47800000
 800e190:	39800000 	.word	0x39800000

0800e194 <OLED_WR_Byte>:
		OLED_WR_Byte(0xA0, OLED_CMD);
	}
}

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	4603      	mov	r3, r0
 800e19c:	460a      	mov	r2, r1
 800e19e:	71fb      	strb	r3, [r7, #7]
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800e1a4:	1dfb      	adds	r3, r7, #7
 800e1a6:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800e1a8:	79bb      	ldrb	r3, [r7, #6]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d005      	beq.n	800e1ba <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	2140      	movs	r1, #64	@ 0x40
 800e1b2:	4811      	ldr	r0, [pc, #68]	@ (800e1f8 <OLED_WR_Byte+0x64>)
 800e1b4:	f7f4 fa70 	bl	8002698 <HAL_GPIO_WritePin>
 800e1b8:	e004      	b.n	800e1c4 <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	2140      	movs	r1, #64	@ 0x40
 800e1be:	480e      	ldr	r0, [pc, #56]	@ (800e1f8 <OLED_WR_Byte+0x64>)
 800e1c0:	f7f4 fa6a 	bl	8002698 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	2102      	movs	r1, #2
 800e1c8:	480c      	ldr	r0, [pc, #48]	@ (800e1fc <OLED_WR_Byte+0x68>)
 800e1ca:	f7f4 fa65 	bl	8002698 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800e1ce:	23c8      	movs	r3, #200	@ 0xc8
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	68f9      	ldr	r1, [r7, #12]
 800e1d4:	480a      	ldr	r0, [pc, #40]	@ (800e200 <OLED_WR_Byte+0x6c>)
 800e1d6:	f7fa f9ed 	bl	80085b4 <HAL_SPI_Transmit>

	OLED_CS_Set();
 800e1da:	2201      	movs	r2, #1
 800e1dc:	2102      	movs	r1, #2
 800e1de:	4807      	ldr	r0, [pc, #28]	@ (800e1fc <OLED_WR_Byte+0x68>)
 800e1e0:	f7f4 fa5a 	bl	8002698 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	2140      	movs	r1, #64	@ 0x40
 800e1e8:	4803      	ldr	r0, [pc, #12]	@ (800e1f8 <OLED_WR_Byte+0x64>)
 800e1ea:	f7f4 fa55 	bl	8002698 <HAL_GPIO_WritePin>
}
 800e1ee:	bf00      	nop
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	58022000 	.word	0x58022000
 800e1fc:	58020400 	.word	0x58020400
 800e200:	24000958 	.word	0x24000958

0800e204 <OLED_Refresh>:
	OLED_WR_Byte(0xAF, OLED_CMD); // 关闭屏幕
}

// 更新显存到OLED
void OLED_Refresh(void)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800e20a:	2300      	movs	r3, #0
 800e20c:	71fb      	strb	r3, [r7, #7]
 800e20e:	e026      	b.n	800e25e <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800e210:	79fb      	ldrb	r3, [r7, #7]
 800e212:	3b50      	subs	r3, #80	@ 0x50
 800e214:	b2db      	uxtb	r3, r3
 800e216:	2100      	movs	r1, #0
 800e218:	4618      	mov	r0, r3
 800e21a:	f7ff ffbb 	bl	800e194 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800e21e:	2100      	movs	r1, #0
 800e220:	2000      	movs	r0, #0
 800e222:	f7ff ffb7 	bl	800e194 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800e226:	2100      	movs	r1, #0
 800e228:	2010      	movs	r0, #16
 800e22a:	f7ff ffb3 	bl	800e194 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800e22e:	2300      	movs	r3, #0
 800e230:	71bb      	strb	r3, [r7, #6]
 800e232:	e00d      	b.n	800e250 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800e234:	79ba      	ldrb	r2, [r7, #6]
 800e236:	79fb      	ldrb	r3, [r7, #7]
 800e238:	490d      	ldr	r1, [pc, #52]	@ (800e270 <OLED_Refresh+0x6c>)
 800e23a:	00d2      	lsls	r2, r2, #3
 800e23c:	440a      	add	r2, r1
 800e23e:	4413      	add	r3, r2
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2101      	movs	r1, #1
 800e244:	4618      	mov	r0, r3
 800e246:	f7ff ffa5 	bl	800e194 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800e24a:	79bb      	ldrb	r3, [r7, #6]
 800e24c:	3301      	adds	r3, #1
 800e24e:	71bb      	strb	r3, [r7, #6]
 800e250:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e254:	2b00      	cmp	r3, #0
 800e256:	daed      	bge.n	800e234 <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800e258:	79fb      	ldrb	r3, [r7, #7]
 800e25a:	3301      	adds	r3, #1
 800e25c:	71fb      	strb	r3, [r7, #7]
 800e25e:	79fb      	ldrb	r3, [r7, #7]
 800e260:	2b07      	cmp	r3, #7
 800e262:	d9d5      	bls.n	800e210 <OLED_Refresh+0xc>
	}
}
 800e264:	bf00      	nop
 800e266:	bf00      	nop
 800e268:	3708      	adds	r7, #8
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	240002f0 	.word	0x240002f0

0800e274 <OLED_Clear>:
// 清屏函数
void OLED_Clear(void)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800e27a:	2300      	movs	r3, #0
 800e27c:	71fb      	strb	r3, [r7, #7]
 800e27e:	e014      	b.n	800e2aa <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 800e280:	2300      	movs	r3, #0
 800e282:	71bb      	strb	r3, [r7, #6]
 800e284:	e00a      	b.n	800e29c <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 800e286:	79ba      	ldrb	r2, [r7, #6]
 800e288:	79fb      	ldrb	r3, [r7, #7]
 800e28a:	490c      	ldr	r1, [pc, #48]	@ (800e2bc <OLED_Clear+0x48>)
 800e28c:	00d2      	lsls	r2, r2, #3
 800e28e:	440a      	add	r2, r1
 800e290:	4413      	add	r3, r2
 800e292:	2200      	movs	r2, #0
 800e294:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800e296:	79bb      	ldrb	r3, [r7, #6]
 800e298:	3301      	adds	r3, #1
 800e29a:	71bb      	strb	r3, [r7, #6]
 800e29c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	daf0      	bge.n	800e286 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800e2a4:	79fb      	ldrb	r3, [r7, #7]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	71fb      	strb	r3, [r7, #7]
 800e2aa:	79fb      	ldrb	r3, [r7, #7]
 800e2ac:	2b07      	cmp	r3, #7
 800e2ae:	d9e7      	bls.n	800e280 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 800e2b0:	f7ff ffa8 	bl	800e204 <OLED_Refresh>
}
 800e2b4:	bf00      	nop
 800e2b6:	3708      	adds	r7, #8
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	240002f0 	.word	0x240002f0

0800e2c0 <OLED_DrawPoint>:

// 画点
// x:0~127
// y:0~63
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b085      	sub	sp, #20
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	460a      	mov	r2, r1
 800e2ca:	71fb      	strb	r3, [r7, #7]
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800e2d0:	79bb      	ldrb	r3, [r7, #6]
 800e2d2:	08db      	lsrs	r3, r3, #3
 800e2d4:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800e2d6:	79bb      	ldrb	r3, [r7, #6]
 800e2d8:	f003 0307 	and.w	r3, r3, #7
 800e2dc:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2e6:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800e2e8:	79fa      	ldrb	r2, [r7, #7]
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
 800e2ec:	490a      	ldr	r1, [pc, #40]	@ (800e318 <OLED_DrawPoint+0x58>)
 800e2ee:	00d2      	lsls	r2, r2, #3
 800e2f0:	440a      	add	r2, r1
 800e2f2:	4413      	add	r3, r2
 800e2f4:	7818      	ldrb	r0, [r3, #0]
 800e2f6:	79fa      	ldrb	r2, [r7, #7]
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	7b79      	ldrb	r1, [r7, #13]
 800e2fc:	4301      	orrs	r1, r0
 800e2fe:	b2c8      	uxtb	r0, r1
 800e300:	4905      	ldr	r1, [pc, #20]	@ (800e318 <OLED_DrawPoint+0x58>)
 800e302:	00d2      	lsls	r2, r2, #3
 800e304:	440a      	add	r2, r1
 800e306:	4413      	add	r3, r2
 800e308:	4602      	mov	r2, r0
 800e30a:	701a      	strb	r2, [r3, #0]
}
 800e30c:	bf00      	nop
 800e30e:	3714      	adds	r7, #20
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr
 800e318:	240002f0 	.word	0x240002f0

0800e31c <OLED_ClearPoint>:

// 清除一个点
// x:0~127
// y:0~63
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	4603      	mov	r3, r0
 800e324:	460a      	mov	r2, r1
 800e326:	71fb      	strb	r3, [r7, #7]
 800e328:	4613      	mov	r3, r2
 800e32a:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800e32c:	79bb      	ldrb	r3, [r7, #6]
 800e32e:	08db      	lsrs	r3, r3, #3
 800e330:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800e332:	79bb      	ldrb	r3, [r7, #6]
 800e334:	f003 0307 	and.w	r3, r3, #7
 800e338:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800e33a:	7bbb      	ldrb	r3, [r7, #14]
 800e33c:	2201      	movs	r2, #1
 800e33e:	fa02 f303 	lsl.w	r3, r2, r3
 800e342:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800e344:	79fa      	ldrb	r2, [r7, #7]
 800e346:	7bfb      	ldrb	r3, [r7, #15]
 800e348:	491b      	ldr	r1, [pc, #108]	@ (800e3b8 <OLED_ClearPoint+0x9c>)
 800e34a:	00d2      	lsls	r2, r2, #3
 800e34c:	440a      	add	r2, r1
 800e34e:	4413      	add	r3, r2
 800e350:	7819      	ldrb	r1, [r3, #0]
 800e352:	79fa      	ldrb	r2, [r7, #7]
 800e354:	7bfb      	ldrb	r3, [r7, #15]
 800e356:	43c9      	mvns	r1, r1
 800e358:	b2c8      	uxtb	r0, r1
 800e35a:	4917      	ldr	r1, [pc, #92]	@ (800e3b8 <OLED_ClearPoint+0x9c>)
 800e35c:	00d2      	lsls	r2, r2, #3
 800e35e:	440a      	add	r2, r1
 800e360:	4413      	add	r3, r2
 800e362:	4602      	mov	r2, r0
 800e364:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800e366:	79fa      	ldrb	r2, [r7, #7]
 800e368:	7bfb      	ldrb	r3, [r7, #15]
 800e36a:	4913      	ldr	r1, [pc, #76]	@ (800e3b8 <OLED_ClearPoint+0x9c>)
 800e36c:	00d2      	lsls	r2, r2, #3
 800e36e:	440a      	add	r2, r1
 800e370:	4413      	add	r3, r2
 800e372:	7818      	ldrb	r0, [r3, #0]
 800e374:	79fa      	ldrb	r2, [r7, #7]
 800e376:	7bfb      	ldrb	r3, [r7, #15]
 800e378:	7b79      	ldrb	r1, [r7, #13]
 800e37a:	4301      	orrs	r1, r0
 800e37c:	b2c8      	uxtb	r0, r1
 800e37e:	490e      	ldr	r1, [pc, #56]	@ (800e3b8 <OLED_ClearPoint+0x9c>)
 800e380:	00d2      	lsls	r2, r2, #3
 800e382:	440a      	add	r2, r1
 800e384:	4413      	add	r3, r2
 800e386:	4602      	mov	r2, r0
 800e388:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800e38a:	79fa      	ldrb	r2, [r7, #7]
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
 800e38e:	490a      	ldr	r1, [pc, #40]	@ (800e3b8 <OLED_ClearPoint+0x9c>)
 800e390:	00d2      	lsls	r2, r2, #3
 800e392:	440a      	add	r2, r1
 800e394:	4413      	add	r3, r2
 800e396:	7819      	ldrb	r1, [r3, #0]
 800e398:	79fa      	ldrb	r2, [r7, #7]
 800e39a:	7bfb      	ldrb	r3, [r7, #15]
 800e39c:	43c9      	mvns	r1, r1
 800e39e:	b2c8      	uxtb	r0, r1
 800e3a0:	4905      	ldr	r1, [pc, #20]	@ (800e3b8 <OLED_ClearPoint+0x9c>)
 800e3a2:	00d2      	lsls	r2, r2, #3
 800e3a4:	440a      	add	r2, r1
 800e3a6:	4413      	add	r3, r2
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	701a      	strb	r2, [r3, #0]
}
 800e3ac:	bf00      	nop
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	240002f0 	.word	0x240002f0

0800e3bc <OLED_ShowChar>:
// x:0~127
// y:0~63
// size:选择字体 12/16/24
// 取模方式 逐列式
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800e3bc:	b590      	push	{r4, r7, lr}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	4608      	mov	r0, r1
 800e3c6:	4611      	mov	r1, r2
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	4623      	mov	r3, r4
 800e3cc:	71fb      	strb	r3, [r7, #7]
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	71bb      	strb	r3, [r7, #6]
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	717b      	strb	r3, [r7, #5]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800e3da:	79bb      	ldrb	r3, [r7, #6]
 800e3dc:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800e3de:	793b      	ldrb	r3, [r7, #4]
 800e3e0:	08db      	lsrs	r3, r3, #3
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	793b      	ldrb	r3, [r7, #4]
 800e3e8:	f003 0307 	and.w	r3, r3, #7
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	bf14      	ite	ne
 800e3f2:	2301      	movne	r3, #1
 800e3f4:	2300      	moveq	r3, #0
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	4413      	add	r3, r2
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	793b      	ldrb	r3, [r7, #4]
 800e3fe:	085b      	lsrs	r3, r3, #1
 800e400:	b2db      	uxtb	r3, r3
 800e402:	fb12 f303 	smulbb	r3, r2, r3
 800e406:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800e408:	797b      	ldrb	r3, [r7, #5]
 800e40a:	3b20      	subs	r3, #32
 800e40c:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800e40e:	2300      	movs	r3, #0
 800e410:	73fb      	strb	r3, [r7, #15]
 800e412:	e057      	b.n	800e4c4 <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800e414:	793b      	ldrb	r3, [r7, #4]
 800e416:	2b0c      	cmp	r3, #12
 800e418:	d10b      	bne.n	800e432 <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800e41a:	7aba      	ldrb	r2, [r7, #10]
 800e41c:	7bf9      	ldrb	r1, [r7, #15]
 800e41e:	482e      	ldr	r0, [pc, #184]	@ (800e4d8 <OLED_ShowChar+0x11c>)
 800e420:	4613      	mov	r3, r2
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	4413      	add	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4403      	add	r3, r0
 800e42a:	440b      	add	r3, r1
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	737b      	strb	r3, [r7, #13]
 800e430:	e019      	b.n	800e466 <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800e432:	793b      	ldrb	r3, [r7, #4]
 800e434:	2b10      	cmp	r3, #16
 800e436:	d108      	bne.n	800e44a <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800e438:	7aba      	ldrb	r2, [r7, #10]
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	4927      	ldr	r1, [pc, #156]	@ (800e4dc <OLED_ShowChar+0x120>)
 800e43e:	0112      	lsls	r2, r2, #4
 800e440:	440a      	add	r2, r1
 800e442:	4413      	add	r3, r2
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	737b      	strb	r3, [r7, #13]
 800e448:	e00d      	b.n	800e466 <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800e44a:	793b      	ldrb	r3, [r7, #4]
 800e44c:	2b18      	cmp	r3, #24
 800e44e:	d13e      	bne.n	800e4ce <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800e450:	7aba      	ldrb	r2, [r7, #10]
 800e452:	7bf9      	ldrb	r1, [r7, #15]
 800e454:	4822      	ldr	r0, [pc, #136]	@ (800e4e0 <OLED_ShowChar+0x124>)
 800e456:	4613      	mov	r3, r2
 800e458:	00db      	lsls	r3, r3, #3
 800e45a:	4413      	add	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	4403      	add	r3, r0
 800e460:	440b      	add	r3, r1
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800e466:	2300      	movs	r3, #0
 800e468:	73bb      	strb	r3, [r7, #14]
 800e46a:	e025      	b.n	800e4b8 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800e46c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e470:	2b00      	cmp	r3, #0
 800e472:	da06      	bge.n	800e482 <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800e474:	79ba      	ldrb	r2, [r7, #6]
 800e476:	79fb      	ldrb	r3, [r7, #7]
 800e478:	4611      	mov	r1, r2
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7ff ff20 	bl	800e2c0 <OLED_DrawPoint>
 800e480:	e005      	b.n	800e48e <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800e482:	79ba      	ldrb	r2, [r7, #6]
 800e484:	79fb      	ldrb	r3, [r7, #7]
 800e486:	4611      	mov	r1, r2
 800e488:	4618      	mov	r0, r3
 800e48a:	f7ff ff47 	bl	800e31c <OLED_ClearPoint>
			temp <<= 1;
 800e48e:	7b7b      	ldrb	r3, [r7, #13]
 800e490:	005b      	lsls	r3, r3, #1
 800e492:	737b      	strb	r3, [r7, #13]
			y++;
 800e494:	79bb      	ldrb	r3, [r7, #6]
 800e496:	3301      	adds	r3, #1
 800e498:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800e49a:	79ba      	ldrb	r2, [r7, #6]
 800e49c:	7b3b      	ldrb	r3, [r7, #12]
 800e49e:	1ad2      	subs	r2, r2, r3
 800e4a0:	793b      	ldrb	r3, [r7, #4]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d105      	bne.n	800e4b2 <OLED_ShowChar+0xf6>
			{
				y = y0;
 800e4a6:	7b3b      	ldrb	r3, [r7, #12]
 800e4a8:	71bb      	strb	r3, [r7, #6]
				x++;
 800e4aa:	79fb      	ldrb	r3, [r7, #7]
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	71fb      	strb	r3, [r7, #7]
				break;
 800e4b0:	e005      	b.n	800e4be <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800e4b2:	7bbb      	ldrb	r3, [r7, #14]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	73bb      	strb	r3, [r7, #14]
 800e4b8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ba:	2b07      	cmp	r3, #7
 800e4bc:	d9d6      	bls.n	800e46c <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800e4be:	7bfb      	ldrb	r3, [r7, #15]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	73fb      	strb	r3, [r7, #15]
 800e4c4:	7bfa      	ldrb	r2, [r7, #15]
 800e4c6:	7afb      	ldrb	r3, [r7, #11]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d3a3      	bcc.n	800e414 <OLED_ShowChar+0x58>
 800e4cc:	e000      	b.n	800e4d0 <OLED_ShowChar+0x114>
			return;
 800e4ce:	bf00      	nop
			}
		}
	}
}
 800e4d0:	3714      	adds	r7, #20
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd90      	pop	{r4, r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	080148fc 	.word	0x080148fc
 800e4dc:	08014d70 	.word	0x08014d70
 800e4e0:	08015360 	.word	0x08015360

0800e4e4 <OLED_ShowString>:
// 显示字符串
// x,y:起点坐标
// size1:字体大小
//*chr:字符串起始地址
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	603a      	str	r2, [r7, #0]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	71fb      	strb	r3, [r7, #7]
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	71bb      	strb	r3, [r7, #6]
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800e4fa:	e01b      	b.n	800e534 <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	781a      	ldrb	r2, [r3, #0]
 800e500:	797b      	ldrb	r3, [r7, #5]
 800e502:	79b9      	ldrb	r1, [r7, #6]
 800e504:	79f8      	ldrb	r0, [r7, #7]
 800e506:	f7ff ff59 	bl	800e3bc <OLED_ShowChar>
		x += size1 / 2;
 800e50a:	797b      	ldrb	r3, [r7, #5]
 800e50c:	085b      	lsrs	r3, r3, #1
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	79fb      	ldrb	r3, [r7, #7]
 800e512:	4413      	add	r3, r2
 800e514:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800e516:	79fa      	ldrb	r2, [r7, #7]
 800e518:	797b      	ldrb	r3, [r7, #5]
 800e51a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800e51e:	429a      	cmp	r2, r3
 800e520:	dd05      	ble.n	800e52e <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800e522:	2302      	movs	r3, #2
 800e524:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800e526:	79ba      	ldrb	r2, [r7, #6]
 800e528:	797b      	ldrb	r3, [r7, #5]
 800e52a:	4413      	add	r3, r2
 800e52c:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	3301      	adds	r3, #1
 800e532:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	2b1f      	cmp	r3, #31
 800e53a:	d903      	bls.n	800e544 <OLED_ShowString+0x60>
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	2b7e      	cmp	r3, #126	@ 0x7e
 800e542:	d9db      	bls.n	800e4fc <OLED_ShowString+0x18>
	}
}
 800e544:	bf00      	nop
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <OLED_Init>:
	OLED_ShowString(2, 2, str, 12);
	OLED_Refresh();
}
// OLED的初始化
void OLED_Init(void)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800e550:	2200      	movs	r2, #0
 800e552:	2120      	movs	r1, #32
 800e554:	483f      	ldr	r0, [pc, #252]	@ (800e654 <OLED_Init+0x108>)
 800e556:	f7f4 f89f 	bl	8002698 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800e55a:	20c8      	movs	r0, #200	@ 0xc8
 800e55c:	f7f1 ff9e 	bl	800049c <HAL_Delay>
	OLED_RES_Set();
 800e560:	2201      	movs	r2, #1
 800e562:	2120      	movs	r1, #32
 800e564:	483b      	ldr	r0, [pc, #236]	@ (800e654 <OLED_Init+0x108>)
 800e566:	f7f4 f897 	bl	8002698 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800e56a:	2100      	movs	r1, #0
 800e56c:	20ae      	movs	r0, #174	@ 0xae
 800e56e:	f7ff fe11 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800e572:	2100      	movs	r1, #0
 800e574:	2000      	movs	r0, #0
 800e576:	f7ff fe0d 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800e57a:	2100      	movs	r1, #0
 800e57c:	2010      	movs	r0, #16
 800e57e:	f7ff fe09 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800e582:	2100      	movs	r1, #0
 800e584:	2040      	movs	r0, #64	@ 0x40
 800e586:	f7ff fe05 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800e58a:	2100      	movs	r1, #0
 800e58c:	2081      	movs	r0, #129	@ 0x81
 800e58e:	f7ff fe01 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800e592:	2100      	movs	r1, #0
 800e594:	20cf      	movs	r0, #207	@ 0xcf
 800e596:	f7ff fdfd 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800e59a:	2100      	movs	r1, #0
 800e59c:	20a1      	movs	r0, #161	@ 0xa1
 800e59e:	f7ff fdf9 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	20c8      	movs	r0, #200	@ 0xc8
 800e5a6:	f7ff fdf5 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	20a6      	movs	r0, #166	@ 0xa6
 800e5ae:	f7ff fdf1 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	20a8      	movs	r0, #168	@ 0xa8
 800e5b6:	f7ff fded 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800e5ba:	2100      	movs	r1, #0
 800e5bc:	203f      	movs	r0, #63	@ 0x3f
 800e5be:	f7ff fde9 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800e5c2:	2100      	movs	r1, #0
 800e5c4:	20d3      	movs	r0, #211	@ 0xd3
 800e5c6:	f7ff fde5 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	f7ff fde1 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	20d5      	movs	r0, #213	@ 0xd5
 800e5d6:	f7ff fddd 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 800e5da:	2100      	movs	r1, #0
 800e5dc:	2080      	movs	r0, #128	@ 0x80
 800e5de:	f7ff fdd9 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	20d9      	movs	r0, #217	@ 0xd9
 800e5e6:	f7ff fdd5 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	20f1      	movs	r0, #241	@ 0xf1
 800e5ee:	f7ff fdd1 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	20da      	movs	r0, #218	@ 0xda
 800e5f6:	f7ff fdcd 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	2012      	movs	r0, #18
 800e5fe:	f7ff fdc9 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 800e602:	2100      	movs	r1, #0
 800e604:	20db      	movs	r0, #219	@ 0xdb
 800e606:	f7ff fdc5 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 800e60a:	2100      	movs	r1, #0
 800e60c:	2040      	movs	r0, #64	@ 0x40
 800e60e:	f7ff fdc1 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800e612:	2100      	movs	r1, #0
 800e614:	2020      	movs	r0, #32
 800e616:	f7ff fdbd 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 800e61a:	2100      	movs	r1, #0
 800e61c:	2002      	movs	r0, #2
 800e61e:	f7ff fdb9 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 800e622:	2100      	movs	r1, #0
 800e624:	208d      	movs	r0, #141	@ 0x8d
 800e626:	f7ff fdb5 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 800e62a:	2100      	movs	r1, #0
 800e62c:	2014      	movs	r0, #20
 800e62e:	f7ff fdb1 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800e632:	2100      	movs	r1, #0
 800e634:	20a4      	movs	r0, #164	@ 0xa4
 800e636:	f7ff fdad 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 800e63a:	2100      	movs	r1, #0
 800e63c:	20a6      	movs	r0, #166	@ 0xa6
 800e63e:	f7ff fda9 	bl	800e194 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 800e642:	2100      	movs	r1, #0
 800e644:	20af      	movs	r0, #175	@ 0xaf
 800e646:	f7ff fda5 	bl	800e194 <OLED_WR_Byte>
	OLED_Clear();
 800e64a:	f7ff fe13 	bl	800e274 <OLED_Clear>
}
 800e64e:	bf00      	nop
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	58020800 	.word	0x58020800

0800e658 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 800e658:	b480      	push	{r7}
 800e65a:	b087      	sub	sp, #28
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6178      	str	r0, [r7, #20]
 800e660:	ed87 0a04 	vstr	s0, [r7, #16]
 800e664:	edc7 0a03 	vstr	s1, [r7, #12]
 800e668:	ed87 1a02 	vstr	s2, [r7, #8]
 800e66c:	edc7 1a01 	vstr	s3, [r7, #4]
 800e670:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	693a      	ldr	r2, [r7, #16]
 800e678:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	68fa      	ldr	r2, [r7, #12]
 800e67e:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0;
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	f04f 0200 	mov.w	r2, #0
 800e698:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0;
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	f04f 0200 	mov.w	r2, #0
 800e6a0:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0;
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	f04f 0200 	mov.w	r2, #0
 800e6a8:	615a      	str	r2, [r3, #20]
}
 800e6aa:	bf00      	nop
 800e6ac:	371c      	adds	r7, #28
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr

0800e6b6 <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b085      	sub	sp, #20
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	60f8      	str	r0, [r7, #12]
 800e6be:	ed87 0a02 	vstr	s0, [r7, #8]
 800e6c2:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 800e6c6:	ed97 7a02 	vldr	s14, [r7, #8]
 800e6ca:	edd7 7a01 	vldr	s15, [r7, #4]
 800e6ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	ed93 7a06 	vldr	s14, [r3, #24]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	edd3 6a00 	vldr	s13, [r3]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	ed93 6a03 	vldr	s12, [r3, #12]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	edd3 7a04 	vldr	s15, [r3, #16]
 800e6f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e6f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	ed93 6a01 	vldr	s12, [r3, #4]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	edd3 7a03 	vldr	s15, [r3, #12]
 800e704:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e708:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	ed93 6a02 	vldr	s12, [r3, #8]
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	edd3 5a03 	vldr	s11, [r3, #12]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	edd3 7a04 	vldr	s15, [r3, #16]
 800e71e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e722:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	edd3 7a05 	vldr	s15, [r3, #20]
 800e72c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800e730:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	691a      	ldr	r2, [r3, #16]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	68da      	ldr	r2, [r3, #12]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	ed93 7a06 	vldr	s14, [r3, #24]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	edd3 7a07 	vldr	s15, [r3, #28]
 800e75e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e766:	dd04      	ble.n	800e772 <pid+0xbc>
		pid->out = pid->Max;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	69da      	ldr	r2, [r3, #28]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 800e770:	e00f      	b.n	800e792 <pid+0xdc>
	else if (pid->out < pid->Min)
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	ed93 7a06 	vldr	s14, [r3, #24]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	edd3 7a08 	vldr	s15, [r3, #32]
 800e77e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e786:	d400      	bmi.n	800e78a <pid+0xd4>
}
 800e788:	e003      	b.n	800e792 <pid+0xdc>
		pid->out = pid->Min;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6a1a      	ldr	r2, [r3, #32]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	619a      	str	r2, [r3, #24]
}
 800e792:	bf00      	nop
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
	...

0800e7a0 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V *signal, float f, uint16_t F, float Umax)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	ed87 0a02 	vstr	s0, [r7, #8]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	edc7 0a00 	vstr	s1, [r7]
 800e7b2:	80fb      	strh	r3, [r7, #6]
    // 初始化赋值
    signal->input[0] = 0.f;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f04f 0200 	mov.w	r2, #0
 800e7ba:	601a      	str	r2, [r3, #0]
    signal->input[1] = 0.f;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f04f 0200 	mov.w	r2, #0
 800e7c2:	605a      	str	r2, [r3, #4]
    signal->input[2] = 0.f;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f04f 0200 	mov.w	r2, #0
 800e7ca:	609a      	str	r2, [r3, #8]

    signal->sogi->a[1] = 0.f;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7d0:	f04f 0200 	mov.w	r2, #0
 800e7d4:	605a      	str	r2, [r3, #4]
    signal->sogi->a[2] = 0.f;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7da:	f04f 0200 	mov.w	r2, #0
 800e7de:	609a      	str	r2, [r3, #8]
    signal->sogi->b[1] = 0.f;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7e4:	f04f 0200 	mov.w	r2, #0
 800e7e8:	611a      	str	r2, [r3, #16]
    signal->sogi->b[2] = 0.f;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7ee:	f04f 0200 	mov.w	r2, #0
 800e7f2:	615a      	str	r2, [r3, #20]

    signal->theta = 0.f;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f04f 0200 	mov.w	r2, #0
 800e7fa:	61da      	str	r2, [r3, #28]
    signal->omiga0 = 2 * PI * f; // f典型值50
 800e7fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800e800:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 800e9e0 <pll_Init_V+0x240>
 800e804:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->Ts = 1.f / F;        // F典型值20000
 800e80e:	88fb      	ldrh	r3, [r7, #6]
 800e810:	ee07 3a90 	vmov	s15, r3
 800e814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e818:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e81c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    signal->phase = 0.f;         // 设定相位差
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f04f 0200 	mov.w	r2, #0
 800e82c:	621a      	str	r2, [r3, #32]
    // 初始化pid参数
    float ki = signal->omiga0 * signal->omiga0 / Umax;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e83a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800e83e:	ed97 7a00 	vldr	s14, [r7]
 800e842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e846:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(Umax * ki) / Umax;
 800e84a:	ed97 7a00 	vldr	s14, [r7]
 800e84e:	edd7 7a05 	vldr	s15, [r7, #20]
 800e852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e856:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e85a:	eeb0 0b47 	vmov.f64	d0, d7
 800e85e:	f005 fe6f 	bl	8014540 <sqrt>
 800e862:	eeb0 7b40 	vmov.f64	d7, d0
 800e866:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 800e9d8 <pll_Init_V+0x238>
 800e86a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800e86e:	edd7 7a00 	vldr	s15, [r7]
 800e872:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800e876:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800e87a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e87e:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init(signal->pid, kp, ki, 0, 50 * PI, -20 * PI);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e886:	ed9f 2a57 	vldr	s4, [pc, #348]	@ 800e9e4 <pll_Init_V+0x244>
 800e88a:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800e9e8 <pll_Init_V+0x248>
 800e88e:	ed9f 1a57 	vldr	s2, [pc, #348]	@ 800e9ec <pll_Init_V+0x24c>
 800e892:	edd7 0a05 	vldr	s1, [r7, #20]
 800e896:	ed97 0a04 	vldr	s0, [r7, #16]
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7ff fedc 	bl	800e658 <pid_Init>
    // 计算sogi中间量
    signal->sogi->k = 1.414f;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8a4:	4a52      	ldr	r2, [pc, #328]	@ (800e9f0 <pll_Init_V+0x250>)
 800e8a6:	619a      	str	r2, [r3, #24]
    signal->sogi->lamda = 0.5f * signal->omiga0 * signal->Ts;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e8ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e8b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8c4:	edc3 7a07 	vstr	s15, [r3, #28]
    signal->sogi->x = 2.f * signal->sogi->k * signal->omiga0 * signal->Ts;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8cc:	edd3 7a06 	vldr	s15, [r3, #24]
 800e8d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e8da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8ec:	edc3 7a08 	vstr	s15, [r3, #32]
    signal->sogi->y = signal->omiga0 * signal->Ts * signal->omiga0 * signal->Ts;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e8fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e914:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e918:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->sogi->b0 = signal->sogi->x / (signal->sogi->x + signal->sogi->y + 4);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e920:	edd3 6a08 	vldr	s13, [r3, #32]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e928:	ed93 7a08 	vldr	s14, [r3, #32]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e930:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e934:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e938:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e93c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e948:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    signal->sogi->a1 = (8 - 2.f * signal->sogi->y) / (signal->sogi->x + signal->sogi->y + 4);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e950:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e954:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e958:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800e95c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e964:	ed93 7a08 	vldr	s14, [r3, #32]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e96c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e970:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e974:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e978:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e984:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    signal->sogi->a2 = (signal->sogi->x - signal->sogi->y - 4) / (signal->sogi->x + signal->sogi->y + 4);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e98c:	ed93 7a08 	vldr	s14, [r3, #32]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e994:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e99c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e9a0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9a8:	ed93 7a08 	vldr	s14, [r3, #32]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9b0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e9b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9b8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e9bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9c8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800e9cc:	bf00      	nop
 800e9ce:	3718      	adds	r7, #24
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	f3af 8000 	nop.w
 800e9d8:	667f3bcd 	.word	0x667f3bcd
 800e9dc:	3ff6a09e 	.word	0x3ff6a09e
 800e9e0:	40c90fdb 	.word	0x40c90fdb
 800e9e4:	c27b53d2 	.word	0xc27b53d2
 800e9e8:	431d1463 	.word	0x431d1463
 800e9ec:	00000000 	.word	0x00000000
 800e9f0:	3fb4fdf4 	.word	0x3fb4fdf4

0800e9f4 <pll_Init_I>:
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I *signal, float f, uint16_t F)
#endif
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	ed87 0a02 	vstr	s0, [r7, #8]
 800ea00:	460b      	mov	r3, r1
 800ea02:	80fb      	strh	r3, [r7, #6]
    // 初始化赋值
    signal->input[0] = 0.f;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f04f 0200 	mov.w	r2, #0
 800ea0a:	601a      	str	r2, [r3, #0]
    signal->input[1] = 0.f;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f04f 0200 	mov.w	r2, #0
 800ea12:	605a      	str	r2, [r3, #4]
    signal->input[2] = 0.f;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f04f 0200 	mov.w	r2, #0
 800ea1a:	609a      	str	r2, [r3, #8]

    signal->sogi->a[1] = 0.f;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea20:	f04f 0200 	mov.w	r2, #0
 800ea24:	605a      	str	r2, [r3, #4]
    signal->sogi->a[2] = 0.f;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea2a:	f04f 0200 	mov.w	r2, #0
 800ea2e:	609a      	str	r2, [r3, #8]
    signal->sogi->b[1] = 0.f;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea34:	f04f 0200 	mov.w	r2, #0
 800ea38:	611a      	str	r2, [r3, #16]
    signal->sogi->b[2] = 0.f;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea3e:	f04f 0200 	mov.w	r2, #0
 800ea42:	615a      	str	r2, [r3, #20]

    signal->omiga0 = 2.f * PI * f; // f典型值50
 800ea44:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea48:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800ebe4 <pll_Init_I+0x1f0>
 800ea4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->Ts = 1.f / F;          // F典型值20000
 800ea56:	88fb      	ldrh	r3, [r7, #6]
 800ea58:	ee07 3a90 	vmov	s15, r3
 800ea5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ea60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    signal->pr->a2 = (signal->omiga0 * signal->omiga0 * signal->Ts * signal->Ts - 4 * signal->omigaC * signal->Ts + 4) / signal->pr->a0;
    signal->pr->b0 = (pr_kp * (signal->omiga0 * signal->omiga0 * signal->Ts * signal->Ts + 4 * signal->omigaC * signal->Ts + 4) + 4 * pr_kr * signal->omigaC * signal->Ts) / signal->pr->a0;
    signal->pr->b1 = (pr_kp * (2 * signal->omiga0 * signal->omiga0 * signal->Ts * signal->Ts - 8)) / signal->pr->a0;
    signal->pr->b2 = (pr_kp * (signal->omiga0 * signal->omiga0 * signal->Ts * signal->Ts - 4 * signal->omigaC * signal->Ts + 4) - 4 * pr_kr * signal->omigaC * signal->Ts) / signal->pr->a0;
#else
    signal->L = 0.0043f; // 4.3mH
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	4a5d      	ldr	r2, [pc, #372]	@ (800ebe8 <pll_Init_I+0x1f4>)
 800ea72:	651a      	str	r2, [r3, #80]	@ 0x50
    pid_Init(signal->pid_d, 0.05f, 0.05f, 0, 140.f, -140.f);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea78:	ed9f 2a5c 	vldr	s4, [pc, #368]	@ 800ebec <pll_Init_I+0x1f8>
 800ea7c:	eddf 1a5c 	vldr	s3, [pc, #368]	@ 800ebf0 <pll_Init_I+0x1fc>
 800ea80:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 800ebf4 <pll_Init_I+0x200>
 800ea84:	eddf 0a5c 	vldr	s1, [pc, #368]	@ 800ebf8 <pll_Init_I+0x204>
 800ea88:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 800ebf8 <pll_Init_I+0x204>
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7ff fde3 	bl	800e658 <pid_Init>
    pid_Init(signal->pid_q, 0.05f, 0.002f, 0, 160.f, -160.f);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea96:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 800ebfc <pll_Init_I+0x208>
 800ea9a:	eddf 1a59 	vldr	s3, [pc, #356]	@ 800ec00 <pll_Init_I+0x20c>
 800ea9e:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 800ebf4 <pll_Init_I+0x200>
 800eaa2:	eddf 0a58 	vldr	s1, [pc, #352]	@ 800ec04 <pll_Init_I+0x210>
 800eaa6:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 800ebf8 <pll_Init_I+0x204>
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7ff fdd4 	bl	800e658 <pid_Init>
#endif
    // 计算sogi中间量
    signal->sogi->k = 1.414f; // 阻尼比典型值1.414
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eab4:	4a54      	ldr	r2, [pc, #336]	@ (800ec08 <pll_Init_I+0x214>)
 800eab6:	619a      	str	r2, [r3, #24]
    signal->sogi->lamda = 0.5f * signal->omiga0 * signal->Ts;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800eabe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800eac2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ead0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ead4:	edc3 7a07 	vstr	s15, [r3, #28]
    signal->sogi->x = 2.f * signal->sogi->k * signal->omiga0 * signal->Ts;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eadc:	edd3 7a06 	vldr	s15, [r3, #24]
 800eae0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800eaea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eaf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eafc:	edc3 7a08 	vstr	s15, [r3, #32]
    signal->sogi->y = signal->omiga0 * signal->Ts * signal->omiga0 * signal->Ts;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800eb0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800eb16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb28:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->sogi->b0 = signal->sogi->x / (signal->sogi->x + signal->sogi->y + 4);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb30:	edd3 6a08 	vldr	s13, [r3, #32]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb38:	ed93 7a08 	vldr	s14, [r3, #32]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb40:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800eb44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb48:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800eb4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb58:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    signal->sogi->a1 = (8 - 2.f * signal->sogi->y) / (signal->sogi->x + signal->sogi->y + 4);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb60:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800eb64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eb68:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800eb6c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb74:	ed93 7a08 	vldr	s14, [r3, #32]
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb7c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800eb80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb84:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800eb88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb94:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    signal->sogi->a2 = (signal->sogi->x - signal->sogi->y - 4) / (signal->sogi->x + signal->sogi->y + 4);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb9c:	ed93 7a08 	vldr	s14, [r3, #32]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eba4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800eba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebac:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800ebb0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebb8:	ed93 7a08 	vldr	s14, [r3, #32]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebc0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ebc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebc8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800ebcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebd8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800ebdc:	bf00      	nop
 800ebde:	3710      	adds	r7, #16
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	40c90fdb 	.word	0x40c90fdb
 800ebe8:	3b8ce704 	.word	0x3b8ce704
 800ebec:	c30c0000 	.word	0xc30c0000
 800ebf0:	430c0000 	.word	0x430c0000
 800ebf4:	00000000 	.word	0x00000000
 800ebf8:	3d4ccccd 	.word	0x3d4ccccd
 800ebfc:	c3200000 	.word	0xc3200000
 800ec00:	43200000 	.word	0x43200000
 800ec04:	3b03126f 	.word	0x3b03126f
 800ec08:	3fb4fdf4 	.word	0x3fb4fdf4
 800ec0c:	00000000 	.word	0x00000000

0800ec10 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 800ec10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec14:	ed2d 8b02 	vpush	{d8}
 800ec18:	b088      	sub	sp, #32
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_V->sogi, signal_V->input);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	4611      	mov	r1, r2
 800ec26:	4618      	mov	r0, r3
 800ec28:	f000 f9c6 	bl	800efb8 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->sogi->a[0], signal_V->sogi->b[0], &signal_V->park_d, &signal_V->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec30:	f8d3 8000 	ldr.w	r8, [r3]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec38:	68de      	ldr	r6, [r3, #12]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f103 0514 	add.w	r5, r3, #20
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f103 0418 	add.w	r4, r3, #24
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	edd3 7a07 	vldr	s15, [r3, #28]
 800ec4c:	eeb0 0a67 	vmov.f32	s0, s15
 800ec50:	f002 fe10 	bl	8011874 <arm_sin_f32>
 800ec54:	eeb0 8a40 	vmov.f32	s16, s0
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	edd3 7a07 	vldr	s15, [r3, #28]
 800ec5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ec62:	f002 fe4d 	bl	8011900 <arm_cos_f32>
 800ec66:	eef0 7a40 	vmov.f32	s15, s0
 800ec6a:	f8c7 801c 	str.w	r8, [r7, #28]
 800ec6e:	61be      	str	r6, [r7, #24]
 800ec70:	617d      	str	r5, [r7, #20]
 800ec72:	613c      	str	r4, [r7, #16]
 800ec74:	ed87 8a03 	vstr	s16, [r7, #12]
 800ec78:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800ec7c:	ed97 7a07 	vldr	s14, [r7, #28]
 800ec80:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec88:	edd7 6a06 	vldr	s13, [r7, #24]
 800ec8c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ec90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800ec9e:	edd7 7a07 	vldr	s15, [r7, #28]
 800eca2:	eeb1 7a67 	vneg.f32	s14, s15
 800eca6:	edd7 7a03 	vldr	s15, [r7, #12]
 800ecaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ecae:	edd7 6a06 	vldr	s13, [r7, #24]
 800ecb2:	edd7 7a02 	vldr	s15, [r7, #8]
 800ecb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	edc3 7a00 	vstr	s15, [r3]
  }
 800ecc4:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->park_q, signal_V->phase);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	edd3 7a06 	vldr	s15, [r3, #24]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	ed93 7a08 	vldr	s14, [r3, #32]
 800ecd6:	eef0 0a47 	vmov.f32	s1, s14
 800ecda:	eeb0 0a67 	vmov.f32	s0, s15
 800ecde:	4610      	mov	r0, r2
 800ece0:	f7ff fce9 	bl	800e6b6 <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->omiga0) * signal_V->Ts;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	ed93 7a07 	vldr	s14, [r3, #28]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecee:	edd3 6a06 	vldr	s13, [r3, #24]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ecf8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800ed02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	edc3 7a07 	vstr	s15, [r3, #28]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	edd3 7a07 	vldr	s15, [r3, #28]
 800ed16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ed1a:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 800ed48 <pll_Control_V+0x138>
 800ed1e:	eeb0 0b47 	vmov.f64	d0, d7
 800ed22:	f005 fbe9 	bl	80144f8 <fmod>
 800ed26:	eeb0 7b40 	vmov.f64	d7, d0
 800ed2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800ed34:	bf00      	nop
 800ed36:	3720      	adds	r7, #32
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	ecbd 8b02 	vpop	{d8}
 800ed3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed42:	bf00      	nop
 800ed44:	f3af 8000 	nop.w
 800ed48:	60000000 	.word	0x60000000
 800ed4c:	401921fb 	.word	0x401921fb

0800ed50 <pll_Control_I>:
 * @param Iset 电流设定值(有效值)
 * @param phase 相位设置
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float phase)
#endif
{
 800ed50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed54:	ed2d 8b02 	vpush	{d8}
 800ed58:	b090      	sub	sp, #64	@ 0x40
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	60f8      	str	r0, [r7, #12]
 800ed5e:	60b9      	str	r1, [r7, #8]
 800ed60:	ed87 0a01 	vstr	s0, [r7, #4]
 800ed64:	edc7 0a00 	vstr	s1, [r7]
    pll_Pr(signal_I->pr, signal_I->input[0], 1.414f * arm_cos_f32(signal_V->theta + phase_set * PI));
#else
    static float Uabd;
    static float Uabq;
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_I->sogi, signal_I->input);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	4611      	mov	r1, r2
 800ed70:	4618      	mov	r0, r3
 800ed72:	f000 f921 	bl	800efb8 <pll_Sogi>
    // 在电压的系上得出电流的dq值
    arm_park_f32(signal_I->sogi->a[0], signal_I->sogi->b[0], &signal_I->park_d, &signal_I->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed7a:	f8d3 8000 	ldr.w	r8, [r3]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed82:	68de      	ldr	r6, [r3, #12]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f103 0514 	add.w	r5, r3, #20
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f103 0418 	add.w	r4, r3, #24
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	edd3 7a07 	vldr	s15, [r3, #28]
 800ed96:	eeb0 0a67 	vmov.f32	s0, s15
 800ed9a:	f002 fd6b 	bl	8011874 <arm_sin_f32>
 800ed9e:	eeb0 8a40 	vmov.f32	s16, s0
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	edd3 7a07 	vldr	s15, [r3, #28]
 800eda8:	eeb0 0a67 	vmov.f32	s0, s15
 800edac:	f002 fda8 	bl	8011900 <arm_cos_f32>
 800edb0:	eef0 7a40 	vmov.f32	s15, s0
 800edb4:	f8c7 8024 	str.w	r8, [r7, #36]	@ 0x24
 800edb8:	623e      	str	r6, [r7, #32]
 800edba:	61fd      	str	r5, [r7, #28]
 800edbc:	61bc      	str	r4, [r7, #24]
 800edbe:	ed87 8a05 	vstr	s16, [r7, #20]
 800edc2:	edc7 7a04 	vstr	s15, [r7, #16]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800edc6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800edca:	edd7 7a04 	vldr	s15, [r7, #16]
 800edce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800edd2:	edd7 6a08 	vldr	s13, [r7, #32]
 800edd6:	edd7 7a05 	vldr	s15, [r7, #20]
 800edda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800edde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ede2:	69fb      	ldr	r3, [r7, #28]
 800ede4:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800ede8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800edec:	eeb1 7a67 	vneg.f32	s14, s15
 800edf0:	edd7 7a05 	vldr	s15, [r7, #20]
 800edf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800edf8:	edd7 6a08 	vldr	s13, [r7, #32]
 800edfc:	edd7 7a04 	vldr	s15, [r7, #16]
 800ee00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee08:	69bb      	ldr	r3, [r7, #24]
 800ee0a:	edc3 7a00 	vstr	s15, [r3]
  }
 800ee0e:	bf00      	nop
    // PI控制
    pid(signal_I->pid_d, Iset * 1.414, signal_I->peak); // 电流大小
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ee14:	edd7 7a01 	vldr	s15, [r7, #4]
 800ee18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ee1c:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 800ef98 <pll_Control_I+0x248>
 800ee20:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ee24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	ed93 7a03 	vldr	s14, [r3, #12]
 800ee2e:	eef0 0a47 	vmov.f32	s1, s14
 800ee32:	eeb0 0a67 	vmov.f32	s0, s15
 800ee36:	4610      	mov	r0, r2
 800ee38:	f7ff fc3d 	bl	800e6b6 <pid>
    pid(signal_I->pid_q, phase, signal_I->park_q);      // 相位
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	edd3 7a06 	vldr	s15, [r3, #24]
 800ee46:	eef0 0a67 	vmov.f32	s1, s15
 800ee4a:	ed97 0a00 	vldr	s0, [r7]
 800ee4e:	4610      	mov	r0, r2
 800ee50:	f7ff fc31 	bl	800e6b6 <pid>
    // 解耦调制
    Uabd = signal_V->park_d - signal_I->pid_d->out + signal_I->park_q * signal_I->omiga0 * signal_I->L;
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	ed93 7a05 	vldr	s14, [r3, #20]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee5e:	edd3 7a06 	vldr	s15, [r3, #24]
 800ee62:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	edd3 6a06 	vldr	s13, [r3, #24]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ee72:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800ee7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee84:	4b46      	ldr	r3, [pc, #280]	@ (800efa0 <pll_Control_I+0x250>)
 800ee86:	edc3 7a00 	vstr	s15, [r3]
    Uabq = signal_V->park_q - signal_I->pid_q->out - signal_I->park_d * signal_I->omiga0 * signal_I->L;
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	ed93 7a06 	vldr	s14, [r3, #24]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee94:	edd3 7a06 	vldr	s15, [r3, #24]
 800ee98:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	edd3 6a05 	vldr	s13, [r3, #20]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800eea8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800eeb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eeb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeba:	4b3a      	ldr	r3, [pc, #232]	@ (800efa4 <pll_Control_I+0x254>)
 800eebc:	edc3 7a00 	vstr	s15, [r3]
    // park逆变换
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_a, &signal_I->park_inv_b, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800eec0:	4b37      	ldr	r3, [pc, #220]	@ (800efa0 <pll_Control_I+0x250>)
 800eec2:	f8d3 8000 	ldr.w	r8, [r3]
 800eec6:	4b37      	ldr	r3, [pc, #220]	@ (800efa4 <pll_Control_I+0x254>)
 800eec8:	681e      	ldr	r6, [r3, #0]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f103 051c 	add.w	r5, r3, #28
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f103 0420 	add.w	r4, r3, #32
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	edd3 7a07 	vldr	s15, [r3, #28]
 800eedc:	eeb0 0a67 	vmov.f32	s0, s15
 800eee0:	f002 fcc8 	bl	8011874 <arm_sin_f32>
 800eee4:	eeb0 8a40 	vmov.f32	s16, s0
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	edd3 7a07 	vldr	s15, [r3, #28]
 800eeee:	eeb0 0a67 	vmov.f32	s0, s15
 800eef2:	f002 fd05 	bl	8011900 <arm_cos_f32>
 800eef6:	eef0 7a40 	vmov.f32	s15, s0
 800eefa:	f8c7 803c 	str.w	r8, [r7, #60]	@ 0x3c
 800eefe:	63be      	str	r6, [r7, #56]	@ 0x38
 800ef00:	637d      	str	r5, [r7, #52]	@ 0x34
 800ef02:	633c      	str	r4, [r7, #48]	@ 0x30
 800ef04:	ed87 8a0b 	vstr	s16, [r7, #44]	@ 0x2c
 800ef08:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 800ef0c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800ef10:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ef14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef18:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800ef1c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ef20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef2a:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 800ef2e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800ef32:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ef36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef3a:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800ef3e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ef42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef4c:	edc3 7a00 	vstr	s15, [r3]
  }
 800ef50:	bf00      	nop
    // 输出限幅
    if (signal_I->park_inv_a > 200.f)
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	edd3 7a07 	vldr	s15, [r3, #28]
 800ef58:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800efa8 <pll_Control_I+0x258>
 800ef5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef64:	dd03      	ble.n	800ef6e <pll_Control_I+0x21e>
        signal_I->park_inv_a = 200.f;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	4a10      	ldr	r2, [pc, #64]	@ (800efac <pll_Control_I+0x25c>)
 800ef6a:	61da      	str	r2, [r3, #28]
    else if (signal_I->park_inv_a < -200.f)
        signal_I->park_inv_a = -200.f;
#endif
}
 800ef6c:	e00d      	b.n	800ef8a <pll_Control_I+0x23a>
    else if (signal_I->park_inv_a < -200.f)
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	edd3 7a07 	vldr	s15, [r3, #28]
 800ef74:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800efb0 <pll_Control_I+0x260>
 800ef78:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef80:	d400      	bmi.n	800ef84 <pll_Control_I+0x234>
}
 800ef82:	e002      	b.n	800ef8a <pll_Control_I+0x23a>
        signal_I->park_inv_a = -200.f;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	4a0b      	ldr	r2, [pc, #44]	@ (800efb4 <pll_Control_I+0x264>)
 800ef88:	61da      	str	r2, [r3, #28]
}
 800ef8a:	bf00      	nop
 800ef8c:	3740      	adds	r7, #64	@ 0x40
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	ecbd 8b02 	vpop	{d8}
 800ef94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef98:	76c8b439 	.word	0x76c8b439
 800ef9c:	3ff69fbe 	.word	0x3ff69fbe
 800efa0:	24000774 	.word	0x24000774
 800efa4:	24000778 	.word	0x24000778
 800efa8:	43480000 	.word	0x43480000
 800efac:	43480000 	.word	0x43480000
 800efb0:	c3480000 	.word	0xc3480000
 800efb4:	c3480000 	.word	0xc3480000

0800efb8 <pll_Sogi>:
 * @brief Sogi变换
 * @param input 输入信号
 * @param sogi sogi指针
 */
void pll_Sogi(SOGI *sogi, float *input)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
    sogi->a[0] = sogi->b0 * input[0] - sogi->b0 * input[2] + sogi->a1 * sogi->a[1] + sogi->a2 * sogi->a[2];
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	edd3 7a00 	vldr	s15, [r3]
 800efce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	3308      	adds	r3, #8
 800efdc:	edd3 7a00 	vldr	s15, [r3]
 800efe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800efe4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	edd3 7a01 	vldr	s15, [r3, #4]
 800eff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	edd3 7a02 	vldr	s15, [r3, #8]
 800f008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f00c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	edc3 7a00 	vstr	s15, [r3]
    sogi->b[0] = sogi->lamda * sogi->b0 * (input[0] + 2 * input[1] + input[2]) + sogi->a1 * sogi->b[1] + sogi->a2 * sogi->b[2];
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	ed93 7a07 	vldr	s14, [r3, #28]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800f022:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	edd3 6a00 	vldr	s13, [r3]
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	3304      	adds	r3, #4
 800f030:	edd3 7a00 	vldr	s15, [r3]
 800f034:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f038:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	3308      	adds	r3, #8
 800f040:	edd3 7a00 	vldr	s15, [r3]
 800f044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	edd3 7a04 	vldr	s15, [r3, #16]
 800f058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f05c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	edd3 7a05 	vldr	s15, [r3, #20]
 800f06c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f070:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	edc3 7a03 	vstr	s15, [r3, #12]

    input[2] = input[1];
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	3308      	adds	r3, #8
 800f07e:	683a      	ldr	r2, [r7, #0]
 800f080:	6852      	ldr	r2, [r2, #4]
 800f082:	601a      	str	r2, [r3, #0]
    input[1] = input[0];
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	3304      	adds	r3, #4
 800f088:	683a      	ldr	r2, [r7, #0]
 800f08a:	6812      	ldr	r2, [r2, #0]
 800f08c:	601a      	str	r2, [r3, #0]
    sogi->a[2] = sogi->a[1];
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	685a      	ldr	r2, [r3, #4]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	609a      	str	r2, [r3, #8]
    sogi->a[1] = sogi->a[0];
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	605a      	str	r2, [r3, #4]
    sogi->b[2] = sogi->b[1];
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	691a      	ldr	r2, [r3, #16]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	615a      	str	r2, [r3, #20]
    sogi->b[1] = sogi->b[0];
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	68da      	ldr	r2, [r3, #12]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	611a      	str	r2, [r3, #16]
}
 800f0ae:	bf00      	nop
 800f0b0:	370c      	adds	r7, #12
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr
	...

0800f0bc <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b088      	sub	sp, #32
 800f0c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f0c2:	1d3b      	adds	r3, r7, #4
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	601a      	str	r2, [r3, #0]
 800f0c8:	605a      	str	r2, [r3, #4]
 800f0ca:	609a      	str	r2, [r3, #8]
 800f0cc:	60da      	str	r2, [r3, #12]
 800f0ce:	611a      	str	r2, [r3, #16]
 800f0d0:	615a      	str	r2, [r3, #20]
 800f0d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800f0d4:	4b28      	ldr	r3, [pc, #160]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f0d6:	4a29      	ldr	r2, [pc, #164]	@ (800f17c <MX_ADC3_Init+0xc0>)
 800f0d8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800f0da:	4b27      	ldr	r3, [pc, #156]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f0dc:	2200      	movs	r2, #0
 800f0de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800f0e0:	4b25      	ldr	r3, [pc, #148]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f0e6:	4b24      	ldr	r3, [pc, #144]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f0e8:	2204      	movs	r2, #4
 800f0ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800f0ec:	4b22      	ldr	r3, [pc, #136]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800f0f2:	4b21      	ldr	r3, [pc, #132]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800f0f8:	4b1f      	ldr	r3, [pc, #124]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800f0fe:	4b1e      	ldr	r3, [pc, #120]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f100:	2200      	movs	r2, #0
 800f102:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f104:	4b1c      	ldr	r3, [pc, #112]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f106:	2200      	movs	r2, #0
 800f108:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f10a:	4b1b      	ldr	r3, [pc, #108]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f10c:	2200      	movs	r2, #0
 800f10e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800f110:	4b19      	ldr	r3, [pc, #100]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f112:	2200      	movs	r2, #0
 800f114:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800f116:	4b18      	ldr	r3, [pc, #96]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f118:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f11c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800f11e:	4b16      	ldr	r3, [pc, #88]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f120:	2200      	movs	r2, #0
 800f122:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800f124:	4b14      	ldr	r3, [pc, #80]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f126:	2200      	movs	r2, #0
 800f128:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800f12c:	4812      	ldr	r0, [pc, #72]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f12e:	f7f1 fbed 	bl	800090c <HAL_ADC_Init>
 800f132:	4603      	mov	r3, r0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d001      	beq.n	800f13c <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800f138:	f001 f846 	bl	80101c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800f13c:	4b10      	ldr	r3, [pc, #64]	@ (800f180 <MX_ADC3_Init+0xc4>)
 800f13e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800f140:	2306      	movs	r3, #6
 800f142:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800f144:	2307      	movs	r3, #7
 800f146:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800f148:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800f14c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800f14e:	2304      	movs	r3, #4
 800f150:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800f156:	2300      	movs	r3, #0
 800f158:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800f15a:	1d3b      	adds	r3, r7, #4
 800f15c:	4619      	mov	r1, r3
 800f15e:	4806      	ldr	r0, [pc, #24]	@ (800f178 <MX_ADC3_Init+0xbc>)
 800f160:	f7f1 ff42 	bl	8000fe8 <HAL_ADC_ConfigChannel>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d001      	beq.n	800f16e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800f16a:	f001 f82d 	bl	80101c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800f16e:	bf00      	nop
 800f170:	3720      	adds	r7, #32
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	2400077c 	.word	0x2400077c
 800f17c:	58026000 	.word	0x58026000
 800f180:	cb840000 	.word	0xcb840000

0800f184 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b0b4      	sub	sp, #208	@ 0xd0
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f18c:	f107 0310 	add.w	r3, r7, #16
 800f190:	22c0      	movs	r2, #192	@ 0xc0
 800f192:	2100      	movs	r1, #0
 800f194:	4618      	mov	r0, r3
 800f196:	f003 fa10 	bl	80125ba <memset>
  if(adcHandle->Instance==ADC3)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4a1d      	ldr	r2, [pc, #116]	@ (800f214 <HAL_ADC_MspInit+0x90>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d132      	bne.n	800f20a <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800f1a4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800f1a8:	f04f 0300 	mov.w	r3, #0
 800f1ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 800f1b0:	2319      	movs	r3, #25
 800f1b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 800f1b4:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 800f1b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 800f1ba:	2307      	movs	r3, #7
 800f1bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800f1be:	2302      	movs	r3, #2
 800f1c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800f1c2:	2302      	movs	r3, #2
 800f1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f1d8:	f107 0310 	add.w	r3, r7, #16
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7f6 fbc7 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d001      	beq.n	800f1ec <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 800f1e8:	f000 ffee 	bl	80101c8 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800f1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f218 <HAL_ADC_MspInit+0x94>)
 800f1ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f1f2:	4a09      	ldr	r2, [pc, #36]	@ (800f218 <HAL_ADC_MspInit+0x94>)
 800f1f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f1f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f1fc:	4b06      	ldr	r3, [pc, #24]	@ (800f218 <HAL_ADC_MspInit+0x94>)
 800f1fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f202:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f206:	60fb      	str	r3, [r7, #12]
 800f208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800f20a:	bf00      	nop
 800f20c:	37d0      	adds	r7, #208	@ 0xd0
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	58026000 	.word	0x58026000
 800f218:	58024400 	.word	0x58024400

0800f21c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b08a      	sub	sp, #40	@ 0x28
 800f220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800f222:	1d3b      	adds	r3, r7, #4
 800f224:	2224      	movs	r2, #36	@ 0x24
 800f226:	2100      	movs	r1, #0
 800f228:	4618      	mov	r0, r3
 800f22a:	f003 f9c6 	bl	80125ba <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800f22e:	4b12      	ldr	r3, [pc, #72]	@ (800f278 <MX_DAC1_Init+0x5c>)
 800f230:	4a12      	ldr	r2, [pc, #72]	@ (800f27c <MX_DAC1_Init+0x60>)
 800f232:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800f234:	4810      	ldr	r0, [pc, #64]	@ (800f278 <MX_DAC1_Init+0x5c>)
 800f236:	f7f2 fe17 	bl	8001e68 <HAL_DAC_Init>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d001      	beq.n	800f244 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800f240:	f000 ffc2 	bl	80101c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800f244:	2300      	movs	r3, #0
 800f246:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800f248:	2300      	movs	r3, #0
 800f24a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800f24c:	2300      	movs	r3, #0
 800f24e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800f250:	2301      	movs	r3, #1
 800f252:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800f254:	2300      	movs	r3, #0
 800f256:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800f258:	1d3b      	adds	r3, r7, #4
 800f25a:	2200      	movs	r2, #0
 800f25c:	4619      	mov	r1, r3
 800f25e:	4806      	ldr	r0, [pc, #24]	@ (800f278 <MX_DAC1_Init+0x5c>)
 800f260:	f7f2 ff06 	bl	8002070 <HAL_DAC_ConfigChannel>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d001      	beq.n	800f26e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800f26a:	f000 ffad 	bl	80101c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800f26e:	bf00      	nop
 800f270:	3728      	adds	r7, #40	@ 0x28
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	240007e0 	.word	0x240007e0
 800f27c:	40007400 	.word	0x40007400

0800f280 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b08a      	sub	sp, #40	@ 0x28
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f288:	f107 0314 	add.w	r3, r7, #20
 800f28c:	2200      	movs	r2, #0
 800f28e:	601a      	str	r2, [r3, #0]
 800f290:	605a      	str	r2, [r3, #4]
 800f292:	609a      	str	r2, [r3, #8]
 800f294:	60da      	str	r2, [r3, #12]
 800f296:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4a1c      	ldr	r2, [pc, #112]	@ (800f310 <HAL_DAC_MspInit+0x90>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d131      	bne.n	800f306 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800f2a2:	4b1c      	ldr	r3, [pc, #112]	@ (800f314 <HAL_DAC_MspInit+0x94>)
 800f2a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f2a8:	4a1a      	ldr	r2, [pc, #104]	@ (800f314 <HAL_DAC_MspInit+0x94>)
 800f2aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f2ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800f2b2:	4b18      	ldr	r3, [pc, #96]	@ (800f314 <HAL_DAC_MspInit+0x94>)
 800f2b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f2b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f2bc:	613b      	str	r3, [r7, #16]
 800f2be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2c0:	4b14      	ldr	r3, [pc, #80]	@ (800f314 <HAL_DAC_MspInit+0x94>)
 800f2c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f2c6:	4a13      	ldr	r2, [pc, #76]	@ (800f314 <HAL_DAC_MspInit+0x94>)
 800f2c8:	f043 0301 	orr.w	r3, r3, #1
 800f2cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f2d0:	4b10      	ldr	r3, [pc, #64]	@ (800f314 <HAL_DAC_MspInit+0x94>)
 800f2d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f2d6:	f003 0301 	and.w	r3, r3, #1
 800f2da:	60fb      	str	r3, [r7, #12]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800f2de:	2310      	movs	r3, #16
 800f2e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f2e2:	2303      	movs	r3, #3
 800f2e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2ea:	f107 0314 	add.w	r3, r7, #20
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	4809      	ldr	r0, [pc, #36]	@ (800f318 <HAL_DAC_MspInit+0x98>)
 800f2f2:	f7f3 f809 	bl	8002308 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	210f      	movs	r1, #15
 800f2fa:	2036      	movs	r0, #54	@ 0x36
 800f2fc:	f7f2 fd14 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800f300:	2036      	movs	r0, #54	@ 0x36
 800f302:	f7f2 fd2b 	bl	8001d5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800f306:	bf00      	nop
 800f308:	3728      	adds	r7, #40	@ 0x28
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	40007400 	.word	0x40007400
 800f314:	58024400 	.word	0x58024400
 800f318:	58020000 	.word	0x58020000

0800f31c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b08c      	sub	sp, #48	@ 0x30
 800f320:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f322:	f107 031c 	add.w	r3, r7, #28
 800f326:	2200      	movs	r2, #0
 800f328:	601a      	str	r2, [r3, #0]
 800f32a:	605a      	str	r2, [r3, #4]
 800f32c:	609a      	str	r2, [r3, #8]
 800f32e:	60da      	str	r2, [r3, #12]
 800f330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f332:	4b79      	ldr	r3, [pc, #484]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f338:	4a77      	ldr	r2, [pc, #476]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f33a:	f043 0304 	orr.w	r3, r3, #4
 800f33e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f342:	4b75      	ldr	r3, [pc, #468]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	61bb      	str	r3, [r7, #24]
 800f34e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f350:	4b71      	ldr	r3, [pc, #452]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f356:	4a70      	ldr	r2, [pc, #448]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f35c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f360:	4b6d      	ldr	r3, [pc, #436]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f36a:	617b      	str	r3, [r7, #20]
 800f36c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f36e:	4b6a      	ldr	r3, [pc, #424]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f374:	4a68      	ldr	r2, [pc, #416]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f376:	f043 0301 	orr.w	r3, r3, #1
 800f37a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f37e:	4b66      	ldr	r3, [pc, #408]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f384:	f003 0301 	and.w	r3, r3, #1
 800f388:	613b      	str	r3, [r7, #16]
 800f38a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f38c:	4b62      	ldr	r3, [pc, #392]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f38e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f392:	4a61      	ldr	r2, [pc, #388]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f394:	f043 0302 	orr.w	r3, r3, #2
 800f398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f39c:	4b5e      	ldr	r3, [pc, #376]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f39e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f3a2:	f003 0302 	and.w	r3, r3, #2
 800f3a6:	60fb      	str	r3, [r7, #12]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800f3aa:	4b5b      	ldr	r3, [pc, #364]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f3ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f3b0:	4a59      	ldr	r2, [pc, #356]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f3b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f3ba:	4b57      	ldr	r3, [pc, #348]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f3bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f3c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3c4:	60bb      	str	r3, [r7, #8]
 800f3c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800f3c8:	4b53      	ldr	r3, [pc, #332]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f3ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f3ce:	4a52      	ldr	r2, [pc, #328]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f3d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f3d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f3d8:	4b4f      	ldr	r3, [pc, #316]	@ (800f518 <MX_GPIO_Init+0x1fc>)
 800f3da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f3de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3e2:	607b      	str	r3, [r7, #4]
 800f3e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	2120      	movs	r1, #32
 800f3ea:	484c      	ldr	r0, [pc, #304]	@ (800f51c <MX_GPIO_Init+0x200>)
 800f3ec:	f7f3 f954 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	2102      	movs	r1, #2
 800f3f4:	484a      	ldr	r0, [pc, #296]	@ (800f520 <MX_GPIO_Init+0x204>)
 800f3f6:	f7f3 f94f 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	2188      	movs	r1, #136	@ 0x88
 800f3fe:	4849      	ldr	r0, [pc, #292]	@ (800f524 <MX_GPIO_Init+0x208>)
 800f400:	f7f3 f94a 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800f404:	2200      	movs	r2, #0
 800f406:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f40a:	4847      	ldr	r0, [pc, #284]	@ (800f528 <MX_GPIO_Init+0x20c>)
 800f40c:	f7f3 f944 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800f410:	2201      	movs	r2, #1
 800f412:	2101      	movs	r1, #1
 800f414:	4845      	ldr	r0, [pc, #276]	@ (800f52c <MX_GPIO_Init+0x210>)
 800f416:	f7f3 f93f 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800f41a:	2200      	movs	r2, #0
 800f41c:	2140      	movs	r1, #64	@ 0x40
 800f41e:	4843      	ldr	r0, [pc, #268]	@ (800f52c <MX_GPIO_Init+0x210>)
 800f420:	f7f3 f93a 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800f424:	2320      	movs	r3, #32
 800f426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f428:	2301      	movs	r3, #1
 800f42a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f42c:	2300      	movs	r3, #0
 800f42e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800f430:	2301      	movs	r3, #1
 800f432:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800f434:	f107 031c 	add.w	r3, r7, #28
 800f438:	4619      	mov	r1, r3
 800f43a:	4838      	ldr	r0, [pc, #224]	@ (800f51c <MX_GPIO_Init+0x200>)
 800f43c:	f7f2 ff64 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800f440:	2302      	movs	r3, #2
 800f442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f444:	2301      	movs	r3, #1
 800f446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f448:	2300      	movs	r3, #0
 800f44a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800f44c:	2301      	movs	r3, #1
 800f44e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800f450:	f107 031c 	add.w	r3, r7, #28
 800f454:	4619      	mov	r1, r3
 800f456:	4832      	ldr	r0, [pc, #200]	@ (800f520 <MX_GPIO_Init+0x204>)
 800f458:	f7f2 ff56 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 800f45c:	2388      	movs	r3, #136	@ 0x88
 800f45e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f460:	2301      	movs	r3, #1
 800f462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f464:	2300      	movs	r3, #0
 800f466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f468:	2300      	movs	r3, #0
 800f46a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f46c:	f107 031c 	add.w	r3, r7, #28
 800f470:	4619      	mov	r1, r3
 800f472:	482c      	ldr	r0, [pc, #176]	@ (800f524 <MX_GPIO_Init+0x208>)
 800f474:	f7f2 ff48 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 800f478:	2340      	movs	r3, #64	@ 0x40
 800f47a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f47c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800f480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f482:	2301      	movs	r3, #1
 800f484:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 800f486:	f107 031c 	add.w	r3, r7, #28
 800f48a:	4619      	mov	r1, r3
 800f48c:	4825      	ldr	r0, [pc, #148]	@ (800f524 <MX_GPIO_Init+0x208>)
 800f48e:	f7f2 ff3b 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800f492:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f498:	2301      	movs	r3, #1
 800f49a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f49c:	2302      	movs	r3, #2
 800f49e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4a4:	f107 031c 	add.w	r3, r7, #28
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	481f      	ldr	r0, [pc, #124]	@ (800f528 <MX_GPIO_Init+0x20c>)
 800f4ac:	f7f2 ff2c 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f4c0:	f107 031c 	add.w	r3, r7, #28
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	4819      	ldr	r0, [pc, #100]	@ (800f52c <MX_GPIO_Init+0x210>)
 800f4c8:	f7f2 ff1e 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800f4cc:	2340      	movs	r3, #64	@ 0x40
 800f4ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800f4dc:	f107 031c 	add.w	r3, r7, #28
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	4812      	ldr	r0, [pc, #72]	@ (800f52c <MX_GPIO_Init+0x210>)
 800f4e4:	f7f2 ff10 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800f4e8:	2380      	movs	r3, #128	@ 0x80
 800f4ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f4f4:	f107 031c 	add.w	r3, r7, #28
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	480c      	ldr	r0, [pc, #48]	@ (800f52c <MX_GPIO_Init+0x210>)
 800f4fc:	f7f2 ff04 	bl	8002308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800f500:	2200      	movs	r2, #0
 800f502:	2100      	movs	r1, #0
 800f504:	2017      	movs	r0, #23
 800f506:	f7f2 fc0f 	bl	8001d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800f50a:	2017      	movs	r0, #23
 800f50c:	f7f2 fc26 	bl	8001d5c <HAL_NVIC_EnableIRQ>

}
 800f510:	bf00      	nop
 800f512:	3730      	adds	r7, #48	@ 0x30
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	58024400 	.word	0x58024400
 800f51c:	58020800 	.word	0x58020800
 800f520:	58020400 	.word	0x58020400
 800f524:	58021800 	.word	0x58021800
 800f528:	58020000 	.word	0x58020000
 800f52c:	58022000 	.word	0x58022000

0800f530 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800f534:	4b1b      	ldr	r3, [pc, #108]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f536:	4a1c      	ldr	r2, [pc, #112]	@ (800f5a8 <MX_I2C3_Init+0x78>)
 800f538:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A175AB;
 800f53a:	4b1a      	ldr	r3, [pc, #104]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f53c:	4a1b      	ldr	r2, [pc, #108]	@ (800f5ac <MX_I2C3_Init+0x7c>)
 800f53e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800f540:	4b18      	ldr	r3, [pc, #96]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f542:	2200      	movs	r2, #0
 800f544:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f546:	4b17      	ldr	r3, [pc, #92]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f548:	2201      	movs	r2, #1
 800f54a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f54c:	4b15      	ldr	r3, [pc, #84]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f54e:	2200      	movs	r2, #0
 800f550:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800f552:	4b14      	ldr	r3, [pc, #80]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f554:	2200      	movs	r2, #0
 800f556:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f558:	4b12      	ldr	r3, [pc, #72]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f55a:	2200      	movs	r2, #0
 800f55c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f55e:	4b11      	ldr	r3, [pc, #68]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f560:	2200      	movs	r2, #0
 800f562:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f564:	4b0f      	ldr	r3, [pc, #60]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f566:	2200      	movs	r2, #0
 800f568:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800f56a:	480e      	ldr	r0, [pc, #56]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f56c:	f7f3 f8e2 	bl	8002734 <HAL_I2C_Init>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800f576:	f000 fe27 	bl	80101c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800f57a:	2100      	movs	r1, #0
 800f57c:	4809      	ldr	r0, [pc, #36]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f57e:	f7f3 fe65 	bl	800324c <HAL_I2CEx_ConfigAnalogFilter>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d001      	beq.n	800f58c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800f588:	f000 fe1e 	bl	80101c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800f58c:	2100      	movs	r1, #0
 800f58e:	4805      	ldr	r0, [pc, #20]	@ (800f5a4 <MX_I2C3_Init+0x74>)
 800f590:	f7f3 fea7 	bl	80032e2 <HAL_I2CEx_ConfigDigitalFilter>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d001      	beq.n	800f59e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800f59a:	f000 fe15 	bl	80101c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800f59e:	bf00      	nop
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	240007f4 	.word	0x240007f4
 800f5a8:	40005c00 	.word	0x40005c00
 800f5ac:	30a175ab 	.word	0x30a175ab

0800f5b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b0ba      	sub	sp, #232	@ 0xe8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f5b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f5bc:	2200      	movs	r2, #0
 800f5be:	601a      	str	r2, [r3, #0]
 800f5c0:	605a      	str	r2, [r3, #4]
 800f5c2:	609a      	str	r2, [r3, #8]
 800f5c4:	60da      	str	r2, [r3, #12]
 800f5c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f5c8:	f107 0310 	add.w	r3, r7, #16
 800f5cc:	22c0      	movs	r2, #192	@ 0xc0
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f002 fff2 	bl	80125ba <memset>
  if(i2cHandle->Instance==I2C3)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	4a27      	ldr	r2, [pc, #156]	@ (800f678 <HAL_I2C_MspInit+0xc8>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d146      	bne.n	800f66e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800f5e0:	f04f 0208 	mov.w	r2, #8
 800f5e4:	f04f 0300 	mov.w	r3, #0
 800f5e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f5f2:	f107 0310 	add.w	r3, r7, #16
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7f6 f9ba 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d001      	beq.n	800f606 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800f602:	f000 fde1 	bl	80101c8 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800f606:	4b1d      	ldr	r3, [pc, #116]	@ (800f67c <HAL_I2C_MspInit+0xcc>)
 800f608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f60c:	4a1b      	ldr	r2, [pc, #108]	@ (800f67c <HAL_I2C_MspInit+0xcc>)
 800f60e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f612:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f616:	4b19      	ldr	r3, [pc, #100]	@ (800f67c <HAL_I2C_MspInit+0xcc>)
 800f618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f61c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f620:	60fb      	str	r3, [r7, #12]
 800f622:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800f624:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800f628:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f62c:	2312      	movs	r3, #18
 800f62e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f632:	2301      	movs	r3, #1
 800f634:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f638:	2303      	movs	r3, #3
 800f63a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800f63e:	2304      	movs	r3, #4
 800f640:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f644:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f648:	4619      	mov	r1, r3
 800f64a:	480d      	ldr	r0, [pc, #52]	@ (800f680 <HAL_I2C_MspInit+0xd0>)
 800f64c:	f7f2 fe5c 	bl	8002308 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800f650:	4b0a      	ldr	r3, [pc, #40]	@ (800f67c <HAL_I2C_MspInit+0xcc>)
 800f652:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f656:	4a09      	ldr	r2, [pc, #36]	@ (800f67c <HAL_I2C_MspInit+0xcc>)
 800f658:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f65c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800f660:	4b06      	ldr	r3, [pc, #24]	@ (800f67c <HAL_I2C_MspInit+0xcc>)
 800f662:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f66a:	60bb      	str	r3, [r7, #8]
 800f66c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800f66e:	bf00      	nop
 800f670:	37e8      	adds	r7, #232	@ 0xe8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	40005c00 	.word	0x40005c00
 800f67c:	58024400 	.word	0x58024400
 800f680:	58021c00 	.word	0x58021c00

0800f684 <_close>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// IDE版本错误临时修复
__attribute__((weak)) void _close(void) {}
 800f684:	b480      	push	{r7}
 800f686:	af00      	add	r7, sp, #0
 800f688:	bf00      	nop
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr

0800f692 <_lseek>:
__attribute__((weak)) void _lseek(void) {}
 800f692:	b480      	push	{r7}
 800f694:	af00      	add	r7, sp, #0
 800f696:	bf00      	nop
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr

0800f6a0 <_read>:
__attribute__((weak)) void _read(void) {}
 800f6a0:	b480      	push	{r7}
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	bf00      	nop
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr

0800f6ae <_write>:
__attribute__((weak)) void _write(void) {}
 800f6ae:	b480      	push	{r7}
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	bf00      	nop
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <_fstat>:
__attribute__((weak)) void _fstat(void) {}
 800f6bc:	b480      	push	{r7}
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	bf00      	nop
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <_getpid>:
__attribute__((weak)) void _getpid(void) {}
 800f6ca:	b480      	push	{r7}
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	bf00      	nop
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <_isatty>:
__attribute__((weak)) void _isatty(void) {}
 800f6d8:	b480      	push	{r7}
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	bf00      	nop
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <_kill>:
__attribute__((weak)) void _kill(void) {}
 800f6e6:	b480      	push	{r7}
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	bf00      	nop
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr

0800f6f4 <oled_Show>:
uint16_t temprature = 0;
float temp_result = 0;
// 显示函数
uint8_t textBuf[256] = {0};
void oled_Show(void)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b084      	sub	sp, #16
 800f6f8:	af02      	add	r7, sp, #8
#if !USER_DEBUG
  // IN:  输入
  sprintf((char *)textBuf, "IN :%7.2fV %6.2fA", signal_V->rms, signal_I->rms);
 800f6fa:	4b62      	ldr	r3, [pc, #392]	@ (800f884 <oled_Show+0x190>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	edd3 7a04 	vldr	s15, [r3, #16]
 800f702:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800f706:	4b60      	ldr	r3, [pc, #384]	@ (800f888 <oled_Show+0x194>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	edd3 7a04 	vldr	s15, [r3, #16]
 800f70e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f712:	ed8d 7b00 	vstr	d7, [sp]
 800f716:	ec53 2b16 	vmov	r2, r3, d6
 800f71a:	495c      	ldr	r1, [pc, #368]	@ (800f88c <oled_Show+0x198>)
 800f71c:	485c      	ldr	r0, [pc, #368]	@ (800f890 <oled_Show+0x19c>)
 800f71e:	f002 fee9 	bl	80124f4 <siprintf>
  OLED_ShowString(0, 0, textBuf, 12);
 800f722:	230c      	movs	r3, #12
 800f724:	4a5a      	ldr	r2, [pc, #360]	@ (800f890 <oled_Show+0x19c>)
 800f726:	2100      	movs	r1, #0
 800f728:	2000      	movs	r0, #0
 800f72a:	f7fe fedb 	bl	800e4e4 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // DC:  直流
  sprintf((char *)textBuf, "DC :%7.2fV %6.2fA", dcVolt, dcCurrent);
 800f72e:	4b59      	ldr	r3, [pc, #356]	@ (800f894 <oled_Show+0x1a0>)
 800f730:	edd3 7a00 	vldr	s15, [r3]
 800f734:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800f738:	4b57      	ldr	r3, [pc, #348]	@ (800f898 <oled_Show+0x1a4>)
 800f73a:	edd3 7a00 	vldr	s15, [r3]
 800f73e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f742:	ed8d 7b00 	vstr	d7, [sp]
 800f746:	ec53 2b16 	vmov	r2, r3, d6
 800f74a:	4954      	ldr	r1, [pc, #336]	@ (800f89c <oled_Show+0x1a8>)
 800f74c:	4850      	ldr	r0, [pc, #320]	@ (800f890 <oled_Show+0x19c>)
 800f74e:	f002 fed1 	bl	80124f4 <siprintf>
  OLED_ShowString(0, 12, textBuf, 12);
 800f752:	230c      	movs	r3, #12
 800f754:	4a4e      	ldr	r2, [pc, #312]	@ (800f890 <oled_Show+0x19c>)
 800f756:	210c      	movs	r1, #12
 800f758:	2000      	movs	r0, #0
 800f75a:	f7fe fec3 	bl	800e4e4 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // OUT: 输出
  sprintf((char *)textBuf, "OUT:%7.2fV %6.2fA", signal_V->input[0], signal_I->input[0]);
 800f75e:	4b49      	ldr	r3, [pc, #292]	@ (800f884 <oled_Show+0x190>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	edd3 7a00 	vldr	s15, [r3]
 800f766:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800f76a:	4b47      	ldr	r3, [pc, #284]	@ (800f888 <oled_Show+0x194>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	edd3 7a00 	vldr	s15, [r3]
 800f772:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f776:	ed8d 7b00 	vstr	d7, [sp]
 800f77a:	ec53 2b16 	vmov	r2, r3, d6
 800f77e:	4948      	ldr	r1, [pc, #288]	@ (800f8a0 <oled_Show+0x1ac>)
 800f780:	4843      	ldr	r0, [pc, #268]	@ (800f890 <oled_Show+0x19c>)
 800f782:	f002 feb7 	bl	80124f4 <siprintf>
  OLED_ShowString(0, 24, textBuf, 12);
 800f786:	230c      	movs	r3, #12
 800f788:	4a41      	ldr	r2, [pc, #260]	@ (800f890 <oled_Show+0x19c>)
 800f78a:	2118      	movs	r1, #24
 800f78c:	2000      	movs	r0, #0
 800f78e:	f7fe fea9 	bl	800e4e4 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // FAC: 功率因数
  sprintf((char *)textBuf, "FAC:%6.2f %9.2f", phase_set, signal_I->park_inv_a);
 800f792:	4b44      	ldr	r3, [pc, #272]	@ (800f8a4 <oled_Show+0x1b0>)
 800f794:	edd3 7a00 	vldr	s15, [r3]
 800f798:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800f79c:	4b3a      	ldr	r3, [pc, #232]	@ (800f888 <oled_Show+0x194>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	edd3 7a07 	vldr	s15, [r3, #28]
 800f7a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f7a8:	ed8d 7b00 	vstr	d7, [sp]
 800f7ac:	ec53 2b16 	vmov	r2, r3, d6
 800f7b0:	493d      	ldr	r1, [pc, #244]	@ (800f8a8 <oled_Show+0x1b4>)
 800f7b2:	4837      	ldr	r0, [pc, #220]	@ (800f890 <oled_Show+0x19c>)
 800f7b4:	f002 fe9e 	bl	80124f4 <siprintf>
  // sprintf((char *)textBuf, "FAC:%5.2f %8.0f", arm_cos_f32(0), signal_I->park_inv_a);
  // sprintf((char *)textBuf, "FAC: %4.2f %8.0f", arm_cos_f32(0), signal_I->pr->out[0]);
  OLED_ShowString(0, 36, textBuf, 12);
 800f7b8:	230c      	movs	r3, #12
 800f7ba:	4a35      	ldr	r2, [pc, #212]	@ (800f890 <oled_Show+0x19c>)
 800f7bc:	2124      	movs	r1, #36	@ 0x24
 800f7be:	2000      	movs	r0, #0
 800f7c0:	f7fe fe90 	bl	800e4e4 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // EFF: 效率
  float eff = (dcVolt * dcCurrent) / ((signal_V->rms * iirScale_20Hz / 1.4f) * (signal_I->rms * iirScale_20Hz / 1.414f)) * 100.f;
 800f7c4:	4b33      	ldr	r3, [pc, #204]	@ (800f894 <oled_Show+0x1a0>)
 800f7c6:	ed93 7a00 	vldr	s14, [r3]
 800f7ca:	4b33      	ldr	r3, [pc, #204]	@ (800f898 <oled_Show+0x1a4>)
 800f7cc:	edd3 7a00 	vldr	s15, [r3]
 800f7d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 800f7d4:	4b2b      	ldr	r3, [pc, #172]	@ (800f884 <oled_Show+0x190>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	ed93 7a04 	vldr	s14, [r3, #16]
 800f7dc:	4b33      	ldr	r3, [pc, #204]	@ (800f8ac <oled_Show+0x1b8>)
 800f7de:	edd3 7a00 	vldr	s15, [r3]
 800f7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7e6:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800f8b0 <oled_Show+0x1bc>
 800f7ea:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800f7ee:	4b26      	ldr	r3, [pc, #152]	@ (800f888 <oled_Show+0x194>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	ed93 6a04 	vldr	s12, [r3, #16]
 800f7f6:	4b2d      	ldr	r3, [pc, #180]	@ (800f8ac <oled_Show+0x1b8>)
 800f7f8:	edd3 7a00 	vldr	s15, [r3]
 800f7fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f800:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800f8b4 <oled_Show+0x1c0>
 800f804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f80c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f810:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800f8b8 <oled_Show+0x1c4>
 800f814:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f818:	edc7 7a01 	vstr	s15, [r7, #4]
  if (eff > 100.f)
 800f81c:	edd7 7a01 	vldr	s15, [r7, #4]
 800f820:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800f8b8 <oled_Show+0x1c4>
 800f824:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f82c:	dd02      	ble.n	800f834 <oled_Show+0x140>
    eff = 100.f;
 800f82e:	4b23      	ldr	r3, [pc, #140]	@ (800f8bc <oled_Show+0x1c8>)
 800f830:	607b      	str	r3, [r7, #4]
 800f832:	e009      	b.n	800f848 <oled_Show+0x154>
  else if (eff < 0.f)
 800f834:	edd7 7a01 	vldr	s15, [r7, #4]
 800f838:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f840:	d502      	bpl.n	800f848 <oled_Show+0x154>
    eff = 0.f;
 800f842:	f04f 0300 	mov.w	r3, #0
 800f846:	607b      	str	r3, [r7, #4]
  sprintf((char *)textBuf, "EFF:%7.2f%%%7.1fC", eff, temp_result);
 800f848:	edd7 7a01 	vldr	s15, [r7, #4]
 800f84c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800f850:	4b1b      	ldr	r3, [pc, #108]	@ (800f8c0 <oled_Show+0x1cc>)
 800f852:	edd3 7a00 	vldr	s15, [r3]
 800f856:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f85a:	ed8d 7b00 	vstr	d7, [sp]
 800f85e:	ec53 2b16 	vmov	r2, r3, d6
 800f862:	4918      	ldr	r1, [pc, #96]	@ (800f8c4 <oled_Show+0x1d0>)
 800f864:	480a      	ldr	r0, [pc, #40]	@ (800f890 <oled_Show+0x19c>)
 800f866:	f002 fe45 	bl	80124f4 <siprintf>
  OLED_ShowString(0, 48, textBuf, 12);
 800f86a:	230c      	movs	r3, #12
 800f86c:	4a08      	ldr	r2, [pc, #32]	@ (800f890 <oled_Show+0x19c>)
 800f86e:	2130      	movs	r1, #48	@ 0x30
 800f870:	2000      	movs	r0, #0
 800f872:	f7fe fe37 	bl	800e4e4 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
  OLED_Refresh();
 800f876:	f7fe fcc5 	bl	800e204 <OLED_Refresh>
  // 串口调试
  //  sprintf((char *)textBuf, "x=0,V=%.2f,I=%.2f,park_Iq=%.2f,park_Id=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,sogi_Ia=%.2f,sogi_Ib=%.2f,\n", signal_V->input[0], signal_I->input[0], signal_I->park_q, signal_I->park_d, signal_V->park_d, signal_V->park_q, signal_V->sogi->a[0], signal_V->sogi->b[0], signal_I->sogi->a[0], signal_I->sogi->b[0]);
  sprintf((char *)textBuf, "x=0,V=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,\n", signal_V->input[0], signal_V->park_d, signal_V->park_q, signal_V->sogi->a[0], signal_V->sogi->b[0]);
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
#endif
}
 800f87a:	bf00      	nop
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	20000000 	.word	0x20000000
 800f888:	20000004 	.word	0x20000004
 800f88c:	08014828 	.word	0x08014828
 800f890:	24000858 	.word	0x24000858
 800f894:	24000848 	.word	0x24000848
 800f898:	2400084c 	.word	0x2400084c
 800f89c:	0801483c 	.word	0x0801483c
 800f8a0:	08014850 	.word	0x08014850
 800f8a4:	24000770 	.word	0x24000770
 800f8a8:	08014864 	.word	0x08014864
 800f8ac:	080148f8 	.word	0x080148f8
 800f8b0:	3fb33333 	.word	0x3fb33333
 800f8b4:	3fb4fdf4 	.word	0x3fb4fdf4
 800f8b8:	42c80000 	.word	0x42c80000
 800f8bc:	42c80000 	.word	0x42c80000
 800f8c0:	24000854 	.word	0x24000854
 800f8c4:	08014874 	.word	0x08014874

0800f8c8 <key_Control>:
// 按键控制
void key_Control(void)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_7) == GPIO_PIN_RESET)
 800f8cc:	2180      	movs	r1, #128	@ 0x80
 800f8ce:	480d      	ldr	r0, [pc, #52]	@ (800f904 <key_Control+0x3c>)
 800f8d0:	f7f2 feca 	bl	8002668 <HAL_GPIO_ReadPin>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d111      	bne.n	800f8fe <key_Control+0x36>
  {
    while (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_7) == GPIO_PIN_RESET)
 800f8da:	bf00      	nop
 800f8dc:	2180      	movs	r1, #128	@ 0x80
 800f8de:	4809      	ldr	r0, [pc, #36]	@ (800f904 <key_Control+0x3c>)
 800f8e0:	f7f2 fec2 	bl	8002668 <HAL_GPIO_ReadPin>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d0f8      	beq.n	800f8dc <key_Control+0x14>
      ;
    phase_set -= 0.5f;
 800f8ea:	4b07      	ldr	r3, [pc, #28]	@ (800f908 <key_Control+0x40>)
 800f8ec:	edd3 7a00 	vldr	s15, [r3]
 800f8f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f8f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8f8:	4b03      	ldr	r3, [pc, #12]	@ (800f908 <key_Control+0x40>)
 800f8fa:	edc3 7a00 	vstr	s15, [r3]
  }
}
 800f8fe:	bf00      	nop
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	58022000 	.word	0x58022000
 800f908:	24000770 	.word	0x24000770

0800f90c <circuit_Control>:
// 电路开关
void circuit_Control(void)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	af00      	add	r7, sp, #0
  if (signal_I->rms > 0.2f)
 800f910:	4b0c      	ldr	r3, [pc, #48]	@ (800f944 <circuit_Control+0x38>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	edd3 7a04 	vldr	s15, [r3, #16]
 800f918:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800f948 <circuit_Control+0x3c>
 800f91c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f924:	dd06      	ble.n	800f934 <circuit_Control+0x28>
    circuit_Connect();
 800f926:	2201      	movs	r2, #1
 800f928:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f92c:	4807      	ldr	r0, [pc, #28]	@ (800f94c <circuit_Control+0x40>)
 800f92e:	f7f2 feb3 	bl	8002698 <HAL_GPIO_WritePin>
  else
    circuit_Disconnect();
}
 800f932:	e005      	b.n	800f940 <circuit_Control+0x34>
    circuit_Disconnect();
 800f934:	2200      	movs	r2, #0
 800f936:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f93a:	4804      	ldr	r0, [pc, #16]	@ (800f94c <circuit_Control+0x40>)
 800f93c:	f7f2 feac 	bl	8002698 <HAL_GPIO_WritePin>
}
 800f940:	bf00      	nop
 800f942:	bd80      	pop	{r7, pc}
 800f944:	20000004 	.word	0x20000004
 800f948:	3e4ccccd 	.word	0x3e4ccccd
 800f94c:	58020000 	.word	0x58020000

0800f950 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800f950:	b590      	push	{r4, r7, lr}
 800f952:	b085      	sub	sp, #20
 800f954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800f956:	f000 fb7d 	bl	8010054 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800f95a:	4b94      	ldr	r3, [pc, #592]	@ (800fbac <main+0x25c>)
 800f95c:	695b      	ldr	r3, [r3, #20]
 800f95e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f962:	2b00      	cmp	r3, #0
 800f964:	d11b      	bne.n	800f99e <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 800f966:	f3bf 8f4f 	dsb	sy
}
 800f96a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f96c:	f3bf 8f6f 	isb	sy
}
 800f970:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800f972:	4b8e      	ldr	r3, [pc, #568]	@ (800fbac <main+0x25c>)
 800f974:	2200      	movs	r2, #0
 800f976:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800f97a:	f3bf 8f4f 	dsb	sy
}
 800f97e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f980:	f3bf 8f6f 	isb	sy
}
 800f984:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800f986:	4b89      	ldr	r3, [pc, #548]	@ (800fbac <main+0x25c>)
 800f988:	695b      	ldr	r3, [r3, #20]
 800f98a:	4a88      	ldr	r2, [pc, #544]	@ (800fbac <main+0x25c>)
 800f98c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f990:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800f992:	f3bf 8f4f 	dsb	sy
}
 800f996:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f998:	f3bf 8f6f 	isb	sy
}
 800f99c:	e000      	b.n	800f9a0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800f99e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800f9a0:	4b82      	ldr	r3, [pc, #520]	@ (800fbac <main+0x25c>)
 800f9a2:	695b      	ldr	r3, [r3, #20]
 800f9a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d138      	bne.n	800fa1e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800f9ac:	4b7f      	ldr	r3, [pc, #508]	@ (800fbac <main+0x25c>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800f9b4:	f3bf 8f4f 	dsb	sy
}
 800f9b8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800f9ba:	4b7c      	ldr	r3, [pc, #496]	@ (800fbac <main+0x25c>)
 800f9bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9c0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	0b5b      	lsrs	r3, r3, #13
 800f9c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f9ca:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	08db      	lsrs	r3, r3, #3
 800f9d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f9d4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	015a      	lsls	r2, r3, #5
 800f9da:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800f9de:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800f9e4:	4971      	ldr	r1, [pc, #452]	@ (800fbac <main+0x25c>)
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	1e5a      	subs	r2, r3, #1
 800f9f0:	607a      	str	r2, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1ef      	bne.n	800f9d6 <main+0x86>
    } while(sets-- != 0U);
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	1e5a      	subs	r2, r3, #1
 800f9fa:	60ba      	str	r2, [r7, #8]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d1e5      	bne.n	800f9cc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800fa00:	f3bf 8f4f 	dsb	sy
}
 800fa04:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800fa06:	4b69      	ldr	r3, [pc, #420]	@ (800fbac <main+0x25c>)
 800fa08:	695b      	ldr	r3, [r3, #20]
 800fa0a:	4a68      	ldr	r2, [pc, #416]	@ (800fbac <main+0x25c>)
 800fa0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fa10:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800fa12:	f3bf 8f4f 	dsb	sy
}
 800fa16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fa18:	f3bf 8f6f 	isb	sy
}
 800fa1c:	e000      	b.n	800fa20 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800fa1e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800fa20:	f7f0 fce0 	bl	80003e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800fa24:	f000 f8e0 	bl	800fbe8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800fa28:	f000 f98c 	bl	800fd44 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800fa2c:	f7ff fc76 	bl	800f31c <MX_GPIO_Init>
  MX_DAC1_Init();
 800fa30:	f7ff fbf4 	bl	800f21c <MX_DAC1_Init>
  MX_SPI1_Init();
 800fa34:	f000 fbe6 	bl	8010204 <MX_SPI1_Init>
  MX_SPI2_Init();
 800fa38:	f000 fc3a 	bl	80102b0 <MX_SPI2_Init>
  MX_TIM2_Init();
 800fa3c:	f000 fe80 	bl	8010740 <MX_TIM2_Init>
  MX_TIM8_Init();
 800fa40:	f000 ff44 	bl	80108cc <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 800fa44:	f001 f8f2 	bl	8010c2c <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 800fa48:	f7ff fd72 	bl	800f530 <MX_I2C3_Init>
  MX_TIM3_Init();
 800fa4c:	f000 fef0 	bl	8010830 <MX_TIM3_Init>
  MX_ADC3_Init();
 800fa50:	f7ff fb34 	bl	800f0bc <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 800fa54:	2054      	movs	r0, #84	@ 0x54
 800fa56:	f001 ff9d 	bl	8011994 <malloc>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	4b54      	ldr	r3, [pc, #336]	@ (800fbb0 <main+0x260>)
 800fa60:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 800fa62:	205c      	movs	r0, #92	@ 0x5c
 800fa64:	f001 ff96 	bl	8011994 <malloc>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	4b51      	ldr	r3, [pc, #324]	@ (800fbb4 <main+0x264>)
 800fa6e:	601a      	str	r2, [r3, #0]
  signal_V->pid = (PID *)malloc(sizeof(PID));
 800fa70:	4b4f      	ldr	r3, [pc, #316]	@ (800fbb0 <main+0x260>)
 800fa72:	681c      	ldr	r4, [r3, #0]
 800fa74:	2024      	movs	r0, #36	@ 0x24
 800fa76:	f001 ff8d 	bl	8011994 <malloc>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	64e3      	str	r3, [r4, #76]	@ 0x4c
#if PRorPI
  signal_I->pid_dc = (PID *)malloc(sizeof(PID));
  signal_I->pr = (PR *)malloc(sizeof(PR));
#else
  signal_I->pid_d = (PID *)malloc(sizeof(PID));
 800fa7e:	4b4d      	ldr	r3, [pc, #308]	@ (800fbb4 <main+0x264>)
 800fa80:	681c      	ldr	r4, [r3, #0]
 800fa82:	2024      	movs	r0, #36	@ 0x24
 800fa84:	f001 ff86 	bl	8011994 <malloc>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	6563      	str	r3, [r4, #84]	@ 0x54
  signal_I->pid_q = (PID *)malloc(sizeof(PID));
 800fa8c:	4b49      	ldr	r3, [pc, #292]	@ (800fbb4 <main+0x264>)
 800fa8e:	681c      	ldr	r4, [r3, #0]
 800fa90:	2024      	movs	r0, #36	@ 0x24
 800fa92:	f001 ff7f 	bl	8011994 <malloc>
 800fa96:	4603      	mov	r3, r0
 800fa98:	65a3      	str	r3, [r4, #88]	@ 0x58
#endif
  signal_V->sogi = (SOGI *)malloc(sizeof(SOGI));
 800fa9a:	4b45      	ldr	r3, [pc, #276]	@ (800fbb0 <main+0x260>)
 800fa9c:	681c      	ldr	r4, [r3, #0]
 800fa9e:	2034      	movs	r0, #52	@ 0x34
 800faa0:	f001 ff78 	bl	8011994 <malloc>
 800faa4:	4603      	mov	r3, r0
 800faa6:	6523      	str	r3, [r4, #80]	@ 0x50
  signal_I->sogi = (SOGI *)malloc(sizeof(SOGI));
 800faa8:	4b42      	ldr	r3, [pc, #264]	@ (800fbb4 <main+0x264>)
 800faaa:	681c      	ldr	r4, [r3, #0]
 800faac:	2034      	movs	r0, #52	@ 0x34
 800faae:	f001 ff71 	bl	8011994 <malloc>
 800fab2:	4603      	mov	r3, r0
 800fab4:	64e3      	str	r3, [r4, #76]	@ 0x4c
  // 锁相环初始化
  pll_Init_V(signal_V, 50, 20000, 30 * 1.414); // 电压锁相
 800fab6:	4b3e      	ldr	r3, [pc, #248]	@ (800fbb0 <main+0x260>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 800fbb8 <main+0x268>
 800fabe:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800fac2:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800fbbc <main+0x26c>
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fe fe6a 	bl	800e7a0 <pll_Init_V>
#if PRorPI
  pll_Init_I(signal_I, 50, 20000, 0.5f, 7600.f, 0.001f, 0.1f); // 电流环 1.414-7600
#else
  pll_Init_I(signal_I, 50, 20000);
 800facc:	4b39      	ldr	r3, [pc, #228]	@ (800fbb4 <main+0x264>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800fad4:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 800fbbc <main+0x26c>
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fe ff8b 	bl	800e9f4 <pll_Init_I>
#endif
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 800fade:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fae2:	2200      	movs	r2, #0
 800fae4:	2100      	movs	r1, #0
 800fae6:	4836      	ldr	r0, [pc, #216]	@ (800fbc0 <main+0x270>)
 800fae8:	f7f2 fa8d 	bl	8002006 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800faec:	2100      	movs	r1, #0
 800faee:	4834      	ldr	r0, [pc, #208]	@ (800fbc0 <main+0x270>)
 800faf0:	f7f2 f9dc 	bl	8001eac <HAL_DAC_Start>
  // 初始化AD7606
  ad7606_Init();
 800faf4:	f7fe f984 	bl	800de00 <ad7606_Init>
  // 打开PWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800faf8:	2100      	movs	r1, #0
 800fafa:	4832      	ldr	r0, [pc, #200]	@ (800fbc4 <main+0x274>)
 800fafc:	f7f9 fbd4 	bl	80092a8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 800fb00:	2100      	movs	r1, #0
 800fb02:	4830      	ldr	r0, [pc, #192]	@ (800fbc4 <main+0x274>)
 800fb04:	f7fa fc5a 	bl	800a3bc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800fb08:	2104      	movs	r1, #4
 800fb0a:	482e      	ldr	r0, [pc, #184]	@ (800fbc4 <main+0x274>)
 800fb0c:	f7f9 fbcc 	bl	80092a8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 800fb10:	2104      	movs	r1, #4
 800fb12:	482c      	ldr	r0, [pc, #176]	@ (800fbc4 <main+0x274>)
 800fb14:	f7fa fc52 	bl	800a3bc <HAL_TIMEx_PWMN_Start>
  // OLED初始化
  OLED_Init();
 800fb18:	f7fe fd18 	bl	800e54c <OLED_Init>
  // INA238初始化
  ina238_Init(&hi2c3, 0);
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	482a      	ldr	r0, [pc, #168]	@ (800fbc8 <main+0x278>)
 800fb20:	f7fe fa52 	bl	800dfc8 <ina238_Init>
  // ADC校准
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED, ADC_CALIB_OFFSET);
 800fb24:	2200      	movs	r2, #0
 800fb26:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800fb2a:	4828      	ldr	r0, [pc, #160]	@ (800fbcc <main+0x27c>)
 800fb2c:	f7f1 ffe0 	bl	8001af0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED, ADC_CALIB_OFFSET_LINEARITY);
 800fb30:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800fb34:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800fb38:	4824      	ldr	r0, [pc, #144]	@ (800fbcc <main+0x27c>)
 800fb3a:	f7f1 ffd9 	bl	8001af0 <HAL_ADCEx_Calibration_Start>
  // iir滤波器初始化
  iir_V = (arm_biquad_casd_df1_inst_f32 *)malloc(sizeof(arm_biquad_casd_df1_inst_f32));
 800fb3e:	200c      	movs	r0, #12
 800fb40:	f001 ff28 	bl	8011994 <malloc>
 800fb44:	4603      	mov	r3, r0
 800fb46:	461a      	mov	r2, r3
 800fb48:	4b21      	ldr	r3, [pc, #132]	@ (800fbd0 <main+0x280>)
 800fb4a:	601a      	str	r2, [r3, #0]
  iir_I = (arm_biquad_casd_df1_inst_f32 *)malloc(sizeof(arm_biquad_casd_df1_inst_f32));
 800fb4c:	200c      	movs	r0, #12
 800fb4e:	f001 ff21 	bl	8011994 <malloc>
 800fb52:	4603      	mov	r3, r0
 800fb54:	461a      	mov	r2, r3
 800fb56:	4b1f      	ldr	r3, [pc, #124]	@ (800fbd4 <main+0x284>)
 800fb58:	601a      	str	r2, [r3, #0]
  arm_biquad_cascade_df1_init_f32(iir_V, iirNumStages, iirCoeffs_20Hz, signal_V->iirState);
 800fb5a:	4b1d      	ldr	r3, [pc, #116]	@ (800fbd0 <main+0x280>)
 800fb5c:	6818      	ldr	r0, [r3, #0]
 800fb5e:	4b14      	ldr	r3, [pc, #80]	@ (800fbb0 <main+0x260>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	332c      	adds	r3, #44	@ 0x2c
 800fb64:	4a1c      	ldr	r2, [pc, #112]	@ (800fbd8 <main+0x288>)
 800fb66:	2102      	movs	r1, #2
 800fb68:	f001 fd7a 	bl	8011660 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(iir_I, iirNumStages, iirCoeffs_20Hz, signal_I->iirState);
 800fb6c:	4b19      	ldr	r3, [pc, #100]	@ (800fbd4 <main+0x284>)
 800fb6e:	6818      	ldr	r0, [r3, #0]
 800fb70:	4b10      	ldr	r3, [pc, #64]	@ (800fbb4 <main+0x264>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	332c      	adds	r3, #44	@ 0x2c
 800fb76:	4a18      	ldr	r2, [pc, #96]	@ (800fbd8 <main+0x288>)
 800fb78:	2102      	movs	r1, #2
 800fb7a:	f001 fd71 	bl	8011660 <arm_biquad_cascade_df1_init_f32>
  // 开启中断
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 800fb7e:	2100      	movs	r1, #0
 800fb80:	4816      	ldr	r0, [pc, #88]	@ (800fbdc <main+0x28c>)
 800fb82:	f7fe f977 	bl	800de74 <ad7606_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800fb86:	4816      	ldr	r0, [pc, #88]	@ (800fbe0 <main+0x290>)
 800fb88:	f7f9 fab4 	bl	80090f4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    circuit_Control();
 800fb8c:	f7ff febe 	bl	800f90c <circuit_Control>
    key_Control();
 800fb90:	f7ff fe9a 	bl	800f8c8 <key_Control>
    oled_Show();
 800fb94:	f7ff fdae 	bl	800f6f4 <oled_Show>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800fb98:	2101      	movs	r1, #1
 800fb9a:	4812      	ldr	r0, [pc, #72]	@ (800fbe4 <main+0x294>)
 800fb9c:	f7f2 fd95 	bl	80026ca <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800fba0:	2064      	movs	r0, #100	@ 0x64
 800fba2:	f7f0 fc7b 	bl	800049c <HAL_Delay>
    circuit_Control();
 800fba6:	bf00      	nop
 800fba8:	e7f0      	b.n	800fb8c <main+0x23c>
 800fbaa:	bf00      	nop
 800fbac:	e000ed00 	.word	0xe000ed00
 800fbb0:	20000000 	.word	0x20000000
 800fbb4:	20000004 	.word	0x20000004
 800fbb8:	4229ae14 	.word	0x4229ae14
 800fbbc:	42480000 	.word	0x42480000
 800fbc0:	240007e0 	.word	0x240007e0
 800fbc4:	24000b4c 	.word	0x24000b4c
 800fbc8:	240007f4 	.word	0x240007f4
 800fbcc:	2400077c 	.word	0x2400077c
 800fbd0:	20000008 	.word	0x20000008
 800fbd4:	2000000c 	.word	0x2000000c
 800fbd8:	080148d0 	.word	0x080148d0
 800fbdc:	24000ab4 	.word	0x24000ab4
 800fbe0:	24000b00 	.word	0x24000b00
 800fbe4:	58022000 	.word	0x58022000

0800fbe8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b09e      	sub	sp, #120	@ 0x78
 800fbec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800fbee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fbf2:	224c      	movs	r2, #76	@ 0x4c
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f002 fcdf 	bl	80125ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800fbfc:	f107 030c 	add.w	r3, r7, #12
 800fc00:	2220      	movs	r2, #32
 800fc02:	2100      	movs	r1, #0
 800fc04:	4618      	mov	r0, r3
 800fc06:	f002 fcd8 	bl	80125ba <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800fc0a:	2002      	movs	r0, #2
 800fc0c:	f7f4 fe54 	bl	80048b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800fc10:	2300      	movs	r3, #0
 800fc12:	60bb      	str	r3, [r7, #8]
 800fc14:	4b48      	ldr	r3, [pc, #288]	@ (800fd38 <SystemClock_Config+0x150>)
 800fc16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc18:	4a47      	ldr	r2, [pc, #284]	@ (800fd38 <SystemClock_Config+0x150>)
 800fc1a:	f023 0301 	bic.w	r3, r3, #1
 800fc1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fc20:	4b45      	ldr	r3, [pc, #276]	@ (800fd38 <SystemClock_Config+0x150>)
 800fc22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc24:	f003 0301 	and.w	r3, r3, #1
 800fc28:	60bb      	str	r3, [r7, #8]
 800fc2a:	4b44      	ldr	r3, [pc, #272]	@ (800fd3c <SystemClock_Config+0x154>)
 800fc2c:	699b      	ldr	r3, [r3, #24]
 800fc2e:	4a43      	ldr	r2, [pc, #268]	@ (800fd3c <SystemClock_Config+0x154>)
 800fc30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fc34:	6193      	str	r3, [r2, #24]
 800fc36:	4b41      	ldr	r3, [pc, #260]	@ (800fd3c <SystemClock_Config+0x154>)
 800fc38:	699b      	ldr	r3, [r3, #24]
 800fc3a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800fc3e:	60bb      	str	r3, [r7, #8]
 800fc40:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800fc42:	bf00      	nop
 800fc44:	4b3d      	ldr	r3, [pc, #244]	@ (800fd3c <SystemClock_Config+0x154>)
 800fc46:	699b      	ldr	r3, [r3, #24]
 800fc48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fc4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fc50:	d1f8      	bne.n	800fc44 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fc52:	4b3b      	ldr	r3, [pc, #236]	@ (800fd40 <SystemClock_Config+0x158>)
 800fc54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fc58:	4a39      	ldr	r2, [pc, #228]	@ (800fd40 <SystemClock_Config+0x158>)
 800fc5a:	f043 0302 	orr.w	r3, r3, #2
 800fc5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800fc62:	4b37      	ldr	r3, [pc, #220]	@ (800fd40 <SystemClock_Config+0x158>)
 800fc64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fc68:	f003 0302 	and.w	r3, r3, #2
 800fc6c:	607b      	str	r3, [r7, #4]
 800fc6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800fc70:	2300      	movs	r3, #0
 800fc72:	603b      	str	r3, [r7, #0]
 800fc74:	4b31      	ldr	r3, [pc, #196]	@ (800fd3c <SystemClock_Config+0x154>)
 800fc76:	699b      	ldr	r3, [r3, #24]
 800fc78:	4a30      	ldr	r2, [pc, #192]	@ (800fd3c <SystemClock_Config+0x154>)
 800fc7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fc7e:	6193      	str	r3, [r2, #24]
 800fc80:	4b2e      	ldr	r3, [pc, #184]	@ (800fd3c <SystemClock_Config+0x154>)
 800fc82:	699b      	ldr	r3, [r3, #24]
 800fc84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800fc88:	603b      	str	r3, [r7, #0]
 800fc8a:	4b2b      	ldr	r3, [pc, #172]	@ (800fd38 <SystemClock_Config+0x150>)
 800fc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc8e:	4a2a      	ldr	r2, [pc, #168]	@ (800fd38 <SystemClock_Config+0x150>)
 800fc90:	f043 0301 	orr.w	r3, r3, #1
 800fc94:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fc96:	4b28      	ldr	r3, [pc, #160]	@ (800fd38 <SystemClock_Config+0x150>)
 800fc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc9a:	f003 0301 	and.w	r3, r3, #1
 800fc9e:	603b      	str	r3, [r7, #0]
 800fca0:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800fca2:	bf00      	nop
 800fca4:	4b25      	ldr	r3, [pc, #148]	@ (800fd3c <SystemClock_Config+0x154>)
 800fca6:	699b      	ldr	r3, [r3, #24]
 800fca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fcac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fcb0:	d1f8      	bne.n	800fca4 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800fcb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800fcba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fcbc:	2302      	movs	r3, #2
 800fcbe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800fcc0:	2302      	movs	r3, #2
 800fcc2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800fcc4:	2305      	movs	r3, #5
 800fcc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800fcc8:	23c0      	movs	r3, #192	@ 0xc0
 800fcca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800fccc:	2302      	movs	r3, #2
 800fcce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800fcd0:	2314      	movs	r3, #20
 800fcd2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800fcd4:	2302      	movs	r3, #2
 800fcd6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800fcd8:	2308      	movs	r3, #8
 800fcda:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800fce0:	2300      	movs	r3, #0
 800fce2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7f4 fe2f 	bl	800494c <HAL_RCC_OscConfig>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800fcf4:	f000 fa68 	bl	80101c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 800fcf8:	233f      	movs	r3, #63	@ 0x3f
 800fcfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fcfc:	2303      	movs	r3, #3
 800fcfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800fd00:	2300      	movs	r3, #0
 800fd02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800fd04:	2308      	movs	r3, #8
 800fd06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800fd08:	2340      	movs	r3, #64	@ 0x40
 800fd0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800fd0c:	2340      	movs	r3, #64	@ 0x40
 800fd0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800fd10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800fd16:	2340      	movs	r3, #64	@ 0x40
 800fd18:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800fd1a:	f107 030c 	add.w	r3, r7, #12
 800fd1e:	2104      	movs	r1, #4
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7f5 fa6d 	bl	8005200 <HAL_RCC_ClockConfig>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d001      	beq.n	800fd30 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800fd2c:	f000 fa4c 	bl	80101c8 <Error_Handler>
  }
}
 800fd30:	bf00      	nop
 800fd32:	3778      	adds	r7, #120	@ 0x78
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	58000400 	.word	0x58000400
 800fd3c:	58024800 	.word	0x58024800
 800fd40:	58024400 	.word	0x58024400

0800fd44 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b0b0      	sub	sp, #192	@ 0xc0
 800fd48:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fd4a:	463b      	mov	r3, r7
 800fd4c:	22c0      	movs	r2, #192	@ 0xc0
 800fd4e:	2100      	movs	r1, #0
 800fd50:	4618      	mov	r0, r3
 800fd52:	f002 fc32 	bl	80125ba <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 800fd56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800fd5a:	f04f 0300 	mov.w	r3, #0
 800fd5e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 800fd62:	2319      	movs	r3, #25
 800fd64:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 800fd66:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800fd6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800fd6c:	2302      	movs	r3, #2
 800fd6e:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800fd70:	2302      	movs	r3, #2
 800fd72:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800fd74:	2302      	movs	r3, #2
 800fd76:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800fd80:	2300      	movs	r3, #0
 800fd82:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800fd84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fd88:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fd8a:	463b      	mov	r3, r7
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7f5 fdef 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d001      	beq.n	800fd9c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 800fd98:	f000 fa16 	bl	80101c8 <Error_Handler>
  }
}
 800fd9c:	bf00      	nop
 800fd9e:	37c0      	adds	r7, #192	@ 0xc0
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief 外部中断触发示例
 * @param GPIO_Pin 中断引脚
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b088      	sub	sp, #32
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	4603      	mov	r3, r0
 800fdac:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == AD7606_BUSY_Pin)
 800fdae:	88fb      	ldrh	r3, [r7, #6]
 800fdb0:	2b40      	cmp	r3, #64	@ 0x40
 800fdb2:	d170      	bne.n	800fe96 <HAL_GPIO_EXTI_Callback+0xf2>
  {
    ad7606_GetValue(&hspi2, 3, adcBuf);
 800fdb4:	4a95      	ldr	r2, [pc, #596]	@ (801000c <HAL_GPIO_EXTI_Callback+0x268>)
 800fdb6:	2103      	movs	r1, #3
 800fdb8:	4895      	ldr	r0, [pc, #596]	@ (8010010 <HAL_GPIO_EXTI_Callback+0x26c>)
 800fdba:	f7fe f8bf 	bl	800df3c <ad7606_GetValue>
    // 缓存adcBuf
    signal_V->input[0] = adcBuf[1] / 0.02373021108f;
 800fdbe:	4b93      	ldr	r3, [pc, #588]	@ (801000c <HAL_GPIO_EXTI_Callback+0x268>)
 800fdc0:	ed93 7a01 	vldr	s14, [r3, #4]
 800fdc4:	4b93      	ldr	r3, [pc, #588]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8010018 <HAL_GPIO_EXTI_Callback+0x274>
 800fdcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fdd0:	edc3 7a00 	vstr	s15, [r3]
    signal_I->input[0] = adcBuf[2] * 2.464809491f;
 800fdd4:	4b8d      	ldr	r3, [pc, #564]	@ (801000c <HAL_GPIO_EXTI_Callback+0x268>)
 800fdd6:	edd3 7a02 	vldr	s15, [r3, #8]
 800fdda:	4b90      	ldr	r3, [pc, #576]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8010020 <HAL_GPIO_EXTI_Callback+0x27c>
 800fde2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fde6:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control_V(signal_V);
 800fdea:	4b8a      	ldr	r3, [pc, #552]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fe ff0e 	bl	800ec10 <pll_Control_V>
    {
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -1.f * signal_I->pr->out[0]);
    }
#else
    pll_Control_I(signal_I, signal_V, 2.f, phase_set);
 800fdf4:	4b89      	ldr	r3, [pc, #548]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4a86      	ldr	r2, [pc, #536]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800fdfa:	6812      	ldr	r2, [r2, #0]
 800fdfc:	4989      	ldr	r1, [pc, #548]	@ (8010024 <HAL_GPIO_EXTI_Callback+0x280>)
 800fdfe:	edd1 7a00 	vldr	s15, [r1]
 800fe02:	eef0 0a67 	vmov.f32	s1, s15
 800fe06:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800fe0a:	4611      	mov	r1, r2
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7fe ff9f 	bl	800ed50 <pll_Control_I>
    // 调节SPWM占空比
    if (signal_I->park_inv_a > 0)
 800fe12:	4b82      	ldr	r3, [pc, #520]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	edd3 7a07 	vldr	s15, [r3, #28]
 800fe1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fe1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe22:	dd1b      	ble.n	800fe5c <HAL_GPIO_EXTI_Callback+0xb8>
    {
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, signal_I->park_inv_a / 200.f / 1.1f * 12000.f);
 800fe24:	4b7d      	ldr	r3, [pc, #500]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	edd3 7a07 	vldr	s15, [r3, #28]
 800fe2c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8010028 <HAL_GPIO_EXTI_Callback+0x284>
 800fe30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fe34:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 801002c <HAL_GPIO_EXTI_Callback+0x288>
 800fe38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fe3c:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8010030 <HAL_GPIO_EXTI_Callback+0x28c>
 800fe40:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe44:	4b7b      	ldr	r3, [pc, #492]	@ (8010034 <HAL_GPIO_EXTI_Callback+0x290>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe4c:	ee17 2a90 	vmov	r2, s15
 800fe50:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800fe52:	4b78      	ldr	r3, [pc, #480]	@ (8010034 <HAL_GPIO_EXTI_Callback+0x290>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	2200      	movs	r2, #0
 800fe58:	639a      	str	r2, [r3, #56]	@ 0x38
 800fe5a:	e01c      	b.n	800fe96 <HAL_GPIO_EXTI_Callback+0xf2>
    }
    else
    {
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800fe5c:	4b75      	ldr	r3, [pc, #468]	@ (8010034 <HAL_GPIO_EXTI_Callback+0x290>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	2200      	movs	r2, #0
 800fe62:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -signal_I->park_inv_a / 200.f / 1.1f * 12000.f);
 800fe64:	4b6d      	ldr	r3, [pc, #436]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	edd3 7a07 	vldr	s15, [r3, #28]
 800fe6c:	eef1 7a67 	vneg.f32	s15, s15
 800fe70:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8010028 <HAL_GPIO_EXTI_Callback+0x284>
 800fe74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fe78:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 801002c <HAL_GPIO_EXTI_Callback+0x288>
 800fe7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fe80:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8010030 <HAL_GPIO_EXTI_Callback+0x28c>
 800fe84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe88:	4b6a      	ldr	r3, [pc, #424]	@ (8010034 <HAL_GPIO_EXTI_Callback+0x290>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe90:	ee17 2a90 	vmov	r2, s15
 800fe94:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#endif
  }
  // 输出有效值滤波
  float filter_temp = 0.f;
 800fe96:	f04f 0300 	mov.w	r3, #0
 800fe9a:	60fb      	str	r3, [r7, #12]
  arm_sqrt_f32(signal_V->park_d * signal_V->park_d + signal_V->park_q * signal_V->park_q, &signal_V->peak);
 800fe9c:	4b5d      	ldr	r3, [pc, #372]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	ed93 7a05 	vldr	s14, [r3, #20]
 800fea4:	4b5b      	ldr	r3, [pc, #364]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	edd3 7a05 	vldr	s15, [r3, #20]
 800feac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800feb0:	4b58      	ldr	r3, [pc, #352]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	edd3 6a06 	vldr	s13, [r3, #24]
 800feb8:	4b56      	ldr	r3, [pc, #344]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	edd3 7a06 	vldr	s15, [r3, #24]
 800fec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fec8:	4b52      	ldr	r3, [pc, #328]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	330c      	adds	r3, #12
 800fece:	edc7 7a05 	vstr	s15, [r7, #20]
 800fed2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800fed4:	edd7 7a05 	vldr	s15, [r7, #20]
 800fed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee0:	db09      	blt.n	800fef6 <HAL_GPIO_EXTI_Callback+0x152>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800fee2:	ed97 0a05 	vldr	s0, [r7, #20]
 800fee6:	f004 fb4b 	bl	8014580 <sqrtf>
 800feea:	eef0 7a40 	vmov.f32	s15, s0
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800fef4:	e004      	b.n	800ff00 <HAL_GPIO_EXTI_Callback+0x15c>
    }
    else
    {
      *pOut = 0.0f;
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	f04f 0200 	mov.w	r2, #0
 800fefc:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800fefe:	bf00      	nop
  arm_sqrt_f32(signal_I->park_d * signal_I->park_d + signal_I->park_q * signal_I->park_q, &signal_I->peak);
 800ff00:	4b46      	ldr	r3, [pc, #280]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	ed93 7a05 	vldr	s14, [r3, #20]
 800ff08:	4b44      	ldr	r3, [pc, #272]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	edd3 7a05 	vldr	s15, [r3, #20]
 800ff10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff14:	4b41      	ldr	r3, [pc, #260]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	edd3 6a06 	vldr	s13, [r3, #24]
 800ff1c:	4b3f      	ldr	r3, [pc, #252]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	edd3 7a06 	vldr	s15, [r3, #24]
 800ff24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff2c:	4b3b      	ldr	r3, [pc, #236]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	330c      	adds	r3, #12
 800ff32:	edc7 7a07 	vstr	s15, [r7, #28]
 800ff36:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 800ff38:	edd7 7a07 	vldr	s15, [r7, #28]
 800ff3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ff40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff44:	db09      	blt.n	800ff5a <HAL_GPIO_EXTI_Callback+0x1b6>
      *pOut = sqrtf(in);
 800ff46:	ed97 0a07 	vldr	s0, [r7, #28]
 800ff4a:	f004 fb19 	bl	8014580 <sqrtf>
 800ff4e:	eef0 7a40 	vmov.f32	s15, s0
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800ff58:	e004      	b.n	800ff64 <HAL_GPIO_EXTI_Callback+0x1c0>
      *pOut = 0.0f;
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	f04f 0200 	mov.w	r2, #0
 800ff60:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800ff62:	bf00      	nop
  arm_biquad_cascade_df1_f32(iir_V, &signal_V->peak, &filter_temp, iirBlockSize);
 800ff64:	4b34      	ldr	r3, [pc, #208]	@ (8010038 <HAL_GPIO_EXTI_Callback+0x294>)
 800ff66:	6818      	ldr	r0, [r3, #0]
 800ff68:	4b2a      	ldr	r3, [pc, #168]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f103 010c 	add.w	r1, r3, #12
 800ff70:	f107 020c 	add.w	r2, r7, #12
 800ff74:	2301      	movs	r3, #1
 800ff76:	f001 fb7f 	bl	8011678 <arm_biquad_cascade_df1_f32>
  signal_V->rms = filter_temp * iirScale_20Hz / 1.41421356237f;
 800ff7a:	ed97 7a03 	vldr	s14, [r7, #12]
 800ff7e:	4b2f      	ldr	r3, [pc, #188]	@ (801003c <HAL_GPIO_EXTI_Callback+0x298>)
 800ff80:	edd3 7a00 	vldr	s15, [r3]
 800ff84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff88:	4b22      	ldr	r3, [pc, #136]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8010040 <HAL_GPIO_EXTI_Callback+0x29c>
 800ff90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ff94:	edc3 7a04 	vstr	s15, [r3, #16]
  arm_biquad_cascade_df1_f32(iir_I, &signal_I->peak, &filter_temp, iirBlockSize);
 800ff98:	4b2a      	ldr	r3, [pc, #168]	@ (8010044 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800ff9a:	6818      	ldr	r0, [r3, #0]
 800ff9c:	4b1f      	ldr	r3, [pc, #124]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f103 010c 	add.w	r1, r3, #12
 800ffa4:	f107 020c 	add.w	r2, r7, #12
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	f001 fb65 	bl	8011678 <arm_biquad_cascade_df1_f32>
  signal_I->rms = filter_temp * iirScale_20Hz / 1.41421356237f;
 800ffae:	ed97 7a03 	vldr	s14, [r7, #12]
 800ffb2:	4b22      	ldr	r3, [pc, #136]	@ (801003c <HAL_GPIO_EXTI_Callback+0x298>)
 800ffb4:	edd3 7a00 	vldr	s15, [r3]
 800ffb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ffbc:	4b17      	ldr	r3, [pc, #92]	@ (801001c <HAL_GPIO_EXTI_Callback+0x278>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8010040 <HAL_GPIO_EXTI_Callback+0x29c>
 800ffc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ffc8:	edc3 7a04 	vstr	s15, [r3, #16]
  // 调试输出
#if USER_DEBUG
  oled_Show();
#endif
  // DAC模拟输出，便于调试，不需要时可关闭
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_cos_f32(signal_V->theta) + 2048.f);
 800ffcc:	4b11      	ldr	r3, [pc, #68]	@ (8010014 <HAL_GPIO_EXTI_Callback+0x270>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	edd3 7a07 	vldr	s15, [r3, #28]
 800ffd4:	eeb0 0a67 	vmov.f32	s0, s15
 800ffd8:	f001 fc92 	bl	8011900 <arm_cos_f32>
 800ffdc:	eef0 7a40 	vmov.f32	s15, s0
 800ffe0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010048 <HAL_GPIO_EXTI_Callback+0x2a4>
 800ffe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffe8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801004c <HAL_GPIO_EXTI_Callback+0x2a8>
 800ffec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fff4:	ee17 3a90 	vmov	r3, s15
 800fff8:	2200      	movs	r2, #0
 800fffa:	2100      	movs	r1, #0
 800fffc:	4814      	ldr	r0, [pc, #80]	@ (8010050 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800fffe:	f7f2 f802 	bl	8002006 <HAL_DAC_SetValue>
}
 8010002:	bf00      	nop
 8010004:	3720      	adds	r7, #32
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	20000010 	.word	0x20000010
 8010010:	240009e0 	.word	0x240009e0
 8010014:	20000000 	.word	0x20000000
 8010018:	3cc265dc 	.word	0x3cc265dc
 801001c:	20000004 	.word	0x20000004
 8010020:	401dbf70 	.word	0x401dbf70
 8010024:	24000770 	.word	0x24000770
 8010028:	43480000 	.word	0x43480000
 801002c:	3f8ccccd 	.word	0x3f8ccccd
 8010030:	463b8000 	.word	0x463b8000
 8010034:	24000b4c 	.word	0x24000b4c
 8010038:	20000008 	.word	0x20000008
 801003c:	080148f8 	.word	0x080148f8
 8010040:	3fb504f3 	.word	0x3fb504f3
 8010044:	2000000c 	.word	0x2000000c
 8010048:	44fa0000 	.word	0x44fa0000
 801004c:	45000000 	.word	0x45000000
 8010050:	240007e0 	.word	0x240007e0

08010054 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 801005a:	463b      	mov	r3, r7
 801005c:	2200      	movs	r2, #0
 801005e:	601a      	str	r2, [r3, #0]
 8010060:	605a      	str	r2, [r3, #4]
 8010062:	609a      	str	r2, [r3, #8]
 8010064:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8010066:	f7f1 fe87 	bl	8001d78 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801006a:	2301      	movs	r3, #1
 801006c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 801006e:	2300      	movs	r3, #0
 8010070:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8010072:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8010076:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8010078:	2312      	movs	r3, #18
 801007a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 801007c:	2300      	movs	r3, #0
 801007e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8010080:	2301      	movs	r3, #1
 8010082:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8010084:	2303      	movs	r3, #3
 8010086:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8010088:	2300      	movs	r3, #0
 801008a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 801008c:	2300      	movs	r3, #0
 801008e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8010090:	2301      	movs	r3, #1
 8010092:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8010094:	2301      	movs	r3, #1
 8010096:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8010098:	463b      	mov	r3, r7
 801009a:	4618      	mov	r0, r3
 801009c:	f7f1 fea4 	bl	8001de8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80100a0:	2301      	movs	r3, #1
 80100a2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 80100a4:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80100a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80100aa:	230f      	movs	r3, #15
 80100ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80100b2:	2300      	movs	r3, #0
 80100b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80100b6:	463b      	mov	r3, r7
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7f1 fe95 	bl	8001de8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80100be:	2302      	movs	r3, #2
 80100c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 80100c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80100c6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80100c8:	2310      	movs	r3, #16
 80100ca:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80100cc:	463b      	mov	r3, r7
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7f1 fe8a 	bl	8001de8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80100d4:	2004      	movs	r0, #4
 80100d6:	f7f1 fe67 	bl	8001da8 <HAL_MPU_Enable>
}
 80100da:	bf00      	nop
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	0000      	movs	r0, r0
 80100e4:	0000      	movs	r0, r0
	...

080100e8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a2a      	ldr	r2, [pc, #168]	@ (80101a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d101      	bne.n	80100fe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80100fa:	f7f0 f9af 	bl	800045c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) // 100Hz
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	4a28      	ldr	r2, [pc, #160]	@ (80101a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d143      	bne.n	8010190 <HAL_TIM_PeriodElapsedCallback+0xa8>
  {
    // 采集直流电压电流
    dcVolt = ina238_GetVolt(&hi2c3);
 8010108:	4827      	ldr	r0, [pc, #156]	@ (80101a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 801010a:	f7fd ff9d 	bl	800e048 <ina238_GetVolt>
 801010e:	eef0 7a40 	vmov.f32	s15, s0
 8010112:	4b26      	ldr	r3, [pc, #152]	@ (80101ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8010114:	edc3 7a00 	vstr	s15, [r3]
    dcCurrent = ina238_GetCurrent(&hi2c3);
 8010118:	4823      	ldr	r0, [pc, #140]	@ (80101a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 801011a:	f7fd fff1 	bl	800e100 <ina238_GetCurrent>
 801011e:	eef0 7a40 	vmov.f32	s15, s0
 8010122:	4b23      	ldr	r3, [pc, #140]	@ (80101b0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8010124:	edc3 7a00 	vstr	s15, [r3]
    // 采集芯片核心温度
    HAL_ADC_Start(&hadc3);
 8010128:	4822      	ldr	r0, [pc, #136]	@ (80101b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 801012a:	f7f0 fd91 	bl	8000c50 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc3, 10) == HAL_OK) // 判断是否转换完成
 801012e:	210a      	movs	r1, #10
 8010130:	4820      	ldr	r0, [pc, #128]	@ (80101b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8010132:	f7f0 fe57 	bl	8000de4 <HAL_ADC_PollForConversion>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	d129      	bne.n	8010190 <HAL_TIM_PeriodElapsedCallback+0xa8>
    {
      temprature = HAL_ADC_GetValue(&hadc3); // 读出转换结果
 801013c:	481d      	ldr	r0, [pc, #116]	@ (80101b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 801013e:	f7f0 ff45 	bl	8000fcc <HAL_ADC_GetValue>
 8010142:	4603      	mov	r3, r0
 8010144:	b29a      	uxth	r2, r3
 8010146:	4b1c      	ldr	r3, [pc, #112]	@ (80101b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8010148:	801a      	strh	r2, [r3, #0]
      temp_result = ((110.0 - 30.0) / (*(unsigned short *)(0x1FF1E840) - *(unsigned short *)(0x1FF1E820))) * (temprature - *(unsigned short *)(0x1FF1E820)) + 30;
 801014a:	4b1c      	ldr	r3, [pc, #112]	@ (80101bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 801014c:	881b      	ldrh	r3, [r3, #0]
 801014e:	461a      	mov	r2, r3
 8010150:	4b1b      	ldr	r3, [pc, #108]	@ (80101c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8010152:	881b      	ldrh	r3, [r3, #0]
 8010154:	1ad3      	subs	r3, r2, r3
 8010156:	ee07 3a90 	vmov	s15, r3
 801015a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801015e:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8010198 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8010162:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8010166:	4b14      	ldr	r3, [pc, #80]	@ (80101b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8010168:	881b      	ldrh	r3, [r3, #0]
 801016a:	461a      	mov	r2, r3
 801016c:	4b14      	ldr	r3, [pc, #80]	@ (80101c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 801016e:	881b      	ldrh	r3, [r3, #0]
 8010170:	1ad3      	subs	r3, r2, r3
 8010172:	ee07 3a90 	vmov	s15, r3
 8010176:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801017a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801017e:	eeb3 6b0e 	vmov.f64	d6, #62	@ 0x41f00000  30.0
 8010182:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010186:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801018a:	4b0e      	ldr	r3, [pc, #56]	@ (80101c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 801018c:	edc3 7a00 	vstr	s15, [r3]
    }
  }
  /* USER CODE END Callback 1 */
}
 8010190:	bf00      	nop
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	00000000 	.word	0x00000000
 801019c:	40540000 	.word	0x40540000
 80101a0:	40001000 	.word	0x40001000
 80101a4:	40000400 	.word	0x40000400
 80101a8:	240007f4 	.word	0x240007f4
 80101ac:	24000848 	.word	0x24000848
 80101b0:	2400084c 	.word	0x2400084c
 80101b4:	2400077c 	.word	0x2400077c
 80101b8:	24000850 	.word	0x24000850
 80101bc:	1ff1e840 	.word	0x1ff1e840
 80101c0:	1ff1e820 	.word	0x1ff1e820
 80101c4:	24000854 	.word	0x24000854

080101c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80101cc:	b672      	cpsid	i
}
 80101ce:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    // 闪烁灯
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80101d0:	2101      	movs	r1, #1
 80101d2:	480b      	ldr	r0, [pc, #44]	@ (8010200 <Error_Handler+0x38>)
 80101d4:	f7f2 fa79 	bl	80026ca <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80101d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80101dc:	f7f0 f95e 	bl	800049c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80101e0:	2101      	movs	r1, #1
 80101e2:	4807      	ldr	r0, [pc, #28]	@ (8010200 <Error_Handler+0x38>)
 80101e4:	f7f2 fa71 	bl	80026ca <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80101e8:	2064      	movs	r0, #100	@ 0x64
 80101ea:	f7f0 f957 	bl	800049c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80101ee:	2101      	movs	r1, #1
 80101f0:	4803      	ldr	r0, [pc, #12]	@ (8010200 <Error_Handler+0x38>)
 80101f2:	f7f2 fa6a 	bl	80026ca <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80101f6:	2064      	movs	r0, #100	@ 0x64
 80101f8:	f7f0 f950 	bl	800049c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80101fc:	bf00      	nop
 80101fe:	e7e7      	b.n	80101d0 <Error_Handler+0x8>
 8010200:	58022000 	.word	0x58022000

08010204 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8010208:	4b27      	ldr	r3, [pc, #156]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 801020a:	4a28      	ldr	r2, [pc, #160]	@ (80102ac <MX_SPI1_Init+0xa8>)
 801020c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801020e:	4b26      	ldr	r3, [pc, #152]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010210:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8010214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8010216:	4b24      	ldr	r3, [pc, #144]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010218:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801021c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801021e:	4b22      	ldr	r3, [pc, #136]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010220:	2207      	movs	r2, #7
 8010222:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010224:	4b20      	ldr	r3, [pc, #128]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010226:	2200      	movs	r2, #0
 8010228:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801022a:	4b1f      	ldr	r3, [pc, #124]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 801022c:	2200      	movs	r2, #0
 801022e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8010230:	4b1d      	ldr	r3, [pc, #116]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010232:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8010236:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010238:	4b1b      	ldr	r3, [pc, #108]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 801023a:	2200      	movs	r2, #0
 801023c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801023e:	4b1a      	ldr	r3, [pc, #104]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010240:	2200      	movs	r2, #0
 8010242:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8010244:	4b18      	ldr	r3, [pc, #96]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010246:	2200      	movs	r2, #0
 8010248:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801024a:	4b17      	ldr	r3, [pc, #92]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 801024c:	2200      	movs	r2, #0
 801024e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8010250:	4b15      	ldr	r3, [pc, #84]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010252:	2200      	movs	r2, #0
 8010254:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010256:	4b14      	ldr	r3, [pc, #80]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010258:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801025c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 801025e:	4b12      	ldr	r3, [pc, #72]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010260:	2200      	movs	r2, #0
 8010262:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8010264:	4b10      	ldr	r3, [pc, #64]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010266:	2200      	movs	r2, #0
 8010268:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 801026a:	4b0f      	ldr	r3, [pc, #60]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 801026c:	2200      	movs	r2, #0
 801026e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8010270:	4b0d      	ldr	r3, [pc, #52]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010272:	2200      	movs	r2, #0
 8010274:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8010276:	4b0c      	ldr	r3, [pc, #48]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010278:	2200      	movs	r2, #0
 801027a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 801027c:	4b0a      	ldr	r3, [pc, #40]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 801027e:	2200      	movs	r2, #0
 8010280:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8010282:	4b09      	ldr	r3, [pc, #36]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010284:	2200      	movs	r2, #0
 8010286:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8010288:	4b07      	ldr	r3, [pc, #28]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 801028a:	2200      	movs	r2, #0
 801028c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 801028e:	4b06      	ldr	r3, [pc, #24]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010290:	2200      	movs	r2, #0
 8010292:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8010294:	4804      	ldr	r0, [pc, #16]	@ (80102a8 <MX_SPI1_Init+0xa4>)
 8010296:	f7f8 f869 	bl	800836c <HAL_SPI_Init>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d001      	beq.n	80102a4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80102a0:	f7ff ff92 	bl	80101c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80102a4:	bf00      	nop
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	24000958 	.word	0x24000958
 80102ac:	40013000 	.word	0x40013000

080102b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80102b4:	4b28      	ldr	r3, [pc, #160]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102b6:	4a29      	ldr	r2, [pc, #164]	@ (801035c <MX_SPI2_Init+0xac>)
 80102b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80102ba:	4b27      	ldr	r3, [pc, #156]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80102c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80102c2:	4b25      	ldr	r3, [pc, #148]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80102c8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80102ca:	4b23      	ldr	r3, [pc, #140]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102cc:	220f      	movs	r2, #15
 80102ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80102d0:	4b21      	ldr	r3, [pc, #132]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80102d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80102d8:	4b1f      	ldr	r3, [pc, #124]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102da:	2200      	movs	r2, #0
 80102dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80102de:	4b1e      	ldr	r3, [pc, #120]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102e0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80102e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80102e6:	4b1c      	ldr	r3, [pc, #112]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80102ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80102ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80102f4:	4b18      	ldr	r3, [pc, #96]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80102fa:	4b17      	ldr	r3, [pc, #92]	@ (8010358 <MX_SPI2_Init+0xa8>)
 80102fc:	2200      	movs	r2, #0
 80102fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8010300:	4b15      	ldr	r3, [pc, #84]	@ (8010358 <MX_SPI2_Init+0xa8>)
 8010302:	2200      	movs	r2, #0
 8010304:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010306:	4b14      	ldr	r3, [pc, #80]	@ (8010358 <MX_SPI2_Init+0xa8>)
 8010308:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801030c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 801030e:	4b12      	ldr	r3, [pc, #72]	@ (8010358 <MX_SPI2_Init+0xa8>)
 8010310:	2200      	movs	r2, #0
 8010312:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8010314:	4b10      	ldr	r3, [pc, #64]	@ (8010358 <MX_SPI2_Init+0xa8>)
 8010316:	2200      	movs	r2, #0
 8010318:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 801031a:	4b0f      	ldr	r3, [pc, #60]	@ (8010358 <MX_SPI2_Init+0xa8>)
 801031c:	2200      	movs	r2, #0
 801031e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8010320:	4b0d      	ldr	r3, [pc, #52]	@ (8010358 <MX_SPI2_Init+0xa8>)
 8010322:	2200      	movs	r2, #0
 8010324:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8010326:	4b0c      	ldr	r3, [pc, #48]	@ (8010358 <MX_SPI2_Init+0xa8>)
 8010328:	2200      	movs	r2, #0
 801032a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 801032c:	4b0a      	ldr	r3, [pc, #40]	@ (8010358 <MX_SPI2_Init+0xa8>)
 801032e:	2200      	movs	r2, #0
 8010330:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8010332:	4b09      	ldr	r3, [pc, #36]	@ (8010358 <MX_SPI2_Init+0xa8>)
 8010334:	2200      	movs	r2, #0
 8010336:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8010338:	4b07      	ldr	r3, [pc, #28]	@ (8010358 <MX_SPI2_Init+0xa8>)
 801033a:	2200      	movs	r2, #0
 801033c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 801033e:	4b06      	ldr	r3, [pc, #24]	@ (8010358 <MX_SPI2_Init+0xa8>)
 8010340:	2200      	movs	r2, #0
 8010342:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8010344:	4804      	ldr	r0, [pc, #16]	@ (8010358 <MX_SPI2_Init+0xa8>)
 8010346:	f7f8 f811 	bl	800836c <HAL_SPI_Init>
 801034a:	4603      	mov	r3, r0
 801034c:	2b00      	cmp	r3, #0
 801034e:	d001      	beq.n	8010354 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8010350:	f7ff ff3a 	bl	80101c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8010354:	bf00      	nop
 8010356:	bd80      	pop	{r7, pc}
 8010358:	240009e0 	.word	0x240009e0
 801035c:	40003800 	.word	0x40003800

08010360 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b08c      	sub	sp, #48	@ 0x30
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010368:	f107 031c 	add.w	r3, r7, #28
 801036c:	2200      	movs	r2, #0
 801036e:	601a      	str	r2, [r3, #0]
 8010370:	605a      	str	r2, [r3, #4]
 8010372:	609a      	str	r2, [r3, #8]
 8010374:	60da      	str	r2, [r3, #12]
 8010376:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	4a34      	ldr	r2, [pc, #208]	@ (8010450 <HAL_SPI_MspInit+0xf0>)
 801037e:	4293      	cmp	r3, r2
 8010380:	d12e      	bne.n	80103e0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8010382:	4b34      	ldr	r3, [pc, #208]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 8010384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010388:	4a32      	ldr	r2, [pc, #200]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 801038a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801038e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8010392:	4b30      	ldr	r3, [pc, #192]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 8010394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801039c:	61bb      	str	r3, [r7, #24]
 801039e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80103a0:	4b2c      	ldr	r3, [pc, #176]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 80103a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80103a6:	4a2b      	ldr	r2, [pc, #172]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 80103a8:	f043 0301 	orr.w	r3, r3, #1
 80103ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80103b0:	4b28      	ldr	r3, [pc, #160]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 80103b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80103b6:	f003 0301 	and.w	r3, r3, #1
 80103ba:	617b      	str	r3, [r7, #20]
 80103bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 80103be:	23a0      	movs	r3, #160	@ 0xa0
 80103c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103c2:	2302      	movs	r3, #2
 80103c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103c6:	2300      	movs	r3, #0
 80103c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80103ca:	2301      	movs	r3, #1
 80103cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80103ce:	2305      	movs	r3, #5
 80103d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103d2:	f107 031c 	add.w	r3, r7, #28
 80103d6:	4619      	mov	r1, r3
 80103d8:	481f      	ldr	r0, [pc, #124]	@ (8010458 <HAL_SPI_MspInit+0xf8>)
 80103da:	f7f1 ff95 	bl	8002308 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80103de:	e032      	b.n	8010446 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	4a1d      	ldr	r2, [pc, #116]	@ (801045c <HAL_SPI_MspInit+0xfc>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d12d      	bne.n	8010446 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80103ea:	4b1a      	ldr	r3, [pc, #104]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 80103ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80103f0:	4a18      	ldr	r2, [pc, #96]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 80103f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80103f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80103fa:	4b16      	ldr	r3, [pc, #88]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 80103fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010400:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010404:	613b      	str	r3, [r7, #16]
 8010406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8010408:	4b12      	ldr	r3, [pc, #72]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 801040a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801040e:	4a11      	ldr	r2, [pc, #68]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 8010410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010418:	4b0e      	ldr	r3, [pc, #56]	@ (8010454 <HAL_SPI_MspInit+0xf4>)
 801041a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801041e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010422:	60fb      	str	r3, [r7, #12]
 8010424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8010426:	2306      	movs	r3, #6
 8010428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801042a:	2302      	movs	r3, #2
 801042c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801042e:	2300      	movs	r3, #0
 8010430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010432:	2300      	movs	r3, #0
 8010434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010436:	2305      	movs	r3, #5
 8010438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801043a:	f107 031c 	add.w	r3, r7, #28
 801043e:	4619      	mov	r1, r3
 8010440:	4807      	ldr	r0, [pc, #28]	@ (8010460 <HAL_SPI_MspInit+0x100>)
 8010442:	f7f1 ff61 	bl	8002308 <HAL_GPIO_Init>
}
 8010446:	bf00      	nop
 8010448:	3730      	adds	r7, #48	@ 0x30
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	40013000 	.word	0x40013000
 8010454:	58024400 	.word	0x58024400
 8010458:	58020000 	.word	0x58020000
 801045c:	40003800 	.word	0x40003800
 8010460:	58022000 	.word	0x58022000

08010464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010464:	b480      	push	{r7}
 8010466:	b083      	sub	sp, #12
 8010468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801046a:	4b0a      	ldr	r3, [pc, #40]	@ (8010494 <HAL_MspInit+0x30>)
 801046c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010470:	4a08      	ldr	r2, [pc, #32]	@ (8010494 <HAL_MspInit+0x30>)
 8010472:	f043 0302 	orr.w	r3, r3, #2
 8010476:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801047a:	4b06      	ldr	r3, [pc, #24]	@ (8010494 <HAL_MspInit+0x30>)
 801047c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010480:	f003 0302 	and.w	r3, r3, #2
 8010484:	607b      	str	r3, [r7, #4]
 8010486:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010488:	bf00      	nop
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr
 8010494:	58024400 	.word	0x58024400

08010498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b090      	sub	sp, #64	@ 0x40
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b0f      	cmp	r3, #15
 80104a4:	d827      	bhi.n	80104f6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80104a6:	2200      	movs	r2, #0
 80104a8:	6879      	ldr	r1, [r7, #4]
 80104aa:	2036      	movs	r0, #54	@ 0x36
 80104ac:	f7f1 fc3c 	bl	8001d28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80104b0:	2036      	movs	r0, #54	@ 0x36
 80104b2:	f7f1 fc53 	bl	8001d5c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80104b6:	4a29      	ldr	r2, [pc, #164]	@ (801055c <HAL_InitTick+0xc4>)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80104bc:	4b28      	ldr	r3, [pc, #160]	@ (8010560 <HAL_InitTick+0xc8>)
 80104be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80104c2:	4a27      	ldr	r2, [pc, #156]	@ (8010560 <HAL_InitTick+0xc8>)
 80104c4:	f043 0310 	orr.w	r3, r3, #16
 80104c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80104cc:	4b24      	ldr	r3, [pc, #144]	@ (8010560 <HAL_InitTick+0xc8>)
 80104ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80104d2:	f003 0310 	and.w	r3, r3, #16
 80104d6:	60fb      	str	r3, [r7, #12]
 80104d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80104da:	f107 0210 	add.w	r2, r7, #16
 80104de:	f107 0314 	add.w	r3, r7, #20
 80104e2:	4611      	mov	r1, r2
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7f5 fa01 	bl	80058ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80104ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80104ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d106      	bne.n	8010502 <HAL_InitTick+0x6a>
 80104f4:	e001      	b.n	80104fa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80104f6:	2301      	movs	r3, #1
 80104f8:	e02b      	b.n	8010552 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80104fa:	f7f5 f9e1 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 80104fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010500:	e004      	b.n	801050c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8010502:	f7f5 f9dd 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8010506:	4603      	mov	r3, r0
 8010508:	005b      	lsls	r3, r3, #1
 801050a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801050c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801050e:	4a15      	ldr	r2, [pc, #84]	@ (8010564 <HAL_InitTick+0xcc>)
 8010510:	fba2 2303 	umull	r2, r3, r2, r3
 8010514:	0c9b      	lsrs	r3, r3, #18
 8010516:	3b01      	subs	r3, #1
 8010518:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801051a:	4b13      	ldr	r3, [pc, #76]	@ (8010568 <HAL_InitTick+0xd0>)
 801051c:	4a13      	ldr	r2, [pc, #76]	@ (801056c <HAL_InitTick+0xd4>)
 801051e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8010520:	4b11      	ldr	r3, [pc, #68]	@ (8010568 <HAL_InitTick+0xd0>)
 8010522:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8010526:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8010528:	4a0f      	ldr	r2, [pc, #60]	@ (8010568 <HAL_InitTick+0xd0>)
 801052a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801052c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 801052e:	4b0e      	ldr	r3, [pc, #56]	@ (8010568 <HAL_InitTick+0xd0>)
 8010530:	2200      	movs	r2, #0
 8010532:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010534:	4b0c      	ldr	r3, [pc, #48]	@ (8010568 <HAL_InitTick+0xd0>)
 8010536:	2200      	movs	r2, #0
 8010538:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801053a:	480b      	ldr	r0, [pc, #44]	@ (8010568 <HAL_InitTick+0xd0>)
 801053c:	f7f8 fd83 	bl	8009046 <HAL_TIM_Base_Init>
 8010540:	4603      	mov	r3, r0
 8010542:	2b00      	cmp	r3, #0
 8010544:	d104      	bne.n	8010550 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8010546:	4808      	ldr	r0, [pc, #32]	@ (8010568 <HAL_InitTick+0xd0>)
 8010548:	f7f8 fdd4 	bl	80090f4 <HAL_TIM_Base_Start_IT>
 801054c:	4603      	mov	r3, r0
 801054e:	e000      	b.n	8010552 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8010550:	2301      	movs	r3, #1
}
 8010552:	4618      	mov	r0, r3
 8010554:	3740      	adds	r7, #64	@ 0x40
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	24000000 	.word	0x24000000
 8010560:	58024400 	.word	0x58024400
 8010564:	431bde83 	.word	0x431bde83
 8010568:	24000a68 	.word	0x24000a68
 801056c:	40001000 	.word	0x40001000

08010570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010570:	b480      	push	{r7}
 8010572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010574:	bf00      	nop
 8010576:	e7fd      	b.n	8010574 <NMI_Handler+0x4>

08010578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010578:	b480      	push	{r7}
 801057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801057c:	bf00      	nop
 801057e:	e7fd      	b.n	801057c <HardFault_Handler+0x4>

08010580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010580:	b480      	push	{r7}
 8010582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010584:	bf00      	nop
 8010586:	e7fd      	b.n	8010584 <MemManage_Handler+0x4>

08010588 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010588:	b480      	push	{r7}
 801058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801058c:	bf00      	nop
 801058e:	e7fd      	b.n	801058c <BusFault_Handler+0x4>

08010590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010590:	b480      	push	{r7}
 8010592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010594:	bf00      	nop
 8010596:	e7fd      	b.n	8010594 <UsageFault_Handler+0x4>

08010598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010598:	b480      	push	{r7}
 801059a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801059c:	bf00      	nop
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr

080105a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80105a6:	b480      	push	{r7}
 80105a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80105aa:	bf00      	nop
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80105b4:	b480      	push	{r7}
 80105b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80105b8:	bf00      	nop
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr

080105c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80105c2:	b480      	push	{r7}
 80105c4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80105c6:	bf00      	nop
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 80105d4:	2040      	movs	r0, #64	@ 0x40
 80105d6:	f7f2 f892 	bl	80026fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80105da:	bf00      	nop
 80105dc:	bd80      	pop	{r7, pc}
	...

080105e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80105e4:	4802      	ldr	r0, [pc, #8]	@ (80105f0 <TIM3_IRQHandler+0x10>)
 80105e6:	f7f8 ff6d 	bl	80094c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80105ea:	bf00      	nop
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	24000b00 	.word	0x24000b00

080105f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80105f8:	4b06      	ldr	r3, [pc, #24]	@ (8010614 <TIM6_DAC_IRQHandler+0x20>)
 80105fa:	791b      	ldrb	r3, [r3, #4]
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d002      	beq.n	8010608 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8010602:	4804      	ldr	r0, [pc, #16]	@ (8010614 <TIM6_DAC_IRQHandler+0x20>)
 8010604:	f7f1 fca9 	bl	8001f5a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8010608:	4803      	ldr	r0, [pc, #12]	@ (8010618 <TIM6_DAC_IRQHandler+0x24>)
 801060a:	f7f8 ff5b 	bl	80094c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801060e:	bf00      	nop
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	240007e0 	.word	0x240007e0
 8010618:	24000a68 	.word	0x24000a68

0801061c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8010620:	4802      	ldr	r0, [pc, #8]	@ (801062c <OTG_FS_IRQHandler+0x10>)
 8010622:	f7f2 ffeb 	bl	80035fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8010626:	bf00      	nop
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	24001e74 	.word	0x24001e74

08010630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010630:	b480      	push	{r7}
 8010632:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8010634:	4b37      	ldr	r3, [pc, #220]	@ (8010714 <SystemInit+0xe4>)
 8010636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801063a:	4a36      	ldr	r2, [pc, #216]	@ (8010714 <SystemInit+0xe4>)
 801063c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8010644:	4b34      	ldr	r3, [pc, #208]	@ (8010718 <SystemInit+0xe8>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	f003 030f 	and.w	r3, r3, #15
 801064c:	2b06      	cmp	r3, #6
 801064e:	d807      	bhi.n	8010660 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8010650:	4b31      	ldr	r3, [pc, #196]	@ (8010718 <SystemInit+0xe8>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f023 030f 	bic.w	r3, r3, #15
 8010658:	4a2f      	ldr	r2, [pc, #188]	@ (8010718 <SystemInit+0xe8>)
 801065a:	f043 0307 	orr.w	r3, r3, #7
 801065e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8010660:	4b2e      	ldr	r3, [pc, #184]	@ (801071c <SystemInit+0xec>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4a2d      	ldr	r2, [pc, #180]	@ (801071c <SystemInit+0xec>)
 8010666:	f043 0301 	orr.w	r3, r3, #1
 801066a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801066c:	4b2b      	ldr	r3, [pc, #172]	@ (801071c <SystemInit+0xec>)
 801066e:	2200      	movs	r2, #0
 8010670:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8010672:	4b2a      	ldr	r3, [pc, #168]	@ (801071c <SystemInit+0xec>)
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	4929      	ldr	r1, [pc, #164]	@ (801071c <SystemInit+0xec>)
 8010678:	4b29      	ldr	r3, [pc, #164]	@ (8010720 <SystemInit+0xf0>)
 801067a:	4013      	ands	r3, r2
 801067c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 801067e:	4b26      	ldr	r3, [pc, #152]	@ (8010718 <SystemInit+0xe8>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f003 0308 	and.w	r3, r3, #8
 8010686:	2b00      	cmp	r3, #0
 8010688:	d007      	beq.n	801069a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 801068a:	4b23      	ldr	r3, [pc, #140]	@ (8010718 <SystemInit+0xe8>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f023 030f 	bic.w	r3, r3, #15
 8010692:	4a21      	ldr	r2, [pc, #132]	@ (8010718 <SystemInit+0xe8>)
 8010694:	f043 0307 	orr.w	r3, r3, #7
 8010698:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 801069a:	4b20      	ldr	r3, [pc, #128]	@ (801071c <SystemInit+0xec>)
 801069c:	2200      	movs	r2, #0
 801069e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80106a0:	4b1e      	ldr	r3, [pc, #120]	@ (801071c <SystemInit+0xec>)
 80106a2:	2200      	movs	r2, #0
 80106a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80106a6:	4b1d      	ldr	r3, [pc, #116]	@ (801071c <SystemInit+0xec>)
 80106a8:	2200      	movs	r2, #0
 80106aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80106ac:	4b1b      	ldr	r3, [pc, #108]	@ (801071c <SystemInit+0xec>)
 80106ae:	4a1d      	ldr	r2, [pc, #116]	@ (8010724 <SystemInit+0xf4>)
 80106b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80106b2:	4b1a      	ldr	r3, [pc, #104]	@ (801071c <SystemInit+0xec>)
 80106b4:	4a1c      	ldr	r2, [pc, #112]	@ (8010728 <SystemInit+0xf8>)
 80106b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80106b8:	4b18      	ldr	r3, [pc, #96]	@ (801071c <SystemInit+0xec>)
 80106ba:	4a1c      	ldr	r2, [pc, #112]	@ (801072c <SystemInit+0xfc>)
 80106bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80106be:	4b17      	ldr	r3, [pc, #92]	@ (801071c <SystemInit+0xec>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80106c4:	4b15      	ldr	r3, [pc, #84]	@ (801071c <SystemInit+0xec>)
 80106c6:	4a19      	ldr	r2, [pc, #100]	@ (801072c <SystemInit+0xfc>)
 80106c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80106ca:	4b14      	ldr	r3, [pc, #80]	@ (801071c <SystemInit+0xec>)
 80106cc:	2200      	movs	r2, #0
 80106ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80106d0:	4b12      	ldr	r3, [pc, #72]	@ (801071c <SystemInit+0xec>)
 80106d2:	4a16      	ldr	r2, [pc, #88]	@ (801072c <SystemInit+0xfc>)
 80106d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80106d6:	4b11      	ldr	r3, [pc, #68]	@ (801071c <SystemInit+0xec>)
 80106d8:	2200      	movs	r2, #0
 80106da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80106dc:	4b0f      	ldr	r3, [pc, #60]	@ (801071c <SystemInit+0xec>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a0e      	ldr	r2, [pc, #56]	@ (801071c <SystemInit+0xec>)
 80106e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80106e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80106e8:	4b0c      	ldr	r3, [pc, #48]	@ (801071c <SystemInit+0xec>)
 80106ea:	2200      	movs	r2, #0
 80106ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80106ee:	4b10      	ldr	r3, [pc, #64]	@ (8010730 <SystemInit+0x100>)
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	4b10      	ldr	r3, [pc, #64]	@ (8010734 <SystemInit+0x104>)
 80106f4:	4013      	ands	r3, r2
 80106f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80106fa:	d202      	bcs.n	8010702 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80106fc:	4b0e      	ldr	r3, [pc, #56]	@ (8010738 <SystemInit+0x108>)
 80106fe:	2201      	movs	r2, #1
 8010700:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8010702:	4b0e      	ldr	r3, [pc, #56]	@ (801073c <SystemInit+0x10c>)
 8010704:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8010708:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 801070a:	bf00      	nop
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr
 8010714:	e000ed00 	.word	0xe000ed00
 8010718:	52002000 	.word	0x52002000
 801071c:	58024400 	.word	0x58024400
 8010720:	eaf6ed7f 	.word	0xeaf6ed7f
 8010724:	02020200 	.word	0x02020200
 8010728:	01ff0000 	.word	0x01ff0000
 801072c:	01010280 	.word	0x01010280
 8010730:	5c001000 	.word	0x5c001000
 8010734:	ffff0000 	.word	0xffff0000
 8010738:	51008108 	.word	0x51008108
 801073c:	52004000 	.word	0x52004000

08010740 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b08e      	sub	sp, #56	@ 0x38
 8010744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010746:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801074a:	2200      	movs	r2, #0
 801074c:	601a      	str	r2, [r3, #0]
 801074e:	605a      	str	r2, [r3, #4]
 8010750:	609a      	str	r2, [r3, #8]
 8010752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010754:	f107 031c 	add.w	r3, r7, #28
 8010758:	2200      	movs	r2, #0
 801075a:	601a      	str	r2, [r3, #0]
 801075c:	605a      	str	r2, [r3, #4]
 801075e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010760:	463b      	mov	r3, r7
 8010762:	2200      	movs	r2, #0
 8010764:	601a      	str	r2, [r3, #0]
 8010766:	605a      	str	r2, [r3, #4]
 8010768:	609a      	str	r2, [r3, #8]
 801076a:	60da      	str	r2, [r3, #12]
 801076c:	611a      	str	r2, [r3, #16]
 801076e:	615a      	str	r2, [r3, #20]
 8010770:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8010772:	4b2e      	ldr	r3, [pc, #184]	@ (801082c <MX_TIM2_Init+0xec>)
 8010774:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8010778:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 801077a:	4b2c      	ldr	r3, [pc, #176]	@ (801082c <MX_TIM2_Init+0xec>)
 801077c:	2200      	movs	r2, #0
 801077e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010780:	4b2a      	ldr	r3, [pc, #168]	@ (801082c <MX_TIM2_Init+0xec>)
 8010782:	2200      	movs	r2, #0
 8010784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8010786:	4b29      	ldr	r3, [pc, #164]	@ (801082c <MX_TIM2_Init+0xec>)
 8010788:	f642 62df 	movw	r2, #11999	@ 0x2edf
 801078c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801078e:	4b27      	ldr	r3, [pc, #156]	@ (801082c <MX_TIM2_Init+0xec>)
 8010790:	2200      	movs	r2, #0
 8010792:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010794:	4b25      	ldr	r3, [pc, #148]	@ (801082c <MX_TIM2_Init+0xec>)
 8010796:	2200      	movs	r2, #0
 8010798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801079a:	4824      	ldr	r0, [pc, #144]	@ (801082c <MX_TIM2_Init+0xec>)
 801079c:	f7f8 fc53 	bl	8009046 <HAL_TIM_Base_Init>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d001      	beq.n	80107aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80107a6:	f7ff fd0f 	bl	80101c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80107aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80107ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80107b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80107b4:	4619      	mov	r1, r3
 80107b6:	481d      	ldr	r0, [pc, #116]	@ (801082c <MX_TIM2_Init+0xec>)
 80107b8:	f7f9 f8a0 	bl	80098fc <HAL_TIM_ConfigClockSource>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d001      	beq.n	80107c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80107c2:	f7ff fd01 	bl	80101c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80107c6:	4819      	ldr	r0, [pc, #100]	@ (801082c <MX_TIM2_Init+0xec>)
 80107c8:	f7f8 fd0c 	bl	80091e4 <HAL_TIM_PWM_Init>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d001      	beq.n	80107d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80107d2:	f7ff fcf9 	bl	80101c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80107d6:	2300      	movs	r3, #0
 80107d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80107da:	2300      	movs	r3, #0
 80107dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80107de:	f107 031c 	add.w	r3, r7, #28
 80107e2:	4619      	mov	r1, r3
 80107e4:	4811      	ldr	r0, [pc, #68]	@ (801082c <MX_TIM2_Init+0xec>)
 80107e6:	f7f9 feab 	bl	800a540 <HAL_TIMEx_MasterConfigSynchronization>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d001      	beq.n	80107f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80107f0:	f7ff fcea 	bl	80101c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80107f4:	2360      	movs	r3, #96	@ 0x60
 80107f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 80107f8:	f242 3327 	movw	r3, #8999	@ 0x2327
 80107fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80107fe:	2300      	movs	r3, #0
 8010800:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010802:	2300      	movs	r3, #0
 8010804:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8010806:	463b      	mov	r3, r7
 8010808:	2200      	movs	r2, #0
 801080a:	4619      	mov	r1, r3
 801080c:	4807      	ldr	r0, [pc, #28]	@ (801082c <MX_TIM2_Init+0xec>)
 801080e:	f7f8 ff61 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8010818:	f7ff fcd6 	bl	80101c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 801081c:	4803      	ldr	r0, [pc, #12]	@ (801082c <MX_TIM2_Init+0xec>)
 801081e:	f000 f961 	bl	8010ae4 <HAL_TIM_MspPostInit>

}
 8010822:	bf00      	nop
 8010824:	3738      	adds	r7, #56	@ 0x38
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	24000ab4 	.word	0x24000ab4

08010830 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b088      	sub	sp, #32
 8010834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010836:	f107 0310 	add.w	r3, r7, #16
 801083a:	2200      	movs	r2, #0
 801083c:	601a      	str	r2, [r3, #0]
 801083e:	605a      	str	r2, [r3, #4]
 8010840:	609a      	str	r2, [r3, #8]
 8010842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010844:	1d3b      	adds	r3, r7, #4
 8010846:	2200      	movs	r2, #0
 8010848:	601a      	str	r2, [r3, #0]
 801084a:	605a      	str	r2, [r3, #4]
 801084c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 801084e:	4b1d      	ldr	r3, [pc, #116]	@ (80108c4 <MX_TIM3_Init+0x94>)
 8010850:	4a1d      	ldr	r2, [pc, #116]	@ (80108c8 <MX_TIM3_Init+0x98>)
 8010852:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8010854:	4b1b      	ldr	r3, [pc, #108]	@ (80108c4 <MX_TIM3_Init+0x94>)
 8010856:	2263      	movs	r2, #99	@ 0x63
 8010858:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801085a:	4b1a      	ldr	r3, [pc, #104]	@ (80108c4 <MX_TIM3_Init+0x94>)
 801085c:	2200      	movs	r2, #0
 801085e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24000-1;
 8010860:	4b18      	ldr	r3, [pc, #96]	@ (80108c4 <MX_TIM3_Init+0x94>)
 8010862:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8010866:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010868:	4b16      	ldr	r3, [pc, #88]	@ (80108c4 <MX_TIM3_Init+0x94>)
 801086a:	2200      	movs	r2, #0
 801086c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801086e:	4b15      	ldr	r3, [pc, #84]	@ (80108c4 <MX_TIM3_Init+0x94>)
 8010870:	2200      	movs	r2, #0
 8010872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8010874:	4813      	ldr	r0, [pc, #76]	@ (80108c4 <MX_TIM3_Init+0x94>)
 8010876:	f7f8 fbe6 	bl	8009046 <HAL_TIM_Base_Init>
 801087a:	4603      	mov	r3, r0
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8010880:	f7ff fca2 	bl	80101c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010888:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801088a:	f107 0310 	add.w	r3, r7, #16
 801088e:	4619      	mov	r1, r3
 8010890:	480c      	ldr	r0, [pc, #48]	@ (80108c4 <MX_TIM3_Init+0x94>)
 8010892:	f7f9 f833 	bl	80098fc <HAL_TIM_ConfigClockSource>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d001      	beq.n	80108a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 801089c:	f7ff fc94 	bl	80101c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80108a0:	2300      	movs	r3, #0
 80108a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80108a4:	2300      	movs	r3, #0
 80108a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80108a8:	1d3b      	adds	r3, r7, #4
 80108aa:	4619      	mov	r1, r3
 80108ac:	4805      	ldr	r0, [pc, #20]	@ (80108c4 <MX_TIM3_Init+0x94>)
 80108ae:	f7f9 fe47 	bl	800a540 <HAL_TIMEx_MasterConfigSynchronization>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d001      	beq.n	80108bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80108b8:	f7ff fc86 	bl	80101c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80108bc:	bf00      	nop
 80108be:	3720      	adds	r7, #32
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	24000b00 	.word	0x24000b00
 80108c8:	40000400 	.word	0x40000400

080108cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b09a      	sub	sp, #104	@ 0x68
 80108d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80108d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80108d6:	2200      	movs	r2, #0
 80108d8:	601a      	str	r2, [r3, #0]
 80108da:	605a      	str	r2, [r3, #4]
 80108dc:	609a      	str	r2, [r3, #8]
 80108de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80108e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80108e4:	2200      	movs	r2, #0
 80108e6:	601a      	str	r2, [r3, #0]
 80108e8:	605a      	str	r2, [r3, #4]
 80108ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80108ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80108f0:	2200      	movs	r2, #0
 80108f2:	601a      	str	r2, [r3, #0]
 80108f4:	605a      	str	r2, [r3, #4]
 80108f6:	609a      	str	r2, [r3, #8]
 80108f8:	60da      	str	r2, [r3, #12]
 80108fa:	611a      	str	r2, [r3, #16]
 80108fc:	615a      	str	r2, [r3, #20]
 80108fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8010900:	1d3b      	adds	r3, r7, #4
 8010902:	222c      	movs	r2, #44	@ 0x2c
 8010904:	2100      	movs	r1, #0
 8010906:	4618      	mov	r0, r3
 8010908:	f001 fe57 	bl	80125ba <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 801090c:	4b49      	ldr	r3, [pc, #292]	@ (8010a34 <MX_TIM8_Init+0x168>)
 801090e:	4a4a      	ldr	r2, [pc, #296]	@ (8010a38 <MX_TIM8_Init+0x16c>)
 8010910:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8010912:	4b48      	ldr	r3, [pc, #288]	@ (8010a34 <MX_TIM8_Init+0x168>)
 8010914:	2200      	movs	r2, #0
 8010916:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010918:	4b46      	ldr	r3, [pc, #280]	@ (8010a34 <MX_TIM8_Init+0x168>)
 801091a:	2200      	movs	r2, #0
 801091c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 801091e:	4b45      	ldr	r3, [pc, #276]	@ (8010a34 <MX_TIM8_Init+0x168>)
 8010920:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8010924:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010926:	4b43      	ldr	r3, [pc, #268]	@ (8010a34 <MX_TIM8_Init+0x168>)
 8010928:	2200      	movs	r2, #0
 801092a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 801092c:	4b41      	ldr	r3, [pc, #260]	@ (8010a34 <MX_TIM8_Init+0x168>)
 801092e:	2200      	movs	r2, #0
 8010930:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010932:	4b40      	ldr	r3, [pc, #256]	@ (8010a34 <MX_TIM8_Init+0x168>)
 8010934:	2200      	movs	r2, #0
 8010936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8010938:	483e      	ldr	r0, [pc, #248]	@ (8010a34 <MX_TIM8_Init+0x168>)
 801093a:	f7f8 fb84 	bl	8009046 <HAL_TIM_Base_Init>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d001      	beq.n	8010948 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8010944:	f7ff fc40 	bl	80101c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801094c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801094e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8010952:	4619      	mov	r1, r3
 8010954:	4837      	ldr	r0, [pc, #220]	@ (8010a34 <MX_TIM8_Init+0x168>)
 8010956:	f7f8 ffd1 	bl	80098fc <HAL_TIM_ConfigClockSource>
 801095a:	4603      	mov	r3, r0
 801095c:	2b00      	cmp	r3, #0
 801095e:	d001      	beq.n	8010964 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8010960:	f7ff fc32 	bl	80101c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8010964:	4833      	ldr	r0, [pc, #204]	@ (8010a34 <MX_TIM8_Init+0x168>)
 8010966:	f7f8 fc3d 	bl	80091e4 <HAL_TIM_PWM_Init>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d001      	beq.n	8010974 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8010970:	f7ff fc2a 	bl	80101c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010974:	2300      	movs	r3, #0
 8010976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8010978:	2300      	movs	r3, #0
 801097a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801097c:	2300      	movs	r3, #0
 801097e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8010980:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010984:	4619      	mov	r1, r3
 8010986:	482b      	ldr	r0, [pc, #172]	@ (8010a34 <MX_TIM8_Init+0x168>)
 8010988:	f7f9 fdda 	bl	800a540 <HAL_TIMEx_MasterConfigSynchronization>
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d001      	beq.n	8010996 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8010992:	f7ff fc19 	bl	80101c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010996:	2360      	movs	r3, #96	@ 0x60
 8010998:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 801099a:	2300      	movs	r3, #0
 801099c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801099e:	2300      	movs	r3, #0
 80109a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80109a2:	2300      	movs	r3, #0
 80109a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80109a6:	2300      	movs	r3, #0
 80109a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80109aa:	2300      	movs	r3, #0
 80109ac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80109ae:	2300      	movs	r3, #0
 80109b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80109b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80109b6:	2200      	movs	r2, #0
 80109b8:	4619      	mov	r1, r3
 80109ba:	481e      	ldr	r0, [pc, #120]	@ (8010a34 <MX_TIM8_Init+0x168>)
 80109bc:	f7f8 fe8a 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d001      	beq.n	80109ca <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80109c6:	f7ff fbff 	bl	80101c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80109ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80109ce:	2204      	movs	r2, #4
 80109d0:	4619      	mov	r1, r3
 80109d2:	4818      	ldr	r0, [pc, #96]	@ (8010a34 <MX_TIM8_Init+0x168>)
 80109d4:	f7f8 fe7e 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d001      	beq.n	80109e2 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80109de:	f7ff fbf3 	bl	80101c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80109e2:	2300      	movs	r3, #0
 80109e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80109e6:	2300      	movs	r3, #0
 80109e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80109ea:	2300      	movs	r3, #0
 80109ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80109ee:	2300      	movs	r3, #0
 80109f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80109f2:	2300      	movs	r3, #0
 80109f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80109f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80109fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80109fc:	2300      	movs	r3, #0
 80109fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8010a00:	2300      	movs	r3, #0
 8010a02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8010a04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010a08:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8010a12:	1d3b      	adds	r3, r7, #4
 8010a14:	4619      	mov	r1, r3
 8010a16:	4807      	ldr	r0, [pc, #28]	@ (8010a34 <MX_TIM8_Init+0x168>)
 8010a18:	f7f9 fe20 	bl	800a65c <HAL_TIMEx_ConfigBreakDeadTime>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d001      	beq.n	8010a26 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8010a22:	f7ff fbd1 	bl	80101c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8010a26:	4803      	ldr	r0, [pc, #12]	@ (8010a34 <MX_TIM8_Init+0x168>)
 8010a28:	f000 f85c 	bl	8010ae4 <HAL_TIM_MspPostInit>

}
 8010a2c:	bf00      	nop
 8010a2e:	3768      	adds	r7, #104	@ 0x68
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	24000b4c 	.word	0x24000b4c
 8010a38:	40010400 	.word	0x40010400

08010a3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a4c:	d10f      	bne.n	8010a6e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010a4e:	4b22      	ldr	r3, [pc, #136]	@ (8010ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8010a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010a54:	4a20      	ldr	r2, [pc, #128]	@ (8010ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8010a56:	f043 0301 	orr.w	r3, r3, #1
 8010a5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8010ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8010a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010a64:	f003 0301 	and.w	r3, r3, #1
 8010a68:	617b      	str	r3, [r7, #20]
 8010a6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8010a6c:	e030      	b.n	8010ad0 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM3)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4a1a      	ldr	r2, [pc, #104]	@ (8010adc <HAL_TIM_Base_MspInit+0xa0>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d117      	bne.n	8010aa8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8010a78:	4b17      	ldr	r3, [pc, #92]	@ (8010ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8010a7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010a7e:	4a16      	ldr	r2, [pc, #88]	@ (8010ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8010a80:	f043 0302 	orr.w	r3, r3, #2
 8010a84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010a88:	4b13      	ldr	r3, [pc, #76]	@ (8010ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8010a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010a8e:	f003 0302 	and.w	r3, r3, #2
 8010a92:	613b      	str	r3, [r7, #16]
 8010a94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8010a96:	2200      	movs	r2, #0
 8010a98:	2101      	movs	r1, #1
 8010a9a:	201d      	movs	r0, #29
 8010a9c:	f7f1 f944 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8010aa0:	201d      	movs	r0, #29
 8010aa2:	f7f1 f95b 	bl	8001d5c <HAL_NVIC_EnableIRQ>
}
 8010aa6:	e013      	b.n	8010ad0 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM8)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4a0c      	ldr	r2, [pc, #48]	@ (8010ae0 <HAL_TIM_Base_MspInit+0xa4>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d10e      	bne.n	8010ad0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8010ab2:	4b09      	ldr	r3, [pc, #36]	@ (8010ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8010ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010ab8:	4a07      	ldr	r2, [pc, #28]	@ (8010ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8010aba:	f043 0302 	orr.w	r3, r3, #2
 8010abe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8010ac2:	4b05      	ldr	r3, [pc, #20]	@ (8010ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8010ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010ac8:	f003 0302 	and.w	r3, r3, #2
 8010acc:	60fb      	str	r3, [r7, #12]
 8010ace:	68fb      	ldr	r3, [r7, #12]
}
 8010ad0:	bf00      	nop
 8010ad2:	3718      	adds	r7, #24
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	58024400 	.word	0x58024400
 8010adc:	40000400 	.word	0x40000400
 8010ae0:	40010400 	.word	0x40010400

08010ae4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b08c      	sub	sp, #48	@ 0x30
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010aec:	f107 031c 	add.w	r3, r7, #28
 8010af0:	2200      	movs	r2, #0
 8010af2:	601a      	str	r2, [r3, #0]
 8010af4:	605a      	str	r2, [r3, #4]
 8010af6:	609a      	str	r2, [r3, #8]
 8010af8:	60da      	str	r2, [r3, #12]
 8010afa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b04:	d11f      	bne.n	8010b46 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b06:	4b43      	ldr	r3, [pc, #268]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b0c:	4a41      	ldr	r2, [pc, #260]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b0e:	f043 0301 	orr.w	r3, r3, #1
 8010b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010b16:	4b3f      	ldr	r3, [pc, #252]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	61bb      	str	r3, [r7, #24]
 8010b22:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8010b24:	2301      	movs	r3, #1
 8010b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b28:	2302      	movs	r3, #2
 8010b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b30:	2303      	movs	r3, #3
 8010b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8010b34:	2301      	movs	r3, #1
 8010b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b38:	f107 031c 	add.w	r3, r7, #28
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	4836      	ldr	r0, [pc, #216]	@ (8010c18 <HAL_TIM_MspPostInit+0x134>)
 8010b40:	f7f1 fbe2 	bl	8002308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8010b44:	e062      	b.n	8010c0c <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM8)
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	4a34      	ldr	r2, [pc, #208]	@ (8010c1c <HAL_TIM_MspPostInit+0x138>)
 8010b4c:	4293      	cmp	r3, r2
 8010b4e:	d15d      	bne.n	8010c0c <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b50:	4b30      	ldr	r3, [pc, #192]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b56:	4a2f      	ldr	r2, [pc, #188]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b58:	f043 0302 	orr.w	r3, r3, #2
 8010b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010b60:	4b2c      	ldr	r3, [pc, #176]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b66:	f003 0302 	and.w	r3, r3, #2
 8010b6a:	617b      	str	r3, [r7, #20]
 8010b6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010b6e:	4b29      	ldr	r3, [pc, #164]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b74:	4a27      	ldr	r2, [pc, #156]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b76:	f043 0304 	orr.w	r3, r3, #4
 8010b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010b7e:	4b25      	ldr	r3, [pc, #148]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b84:	f003 0304 	and.w	r3, r3, #4
 8010b88:	613b      	str	r3, [r7, #16]
 8010b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8010b8c:	4b21      	ldr	r3, [pc, #132]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b92:	4a20      	ldr	r2, [pc, #128]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8010c14 <HAL_TIM_MspPostInit+0x130>)
 8010b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ba6:	60fb      	str	r3, [r7, #12]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8010baa:	2301      	movs	r3, #1
 8010bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bae:	2302      	movs	r3, #2
 8010bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bb6:	2303      	movs	r3, #3
 8010bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010bba:	2303      	movs	r3, #3
 8010bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010bbe:	f107 031c 	add.w	r3, r7, #28
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	4816      	ldr	r0, [pc, #88]	@ (8010c20 <HAL_TIM_MspPostInit+0x13c>)
 8010bc6:	f7f1 fb9f 	bl	8002308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010bca:	23c0      	movs	r3, #192	@ 0xc0
 8010bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bce:	2302      	movs	r3, #2
 8010bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bd6:	2303      	movs	r3, #3
 8010bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010bda:	2303      	movs	r3, #3
 8010bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010bde:	f107 031c 	add.w	r3, r7, #28
 8010be2:	4619      	mov	r1, r3
 8010be4:	480f      	ldr	r0, [pc, #60]	@ (8010c24 <HAL_TIM_MspPostInit+0x140>)
 8010be6:	f7f1 fb8f 	bl	8002308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8010bea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bf0:	2302      	movs	r3, #2
 8010bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bf8:	2303      	movs	r3, #3
 8010bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010bfc:	2303      	movs	r3, #3
 8010bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010c00:	f107 031c 	add.w	r3, r7, #28
 8010c04:	4619      	mov	r1, r3
 8010c06:	4808      	ldr	r0, [pc, #32]	@ (8010c28 <HAL_TIM_MspPostInit+0x144>)
 8010c08:	f7f1 fb7e 	bl	8002308 <HAL_GPIO_Init>
}
 8010c0c:	bf00      	nop
 8010c0e:	3730      	adds	r7, #48	@ 0x30
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}
 8010c14:	58024400 	.word	0x58024400
 8010c18:	58020000 	.word	0x58020000
 8010c1c:	40010400 	.word	0x40010400
 8010c20:	58020400 	.word	0x58020400
 8010c24:	58020800 	.word	0x58020800
 8010c28:	58021c00 	.word	0x58021c00

08010c2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010c30:	2200      	movs	r2, #0
 8010c32:	4913      	ldr	r1, [pc, #76]	@ (8010c80 <MX_USB_DEVICE_Init+0x54>)
 8010c34:	4813      	ldr	r0, [pc, #76]	@ (8010c84 <MX_USB_DEVICE_Init+0x58>)
 8010c36:	f7fb fdb7 	bl	800c7a8 <USBD_Init>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d001      	beq.n	8010c44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010c40:	f7ff fac2 	bl	80101c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010c44:	4910      	ldr	r1, [pc, #64]	@ (8010c88 <MX_USB_DEVICE_Init+0x5c>)
 8010c46:	480f      	ldr	r0, [pc, #60]	@ (8010c84 <MX_USB_DEVICE_Init+0x58>)
 8010c48:	f7fb fdde 	bl	800c808 <USBD_RegisterClass>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d001      	beq.n	8010c56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010c52:	f7ff fab9 	bl	80101c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010c56:	490d      	ldr	r1, [pc, #52]	@ (8010c8c <MX_USB_DEVICE_Init+0x60>)
 8010c58:	480a      	ldr	r0, [pc, #40]	@ (8010c84 <MX_USB_DEVICE_Init+0x58>)
 8010c5a:	f7fb fd15 	bl	800c688 <USBD_CDC_RegisterInterface>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d001      	beq.n	8010c68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010c64:	f7ff fab0 	bl	80101c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010c68:	4806      	ldr	r0, [pc, #24]	@ (8010c84 <MX_USB_DEVICE_Init+0x58>)
 8010c6a:	f7fb fe03 	bl	800c874 <USBD_Start>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d001      	beq.n	8010c78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010c74:	f7ff faa8 	bl	80101c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010c78:	f7f3 fe58 	bl	800492c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010c7c:	bf00      	nop
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	240000b0 	.word	0x240000b0
 8010c84:	24000b98 	.word	0x24000b98
 8010c88:	24000014 	.word	0x24000014
 8010c8c:	2400009c 	.word	0x2400009c

08010c90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010c94:	2200      	movs	r2, #0
 8010c96:	4905      	ldr	r1, [pc, #20]	@ (8010cac <CDC_Init_FS+0x1c>)
 8010c98:	4805      	ldr	r0, [pc, #20]	@ (8010cb0 <CDC_Init_FS+0x20>)
 8010c9a:	f7fb fd0f 	bl	800c6bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010c9e:	4905      	ldr	r1, [pc, #20]	@ (8010cb4 <CDC_Init_FS+0x24>)
 8010ca0:	4803      	ldr	r0, [pc, #12]	@ (8010cb0 <CDC_Init_FS+0x20>)
 8010ca2:	f7fb fd2d 	bl	800c700 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010ca6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	24001674 	.word	0x24001674
 8010cb0:	24000b98 	.word	0x24000b98
 8010cb4:	24000e74 	.word	0x24000e74

08010cb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010cbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr

08010cc8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	6039      	str	r1, [r7, #0]
 8010cd2:	71fb      	strb	r3, [r7, #7]
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010cd8:	79fb      	ldrb	r3, [r7, #7]
 8010cda:	2b23      	cmp	r3, #35	@ 0x23
 8010cdc:	d84a      	bhi.n	8010d74 <CDC_Control_FS+0xac>
 8010cde:	a201      	add	r2, pc, #4	@ (adr r2, 8010ce4 <CDC_Control_FS+0x1c>)
 8010ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce4:	08010d75 	.word	0x08010d75
 8010ce8:	08010d75 	.word	0x08010d75
 8010cec:	08010d75 	.word	0x08010d75
 8010cf0:	08010d75 	.word	0x08010d75
 8010cf4:	08010d75 	.word	0x08010d75
 8010cf8:	08010d75 	.word	0x08010d75
 8010cfc:	08010d75 	.word	0x08010d75
 8010d00:	08010d75 	.word	0x08010d75
 8010d04:	08010d75 	.word	0x08010d75
 8010d08:	08010d75 	.word	0x08010d75
 8010d0c:	08010d75 	.word	0x08010d75
 8010d10:	08010d75 	.word	0x08010d75
 8010d14:	08010d75 	.word	0x08010d75
 8010d18:	08010d75 	.word	0x08010d75
 8010d1c:	08010d75 	.word	0x08010d75
 8010d20:	08010d75 	.word	0x08010d75
 8010d24:	08010d75 	.word	0x08010d75
 8010d28:	08010d75 	.word	0x08010d75
 8010d2c:	08010d75 	.word	0x08010d75
 8010d30:	08010d75 	.word	0x08010d75
 8010d34:	08010d75 	.word	0x08010d75
 8010d38:	08010d75 	.word	0x08010d75
 8010d3c:	08010d75 	.word	0x08010d75
 8010d40:	08010d75 	.word	0x08010d75
 8010d44:	08010d75 	.word	0x08010d75
 8010d48:	08010d75 	.word	0x08010d75
 8010d4c:	08010d75 	.word	0x08010d75
 8010d50:	08010d75 	.word	0x08010d75
 8010d54:	08010d75 	.word	0x08010d75
 8010d58:	08010d75 	.word	0x08010d75
 8010d5c:	08010d75 	.word	0x08010d75
 8010d60:	08010d75 	.word	0x08010d75
 8010d64:	08010d75 	.word	0x08010d75
 8010d68:	08010d75 	.word	0x08010d75
 8010d6c:	08010d75 	.word	0x08010d75
 8010d70:	08010d75 	.word	0x08010d75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010d74:	bf00      	nop
  }

  return (USBD_OK);
 8010d76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	370c      	adds	r7, #12
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010d8e:	6879      	ldr	r1, [r7, #4]
 8010d90:	4805      	ldr	r0, [pc, #20]	@ (8010da8 <CDC_Receive_FS+0x24>)
 8010d92:	f7fb fcb5 	bl	800c700 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010d96:	4804      	ldr	r0, [pc, #16]	@ (8010da8 <CDC_Receive_FS+0x24>)
 8010d98:	f7fb fcd0 	bl	800c73c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010d9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	24000b98 	.word	0x24000b98

08010dac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010dac:	b480      	push	{r7}
 8010dae:	b087      	sub	sp, #28
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	4613      	mov	r3, r2
 8010db8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	371c      	adds	r7, #28
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr
	...

08010dd0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b0ba      	sub	sp, #232	@ 0xe8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010dd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010ddc:	2200      	movs	r2, #0
 8010dde:	601a      	str	r2, [r3, #0]
 8010de0:	605a      	str	r2, [r3, #4]
 8010de2:	609a      	str	r2, [r3, #8]
 8010de4:	60da      	str	r2, [r3, #12]
 8010de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010de8:	f107 0310 	add.w	r3, r7, #16
 8010dec:	22c0      	movs	r2, #192	@ 0xc0
 8010dee:	2100      	movs	r1, #0
 8010df0:	4618      	mov	r0, r3
 8010df2:	f001 fbe2 	bl	80125ba <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8010eac <HAL_PCD_MspInit+0xdc>)
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	d151      	bne.n	8010ea4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010e00:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010e04:	f04f 0300 	mov.w	r3, #0
 8010e08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8010e0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010e14:	f107 0310 	add.w	r3, r7, #16
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7f4 fda9 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d001      	beq.n	8010e28 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8010e24:	f7ff f9d0 	bl	80101c8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010e28:	f7f3 fd80 	bl	800492c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e2c:	4b20      	ldr	r3, [pc, #128]	@ (8010eb0 <HAL_PCD_MspInit+0xe0>)
 8010e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010e32:	4a1f      	ldr	r2, [pc, #124]	@ (8010eb0 <HAL_PCD_MspInit+0xe0>)
 8010e34:	f043 0301 	orr.w	r3, r3, #1
 8010e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8010eb0 <HAL_PCD_MspInit+0xe0>)
 8010e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010e42:	f003 0301 	and.w	r3, r3, #1
 8010e46:	60fb      	str	r3, [r7, #12]
 8010e48:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010e4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e52:	2302      	movs	r3, #2
 8010e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010e64:	230a      	movs	r3, #10
 8010e66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010e6e:	4619      	mov	r1, r3
 8010e70:	4810      	ldr	r0, [pc, #64]	@ (8010eb4 <HAL_PCD_MspInit+0xe4>)
 8010e72:	f7f1 fa49 	bl	8002308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010e76:	4b0e      	ldr	r3, [pc, #56]	@ (8010eb0 <HAL_PCD_MspInit+0xe0>)
 8010e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8010eb0 <HAL_PCD_MspInit+0xe0>)
 8010e7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010e82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010e86:	4b0a      	ldr	r3, [pc, #40]	@ (8010eb0 <HAL_PCD_MspInit+0xe0>)
 8010e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010e90:	60bb      	str	r3, [r7, #8]
 8010e92:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010e94:	2200      	movs	r2, #0
 8010e96:	2100      	movs	r1, #0
 8010e98:	2065      	movs	r0, #101	@ 0x65
 8010e9a:	f7f0 ff45 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010e9e:	2065      	movs	r0, #101	@ 0x65
 8010ea0:	f7f0 ff5c 	bl	8001d5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010ea4:	bf00      	nop
 8010ea6:	37e8      	adds	r7, #232	@ 0xe8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	40080000 	.word	0x40080000
 8010eb0:	58024400 	.word	0x58024400
 8010eb4:	58020000 	.word	0x58020000

08010eb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4610      	mov	r0, r2
 8010ed0:	f7fb fd1d 	bl	800c90e <USBD_LL_SetupStage>
}
 8010ed4:	bf00      	nop
 8010ed6:	3708      	adds	r7, #8
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010eee:	78fa      	ldrb	r2, [r7, #3]
 8010ef0:	6879      	ldr	r1, [r7, #4]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	00db      	lsls	r3, r3, #3
 8010ef6:	4413      	add	r3, r2
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	440b      	add	r3, r1
 8010efc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010f00:	681a      	ldr	r2, [r3, #0]
 8010f02:	78fb      	ldrb	r3, [r7, #3]
 8010f04:	4619      	mov	r1, r3
 8010f06:	f7fb fd57 	bl	800c9b8 <USBD_LL_DataOutStage>
}
 8010f0a:	bf00      	nop
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b082      	sub	sp, #8
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010f24:	78fa      	ldrb	r2, [r7, #3]
 8010f26:	6879      	ldr	r1, [r7, #4]
 8010f28:	4613      	mov	r3, r2
 8010f2a:	00db      	lsls	r3, r3, #3
 8010f2c:	4413      	add	r3, r2
 8010f2e:	009b      	lsls	r3, r3, #2
 8010f30:	440b      	add	r3, r1
 8010f32:	3320      	adds	r3, #32
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	78fb      	ldrb	r3, [r7, #3]
 8010f38:	4619      	mov	r1, r3
 8010f3a:	f7fb fdf0 	bl	800cb1e <USBD_LL_DataInStage>
}
 8010f3e:	bf00      	nop
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b082      	sub	sp, #8
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7fb ff2a 	bl	800cdae <USBD_LL_SOF>
}
 8010f5a:	bf00      	nop
 8010f5c:	3708      	adds	r7, #8
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}

08010f62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b084      	sub	sp, #16
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	79db      	ldrb	r3, [r3, #7]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d102      	bne.n	8010f7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010f76:	2300      	movs	r3, #0
 8010f78:	73fb      	strb	r3, [r7, #15]
 8010f7a:	e008      	b.n	8010f8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	79db      	ldrb	r3, [r3, #7]
 8010f80:	2b02      	cmp	r3, #2
 8010f82:	d102      	bne.n	8010f8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010f84:	2301      	movs	r3, #1
 8010f86:	73fb      	strb	r3, [r7, #15]
 8010f88:	e001      	b.n	8010f8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010f8a:	f7ff f91d 	bl	80101c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f94:	7bfa      	ldrb	r2, [r7, #15]
 8010f96:	4611      	mov	r1, r2
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7fb fec4 	bl	800cd26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fb fe6c 	bl	800cc82 <USBD_LL_Reset>
}
 8010faa:	bf00      	nop
 8010fac:	3710      	adds	r7, #16
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
	...

08010fb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fb febf 	bl	800cd46 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	6812      	ldr	r2, [r2, #0]
 8010fd6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010fda:	f043 0301 	orr.w	r3, r3, #1
 8010fde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	7adb      	ldrb	r3, [r3, #11]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d005      	beq.n	8010ff4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010fe8:	4b04      	ldr	r3, [pc, #16]	@ (8010ffc <HAL_PCD_SuspendCallback+0x48>)
 8010fea:	691b      	ldr	r3, [r3, #16]
 8010fec:	4a03      	ldr	r2, [pc, #12]	@ (8010ffc <HAL_PCD_SuspendCallback+0x48>)
 8010fee:	f043 0306 	orr.w	r3, r3, #6
 8010ff2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010ff4:	bf00      	nop
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	e000ed00 	.word	0xe000ed00

08011000 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801100e:	4618      	mov	r0, r3
 8011010:	f7fb feb5 	bl	800cd7e <USBD_LL_Resume>
}
 8011014:	bf00      	nop
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	460b      	mov	r3, r1
 8011026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801102e:	78fa      	ldrb	r2, [r7, #3]
 8011030:	4611      	mov	r1, r2
 8011032:	4618      	mov	r0, r3
 8011034:	f7fb ff0d 	bl	800ce52 <USBD_LL_IsoOUTIncomplete>
}
 8011038:	bf00      	nop
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b082      	sub	sp, #8
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	460b      	mov	r3, r1
 801104a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011052:	78fa      	ldrb	r2, [r7, #3]
 8011054:	4611      	mov	r1, r2
 8011056:	4618      	mov	r0, r3
 8011058:	f7fb fec9 	bl	800cdee <USBD_LL_IsoINIncomplete>
}
 801105c:	bf00      	nop
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011072:	4618      	mov	r0, r3
 8011074:	f7fb ff1f 	bl	800ceb6 <USBD_LL_DevConnected>
}
 8011078:	bf00      	nop
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801108e:	4618      	mov	r0, r3
 8011090:	f7fb ff1c 	bl	800cecc <USBD_LL_DevDisconnected>
}
 8011094:	bf00      	nop
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d13e      	bne.n	801112a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80110ac:	4a21      	ldr	r2, [pc, #132]	@ (8011134 <USBD_LL_Init+0x98>)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	4a1f      	ldr	r2, [pc, #124]	@ (8011134 <USBD_LL_Init+0x98>)
 80110b8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80110bc:	4b1d      	ldr	r3, [pc, #116]	@ (8011134 <USBD_LL_Init+0x98>)
 80110be:	4a1e      	ldr	r2, [pc, #120]	@ (8011138 <USBD_LL_Init+0x9c>)
 80110c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80110c2:	4b1c      	ldr	r3, [pc, #112]	@ (8011134 <USBD_LL_Init+0x98>)
 80110c4:	2209      	movs	r2, #9
 80110c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80110c8:	4b1a      	ldr	r3, [pc, #104]	@ (8011134 <USBD_LL_Init+0x98>)
 80110ca:	2202      	movs	r2, #2
 80110cc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80110ce:	4b19      	ldr	r3, [pc, #100]	@ (8011134 <USBD_LL_Init+0x98>)
 80110d0:	2200      	movs	r2, #0
 80110d2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80110d4:	4b17      	ldr	r3, [pc, #92]	@ (8011134 <USBD_LL_Init+0x98>)
 80110d6:	2202      	movs	r2, #2
 80110d8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80110da:	4b16      	ldr	r3, [pc, #88]	@ (8011134 <USBD_LL_Init+0x98>)
 80110dc:	2200      	movs	r2, #0
 80110de:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80110e0:	4b14      	ldr	r3, [pc, #80]	@ (8011134 <USBD_LL_Init+0x98>)
 80110e2:	2200      	movs	r2, #0
 80110e4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80110e6:	4b13      	ldr	r3, [pc, #76]	@ (8011134 <USBD_LL_Init+0x98>)
 80110e8:	2200      	movs	r2, #0
 80110ea:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80110ec:	4b11      	ldr	r3, [pc, #68]	@ (8011134 <USBD_LL_Init+0x98>)
 80110ee:	2200      	movs	r2, #0
 80110f0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80110f2:	4b10      	ldr	r3, [pc, #64]	@ (8011134 <USBD_LL_Init+0x98>)
 80110f4:	2200      	movs	r2, #0
 80110f6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80110f8:	4b0e      	ldr	r3, [pc, #56]	@ (8011134 <USBD_LL_Init+0x98>)
 80110fa:	2200      	movs	r2, #0
 80110fc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80110fe:	480d      	ldr	r0, [pc, #52]	@ (8011134 <USBD_LL_Init+0x98>)
 8011100:	f7f2 f93b 	bl	800337a <HAL_PCD_Init>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d001      	beq.n	801110e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801110a:	f7ff f85d 	bl	80101c8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801110e:	2180      	movs	r1, #128	@ 0x80
 8011110:	4808      	ldr	r0, [pc, #32]	@ (8011134 <USBD_LL_Init+0x98>)
 8011112:	f7f3 fb90 	bl	8004836 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011116:	2240      	movs	r2, #64	@ 0x40
 8011118:	2100      	movs	r1, #0
 801111a:	4806      	ldr	r0, [pc, #24]	@ (8011134 <USBD_LL_Init+0x98>)
 801111c:	f7f3 fb44 	bl	80047a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011120:	2280      	movs	r2, #128	@ 0x80
 8011122:	2101      	movs	r1, #1
 8011124:	4803      	ldr	r0, [pc, #12]	@ (8011134 <USBD_LL_Init+0x98>)
 8011126:	f7f3 fb3f 	bl	80047a8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801112a:	2300      	movs	r3, #0
}
 801112c:	4618      	mov	r0, r3
 801112e:	3708      	adds	r7, #8
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	24001e74 	.word	0x24001e74
 8011138:	40080000 	.word	0x40080000

0801113c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b084      	sub	sp, #16
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011144:	2300      	movs	r3, #0
 8011146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011148:	2300      	movs	r3, #0
 801114a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011152:	4618      	mov	r0, r3
 8011154:	f7f2 fa1d 	bl	8003592 <HAL_PCD_Start>
 8011158:	4603      	mov	r3, r0
 801115a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801115c:	7bfb      	ldrb	r3, [r7, #15]
 801115e:	4618      	mov	r0, r3
 8011160:	f000 f942 	bl	80113e8 <USBD_Get_USB_Status>
 8011164:	4603      	mov	r3, r0
 8011166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011168:	7bbb      	ldrb	r3, [r7, #14]
}
 801116a:	4618      	mov	r0, r3
 801116c:	3710      	adds	r7, #16
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}

08011172 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011172:	b580      	push	{r7, lr}
 8011174:	b084      	sub	sp, #16
 8011176:	af00      	add	r7, sp, #0
 8011178:	6078      	str	r0, [r7, #4]
 801117a:	4608      	mov	r0, r1
 801117c:	4611      	mov	r1, r2
 801117e:	461a      	mov	r2, r3
 8011180:	4603      	mov	r3, r0
 8011182:	70fb      	strb	r3, [r7, #3]
 8011184:	460b      	mov	r3, r1
 8011186:	70bb      	strb	r3, [r7, #2]
 8011188:	4613      	mov	r3, r2
 801118a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801118c:	2300      	movs	r3, #0
 801118e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011190:	2300      	movs	r3, #0
 8011192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801119a:	78bb      	ldrb	r3, [r7, #2]
 801119c:	883a      	ldrh	r2, [r7, #0]
 801119e:	78f9      	ldrb	r1, [r7, #3]
 80111a0:	f7f2 ff1e 	bl	8003fe0 <HAL_PCD_EP_Open>
 80111a4:	4603      	mov	r3, r0
 80111a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111a8:	7bfb      	ldrb	r3, [r7, #15]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f000 f91c 	bl	80113e8 <USBD_Get_USB_Status>
 80111b0:	4603      	mov	r3, r0
 80111b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3710      	adds	r7, #16
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}

080111be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111be:	b580      	push	{r7, lr}
 80111c0:	b084      	sub	sp, #16
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
 80111c6:	460b      	mov	r3, r1
 80111c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111ca:	2300      	movs	r3, #0
 80111cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111ce:	2300      	movs	r3, #0
 80111d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80111d8:	78fa      	ldrb	r2, [r7, #3]
 80111da:	4611      	mov	r1, r2
 80111dc:	4618      	mov	r0, r3
 80111de:	f7f2 ff67 	bl	80040b0 <HAL_PCD_EP_Close>
 80111e2:	4603      	mov	r3, r0
 80111e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111e6:	7bfb      	ldrb	r3, [r7, #15]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f000 f8fd 	bl	80113e8 <USBD_Get_USB_Status>
 80111ee:	4603      	mov	r3, r0
 80111f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3710      	adds	r7, #16
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	460b      	mov	r3, r1
 8011206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011208:	2300      	movs	r3, #0
 801120a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801120c:	2300      	movs	r3, #0
 801120e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011216:	78fa      	ldrb	r2, [r7, #3]
 8011218:	4611      	mov	r1, r2
 801121a:	4618      	mov	r0, r3
 801121c:	f7f3 f81f 	bl	800425e <HAL_PCD_EP_SetStall>
 8011220:	4603      	mov	r3, r0
 8011222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011224:	7bfb      	ldrb	r3, [r7, #15]
 8011226:	4618      	mov	r0, r3
 8011228:	f000 f8de 	bl	80113e8 <USBD_Get_USB_Status>
 801122c:	4603      	mov	r3, r0
 801122e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011230:	7bbb      	ldrb	r3, [r7, #14]
}
 8011232:	4618      	mov	r0, r3
 8011234:	3710      	adds	r7, #16
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}

0801123a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801123a:	b580      	push	{r7, lr}
 801123c:	b084      	sub	sp, #16
 801123e:	af00      	add	r7, sp, #0
 8011240:	6078      	str	r0, [r7, #4]
 8011242:	460b      	mov	r3, r1
 8011244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011246:	2300      	movs	r3, #0
 8011248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801124a:	2300      	movs	r3, #0
 801124c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011254:	78fa      	ldrb	r2, [r7, #3]
 8011256:	4611      	mov	r1, r2
 8011258:	4618      	mov	r0, r3
 801125a:	f7f3 f863 	bl	8004324 <HAL_PCD_EP_ClrStall>
 801125e:	4603      	mov	r3, r0
 8011260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011262:	7bfb      	ldrb	r3, [r7, #15]
 8011264:	4618      	mov	r0, r3
 8011266:	f000 f8bf 	bl	80113e8 <USBD_Get_USB_Status>
 801126a:	4603      	mov	r3, r0
 801126c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801126e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011270:	4618      	mov	r0, r3
 8011272:	3710      	adds	r7, #16
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}

08011278 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011278:	b480      	push	{r7}
 801127a:	b085      	sub	sp, #20
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	460b      	mov	r3, r1
 8011282:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801128a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801128c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011290:	2b00      	cmp	r3, #0
 8011292:	da0b      	bge.n	80112ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011294:	78fb      	ldrb	r3, [r7, #3]
 8011296:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801129a:	68f9      	ldr	r1, [r7, #12]
 801129c:	4613      	mov	r3, r2
 801129e:	00db      	lsls	r3, r3, #3
 80112a0:	4413      	add	r3, r2
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	440b      	add	r3, r1
 80112a6:	3316      	adds	r3, #22
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	e00b      	b.n	80112c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80112ac:	78fb      	ldrb	r3, [r7, #3]
 80112ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80112b2:	68f9      	ldr	r1, [r7, #12]
 80112b4:	4613      	mov	r3, r2
 80112b6:	00db      	lsls	r3, r3, #3
 80112b8:	4413      	add	r3, r2
 80112ba:	009b      	lsls	r3, r3, #2
 80112bc:	440b      	add	r3, r1
 80112be:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80112c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3714      	adds	r7, #20
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr

080112d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	460b      	mov	r3, r1
 80112da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112dc:	2300      	movs	r3, #0
 80112de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112e0:	2300      	movs	r3, #0
 80112e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80112ea:	78fa      	ldrb	r2, [r7, #3]
 80112ec:	4611      	mov	r1, r2
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7f2 fe52 	bl	8003f98 <HAL_PCD_SetAddress>
 80112f4:	4603      	mov	r3, r0
 80112f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112f8:	7bfb      	ldrb	r3, [r7, #15]
 80112fa:	4618      	mov	r0, r3
 80112fc:	f000 f874 	bl	80113e8 <USBD_Get_USB_Status>
 8011300:	4603      	mov	r3, r0
 8011302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011304:	7bbb      	ldrb	r3, [r7, #14]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b086      	sub	sp, #24
 8011312:	af00      	add	r7, sp, #0
 8011314:	60f8      	str	r0, [r7, #12]
 8011316:	607a      	str	r2, [r7, #4]
 8011318:	603b      	str	r3, [r7, #0]
 801131a:	460b      	mov	r3, r1
 801131c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801131e:	2300      	movs	r3, #0
 8011320:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011322:	2300      	movs	r3, #0
 8011324:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801132c:	7af9      	ldrb	r1, [r7, #11]
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	f7f2 ff5a 	bl	80041ea <HAL_PCD_EP_Transmit>
 8011336:	4603      	mov	r3, r0
 8011338:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801133a:	7dfb      	ldrb	r3, [r7, #23]
 801133c:	4618      	mov	r0, r3
 801133e:	f000 f853 	bl	80113e8 <USBD_Get_USB_Status>
 8011342:	4603      	mov	r3, r0
 8011344:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011346:	7dbb      	ldrb	r3, [r7, #22]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3718      	adds	r7, #24
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	607a      	str	r2, [r7, #4]
 801135a:	603b      	str	r3, [r7, #0]
 801135c:	460b      	mov	r3, r1
 801135e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011360:	2300      	movs	r3, #0
 8011362:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011364:	2300      	movs	r3, #0
 8011366:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801136e:	7af9      	ldrb	r1, [r7, #11]
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	687a      	ldr	r2, [r7, #4]
 8011374:	f7f2 fee6 	bl	8004144 <HAL_PCD_EP_Receive>
 8011378:	4603      	mov	r3, r0
 801137a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801137c:	7dfb      	ldrb	r3, [r7, #23]
 801137e:	4618      	mov	r0, r3
 8011380:	f000 f832 	bl	80113e8 <USBD_Get_USB_Status>
 8011384:	4603      	mov	r3, r0
 8011386:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011388:	7dbb      	ldrb	r3, [r7, #22]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3718      	adds	r7, #24
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}

08011392 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011392:	b580      	push	{r7, lr}
 8011394:	b082      	sub	sp, #8
 8011396:	af00      	add	r7, sp, #0
 8011398:	6078      	str	r0, [r7, #4]
 801139a:	460b      	mov	r3, r1
 801139c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80113a4:	78fa      	ldrb	r2, [r7, #3]
 80113a6:	4611      	mov	r1, r2
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7f2 ff06 	bl	80041ba <HAL_PCD_EP_GetRxCount>
 80113ae:	4603      	mov	r3, r0
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3708      	adds	r7, #8
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}

080113b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b083      	sub	sp, #12
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80113c0:	4b03      	ldr	r3, [pc, #12]	@ (80113d0 <USBD_static_malloc+0x18>)
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	370c      	adds	r7, #12
 80113c6:	46bd      	mov	sp, r7
 80113c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113cc:	4770      	bx	lr
 80113ce:	bf00      	nop
 80113d0:	24002358 	.word	0x24002358

080113d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80113dc:	bf00      	nop
 80113de:	370c      	adds	r7, #12
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	4603      	mov	r3, r0
 80113f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113f2:	2300      	movs	r3, #0
 80113f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80113f6:	79fb      	ldrb	r3, [r7, #7]
 80113f8:	2b03      	cmp	r3, #3
 80113fa:	d817      	bhi.n	801142c <USBD_Get_USB_Status+0x44>
 80113fc:	a201      	add	r2, pc, #4	@ (adr r2, 8011404 <USBD_Get_USB_Status+0x1c>)
 80113fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011402:	bf00      	nop
 8011404:	08011415 	.word	0x08011415
 8011408:	0801141b 	.word	0x0801141b
 801140c:	08011421 	.word	0x08011421
 8011410:	08011427 	.word	0x08011427
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011414:	2300      	movs	r3, #0
 8011416:	73fb      	strb	r3, [r7, #15]
    break;
 8011418:	e00b      	b.n	8011432 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801141a:	2303      	movs	r3, #3
 801141c:	73fb      	strb	r3, [r7, #15]
    break;
 801141e:	e008      	b.n	8011432 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011420:	2301      	movs	r3, #1
 8011422:	73fb      	strb	r3, [r7, #15]
    break;
 8011424:	e005      	b.n	8011432 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011426:	2303      	movs	r3, #3
 8011428:	73fb      	strb	r3, [r7, #15]
    break;
 801142a:	e002      	b.n	8011432 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801142c:	2303      	movs	r3, #3
 801142e:	73fb      	strb	r3, [r7, #15]
    break;
 8011430:	bf00      	nop
  }
  return usb_status;
 8011432:	7bfb      	ldrb	r3, [r7, #15]
}
 8011434:	4618      	mov	r0, r3
 8011436:	3714      	adds	r7, #20
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011440:	b480      	push	{r7}
 8011442:	b083      	sub	sp, #12
 8011444:	af00      	add	r7, sp, #0
 8011446:	4603      	mov	r3, r0
 8011448:	6039      	str	r1, [r7, #0]
 801144a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	2212      	movs	r2, #18
 8011450:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011452:	4b03      	ldr	r3, [pc, #12]	@ (8011460 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011454:	4618      	mov	r0, r3
 8011456:	370c      	adds	r7, #12
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr
 8011460:	240000d0 	.word	0x240000d0

08011464 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
 801146a:	4603      	mov	r3, r0
 801146c:	6039      	str	r1, [r7, #0]
 801146e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	2204      	movs	r2, #4
 8011474:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011476:	4b03      	ldr	r3, [pc, #12]	@ (8011484 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011478:	4618      	mov	r0, r3
 801147a:	370c      	adds	r7, #12
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr
 8011484:	240000e4 	.word	0x240000e4

08011488 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
 801148e:	4603      	mov	r3, r0
 8011490:	6039      	str	r1, [r7, #0]
 8011492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011494:	79fb      	ldrb	r3, [r7, #7]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d105      	bne.n	80114a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801149a:	683a      	ldr	r2, [r7, #0]
 801149c:	4907      	ldr	r1, [pc, #28]	@ (80114bc <USBD_FS_ProductStrDescriptor+0x34>)
 801149e:	4808      	ldr	r0, [pc, #32]	@ (80114c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80114a0:	f7fc fbc2 	bl	800dc28 <USBD_GetString>
 80114a4:	e004      	b.n	80114b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80114a6:	683a      	ldr	r2, [r7, #0]
 80114a8:	4904      	ldr	r1, [pc, #16]	@ (80114bc <USBD_FS_ProductStrDescriptor+0x34>)
 80114aa:	4805      	ldr	r0, [pc, #20]	@ (80114c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80114ac:	f7fc fbbc 	bl	800dc28 <USBD_GetString>
  }
  return USBD_StrDesc;
 80114b0:	4b02      	ldr	r3, [pc, #8]	@ (80114bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3708      	adds	r7, #8
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	24002578 	.word	0x24002578
 80114c0:	08014888 	.word	0x08014888

080114c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	4603      	mov	r3, r0
 80114cc:	6039      	str	r1, [r7, #0]
 80114ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80114d0:	683a      	ldr	r2, [r7, #0]
 80114d2:	4904      	ldr	r1, [pc, #16]	@ (80114e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80114d4:	4804      	ldr	r0, [pc, #16]	@ (80114e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80114d6:	f7fc fba7 	bl	800dc28 <USBD_GetString>
  return USBD_StrDesc;
 80114da:	4b02      	ldr	r3, [pc, #8]	@ (80114e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3708      	adds	r7, #8
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	24002578 	.word	0x24002578
 80114e8:	080148a0 	.word	0x080148a0

080114ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	4603      	mov	r3, r0
 80114f4:	6039      	str	r1, [r7, #0]
 80114f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	221a      	movs	r2, #26
 80114fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80114fe:	f000 f843 	bl	8011588 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011502:	4b02      	ldr	r3, [pc, #8]	@ (801150c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011504:	4618      	mov	r0, r3
 8011506:	3708      	adds	r7, #8
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	240000e8 	.word	0x240000e8

08011510 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b082      	sub	sp, #8
 8011514:	af00      	add	r7, sp, #0
 8011516:	4603      	mov	r3, r0
 8011518:	6039      	str	r1, [r7, #0]
 801151a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801151c:	79fb      	ldrb	r3, [r7, #7]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d105      	bne.n	801152e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011522:	683a      	ldr	r2, [r7, #0]
 8011524:	4907      	ldr	r1, [pc, #28]	@ (8011544 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011526:	4808      	ldr	r0, [pc, #32]	@ (8011548 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011528:	f7fc fb7e 	bl	800dc28 <USBD_GetString>
 801152c:	e004      	b.n	8011538 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801152e:	683a      	ldr	r2, [r7, #0]
 8011530:	4904      	ldr	r1, [pc, #16]	@ (8011544 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011532:	4805      	ldr	r0, [pc, #20]	@ (8011548 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011534:	f7fc fb78 	bl	800dc28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011538:	4b02      	ldr	r3, [pc, #8]	@ (8011544 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801153a:	4618      	mov	r0, r3
 801153c:	3708      	adds	r7, #8
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	24002578 	.word	0x24002578
 8011548:	080148b4 	.word	0x080148b4

0801154c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b082      	sub	sp, #8
 8011550:	af00      	add	r7, sp, #0
 8011552:	4603      	mov	r3, r0
 8011554:	6039      	str	r1, [r7, #0]
 8011556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011558:	79fb      	ldrb	r3, [r7, #7]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d105      	bne.n	801156a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801155e:	683a      	ldr	r2, [r7, #0]
 8011560:	4907      	ldr	r1, [pc, #28]	@ (8011580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011562:	4808      	ldr	r0, [pc, #32]	@ (8011584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011564:	f7fc fb60 	bl	800dc28 <USBD_GetString>
 8011568:	e004      	b.n	8011574 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801156a:	683a      	ldr	r2, [r7, #0]
 801156c:	4904      	ldr	r1, [pc, #16]	@ (8011580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801156e:	4805      	ldr	r0, [pc, #20]	@ (8011584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011570:	f7fc fb5a 	bl	800dc28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011574:	4b02      	ldr	r3, [pc, #8]	@ (8011580 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011576:	4618      	mov	r0, r3
 8011578:	3708      	adds	r7, #8
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	24002578 	.word	0x24002578
 8011584:	080148c0 	.word	0x080148c0

08011588 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b084      	sub	sp, #16
 801158c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801158e:	4b0f      	ldr	r3, [pc, #60]	@ (80115cc <Get_SerialNum+0x44>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011594:	4b0e      	ldr	r3, [pc, #56]	@ (80115d0 <Get_SerialNum+0x48>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801159a:	4b0e      	ldr	r3, [pc, #56]	@ (80115d4 <Get_SerialNum+0x4c>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80115a0:	68fa      	ldr	r2, [r7, #12]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	4413      	add	r3, r2
 80115a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d009      	beq.n	80115c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80115ae:	2208      	movs	r2, #8
 80115b0:	4909      	ldr	r1, [pc, #36]	@ (80115d8 <Get_SerialNum+0x50>)
 80115b2:	68f8      	ldr	r0, [r7, #12]
 80115b4:	f000 f814 	bl	80115e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80115b8:	2204      	movs	r2, #4
 80115ba:	4908      	ldr	r1, [pc, #32]	@ (80115dc <Get_SerialNum+0x54>)
 80115bc:	68b8      	ldr	r0, [r7, #8]
 80115be:	f000 f80f 	bl	80115e0 <IntToUnicode>
  }
}
 80115c2:	bf00      	nop
 80115c4:	3710      	adds	r7, #16
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	1ff1e800 	.word	0x1ff1e800
 80115d0:	1ff1e804 	.word	0x1ff1e804
 80115d4:	1ff1e808 	.word	0x1ff1e808
 80115d8:	240000ea 	.word	0x240000ea
 80115dc:	240000fa 	.word	0x240000fa

080115e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80115e0:	b480      	push	{r7}
 80115e2:	b087      	sub	sp, #28
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	60b9      	str	r1, [r7, #8]
 80115ea:	4613      	mov	r3, r2
 80115ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80115ee:	2300      	movs	r3, #0
 80115f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80115f2:	2300      	movs	r3, #0
 80115f4:	75fb      	strb	r3, [r7, #23]
 80115f6:	e027      	b.n	8011648 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	0f1b      	lsrs	r3, r3, #28
 80115fc:	2b09      	cmp	r3, #9
 80115fe:	d80b      	bhi.n	8011618 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	0f1b      	lsrs	r3, r3, #28
 8011604:	b2da      	uxtb	r2, r3
 8011606:	7dfb      	ldrb	r3, [r7, #23]
 8011608:	005b      	lsls	r3, r3, #1
 801160a:	4619      	mov	r1, r3
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	440b      	add	r3, r1
 8011610:	3230      	adds	r2, #48	@ 0x30
 8011612:	b2d2      	uxtb	r2, r2
 8011614:	701a      	strb	r2, [r3, #0]
 8011616:	e00a      	b.n	801162e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	0f1b      	lsrs	r3, r3, #28
 801161c:	b2da      	uxtb	r2, r3
 801161e:	7dfb      	ldrb	r3, [r7, #23]
 8011620:	005b      	lsls	r3, r3, #1
 8011622:	4619      	mov	r1, r3
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	440b      	add	r3, r1
 8011628:	3237      	adds	r2, #55	@ 0x37
 801162a:	b2d2      	uxtb	r2, r2
 801162c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	011b      	lsls	r3, r3, #4
 8011632:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011634:	7dfb      	ldrb	r3, [r7, #23]
 8011636:	005b      	lsls	r3, r3, #1
 8011638:	3301      	adds	r3, #1
 801163a:	68ba      	ldr	r2, [r7, #8]
 801163c:	4413      	add	r3, r2
 801163e:	2200      	movs	r2, #0
 8011640:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011642:	7dfb      	ldrb	r3, [r7, #23]
 8011644:	3301      	adds	r3, #1
 8011646:	75fb      	strb	r3, [r7, #23]
 8011648:	7dfa      	ldrb	r2, [r7, #23]
 801164a:	79fb      	ldrb	r3, [r7, #7]
 801164c:	429a      	cmp	r2, r3
 801164e:	d3d3      	bcc.n	80115f8 <IntToUnicode+0x18>
  }
}
 8011650:	bf00      	nop
 8011652:	bf00      	nop
 8011654:	371c      	adds	r7, #28
 8011656:	46bd      	mov	sp, r7
 8011658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165c:	4770      	bx	lr
	...

08011660 <arm_biquad_cascade_df1_init_f32>:
 8011660:	b510      	push	{r4, lr}
 8011662:	4604      	mov	r4, r0
 8011664:	4608      	mov	r0, r1
 8011666:	2100      	movs	r1, #0
 8011668:	60a2      	str	r2, [r4, #8]
 801166a:	0102      	lsls	r2, r0, #4
 801166c:	6020      	str	r0, [r4, #0]
 801166e:	4618      	mov	r0, r3
 8011670:	f000 ffa3 	bl	80125ba <memset>
 8011674:	6060      	str	r0, [r4, #4]
 8011676:	bd10      	pop	{r4, pc}

08011678 <arm_biquad_cascade_df1_f32>:
 8011678:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 801167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011680:	f003 0e03 	and.w	lr, r3, #3
 8011684:	6886      	ldr	r6, [r0, #8]
 8011686:	ea4f 190c 	mov.w	r9, ip, lsl #4
 801168a:	6845      	ldr	r5, [r0, #4]
 801168c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8011690:	3614      	adds	r6, #20
 8011692:	eb02 0a09 	add.w	sl, r2, r9
 8011696:	3510      	adds	r5, #16
 8011698:	6807      	ldr	r7, [r0, #0]
 801169a:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 801169e:	ed56 1a04 	vldr	s3, [r6, #-16]
 80116a2:	ed16 2a03 	vldr	s4, [r6, #-12]
 80116a6:	ed56 2a02 	vldr	s5, [r6, #-8]
 80116aa:	ed16 3a01 	vldr	s6, [r6, #-4]
 80116ae:	ed15 4a04 	vldr	s8, [r5, #-16]
 80116b2:	ed15 5a03 	vldr	s10, [r5, #-12]
 80116b6:	ed15 7a02 	vldr	s14, [r5, #-8]
 80116ba:	ed55 7a01 	vldr	s15, [r5, #-4]
 80116be:	f1bc 0f00 	cmp.w	ip, #0
 80116c2:	f000 80d4 	beq.w	801186e <arm_biquad_cascade_df1_f32+0x1f6>
 80116c6:	f101 0010 	add.w	r0, r1, #16
 80116ca:	f102 0310 	add.w	r3, r2, #16
 80116ce:	4664      	mov	r4, ip
 80116d0:	ed50 5a04 	vldr	s11, [r0, #-16]
 80116d4:	ee61 4a84 	vmul.f32	s9, s3, s8
 80116d8:	ee22 5a05 	vmul.f32	s10, s4, s10
 80116dc:	3c01      	subs	r4, #1
 80116de:	ee63 6aa5 	vmul.f32	s13, s7, s11
 80116e2:	f100 0010 	add.w	r0, r0, #16
 80116e6:	ee22 6a87 	vmul.f32	s12, s5, s14
 80116ea:	f103 0310 	add.w	r3, r3, #16
 80116ee:	ee63 7a27 	vmul.f32	s15, s6, s15
 80116f2:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80116f6:	ee21 0aa5 	vmul.f32	s0, s3, s11
 80116fa:	ee22 1a04 	vmul.f32	s2, s4, s8
 80116fe:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011702:	ee23 5a07 	vmul.f32	s10, s6, s14
 8011706:	ee22 4a25 	vmul.f32	s8, s4, s11
 801170a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801170e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011712:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 8011716:	ee62 5aa7 	vmul.f32	s11, s5, s15
 801171a:	ed10 6a07 	vldr	s12, [r0, #-28]	@ 0xffffffe4
 801171e:	ee63 7a27 	vmul.f32	s15, s6, s15
 8011722:	ee63 6a86 	vmul.f32	s13, s7, s12
 8011726:	ee61 0a86 	vmul.f32	s1, s3, s12
 801172a:	ee62 4a06 	vmul.f32	s9, s4, s12
 801172e:	ee36 7a80 	vadd.f32	s14, s13, s0
 8011732:	ee37 7a01 	vadd.f32	s14, s14, s2
 8011736:	ee37 7a25 	vadd.f32	s14, s14, s11
 801173a:	ee37 7a05 	vadd.f32	s14, s14, s10
 801173e:	ed03 7a07 	vstr	s14, [r3, #-28]	@ 0xffffffe4
 8011742:	ee62 6a87 	vmul.f32	s13, s5, s14
 8011746:	ed10 5a06 	vldr	s10, [r0, #-24]	@ 0xffffffe8
 801174a:	ee23 7a07 	vmul.f32	s14, s6, s14
 801174e:	ee63 5a85 	vmul.f32	s11, s7, s10
 8011752:	ee21 1a85 	vmul.f32	s2, s3, s10
 8011756:	ee75 5aa0 	vadd.f32	s11, s11, s1
 801175a:	ee75 5a84 	vadd.f32	s11, s11, s8
 801175e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8011762:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8011766:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 801176a:	ee62 6aa7 	vmul.f32	s13, s5, s15
 801176e:	ed10 4a05 	vldr	s8, [r0, #-20]	@ 0xffffffec
 8011772:	ee23 6a84 	vmul.f32	s12, s7, s8
 8011776:	ee36 6a01 	vadd.f32	s12, s12, s2
 801177a:	ee36 6a24 	vadd.f32	s12, s12, s9
 801177e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8011782:	ee36 7a07 	vadd.f32	s14, s12, s14
 8011786:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 801178a:	d1a1      	bne.n	80116d0 <arm_biquad_cascade_df1_f32+0x58>
 801178c:	4449      	add	r1, r9
 801178e:	4653      	mov	r3, sl
 8011790:	f1be 0f00 	cmp.w	lr, #0
 8011794:	d047      	beq.n	8011826 <arm_biquad_cascade_df1_f32+0x1ae>
 8011796:	edd1 6a00 	vldr	s13, [r1]
 801179a:	ee61 5a84 	vmul.f32	s11, s3, s8
 801179e:	ee22 5a05 	vmul.f32	s10, s4, s10
 80117a2:	ee63 4aa6 	vmul.f32	s9, s7, s13
 80117a6:	ee22 6a87 	vmul.f32	s12, s5, s14
 80117aa:	ee63 7a27 	vmul.f32	s15, s6, s15
 80117ae:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80117b2:	ee35 5a85 	vadd.f32	s10, s11, s10
 80117b6:	ee35 6a06 	vadd.f32	s12, s10, s12
 80117ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80117be:	ed83 6a00 	vstr	s12, [r3]
 80117c2:	f1b8 0f00 	cmp.w	r8, #0
 80117c6:	d040      	beq.n	801184a <arm_biquad_cascade_df1_f32+0x1d2>
 80117c8:	ed91 5a01 	vldr	s10, [r1, #4]
 80117cc:	ee61 5aa6 	vmul.f32	s11, s3, s13
 80117d0:	ee22 4a04 	vmul.f32	s8, s4, s8
 80117d4:	f1b8 0f01 	cmp.w	r8, #1
 80117d8:	ee65 4a23 	vmul.f32	s9, s10, s7
 80117dc:	ee62 7a86 	vmul.f32	s15, s5, s12
 80117e0:	ee23 7a07 	vmul.f32	s14, s6, s14
 80117e4:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80117e8:	ee35 4a84 	vadd.f32	s8, s11, s8
 80117ec:	ee74 7a27 	vadd.f32	s15, s8, s15
 80117f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117f4:	edc3 7a01 	vstr	s15, [r3, #4]
 80117f8:	d030      	beq.n	801185c <arm_biquad_cascade_df1_f32+0x1e4>
 80117fa:	ed91 4a02 	vldr	s8, [r1, #8]
 80117fe:	ee22 2a26 	vmul.f32	s4, s4, s13
 8011802:	ee65 1a21 	vmul.f32	s3, s10, s3
 8011806:	ee63 6a84 	vmul.f32	s13, s7, s8
 801180a:	ee67 2aa2 	vmul.f32	s5, s15, s5
 801180e:	ee23 3a06 	vmul.f32	s6, s6, s12
 8011812:	ee76 6aa1 	vadd.f32	s13, s13, s3
 8011816:	ee76 6a82 	vadd.f32	s13, s13, s4
 801181a:	ee76 6aa2 	vadd.f32	s13, s13, s5
 801181e:	ee36 7a83 	vadd.f32	s14, s13, s6
 8011822:	ed83 7a02 	vstr	s14, [r3, #8]
 8011826:	3f01      	subs	r7, #1
 8011828:	ed05 4a04 	vstr	s8, [r5, #-16]
 801182c:	ed05 5a03 	vstr	s10, [r5, #-12]
 8011830:	f106 0614 	add.w	r6, r6, #20
 8011834:	ed05 7a02 	vstr	s14, [r5, #-8]
 8011838:	4611      	mov	r1, r2
 801183a:	ed45 7a01 	vstr	s15, [r5, #-4]
 801183e:	f105 0510 	add.w	r5, r5, #16
 8011842:	f47f af2a 	bne.w	801169a <arm_biquad_cascade_df1_f32+0x22>
 8011846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801184a:	eef0 7a47 	vmov.f32	s15, s14
 801184e:	eeb0 5a44 	vmov.f32	s10, s8
 8011852:	eeb0 7a46 	vmov.f32	s14, s12
 8011856:	eeb0 4a66 	vmov.f32	s8, s13
 801185a:	e7e4      	b.n	8011826 <arm_biquad_cascade_df1_f32+0x1ae>
 801185c:	eeb0 7a67 	vmov.f32	s14, s15
 8011860:	eeb0 4a45 	vmov.f32	s8, s10
 8011864:	eef0 7a46 	vmov.f32	s15, s12
 8011868:	eeb0 5a66 	vmov.f32	s10, s13
 801186c:	e7db      	b.n	8011826 <arm_biquad_cascade_df1_f32+0x1ae>
 801186e:	4613      	mov	r3, r2
 8011870:	e78e      	b.n	8011790 <arm_biquad_cascade_df1_f32+0x118>
 8011872:	bf00      	nop

08011874 <arm_sin_f32>:
 8011874:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80118f4 <arm_sin_f32+0x80>
 8011878:	ee20 0a27 	vmul.f32	s0, s0, s15
 801187c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011880:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011888:	d504      	bpl.n	8011894 <arm_sin_f32+0x20>
 801188a:	ee17 3a90 	vmov	r3, s15
 801188e:	3b01      	subs	r3, #1
 8011890:	ee07 3a90 	vmov	s15, r3
 8011894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011898:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80118f8 <arm_sin_f32+0x84>
 801189c:	ee70 7a67 	vsub.f32	s15, s0, s15
 80118a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80118a4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80118a8:	ee17 3a10 	vmov	r3, s14
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80118b2:	d21a      	bcs.n	80118ea <arm_sin_f32+0x76>
 80118b4:	ee07 3a10 	vmov	s14, r3
 80118b8:	1c59      	adds	r1, r3, #1
 80118ba:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80118be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80118c2:	4a0e      	ldr	r2, [pc, #56]	@ (80118fc <arm_sin_f32+0x88>)
 80118c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80118c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80118d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80118d4:	edd3 6a00 	vldr	s13, [r3]
 80118d8:	ed92 7a00 	vldr	s14, [r2]
 80118dc:	ee20 0a26 	vmul.f32	s0, s0, s13
 80118e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80118e8:	4770      	bx	lr
 80118ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80118ee:	2101      	movs	r1, #1
 80118f0:	2300      	movs	r3, #0
 80118f2:	e7e6      	b.n	80118c2 <arm_sin_f32+0x4e>
 80118f4:	3e22f983 	.word	0x3e22f983
 80118f8:	44000000 	.word	0x44000000
 80118fc:	080160cc 	.word	0x080160cc

08011900 <arm_cos_f32>:
 8011900:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8011988 <arm_cos_f32+0x88>
 8011904:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8011908:	ee20 0a27 	vmul.f32	s0, s0, s15
 801190c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011910:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011914:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191c:	d504      	bpl.n	8011928 <arm_cos_f32+0x28>
 801191e:	ee17 3a90 	vmov	r3, s15
 8011922:	3b01      	subs	r3, #1
 8011924:	ee07 3a90 	vmov	s15, r3
 8011928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801192c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 801198c <arm_cos_f32+0x8c>
 8011930:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011934:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011938:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801193c:	ee17 3a10 	vmov	r3, s14
 8011940:	b29b      	uxth	r3, r3
 8011942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011946:	d21a      	bcs.n	801197e <arm_cos_f32+0x7e>
 8011948:	ee07 3a10 	vmov	s14, r3
 801194c:	1c59      	adds	r1, r3, #1
 801194e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8011952:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011956:	4a0e      	ldr	r2, [pc, #56]	@ (8011990 <arm_cos_f32+0x90>)
 8011958:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801195c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011960:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011964:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011968:	edd3 6a00 	vldr	s13, [r3]
 801196c:	ed92 7a00 	vldr	s14, [r2]
 8011970:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011978:	ee30 0a27 	vadd.f32	s0, s0, s15
 801197c:	4770      	bx	lr
 801197e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011982:	2101      	movs	r1, #1
 8011984:	2300      	movs	r3, #0
 8011986:	e7e6      	b.n	8011956 <arm_cos_f32+0x56>
 8011988:	3e22f983 	.word	0x3e22f983
 801198c:	44000000 	.word	0x44000000
 8011990:	080160cc 	.word	0x080160cc

08011994 <malloc>:
 8011994:	4b02      	ldr	r3, [pc, #8]	@ (80119a0 <malloc+0xc>)
 8011996:	4601      	mov	r1, r0
 8011998:	6818      	ldr	r0, [r3, #0]
 801199a:	f000 b825 	b.w	80119e8 <_malloc_r>
 801199e:	bf00      	nop
 80119a0:	24000110 	.word	0x24000110

080119a4 <sbrk_aligned>:
 80119a4:	b570      	push	{r4, r5, r6, lr}
 80119a6:	4e0f      	ldr	r6, [pc, #60]	@ (80119e4 <sbrk_aligned+0x40>)
 80119a8:	460c      	mov	r4, r1
 80119aa:	6831      	ldr	r1, [r6, #0]
 80119ac:	4605      	mov	r5, r0
 80119ae:	b911      	cbnz	r1, 80119b6 <sbrk_aligned+0x12>
 80119b0:	f000 fe44 	bl	801263c <_sbrk_r>
 80119b4:	6030      	str	r0, [r6, #0]
 80119b6:	4621      	mov	r1, r4
 80119b8:	4628      	mov	r0, r5
 80119ba:	f000 fe3f 	bl	801263c <_sbrk_r>
 80119be:	1c43      	adds	r3, r0, #1
 80119c0:	d103      	bne.n	80119ca <sbrk_aligned+0x26>
 80119c2:	f04f 34ff 	mov.w	r4, #4294967295
 80119c6:	4620      	mov	r0, r4
 80119c8:	bd70      	pop	{r4, r5, r6, pc}
 80119ca:	1cc4      	adds	r4, r0, #3
 80119cc:	f024 0403 	bic.w	r4, r4, #3
 80119d0:	42a0      	cmp	r0, r4
 80119d2:	d0f8      	beq.n	80119c6 <sbrk_aligned+0x22>
 80119d4:	1a21      	subs	r1, r4, r0
 80119d6:	4628      	mov	r0, r5
 80119d8:	f000 fe30 	bl	801263c <_sbrk_r>
 80119dc:	3001      	adds	r0, #1
 80119de:	d1f2      	bne.n	80119c6 <sbrk_aligned+0x22>
 80119e0:	e7ef      	b.n	80119c2 <sbrk_aligned+0x1e>
 80119e2:	bf00      	nop
 80119e4:	24002778 	.word	0x24002778

080119e8 <_malloc_r>:
 80119e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119ec:	1ccd      	adds	r5, r1, #3
 80119ee:	f025 0503 	bic.w	r5, r5, #3
 80119f2:	3508      	adds	r5, #8
 80119f4:	2d0c      	cmp	r5, #12
 80119f6:	bf38      	it	cc
 80119f8:	250c      	movcc	r5, #12
 80119fa:	2d00      	cmp	r5, #0
 80119fc:	4606      	mov	r6, r0
 80119fe:	db01      	blt.n	8011a04 <_malloc_r+0x1c>
 8011a00:	42a9      	cmp	r1, r5
 8011a02:	d904      	bls.n	8011a0e <_malloc_r+0x26>
 8011a04:	230c      	movs	r3, #12
 8011a06:	6033      	str	r3, [r6, #0]
 8011a08:	2000      	movs	r0, #0
 8011a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011ae4 <_malloc_r+0xfc>
 8011a12:	f000 f869 	bl	8011ae8 <__malloc_lock>
 8011a16:	f8d8 3000 	ldr.w	r3, [r8]
 8011a1a:	461c      	mov	r4, r3
 8011a1c:	bb44      	cbnz	r4, 8011a70 <_malloc_r+0x88>
 8011a1e:	4629      	mov	r1, r5
 8011a20:	4630      	mov	r0, r6
 8011a22:	f7ff ffbf 	bl	80119a4 <sbrk_aligned>
 8011a26:	1c43      	adds	r3, r0, #1
 8011a28:	4604      	mov	r4, r0
 8011a2a:	d158      	bne.n	8011ade <_malloc_r+0xf6>
 8011a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8011a30:	4627      	mov	r7, r4
 8011a32:	2f00      	cmp	r7, #0
 8011a34:	d143      	bne.n	8011abe <_malloc_r+0xd6>
 8011a36:	2c00      	cmp	r4, #0
 8011a38:	d04b      	beq.n	8011ad2 <_malloc_r+0xea>
 8011a3a:	6823      	ldr	r3, [r4, #0]
 8011a3c:	4639      	mov	r1, r7
 8011a3e:	4630      	mov	r0, r6
 8011a40:	eb04 0903 	add.w	r9, r4, r3
 8011a44:	f000 fdfa 	bl	801263c <_sbrk_r>
 8011a48:	4581      	cmp	r9, r0
 8011a4a:	d142      	bne.n	8011ad2 <_malloc_r+0xea>
 8011a4c:	6821      	ldr	r1, [r4, #0]
 8011a4e:	1a6d      	subs	r5, r5, r1
 8011a50:	4629      	mov	r1, r5
 8011a52:	4630      	mov	r0, r6
 8011a54:	f7ff ffa6 	bl	80119a4 <sbrk_aligned>
 8011a58:	3001      	adds	r0, #1
 8011a5a:	d03a      	beq.n	8011ad2 <_malloc_r+0xea>
 8011a5c:	6823      	ldr	r3, [r4, #0]
 8011a5e:	442b      	add	r3, r5
 8011a60:	6023      	str	r3, [r4, #0]
 8011a62:	f8d8 3000 	ldr.w	r3, [r8]
 8011a66:	685a      	ldr	r2, [r3, #4]
 8011a68:	bb62      	cbnz	r2, 8011ac4 <_malloc_r+0xdc>
 8011a6a:	f8c8 7000 	str.w	r7, [r8]
 8011a6e:	e00f      	b.n	8011a90 <_malloc_r+0xa8>
 8011a70:	6822      	ldr	r2, [r4, #0]
 8011a72:	1b52      	subs	r2, r2, r5
 8011a74:	d420      	bmi.n	8011ab8 <_malloc_r+0xd0>
 8011a76:	2a0b      	cmp	r2, #11
 8011a78:	d917      	bls.n	8011aaa <_malloc_r+0xc2>
 8011a7a:	1961      	adds	r1, r4, r5
 8011a7c:	42a3      	cmp	r3, r4
 8011a7e:	6025      	str	r5, [r4, #0]
 8011a80:	bf18      	it	ne
 8011a82:	6059      	strne	r1, [r3, #4]
 8011a84:	6863      	ldr	r3, [r4, #4]
 8011a86:	bf08      	it	eq
 8011a88:	f8c8 1000 	streq.w	r1, [r8]
 8011a8c:	5162      	str	r2, [r4, r5]
 8011a8e:	604b      	str	r3, [r1, #4]
 8011a90:	4630      	mov	r0, r6
 8011a92:	f000 f82f 	bl	8011af4 <__malloc_unlock>
 8011a96:	f104 000b 	add.w	r0, r4, #11
 8011a9a:	1d23      	adds	r3, r4, #4
 8011a9c:	f020 0007 	bic.w	r0, r0, #7
 8011aa0:	1ac2      	subs	r2, r0, r3
 8011aa2:	bf1c      	itt	ne
 8011aa4:	1a1b      	subne	r3, r3, r0
 8011aa6:	50a3      	strne	r3, [r4, r2]
 8011aa8:	e7af      	b.n	8011a0a <_malloc_r+0x22>
 8011aaa:	6862      	ldr	r2, [r4, #4]
 8011aac:	42a3      	cmp	r3, r4
 8011aae:	bf0c      	ite	eq
 8011ab0:	f8c8 2000 	streq.w	r2, [r8]
 8011ab4:	605a      	strne	r2, [r3, #4]
 8011ab6:	e7eb      	b.n	8011a90 <_malloc_r+0xa8>
 8011ab8:	4623      	mov	r3, r4
 8011aba:	6864      	ldr	r4, [r4, #4]
 8011abc:	e7ae      	b.n	8011a1c <_malloc_r+0x34>
 8011abe:	463c      	mov	r4, r7
 8011ac0:	687f      	ldr	r7, [r7, #4]
 8011ac2:	e7b6      	b.n	8011a32 <_malloc_r+0x4a>
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	42a3      	cmp	r3, r4
 8011aca:	d1fb      	bne.n	8011ac4 <_malloc_r+0xdc>
 8011acc:	2300      	movs	r3, #0
 8011ace:	6053      	str	r3, [r2, #4]
 8011ad0:	e7de      	b.n	8011a90 <_malloc_r+0xa8>
 8011ad2:	230c      	movs	r3, #12
 8011ad4:	6033      	str	r3, [r6, #0]
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f000 f80c 	bl	8011af4 <__malloc_unlock>
 8011adc:	e794      	b.n	8011a08 <_malloc_r+0x20>
 8011ade:	6005      	str	r5, [r0, #0]
 8011ae0:	e7d6      	b.n	8011a90 <_malloc_r+0xa8>
 8011ae2:	bf00      	nop
 8011ae4:	2400277c 	.word	0x2400277c

08011ae8 <__malloc_lock>:
 8011ae8:	4801      	ldr	r0, [pc, #4]	@ (8011af0 <__malloc_lock+0x8>)
 8011aea:	f000 bdee 	b.w	80126ca <__retarget_lock_acquire_recursive>
 8011aee:	bf00      	nop
 8011af0:	240028c0 	.word	0x240028c0

08011af4 <__malloc_unlock>:
 8011af4:	4801      	ldr	r0, [pc, #4]	@ (8011afc <__malloc_unlock+0x8>)
 8011af6:	f000 bde9 	b.w	80126cc <__retarget_lock_release_recursive>
 8011afa:	bf00      	nop
 8011afc:	240028c0 	.word	0x240028c0

08011b00 <__cvt>:
 8011b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b02:	ed2d 8b02 	vpush	{d8}
 8011b06:	eeb0 8b40 	vmov.f64	d8, d0
 8011b0a:	b085      	sub	sp, #20
 8011b0c:	4617      	mov	r7, r2
 8011b0e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011b10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011b12:	ee18 2a90 	vmov	r2, s17
 8011b16:	f025 0520 	bic.w	r5, r5, #32
 8011b1a:	2a00      	cmp	r2, #0
 8011b1c:	bfb6      	itet	lt
 8011b1e:	222d      	movlt	r2, #45	@ 0x2d
 8011b20:	2200      	movge	r2, #0
 8011b22:	eeb1 8b40 	vneglt.f64	d8, d0
 8011b26:	2d46      	cmp	r5, #70	@ 0x46
 8011b28:	460c      	mov	r4, r1
 8011b2a:	701a      	strb	r2, [r3, #0]
 8011b2c:	d004      	beq.n	8011b38 <__cvt+0x38>
 8011b2e:	2d45      	cmp	r5, #69	@ 0x45
 8011b30:	d100      	bne.n	8011b34 <__cvt+0x34>
 8011b32:	3401      	adds	r4, #1
 8011b34:	2102      	movs	r1, #2
 8011b36:	e000      	b.n	8011b3a <__cvt+0x3a>
 8011b38:	2103      	movs	r1, #3
 8011b3a:	ab03      	add	r3, sp, #12
 8011b3c:	9301      	str	r3, [sp, #4]
 8011b3e:	ab02      	add	r3, sp, #8
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	4622      	mov	r2, r4
 8011b44:	4633      	mov	r3, r6
 8011b46:	eeb0 0b48 	vmov.f64	d0, d8
 8011b4a:	f000 fe49 	bl	80127e0 <_dtoa_r>
 8011b4e:	2d47      	cmp	r5, #71	@ 0x47
 8011b50:	d114      	bne.n	8011b7c <__cvt+0x7c>
 8011b52:	07fb      	lsls	r3, r7, #31
 8011b54:	d50a      	bpl.n	8011b6c <__cvt+0x6c>
 8011b56:	1902      	adds	r2, r0, r4
 8011b58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b60:	bf08      	it	eq
 8011b62:	9203      	streq	r2, [sp, #12]
 8011b64:	2130      	movs	r1, #48	@ 0x30
 8011b66:	9b03      	ldr	r3, [sp, #12]
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d319      	bcc.n	8011ba0 <__cvt+0xa0>
 8011b6c:	9b03      	ldr	r3, [sp, #12]
 8011b6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b70:	1a1b      	subs	r3, r3, r0
 8011b72:	6013      	str	r3, [r2, #0]
 8011b74:	b005      	add	sp, #20
 8011b76:	ecbd 8b02 	vpop	{d8}
 8011b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b7c:	2d46      	cmp	r5, #70	@ 0x46
 8011b7e:	eb00 0204 	add.w	r2, r0, r4
 8011b82:	d1e9      	bne.n	8011b58 <__cvt+0x58>
 8011b84:	7803      	ldrb	r3, [r0, #0]
 8011b86:	2b30      	cmp	r3, #48	@ 0x30
 8011b88:	d107      	bne.n	8011b9a <__cvt+0x9a>
 8011b8a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b92:	bf1c      	itt	ne
 8011b94:	f1c4 0401 	rsbne	r4, r4, #1
 8011b98:	6034      	strne	r4, [r6, #0]
 8011b9a:	6833      	ldr	r3, [r6, #0]
 8011b9c:	441a      	add	r2, r3
 8011b9e:	e7db      	b.n	8011b58 <__cvt+0x58>
 8011ba0:	1c5c      	adds	r4, r3, #1
 8011ba2:	9403      	str	r4, [sp, #12]
 8011ba4:	7019      	strb	r1, [r3, #0]
 8011ba6:	e7de      	b.n	8011b66 <__cvt+0x66>

08011ba8 <__exponent>:
 8011ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011baa:	2900      	cmp	r1, #0
 8011bac:	bfba      	itte	lt
 8011bae:	4249      	neglt	r1, r1
 8011bb0:	232d      	movlt	r3, #45	@ 0x2d
 8011bb2:	232b      	movge	r3, #43	@ 0x2b
 8011bb4:	2909      	cmp	r1, #9
 8011bb6:	7002      	strb	r2, [r0, #0]
 8011bb8:	7043      	strb	r3, [r0, #1]
 8011bba:	dd29      	ble.n	8011c10 <__exponent+0x68>
 8011bbc:	f10d 0307 	add.w	r3, sp, #7
 8011bc0:	461d      	mov	r5, r3
 8011bc2:	270a      	movs	r7, #10
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	fbb1 f6f7 	udiv	r6, r1, r7
 8011bca:	fb07 1416 	mls	r4, r7, r6, r1
 8011bce:	3430      	adds	r4, #48	@ 0x30
 8011bd0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011bd4:	460c      	mov	r4, r1
 8011bd6:	2c63      	cmp	r4, #99	@ 0x63
 8011bd8:	f103 33ff 	add.w	r3, r3, #4294967295
 8011bdc:	4631      	mov	r1, r6
 8011bde:	dcf1      	bgt.n	8011bc4 <__exponent+0x1c>
 8011be0:	3130      	adds	r1, #48	@ 0x30
 8011be2:	1e94      	subs	r4, r2, #2
 8011be4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011be8:	1c41      	adds	r1, r0, #1
 8011bea:	4623      	mov	r3, r4
 8011bec:	42ab      	cmp	r3, r5
 8011bee:	d30a      	bcc.n	8011c06 <__exponent+0x5e>
 8011bf0:	f10d 0309 	add.w	r3, sp, #9
 8011bf4:	1a9b      	subs	r3, r3, r2
 8011bf6:	42ac      	cmp	r4, r5
 8011bf8:	bf88      	it	hi
 8011bfa:	2300      	movhi	r3, #0
 8011bfc:	3302      	adds	r3, #2
 8011bfe:	4403      	add	r3, r0
 8011c00:	1a18      	subs	r0, r3, r0
 8011c02:	b003      	add	sp, #12
 8011c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c06:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011c0a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011c0e:	e7ed      	b.n	8011bec <__exponent+0x44>
 8011c10:	2330      	movs	r3, #48	@ 0x30
 8011c12:	3130      	adds	r1, #48	@ 0x30
 8011c14:	7083      	strb	r3, [r0, #2]
 8011c16:	70c1      	strb	r1, [r0, #3]
 8011c18:	1d03      	adds	r3, r0, #4
 8011c1a:	e7f1      	b.n	8011c00 <__exponent+0x58>
 8011c1c:	0000      	movs	r0, r0
	...

08011c20 <_printf_float>:
 8011c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c24:	b08d      	sub	sp, #52	@ 0x34
 8011c26:	460c      	mov	r4, r1
 8011c28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011c2c:	4616      	mov	r6, r2
 8011c2e:	461f      	mov	r7, r3
 8011c30:	4605      	mov	r5, r0
 8011c32:	f000 fccb 	bl	80125cc <_localeconv_r>
 8011c36:	f8d0 b000 	ldr.w	fp, [r0]
 8011c3a:	4658      	mov	r0, fp
 8011c3c:	f7ee fba0 	bl	8000380 <strlen>
 8011c40:	2300      	movs	r3, #0
 8011c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c44:	f8d8 3000 	ldr.w	r3, [r8]
 8011c48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011c4c:	6822      	ldr	r2, [r4, #0]
 8011c4e:	9005      	str	r0, [sp, #20]
 8011c50:	3307      	adds	r3, #7
 8011c52:	f023 0307 	bic.w	r3, r3, #7
 8011c56:	f103 0108 	add.w	r1, r3, #8
 8011c5a:	f8c8 1000 	str.w	r1, [r8]
 8011c5e:	ed93 0b00 	vldr	d0, [r3]
 8011c62:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011ec0 <_printf_float+0x2a0>
 8011c66:	eeb0 7bc0 	vabs.f64	d7, d0
 8011c6a:	eeb4 7b46 	vcmp.f64	d7, d6
 8011c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c72:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011c76:	dd24      	ble.n	8011cc2 <_printf_float+0xa2>
 8011c78:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c80:	d502      	bpl.n	8011c88 <_printf_float+0x68>
 8011c82:	232d      	movs	r3, #45	@ 0x2d
 8011c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c88:	498f      	ldr	r1, [pc, #572]	@ (8011ec8 <_printf_float+0x2a8>)
 8011c8a:	4b90      	ldr	r3, [pc, #576]	@ (8011ecc <_printf_float+0x2ac>)
 8011c8c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011c90:	bf94      	ite	ls
 8011c92:	4688      	movls	r8, r1
 8011c94:	4698      	movhi	r8, r3
 8011c96:	f022 0204 	bic.w	r2, r2, #4
 8011c9a:	2303      	movs	r3, #3
 8011c9c:	6123      	str	r3, [r4, #16]
 8011c9e:	6022      	str	r2, [r4, #0]
 8011ca0:	f04f 0a00 	mov.w	sl, #0
 8011ca4:	9700      	str	r7, [sp, #0]
 8011ca6:	4633      	mov	r3, r6
 8011ca8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011caa:	4621      	mov	r1, r4
 8011cac:	4628      	mov	r0, r5
 8011cae:	f000 f9d1 	bl	8012054 <_printf_common>
 8011cb2:	3001      	adds	r0, #1
 8011cb4:	f040 8089 	bne.w	8011dca <_printf_float+0x1aa>
 8011cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cbc:	b00d      	add	sp, #52	@ 0x34
 8011cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc2:	eeb4 0b40 	vcmp.f64	d0, d0
 8011cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cca:	d709      	bvc.n	8011ce0 <_printf_float+0xc0>
 8011ccc:	ee10 3a90 	vmov	r3, s1
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	bfbc      	itt	lt
 8011cd4:	232d      	movlt	r3, #45	@ 0x2d
 8011cd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011cda:	497d      	ldr	r1, [pc, #500]	@ (8011ed0 <_printf_float+0x2b0>)
 8011cdc:	4b7d      	ldr	r3, [pc, #500]	@ (8011ed4 <_printf_float+0x2b4>)
 8011cde:	e7d5      	b.n	8011c8c <_printf_float+0x6c>
 8011ce0:	6863      	ldr	r3, [r4, #4]
 8011ce2:	1c59      	adds	r1, r3, #1
 8011ce4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011ce8:	d139      	bne.n	8011d5e <_printf_float+0x13e>
 8011cea:	2306      	movs	r3, #6
 8011cec:	6063      	str	r3, [r4, #4]
 8011cee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	6022      	str	r2, [r4, #0]
 8011cf6:	9303      	str	r3, [sp, #12]
 8011cf8:	ab0a      	add	r3, sp, #40	@ 0x28
 8011cfa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011cfe:	ab09      	add	r3, sp, #36	@ 0x24
 8011d00:	9300      	str	r3, [sp, #0]
 8011d02:	6861      	ldr	r1, [r4, #4]
 8011d04:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011d08:	4628      	mov	r0, r5
 8011d0a:	f7ff fef9 	bl	8011b00 <__cvt>
 8011d0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011d12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011d14:	4680      	mov	r8, r0
 8011d16:	d129      	bne.n	8011d6c <_printf_float+0x14c>
 8011d18:	1cc8      	adds	r0, r1, #3
 8011d1a:	db02      	blt.n	8011d22 <_printf_float+0x102>
 8011d1c:	6863      	ldr	r3, [r4, #4]
 8011d1e:	4299      	cmp	r1, r3
 8011d20:	dd41      	ble.n	8011da6 <_printf_float+0x186>
 8011d22:	f1a9 0902 	sub.w	r9, r9, #2
 8011d26:	fa5f f989 	uxtb.w	r9, r9
 8011d2a:	3901      	subs	r1, #1
 8011d2c:	464a      	mov	r2, r9
 8011d2e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011d32:	9109      	str	r1, [sp, #36]	@ 0x24
 8011d34:	f7ff ff38 	bl	8011ba8 <__exponent>
 8011d38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d3a:	1813      	adds	r3, r2, r0
 8011d3c:	2a01      	cmp	r2, #1
 8011d3e:	4682      	mov	sl, r0
 8011d40:	6123      	str	r3, [r4, #16]
 8011d42:	dc02      	bgt.n	8011d4a <_printf_float+0x12a>
 8011d44:	6822      	ldr	r2, [r4, #0]
 8011d46:	07d2      	lsls	r2, r2, #31
 8011d48:	d501      	bpl.n	8011d4e <_printf_float+0x12e>
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	6123      	str	r3, [r4, #16]
 8011d4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d0a6      	beq.n	8011ca4 <_printf_float+0x84>
 8011d56:	232d      	movs	r3, #45	@ 0x2d
 8011d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d5c:	e7a2      	b.n	8011ca4 <_printf_float+0x84>
 8011d5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011d62:	d1c4      	bne.n	8011cee <_printf_float+0xce>
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1c2      	bne.n	8011cee <_printf_float+0xce>
 8011d68:	2301      	movs	r3, #1
 8011d6a:	e7bf      	b.n	8011cec <_printf_float+0xcc>
 8011d6c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011d70:	d9db      	bls.n	8011d2a <_printf_float+0x10a>
 8011d72:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011d76:	d118      	bne.n	8011daa <_printf_float+0x18a>
 8011d78:	2900      	cmp	r1, #0
 8011d7a:	6863      	ldr	r3, [r4, #4]
 8011d7c:	dd0b      	ble.n	8011d96 <_printf_float+0x176>
 8011d7e:	6121      	str	r1, [r4, #16]
 8011d80:	b913      	cbnz	r3, 8011d88 <_printf_float+0x168>
 8011d82:	6822      	ldr	r2, [r4, #0]
 8011d84:	07d0      	lsls	r0, r2, #31
 8011d86:	d502      	bpl.n	8011d8e <_printf_float+0x16e>
 8011d88:	3301      	adds	r3, #1
 8011d8a:	440b      	add	r3, r1
 8011d8c:	6123      	str	r3, [r4, #16]
 8011d8e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011d90:	f04f 0a00 	mov.w	sl, #0
 8011d94:	e7db      	b.n	8011d4e <_printf_float+0x12e>
 8011d96:	b913      	cbnz	r3, 8011d9e <_printf_float+0x17e>
 8011d98:	6822      	ldr	r2, [r4, #0]
 8011d9a:	07d2      	lsls	r2, r2, #31
 8011d9c:	d501      	bpl.n	8011da2 <_printf_float+0x182>
 8011d9e:	3302      	adds	r3, #2
 8011da0:	e7f4      	b.n	8011d8c <_printf_float+0x16c>
 8011da2:	2301      	movs	r3, #1
 8011da4:	e7f2      	b.n	8011d8c <_printf_float+0x16c>
 8011da6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011daa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dac:	4299      	cmp	r1, r3
 8011dae:	db05      	blt.n	8011dbc <_printf_float+0x19c>
 8011db0:	6823      	ldr	r3, [r4, #0]
 8011db2:	6121      	str	r1, [r4, #16]
 8011db4:	07d8      	lsls	r0, r3, #31
 8011db6:	d5ea      	bpl.n	8011d8e <_printf_float+0x16e>
 8011db8:	1c4b      	adds	r3, r1, #1
 8011dba:	e7e7      	b.n	8011d8c <_printf_float+0x16c>
 8011dbc:	2900      	cmp	r1, #0
 8011dbe:	bfd4      	ite	le
 8011dc0:	f1c1 0202 	rsble	r2, r1, #2
 8011dc4:	2201      	movgt	r2, #1
 8011dc6:	4413      	add	r3, r2
 8011dc8:	e7e0      	b.n	8011d8c <_printf_float+0x16c>
 8011dca:	6823      	ldr	r3, [r4, #0]
 8011dcc:	055a      	lsls	r2, r3, #21
 8011dce:	d407      	bmi.n	8011de0 <_printf_float+0x1c0>
 8011dd0:	6923      	ldr	r3, [r4, #16]
 8011dd2:	4642      	mov	r2, r8
 8011dd4:	4631      	mov	r1, r6
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	47b8      	blx	r7
 8011dda:	3001      	adds	r0, #1
 8011ddc:	d12a      	bne.n	8011e34 <_printf_float+0x214>
 8011dde:	e76b      	b.n	8011cb8 <_printf_float+0x98>
 8011de0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011de4:	f240 80e0 	bls.w	8011fa8 <_printf_float+0x388>
 8011de8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011dec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df4:	d133      	bne.n	8011e5e <_printf_float+0x23e>
 8011df6:	4a38      	ldr	r2, [pc, #224]	@ (8011ed8 <_printf_float+0x2b8>)
 8011df8:	2301      	movs	r3, #1
 8011dfa:	4631      	mov	r1, r6
 8011dfc:	4628      	mov	r0, r5
 8011dfe:	47b8      	blx	r7
 8011e00:	3001      	adds	r0, #1
 8011e02:	f43f af59 	beq.w	8011cb8 <_printf_float+0x98>
 8011e06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011e0a:	4543      	cmp	r3, r8
 8011e0c:	db02      	blt.n	8011e14 <_printf_float+0x1f4>
 8011e0e:	6823      	ldr	r3, [r4, #0]
 8011e10:	07d8      	lsls	r0, r3, #31
 8011e12:	d50f      	bpl.n	8011e34 <_printf_float+0x214>
 8011e14:	9b05      	ldr	r3, [sp, #20]
 8011e16:	465a      	mov	r2, fp
 8011e18:	4631      	mov	r1, r6
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	47b8      	blx	r7
 8011e1e:	3001      	adds	r0, #1
 8011e20:	f43f af4a 	beq.w	8011cb8 <_printf_float+0x98>
 8011e24:	f04f 0900 	mov.w	r9, #0
 8011e28:	f108 38ff 	add.w	r8, r8, #4294967295
 8011e2c:	f104 0a1a 	add.w	sl, r4, #26
 8011e30:	45c8      	cmp	r8, r9
 8011e32:	dc09      	bgt.n	8011e48 <_printf_float+0x228>
 8011e34:	6823      	ldr	r3, [r4, #0]
 8011e36:	079b      	lsls	r3, r3, #30
 8011e38:	f100 8107 	bmi.w	801204a <_printf_float+0x42a>
 8011e3c:	68e0      	ldr	r0, [r4, #12]
 8011e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e40:	4298      	cmp	r0, r3
 8011e42:	bfb8      	it	lt
 8011e44:	4618      	movlt	r0, r3
 8011e46:	e739      	b.n	8011cbc <_printf_float+0x9c>
 8011e48:	2301      	movs	r3, #1
 8011e4a:	4652      	mov	r2, sl
 8011e4c:	4631      	mov	r1, r6
 8011e4e:	4628      	mov	r0, r5
 8011e50:	47b8      	blx	r7
 8011e52:	3001      	adds	r0, #1
 8011e54:	f43f af30 	beq.w	8011cb8 <_printf_float+0x98>
 8011e58:	f109 0901 	add.w	r9, r9, #1
 8011e5c:	e7e8      	b.n	8011e30 <_printf_float+0x210>
 8011e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	dc3b      	bgt.n	8011edc <_printf_float+0x2bc>
 8011e64:	4a1c      	ldr	r2, [pc, #112]	@ (8011ed8 <_printf_float+0x2b8>)
 8011e66:	2301      	movs	r3, #1
 8011e68:	4631      	mov	r1, r6
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	47b8      	blx	r7
 8011e6e:	3001      	adds	r0, #1
 8011e70:	f43f af22 	beq.w	8011cb8 <_printf_float+0x98>
 8011e74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011e78:	ea59 0303 	orrs.w	r3, r9, r3
 8011e7c:	d102      	bne.n	8011e84 <_printf_float+0x264>
 8011e7e:	6823      	ldr	r3, [r4, #0]
 8011e80:	07d9      	lsls	r1, r3, #31
 8011e82:	d5d7      	bpl.n	8011e34 <_printf_float+0x214>
 8011e84:	9b05      	ldr	r3, [sp, #20]
 8011e86:	465a      	mov	r2, fp
 8011e88:	4631      	mov	r1, r6
 8011e8a:	4628      	mov	r0, r5
 8011e8c:	47b8      	blx	r7
 8011e8e:	3001      	adds	r0, #1
 8011e90:	f43f af12 	beq.w	8011cb8 <_printf_float+0x98>
 8011e94:	f04f 0a00 	mov.w	sl, #0
 8011e98:	f104 0b1a 	add.w	fp, r4, #26
 8011e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e9e:	425b      	negs	r3, r3
 8011ea0:	4553      	cmp	r3, sl
 8011ea2:	dc01      	bgt.n	8011ea8 <_printf_float+0x288>
 8011ea4:	464b      	mov	r3, r9
 8011ea6:	e794      	b.n	8011dd2 <_printf_float+0x1b2>
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	465a      	mov	r2, fp
 8011eac:	4631      	mov	r1, r6
 8011eae:	4628      	mov	r0, r5
 8011eb0:	47b8      	blx	r7
 8011eb2:	3001      	adds	r0, #1
 8011eb4:	f43f af00 	beq.w	8011cb8 <_printf_float+0x98>
 8011eb8:	f10a 0a01 	add.w	sl, sl, #1
 8011ebc:	e7ee      	b.n	8011e9c <_printf_float+0x27c>
 8011ebe:	bf00      	nop
 8011ec0:	ffffffff 	.word	0xffffffff
 8011ec4:	7fefffff 	.word	0x7fefffff
 8011ec8:	080168d0 	.word	0x080168d0
 8011ecc:	080168d4 	.word	0x080168d4
 8011ed0:	080168d8 	.word	0x080168d8
 8011ed4:	080168dc 	.word	0x080168dc
 8011ed8:	080168e0 	.word	0x080168e0
 8011edc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011ede:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011ee2:	4553      	cmp	r3, sl
 8011ee4:	bfa8      	it	ge
 8011ee6:	4653      	movge	r3, sl
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	4699      	mov	r9, r3
 8011eec:	dc37      	bgt.n	8011f5e <_printf_float+0x33e>
 8011eee:	2300      	movs	r3, #0
 8011ef0:	9307      	str	r3, [sp, #28]
 8011ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ef6:	f104 021a 	add.w	r2, r4, #26
 8011efa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011efc:	9907      	ldr	r1, [sp, #28]
 8011efe:	9306      	str	r3, [sp, #24]
 8011f00:	eba3 0309 	sub.w	r3, r3, r9
 8011f04:	428b      	cmp	r3, r1
 8011f06:	dc31      	bgt.n	8011f6c <_printf_float+0x34c>
 8011f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f0a:	459a      	cmp	sl, r3
 8011f0c:	dc3b      	bgt.n	8011f86 <_printf_float+0x366>
 8011f0e:	6823      	ldr	r3, [r4, #0]
 8011f10:	07da      	lsls	r2, r3, #31
 8011f12:	d438      	bmi.n	8011f86 <_printf_float+0x366>
 8011f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f16:	ebaa 0903 	sub.w	r9, sl, r3
 8011f1a:	9b06      	ldr	r3, [sp, #24]
 8011f1c:	ebaa 0303 	sub.w	r3, sl, r3
 8011f20:	4599      	cmp	r9, r3
 8011f22:	bfa8      	it	ge
 8011f24:	4699      	movge	r9, r3
 8011f26:	f1b9 0f00 	cmp.w	r9, #0
 8011f2a:	dc34      	bgt.n	8011f96 <_printf_float+0x376>
 8011f2c:	f04f 0800 	mov.w	r8, #0
 8011f30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f34:	f104 0b1a 	add.w	fp, r4, #26
 8011f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f3a:	ebaa 0303 	sub.w	r3, sl, r3
 8011f3e:	eba3 0309 	sub.w	r3, r3, r9
 8011f42:	4543      	cmp	r3, r8
 8011f44:	f77f af76 	ble.w	8011e34 <_printf_float+0x214>
 8011f48:	2301      	movs	r3, #1
 8011f4a:	465a      	mov	r2, fp
 8011f4c:	4631      	mov	r1, r6
 8011f4e:	4628      	mov	r0, r5
 8011f50:	47b8      	blx	r7
 8011f52:	3001      	adds	r0, #1
 8011f54:	f43f aeb0 	beq.w	8011cb8 <_printf_float+0x98>
 8011f58:	f108 0801 	add.w	r8, r8, #1
 8011f5c:	e7ec      	b.n	8011f38 <_printf_float+0x318>
 8011f5e:	4642      	mov	r2, r8
 8011f60:	4631      	mov	r1, r6
 8011f62:	4628      	mov	r0, r5
 8011f64:	47b8      	blx	r7
 8011f66:	3001      	adds	r0, #1
 8011f68:	d1c1      	bne.n	8011eee <_printf_float+0x2ce>
 8011f6a:	e6a5      	b.n	8011cb8 <_printf_float+0x98>
 8011f6c:	2301      	movs	r3, #1
 8011f6e:	4631      	mov	r1, r6
 8011f70:	4628      	mov	r0, r5
 8011f72:	9206      	str	r2, [sp, #24]
 8011f74:	47b8      	blx	r7
 8011f76:	3001      	adds	r0, #1
 8011f78:	f43f ae9e 	beq.w	8011cb8 <_printf_float+0x98>
 8011f7c:	9b07      	ldr	r3, [sp, #28]
 8011f7e:	9a06      	ldr	r2, [sp, #24]
 8011f80:	3301      	adds	r3, #1
 8011f82:	9307      	str	r3, [sp, #28]
 8011f84:	e7b9      	b.n	8011efa <_printf_float+0x2da>
 8011f86:	9b05      	ldr	r3, [sp, #20]
 8011f88:	465a      	mov	r2, fp
 8011f8a:	4631      	mov	r1, r6
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	47b8      	blx	r7
 8011f90:	3001      	adds	r0, #1
 8011f92:	d1bf      	bne.n	8011f14 <_printf_float+0x2f4>
 8011f94:	e690      	b.n	8011cb8 <_printf_float+0x98>
 8011f96:	9a06      	ldr	r2, [sp, #24]
 8011f98:	464b      	mov	r3, r9
 8011f9a:	4442      	add	r2, r8
 8011f9c:	4631      	mov	r1, r6
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	47b8      	blx	r7
 8011fa2:	3001      	adds	r0, #1
 8011fa4:	d1c2      	bne.n	8011f2c <_printf_float+0x30c>
 8011fa6:	e687      	b.n	8011cb8 <_printf_float+0x98>
 8011fa8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011fac:	f1b9 0f01 	cmp.w	r9, #1
 8011fb0:	dc01      	bgt.n	8011fb6 <_printf_float+0x396>
 8011fb2:	07db      	lsls	r3, r3, #31
 8011fb4:	d536      	bpl.n	8012024 <_printf_float+0x404>
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	4642      	mov	r2, r8
 8011fba:	4631      	mov	r1, r6
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	47b8      	blx	r7
 8011fc0:	3001      	adds	r0, #1
 8011fc2:	f43f ae79 	beq.w	8011cb8 <_printf_float+0x98>
 8011fc6:	9b05      	ldr	r3, [sp, #20]
 8011fc8:	465a      	mov	r2, fp
 8011fca:	4631      	mov	r1, r6
 8011fcc:	4628      	mov	r0, r5
 8011fce:	47b8      	blx	r7
 8011fd0:	3001      	adds	r0, #1
 8011fd2:	f43f ae71 	beq.w	8011cb8 <_printf_float+0x98>
 8011fd6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011fda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe2:	f109 39ff 	add.w	r9, r9, #4294967295
 8011fe6:	d018      	beq.n	801201a <_printf_float+0x3fa>
 8011fe8:	464b      	mov	r3, r9
 8011fea:	f108 0201 	add.w	r2, r8, #1
 8011fee:	4631      	mov	r1, r6
 8011ff0:	4628      	mov	r0, r5
 8011ff2:	47b8      	blx	r7
 8011ff4:	3001      	adds	r0, #1
 8011ff6:	d10c      	bne.n	8012012 <_printf_float+0x3f2>
 8011ff8:	e65e      	b.n	8011cb8 <_printf_float+0x98>
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	465a      	mov	r2, fp
 8011ffe:	4631      	mov	r1, r6
 8012000:	4628      	mov	r0, r5
 8012002:	47b8      	blx	r7
 8012004:	3001      	adds	r0, #1
 8012006:	f43f ae57 	beq.w	8011cb8 <_printf_float+0x98>
 801200a:	f108 0801 	add.w	r8, r8, #1
 801200e:	45c8      	cmp	r8, r9
 8012010:	dbf3      	blt.n	8011ffa <_printf_float+0x3da>
 8012012:	4653      	mov	r3, sl
 8012014:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012018:	e6dc      	b.n	8011dd4 <_printf_float+0x1b4>
 801201a:	f04f 0800 	mov.w	r8, #0
 801201e:	f104 0b1a 	add.w	fp, r4, #26
 8012022:	e7f4      	b.n	801200e <_printf_float+0x3ee>
 8012024:	2301      	movs	r3, #1
 8012026:	4642      	mov	r2, r8
 8012028:	e7e1      	b.n	8011fee <_printf_float+0x3ce>
 801202a:	2301      	movs	r3, #1
 801202c:	464a      	mov	r2, r9
 801202e:	4631      	mov	r1, r6
 8012030:	4628      	mov	r0, r5
 8012032:	47b8      	blx	r7
 8012034:	3001      	adds	r0, #1
 8012036:	f43f ae3f 	beq.w	8011cb8 <_printf_float+0x98>
 801203a:	f108 0801 	add.w	r8, r8, #1
 801203e:	68e3      	ldr	r3, [r4, #12]
 8012040:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012042:	1a5b      	subs	r3, r3, r1
 8012044:	4543      	cmp	r3, r8
 8012046:	dcf0      	bgt.n	801202a <_printf_float+0x40a>
 8012048:	e6f8      	b.n	8011e3c <_printf_float+0x21c>
 801204a:	f04f 0800 	mov.w	r8, #0
 801204e:	f104 0919 	add.w	r9, r4, #25
 8012052:	e7f4      	b.n	801203e <_printf_float+0x41e>

08012054 <_printf_common>:
 8012054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012058:	4616      	mov	r6, r2
 801205a:	4698      	mov	r8, r3
 801205c:	688a      	ldr	r2, [r1, #8]
 801205e:	690b      	ldr	r3, [r1, #16]
 8012060:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012064:	4293      	cmp	r3, r2
 8012066:	bfb8      	it	lt
 8012068:	4613      	movlt	r3, r2
 801206a:	6033      	str	r3, [r6, #0]
 801206c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012070:	4607      	mov	r7, r0
 8012072:	460c      	mov	r4, r1
 8012074:	b10a      	cbz	r2, 801207a <_printf_common+0x26>
 8012076:	3301      	adds	r3, #1
 8012078:	6033      	str	r3, [r6, #0]
 801207a:	6823      	ldr	r3, [r4, #0]
 801207c:	0699      	lsls	r1, r3, #26
 801207e:	bf42      	ittt	mi
 8012080:	6833      	ldrmi	r3, [r6, #0]
 8012082:	3302      	addmi	r3, #2
 8012084:	6033      	strmi	r3, [r6, #0]
 8012086:	6825      	ldr	r5, [r4, #0]
 8012088:	f015 0506 	ands.w	r5, r5, #6
 801208c:	d106      	bne.n	801209c <_printf_common+0x48>
 801208e:	f104 0a19 	add.w	sl, r4, #25
 8012092:	68e3      	ldr	r3, [r4, #12]
 8012094:	6832      	ldr	r2, [r6, #0]
 8012096:	1a9b      	subs	r3, r3, r2
 8012098:	42ab      	cmp	r3, r5
 801209a:	dc26      	bgt.n	80120ea <_printf_common+0x96>
 801209c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80120a0:	6822      	ldr	r2, [r4, #0]
 80120a2:	3b00      	subs	r3, #0
 80120a4:	bf18      	it	ne
 80120a6:	2301      	movne	r3, #1
 80120a8:	0692      	lsls	r2, r2, #26
 80120aa:	d42b      	bmi.n	8012104 <_printf_common+0xb0>
 80120ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80120b0:	4641      	mov	r1, r8
 80120b2:	4638      	mov	r0, r7
 80120b4:	47c8      	blx	r9
 80120b6:	3001      	adds	r0, #1
 80120b8:	d01e      	beq.n	80120f8 <_printf_common+0xa4>
 80120ba:	6823      	ldr	r3, [r4, #0]
 80120bc:	6922      	ldr	r2, [r4, #16]
 80120be:	f003 0306 	and.w	r3, r3, #6
 80120c2:	2b04      	cmp	r3, #4
 80120c4:	bf02      	ittt	eq
 80120c6:	68e5      	ldreq	r5, [r4, #12]
 80120c8:	6833      	ldreq	r3, [r6, #0]
 80120ca:	1aed      	subeq	r5, r5, r3
 80120cc:	68a3      	ldr	r3, [r4, #8]
 80120ce:	bf0c      	ite	eq
 80120d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80120d4:	2500      	movne	r5, #0
 80120d6:	4293      	cmp	r3, r2
 80120d8:	bfc4      	itt	gt
 80120da:	1a9b      	subgt	r3, r3, r2
 80120dc:	18ed      	addgt	r5, r5, r3
 80120de:	2600      	movs	r6, #0
 80120e0:	341a      	adds	r4, #26
 80120e2:	42b5      	cmp	r5, r6
 80120e4:	d11a      	bne.n	801211c <_printf_common+0xc8>
 80120e6:	2000      	movs	r0, #0
 80120e8:	e008      	b.n	80120fc <_printf_common+0xa8>
 80120ea:	2301      	movs	r3, #1
 80120ec:	4652      	mov	r2, sl
 80120ee:	4641      	mov	r1, r8
 80120f0:	4638      	mov	r0, r7
 80120f2:	47c8      	blx	r9
 80120f4:	3001      	adds	r0, #1
 80120f6:	d103      	bne.n	8012100 <_printf_common+0xac>
 80120f8:	f04f 30ff 	mov.w	r0, #4294967295
 80120fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012100:	3501      	adds	r5, #1
 8012102:	e7c6      	b.n	8012092 <_printf_common+0x3e>
 8012104:	18e1      	adds	r1, r4, r3
 8012106:	1c5a      	adds	r2, r3, #1
 8012108:	2030      	movs	r0, #48	@ 0x30
 801210a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801210e:	4422      	add	r2, r4
 8012110:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012114:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012118:	3302      	adds	r3, #2
 801211a:	e7c7      	b.n	80120ac <_printf_common+0x58>
 801211c:	2301      	movs	r3, #1
 801211e:	4622      	mov	r2, r4
 8012120:	4641      	mov	r1, r8
 8012122:	4638      	mov	r0, r7
 8012124:	47c8      	blx	r9
 8012126:	3001      	adds	r0, #1
 8012128:	d0e6      	beq.n	80120f8 <_printf_common+0xa4>
 801212a:	3601      	adds	r6, #1
 801212c:	e7d9      	b.n	80120e2 <_printf_common+0x8e>
	...

08012130 <_printf_i>:
 8012130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012134:	7e0f      	ldrb	r7, [r1, #24]
 8012136:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012138:	2f78      	cmp	r7, #120	@ 0x78
 801213a:	4691      	mov	r9, r2
 801213c:	4680      	mov	r8, r0
 801213e:	460c      	mov	r4, r1
 8012140:	469a      	mov	sl, r3
 8012142:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012146:	d807      	bhi.n	8012158 <_printf_i+0x28>
 8012148:	2f62      	cmp	r7, #98	@ 0x62
 801214a:	d80a      	bhi.n	8012162 <_printf_i+0x32>
 801214c:	2f00      	cmp	r7, #0
 801214e:	f000 80d2 	beq.w	80122f6 <_printf_i+0x1c6>
 8012152:	2f58      	cmp	r7, #88	@ 0x58
 8012154:	f000 80b9 	beq.w	80122ca <_printf_i+0x19a>
 8012158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801215c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012160:	e03a      	b.n	80121d8 <_printf_i+0xa8>
 8012162:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012166:	2b15      	cmp	r3, #21
 8012168:	d8f6      	bhi.n	8012158 <_printf_i+0x28>
 801216a:	a101      	add	r1, pc, #4	@ (adr r1, 8012170 <_printf_i+0x40>)
 801216c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012170:	080121c9 	.word	0x080121c9
 8012174:	080121dd 	.word	0x080121dd
 8012178:	08012159 	.word	0x08012159
 801217c:	08012159 	.word	0x08012159
 8012180:	08012159 	.word	0x08012159
 8012184:	08012159 	.word	0x08012159
 8012188:	080121dd 	.word	0x080121dd
 801218c:	08012159 	.word	0x08012159
 8012190:	08012159 	.word	0x08012159
 8012194:	08012159 	.word	0x08012159
 8012198:	08012159 	.word	0x08012159
 801219c:	080122dd 	.word	0x080122dd
 80121a0:	08012207 	.word	0x08012207
 80121a4:	08012297 	.word	0x08012297
 80121a8:	08012159 	.word	0x08012159
 80121ac:	08012159 	.word	0x08012159
 80121b0:	080122ff 	.word	0x080122ff
 80121b4:	08012159 	.word	0x08012159
 80121b8:	08012207 	.word	0x08012207
 80121bc:	08012159 	.word	0x08012159
 80121c0:	08012159 	.word	0x08012159
 80121c4:	0801229f 	.word	0x0801229f
 80121c8:	6833      	ldr	r3, [r6, #0]
 80121ca:	1d1a      	adds	r2, r3, #4
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	6032      	str	r2, [r6, #0]
 80121d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80121d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80121d8:	2301      	movs	r3, #1
 80121da:	e09d      	b.n	8012318 <_printf_i+0x1e8>
 80121dc:	6833      	ldr	r3, [r6, #0]
 80121de:	6820      	ldr	r0, [r4, #0]
 80121e0:	1d19      	adds	r1, r3, #4
 80121e2:	6031      	str	r1, [r6, #0]
 80121e4:	0606      	lsls	r6, r0, #24
 80121e6:	d501      	bpl.n	80121ec <_printf_i+0xbc>
 80121e8:	681d      	ldr	r5, [r3, #0]
 80121ea:	e003      	b.n	80121f4 <_printf_i+0xc4>
 80121ec:	0645      	lsls	r5, r0, #25
 80121ee:	d5fb      	bpl.n	80121e8 <_printf_i+0xb8>
 80121f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80121f4:	2d00      	cmp	r5, #0
 80121f6:	da03      	bge.n	8012200 <_printf_i+0xd0>
 80121f8:	232d      	movs	r3, #45	@ 0x2d
 80121fa:	426d      	negs	r5, r5
 80121fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012200:	4859      	ldr	r0, [pc, #356]	@ (8012368 <_printf_i+0x238>)
 8012202:	230a      	movs	r3, #10
 8012204:	e011      	b.n	801222a <_printf_i+0xfa>
 8012206:	6821      	ldr	r1, [r4, #0]
 8012208:	6833      	ldr	r3, [r6, #0]
 801220a:	0608      	lsls	r0, r1, #24
 801220c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012210:	d402      	bmi.n	8012218 <_printf_i+0xe8>
 8012212:	0649      	lsls	r1, r1, #25
 8012214:	bf48      	it	mi
 8012216:	b2ad      	uxthmi	r5, r5
 8012218:	2f6f      	cmp	r7, #111	@ 0x6f
 801221a:	4853      	ldr	r0, [pc, #332]	@ (8012368 <_printf_i+0x238>)
 801221c:	6033      	str	r3, [r6, #0]
 801221e:	bf14      	ite	ne
 8012220:	230a      	movne	r3, #10
 8012222:	2308      	moveq	r3, #8
 8012224:	2100      	movs	r1, #0
 8012226:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801222a:	6866      	ldr	r6, [r4, #4]
 801222c:	60a6      	str	r6, [r4, #8]
 801222e:	2e00      	cmp	r6, #0
 8012230:	bfa2      	ittt	ge
 8012232:	6821      	ldrge	r1, [r4, #0]
 8012234:	f021 0104 	bicge.w	r1, r1, #4
 8012238:	6021      	strge	r1, [r4, #0]
 801223a:	b90d      	cbnz	r5, 8012240 <_printf_i+0x110>
 801223c:	2e00      	cmp	r6, #0
 801223e:	d04b      	beq.n	80122d8 <_printf_i+0x1a8>
 8012240:	4616      	mov	r6, r2
 8012242:	fbb5 f1f3 	udiv	r1, r5, r3
 8012246:	fb03 5711 	mls	r7, r3, r1, r5
 801224a:	5dc7      	ldrb	r7, [r0, r7]
 801224c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012250:	462f      	mov	r7, r5
 8012252:	42bb      	cmp	r3, r7
 8012254:	460d      	mov	r5, r1
 8012256:	d9f4      	bls.n	8012242 <_printf_i+0x112>
 8012258:	2b08      	cmp	r3, #8
 801225a:	d10b      	bne.n	8012274 <_printf_i+0x144>
 801225c:	6823      	ldr	r3, [r4, #0]
 801225e:	07df      	lsls	r7, r3, #31
 8012260:	d508      	bpl.n	8012274 <_printf_i+0x144>
 8012262:	6923      	ldr	r3, [r4, #16]
 8012264:	6861      	ldr	r1, [r4, #4]
 8012266:	4299      	cmp	r1, r3
 8012268:	bfde      	ittt	le
 801226a:	2330      	movle	r3, #48	@ 0x30
 801226c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012270:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012274:	1b92      	subs	r2, r2, r6
 8012276:	6122      	str	r2, [r4, #16]
 8012278:	f8cd a000 	str.w	sl, [sp]
 801227c:	464b      	mov	r3, r9
 801227e:	aa03      	add	r2, sp, #12
 8012280:	4621      	mov	r1, r4
 8012282:	4640      	mov	r0, r8
 8012284:	f7ff fee6 	bl	8012054 <_printf_common>
 8012288:	3001      	adds	r0, #1
 801228a:	d14a      	bne.n	8012322 <_printf_i+0x1f2>
 801228c:	f04f 30ff 	mov.w	r0, #4294967295
 8012290:	b004      	add	sp, #16
 8012292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012296:	6823      	ldr	r3, [r4, #0]
 8012298:	f043 0320 	orr.w	r3, r3, #32
 801229c:	6023      	str	r3, [r4, #0]
 801229e:	4833      	ldr	r0, [pc, #204]	@ (801236c <_printf_i+0x23c>)
 80122a0:	2778      	movs	r7, #120	@ 0x78
 80122a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80122a6:	6823      	ldr	r3, [r4, #0]
 80122a8:	6831      	ldr	r1, [r6, #0]
 80122aa:	061f      	lsls	r7, r3, #24
 80122ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80122b0:	d402      	bmi.n	80122b8 <_printf_i+0x188>
 80122b2:	065f      	lsls	r7, r3, #25
 80122b4:	bf48      	it	mi
 80122b6:	b2ad      	uxthmi	r5, r5
 80122b8:	6031      	str	r1, [r6, #0]
 80122ba:	07d9      	lsls	r1, r3, #31
 80122bc:	bf44      	itt	mi
 80122be:	f043 0320 	orrmi.w	r3, r3, #32
 80122c2:	6023      	strmi	r3, [r4, #0]
 80122c4:	b11d      	cbz	r5, 80122ce <_printf_i+0x19e>
 80122c6:	2310      	movs	r3, #16
 80122c8:	e7ac      	b.n	8012224 <_printf_i+0xf4>
 80122ca:	4827      	ldr	r0, [pc, #156]	@ (8012368 <_printf_i+0x238>)
 80122cc:	e7e9      	b.n	80122a2 <_printf_i+0x172>
 80122ce:	6823      	ldr	r3, [r4, #0]
 80122d0:	f023 0320 	bic.w	r3, r3, #32
 80122d4:	6023      	str	r3, [r4, #0]
 80122d6:	e7f6      	b.n	80122c6 <_printf_i+0x196>
 80122d8:	4616      	mov	r6, r2
 80122da:	e7bd      	b.n	8012258 <_printf_i+0x128>
 80122dc:	6833      	ldr	r3, [r6, #0]
 80122de:	6825      	ldr	r5, [r4, #0]
 80122e0:	6961      	ldr	r1, [r4, #20]
 80122e2:	1d18      	adds	r0, r3, #4
 80122e4:	6030      	str	r0, [r6, #0]
 80122e6:	062e      	lsls	r6, r5, #24
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	d501      	bpl.n	80122f0 <_printf_i+0x1c0>
 80122ec:	6019      	str	r1, [r3, #0]
 80122ee:	e002      	b.n	80122f6 <_printf_i+0x1c6>
 80122f0:	0668      	lsls	r0, r5, #25
 80122f2:	d5fb      	bpl.n	80122ec <_printf_i+0x1bc>
 80122f4:	8019      	strh	r1, [r3, #0]
 80122f6:	2300      	movs	r3, #0
 80122f8:	6123      	str	r3, [r4, #16]
 80122fa:	4616      	mov	r6, r2
 80122fc:	e7bc      	b.n	8012278 <_printf_i+0x148>
 80122fe:	6833      	ldr	r3, [r6, #0]
 8012300:	1d1a      	adds	r2, r3, #4
 8012302:	6032      	str	r2, [r6, #0]
 8012304:	681e      	ldr	r6, [r3, #0]
 8012306:	6862      	ldr	r2, [r4, #4]
 8012308:	2100      	movs	r1, #0
 801230a:	4630      	mov	r0, r6
 801230c:	f7ed ffe8 	bl	80002e0 <memchr>
 8012310:	b108      	cbz	r0, 8012316 <_printf_i+0x1e6>
 8012312:	1b80      	subs	r0, r0, r6
 8012314:	6060      	str	r0, [r4, #4]
 8012316:	6863      	ldr	r3, [r4, #4]
 8012318:	6123      	str	r3, [r4, #16]
 801231a:	2300      	movs	r3, #0
 801231c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012320:	e7aa      	b.n	8012278 <_printf_i+0x148>
 8012322:	6923      	ldr	r3, [r4, #16]
 8012324:	4632      	mov	r2, r6
 8012326:	4649      	mov	r1, r9
 8012328:	4640      	mov	r0, r8
 801232a:	47d0      	blx	sl
 801232c:	3001      	adds	r0, #1
 801232e:	d0ad      	beq.n	801228c <_printf_i+0x15c>
 8012330:	6823      	ldr	r3, [r4, #0]
 8012332:	079b      	lsls	r3, r3, #30
 8012334:	d413      	bmi.n	801235e <_printf_i+0x22e>
 8012336:	68e0      	ldr	r0, [r4, #12]
 8012338:	9b03      	ldr	r3, [sp, #12]
 801233a:	4298      	cmp	r0, r3
 801233c:	bfb8      	it	lt
 801233e:	4618      	movlt	r0, r3
 8012340:	e7a6      	b.n	8012290 <_printf_i+0x160>
 8012342:	2301      	movs	r3, #1
 8012344:	4632      	mov	r2, r6
 8012346:	4649      	mov	r1, r9
 8012348:	4640      	mov	r0, r8
 801234a:	47d0      	blx	sl
 801234c:	3001      	adds	r0, #1
 801234e:	d09d      	beq.n	801228c <_printf_i+0x15c>
 8012350:	3501      	adds	r5, #1
 8012352:	68e3      	ldr	r3, [r4, #12]
 8012354:	9903      	ldr	r1, [sp, #12]
 8012356:	1a5b      	subs	r3, r3, r1
 8012358:	42ab      	cmp	r3, r5
 801235a:	dcf2      	bgt.n	8012342 <_printf_i+0x212>
 801235c:	e7eb      	b.n	8012336 <_printf_i+0x206>
 801235e:	2500      	movs	r5, #0
 8012360:	f104 0619 	add.w	r6, r4, #25
 8012364:	e7f5      	b.n	8012352 <_printf_i+0x222>
 8012366:	bf00      	nop
 8012368:	080168e2 	.word	0x080168e2
 801236c:	080168f3 	.word	0x080168f3

08012370 <std>:
 8012370:	2300      	movs	r3, #0
 8012372:	b510      	push	{r4, lr}
 8012374:	4604      	mov	r4, r0
 8012376:	e9c0 3300 	strd	r3, r3, [r0]
 801237a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801237e:	6083      	str	r3, [r0, #8]
 8012380:	8181      	strh	r1, [r0, #12]
 8012382:	6643      	str	r3, [r0, #100]	@ 0x64
 8012384:	81c2      	strh	r2, [r0, #14]
 8012386:	6183      	str	r3, [r0, #24]
 8012388:	4619      	mov	r1, r3
 801238a:	2208      	movs	r2, #8
 801238c:	305c      	adds	r0, #92	@ 0x5c
 801238e:	f000 f914 	bl	80125ba <memset>
 8012392:	4b0d      	ldr	r3, [pc, #52]	@ (80123c8 <std+0x58>)
 8012394:	6263      	str	r3, [r4, #36]	@ 0x24
 8012396:	4b0d      	ldr	r3, [pc, #52]	@ (80123cc <std+0x5c>)
 8012398:	62a3      	str	r3, [r4, #40]	@ 0x28
 801239a:	4b0d      	ldr	r3, [pc, #52]	@ (80123d0 <std+0x60>)
 801239c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801239e:	4b0d      	ldr	r3, [pc, #52]	@ (80123d4 <std+0x64>)
 80123a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80123a2:	4b0d      	ldr	r3, [pc, #52]	@ (80123d8 <std+0x68>)
 80123a4:	6224      	str	r4, [r4, #32]
 80123a6:	429c      	cmp	r4, r3
 80123a8:	d006      	beq.n	80123b8 <std+0x48>
 80123aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80123ae:	4294      	cmp	r4, r2
 80123b0:	d002      	beq.n	80123b8 <std+0x48>
 80123b2:	33d0      	adds	r3, #208	@ 0xd0
 80123b4:	429c      	cmp	r4, r3
 80123b6:	d105      	bne.n	80123c4 <std+0x54>
 80123b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80123bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123c0:	f000 b982 	b.w	80126c8 <__retarget_lock_init_recursive>
 80123c4:	bd10      	pop	{r4, pc}
 80123c6:	bf00      	nop
 80123c8:	08012535 	.word	0x08012535
 80123cc:	08012557 	.word	0x08012557
 80123d0:	0801258f 	.word	0x0801258f
 80123d4:	080125b3 	.word	0x080125b3
 80123d8:	24002780 	.word	0x24002780

080123dc <stdio_exit_handler>:
 80123dc:	4a02      	ldr	r2, [pc, #8]	@ (80123e8 <stdio_exit_handler+0xc>)
 80123de:	4903      	ldr	r1, [pc, #12]	@ (80123ec <stdio_exit_handler+0x10>)
 80123e0:	4803      	ldr	r0, [pc, #12]	@ (80123f0 <stdio_exit_handler+0x14>)
 80123e2:	f000 b869 	b.w	80124b8 <_fwalk_sglue>
 80123e6:	bf00      	nop
 80123e8:	24000104 	.word	0x24000104
 80123ec:	08013ddd 	.word	0x08013ddd
 80123f0:	24000114 	.word	0x24000114

080123f4 <cleanup_stdio>:
 80123f4:	6841      	ldr	r1, [r0, #4]
 80123f6:	4b0c      	ldr	r3, [pc, #48]	@ (8012428 <cleanup_stdio+0x34>)
 80123f8:	4299      	cmp	r1, r3
 80123fa:	b510      	push	{r4, lr}
 80123fc:	4604      	mov	r4, r0
 80123fe:	d001      	beq.n	8012404 <cleanup_stdio+0x10>
 8012400:	f001 fcec 	bl	8013ddc <_fflush_r>
 8012404:	68a1      	ldr	r1, [r4, #8]
 8012406:	4b09      	ldr	r3, [pc, #36]	@ (801242c <cleanup_stdio+0x38>)
 8012408:	4299      	cmp	r1, r3
 801240a:	d002      	beq.n	8012412 <cleanup_stdio+0x1e>
 801240c:	4620      	mov	r0, r4
 801240e:	f001 fce5 	bl	8013ddc <_fflush_r>
 8012412:	68e1      	ldr	r1, [r4, #12]
 8012414:	4b06      	ldr	r3, [pc, #24]	@ (8012430 <cleanup_stdio+0x3c>)
 8012416:	4299      	cmp	r1, r3
 8012418:	d004      	beq.n	8012424 <cleanup_stdio+0x30>
 801241a:	4620      	mov	r0, r4
 801241c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012420:	f001 bcdc 	b.w	8013ddc <_fflush_r>
 8012424:	bd10      	pop	{r4, pc}
 8012426:	bf00      	nop
 8012428:	24002780 	.word	0x24002780
 801242c:	240027e8 	.word	0x240027e8
 8012430:	24002850 	.word	0x24002850

08012434 <global_stdio_init.part.0>:
 8012434:	b510      	push	{r4, lr}
 8012436:	4b0b      	ldr	r3, [pc, #44]	@ (8012464 <global_stdio_init.part.0+0x30>)
 8012438:	4c0b      	ldr	r4, [pc, #44]	@ (8012468 <global_stdio_init.part.0+0x34>)
 801243a:	4a0c      	ldr	r2, [pc, #48]	@ (801246c <global_stdio_init.part.0+0x38>)
 801243c:	601a      	str	r2, [r3, #0]
 801243e:	4620      	mov	r0, r4
 8012440:	2200      	movs	r2, #0
 8012442:	2104      	movs	r1, #4
 8012444:	f7ff ff94 	bl	8012370 <std>
 8012448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801244c:	2201      	movs	r2, #1
 801244e:	2109      	movs	r1, #9
 8012450:	f7ff ff8e 	bl	8012370 <std>
 8012454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012458:	2202      	movs	r2, #2
 801245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801245e:	2112      	movs	r1, #18
 8012460:	f7ff bf86 	b.w	8012370 <std>
 8012464:	240028b8 	.word	0x240028b8
 8012468:	24002780 	.word	0x24002780
 801246c:	080123dd 	.word	0x080123dd

08012470 <__sfp_lock_acquire>:
 8012470:	4801      	ldr	r0, [pc, #4]	@ (8012478 <__sfp_lock_acquire+0x8>)
 8012472:	f000 b92a 	b.w	80126ca <__retarget_lock_acquire_recursive>
 8012476:	bf00      	nop
 8012478:	240028c1 	.word	0x240028c1

0801247c <__sfp_lock_release>:
 801247c:	4801      	ldr	r0, [pc, #4]	@ (8012484 <__sfp_lock_release+0x8>)
 801247e:	f000 b925 	b.w	80126cc <__retarget_lock_release_recursive>
 8012482:	bf00      	nop
 8012484:	240028c1 	.word	0x240028c1

08012488 <__sinit>:
 8012488:	b510      	push	{r4, lr}
 801248a:	4604      	mov	r4, r0
 801248c:	f7ff fff0 	bl	8012470 <__sfp_lock_acquire>
 8012490:	6a23      	ldr	r3, [r4, #32]
 8012492:	b11b      	cbz	r3, 801249c <__sinit+0x14>
 8012494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012498:	f7ff bff0 	b.w	801247c <__sfp_lock_release>
 801249c:	4b04      	ldr	r3, [pc, #16]	@ (80124b0 <__sinit+0x28>)
 801249e:	6223      	str	r3, [r4, #32]
 80124a0:	4b04      	ldr	r3, [pc, #16]	@ (80124b4 <__sinit+0x2c>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d1f5      	bne.n	8012494 <__sinit+0xc>
 80124a8:	f7ff ffc4 	bl	8012434 <global_stdio_init.part.0>
 80124ac:	e7f2      	b.n	8012494 <__sinit+0xc>
 80124ae:	bf00      	nop
 80124b0:	080123f5 	.word	0x080123f5
 80124b4:	240028b8 	.word	0x240028b8

080124b8 <_fwalk_sglue>:
 80124b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124bc:	4607      	mov	r7, r0
 80124be:	4688      	mov	r8, r1
 80124c0:	4614      	mov	r4, r2
 80124c2:	2600      	movs	r6, #0
 80124c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80124c8:	f1b9 0901 	subs.w	r9, r9, #1
 80124cc:	d505      	bpl.n	80124da <_fwalk_sglue+0x22>
 80124ce:	6824      	ldr	r4, [r4, #0]
 80124d0:	2c00      	cmp	r4, #0
 80124d2:	d1f7      	bne.n	80124c4 <_fwalk_sglue+0xc>
 80124d4:	4630      	mov	r0, r6
 80124d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124da:	89ab      	ldrh	r3, [r5, #12]
 80124dc:	2b01      	cmp	r3, #1
 80124de:	d907      	bls.n	80124f0 <_fwalk_sglue+0x38>
 80124e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124e4:	3301      	adds	r3, #1
 80124e6:	d003      	beq.n	80124f0 <_fwalk_sglue+0x38>
 80124e8:	4629      	mov	r1, r5
 80124ea:	4638      	mov	r0, r7
 80124ec:	47c0      	blx	r8
 80124ee:	4306      	orrs	r6, r0
 80124f0:	3568      	adds	r5, #104	@ 0x68
 80124f2:	e7e9      	b.n	80124c8 <_fwalk_sglue+0x10>

080124f4 <siprintf>:
 80124f4:	b40e      	push	{r1, r2, r3}
 80124f6:	b500      	push	{lr}
 80124f8:	b09c      	sub	sp, #112	@ 0x70
 80124fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80124fc:	9002      	str	r0, [sp, #8]
 80124fe:	9006      	str	r0, [sp, #24]
 8012500:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012504:	4809      	ldr	r0, [pc, #36]	@ (801252c <siprintf+0x38>)
 8012506:	9107      	str	r1, [sp, #28]
 8012508:	9104      	str	r1, [sp, #16]
 801250a:	4909      	ldr	r1, [pc, #36]	@ (8012530 <siprintf+0x3c>)
 801250c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012510:	9105      	str	r1, [sp, #20]
 8012512:	6800      	ldr	r0, [r0, #0]
 8012514:	9301      	str	r3, [sp, #4]
 8012516:	a902      	add	r1, sp, #8
 8012518:	f001 fae0 	bl	8013adc <_svfiprintf_r>
 801251c:	9b02      	ldr	r3, [sp, #8]
 801251e:	2200      	movs	r2, #0
 8012520:	701a      	strb	r2, [r3, #0]
 8012522:	b01c      	add	sp, #112	@ 0x70
 8012524:	f85d eb04 	ldr.w	lr, [sp], #4
 8012528:	b003      	add	sp, #12
 801252a:	4770      	bx	lr
 801252c:	24000110 	.word	0x24000110
 8012530:	ffff0208 	.word	0xffff0208

08012534 <__sread>:
 8012534:	b510      	push	{r4, lr}
 8012536:	460c      	mov	r4, r1
 8012538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801253c:	f000 f86c 	bl	8012618 <_read_r>
 8012540:	2800      	cmp	r0, #0
 8012542:	bfab      	itete	ge
 8012544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012546:	89a3      	ldrhlt	r3, [r4, #12]
 8012548:	181b      	addge	r3, r3, r0
 801254a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801254e:	bfac      	ite	ge
 8012550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012552:	81a3      	strhlt	r3, [r4, #12]
 8012554:	bd10      	pop	{r4, pc}

08012556 <__swrite>:
 8012556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801255a:	461f      	mov	r7, r3
 801255c:	898b      	ldrh	r3, [r1, #12]
 801255e:	05db      	lsls	r3, r3, #23
 8012560:	4605      	mov	r5, r0
 8012562:	460c      	mov	r4, r1
 8012564:	4616      	mov	r6, r2
 8012566:	d505      	bpl.n	8012574 <__swrite+0x1e>
 8012568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801256c:	2302      	movs	r3, #2
 801256e:	2200      	movs	r2, #0
 8012570:	f000 f840 	bl	80125f4 <_lseek_r>
 8012574:	89a3      	ldrh	r3, [r4, #12]
 8012576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801257a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801257e:	81a3      	strh	r3, [r4, #12]
 8012580:	4632      	mov	r2, r6
 8012582:	463b      	mov	r3, r7
 8012584:	4628      	mov	r0, r5
 8012586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801258a:	f000 b867 	b.w	801265c <_write_r>

0801258e <__sseek>:
 801258e:	b510      	push	{r4, lr}
 8012590:	460c      	mov	r4, r1
 8012592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012596:	f000 f82d 	bl	80125f4 <_lseek_r>
 801259a:	1c43      	adds	r3, r0, #1
 801259c:	89a3      	ldrh	r3, [r4, #12]
 801259e:	bf15      	itete	ne
 80125a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80125a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80125a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80125aa:	81a3      	strheq	r3, [r4, #12]
 80125ac:	bf18      	it	ne
 80125ae:	81a3      	strhne	r3, [r4, #12]
 80125b0:	bd10      	pop	{r4, pc}

080125b2 <__sclose>:
 80125b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125b6:	f000 b80d 	b.w	80125d4 <_close_r>

080125ba <memset>:
 80125ba:	4402      	add	r2, r0
 80125bc:	4603      	mov	r3, r0
 80125be:	4293      	cmp	r3, r2
 80125c0:	d100      	bne.n	80125c4 <memset+0xa>
 80125c2:	4770      	bx	lr
 80125c4:	f803 1b01 	strb.w	r1, [r3], #1
 80125c8:	e7f9      	b.n	80125be <memset+0x4>
	...

080125cc <_localeconv_r>:
 80125cc:	4800      	ldr	r0, [pc, #0]	@ (80125d0 <_localeconv_r+0x4>)
 80125ce:	4770      	bx	lr
 80125d0:	24000250 	.word	0x24000250

080125d4 <_close_r>:
 80125d4:	b538      	push	{r3, r4, r5, lr}
 80125d6:	4d06      	ldr	r5, [pc, #24]	@ (80125f0 <_close_r+0x1c>)
 80125d8:	2300      	movs	r3, #0
 80125da:	4604      	mov	r4, r0
 80125dc:	4608      	mov	r0, r1
 80125de:	602b      	str	r3, [r5, #0]
 80125e0:	f7fd f850 	bl	800f684 <_close>
 80125e4:	1c43      	adds	r3, r0, #1
 80125e6:	d102      	bne.n	80125ee <_close_r+0x1a>
 80125e8:	682b      	ldr	r3, [r5, #0]
 80125ea:	b103      	cbz	r3, 80125ee <_close_r+0x1a>
 80125ec:	6023      	str	r3, [r4, #0]
 80125ee:	bd38      	pop	{r3, r4, r5, pc}
 80125f0:	240028bc 	.word	0x240028bc

080125f4 <_lseek_r>:
 80125f4:	b538      	push	{r3, r4, r5, lr}
 80125f6:	4d07      	ldr	r5, [pc, #28]	@ (8012614 <_lseek_r+0x20>)
 80125f8:	4604      	mov	r4, r0
 80125fa:	4608      	mov	r0, r1
 80125fc:	4611      	mov	r1, r2
 80125fe:	2200      	movs	r2, #0
 8012600:	602a      	str	r2, [r5, #0]
 8012602:	461a      	mov	r2, r3
 8012604:	f7fd f845 	bl	800f692 <_lseek>
 8012608:	1c43      	adds	r3, r0, #1
 801260a:	d102      	bne.n	8012612 <_lseek_r+0x1e>
 801260c:	682b      	ldr	r3, [r5, #0]
 801260e:	b103      	cbz	r3, 8012612 <_lseek_r+0x1e>
 8012610:	6023      	str	r3, [r4, #0]
 8012612:	bd38      	pop	{r3, r4, r5, pc}
 8012614:	240028bc 	.word	0x240028bc

08012618 <_read_r>:
 8012618:	b538      	push	{r3, r4, r5, lr}
 801261a:	4d07      	ldr	r5, [pc, #28]	@ (8012638 <_read_r+0x20>)
 801261c:	4604      	mov	r4, r0
 801261e:	4608      	mov	r0, r1
 8012620:	4611      	mov	r1, r2
 8012622:	2200      	movs	r2, #0
 8012624:	602a      	str	r2, [r5, #0]
 8012626:	461a      	mov	r2, r3
 8012628:	f7fd f83a 	bl	800f6a0 <_read>
 801262c:	1c43      	adds	r3, r0, #1
 801262e:	d102      	bne.n	8012636 <_read_r+0x1e>
 8012630:	682b      	ldr	r3, [r5, #0]
 8012632:	b103      	cbz	r3, 8012636 <_read_r+0x1e>
 8012634:	6023      	str	r3, [r4, #0]
 8012636:	bd38      	pop	{r3, r4, r5, pc}
 8012638:	240028bc 	.word	0x240028bc

0801263c <_sbrk_r>:
 801263c:	b538      	push	{r3, r4, r5, lr}
 801263e:	4d06      	ldr	r5, [pc, #24]	@ (8012658 <_sbrk_r+0x1c>)
 8012640:	2300      	movs	r3, #0
 8012642:	4604      	mov	r4, r0
 8012644:	4608      	mov	r0, r1
 8012646:	602b      	str	r3, [r5, #0]
 8012648:	f002 f8d0 	bl	80147ec <_sbrk>
 801264c:	1c43      	adds	r3, r0, #1
 801264e:	d102      	bne.n	8012656 <_sbrk_r+0x1a>
 8012650:	682b      	ldr	r3, [r5, #0]
 8012652:	b103      	cbz	r3, 8012656 <_sbrk_r+0x1a>
 8012654:	6023      	str	r3, [r4, #0]
 8012656:	bd38      	pop	{r3, r4, r5, pc}
 8012658:	240028bc 	.word	0x240028bc

0801265c <_write_r>:
 801265c:	b538      	push	{r3, r4, r5, lr}
 801265e:	4d07      	ldr	r5, [pc, #28]	@ (801267c <_write_r+0x20>)
 8012660:	4604      	mov	r4, r0
 8012662:	4608      	mov	r0, r1
 8012664:	4611      	mov	r1, r2
 8012666:	2200      	movs	r2, #0
 8012668:	602a      	str	r2, [r5, #0]
 801266a:	461a      	mov	r2, r3
 801266c:	f7fd f81f 	bl	800f6ae <_write>
 8012670:	1c43      	adds	r3, r0, #1
 8012672:	d102      	bne.n	801267a <_write_r+0x1e>
 8012674:	682b      	ldr	r3, [r5, #0]
 8012676:	b103      	cbz	r3, 801267a <_write_r+0x1e>
 8012678:	6023      	str	r3, [r4, #0]
 801267a:	bd38      	pop	{r3, r4, r5, pc}
 801267c:	240028bc 	.word	0x240028bc

08012680 <__libc_init_array>:
 8012680:	b570      	push	{r4, r5, r6, lr}
 8012682:	4d0d      	ldr	r5, [pc, #52]	@ (80126b8 <__libc_init_array+0x38>)
 8012684:	4c0d      	ldr	r4, [pc, #52]	@ (80126bc <__libc_init_array+0x3c>)
 8012686:	1b64      	subs	r4, r4, r5
 8012688:	10a4      	asrs	r4, r4, #2
 801268a:	2600      	movs	r6, #0
 801268c:	42a6      	cmp	r6, r4
 801268e:	d109      	bne.n	80126a4 <__libc_init_array+0x24>
 8012690:	4d0b      	ldr	r5, [pc, #44]	@ (80126c0 <__libc_init_array+0x40>)
 8012692:	4c0c      	ldr	r4, [pc, #48]	@ (80126c4 <__libc_init_array+0x44>)
 8012694:	f002 f8ba 	bl	801480c <_init>
 8012698:	1b64      	subs	r4, r4, r5
 801269a:	10a4      	asrs	r4, r4, #2
 801269c:	2600      	movs	r6, #0
 801269e:	42a6      	cmp	r6, r4
 80126a0:	d105      	bne.n	80126ae <__libc_init_array+0x2e>
 80126a2:	bd70      	pop	{r4, r5, r6, pc}
 80126a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80126a8:	4798      	blx	r3
 80126aa:	3601      	adds	r6, #1
 80126ac:	e7ee      	b.n	801268c <__libc_init_array+0xc>
 80126ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80126b2:	4798      	blx	r3
 80126b4:	3601      	adds	r6, #1
 80126b6:	e7f2      	b.n	801269e <__libc_init_array+0x1e>
 80126b8:	08016c58 	.word	0x08016c58
 80126bc:	08016c58 	.word	0x08016c58
 80126c0:	08016c58 	.word	0x08016c58
 80126c4:	08016c5c 	.word	0x08016c5c

080126c8 <__retarget_lock_init_recursive>:
 80126c8:	4770      	bx	lr

080126ca <__retarget_lock_acquire_recursive>:
 80126ca:	4770      	bx	lr

080126cc <__retarget_lock_release_recursive>:
 80126cc:	4770      	bx	lr

080126ce <quorem>:
 80126ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d2:	6903      	ldr	r3, [r0, #16]
 80126d4:	690c      	ldr	r4, [r1, #16]
 80126d6:	42a3      	cmp	r3, r4
 80126d8:	4607      	mov	r7, r0
 80126da:	db7e      	blt.n	80127da <quorem+0x10c>
 80126dc:	3c01      	subs	r4, #1
 80126de:	f101 0814 	add.w	r8, r1, #20
 80126e2:	00a3      	lsls	r3, r4, #2
 80126e4:	f100 0514 	add.w	r5, r0, #20
 80126e8:	9300      	str	r3, [sp, #0]
 80126ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80126ee:	9301      	str	r3, [sp, #4]
 80126f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80126f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80126f8:	3301      	adds	r3, #1
 80126fa:	429a      	cmp	r2, r3
 80126fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012700:	fbb2 f6f3 	udiv	r6, r2, r3
 8012704:	d32e      	bcc.n	8012764 <quorem+0x96>
 8012706:	f04f 0a00 	mov.w	sl, #0
 801270a:	46c4      	mov	ip, r8
 801270c:	46ae      	mov	lr, r5
 801270e:	46d3      	mov	fp, sl
 8012710:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012714:	b298      	uxth	r0, r3
 8012716:	fb06 a000 	mla	r0, r6, r0, sl
 801271a:	0c02      	lsrs	r2, r0, #16
 801271c:	0c1b      	lsrs	r3, r3, #16
 801271e:	fb06 2303 	mla	r3, r6, r3, r2
 8012722:	f8de 2000 	ldr.w	r2, [lr]
 8012726:	b280      	uxth	r0, r0
 8012728:	b292      	uxth	r2, r2
 801272a:	1a12      	subs	r2, r2, r0
 801272c:	445a      	add	r2, fp
 801272e:	f8de 0000 	ldr.w	r0, [lr]
 8012732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012736:	b29b      	uxth	r3, r3
 8012738:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801273c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012740:	b292      	uxth	r2, r2
 8012742:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012746:	45e1      	cmp	r9, ip
 8012748:	f84e 2b04 	str.w	r2, [lr], #4
 801274c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012750:	d2de      	bcs.n	8012710 <quorem+0x42>
 8012752:	9b00      	ldr	r3, [sp, #0]
 8012754:	58eb      	ldr	r3, [r5, r3]
 8012756:	b92b      	cbnz	r3, 8012764 <quorem+0x96>
 8012758:	9b01      	ldr	r3, [sp, #4]
 801275a:	3b04      	subs	r3, #4
 801275c:	429d      	cmp	r5, r3
 801275e:	461a      	mov	r2, r3
 8012760:	d32f      	bcc.n	80127c2 <quorem+0xf4>
 8012762:	613c      	str	r4, [r7, #16]
 8012764:	4638      	mov	r0, r7
 8012766:	f001 f855 	bl	8013814 <__mcmp>
 801276a:	2800      	cmp	r0, #0
 801276c:	db25      	blt.n	80127ba <quorem+0xec>
 801276e:	4629      	mov	r1, r5
 8012770:	2000      	movs	r0, #0
 8012772:	f858 2b04 	ldr.w	r2, [r8], #4
 8012776:	f8d1 c000 	ldr.w	ip, [r1]
 801277a:	fa1f fe82 	uxth.w	lr, r2
 801277e:	fa1f f38c 	uxth.w	r3, ip
 8012782:	eba3 030e 	sub.w	r3, r3, lr
 8012786:	4403      	add	r3, r0
 8012788:	0c12      	lsrs	r2, r2, #16
 801278a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801278e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012792:	b29b      	uxth	r3, r3
 8012794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012798:	45c1      	cmp	r9, r8
 801279a:	f841 3b04 	str.w	r3, [r1], #4
 801279e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80127a2:	d2e6      	bcs.n	8012772 <quorem+0xa4>
 80127a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80127a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80127ac:	b922      	cbnz	r2, 80127b8 <quorem+0xea>
 80127ae:	3b04      	subs	r3, #4
 80127b0:	429d      	cmp	r5, r3
 80127b2:	461a      	mov	r2, r3
 80127b4:	d30b      	bcc.n	80127ce <quorem+0x100>
 80127b6:	613c      	str	r4, [r7, #16]
 80127b8:	3601      	adds	r6, #1
 80127ba:	4630      	mov	r0, r6
 80127bc:	b003      	add	sp, #12
 80127be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127c2:	6812      	ldr	r2, [r2, #0]
 80127c4:	3b04      	subs	r3, #4
 80127c6:	2a00      	cmp	r2, #0
 80127c8:	d1cb      	bne.n	8012762 <quorem+0x94>
 80127ca:	3c01      	subs	r4, #1
 80127cc:	e7c6      	b.n	801275c <quorem+0x8e>
 80127ce:	6812      	ldr	r2, [r2, #0]
 80127d0:	3b04      	subs	r3, #4
 80127d2:	2a00      	cmp	r2, #0
 80127d4:	d1ef      	bne.n	80127b6 <quorem+0xe8>
 80127d6:	3c01      	subs	r4, #1
 80127d8:	e7ea      	b.n	80127b0 <quorem+0xe2>
 80127da:	2000      	movs	r0, #0
 80127dc:	e7ee      	b.n	80127bc <quorem+0xee>
	...

080127e0 <_dtoa_r>:
 80127e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e4:	ed2d 8b02 	vpush	{d8}
 80127e8:	69c7      	ldr	r7, [r0, #28]
 80127ea:	b091      	sub	sp, #68	@ 0x44
 80127ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80127f0:	ec55 4b10 	vmov	r4, r5, d0
 80127f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80127f6:	9107      	str	r1, [sp, #28]
 80127f8:	4681      	mov	r9, r0
 80127fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80127fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80127fe:	b97f      	cbnz	r7, 8012820 <_dtoa_r+0x40>
 8012800:	2010      	movs	r0, #16
 8012802:	f7ff f8c7 	bl	8011994 <malloc>
 8012806:	4602      	mov	r2, r0
 8012808:	f8c9 001c 	str.w	r0, [r9, #28]
 801280c:	b920      	cbnz	r0, 8012818 <_dtoa_r+0x38>
 801280e:	4ba0      	ldr	r3, [pc, #640]	@ (8012a90 <_dtoa_r+0x2b0>)
 8012810:	21ef      	movs	r1, #239	@ 0xef
 8012812:	48a0      	ldr	r0, [pc, #640]	@ (8012a94 <_dtoa_r+0x2b4>)
 8012814:	f001 fb32 	bl	8013e7c <__assert_func>
 8012818:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801281c:	6007      	str	r7, [r0, #0]
 801281e:	60c7      	str	r7, [r0, #12]
 8012820:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012824:	6819      	ldr	r1, [r3, #0]
 8012826:	b159      	cbz	r1, 8012840 <_dtoa_r+0x60>
 8012828:	685a      	ldr	r2, [r3, #4]
 801282a:	604a      	str	r2, [r1, #4]
 801282c:	2301      	movs	r3, #1
 801282e:	4093      	lsls	r3, r2
 8012830:	608b      	str	r3, [r1, #8]
 8012832:	4648      	mov	r0, r9
 8012834:	f000 fdb4 	bl	80133a0 <_Bfree>
 8012838:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801283c:	2200      	movs	r2, #0
 801283e:	601a      	str	r2, [r3, #0]
 8012840:	1e2b      	subs	r3, r5, #0
 8012842:	bfbb      	ittet	lt
 8012844:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012848:	9303      	strlt	r3, [sp, #12]
 801284a:	2300      	movge	r3, #0
 801284c:	2201      	movlt	r2, #1
 801284e:	bfac      	ite	ge
 8012850:	6033      	strge	r3, [r6, #0]
 8012852:	6032      	strlt	r2, [r6, #0]
 8012854:	4b90      	ldr	r3, [pc, #576]	@ (8012a98 <_dtoa_r+0x2b8>)
 8012856:	9e03      	ldr	r6, [sp, #12]
 8012858:	43b3      	bics	r3, r6
 801285a:	d110      	bne.n	801287e <_dtoa_r+0x9e>
 801285c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801285e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012862:	6013      	str	r3, [r2, #0]
 8012864:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012868:	4323      	orrs	r3, r4
 801286a:	f000 84de 	beq.w	801322a <_dtoa_r+0xa4a>
 801286e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012870:	4f8a      	ldr	r7, [pc, #552]	@ (8012a9c <_dtoa_r+0x2bc>)
 8012872:	2b00      	cmp	r3, #0
 8012874:	f000 84e0 	beq.w	8013238 <_dtoa_r+0xa58>
 8012878:	1cfb      	adds	r3, r7, #3
 801287a:	f000 bcdb 	b.w	8013234 <_dtoa_r+0xa54>
 801287e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012882:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801288a:	d10a      	bne.n	80128a2 <_dtoa_r+0xc2>
 801288c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801288e:	2301      	movs	r3, #1
 8012890:	6013      	str	r3, [r2, #0]
 8012892:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012894:	b113      	cbz	r3, 801289c <_dtoa_r+0xbc>
 8012896:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012898:	4b81      	ldr	r3, [pc, #516]	@ (8012aa0 <_dtoa_r+0x2c0>)
 801289a:	6013      	str	r3, [r2, #0]
 801289c:	4f81      	ldr	r7, [pc, #516]	@ (8012aa4 <_dtoa_r+0x2c4>)
 801289e:	f000 bccb 	b.w	8013238 <_dtoa_r+0xa58>
 80128a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80128a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80128a6:	4648      	mov	r0, r9
 80128a8:	eeb0 0b48 	vmov.f64	d0, d8
 80128ac:	f001 f862 	bl	8013974 <__d2b>
 80128b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80128b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128b6:	9001      	str	r0, [sp, #4]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d045      	beq.n	8012948 <_dtoa_r+0x168>
 80128bc:	eeb0 7b48 	vmov.f64	d7, d8
 80128c0:	ee18 1a90 	vmov	r1, s17
 80128c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80128c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80128cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80128d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80128d4:	2500      	movs	r5, #0
 80128d6:	ee07 1a90 	vmov	s15, r1
 80128da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80128de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012a78 <_dtoa_r+0x298>
 80128e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80128e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012a80 <_dtoa_r+0x2a0>
 80128ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80128ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012a88 <_dtoa_r+0x2a8>
 80128f2:	ee07 3a90 	vmov	s15, r3
 80128f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80128fa:	eeb0 7b46 	vmov.f64	d7, d6
 80128fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012902:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012906:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801290e:	ee16 8a90 	vmov	r8, s13
 8012912:	d508      	bpl.n	8012926 <_dtoa_r+0x146>
 8012914:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012918:	eeb4 6b47 	vcmp.f64	d6, d7
 801291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012920:	bf18      	it	ne
 8012922:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012926:	f1b8 0f16 	cmp.w	r8, #22
 801292a:	d82b      	bhi.n	8012984 <_dtoa_r+0x1a4>
 801292c:	495e      	ldr	r1, [pc, #376]	@ (8012aa8 <_dtoa_r+0x2c8>)
 801292e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012932:	ed91 7b00 	vldr	d7, [r1]
 8012936:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293e:	d501      	bpl.n	8012944 <_dtoa_r+0x164>
 8012940:	f108 38ff 	add.w	r8, r8, #4294967295
 8012944:	2100      	movs	r1, #0
 8012946:	e01e      	b.n	8012986 <_dtoa_r+0x1a6>
 8012948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801294a:	4413      	add	r3, r2
 801294c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012950:	2920      	cmp	r1, #32
 8012952:	bfc1      	itttt	gt
 8012954:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012958:	408e      	lslgt	r6, r1
 801295a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801295e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012962:	bfd6      	itet	le
 8012964:	f1c1 0120 	rsble	r1, r1, #32
 8012968:	4331      	orrgt	r1, r6
 801296a:	fa04 f101 	lslle.w	r1, r4, r1
 801296e:	ee07 1a90 	vmov	s15, r1
 8012972:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012976:	3b01      	subs	r3, #1
 8012978:	ee17 1a90 	vmov	r1, s15
 801297c:	2501      	movs	r5, #1
 801297e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012982:	e7a8      	b.n	80128d6 <_dtoa_r+0xf6>
 8012984:	2101      	movs	r1, #1
 8012986:	1ad2      	subs	r2, r2, r3
 8012988:	1e53      	subs	r3, r2, #1
 801298a:	9306      	str	r3, [sp, #24]
 801298c:	bf45      	ittet	mi
 801298e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012992:	9305      	strmi	r3, [sp, #20]
 8012994:	2300      	movpl	r3, #0
 8012996:	2300      	movmi	r3, #0
 8012998:	bf4c      	ite	mi
 801299a:	9306      	strmi	r3, [sp, #24]
 801299c:	9305      	strpl	r3, [sp, #20]
 801299e:	f1b8 0f00 	cmp.w	r8, #0
 80129a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80129a4:	db18      	blt.n	80129d8 <_dtoa_r+0x1f8>
 80129a6:	9b06      	ldr	r3, [sp, #24]
 80129a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80129ac:	4443      	add	r3, r8
 80129ae:	9306      	str	r3, [sp, #24]
 80129b0:	2300      	movs	r3, #0
 80129b2:	9a07      	ldr	r2, [sp, #28]
 80129b4:	2a09      	cmp	r2, #9
 80129b6:	d849      	bhi.n	8012a4c <_dtoa_r+0x26c>
 80129b8:	2a05      	cmp	r2, #5
 80129ba:	bfc4      	itt	gt
 80129bc:	3a04      	subgt	r2, #4
 80129be:	9207      	strgt	r2, [sp, #28]
 80129c0:	9a07      	ldr	r2, [sp, #28]
 80129c2:	f1a2 0202 	sub.w	r2, r2, #2
 80129c6:	bfcc      	ite	gt
 80129c8:	2400      	movgt	r4, #0
 80129ca:	2401      	movle	r4, #1
 80129cc:	2a03      	cmp	r2, #3
 80129ce:	d848      	bhi.n	8012a62 <_dtoa_r+0x282>
 80129d0:	e8df f002 	tbb	[pc, r2]
 80129d4:	3a2c2e0b 	.word	0x3a2c2e0b
 80129d8:	9b05      	ldr	r3, [sp, #20]
 80129da:	2200      	movs	r2, #0
 80129dc:	eba3 0308 	sub.w	r3, r3, r8
 80129e0:	9305      	str	r3, [sp, #20]
 80129e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80129e4:	f1c8 0300 	rsb	r3, r8, #0
 80129e8:	e7e3      	b.n	80129b2 <_dtoa_r+0x1d2>
 80129ea:	2200      	movs	r2, #0
 80129ec:	9208      	str	r2, [sp, #32]
 80129ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129f0:	2a00      	cmp	r2, #0
 80129f2:	dc39      	bgt.n	8012a68 <_dtoa_r+0x288>
 80129f4:	f04f 0b01 	mov.w	fp, #1
 80129f8:	46da      	mov	sl, fp
 80129fa:	465a      	mov	r2, fp
 80129fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012a00:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012a04:	2100      	movs	r1, #0
 8012a06:	2004      	movs	r0, #4
 8012a08:	f100 0614 	add.w	r6, r0, #20
 8012a0c:	4296      	cmp	r6, r2
 8012a0e:	d930      	bls.n	8012a72 <_dtoa_r+0x292>
 8012a10:	6079      	str	r1, [r7, #4]
 8012a12:	4648      	mov	r0, r9
 8012a14:	9304      	str	r3, [sp, #16]
 8012a16:	f000 fc83 	bl	8013320 <_Balloc>
 8012a1a:	9b04      	ldr	r3, [sp, #16]
 8012a1c:	4607      	mov	r7, r0
 8012a1e:	2800      	cmp	r0, #0
 8012a20:	d146      	bne.n	8012ab0 <_dtoa_r+0x2d0>
 8012a22:	4b22      	ldr	r3, [pc, #136]	@ (8012aac <_dtoa_r+0x2cc>)
 8012a24:	4602      	mov	r2, r0
 8012a26:	f240 11af 	movw	r1, #431	@ 0x1af
 8012a2a:	e6f2      	b.n	8012812 <_dtoa_r+0x32>
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	e7dd      	b.n	80129ec <_dtoa_r+0x20c>
 8012a30:	2200      	movs	r2, #0
 8012a32:	9208      	str	r2, [sp, #32]
 8012a34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a36:	eb08 0b02 	add.w	fp, r8, r2
 8012a3a:	f10b 0a01 	add.w	sl, fp, #1
 8012a3e:	4652      	mov	r2, sl
 8012a40:	2a01      	cmp	r2, #1
 8012a42:	bfb8      	it	lt
 8012a44:	2201      	movlt	r2, #1
 8012a46:	e7db      	b.n	8012a00 <_dtoa_r+0x220>
 8012a48:	2201      	movs	r2, #1
 8012a4a:	e7f2      	b.n	8012a32 <_dtoa_r+0x252>
 8012a4c:	2401      	movs	r4, #1
 8012a4e:	2200      	movs	r2, #0
 8012a50:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012a54:	f04f 3bff 	mov.w	fp, #4294967295
 8012a58:	2100      	movs	r1, #0
 8012a5a:	46da      	mov	sl, fp
 8012a5c:	2212      	movs	r2, #18
 8012a5e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a60:	e7ce      	b.n	8012a00 <_dtoa_r+0x220>
 8012a62:	2201      	movs	r2, #1
 8012a64:	9208      	str	r2, [sp, #32]
 8012a66:	e7f5      	b.n	8012a54 <_dtoa_r+0x274>
 8012a68:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012a6c:	46da      	mov	sl, fp
 8012a6e:	465a      	mov	r2, fp
 8012a70:	e7c6      	b.n	8012a00 <_dtoa_r+0x220>
 8012a72:	3101      	adds	r1, #1
 8012a74:	0040      	lsls	r0, r0, #1
 8012a76:	e7c7      	b.n	8012a08 <_dtoa_r+0x228>
 8012a78:	636f4361 	.word	0x636f4361
 8012a7c:	3fd287a7 	.word	0x3fd287a7
 8012a80:	8b60c8b3 	.word	0x8b60c8b3
 8012a84:	3fc68a28 	.word	0x3fc68a28
 8012a88:	509f79fb 	.word	0x509f79fb
 8012a8c:	3fd34413 	.word	0x3fd34413
 8012a90:	08016911 	.word	0x08016911
 8012a94:	08016928 	.word	0x08016928
 8012a98:	7ff00000 	.word	0x7ff00000
 8012a9c:	0801690d 	.word	0x0801690d
 8012aa0:	080168e1 	.word	0x080168e1
 8012aa4:	080168e0 	.word	0x080168e0
 8012aa8:	08016a20 	.word	0x08016a20
 8012aac:	08016980 	.word	0x08016980
 8012ab0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012ab4:	f1ba 0f0e 	cmp.w	sl, #14
 8012ab8:	6010      	str	r0, [r2, #0]
 8012aba:	d86f      	bhi.n	8012b9c <_dtoa_r+0x3bc>
 8012abc:	2c00      	cmp	r4, #0
 8012abe:	d06d      	beq.n	8012b9c <_dtoa_r+0x3bc>
 8012ac0:	f1b8 0f00 	cmp.w	r8, #0
 8012ac4:	f340 80c2 	ble.w	8012c4c <_dtoa_r+0x46c>
 8012ac8:	4aca      	ldr	r2, [pc, #808]	@ (8012df4 <_dtoa_r+0x614>)
 8012aca:	f008 010f 	and.w	r1, r8, #15
 8012ace:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012ad2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012ad6:	ed92 7b00 	vldr	d7, [r2]
 8012ada:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012ade:	f000 80a9 	beq.w	8012c34 <_dtoa_r+0x454>
 8012ae2:	4ac5      	ldr	r2, [pc, #788]	@ (8012df8 <_dtoa_r+0x618>)
 8012ae4:	ed92 6b08 	vldr	d6, [r2, #32]
 8012ae8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012aec:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012af0:	f001 010f 	and.w	r1, r1, #15
 8012af4:	2203      	movs	r2, #3
 8012af6:	48c0      	ldr	r0, [pc, #768]	@ (8012df8 <_dtoa_r+0x618>)
 8012af8:	2900      	cmp	r1, #0
 8012afa:	f040 809d 	bne.w	8012c38 <_dtoa_r+0x458>
 8012afe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012b02:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012b06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012b0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012b0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b10:	2900      	cmp	r1, #0
 8012b12:	f000 80c1 	beq.w	8012c98 <_dtoa_r+0x4b8>
 8012b16:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012b1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b22:	f140 80b9 	bpl.w	8012c98 <_dtoa_r+0x4b8>
 8012b26:	f1ba 0f00 	cmp.w	sl, #0
 8012b2a:	f000 80b5 	beq.w	8012c98 <_dtoa_r+0x4b8>
 8012b2e:	f1bb 0f00 	cmp.w	fp, #0
 8012b32:	dd31      	ble.n	8012b98 <_dtoa_r+0x3b8>
 8012b34:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012b38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012b3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012b40:	f108 31ff 	add.w	r1, r8, #4294967295
 8012b44:	9104      	str	r1, [sp, #16]
 8012b46:	3201      	adds	r2, #1
 8012b48:	465c      	mov	r4, fp
 8012b4a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012b4e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012b52:	ee07 2a90 	vmov	s15, r2
 8012b56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012b5a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012b5e:	ee15 2a90 	vmov	r2, s11
 8012b62:	ec51 0b15 	vmov	r0, r1, d5
 8012b66:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012b6a:	2c00      	cmp	r4, #0
 8012b6c:	f040 8098 	bne.w	8012ca0 <_dtoa_r+0x4c0>
 8012b70:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012b74:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012b78:	ec41 0b17 	vmov	d7, r0, r1
 8012b7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b84:	f300 8261 	bgt.w	801304a <_dtoa_r+0x86a>
 8012b88:	eeb1 7b47 	vneg.f64	d7, d7
 8012b8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b94:	f100 80f5 	bmi.w	8012d82 <_dtoa_r+0x5a2>
 8012b98:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012b9c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012b9e:	2a00      	cmp	r2, #0
 8012ba0:	f2c0 812c 	blt.w	8012dfc <_dtoa_r+0x61c>
 8012ba4:	f1b8 0f0e 	cmp.w	r8, #14
 8012ba8:	f300 8128 	bgt.w	8012dfc <_dtoa_r+0x61c>
 8012bac:	4b91      	ldr	r3, [pc, #580]	@ (8012df4 <_dtoa_r+0x614>)
 8012bae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012bb2:	ed93 6b00 	vldr	d6, [r3]
 8012bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	da03      	bge.n	8012bc4 <_dtoa_r+0x3e4>
 8012bbc:	f1ba 0f00 	cmp.w	sl, #0
 8012bc0:	f340 80d2 	ble.w	8012d68 <_dtoa_r+0x588>
 8012bc4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012bc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012bcc:	463e      	mov	r6, r7
 8012bce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012bd2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012bd6:	ee15 3a10 	vmov	r3, s10
 8012bda:	3330      	adds	r3, #48	@ 0x30
 8012bdc:	f806 3b01 	strb.w	r3, [r6], #1
 8012be0:	1bf3      	subs	r3, r6, r7
 8012be2:	459a      	cmp	sl, r3
 8012be4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012be8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012bec:	f040 80f8 	bne.w	8012de0 <_dtoa_r+0x600>
 8012bf0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012bf4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfc:	f300 80dd 	bgt.w	8012dba <_dtoa_r+0x5da>
 8012c00:	eeb4 7b46 	vcmp.f64	d7, d6
 8012c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c08:	d104      	bne.n	8012c14 <_dtoa_r+0x434>
 8012c0a:	ee15 3a10 	vmov	r3, s10
 8012c0e:	07db      	lsls	r3, r3, #31
 8012c10:	f100 80d3 	bmi.w	8012dba <_dtoa_r+0x5da>
 8012c14:	9901      	ldr	r1, [sp, #4]
 8012c16:	4648      	mov	r0, r9
 8012c18:	f000 fbc2 	bl	80133a0 <_Bfree>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012c20:	7033      	strb	r3, [r6, #0]
 8012c22:	f108 0301 	add.w	r3, r8, #1
 8012c26:	6013      	str	r3, [r2, #0]
 8012c28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	f000 8304 	beq.w	8013238 <_dtoa_r+0xa58>
 8012c30:	601e      	str	r6, [r3, #0]
 8012c32:	e301      	b.n	8013238 <_dtoa_r+0xa58>
 8012c34:	2202      	movs	r2, #2
 8012c36:	e75e      	b.n	8012af6 <_dtoa_r+0x316>
 8012c38:	07cc      	lsls	r4, r1, #31
 8012c3a:	d504      	bpl.n	8012c46 <_dtoa_r+0x466>
 8012c3c:	ed90 6b00 	vldr	d6, [r0]
 8012c40:	3201      	adds	r2, #1
 8012c42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c46:	1049      	asrs	r1, r1, #1
 8012c48:	3008      	adds	r0, #8
 8012c4a:	e755      	b.n	8012af8 <_dtoa_r+0x318>
 8012c4c:	d022      	beq.n	8012c94 <_dtoa_r+0x4b4>
 8012c4e:	f1c8 0100 	rsb	r1, r8, #0
 8012c52:	4a68      	ldr	r2, [pc, #416]	@ (8012df4 <_dtoa_r+0x614>)
 8012c54:	f001 000f 	and.w	r0, r1, #15
 8012c58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012c5c:	ed92 7b00 	vldr	d7, [r2]
 8012c60:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012c64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c68:	4863      	ldr	r0, [pc, #396]	@ (8012df8 <_dtoa_r+0x618>)
 8012c6a:	1109      	asrs	r1, r1, #4
 8012c6c:	2400      	movs	r4, #0
 8012c6e:	2202      	movs	r2, #2
 8012c70:	b929      	cbnz	r1, 8012c7e <_dtoa_r+0x49e>
 8012c72:	2c00      	cmp	r4, #0
 8012c74:	f43f af49 	beq.w	8012b0a <_dtoa_r+0x32a>
 8012c78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c7c:	e745      	b.n	8012b0a <_dtoa_r+0x32a>
 8012c7e:	07ce      	lsls	r6, r1, #31
 8012c80:	d505      	bpl.n	8012c8e <_dtoa_r+0x4ae>
 8012c82:	ed90 6b00 	vldr	d6, [r0]
 8012c86:	3201      	adds	r2, #1
 8012c88:	2401      	movs	r4, #1
 8012c8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c8e:	1049      	asrs	r1, r1, #1
 8012c90:	3008      	adds	r0, #8
 8012c92:	e7ed      	b.n	8012c70 <_dtoa_r+0x490>
 8012c94:	2202      	movs	r2, #2
 8012c96:	e738      	b.n	8012b0a <_dtoa_r+0x32a>
 8012c98:	f8cd 8010 	str.w	r8, [sp, #16]
 8012c9c:	4654      	mov	r4, sl
 8012c9e:	e754      	b.n	8012b4a <_dtoa_r+0x36a>
 8012ca0:	4a54      	ldr	r2, [pc, #336]	@ (8012df4 <_dtoa_r+0x614>)
 8012ca2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012ca6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012caa:	9a08      	ldr	r2, [sp, #32]
 8012cac:	ec41 0b17 	vmov	d7, r0, r1
 8012cb0:	443c      	add	r4, r7
 8012cb2:	b34a      	cbz	r2, 8012d08 <_dtoa_r+0x528>
 8012cb4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012cb8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012cbc:	463e      	mov	r6, r7
 8012cbe:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012cc2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012cc6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012cca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012cce:	ee14 2a90 	vmov	r2, s9
 8012cd2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012cd6:	3230      	adds	r2, #48	@ 0x30
 8012cd8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012cdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce4:	f806 2b01 	strb.w	r2, [r6], #1
 8012ce8:	d438      	bmi.n	8012d5c <_dtoa_r+0x57c>
 8012cea:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012cee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf6:	d462      	bmi.n	8012dbe <_dtoa_r+0x5de>
 8012cf8:	42a6      	cmp	r6, r4
 8012cfa:	f43f af4d 	beq.w	8012b98 <_dtoa_r+0x3b8>
 8012cfe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012d02:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012d06:	e7e0      	b.n	8012cca <_dtoa_r+0x4ea>
 8012d08:	4621      	mov	r1, r4
 8012d0a:	463e      	mov	r6, r7
 8012d0c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012d10:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012d14:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012d18:	ee14 2a90 	vmov	r2, s9
 8012d1c:	3230      	adds	r2, #48	@ 0x30
 8012d1e:	f806 2b01 	strb.w	r2, [r6], #1
 8012d22:	42a6      	cmp	r6, r4
 8012d24:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012d28:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012d2c:	d119      	bne.n	8012d62 <_dtoa_r+0x582>
 8012d2e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012d32:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012d36:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3e:	dc3e      	bgt.n	8012dbe <_dtoa_r+0x5de>
 8012d40:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012d44:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d4c:	f57f af24 	bpl.w	8012b98 <_dtoa_r+0x3b8>
 8012d50:	460e      	mov	r6, r1
 8012d52:	3901      	subs	r1, #1
 8012d54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012d58:	2b30      	cmp	r3, #48	@ 0x30
 8012d5a:	d0f9      	beq.n	8012d50 <_dtoa_r+0x570>
 8012d5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012d60:	e758      	b.n	8012c14 <_dtoa_r+0x434>
 8012d62:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012d66:	e7d5      	b.n	8012d14 <_dtoa_r+0x534>
 8012d68:	d10b      	bne.n	8012d82 <_dtoa_r+0x5a2>
 8012d6a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012d6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012d72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d7e:	f2c0 8161 	blt.w	8013044 <_dtoa_r+0x864>
 8012d82:	2400      	movs	r4, #0
 8012d84:	4625      	mov	r5, r4
 8012d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d88:	43db      	mvns	r3, r3
 8012d8a:	9304      	str	r3, [sp, #16]
 8012d8c:	463e      	mov	r6, r7
 8012d8e:	f04f 0800 	mov.w	r8, #0
 8012d92:	4621      	mov	r1, r4
 8012d94:	4648      	mov	r0, r9
 8012d96:	f000 fb03 	bl	80133a0 <_Bfree>
 8012d9a:	2d00      	cmp	r5, #0
 8012d9c:	d0de      	beq.n	8012d5c <_dtoa_r+0x57c>
 8012d9e:	f1b8 0f00 	cmp.w	r8, #0
 8012da2:	d005      	beq.n	8012db0 <_dtoa_r+0x5d0>
 8012da4:	45a8      	cmp	r8, r5
 8012da6:	d003      	beq.n	8012db0 <_dtoa_r+0x5d0>
 8012da8:	4641      	mov	r1, r8
 8012daa:	4648      	mov	r0, r9
 8012dac:	f000 faf8 	bl	80133a0 <_Bfree>
 8012db0:	4629      	mov	r1, r5
 8012db2:	4648      	mov	r0, r9
 8012db4:	f000 faf4 	bl	80133a0 <_Bfree>
 8012db8:	e7d0      	b.n	8012d5c <_dtoa_r+0x57c>
 8012dba:	f8cd 8010 	str.w	r8, [sp, #16]
 8012dbe:	4633      	mov	r3, r6
 8012dc0:	461e      	mov	r6, r3
 8012dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012dc6:	2a39      	cmp	r2, #57	@ 0x39
 8012dc8:	d106      	bne.n	8012dd8 <_dtoa_r+0x5f8>
 8012dca:	429f      	cmp	r7, r3
 8012dcc:	d1f8      	bne.n	8012dc0 <_dtoa_r+0x5e0>
 8012dce:	9a04      	ldr	r2, [sp, #16]
 8012dd0:	3201      	adds	r2, #1
 8012dd2:	9204      	str	r2, [sp, #16]
 8012dd4:	2230      	movs	r2, #48	@ 0x30
 8012dd6:	703a      	strb	r2, [r7, #0]
 8012dd8:	781a      	ldrb	r2, [r3, #0]
 8012dda:	3201      	adds	r2, #1
 8012ddc:	701a      	strb	r2, [r3, #0]
 8012dde:	e7bd      	b.n	8012d5c <_dtoa_r+0x57c>
 8012de0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012de4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dec:	f47f aeef 	bne.w	8012bce <_dtoa_r+0x3ee>
 8012df0:	e710      	b.n	8012c14 <_dtoa_r+0x434>
 8012df2:	bf00      	nop
 8012df4:	08016a20 	.word	0x08016a20
 8012df8:	080169f8 	.word	0x080169f8
 8012dfc:	9908      	ldr	r1, [sp, #32]
 8012dfe:	2900      	cmp	r1, #0
 8012e00:	f000 80e3 	beq.w	8012fca <_dtoa_r+0x7ea>
 8012e04:	9907      	ldr	r1, [sp, #28]
 8012e06:	2901      	cmp	r1, #1
 8012e08:	f300 80c8 	bgt.w	8012f9c <_dtoa_r+0x7bc>
 8012e0c:	2d00      	cmp	r5, #0
 8012e0e:	f000 80c1 	beq.w	8012f94 <_dtoa_r+0x7b4>
 8012e12:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012e16:	9e05      	ldr	r6, [sp, #20]
 8012e18:	461c      	mov	r4, r3
 8012e1a:	9304      	str	r3, [sp, #16]
 8012e1c:	9b05      	ldr	r3, [sp, #20]
 8012e1e:	4413      	add	r3, r2
 8012e20:	9305      	str	r3, [sp, #20]
 8012e22:	9b06      	ldr	r3, [sp, #24]
 8012e24:	2101      	movs	r1, #1
 8012e26:	4413      	add	r3, r2
 8012e28:	4648      	mov	r0, r9
 8012e2a:	9306      	str	r3, [sp, #24]
 8012e2c:	f000 fb6c 	bl	8013508 <__i2b>
 8012e30:	9b04      	ldr	r3, [sp, #16]
 8012e32:	4605      	mov	r5, r0
 8012e34:	b166      	cbz	r6, 8012e50 <_dtoa_r+0x670>
 8012e36:	9a06      	ldr	r2, [sp, #24]
 8012e38:	2a00      	cmp	r2, #0
 8012e3a:	dd09      	ble.n	8012e50 <_dtoa_r+0x670>
 8012e3c:	42b2      	cmp	r2, r6
 8012e3e:	9905      	ldr	r1, [sp, #20]
 8012e40:	bfa8      	it	ge
 8012e42:	4632      	movge	r2, r6
 8012e44:	1a89      	subs	r1, r1, r2
 8012e46:	9105      	str	r1, [sp, #20]
 8012e48:	9906      	ldr	r1, [sp, #24]
 8012e4a:	1ab6      	subs	r6, r6, r2
 8012e4c:	1a8a      	subs	r2, r1, r2
 8012e4e:	9206      	str	r2, [sp, #24]
 8012e50:	b1fb      	cbz	r3, 8012e92 <_dtoa_r+0x6b2>
 8012e52:	9a08      	ldr	r2, [sp, #32]
 8012e54:	2a00      	cmp	r2, #0
 8012e56:	f000 80bc 	beq.w	8012fd2 <_dtoa_r+0x7f2>
 8012e5a:	b19c      	cbz	r4, 8012e84 <_dtoa_r+0x6a4>
 8012e5c:	4629      	mov	r1, r5
 8012e5e:	4622      	mov	r2, r4
 8012e60:	4648      	mov	r0, r9
 8012e62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e64:	f000 fc10 	bl	8013688 <__pow5mult>
 8012e68:	9a01      	ldr	r2, [sp, #4]
 8012e6a:	4601      	mov	r1, r0
 8012e6c:	4605      	mov	r5, r0
 8012e6e:	4648      	mov	r0, r9
 8012e70:	f000 fb60 	bl	8013534 <__multiply>
 8012e74:	9901      	ldr	r1, [sp, #4]
 8012e76:	9004      	str	r0, [sp, #16]
 8012e78:	4648      	mov	r0, r9
 8012e7a:	f000 fa91 	bl	80133a0 <_Bfree>
 8012e7e:	9a04      	ldr	r2, [sp, #16]
 8012e80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e82:	9201      	str	r2, [sp, #4]
 8012e84:	1b1a      	subs	r2, r3, r4
 8012e86:	d004      	beq.n	8012e92 <_dtoa_r+0x6b2>
 8012e88:	9901      	ldr	r1, [sp, #4]
 8012e8a:	4648      	mov	r0, r9
 8012e8c:	f000 fbfc 	bl	8013688 <__pow5mult>
 8012e90:	9001      	str	r0, [sp, #4]
 8012e92:	2101      	movs	r1, #1
 8012e94:	4648      	mov	r0, r9
 8012e96:	f000 fb37 	bl	8013508 <__i2b>
 8012e9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e9c:	4604      	mov	r4, r0
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	f000 81d0 	beq.w	8013244 <_dtoa_r+0xa64>
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	4601      	mov	r1, r0
 8012ea8:	4648      	mov	r0, r9
 8012eaa:	f000 fbed 	bl	8013688 <__pow5mult>
 8012eae:	9b07      	ldr	r3, [sp, #28]
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	4604      	mov	r4, r0
 8012eb4:	f300 8095 	bgt.w	8012fe2 <_dtoa_r+0x802>
 8012eb8:	9b02      	ldr	r3, [sp, #8]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	f040 808b 	bne.w	8012fd6 <_dtoa_r+0x7f6>
 8012ec0:	9b03      	ldr	r3, [sp, #12]
 8012ec2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012ec6:	2a00      	cmp	r2, #0
 8012ec8:	f040 8087 	bne.w	8012fda <_dtoa_r+0x7fa>
 8012ecc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012ed0:	0d12      	lsrs	r2, r2, #20
 8012ed2:	0512      	lsls	r2, r2, #20
 8012ed4:	2a00      	cmp	r2, #0
 8012ed6:	f000 8082 	beq.w	8012fde <_dtoa_r+0x7fe>
 8012eda:	9b05      	ldr	r3, [sp, #20]
 8012edc:	3301      	adds	r3, #1
 8012ede:	9305      	str	r3, [sp, #20]
 8012ee0:	9b06      	ldr	r3, [sp, #24]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	9306      	str	r3, [sp, #24]
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012eea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	f000 81af 	beq.w	8013250 <_dtoa_r+0xa70>
 8012ef2:	6922      	ldr	r2, [r4, #16]
 8012ef4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012ef8:	6910      	ldr	r0, [r2, #16]
 8012efa:	f000 fab9 	bl	8013470 <__hi0bits>
 8012efe:	f1c0 0020 	rsb	r0, r0, #32
 8012f02:	9b06      	ldr	r3, [sp, #24]
 8012f04:	4418      	add	r0, r3
 8012f06:	f010 001f 	ands.w	r0, r0, #31
 8012f0a:	d076      	beq.n	8012ffa <_dtoa_r+0x81a>
 8012f0c:	f1c0 0220 	rsb	r2, r0, #32
 8012f10:	2a04      	cmp	r2, #4
 8012f12:	dd69      	ble.n	8012fe8 <_dtoa_r+0x808>
 8012f14:	9b05      	ldr	r3, [sp, #20]
 8012f16:	f1c0 001c 	rsb	r0, r0, #28
 8012f1a:	4403      	add	r3, r0
 8012f1c:	9305      	str	r3, [sp, #20]
 8012f1e:	9b06      	ldr	r3, [sp, #24]
 8012f20:	4406      	add	r6, r0
 8012f22:	4403      	add	r3, r0
 8012f24:	9306      	str	r3, [sp, #24]
 8012f26:	9b05      	ldr	r3, [sp, #20]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	dd05      	ble.n	8012f38 <_dtoa_r+0x758>
 8012f2c:	9901      	ldr	r1, [sp, #4]
 8012f2e:	461a      	mov	r2, r3
 8012f30:	4648      	mov	r0, r9
 8012f32:	f000 fc03 	bl	801373c <__lshift>
 8012f36:	9001      	str	r0, [sp, #4]
 8012f38:	9b06      	ldr	r3, [sp, #24]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	dd05      	ble.n	8012f4a <_dtoa_r+0x76a>
 8012f3e:	4621      	mov	r1, r4
 8012f40:	461a      	mov	r2, r3
 8012f42:	4648      	mov	r0, r9
 8012f44:	f000 fbfa 	bl	801373c <__lshift>
 8012f48:	4604      	mov	r4, r0
 8012f4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d056      	beq.n	8012ffe <_dtoa_r+0x81e>
 8012f50:	9801      	ldr	r0, [sp, #4]
 8012f52:	4621      	mov	r1, r4
 8012f54:	f000 fc5e 	bl	8013814 <__mcmp>
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	da50      	bge.n	8012ffe <_dtoa_r+0x81e>
 8012f5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8012f60:	9304      	str	r3, [sp, #16]
 8012f62:	9901      	ldr	r1, [sp, #4]
 8012f64:	2300      	movs	r3, #0
 8012f66:	220a      	movs	r2, #10
 8012f68:	4648      	mov	r0, r9
 8012f6a:	f000 fa3b 	bl	80133e4 <__multadd>
 8012f6e:	9b08      	ldr	r3, [sp, #32]
 8012f70:	9001      	str	r0, [sp, #4]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	f000 816e 	beq.w	8013254 <_dtoa_r+0xa74>
 8012f78:	4629      	mov	r1, r5
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	220a      	movs	r2, #10
 8012f7e:	4648      	mov	r0, r9
 8012f80:	f000 fa30 	bl	80133e4 <__multadd>
 8012f84:	f1bb 0f00 	cmp.w	fp, #0
 8012f88:	4605      	mov	r5, r0
 8012f8a:	dc64      	bgt.n	8013056 <_dtoa_r+0x876>
 8012f8c:	9b07      	ldr	r3, [sp, #28]
 8012f8e:	2b02      	cmp	r3, #2
 8012f90:	dc3e      	bgt.n	8013010 <_dtoa_r+0x830>
 8012f92:	e060      	b.n	8013056 <_dtoa_r+0x876>
 8012f94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012f9a:	e73c      	b.n	8012e16 <_dtoa_r+0x636>
 8012f9c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8012fa0:	42a3      	cmp	r3, r4
 8012fa2:	bfbf      	itttt	lt
 8012fa4:	1ae2      	sublt	r2, r4, r3
 8012fa6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012fa8:	189b      	addlt	r3, r3, r2
 8012faa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012fac:	bfae      	itee	ge
 8012fae:	1b1c      	subge	r4, r3, r4
 8012fb0:	4623      	movlt	r3, r4
 8012fb2:	2400      	movlt	r4, #0
 8012fb4:	f1ba 0f00 	cmp.w	sl, #0
 8012fb8:	bfb5      	itete	lt
 8012fba:	9a05      	ldrlt	r2, [sp, #20]
 8012fbc:	9e05      	ldrge	r6, [sp, #20]
 8012fbe:	eba2 060a 	sublt.w	r6, r2, sl
 8012fc2:	4652      	movge	r2, sl
 8012fc4:	bfb8      	it	lt
 8012fc6:	2200      	movlt	r2, #0
 8012fc8:	e727      	b.n	8012e1a <_dtoa_r+0x63a>
 8012fca:	9e05      	ldr	r6, [sp, #20]
 8012fcc:	9d08      	ldr	r5, [sp, #32]
 8012fce:	461c      	mov	r4, r3
 8012fd0:	e730      	b.n	8012e34 <_dtoa_r+0x654>
 8012fd2:	461a      	mov	r2, r3
 8012fd4:	e758      	b.n	8012e88 <_dtoa_r+0x6a8>
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	e786      	b.n	8012ee8 <_dtoa_r+0x708>
 8012fda:	9b02      	ldr	r3, [sp, #8]
 8012fdc:	e784      	b.n	8012ee8 <_dtoa_r+0x708>
 8012fde:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012fe0:	e783      	b.n	8012eea <_dtoa_r+0x70a>
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fe6:	e784      	b.n	8012ef2 <_dtoa_r+0x712>
 8012fe8:	d09d      	beq.n	8012f26 <_dtoa_r+0x746>
 8012fea:	9b05      	ldr	r3, [sp, #20]
 8012fec:	321c      	adds	r2, #28
 8012fee:	4413      	add	r3, r2
 8012ff0:	9305      	str	r3, [sp, #20]
 8012ff2:	9b06      	ldr	r3, [sp, #24]
 8012ff4:	4416      	add	r6, r2
 8012ff6:	4413      	add	r3, r2
 8012ff8:	e794      	b.n	8012f24 <_dtoa_r+0x744>
 8012ffa:	4602      	mov	r2, r0
 8012ffc:	e7f5      	b.n	8012fea <_dtoa_r+0x80a>
 8012ffe:	f1ba 0f00 	cmp.w	sl, #0
 8013002:	f8cd 8010 	str.w	r8, [sp, #16]
 8013006:	46d3      	mov	fp, sl
 8013008:	dc21      	bgt.n	801304e <_dtoa_r+0x86e>
 801300a:	9b07      	ldr	r3, [sp, #28]
 801300c:	2b02      	cmp	r3, #2
 801300e:	dd1e      	ble.n	801304e <_dtoa_r+0x86e>
 8013010:	f1bb 0f00 	cmp.w	fp, #0
 8013014:	f47f aeb7 	bne.w	8012d86 <_dtoa_r+0x5a6>
 8013018:	4621      	mov	r1, r4
 801301a:	465b      	mov	r3, fp
 801301c:	2205      	movs	r2, #5
 801301e:	4648      	mov	r0, r9
 8013020:	f000 f9e0 	bl	80133e4 <__multadd>
 8013024:	4601      	mov	r1, r0
 8013026:	4604      	mov	r4, r0
 8013028:	9801      	ldr	r0, [sp, #4]
 801302a:	f000 fbf3 	bl	8013814 <__mcmp>
 801302e:	2800      	cmp	r0, #0
 8013030:	f77f aea9 	ble.w	8012d86 <_dtoa_r+0x5a6>
 8013034:	463e      	mov	r6, r7
 8013036:	2331      	movs	r3, #49	@ 0x31
 8013038:	f806 3b01 	strb.w	r3, [r6], #1
 801303c:	9b04      	ldr	r3, [sp, #16]
 801303e:	3301      	adds	r3, #1
 8013040:	9304      	str	r3, [sp, #16]
 8013042:	e6a4      	b.n	8012d8e <_dtoa_r+0x5ae>
 8013044:	f8cd 8010 	str.w	r8, [sp, #16]
 8013048:	4654      	mov	r4, sl
 801304a:	4625      	mov	r5, r4
 801304c:	e7f2      	b.n	8013034 <_dtoa_r+0x854>
 801304e:	9b08      	ldr	r3, [sp, #32]
 8013050:	2b00      	cmp	r3, #0
 8013052:	f000 8103 	beq.w	801325c <_dtoa_r+0xa7c>
 8013056:	2e00      	cmp	r6, #0
 8013058:	dd05      	ble.n	8013066 <_dtoa_r+0x886>
 801305a:	4629      	mov	r1, r5
 801305c:	4632      	mov	r2, r6
 801305e:	4648      	mov	r0, r9
 8013060:	f000 fb6c 	bl	801373c <__lshift>
 8013064:	4605      	mov	r5, r0
 8013066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013068:	2b00      	cmp	r3, #0
 801306a:	d058      	beq.n	801311e <_dtoa_r+0x93e>
 801306c:	6869      	ldr	r1, [r5, #4]
 801306e:	4648      	mov	r0, r9
 8013070:	f000 f956 	bl	8013320 <_Balloc>
 8013074:	4606      	mov	r6, r0
 8013076:	b928      	cbnz	r0, 8013084 <_dtoa_r+0x8a4>
 8013078:	4b82      	ldr	r3, [pc, #520]	@ (8013284 <_dtoa_r+0xaa4>)
 801307a:	4602      	mov	r2, r0
 801307c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013080:	f7ff bbc7 	b.w	8012812 <_dtoa_r+0x32>
 8013084:	692a      	ldr	r2, [r5, #16]
 8013086:	3202      	adds	r2, #2
 8013088:	0092      	lsls	r2, r2, #2
 801308a:	f105 010c 	add.w	r1, r5, #12
 801308e:	300c      	adds	r0, #12
 8013090:	f000 fee6 	bl	8013e60 <memcpy>
 8013094:	2201      	movs	r2, #1
 8013096:	4631      	mov	r1, r6
 8013098:	4648      	mov	r0, r9
 801309a:	f000 fb4f 	bl	801373c <__lshift>
 801309e:	1c7b      	adds	r3, r7, #1
 80130a0:	9305      	str	r3, [sp, #20]
 80130a2:	eb07 030b 	add.w	r3, r7, fp
 80130a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80130a8:	9b02      	ldr	r3, [sp, #8]
 80130aa:	f003 0301 	and.w	r3, r3, #1
 80130ae:	46a8      	mov	r8, r5
 80130b0:	9308      	str	r3, [sp, #32]
 80130b2:	4605      	mov	r5, r0
 80130b4:	9b05      	ldr	r3, [sp, #20]
 80130b6:	9801      	ldr	r0, [sp, #4]
 80130b8:	4621      	mov	r1, r4
 80130ba:	f103 3bff 	add.w	fp, r3, #4294967295
 80130be:	f7ff fb06 	bl	80126ce <quorem>
 80130c2:	4641      	mov	r1, r8
 80130c4:	9002      	str	r0, [sp, #8]
 80130c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80130ca:	9801      	ldr	r0, [sp, #4]
 80130cc:	f000 fba2 	bl	8013814 <__mcmp>
 80130d0:	462a      	mov	r2, r5
 80130d2:	9006      	str	r0, [sp, #24]
 80130d4:	4621      	mov	r1, r4
 80130d6:	4648      	mov	r0, r9
 80130d8:	f000 fbb8 	bl	801384c <__mdiff>
 80130dc:	68c2      	ldr	r2, [r0, #12]
 80130de:	4606      	mov	r6, r0
 80130e0:	b9fa      	cbnz	r2, 8013122 <_dtoa_r+0x942>
 80130e2:	4601      	mov	r1, r0
 80130e4:	9801      	ldr	r0, [sp, #4]
 80130e6:	f000 fb95 	bl	8013814 <__mcmp>
 80130ea:	4602      	mov	r2, r0
 80130ec:	4631      	mov	r1, r6
 80130ee:	4648      	mov	r0, r9
 80130f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80130f2:	f000 f955 	bl	80133a0 <_Bfree>
 80130f6:	9b07      	ldr	r3, [sp, #28]
 80130f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80130fa:	9e05      	ldr	r6, [sp, #20]
 80130fc:	ea43 0102 	orr.w	r1, r3, r2
 8013100:	9b08      	ldr	r3, [sp, #32]
 8013102:	4319      	orrs	r1, r3
 8013104:	d10f      	bne.n	8013126 <_dtoa_r+0x946>
 8013106:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801310a:	d028      	beq.n	801315e <_dtoa_r+0x97e>
 801310c:	9b06      	ldr	r3, [sp, #24]
 801310e:	2b00      	cmp	r3, #0
 8013110:	dd02      	ble.n	8013118 <_dtoa_r+0x938>
 8013112:	9b02      	ldr	r3, [sp, #8]
 8013114:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013118:	f88b a000 	strb.w	sl, [fp]
 801311c:	e639      	b.n	8012d92 <_dtoa_r+0x5b2>
 801311e:	4628      	mov	r0, r5
 8013120:	e7bd      	b.n	801309e <_dtoa_r+0x8be>
 8013122:	2201      	movs	r2, #1
 8013124:	e7e2      	b.n	80130ec <_dtoa_r+0x90c>
 8013126:	9b06      	ldr	r3, [sp, #24]
 8013128:	2b00      	cmp	r3, #0
 801312a:	db04      	blt.n	8013136 <_dtoa_r+0x956>
 801312c:	9907      	ldr	r1, [sp, #28]
 801312e:	430b      	orrs	r3, r1
 8013130:	9908      	ldr	r1, [sp, #32]
 8013132:	430b      	orrs	r3, r1
 8013134:	d120      	bne.n	8013178 <_dtoa_r+0x998>
 8013136:	2a00      	cmp	r2, #0
 8013138:	ddee      	ble.n	8013118 <_dtoa_r+0x938>
 801313a:	9901      	ldr	r1, [sp, #4]
 801313c:	2201      	movs	r2, #1
 801313e:	4648      	mov	r0, r9
 8013140:	f000 fafc 	bl	801373c <__lshift>
 8013144:	4621      	mov	r1, r4
 8013146:	9001      	str	r0, [sp, #4]
 8013148:	f000 fb64 	bl	8013814 <__mcmp>
 801314c:	2800      	cmp	r0, #0
 801314e:	dc03      	bgt.n	8013158 <_dtoa_r+0x978>
 8013150:	d1e2      	bne.n	8013118 <_dtoa_r+0x938>
 8013152:	f01a 0f01 	tst.w	sl, #1
 8013156:	d0df      	beq.n	8013118 <_dtoa_r+0x938>
 8013158:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801315c:	d1d9      	bne.n	8013112 <_dtoa_r+0x932>
 801315e:	2339      	movs	r3, #57	@ 0x39
 8013160:	f88b 3000 	strb.w	r3, [fp]
 8013164:	4633      	mov	r3, r6
 8013166:	461e      	mov	r6, r3
 8013168:	3b01      	subs	r3, #1
 801316a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801316e:	2a39      	cmp	r2, #57	@ 0x39
 8013170:	d053      	beq.n	801321a <_dtoa_r+0xa3a>
 8013172:	3201      	adds	r2, #1
 8013174:	701a      	strb	r2, [r3, #0]
 8013176:	e60c      	b.n	8012d92 <_dtoa_r+0x5b2>
 8013178:	2a00      	cmp	r2, #0
 801317a:	dd07      	ble.n	801318c <_dtoa_r+0x9ac>
 801317c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013180:	d0ed      	beq.n	801315e <_dtoa_r+0x97e>
 8013182:	f10a 0301 	add.w	r3, sl, #1
 8013186:	f88b 3000 	strb.w	r3, [fp]
 801318a:	e602      	b.n	8012d92 <_dtoa_r+0x5b2>
 801318c:	9b05      	ldr	r3, [sp, #20]
 801318e:	9a05      	ldr	r2, [sp, #20]
 8013190:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013196:	4293      	cmp	r3, r2
 8013198:	d029      	beq.n	80131ee <_dtoa_r+0xa0e>
 801319a:	9901      	ldr	r1, [sp, #4]
 801319c:	2300      	movs	r3, #0
 801319e:	220a      	movs	r2, #10
 80131a0:	4648      	mov	r0, r9
 80131a2:	f000 f91f 	bl	80133e4 <__multadd>
 80131a6:	45a8      	cmp	r8, r5
 80131a8:	9001      	str	r0, [sp, #4]
 80131aa:	f04f 0300 	mov.w	r3, #0
 80131ae:	f04f 020a 	mov.w	r2, #10
 80131b2:	4641      	mov	r1, r8
 80131b4:	4648      	mov	r0, r9
 80131b6:	d107      	bne.n	80131c8 <_dtoa_r+0x9e8>
 80131b8:	f000 f914 	bl	80133e4 <__multadd>
 80131bc:	4680      	mov	r8, r0
 80131be:	4605      	mov	r5, r0
 80131c0:	9b05      	ldr	r3, [sp, #20]
 80131c2:	3301      	adds	r3, #1
 80131c4:	9305      	str	r3, [sp, #20]
 80131c6:	e775      	b.n	80130b4 <_dtoa_r+0x8d4>
 80131c8:	f000 f90c 	bl	80133e4 <__multadd>
 80131cc:	4629      	mov	r1, r5
 80131ce:	4680      	mov	r8, r0
 80131d0:	2300      	movs	r3, #0
 80131d2:	220a      	movs	r2, #10
 80131d4:	4648      	mov	r0, r9
 80131d6:	f000 f905 	bl	80133e4 <__multadd>
 80131da:	4605      	mov	r5, r0
 80131dc:	e7f0      	b.n	80131c0 <_dtoa_r+0x9e0>
 80131de:	f1bb 0f00 	cmp.w	fp, #0
 80131e2:	bfcc      	ite	gt
 80131e4:	465e      	movgt	r6, fp
 80131e6:	2601      	movle	r6, #1
 80131e8:	443e      	add	r6, r7
 80131ea:	f04f 0800 	mov.w	r8, #0
 80131ee:	9901      	ldr	r1, [sp, #4]
 80131f0:	2201      	movs	r2, #1
 80131f2:	4648      	mov	r0, r9
 80131f4:	f000 faa2 	bl	801373c <__lshift>
 80131f8:	4621      	mov	r1, r4
 80131fa:	9001      	str	r0, [sp, #4]
 80131fc:	f000 fb0a 	bl	8013814 <__mcmp>
 8013200:	2800      	cmp	r0, #0
 8013202:	dcaf      	bgt.n	8013164 <_dtoa_r+0x984>
 8013204:	d102      	bne.n	801320c <_dtoa_r+0xa2c>
 8013206:	f01a 0f01 	tst.w	sl, #1
 801320a:	d1ab      	bne.n	8013164 <_dtoa_r+0x984>
 801320c:	4633      	mov	r3, r6
 801320e:	461e      	mov	r6, r3
 8013210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013214:	2a30      	cmp	r2, #48	@ 0x30
 8013216:	d0fa      	beq.n	801320e <_dtoa_r+0xa2e>
 8013218:	e5bb      	b.n	8012d92 <_dtoa_r+0x5b2>
 801321a:	429f      	cmp	r7, r3
 801321c:	d1a3      	bne.n	8013166 <_dtoa_r+0x986>
 801321e:	9b04      	ldr	r3, [sp, #16]
 8013220:	3301      	adds	r3, #1
 8013222:	9304      	str	r3, [sp, #16]
 8013224:	2331      	movs	r3, #49	@ 0x31
 8013226:	703b      	strb	r3, [r7, #0]
 8013228:	e5b3      	b.n	8012d92 <_dtoa_r+0x5b2>
 801322a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801322c:	4f16      	ldr	r7, [pc, #88]	@ (8013288 <_dtoa_r+0xaa8>)
 801322e:	b11b      	cbz	r3, 8013238 <_dtoa_r+0xa58>
 8013230:	f107 0308 	add.w	r3, r7, #8
 8013234:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013236:	6013      	str	r3, [r2, #0]
 8013238:	4638      	mov	r0, r7
 801323a:	b011      	add	sp, #68	@ 0x44
 801323c:	ecbd 8b02 	vpop	{d8}
 8013240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013244:	9b07      	ldr	r3, [sp, #28]
 8013246:	2b01      	cmp	r3, #1
 8013248:	f77f ae36 	ble.w	8012eb8 <_dtoa_r+0x6d8>
 801324c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801324e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013250:	2001      	movs	r0, #1
 8013252:	e656      	b.n	8012f02 <_dtoa_r+0x722>
 8013254:	f1bb 0f00 	cmp.w	fp, #0
 8013258:	f77f aed7 	ble.w	801300a <_dtoa_r+0x82a>
 801325c:	463e      	mov	r6, r7
 801325e:	9801      	ldr	r0, [sp, #4]
 8013260:	4621      	mov	r1, r4
 8013262:	f7ff fa34 	bl	80126ce <quorem>
 8013266:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801326a:	f806 ab01 	strb.w	sl, [r6], #1
 801326e:	1bf2      	subs	r2, r6, r7
 8013270:	4593      	cmp	fp, r2
 8013272:	ddb4      	ble.n	80131de <_dtoa_r+0x9fe>
 8013274:	9901      	ldr	r1, [sp, #4]
 8013276:	2300      	movs	r3, #0
 8013278:	220a      	movs	r2, #10
 801327a:	4648      	mov	r0, r9
 801327c:	f000 f8b2 	bl	80133e4 <__multadd>
 8013280:	9001      	str	r0, [sp, #4]
 8013282:	e7ec      	b.n	801325e <_dtoa_r+0xa7e>
 8013284:	08016980 	.word	0x08016980
 8013288:	08016904 	.word	0x08016904

0801328c <_free_r>:
 801328c:	b538      	push	{r3, r4, r5, lr}
 801328e:	4605      	mov	r5, r0
 8013290:	2900      	cmp	r1, #0
 8013292:	d041      	beq.n	8013318 <_free_r+0x8c>
 8013294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013298:	1f0c      	subs	r4, r1, #4
 801329a:	2b00      	cmp	r3, #0
 801329c:	bfb8      	it	lt
 801329e:	18e4      	addlt	r4, r4, r3
 80132a0:	f7fe fc22 	bl	8011ae8 <__malloc_lock>
 80132a4:	4a1d      	ldr	r2, [pc, #116]	@ (801331c <_free_r+0x90>)
 80132a6:	6813      	ldr	r3, [r2, #0]
 80132a8:	b933      	cbnz	r3, 80132b8 <_free_r+0x2c>
 80132aa:	6063      	str	r3, [r4, #4]
 80132ac:	6014      	str	r4, [r2, #0]
 80132ae:	4628      	mov	r0, r5
 80132b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132b4:	f7fe bc1e 	b.w	8011af4 <__malloc_unlock>
 80132b8:	42a3      	cmp	r3, r4
 80132ba:	d908      	bls.n	80132ce <_free_r+0x42>
 80132bc:	6820      	ldr	r0, [r4, #0]
 80132be:	1821      	adds	r1, r4, r0
 80132c0:	428b      	cmp	r3, r1
 80132c2:	bf01      	itttt	eq
 80132c4:	6819      	ldreq	r1, [r3, #0]
 80132c6:	685b      	ldreq	r3, [r3, #4]
 80132c8:	1809      	addeq	r1, r1, r0
 80132ca:	6021      	streq	r1, [r4, #0]
 80132cc:	e7ed      	b.n	80132aa <_free_r+0x1e>
 80132ce:	461a      	mov	r2, r3
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	b10b      	cbz	r3, 80132d8 <_free_r+0x4c>
 80132d4:	42a3      	cmp	r3, r4
 80132d6:	d9fa      	bls.n	80132ce <_free_r+0x42>
 80132d8:	6811      	ldr	r1, [r2, #0]
 80132da:	1850      	adds	r0, r2, r1
 80132dc:	42a0      	cmp	r0, r4
 80132de:	d10b      	bne.n	80132f8 <_free_r+0x6c>
 80132e0:	6820      	ldr	r0, [r4, #0]
 80132e2:	4401      	add	r1, r0
 80132e4:	1850      	adds	r0, r2, r1
 80132e6:	4283      	cmp	r3, r0
 80132e8:	6011      	str	r1, [r2, #0]
 80132ea:	d1e0      	bne.n	80132ae <_free_r+0x22>
 80132ec:	6818      	ldr	r0, [r3, #0]
 80132ee:	685b      	ldr	r3, [r3, #4]
 80132f0:	6053      	str	r3, [r2, #4]
 80132f2:	4408      	add	r0, r1
 80132f4:	6010      	str	r0, [r2, #0]
 80132f6:	e7da      	b.n	80132ae <_free_r+0x22>
 80132f8:	d902      	bls.n	8013300 <_free_r+0x74>
 80132fa:	230c      	movs	r3, #12
 80132fc:	602b      	str	r3, [r5, #0]
 80132fe:	e7d6      	b.n	80132ae <_free_r+0x22>
 8013300:	6820      	ldr	r0, [r4, #0]
 8013302:	1821      	adds	r1, r4, r0
 8013304:	428b      	cmp	r3, r1
 8013306:	bf04      	itt	eq
 8013308:	6819      	ldreq	r1, [r3, #0]
 801330a:	685b      	ldreq	r3, [r3, #4]
 801330c:	6063      	str	r3, [r4, #4]
 801330e:	bf04      	itt	eq
 8013310:	1809      	addeq	r1, r1, r0
 8013312:	6021      	streq	r1, [r4, #0]
 8013314:	6054      	str	r4, [r2, #4]
 8013316:	e7ca      	b.n	80132ae <_free_r+0x22>
 8013318:	bd38      	pop	{r3, r4, r5, pc}
 801331a:	bf00      	nop
 801331c:	2400277c 	.word	0x2400277c

08013320 <_Balloc>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	69c6      	ldr	r6, [r0, #28]
 8013324:	4604      	mov	r4, r0
 8013326:	460d      	mov	r5, r1
 8013328:	b976      	cbnz	r6, 8013348 <_Balloc+0x28>
 801332a:	2010      	movs	r0, #16
 801332c:	f7fe fb32 	bl	8011994 <malloc>
 8013330:	4602      	mov	r2, r0
 8013332:	61e0      	str	r0, [r4, #28]
 8013334:	b920      	cbnz	r0, 8013340 <_Balloc+0x20>
 8013336:	4b18      	ldr	r3, [pc, #96]	@ (8013398 <_Balloc+0x78>)
 8013338:	4818      	ldr	r0, [pc, #96]	@ (801339c <_Balloc+0x7c>)
 801333a:	216b      	movs	r1, #107	@ 0x6b
 801333c:	f000 fd9e 	bl	8013e7c <__assert_func>
 8013340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013344:	6006      	str	r6, [r0, #0]
 8013346:	60c6      	str	r6, [r0, #12]
 8013348:	69e6      	ldr	r6, [r4, #28]
 801334a:	68f3      	ldr	r3, [r6, #12]
 801334c:	b183      	cbz	r3, 8013370 <_Balloc+0x50>
 801334e:	69e3      	ldr	r3, [r4, #28]
 8013350:	68db      	ldr	r3, [r3, #12]
 8013352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013356:	b9b8      	cbnz	r0, 8013388 <_Balloc+0x68>
 8013358:	2101      	movs	r1, #1
 801335a:	fa01 f605 	lsl.w	r6, r1, r5
 801335e:	1d72      	adds	r2, r6, #5
 8013360:	0092      	lsls	r2, r2, #2
 8013362:	4620      	mov	r0, r4
 8013364:	f000 fda8 	bl	8013eb8 <_calloc_r>
 8013368:	b160      	cbz	r0, 8013384 <_Balloc+0x64>
 801336a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801336e:	e00e      	b.n	801338e <_Balloc+0x6e>
 8013370:	2221      	movs	r2, #33	@ 0x21
 8013372:	2104      	movs	r1, #4
 8013374:	4620      	mov	r0, r4
 8013376:	f000 fd9f 	bl	8013eb8 <_calloc_r>
 801337a:	69e3      	ldr	r3, [r4, #28]
 801337c:	60f0      	str	r0, [r6, #12]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d1e4      	bne.n	801334e <_Balloc+0x2e>
 8013384:	2000      	movs	r0, #0
 8013386:	bd70      	pop	{r4, r5, r6, pc}
 8013388:	6802      	ldr	r2, [r0, #0]
 801338a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801338e:	2300      	movs	r3, #0
 8013390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013394:	e7f7      	b.n	8013386 <_Balloc+0x66>
 8013396:	bf00      	nop
 8013398:	08016911 	.word	0x08016911
 801339c:	08016991 	.word	0x08016991

080133a0 <_Bfree>:
 80133a0:	b570      	push	{r4, r5, r6, lr}
 80133a2:	69c6      	ldr	r6, [r0, #28]
 80133a4:	4605      	mov	r5, r0
 80133a6:	460c      	mov	r4, r1
 80133a8:	b976      	cbnz	r6, 80133c8 <_Bfree+0x28>
 80133aa:	2010      	movs	r0, #16
 80133ac:	f7fe faf2 	bl	8011994 <malloc>
 80133b0:	4602      	mov	r2, r0
 80133b2:	61e8      	str	r0, [r5, #28]
 80133b4:	b920      	cbnz	r0, 80133c0 <_Bfree+0x20>
 80133b6:	4b09      	ldr	r3, [pc, #36]	@ (80133dc <_Bfree+0x3c>)
 80133b8:	4809      	ldr	r0, [pc, #36]	@ (80133e0 <_Bfree+0x40>)
 80133ba:	218f      	movs	r1, #143	@ 0x8f
 80133bc:	f000 fd5e 	bl	8013e7c <__assert_func>
 80133c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133c4:	6006      	str	r6, [r0, #0]
 80133c6:	60c6      	str	r6, [r0, #12]
 80133c8:	b13c      	cbz	r4, 80133da <_Bfree+0x3a>
 80133ca:	69eb      	ldr	r3, [r5, #28]
 80133cc:	6862      	ldr	r2, [r4, #4]
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80133d4:	6021      	str	r1, [r4, #0]
 80133d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80133da:	bd70      	pop	{r4, r5, r6, pc}
 80133dc:	08016911 	.word	0x08016911
 80133e0:	08016991 	.word	0x08016991

080133e4 <__multadd>:
 80133e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133e8:	690d      	ldr	r5, [r1, #16]
 80133ea:	4607      	mov	r7, r0
 80133ec:	460c      	mov	r4, r1
 80133ee:	461e      	mov	r6, r3
 80133f0:	f101 0c14 	add.w	ip, r1, #20
 80133f4:	2000      	movs	r0, #0
 80133f6:	f8dc 3000 	ldr.w	r3, [ip]
 80133fa:	b299      	uxth	r1, r3
 80133fc:	fb02 6101 	mla	r1, r2, r1, r6
 8013400:	0c1e      	lsrs	r6, r3, #16
 8013402:	0c0b      	lsrs	r3, r1, #16
 8013404:	fb02 3306 	mla	r3, r2, r6, r3
 8013408:	b289      	uxth	r1, r1
 801340a:	3001      	adds	r0, #1
 801340c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013410:	4285      	cmp	r5, r0
 8013412:	f84c 1b04 	str.w	r1, [ip], #4
 8013416:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801341a:	dcec      	bgt.n	80133f6 <__multadd+0x12>
 801341c:	b30e      	cbz	r6, 8013462 <__multadd+0x7e>
 801341e:	68a3      	ldr	r3, [r4, #8]
 8013420:	42ab      	cmp	r3, r5
 8013422:	dc19      	bgt.n	8013458 <__multadd+0x74>
 8013424:	6861      	ldr	r1, [r4, #4]
 8013426:	4638      	mov	r0, r7
 8013428:	3101      	adds	r1, #1
 801342a:	f7ff ff79 	bl	8013320 <_Balloc>
 801342e:	4680      	mov	r8, r0
 8013430:	b928      	cbnz	r0, 801343e <__multadd+0x5a>
 8013432:	4602      	mov	r2, r0
 8013434:	4b0c      	ldr	r3, [pc, #48]	@ (8013468 <__multadd+0x84>)
 8013436:	480d      	ldr	r0, [pc, #52]	@ (801346c <__multadd+0x88>)
 8013438:	21ba      	movs	r1, #186	@ 0xba
 801343a:	f000 fd1f 	bl	8013e7c <__assert_func>
 801343e:	6922      	ldr	r2, [r4, #16]
 8013440:	3202      	adds	r2, #2
 8013442:	f104 010c 	add.w	r1, r4, #12
 8013446:	0092      	lsls	r2, r2, #2
 8013448:	300c      	adds	r0, #12
 801344a:	f000 fd09 	bl	8013e60 <memcpy>
 801344e:	4621      	mov	r1, r4
 8013450:	4638      	mov	r0, r7
 8013452:	f7ff ffa5 	bl	80133a0 <_Bfree>
 8013456:	4644      	mov	r4, r8
 8013458:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801345c:	3501      	adds	r5, #1
 801345e:	615e      	str	r6, [r3, #20]
 8013460:	6125      	str	r5, [r4, #16]
 8013462:	4620      	mov	r0, r4
 8013464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013468:	08016980 	.word	0x08016980
 801346c:	08016991 	.word	0x08016991

08013470 <__hi0bits>:
 8013470:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013474:	4603      	mov	r3, r0
 8013476:	bf36      	itet	cc
 8013478:	0403      	lslcc	r3, r0, #16
 801347a:	2000      	movcs	r0, #0
 801347c:	2010      	movcc	r0, #16
 801347e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013482:	bf3c      	itt	cc
 8013484:	021b      	lslcc	r3, r3, #8
 8013486:	3008      	addcc	r0, #8
 8013488:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801348c:	bf3c      	itt	cc
 801348e:	011b      	lslcc	r3, r3, #4
 8013490:	3004      	addcc	r0, #4
 8013492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013496:	bf3c      	itt	cc
 8013498:	009b      	lslcc	r3, r3, #2
 801349a:	3002      	addcc	r0, #2
 801349c:	2b00      	cmp	r3, #0
 801349e:	db05      	blt.n	80134ac <__hi0bits+0x3c>
 80134a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80134a4:	f100 0001 	add.w	r0, r0, #1
 80134a8:	bf08      	it	eq
 80134aa:	2020      	moveq	r0, #32
 80134ac:	4770      	bx	lr

080134ae <__lo0bits>:
 80134ae:	6803      	ldr	r3, [r0, #0]
 80134b0:	4602      	mov	r2, r0
 80134b2:	f013 0007 	ands.w	r0, r3, #7
 80134b6:	d00b      	beq.n	80134d0 <__lo0bits+0x22>
 80134b8:	07d9      	lsls	r1, r3, #31
 80134ba:	d421      	bmi.n	8013500 <__lo0bits+0x52>
 80134bc:	0798      	lsls	r0, r3, #30
 80134be:	bf49      	itett	mi
 80134c0:	085b      	lsrmi	r3, r3, #1
 80134c2:	089b      	lsrpl	r3, r3, #2
 80134c4:	2001      	movmi	r0, #1
 80134c6:	6013      	strmi	r3, [r2, #0]
 80134c8:	bf5c      	itt	pl
 80134ca:	6013      	strpl	r3, [r2, #0]
 80134cc:	2002      	movpl	r0, #2
 80134ce:	4770      	bx	lr
 80134d0:	b299      	uxth	r1, r3
 80134d2:	b909      	cbnz	r1, 80134d8 <__lo0bits+0x2a>
 80134d4:	0c1b      	lsrs	r3, r3, #16
 80134d6:	2010      	movs	r0, #16
 80134d8:	b2d9      	uxtb	r1, r3
 80134da:	b909      	cbnz	r1, 80134e0 <__lo0bits+0x32>
 80134dc:	3008      	adds	r0, #8
 80134de:	0a1b      	lsrs	r3, r3, #8
 80134e0:	0719      	lsls	r1, r3, #28
 80134e2:	bf04      	itt	eq
 80134e4:	091b      	lsreq	r3, r3, #4
 80134e6:	3004      	addeq	r0, #4
 80134e8:	0799      	lsls	r1, r3, #30
 80134ea:	bf04      	itt	eq
 80134ec:	089b      	lsreq	r3, r3, #2
 80134ee:	3002      	addeq	r0, #2
 80134f0:	07d9      	lsls	r1, r3, #31
 80134f2:	d403      	bmi.n	80134fc <__lo0bits+0x4e>
 80134f4:	085b      	lsrs	r3, r3, #1
 80134f6:	f100 0001 	add.w	r0, r0, #1
 80134fa:	d003      	beq.n	8013504 <__lo0bits+0x56>
 80134fc:	6013      	str	r3, [r2, #0]
 80134fe:	4770      	bx	lr
 8013500:	2000      	movs	r0, #0
 8013502:	4770      	bx	lr
 8013504:	2020      	movs	r0, #32
 8013506:	4770      	bx	lr

08013508 <__i2b>:
 8013508:	b510      	push	{r4, lr}
 801350a:	460c      	mov	r4, r1
 801350c:	2101      	movs	r1, #1
 801350e:	f7ff ff07 	bl	8013320 <_Balloc>
 8013512:	4602      	mov	r2, r0
 8013514:	b928      	cbnz	r0, 8013522 <__i2b+0x1a>
 8013516:	4b05      	ldr	r3, [pc, #20]	@ (801352c <__i2b+0x24>)
 8013518:	4805      	ldr	r0, [pc, #20]	@ (8013530 <__i2b+0x28>)
 801351a:	f240 1145 	movw	r1, #325	@ 0x145
 801351e:	f000 fcad 	bl	8013e7c <__assert_func>
 8013522:	2301      	movs	r3, #1
 8013524:	6144      	str	r4, [r0, #20]
 8013526:	6103      	str	r3, [r0, #16]
 8013528:	bd10      	pop	{r4, pc}
 801352a:	bf00      	nop
 801352c:	08016980 	.word	0x08016980
 8013530:	08016991 	.word	0x08016991

08013534 <__multiply>:
 8013534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013538:	4614      	mov	r4, r2
 801353a:	690a      	ldr	r2, [r1, #16]
 801353c:	6923      	ldr	r3, [r4, #16]
 801353e:	429a      	cmp	r2, r3
 8013540:	bfa8      	it	ge
 8013542:	4623      	movge	r3, r4
 8013544:	460f      	mov	r7, r1
 8013546:	bfa4      	itt	ge
 8013548:	460c      	movge	r4, r1
 801354a:	461f      	movge	r7, r3
 801354c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013550:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013554:	68a3      	ldr	r3, [r4, #8]
 8013556:	6861      	ldr	r1, [r4, #4]
 8013558:	eb0a 0609 	add.w	r6, sl, r9
 801355c:	42b3      	cmp	r3, r6
 801355e:	b085      	sub	sp, #20
 8013560:	bfb8      	it	lt
 8013562:	3101      	addlt	r1, #1
 8013564:	f7ff fedc 	bl	8013320 <_Balloc>
 8013568:	b930      	cbnz	r0, 8013578 <__multiply+0x44>
 801356a:	4602      	mov	r2, r0
 801356c:	4b44      	ldr	r3, [pc, #272]	@ (8013680 <__multiply+0x14c>)
 801356e:	4845      	ldr	r0, [pc, #276]	@ (8013684 <__multiply+0x150>)
 8013570:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013574:	f000 fc82 	bl	8013e7c <__assert_func>
 8013578:	f100 0514 	add.w	r5, r0, #20
 801357c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013580:	462b      	mov	r3, r5
 8013582:	2200      	movs	r2, #0
 8013584:	4543      	cmp	r3, r8
 8013586:	d321      	bcc.n	80135cc <__multiply+0x98>
 8013588:	f107 0114 	add.w	r1, r7, #20
 801358c:	f104 0214 	add.w	r2, r4, #20
 8013590:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013594:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013598:	9302      	str	r3, [sp, #8]
 801359a:	1b13      	subs	r3, r2, r4
 801359c:	3b15      	subs	r3, #21
 801359e:	f023 0303 	bic.w	r3, r3, #3
 80135a2:	3304      	adds	r3, #4
 80135a4:	f104 0715 	add.w	r7, r4, #21
 80135a8:	42ba      	cmp	r2, r7
 80135aa:	bf38      	it	cc
 80135ac:	2304      	movcc	r3, #4
 80135ae:	9301      	str	r3, [sp, #4]
 80135b0:	9b02      	ldr	r3, [sp, #8]
 80135b2:	9103      	str	r1, [sp, #12]
 80135b4:	428b      	cmp	r3, r1
 80135b6:	d80c      	bhi.n	80135d2 <__multiply+0x9e>
 80135b8:	2e00      	cmp	r6, #0
 80135ba:	dd03      	ble.n	80135c4 <__multiply+0x90>
 80135bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d05b      	beq.n	801367c <__multiply+0x148>
 80135c4:	6106      	str	r6, [r0, #16]
 80135c6:	b005      	add	sp, #20
 80135c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135cc:	f843 2b04 	str.w	r2, [r3], #4
 80135d0:	e7d8      	b.n	8013584 <__multiply+0x50>
 80135d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80135d6:	f1ba 0f00 	cmp.w	sl, #0
 80135da:	d024      	beq.n	8013626 <__multiply+0xf2>
 80135dc:	f104 0e14 	add.w	lr, r4, #20
 80135e0:	46a9      	mov	r9, r5
 80135e2:	f04f 0c00 	mov.w	ip, #0
 80135e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80135ea:	f8d9 3000 	ldr.w	r3, [r9]
 80135ee:	fa1f fb87 	uxth.w	fp, r7
 80135f2:	b29b      	uxth	r3, r3
 80135f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80135f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80135fc:	f8d9 7000 	ldr.w	r7, [r9]
 8013600:	4463      	add	r3, ip
 8013602:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013606:	fb0a c70b 	mla	r7, sl, fp, ip
 801360a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801360e:	b29b      	uxth	r3, r3
 8013610:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013614:	4572      	cmp	r2, lr
 8013616:	f849 3b04 	str.w	r3, [r9], #4
 801361a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801361e:	d8e2      	bhi.n	80135e6 <__multiply+0xb2>
 8013620:	9b01      	ldr	r3, [sp, #4]
 8013622:	f845 c003 	str.w	ip, [r5, r3]
 8013626:	9b03      	ldr	r3, [sp, #12]
 8013628:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801362c:	3104      	adds	r1, #4
 801362e:	f1b9 0f00 	cmp.w	r9, #0
 8013632:	d021      	beq.n	8013678 <__multiply+0x144>
 8013634:	682b      	ldr	r3, [r5, #0]
 8013636:	f104 0c14 	add.w	ip, r4, #20
 801363a:	46ae      	mov	lr, r5
 801363c:	f04f 0a00 	mov.w	sl, #0
 8013640:	f8bc b000 	ldrh.w	fp, [ip]
 8013644:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013648:	fb09 770b 	mla	r7, r9, fp, r7
 801364c:	4457      	add	r7, sl
 801364e:	b29b      	uxth	r3, r3
 8013650:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013654:	f84e 3b04 	str.w	r3, [lr], #4
 8013658:	f85c 3b04 	ldr.w	r3, [ip], #4
 801365c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013660:	f8be 3000 	ldrh.w	r3, [lr]
 8013664:	fb09 330a 	mla	r3, r9, sl, r3
 8013668:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801366c:	4562      	cmp	r2, ip
 801366e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013672:	d8e5      	bhi.n	8013640 <__multiply+0x10c>
 8013674:	9f01      	ldr	r7, [sp, #4]
 8013676:	51eb      	str	r3, [r5, r7]
 8013678:	3504      	adds	r5, #4
 801367a:	e799      	b.n	80135b0 <__multiply+0x7c>
 801367c:	3e01      	subs	r6, #1
 801367e:	e79b      	b.n	80135b8 <__multiply+0x84>
 8013680:	08016980 	.word	0x08016980
 8013684:	08016991 	.word	0x08016991

08013688 <__pow5mult>:
 8013688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801368c:	4615      	mov	r5, r2
 801368e:	f012 0203 	ands.w	r2, r2, #3
 8013692:	4607      	mov	r7, r0
 8013694:	460e      	mov	r6, r1
 8013696:	d007      	beq.n	80136a8 <__pow5mult+0x20>
 8013698:	4c25      	ldr	r4, [pc, #148]	@ (8013730 <__pow5mult+0xa8>)
 801369a:	3a01      	subs	r2, #1
 801369c:	2300      	movs	r3, #0
 801369e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80136a2:	f7ff fe9f 	bl	80133e4 <__multadd>
 80136a6:	4606      	mov	r6, r0
 80136a8:	10ad      	asrs	r5, r5, #2
 80136aa:	d03d      	beq.n	8013728 <__pow5mult+0xa0>
 80136ac:	69fc      	ldr	r4, [r7, #28]
 80136ae:	b97c      	cbnz	r4, 80136d0 <__pow5mult+0x48>
 80136b0:	2010      	movs	r0, #16
 80136b2:	f7fe f96f 	bl	8011994 <malloc>
 80136b6:	4602      	mov	r2, r0
 80136b8:	61f8      	str	r0, [r7, #28]
 80136ba:	b928      	cbnz	r0, 80136c8 <__pow5mult+0x40>
 80136bc:	4b1d      	ldr	r3, [pc, #116]	@ (8013734 <__pow5mult+0xac>)
 80136be:	481e      	ldr	r0, [pc, #120]	@ (8013738 <__pow5mult+0xb0>)
 80136c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80136c4:	f000 fbda 	bl	8013e7c <__assert_func>
 80136c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136cc:	6004      	str	r4, [r0, #0]
 80136ce:	60c4      	str	r4, [r0, #12]
 80136d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80136d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136d8:	b94c      	cbnz	r4, 80136ee <__pow5mult+0x66>
 80136da:	f240 2171 	movw	r1, #625	@ 0x271
 80136de:	4638      	mov	r0, r7
 80136e0:	f7ff ff12 	bl	8013508 <__i2b>
 80136e4:	2300      	movs	r3, #0
 80136e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80136ea:	4604      	mov	r4, r0
 80136ec:	6003      	str	r3, [r0, #0]
 80136ee:	f04f 0900 	mov.w	r9, #0
 80136f2:	07eb      	lsls	r3, r5, #31
 80136f4:	d50a      	bpl.n	801370c <__pow5mult+0x84>
 80136f6:	4631      	mov	r1, r6
 80136f8:	4622      	mov	r2, r4
 80136fa:	4638      	mov	r0, r7
 80136fc:	f7ff ff1a 	bl	8013534 <__multiply>
 8013700:	4631      	mov	r1, r6
 8013702:	4680      	mov	r8, r0
 8013704:	4638      	mov	r0, r7
 8013706:	f7ff fe4b 	bl	80133a0 <_Bfree>
 801370a:	4646      	mov	r6, r8
 801370c:	106d      	asrs	r5, r5, #1
 801370e:	d00b      	beq.n	8013728 <__pow5mult+0xa0>
 8013710:	6820      	ldr	r0, [r4, #0]
 8013712:	b938      	cbnz	r0, 8013724 <__pow5mult+0x9c>
 8013714:	4622      	mov	r2, r4
 8013716:	4621      	mov	r1, r4
 8013718:	4638      	mov	r0, r7
 801371a:	f7ff ff0b 	bl	8013534 <__multiply>
 801371e:	6020      	str	r0, [r4, #0]
 8013720:	f8c0 9000 	str.w	r9, [r0]
 8013724:	4604      	mov	r4, r0
 8013726:	e7e4      	b.n	80136f2 <__pow5mult+0x6a>
 8013728:	4630      	mov	r0, r6
 801372a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801372e:	bf00      	nop
 8013730:	080169ec 	.word	0x080169ec
 8013734:	08016911 	.word	0x08016911
 8013738:	08016991 	.word	0x08016991

0801373c <__lshift>:
 801373c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013740:	460c      	mov	r4, r1
 8013742:	6849      	ldr	r1, [r1, #4]
 8013744:	6923      	ldr	r3, [r4, #16]
 8013746:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801374a:	68a3      	ldr	r3, [r4, #8]
 801374c:	4607      	mov	r7, r0
 801374e:	4691      	mov	r9, r2
 8013750:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013754:	f108 0601 	add.w	r6, r8, #1
 8013758:	42b3      	cmp	r3, r6
 801375a:	db0b      	blt.n	8013774 <__lshift+0x38>
 801375c:	4638      	mov	r0, r7
 801375e:	f7ff fddf 	bl	8013320 <_Balloc>
 8013762:	4605      	mov	r5, r0
 8013764:	b948      	cbnz	r0, 801377a <__lshift+0x3e>
 8013766:	4602      	mov	r2, r0
 8013768:	4b28      	ldr	r3, [pc, #160]	@ (801380c <__lshift+0xd0>)
 801376a:	4829      	ldr	r0, [pc, #164]	@ (8013810 <__lshift+0xd4>)
 801376c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013770:	f000 fb84 	bl	8013e7c <__assert_func>
 8013774:	3101      	adds	r1, #1
 8013776:	005b      	lsls	r3, r3, #1
 8013778:	e7ee      	b.n	8013758 <__lshift+0x1c>
 801377a:	2300      	movs	r3, #0
 801377c:	f100 0114 	add.w	r1, r0, #20
 8013780:	f100 0210 	add.w	r2, r0, #16
 8013784:	4618      	mov	r0, r3
 8013786:	4553      	cmp	r3, sl
 8013788:	db33      	blt.n	80137f2 <__lshift+0xb6>
 801378a:	6920      	ldr	r0, [r4, #16]
 801378c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013790:	f104 0314 	add.w	r3, r4, #20
 8013794:	f019 091f 	ands.w	r9, r9, #31
 8013798:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801379c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80137a0:	d02b      	beq.n	80137fa <__lshift+0xbe>
 80137a2:	f1c9 0e20 	rsb	lr, r9, #32
 80137a6:	468a      	mov	sl, r1
 80137a8:	2200      	movs	r2, #0
 80137aa:	6818      	ldr	r0, [r3, #0]
 80137ac:	fa00 f009 	lsl.w	r0, r0, r9
 80137b0:	4310      	orrs	r0, r2
 80137b2:	f84a 0b04 	str.w	r0, [sl], #4
 80137b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80137ba:	459c      	cmp	ip, r3
 80137bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80137c0:	d8f3      	bhi.n	80137aa <__lshift+0x6e>
 80137c2:	ebac 0304 	sub.w	r3, ip, r4
 80137c6:	3b15      	subs	r3, #21
 80137c8:	f023 0303 	bic.w	r3, r3, #3
 80137cc:	3304      	adds	r3, #4
 80137ce:	f104 0015 	add.w	r0, r4, #21
 80137d2:	4584      	cmp	ip, r0
 80137d4:	bf38      	it	cc
 80137d6:	2304      	movcc	r3, #4
 80137d8:	50ca      	str	r2, [r1, r3]
 80137da:	b10a      	cbz	r2, 80137e0 <__lshift+0xa4>
 80137dc:	f108 0602 	add.w	r6, r8, #2
 80137e0:	3e01      	subs	r6, #1
 80137e2:	4638      	mov	r0, r7
 80137e4:	612e      	str	r6, [r5, #16]
 80137e6:	4621      	mov	r1, r4
 80137e8:	f7ff fdda 	bl	80133a0 <_Bfree>
 80137ec:	4628      	mov	r0, r5
 80137ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80137f6:	3301      	adds	r3, #1
 80137f8:	e7c5      	b.n	8013786 <__lshift+0x4a>
 80137fa:	3904      	subs	r1, #4
 80137fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013800:	f841 2f04 	str.w	r2, [r1, #4]!
 8013804:	459c      	cmp	ip, r3
 8013806:	d8f9      	bhi.n	80137fc <__lshift+0xc0>
 8013808:	e7ea      	b.n	80137e0 <__lshift+0xa4>
 801380a:	bf00      	nop
 801380c:	08016980 	.word	0x08016980
 8013810:	08016991 	.word	0x08016991

08013814 <__mcmp>:
 8013814:	690a      	ldr	r2, [r1, #16]
 8013816:	4603      	mov	r3, r0
 8013818:	6900      	ldr	r0, [r0, #16]
 801381a:	1a80      	subs	r0, r0, r2
 801381c:	b530      	push	{r4, r5, lr}
 801381e:	d10e      	bne.n	801383e <__mcmp+0x2a>
 8013820:	3314      	adds	r3, #20
 8013822:	3114      	adds	r1, #20
 8013824:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013828:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801382c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013830:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013834:	4295      	cmp	r5, r2
 8013836:	d003      	beq.n	8013840 <__mcmp+0x2c>
 8013838:	d205      	bcs.n	8013846 <__mcmp+0x32>
 801383a:	f04f 30ff 	mov.w	r0, #4294967295
 801383e:	bd30      	pop	{r4, r5, pc}
 8013840:	42a3      	cmp	r3, r4
 8013842:	d3f3      	bcc.n	801382c <__mcmp+0x18>
 8013844:	e7fb      	b.n	801383e <__mcmp+0x2a>
 8013846:	2001      	movs	r0, #1
 8013848:	e7f9      	b.n	801383e <__mcmp+0x2a>
	...

0801384c <__mdiff>:
 801384c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013850:	4689      	mov	r9, r1
 8013852:	4606      	mov	r6, r0
 8013854:	4611      	mov	r1, r2
 8013856:	4648      	mov	r0, r9
 8013858:	4614      	mov	r4, r2
 801385a:	f7ff ffdb 	bl	8013814 <__mcmp>
 801385e:	1e05      	subs	r5, r0, #0
 8013860:	d112      	bne.n	8013888 <__mdiff+0x3c>
 8013862:	4629      	mov	r1, r5
 8013864:	4630      	mov	r0, r6
 8013866:	f7ff fd5b 	bl	8013320 <_Balloc>
 801386a:	4602      	mov	r2, r0
 801386c:	b928      	cbnz	r0, 801387a <__mdiff+0x2e>
 801386e:	4b3f      	ldr	r3, [pc, #252]	@ (801396c <__mdiff+0x120>)
 8013870:	f240 2137 	movw	r1, #567	@ 0x237
 8013874:	483e      	ldr	r0, [pc, #248]	@ (8013970 <__mdiff+0x124>)
 8013876:	f000 fb01 	bl	8013e7c <__assert_func>
 801387a:	2301      	movs	r3, #1
 801387c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013880:	4610      	mov	r0, r2
 8013882:	b003      	add	sp, #12
 8013884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013888:	bfbc      	itt	lt
 801388a:	464b      	movlt	r3, r9
 801388c:	46a1      	movlt	r9, r4
 801388e:	4630      	mov	r0, r6
 8013890:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013894:	bfba      	itte	lt
 8013896:	461c      	movlt	r4, r3
 8013898:	2501      	movlt	r5, #1
 801389a:	2500      	movge	r5, #0
 801389c:	f7ff fd40 	bl	8013320 <_Balloc>
 80138a0:	4602      	mov	r2, r0
 80138a2:	b918      	cbnz	r0, 80138ac <__mdiff+0x60>
 80138a4:	4b31      	ldr	r3, [pc, #196]	@ (801396c <__mdiff+0x120>)
 80138a6:	f240 2145 	movw	r1, #581	@ 0x245
 80138aa:	e7e3      	b.n	8013874 <__mdiff+0x28>
 80138ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80138b0:	6926      	ldr	r6, [r4, #16]
 80138b2:	60c5      	str	r5, [r0, #12]
 80138b4:	f109 0310 	add.w	r3, r9, #16
 80138b8:	f109 0514 	add.w	r5, r9, #20
 80138bc:	f104 0e14 	add.w	lr, r4, #20
 80138c0:	f100 0b14 	add.w	fp, r0, #20
 80138c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80138c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80138cc:	9301      	str	r3, [sp, #4]
 80138ce:	46d9      	mov	r9, fp
 80138d0:	f04f 0c00 	mov.w	ip, #0
 80138d4:	9b01      	ldr	r3, [sp, #4]
 80138d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80138da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80138de:	9301      	str	r3, [sp, #4]
 80138e0:	fa1f f38a 	uxth.w	r3, sl
 80138e4:	4619      	mov	r1, r3
 80138e6:	b283      	uxth	r3, r0
 80138e8:	1acb      	subs	r3, r1, r3
 80138ea:	0c00      	lsrs	r0, r0, #16
 80138ec:	4463      	add	r3, ip
 80138ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80138f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80138f6:	b29b      	uxth	r3, r3
 80138f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80138fc:	4576      	cmp	r6, lr
 80138fe:	f849 3b04 	str.w	r3, [r9], #4
 8013902:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013906:	d8e5      	bhi.n	80138d4 <__mdiff+0x88>
 8013908:	1b33      	subs	r3, r6, r4
 801390a:	3b15      	subs	r3, #21
 801390c:	f023 0303 	bic.w	r3, r3, #3
 8013910:	3415      	adds	r4, #21
 8013912:	3304      	adds	r3, #4
 8013914:	42a6      	cmp	r6, r4
 8013916:	bf38      	it	cc
 8013918:	2304      	movcc	r3, #4
 801391a:	441d      	add	r5, r3
 801391c:	445b      	add	r3, fp
 801391e:	461e      	mov	r6, r3
 8013920:	462c      	mov	r4, r5
 8013922:	4544      	cmp	r4, r8
 8013924:	d30e      	bcc.n	8013944 <__mdiff+0xf8>
 8013926:	f108 0103 	add.w	r1, r8, #3
 801392a:	1b49      	subs	r1, r1, r5
 801392c:	f021 0103 	bic.w	r1, r1, #3
 8013930:	3d03      	subs	r5, #3
 8013932:	45a8      	cmp	r8, r5
 8013934:	bf38      	it	cc
 8013936:	2100      	movcc	r1, #0
 8013938:	440b      	add	r3, r1
 801393a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801393e:	b191      	cbz	r1, 8013966 <__mdiff+0x11a>
 8013940:	6117      	str	r7, [r2, #16]
 8013942:	e79d      	b.n	8013880 <__mdiff+0x34>
 8013944:	f854 1b04 	ldr.w	r1, [r4], #4
 8013948:	46e6      	mov	lr, ip
 801394a:	0c08      	lsrs	r0, r1, #16
 801394c:	fa1c fc81 	uxtah	ip, ip, r1
 8013950:	4471      	add	r1, lr
 8013952:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013956:	b289      	uxth	r1, r1
 8013958:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801395c:	f846 1b04 	str.w	r1, [r6], #4
 8013960:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013964:	e7dd      	b.n	8013922 <__mdiff+0xd6>
 8013966:	3f01      	subs	r7, #1
 8013968:	e7e7      	b.n	801393a <__mdiff+0xee>
 801396a:	bf00      	nop
 801396c:	08016980 	.word	0x08016980
 8013970:	08016991 	.word	0x08016991

08013974 <__d2b>:
 8013974:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013978:	460f      	mov	r7, r1
 801397a:	2101      	movs	r1, #1
 801397c:	ec59 8b10 	vmov	r8, r9, d0
 8013980:	4616      	mov	r6, r2
 8013982:	f7ff fccd 	bl	8013320 <_Balloc>
 8013986:	4604      	mov	r4, r0
 8013988:	b930      	cbnz	r0, 8013998 <__d2b+0x24>
 801398a:	4602      	mov	r2, r0
 801398c:	4b23      	ldr	r3, [pc, #140]	@ (8013a1c <__d2b+0xa8>)
 801398e:	4824      	ldr	r0, [pc, #144]	@ (8013a20 <__d2b+0xac>)
 8013990:	f240 310f 	movw	r1, #783	@ 0x30f
 8013994:	f000 fa72 	bl	8013e7c <__assert_func>
 8013998:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801399c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80139a0:	b10d      	cbz	r5, 80139a6 <__d2b+0x32>
 80139a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80139a6:	9301      	str	r3, [sp, #4]
 80139a8:	f1b8 0300 	subs.w	r3, r8, #0
 80139ac:	d023      	beq.n	80139f6 <__d2b+0x82>
 80139ae:	4668      	mov	r0, sp
 80139b0:	9300      	str	r3, [sp, #0]
 80139b2:	f7ff fd7c 	bl	80134ae <__lo0bits>
 80139b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80139ba:	b1d0      	cbz	r0, 80139f2 <__d2b+0x7e>
 80139bc:	f1c0 0320 	rsb	r3, r0, #32
 80139c0:	fa02 f303 	lsl.w	r3, r2, r3
 80139c4:	430b      	orrs	r3, r1
 80139c6:	40c2      	lsrs	r2, r0
 80139c8:	6163      	str	r3, [r4, #20]
 80139ca:	9201      	str	r2, [sp, #4]
 80139cc:	9b01      	ldr	r3, [sp, #4]
 80139ce:	61a3      	str	r3, [r4, #24]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	bf0c      	ite	eq
 80139d4:	2201      	moveq	r2, #1
 80139d6:	2202      	movne	r2, #2
 80139d8:	6122      	str	r2, [r4, #16]
 80139da:	b1a5      	cbz	r5, 8013a06 <__d2b+0x92>
 80139dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80139e0:	4405      	add	r5, r0
 80139e2:	603d      	str	r5, [r7, #0]
 80139e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80139e8:	6030      	str	r0, [r6, #0]
 80139ea:	4620      	mov	r0, r4
 80139ec:	b003      	add	sp, #12
 80139ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139f2:	6161      	str	r1, [r4, #20]
 80139f4:	e7ea      	b.n	80139cc <__d2b+0x58>
 80139f6:	a801      	add	r0, sp, #4
 80139f8:	f7ff fd59 	bl	80134ae <__lo0bits>
 80139fc:	9b01      	ldr	r3, [sp, #4]
 80139fe:	6163      	str	r3, [r4, #20]
 8013a00:	3020      	adds	r0, #32
 8013a02:	2201      	movs	r2, #1
 8013a04:	e7e8      	b.n	80139d8 <__d2b+0x64>
 8013a06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013a0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013a0e:	6038      	str	r0, [r7, #0]
 8013a10:	6918      	ldr	r0, [r3, #16]
 8013a12:	f7ff fd2d 	bl	8013470 <__hi0bits>
 8013a16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013a1a:	e7e5      	b.n	80139e8 <__d2b+0x74>
 8013a1c:	08016980 	.word	0x08016980
 8013a20:	08016991 	.word	0x08016991

08013a24 <__ssputs_r>:
 8013a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a28:	688e      	ldr	r6, [r1, #8]
 8013a2a:	461f      	mov	r7, r3
 8013a2c:	42be      	cmp	r6, r7
 8013a2e:	680b      	ldr	r3, [r1, #0]
 8013a30:	4682      	mov	sl, r0
 8013a32:	460c      	mov	r4, r1
 8013a34:	4690      	mov	r8, r2
 8013a36:	d82d      	bhi.n	8013a94 <__ssputs_r+0x70>
 8013a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013a3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013a40:	d026      	beq.n	8013a90 <__ssputs_r+0x6c>
 8013a42:	6965      	ldr	r5, [r4, #20]
 8013a44:	6909      	ldr	r1, [r1, #16]
 8013a46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a4a:	eba3 0901 	sub.w	r9, r3, r1
 8013a4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a52:	1c7b      	adds	r3, r7, #1
 8013a54:	444b      	add	r3, r9
 8013a56:	106d      	asrs	r5, r5, #1
 8013a58:	429d      	cmp	r5, r3
 8013a5a:	bf38      	it	cc
 8013a5c:	461d      	movcc	r5, r3
 8013a5e:	0553      	lsls	r3, r2, #21
 8013a60:	d527      	bpl.n	8013ab2 <__ssputs_r+0x8e>
 8013a62:	4629      	mov	r1, r5
 8013a64:	f7fd ffc0 	bl	80119e8 <_malloc_r>
 8013a68:	4606      	mov	r6, r0
 8013a6a:	b360      	cbz	r0, 8013ac6 <__ssputs_r+0xa2>
 8013a6c:	6921      	ldr	r1, [r4, #16]
 8013a6e:	464a      	mov	r2, r9
 8013a70:	f000 f9f6 	bl	8013e60 <memcpy>
 8013a74:	89a3      	ldrh	r3, [r4, #12]
 8013a76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a7e:	81a3      	strh	r3, [r4, #12]
 8013a80:	6126      	str	r6, [r4, #16]
 8013a82:	6165      	str	r5, [r4, #20]
 8013a84:	444e      	add	r6, r9
 8013a86:	eba5 0509 	sub.w	r5, r5, r9
 8013a8a:	6026      	str	r6, [r4, #0]
 8013a8c:	60a5      	str	r5, [r4, #8]
 8013a8e:	463e      	mov	r6, r7
 8013a90:	42be      	cmp	r6, r7
 8013a92:	d900      	bls.n	8013a96 <__ssputs_r+0x72>
 8013a94:	463e      	mov	r6, r7
 8013a96:	6820      	ldr	r0, [r4, #0]
 8013a98:	4632      	mov	r2, r6
 8013a9a:	4641      	mov	r1, r8
 8013a9c:	f000 f9c6 	bl	8013e2c <memmove>
 8013aa0:	68a3      	ldr	r3, [r4, #8]
 8013aa2:	1b9b      	subs	r3, r3, r6
 8013aa4:	60a3      	str	r3, [r4, #8]
 8013aa6:	6823      	ldr	r3, [r4, #0]
 8013aa8:	4433      	add	r3, r6
 8013aaa:	6023      	str	r3, [r4, #0]
 8013aac:	2000      	movs	r0, #0
 8013aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ab2:	462a      	mov	r2, r5
 8013ab4:	f000 fa26 	bl	8013f04 <_realloc_r>
 8013ab8:	4606      	mov	r6, r0
 8013aba:	2800      	cmp	r0, #0
 8013abc:	d1e0      	bne.n	8013a80 <__ssputs_r+0x5c>
 8013abe:	6921      	ldr	r1, [r4, #16]
 8013ac0:	4650      	mov	r0, sl
 8013ac2:	f7ff fbe3 	bl	801328c <_free_r>
 8013ac6:	230c      	movs	r3, #12
 8013ac8:	f8ca 3000 	str.w	r3, [sl]
 8013acc:	89a3      	ldrh	r3, [r4, #12]
 8013ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ad2:	81a3      	strh	r3, [r4, #12]
 8013ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ad8:	e7e9      	b.n	8013aae <__ssputs_r+0x8a>
	...

08013adc <_svfiprintf_r>:
 8013adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae0:	4698      	mov	r8, r3
 8013ae2:	898b      	ldrh	r3, [r1, #12]
 8013ae4:	061b      	lsls	r3, r3, #24
 8013ae6:	b09d      	sub	sp, #116	@ 0x74
 8013ae8:	4607      	mov	r7, r0
 8013aea:	460d      	mov	r5, r1
 8013aec:	4614      	mov	r4, r2
 8013aee:	d510      	bpl.n	8013b12 <_svfiprintf_r+0x36>
 8013af0:	690b      	ldr	r3, [r1, #16]
 8013af2:	b973      	cbnz	r3, 8013b12 <_svfiprintf_r+0x36>
 8013af4:	2140      	movs	r1, #64	@ 0x40
 8013af6:	f7fd ff77 	bl	80119e8 <_malloc_r>
 8013afa:	6028      	str	r0, [r5, #0]
 8013afc:	6128      	str	r0, [r5, #16]
 8013afe:	b930      	cbnz	r0, 8013b0e <_svfiprintf_r+0x32>
 8013b00:	230c      	movs	r3, #12
 8013b02:	603b      	str	r3, [r7, #0]
 8013b04:	f04f 30ff 	mov.w	r0, #4294967295
 8013b08:	b01d      	add	sp, #116	@ 0x74
 8013b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b0e:	2340      	movs	r3, #64	@ 0x40
 8013b10:	616b      	str	r3, [r5, #20]
 8013b12:	2300      	movs	r3, #0
 8013b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b16:	2320      	movs	r3, #32
 8013b18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b20:	2330      	movs	r3, #48	@ 0x30
 8013b22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013cc0 <_svfiprintf_r+0x1e4>
 8013b26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013b2a:	f04f 0901 	mov.w	r9, #1
 8013b2e:	4623      	mov	r3, r4
 8013b30:	469a      	mov	sl, r3
 8013b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b36:	b10a      	cbz	r2, 8013b3c <_svfiprintf_r+0x60>
 8013b38:	2a25      	cmp	r2, #37	@ 0x25
 8013b3a:	d1f9      	bne.n	8013b30 <_svfiprintf_r+0x54>
 8013b3c:	ebba 0b04 	subs.w	fp, sl, r4
 8013b40:	d00b      	beq.n	8013b5a <_svfiprintf_r+0x7e>
 8013b42:	465b      	mov	r3, fp
 8013b44:	4622      	mov	r2, r4
 8013b46:	4629      	mov	r1, r5
 8013b48:	4638      	mov	r0, r7
 8013b4a:	f7ff ff6b 	bl	8013a24 <__ssputs_r>
 8013b4e:	3001      	adds	r0, #1
 8013b50:	f000 80a7 	beq.w	8013ca2 <_svfiprintf_r+0x1c6>
 8013b54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b56:	445a      	add	r2, fp
 8013b58:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	f000 809f 	beq.w	8013ca2 <_svfiprintf_r+0x1c6>
 8013b64:	2300      	movs	r3, #0
 8013b66:	f04f 32ff 	mov.w	r2, #4294967295
 8013b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b6e:	f10a 0a01 	add.w	sl, sl, #1
 8013b72:	9304      	str	r3, [sp, #16]
 8013b74:	9307      	str	r3, [sp, #28]
 8013b76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013b7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8013b7c:	4654      	mov	r4, sl
 8013b7e:	2205      	movs	r2, #5
 8013b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b84:	484e      	ldr	r0, [pc, #312]	@ (8013cc0 <_svfiprintf_r+0x1e4>)
 8013b86:	f7ec fbab 	bl	80002e0 <memchr>
 8013b8a:	9a04      	ldr	r2, [sp, #16]
 8013b8c:	b9d8      	cbnz	r0, 8013bc6 <_svfiprintf_r+0xea>
 8013b8e:	06d0      	lsls	r0, r2, #27
 8013b90:	bf44      	itt	mi
 8013b92:	2320      	movmi	r3, #32
 8013b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b98:	0711      	lsls	r1, r2, #28
 8013b9a:	bf44      	itt	mi
 8013b9c:	232b      	movmi	r3, #43	@ 0x2b
 8013b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8013ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ba8:	d015      	beq.n	8013bd6 <_svfiprintf_r+0xfa>
 8013baa:	9a07      	ldr	r2, [sp, #28]
 8013bac:	4654      	mov	r4, sl
 8013bae:	2000      	movs	r0, #0
 8013bb0:	f04f 0c0a 	mov.w	ip, #10
 8013bb4:	4621      	mov	r1, r4
 8013bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bba:	3b30      	subs	r3, #48	@ 0x30
 8013bbc:	2b09      	cmp	r3, #9
 8013bbe:	d94b      	bls.n	8013c58 <_svfiprintf_r+0x17c>
 8013bc0:	b1b0      	cbz	r0, 8013bf0 <_svfiprintf_r+0x114>
 8013bc2:	9207      	str	r2, [sp, #28]
 8013bc4:	e014      	b.n	8013bf0 <_svfiprintf_r+0x114>
 8013bc6:	eba0 0308 	sub.w	r3, r0, r8
 8013bca:	fa09 f303 	lsl.w	r3, r9, r3
 8013bce:	4313      	orrs	r3, r2
 8013bd0:	9304      	str	r3, [sp, #16]
 8013bd2:	46a2      	mov	sl, r4
 8013bd4:	e7d2      	b.n	8013b7c <_svfiprintf_r+0xa0>
 8013bd6:	9b03      	ldr	r3, [sp, #12]
 8013bd8:	1d19      	adds	r1, r3, #4
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	9103      	str	r1, [sp, #12]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	bfbb      	ittet	lt
 8013be2:	425b      	neglt	r3, r3
 8013be4:	f042 0202 	orrlt.w	r2, r2, #2
 8013be8:	9307      	strge	r3, [sp, #28]
 8013bea:	9307      	strlt	r3, [sp, #28]
 8013bec:	bfb8      	it	lt
 8013bee:	9204      	strlt	r2, [sp, #16]
 8013bf0:	7823      	ldrb	r3, [r4, #0]
 8013bf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8013bf4:	d10a      	bne.n	8013c0c <_svfiprintf_r+0x130>
 8013bf6:	7863      	ldrb	r3, [r4, #1]
 8013bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013bfa:	d132      	bne.n	8013c62 <_svfiprintf_r+0x186>
 8013bfc:	9b03      	ldr	r3, [sp, #12]
 8013bfe:	1d1a      	adds	r2, r3, #4
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	9203      	str	r2, [sp, #12]
 8013c04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013c08:	3402      	adds	r4, #2
 8013c0a:	9305      	str	r3, [sp, #20]
 8013c0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013cd0 <_svfiprintf_r+0x1f4>
 8013c10:	7821      	ldrb	r1, [r4, #0]
 8013c12:	2203      	movs	r2, #3
 8013c14:	4650      	mov	r0, sl
 8013c16:	f7ec fb63 	bl	80002e0 <memchr>
 8013c1a:	b138      	cbz	r0, 8013c2c <_svfiprintf_r+0x150>
 8013c1c:	9b04      	ldr	r3, [sp, #16]
 8013c1e:	eba0 000a 	sub.w	r0, r0, sl
 8013c22:	2240      	movs	r2, #64	@ 0x40
 8013c24:	4082      	lsls	r2, r0
 8013c26:	4313      	orrs	r3, r2
 8013c28:	3401      	adds	r4, #1
 8013c2a:	9304      	str	r3, [sp, #16]
 8013c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c30:	4824      	ldr	r0, [pc, #144]	@ (8013cc4 <_svfiprintf_r+0x1e8>)
 8013c32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013c36:	2206      	movs	r2, #6
 8013c38:	f7ec fb52 	bl	80002e0 <memchr>
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	d036      	beq.n	8013cae <_svfiprintf_r+0x1d2>
 8013c40:	4b21      	ldr	r3, [pc, #132]	@ (8013cc8 <_svfiprintf_r+0x1ec>)
 8013c42:	bb1b      	cbnz	r3, 8013c8c <_svfiprintf_r+0x1b0>
 8013c44:	9b03      	ldr	r3, [sp, #12]
 8013c46:	3307      	adds	r3, #7
 8013c48:	f023 0307 	bic.w	r3, r3, #7
 8013c4c:	3308      	adds	r3, #8
 8013c4e:	9303      	str	r3, [sp, #12]
 8013c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c52:	4433      	add	r3, r6
 8013c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c56:	e76a      	b.n	8013b2e <_svfiprintf_r+0x52>
 8013c58:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c5c:	460c      	mov	r4, r1
 8013c5e:	2001      	movs	r0, #1
 8013c60:	e7a8      	b.n	8013bb4 <_svfiprintf_r+0xd8>
 8013c62:	2300      	movs	r3, #0
 8013c64:	3401      	adds	r4, #1
 8013c66:	9305      	str	r3, [sp, #20]
 8013c68:	4619      	mov	r1, r3
 8013c6a:	f04f 0c0a 	mov.w	ip, #10
 8013c6e:	4620      	mov	r0, r4
 8013c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c74:	3a30      	subs	r2, #48	@ 0x30
 8013c76:	2a09      	cmp	r2, #9
 8013c78:	d903      	bls.n	8013c82 <_svfiprintf_r+0x1a6>
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d0c6      	beq.n	8013c0c <_svfiprintf_r+0x130>
 8013c7e:	9105      	str	r1, [sp, #20]
 8013c80:	e7c4      	b.n	8013c0c <_svfiprintf_r+0x130>
 8013c82:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c86:	4604      	mov	r4, r0
 8013c88:	2301      	movs	r3, #1
 8013c8a:	e7f0      	b.n	8013c6e <_svfiprintf_r+0x192>
 8013c8c:	ab03      	add	r3, sp, #12
 8013c8e:	9300      	str	r3, [sp, #0]
 8013c90:	462a      	mov	r2, r5
 8013c92:	4b0e      	ldr	r3, [pc, #56]	@ (8013ccc <_svfiprintf_r+0x1f0>)
 8013c94:	a904      	add	r1, sp, #16
 8013c96:	4638      	mov	r0, r7
 8013c98:	f7fd ffc2 	bl	8011c20 <_printf_float>
 8013c9c:	1c42      	adds	r2, r0, #1
 8013c9e:	4606      	mov	r6, r0
 8013ca0:	d1d6      	bne.n	8013c50 <_svfiprintf_r+0x174>
 8013ca2:	89ab      	ldrh	r3, [r5, #12]
 8013ca4:	065b      	lsls	r3, r3, #25
 8013ca6:	f53f af2d 	bmi.w	8013b04 <_svfiprintf_r+0x28>
 8013caa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013cac:	e72c      	b.n	8013b08 <_svfiprintf_r+0x2c>
 8013cae:	ab03      	add	r3, sp, #12
 8013cb0:	9300      	str	r3, [sp, #0]
 8013cb2:	462a      	mov	r2, r5
 8013cb4:	4b05      	ldr	r3, [pc, #20]	@ (8013ccc <_svfiprintf_r+0x1f0>)
 8013cb6:	a904      	add	r1, sp, #16
 8013cb8:	4638      	mov	r0, r7
 8013cba:	f7fe fa39 	bl	8012130 <_printf_i>
 8013cbe:	e7ed      	b.n	8013c9c <_svfiprintf_r+0x1c0>
 8013cc0:	08016ae8 	.word	0x08016ae8
 8013cc4:	08016af2 	.word	0x08016af2
 8013cc8:	08011c21 	.word	0x08011c21
 8013ccc:	08013a25 	.word	0x08013a25
 8013cd0:	08016aee 	.word	0x08016aee

08013cd4 <__sflush_r>:
 8013cd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cdc:	0716      	lsls	r6, r2, #28
 8013cde:	4605      	mov	r5, r0
 8013ce0:	460c      	mov	r4, r1
 8013ce2:	d454      	bmi.n	8013d8e <__sflush_r+0xba>
 8013ce4:	684b      	ldr	r3, [r1, #4]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	dc02      	bgt.n	8013cf0 <__sflush_r+0x1c>
 8013cea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	dd48      	ble.n	8013d82 <__sflush_r+0xae>
 8013cf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013cf2:	2e00      	cmp	r6, #0
 8013cf4:	d045      	beq.n	8013d82 <__sflush_r+0xae>
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013cfc:	682f      	ldr	r7, [r5, #0]
 8013cfe:	6a21      	ldr	r1, [r4, #32]
 8013d00:	602b      	str	r3, [r5, #0]
 8013d02:	d030      	beq.n	8013d66 <__sflush_r+0x92>
 8013d04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013d06:	89a3      	ldrh	r3, [r4, #12]
 8013d08:	0759      	lsls	r1, r3, #29
 8013d0a:	d505      	bpl.n	8013d18 <__sflush_r+0x44>
 8013d0c:	6863      	ldr	r3, [r4, #4]
 8013d0e:	1ad2      	subs	r2, r2, r3
 8013d10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013d12:	b10b      	cbz	r3, 8013d18 <__sflush_r+0x44>
 8013d14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013d16:	1ad2      	subs	r2, r2, r3
 8013d18:	2300      	movs	r3, #0
 8013d1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013d1c:	6a21      	ldr	r1, [r4, #32]
 8013d1e:	4628      	mov	r0, r5
 8013d20:	47b0      	blx	r6
 8013d22:	1c43      	adds	r3, r0, #1
 8013d24:	89a3      	ldrh	r3, [r4, #12]
 8013d26:	d106      	bne.n	8013d36 <__sflush_r+0x62>
 8013d28:	6829      	ldr	r1, [r5, #0]
 8013d2a:	291d      	cmp	r1, #29
 8013d2c:	d82b      	bhi.n	8013d86 <__sflush_r+0xb2>
 8013d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8013dd8 <__sflush_r+0x104>)
 8013d30:	410a      	asrs	r2, r1
 8013d32:	07d6      	lsls	r6, r2, #31
 8013d34:	d427      	bmi.n	8013d86 <__sflush_r+0xb2>
 8013d36:	2200      	movs	r2, #0
 8013d38:	6062      	str	r2, [r4, #4]
 8013d3a:	04d9      	lsls	r1, r3, #19
 8013d3c:	6922      	ldr	r2, [r4, #16]
 8013d3e:	6022      	str	r2, [r4, #0]
 8013d40:	d504      	bpl.n	8013d4c <__sflush_r+0x78>
 8013d42:	1c42      	adds	r2, r0, #1
 8013d44:	d101      	bne.n	8013d4a <__sflush_r+0x76>
 8013d46:	682b      	ldr	r3, [r5, #0]
 8013d48:	b903      	cbnz	r3, 8013d4c <__sflush_r+0x78>
 8013d4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8013d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013d4e:	602f      	str	r7, [r5, #0]
 8013d50:	b1b9      	cbz	r1, 8013d82 <__sflush_r+0xae>
 8013d52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013d56:	4299      	cmp	r1, r3
 8013d58:	d002      	beq.n	8013d60 <__sflush_r+0x8c>
 8013d5a:	4628      	mov	r0, r5
 8013d5c:	f7ff fa96 	bl	801328c <_free_r>
 8013d60:	2300      	movs	r3, #0
 8013d62:	6363      	str	r3, [r4, #52]	@ 0x34
 8013d64:	e00d      	b.n	8013d82 <__sflush_r+0xae>
 8013d66:	2301      	movs	r3, #1
 8013d68:	4628      	mov	r0, r5
 8013d6a:	47b0      	blx	r6
 8013d6c:	4602      	mov	r2, r0
 8013d6e:	1c50      	adds	r0, r2, #1
 8013d70:	d1c9      	bne.n	8013d06 <__sflush_r+0x32>
 8013d72:	682b      	ldr	r3, [r5, #0]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d0c6      	beq.n	8013d06 <__sflush_r+0x32>
 8013d78:	2b1d      	cmp	r3, #29
 8013d7a:	d001      	beq.n	8013d80 <__sflush_r+0xac>
 8013d7c:	2b16      	cmp	r3, #22
 8013d7e:	d11e      	bne.n	8013dbe <__sflush_r+0xea>
 8013d80:	602f      	str	r7, [r5, #0]
 8013d82:	2000      	movs	r0, #0
 8013d84:	e022      	b.n	8013dcc <__sflush_r+0xf8>
 8013d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d8a:	b21b      	sxth	r3, r3
 8013d8c:	e01b      	b.n	8013dc6 <__sflush_r+0xf2>
 8013d8e:	690f      	ldr	r7, [r1, #16]
 8013d90:	2f00      	cmp	r7, #0
 8013d92:	d0f6      	beq.n	8013d82 <__sflush_r+0xae>
 8013d94:	0793      	lsls	r3, r2, #30
 8013d96:	680e      	ldr	r6, [r1, #0]
 8013d98:	bf08      	it	eq
 8013d9a:	694b      	ldreq	r3, [r1, #20]
 8013d9c:	600f      	str	r7, [r1, #0]
 8013d9e:	bf18      	it	ne
 8013da0:	2300      	movne	r3, #0
 8013da2:	eba6 0807 	sub.w	r8, r6, r7
 8013da6:	608b      	str	r3, [r1, #8]
 8013da8:	f1b8 0f00 	cmp.w	r8, #0
 8013dac:	dde9      	ble.n	8013d82 <__sflush_r+0xae>
 8013dae:	6a21      	ldr	r1, [r4, #32]
 8013db0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013db2:	4643      	mov	r3, r8
 8013db4:	463a      	mov	r2, r7
 8013db6:	4628      	mov	r0, r5
 8013db8:	47b0      	blx	r6
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	dc08      	bgt.n	8013dd0 <__sflush_r+0xfc>
 8013dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013dc6:	81a3      	strh	r3, [r4, #12]
 8013dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dd0:	4407      	add	r7, r0
 8013dd2:	eba8 0800 	sub.w	r8, r8, r0
 8013dd6:	e7e7      	b.n	8013da8 <__sflush_r+0xd4>
 8013dd8:	dfbffffe 	.word	0xdfbffffe

08013ddc <_fflush_r>:
 8013ddc:	b538      	push	{r3, r4, r5, lr}
 8013dde:	690b      	ldr	r3, [r1, #16]
 8013de0:	4605      	mov	r5, r0
 8013de2:	460c      	mov	r4, r1
 8013de4:	b913      	cbnz	r3, 8013dec <_fflush_r+0x10>
 8013de6:	2500      	movs	r5, #0
 8013de8:	4628      	mov	r0, r5
 8013dea:	bd38      	pop	{r3, r4, r5, pc}
 8013dec:	b118      	cbz	r0, 8013df6 <_fflush_r+0x1a>
 8013dee:	6a03      	ldr	r3, [r0, #32]
 8013df0:	b90b      	cbnz	r3, 8013df6 <_fflush_r+0x1a>
 8013df2:	f7fe fb49 	bl	8012488 <__sinit>
 8013df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d0f3      	beq.n	8013de6 <_fflush_r+0xa>
 8013dfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013e00:	07d0      	lsls	r0, r2, #31
 8013e02:	d404      	bmi.n	8013e0e <_fflush_r+0x32>
 8013e04:	0599      	lsls	r1, r3, #22
 8013e06:	d402      	bmi.n	8013e0e <_fflush_r+0x32>
 8013e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e0a:	f7fe fc5e 	bl	80126ca <__retarget_lock_acquire_recursive>
 8013e0e:	4628      	mov	r0, r5
 8013e10:	4621      	mov	r1, r4
 8013e12:	f7ff ff5f 	bl	8013cd4 <__sflush_r>
 8013e16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e18:	07da      	lsls	r2, r3, #31
 8013e1a:	4605      	mov	r5, r0
 8013e1c:	d4e4      	bmi.n	8013de8 <_fflush_r+0xc>
 8013e1e:	89a3      	ldrh	r3, [r4, #12]
 8013e20:	059b      	lsls	r3, r3, #22
 8013e22:	d4e1      	bmi.n	8013de8 <_fflush_r+0xc>
 8013e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e26:	f7fe fc51 	bl	80126cc <__retarget_lock_release_recursive>
 8013e2a:	e7dd      	b.n	8013de8 <_fflush_r+0xc>

08013e2c <memmove>:
 8013e2c:	4288      	cmp	r0, r1
 8013e2e:	b510      	push	{r4, lr}
 8013e30:	eb01 0402 	add.w	r4, r1, r2
 8013e34:	d902      	bls.n	8013e3c <memmove+0x10>
 8013e36:	4284      	cmp	r4, r0
 8013e38:	4623      	mov	r3, r4
 8013e3a:	d807      	bhi.n	8013e4c <memmove+0x20>
 8013e3c:	1e43      	subs	r3, r0, #1
 8013e3e:	42a1      	cmp	r1, r4
 8013e40:	d008      	beq.n	8013e54 <memmove+0x28>
 8013e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e4a:	e7f8      	b.n	8013e3e <memmove+0x12>
 8013e4c:	4402      	add	r2, r0
 8013e4e:	4601      	mov	r1, r0
 8013e50:	428a      	cmp	r2, r1
 8013e52:	d100      	bne.n	8013e56 <memmove+0x2a>
 8013e54:	bd10      	pop	{r4, pc}
 8013e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e5e:	e7f7      	b.n	8013e50 <memmove+0x24>

08013e60 <memcpy>:
 8013e60:	440a      	add	r2, r1
 8013e62:	4291      	cmp	r1, r2
 8013e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8013e68:	d100      	bne.n	8013e6c <memcpy+0xc>
 8013e6a:	4770      	bx	lr
 8013e6c:	b510      	push	{r4, lr}
 8013e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e76:	4291      	cmp	r1, r2
 8013e78:	d1f9      	bne.n	8013e6e <memcpy+0xe>
 8013e7a:	bd10      	pop	{r4, pc}

08013e7c <__assert_func>:
 8013e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013e7e:	4614      	mov	r4, r2
 8013e80:	461a      	mov	r2, r3
 8013e82:	4b09      	ldr	r3, [pc, #36]	@ (8013ea8 <__assert_func+0x2c>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	4605      	mov	r5, r0
 8013e88:	68d8      	ldr	r0, [r3, #12]
 8013e8a:	b954      	cbnz	r4, 8013ea2 <__assert_func+0x26>
 8013e8c:	4b07      	ldr	r3, [pc, #28]	@ (8013eac <__assert_func+0x30>)
 8013e8e:	461c      	mov	r4, r3
 8013e90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013e94:	9100      	str	r1, [sp, #0]
 8013e96:	462b      	mov	r3, r5
 8013e98:	4905      	ldr	r1, [pc, #20]	@ (8013eb0 <__assert_func+0x34>)
 8013e9a:	f000 f86f 	bl	8013f7c <fiprintf>
 8013e9e:	f000 f87f 	bl	8013fa0 <abort>
 8013ea2:	4b04      	ldr	r3, [pc, #16]	@ (8013eb4 <__assert_func+0x38>)
 8013ea4:	e7f4      	b.n	8013e90 <__assert_func+0x14>
 8013ea6:	bf00      	nop
 8013ea8:	24000110 	.word	0x24000110
 8013eac:	08016b3e 	.word	0x08016b3e
 8013eb0:	08016b10 	.word	0x08016b10
 8013eb4:	08016b03 	.word	0x08016b03

08013eb8 <_calloc_r>:
 8013eb8:	b570      	push	{r4, r5, r6, lr}
 8013eba:	fba1 5402 	umull	r5, r4, r1, r2
 8013ebe:	b93c      	cbnz	r4, 8013ed0 <_calloc_r+0x18>
 8013ec0:	4629      	mov	r1, r5
 8013ec2:	f7fd fd91 	bl	80119e8 <_malloc_r>
 8013ec6:	4606      	mov	r6, r0
 8013ec8:	b928      	cbnz	r0, 8013ed6 <_calloc_r+0x1e>
 8013eca:	2600      	movs	r6, #0
 8013ecc:	4630      	mov	r0, r6
 8013ece:	bd70      	pop	{r4, r5, r6, pc}
 8013ed0:	220c      	movs	r2, #12
 8013ed2:	6002      	str	r2, [r0, #0]
 8013ed4:	e7f9      	b.n	8013eca <_calloc_r+0x12>
 8013ed6:	462a      	mov	r2, r5
 8013ed8:	4621      	mov	r1, r4
 8013eda:	f7fe fb6e 	bl	80125ba <memset>
 8013ede:	e7f5      	b.n	8013ecc <_calloc_r+0x14>

08013ee0 <__ascii_mbtowc>:
 8013ee0:	b082      	sub	sp, #8
 8013ee2:	b901      	cbnz	r1, 8013ee6 <__ascii_mbtowc+0x6>
 8013ee4:	a901      	add	r1, sp, #4
 8013ee6:	b142      	cbz	r2, 8013efa <__ascii_mbtowc+0x1a>
 8013ee8:	b14b      	cbz	r3, 8013efe <__ascii_mbtowc+0x1e>
 8013eea:	7813      	ldrb	r3, [r2, #0]
 8013eec:	600b      	str	r3, [r1, #0]
 8013eee:	7812      	ldrb	r2, [r2, #0]
 8013ef0:	1e10      	subs	r0, r2, #0
 8013ef2:	bf18      	it	ne
 8013ef4:	2001      	movne	r0, #1
 8013ef6:	b002      	add	sp, #8
 8013ef8:	4770      	bx	lr
 8013efa:	4610      	mov	r0, r2
 8013efc:	e7fb      	b.n	8013ef6 <__ascii_mbtowc+0x16>
 8013efe:	f06f 0001 	mvn.w	r0, #1
 8013f02:	e7f8      	b.n	8013ef6 <__ascii_mbtowc+0x16>

08013f04 <_realloc_r>:
 8013f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f08:	4680      	mov	r8, r0
 8013f0a:	4615      	mov	r5, r2
 8013f0c:	460c      	mov	r4, r1
 8013f0e:	b921      	cbnz	r1, 8013f1a <_realloc_r+0x16>
 8013f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f14:	4611      	mov	r1, r2
 8013f16:	f7fd bd67 	b.w	80119e8 <_malloc_r>
 8013f1a:	b92a      	cbnz	r2, 8013f28 <_realloc_r+0x24>
 8013f1c:	f7ff f9b6 	bl	801328c <_free_r>
 8013f20:	2400      	movs	r4, #0
 8013f22:	4620      	mov	r0, r4
 8013f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f28:	f000 f841 	bl	8013fae <_malloc_usable_size_r>
 8013f2c:	4285      	cmp	r5, r0
 8013f2e:	4606      	mov	r6, r0
 8013f30:	d802      	bhi.n	8013f38 <_realloc_r+0x34>
 8013f32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013f36:	d8f4      	bhi.n	8013f22 <_realloc_r+0x1e>
 8013f38:	4629      	mov	r1, r5
 8013f3a:	4640      	mov	r0, r8
 8013f3c:	f7fd fd54 	bl	80119e8 <_malloc_r>
 8013f40:	4607      	mov	r7, r0
 8013f42:	2800      	cmp	r0, #0
 8013f44:	d0ec      	beq.n	8013f20 <_realloc_r+0x1c>
 8013f46:	42b5      	cmp	r5, r6
 8013f48:	462a      	mov	r2, r5
 8013f4a:	4621      	mov	r1, r4
 8013f4c:	bf28      	it	cs
 8013f4e:	4632      	movcs	r2, r6
 8013f50:	f7ff ff86 	bl	8013e60 <memcpy>
 8013f54:	4621      	mov	r1, r4
 8013f56:	4640      	mov	r0, r8
 8013f58:	f7ff f998 	bl	801328c <_free_r>
 8013f5c:	463c      	mov	r4, r7
 8013f5e:	e7e0      	b.n	8013f22 <_realloc_r+0x1e>

08013f60 <__ascii_wctomb>:
 8013f60:	4603      	mov	r3, r0
 8013f62:	4608      	mov	r0, r1
 8013f64:	b141      	cbz	r1, 8013f78 <__ascii_wctomb+0x18>
 8013f66:	2aff      	cmp	r2, #255	@ 0xff
 8013f68:	d904      	bls.n	8013f74 <__ascii_wctomb+0x14>
 8013f6a:	228a      	movs	r2, #138	@ 0x8a
 8013f6c:	601a      	str	r2, [r3, #0]
 8013f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f72:	4770      	bx	lr
 8013f74:	700a      	strb	r2, [r1, #0]
 8013f76:	2001      	movs	r0, #1
 8013f78:	4770      	bx	lr
	...

08013f7c <fiprintf>:
 8013f7c:	b40e      	push	{r1, r2, r3}
 8013f7e:	b503      	push	{r0, r1, lr}
 8013f80:	4601      	mov	r1, r0
 8013f82:	ab03      	add	r3, sp, #12
 8013f84:	4805      	ldr	r0, [pc, #20]	@ (8013f9c <fiprintf+0x20>)
 8013f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f8a:	6800      	ldr	r0, [r0, #0]
 8013f8c:	9301      	str	r3, [sp, #4]
 8013f8e:	f000 f83f 	bl	8014010 <_vfiprintf_r>
 8013f92:	b002      	add	sp, #8
 8013f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f98:	b003      	add	sp, #12
 8013f9a:	4770      	bx	lr
 8013f9c:	24000110 	.word	0x24000110

08013fa0 <abort>:
 8013fa0:	b508      	push	{r3, lr}
 8013fa2:	2006      	movs	r0, #6
 8013fa4:	f000 fa08 	bl	80143b8 <raise>
 8013fa8:	2001      	movs	r0, #1
 8013faa:	f000 fc2d 	bl	8014808 <_exit>

08013fae <_malloc_usable_size_r>:
 8013fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fb2:	1f18      	subs	r0, r3, #4
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	bfbc      	itt	lt
 8013fb8:	580b      	ldrlt	r3, [r1, r0]
 8013fba:	18c0      	addlt	r0, r0, r3
 8013fbc:	4770      	bx	lr

08013fbe <__sfputc_r>:
 8013fbe:	6893      	ldr	r3, [r2, #8]
 8013fc0:	3b01      	subs	r3, #1
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	b410      	push	{r4}
 8013fc6:	6093      	str	r3, [r2, #8]
 8013fc8:	da08      	bge.n	8013fdc <__sfputc_r+0x1e>
 8013fca:	6994      	ldr	r4, [r2, #24]
 8013fcc:	42a3      	cmp	r3, r4
 8013fce:	db01      	blt.n	8013fd4 <__sfputc_r+0x16>
 8013fd0:	290a      	cmp	r1, #10
 8013fd2:	d103      	bne.n	8013fdc <__sfputc_r+0x1e>
 8013fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fd8:	f000 b932 	b.w	8014240 <__swbuf_r>
 8013fdc:	6813      	ldr	r3, [r2, #0]
 8013fde:	1c58      	adds	r0, r3, #1
 8013fe0:	6010      	str	r0, [r2, #0]
 8013fe2:	7019      	strb	r1, [r3, #0]
 8013fe4:	4608      	mov	r0, r1
 8013fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fea:	4770      	bx	lr

08013fec <__sfputs_r>:
 8013fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fee:	4606      	mov	r6, r0
 8013ff0:	460f      	mov	r7, r1
 8013ff2:	4614      	mov	r4, r2
 8013ff4:	18d5      	adds	r5, r2, r3
 8013ff6:	42ac      	cmp	r4, r5
 8013ff8:	d101      	bne.n	8013ffe <__sfputs_r+0x12>
 8013ffa:	2000      	movs	r0, #0
 8013ffc:	e007      	b.n	801400e <__sfputs_r+0x22>
 8013ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014002:	463a      	mov	r2, r7
 8014004:	4630      	mov	r0, r6
 8014006:	f7ff ffda 	bl	8013fbe <__sfputc_r>
 801400a:	1c43      	adds	r3, r0, #1
 801400c:	d1f3      	bne.n	8013ff6 <__sfputs_r+0xa>
 801400e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014010 <_vfiprintf_r>:
 8014010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014014:	460d      	mov	r5, r1
 8014016:	b09d      	sub	sp, #116	@ 0x74
 8014018:	4614      	mov	r4, r2
 801401a:	4698      	mov	r8, r3
 801401c:	4606      	mov	r6, r0
 801401e:	b118      	cbz	r0, 8014028 <_vfiprintf_r+0x18>
 8014020:	6a03      	ldr	r3, [r0, #32]
 8014022:	b90b      	cbnz	r3, 8014028 <_vfiprintf_r+0x18>
 8014024:	f7fe fa30 	bl	8012488 <__sinit>
 8014028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801402a:	07d9      	lsls	r1, r3, #31
 801402c:	d405      	bmi.n	801403a <_vfiprintf_r+0x2a>
 801402e:	89ab      	ldrh	r3, [r5, #12]
 8014030:	059a      	lsls	r2, r3, #22
 8014032:	d402      	bmi.n	801403a <_vfiprintf_r+0x2a>
 8014034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014036:	f7fe fb48 	bl	80126ca <__retarget_lock_acquire_recursive>
 801403a:	89ab      	ldrh	r3, [r5, #12]
 801403c:	071b      	lsls	r3, r3, #28
 801403e:	d501      	bpl.n	8014044 <_vfiprintf_r+0x34>
 8014040:	692b      	ldr	r3, [r5, #16]
 8014042:	b99b      	cbnz	r3, 801406c <_vfiprintf_r+0x5c>
 8014044:	4629      	mov	r1, r5
 8014046:	4630      	mov	r0, r6
 8014048:	f000 f938 	bl	80142bc <__swsetup_r>
 801404c:	b170      	cbz	r0, 801406c <_vfiprintf_r+0x5c>
 801404e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014050:	07dc      	lsls	r4, r3, #31
 8014052:	d504      	bpl.n	801405e <_vfiprintf_r+0x4e>
 8014054:	f04f 30ff 	mov.w	r0, #4294967295
 8014058:	b01d      	add	sp, #116	@ 0x74
 801405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801405e:	89ab      	ldrh	r3, [r5, #12]
 8014060:	0598      	lsls	r0, r3, #22
 8014062:	d4f7      	bmi.n	8014054 <_vfiprintf_r+0x44>
 8014064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014066:	f7fe fb31 	bl	80126cc <__retarget_lock_release_recursive>
 801406a:	e7f3      	b.n	8014054 <_vfiprintf_r+0x44>
 801406c:	2300      	movs	r3, #0
 801406e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014070:	2320      	movs	r3, #32
 8014072:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014076:	f8cd 800c 	str.w	r8, [sp, #12]
 801407a:	2330      	movs	r3, #48	@ 0x30
 801407c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801422c <_vfiprintf_r+0x21c>
 8014080:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014084:	f04f 0901 	mov.w	r9, #1
 8014088:	4623      	mov	r3, r4
 801408a:	469a      	mov	sl, r3
 801408c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014090:	b10a      	cbz	r2, 8014096 <_vfiprintf_r+0x86>
 8014092:	2a25      	cmp	r2, #37	@ 0x25
 8014094:	d1f9      	bne.n	801408a <_vfiprintf_r+0x7a>
 8014096:	ebba 0b04 	subs.w	fp, sl, r4
 801409a:	d00b      	beq.n	80140b4 <_vfiprintf_r+0xa4>
 801409c:	465b      	mov	r3, fp
 801409e:	4622      	mov	r2, r4
 80140a0:	4629      	mov	r1, r5
 80140a2:	4630      	mov	r0, r6
 80140a4:	f7ff ffa2 	bl	8013fec <__sfputs_r>
 80140a8:	3001      	adds	r0, #1
 80140aa:	f000 80a7 	beq.w	80141fc <_vfiprintf_r+0x1ec>
 80140ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80140b0:	445a      	add	r2, fp
 80140b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80140b4:	f89a 3000 	ldrb.w	r3, [sl]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	f000 809f 	beq.w	80141fc <_vfiprintf_r+0x1ec>
 80140be:	2300      	movs	r3, #0
 80140c0:	f04f 32ff 	mov.w	r2, #4294967295
 80140c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140c8:	f10a 0a01 	add.w	sl, sl, #1
 80140cc:	9304      	str	r3, [sp, #16]
 80140ce:	9307      	str	r3, [sp, #28]
 80140d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80140d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80140d6:	4654      	mov	r4, sl
 80140d8:	2205      	movs	r2, #5
 80140da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140de:	4853      	ldr	r0, [pc, #332]	@ (801422c <_vfiprintf_r+0x21c>)
 80140e0:	f7ec f8fe 	bl	80002e0 <memchr>
 80140e4:	9a04      	ldr	r2, [sp, #16]
 80140e6:	b9d8      	cbnz	r0, 8014120 <_vfiprintf_r+0x110>
 80140e8:	06d1      	lsls	r1, r2, #27
 80140ea:	bf44      	itt	mi
 80140ec:	2320      	movmi	r3, #32
 80140ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80140f2:	0713      	lsls	r3, r2, #28
 80140f4:	bf44      	itt	mi
 80140f6:	232b      	movmi	r3, #43	@ 0x2b
 80140f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80140fc:	f89a 3000 	ldrb.w	r3, [sl]
 8014100:	2b2a      	cmp	r3, #42	@ 0x2a
 8014102:	d015      	beq.n	8014130 <_vfiprintf_r+0x120>
 8014104:	9a07      	ldr	r2, [sp, #28]
 8014106:	4654      	mov	r4, sl
 8014108:	2000      	movs	r0, #0
 801410a:	f04f 0c0a 	mov.w	ip, #10
 801410e:	4621      	mov	r1, r4
 8014110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014114:	3b30      	subs	r3, #48	@ 0x30
 8014116:	2b09      	cmp	r3, #9
 8014118:	d94b      	bls.n	80141b2 <_vfiprintf_r+0x1a2>
 801411a:	b1b0      	cbz	r0, 801414a <_vfiprintf_r+0x13a>
 801411c:	9207      	str	r2, [sp, #28]
 801411e:	e014      	b.n	801414a <_vfiprintf_r+0x13a>
 8014120:	eba0 0308 	sub.w	r3, r0, r8
 8014124:	fa09 f303 	lsl.w	r3, r9, r3
 8014128:	4313      	orrs	r3, r2
 801412a:	9304      	str	r3, [sp, #16]
 801412c:	46a2      	mov	sl, r4
 801412e:	e7d2      	b.n	80140d6 <_vfiprintf_r+0xc6>
 8014130:	9b03      	ldr	r3, [sp, #12]
 8014132:	1d19      	adds	r1, r3, #4
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	9103      	str	r1, [sp, #12]
 8014138:	2b00      	cmp	r3, #0
 801413a:	bfbb      	ittet	lt
 801413c:	425b      	neglt	r3, r3
 801413e:	f042 0202 	orrlt.w	r2, r2, #2
 8014142:	9307      	strge	r3, [sp, #28]
 8014144:	9307      	strlt	r3, [sp, #28]
 8014146:	bfb8      	it	lt
 8014148:	9204      	strlt	r2, [sp, #16]
 801414a:	7823      	ldrb	r3, [r4, #0]
 801414c:	2b2e      	cmp	r3, #46	@ 0x2e
 801414e:	d10a      	bne.n	8014166 <_vfiprintf_r+0x156>
 8014150:	7863      	ldrb	r3, [r4, #1]
 8014152:	2b2a      	cmp	r3, #42	@ 0x2a
 8014154:	d132      	bne.n	80141bc <_vfiprintf_r+0x1ac>
 8014156:	9b03      	ldr	r3, [sp, #12]
 8014158:	1d1a      	adds	r2, r3, #4
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	9203      	str	r2, [sp, #12]
 801415e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014162:	3402      	adds	r4, #2
 8014164:	9305      	str	r3, [sp, #20]
 8014166:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801423c <_vfiprintf_r+0x22c>
 801416a:	7821      	ldrb	r1, [r4, #0]
 801416c:	2203      	movs	r2, #3
 801416e:	4650      	mov	r0, sl
 8014170:	f7ec f8b6 	bl	80002e0 <memchr>
 8014174:	b138      	cbz	r0, 8014186 <_vfiprintf_r+0x176>
 8014176:	9b04      	ldr	r3, [sp, #16]
 8014178:	eba0 000a 	sub.w	r0, r0, sl
 801417c:	2240      	movs	r2, #64	@ 0x40
 801417e:	4082      	lsls	r2, r0
 8014180:	4313      	orrs	r3, r2
 8014182:	3401      	adds	r4, #1
 8014184:	9304      	str	r3, [sp, #16]
 8014186:	f814 1b01 	ldrb.w	r1, [r4], #1
 801418a:	4829      	ldr	r0, [pc, #164]	@ (8014230 <_vfiprintf_r+0x220>)
 801418c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014190:	2206      	movs	r2, #6
 8014192:	f7ec f8a5 	bl	80002e0 <memchr>
 8014196:	2800      	cmp	r0, #0
 8014198:	d03f      	beq.n	801421a <_vfiprintf_r+0x20a>
 801419a:	4b26      	ldr	r3, [pc, #152]	@ (8014234 <_vfiprintf_r+0x224>)
 801419c:	bb1b      	cbnz	r3, 80141e6 <_vfiprintf_r+0x1d6>
 801419e:	9b03      	ldr	r3, [sp, #12]
 80141a0:	3307      	adds	r3, #7
 80141a2:	f023 0307 	bic.w	r3, r3, #7
 80141a6:	3308      	adds	r3, #8
 80141a8:	9303      	str	r3, [sp, #12]
 80141aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141ac:	443b      	add	r3, r7
 80141ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80141b0:	e76a      	b.n	8014088 <_vfiprintf_r+0x78>
 80141b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80141b6:	460c      	mov	r4, r1
 80141b8:	2001      	movs	r0, #1
 80141ba:	e7a8      	b.n	801410e <_vfiprintf_r+0xfe>
 80141bc:	2300      	movs	r3, #0
 80141be:	3401      	adds	r4, #1
 80141c0:	9305      	str	r3, [sp, #20]
 80141c2:	4619      	mov	r1, r3
 80141c4:	f04f 0c0a 	mov.w	ip, #10
 80141c8:	4620      	mov	r0, r4
 80141ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141ce:	3a30      	subs	r2, #48	@ 0x30
 80141d0:	2a09      	cmp	r2, #9
 80141d2:	d903      	bls.n	80141dc <_vfiprintf_r+0x1cc>
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d0c6      	beq.n	8014166 <_vfiprintf_r+0x156>
 80141d8:	9105      	str	r1, [sp, #20]
 80141da:	e7c4      	b.n	8014166 <_vfiprintf_r+0x156>
 80141dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80141e0:	4604      	mov	r4, r0
 80141e2:	2301      	movs	r3, #1
 80141e4:	e7f0      	b.n	80141c8 <_vfiprintf_r+0x1b8>
 80141e6:	ab03      	add	r3, sp, #12
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	462a      	mov	r2, r5
 80141ec:	4b12      	ldr	r3, [pc, #72]	@ (8014238 <_vfiprintf_r+0x228>)
 80141ee:	a904      	add	r1, sp, #16
 80141f0:	4630      	mov	r0, r6
 80141f2:	f7fd fd15 	bl	8011c20 <_printf_float>
 80141f6:	4607      	mov	r7, r0
 80141f8:	1c78      	adds	r0, r7, #1
 80141fa:	d1d6      	bne.n	80141aa <_vfiprintf_r+0x19a>
 80141fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141fe:	07d9      	lsls	r1, r3, #31
 8014200:	d405      	bmi.n	801420e <_vfiprintf_r+0x1fe>
 8014202:	89ab      	ldrh	r3, [r5, #12]
 8014204:	059a      	lsls	r2, r3, #22
 8014206:	d402      	bmi.n	801420e <_vfiprintf_r+0x1fe>
 8014208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801420a:	f7fe fa5f 	bl	80126cc <__retarget_lock_release_recursive>
 801420e:	89ab      	ldrh	r3, [r5, #12]
 8014210:	065b      	lsls	r3, r3, #25
 8014212:	f53f af1f 	bmi.w	8014054 <_vfiprintf_r+0x44>
 8014216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014218:	e71e      	b.n	8014058 <_vfiprintf_r+0x48>
 801421a:	ab03      	add	r3, sp, #12
 801421c:	9300      	str	r3, [sp, #0]
 801421e:	462a      	mov	r2, r5
 8014220:	4b05      	ldr	r3, [pc, #20]	@ (8014238 <_vfiprintf_r+0x228>)
 8014222:	a904      	add	r1, sp, #16
 8014224:	4630      	mov	r0, r6
 8014226:	f7fd ff83 	bl	8012130 <_printf_i>
 801422a:	e7e4      	b.n	80141f6 <_vfiprintf_r+0x1e6>
 801422c:	08016ae8 	.word	0x08016ae8
 8014230:	08016af2 	.word	0x08016af2
 8014234:	08011c21 	.word	0x08011c21
 8014238:	08013fed 	.word	0x08013fed
 801423c:	08016aee 	.word	0x08016aee

08014240 <__swbuf_r>:
 8014240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014242:	460e      	mov	r6, r1
 8014244:	4614      	mov	r4, r2
 8014246:	4605      	mov	r5, r0
 8014248:	b118      	cbz	r0, 8014252 <__swbuf_r+0x12>
 801424a:	6a03      	ldr	r3, [r0, #32]
 801424c:	b90b      	cbnz	r3, 8014252 <__swbuf_r+0x12>
 801424e:	f7fe f91b 	bl	8012488 <__sinit>
 8014252:	69a3      	ldr	r3, [r4, #24]
 8014254:	60a3      	str	r3, [r4, #8]
 8014256:	89a3      	ldrh	r3, [r4, #12]
 8014258:	071a      	lsls	r2, r3, #28
 801425a:	d501      	bpl.n	8014260 <__swbuf_r+0x20>
 801425c:	6923      	ldr	r3, [r4, #16]
 801425e:	b943      	cbnz	r3, 8014272 <__swbuf_r+0x32>
 8014260:	4621      	mov	r1, r4
 8014262:	4628      	mov	r0, r5
 8014264:	f000 f82a 	bl	80142bc <__swsetup_r>
 8014268:	b118      	cbz	r0, 8014272 <__swbuf_r+0x32>
 801426a:	f04f 37ff 	mov.w	r7, #4294967295
 801426e:	4638      	mov	r0, r7
 8014270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014272:	6823      	ldr	r3, [r4, #0]
 8014274:	6922      	ldr	r2, [r4, #16]
 8014276:	1a98      	subs	r0, r3, r2
 8014278:	6963      	ldr	r3, [r4, #20]
 801427a:	b2f6      	uxtb	r6, r6
 801427c:	4283      	cmp	r3, r0
 801427e:	4637      	mov	r7, r6
 8014280:	dc05      	bgt.n	801428e <__swbuf_r+0x4e>
 8014282:	4621      	mov	r1, r4
 8014284:	4628      	mov	r0, r5
 8014286:	f7ff fda9 	bl	8013ddc <_fflush_r>
 801428a:	2800      	cmp	r0, #0
 801428c:	d1ed      	bne.n	801426a <__swbuf_r+0x2a>
 801428e:	68a3      	ldr	r3, [r4, #8]
 8014290:	3b01      	subs	r3, #1
 8014292:	60a3      	str	r3, [r4, #8]
 8014294:	6823      	ldr	r3, [r4, #0]
 8014296:	1c5a      	adds	r2, r3, #1
 8014298:	6022      	str	r2, [r4, #0]
 801429a:	701e      	strb	r6, [r3, #0]
 801429c:	6962      	ldr	r2, [r4, #20]
 801429e:	1c43      	adds	r3, r0, #1
 80142a0:	429a      	cmp	r2, r3
 80142a2:	d004      	beq.n	80142ae <__swbuf_r+0x6e>
 80142a4:	89a3      	ldrh	r3, [r4, #12]
 80142a6:	07db      	lsls	r3, r3, #31
 80142a8:	d5e1      	bpl.n	801426e <__swbuf_r+0x2e>
 80142aa:	2e0a      	cmp	r6, #10
 80142ac:	d1df      	bne.n	801426e <__swbuf_r+0x2e>
 80142ae:	4621      	mov	r1, r4
 80142b0:	4628      	mov	r0, r5
 80142b2:	f7ff fd93 	bl	8013ddc <_fflush_r>
 80142b6:	2800      	cmp	r0, #0
 80142b8:	d0d9      	beq.n	801426e <__swbuf_r+0x2e>
 80142ba:	e7d6      	b.n	801426a <__swbuf_r+0x2a>

080142bc <__swsetup_r>:
 80142bc:	b538      	push	{r3, r4, r5, lr}
 80142be:	4b29      	ldr	r3, [pc, #164]	@ (8014364 <__swsetup_r+0xa8>)
 80142c0:	4605      	mov	r5, r0
 80142c2:	6818      	ldr	r0, [r3, #0]
 80142c4:	460c      	mov	r4, r1
 80142c6:	b118      	cbz	r0, 80142d0 <__swsetup_r+0x14>
 80142c8:	6a03      	ldr	r3, [r0, #32]
 80142ca:	b90b      	cbnz	r3, 80142d0 <__swsetup_r+0x14>
 80142cc:	f7fe f8dc 	bl	8012488 <__sinit>
 80142d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142d4:	0719      	lsls	r1, r3, #28
 80142d6:	d422      	bmi.n	801431e <__swsetup_r+0x62>
 80142d8:	06da      	lsls	r2, r3, #27
 80142da:	d407      	bmi.n	80142ec <__swsetup_r+0x30>
 80142dc:	2209      	movs	r2, #9
 80142de:	602a      	str	r2, [r5, #0]
 80142e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142e4:	81a3      	strh	r3, [r4, #12]
 80142e6:	f04f 30ff 	mov.w	r0, #4294967295
 80142ea:	e033      	b.n	8014354 <__swsetup_r+0x98>
 80142ec:	0758      	lsls	r0, r3, #29
 80142ee:	d512      	bpl.n	8014316 <__swsetup_r+0x5a>
 80142f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80142f2:	b141      	cbz	r1, 8014306 <__swsetup_r+0x4a>
 80142f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80142f8:	4299      	cmp	r1, r3
 80142fa:	d002      	beq.n	8014302 <__swsetup_r+0x46>
 80142fc:	4628      	mov	r0, r5
 80142fe:	f7fe ffc5 	bl	801328c <_free_r>
 8014302:	2300      	movs	r3, #0
 8014304:	6363      	str	r3, [r4, #52]	@ 0x34
 8014306:	89a3      	ldrh	r3, [r4, #12]
 8014308:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801430c:	81a3      	strh	r3, [r4, #12]
 801430e:	2300      	movs	r3, #0
 8014310:	6063      	str	r3, [r4, #4]
 8014312:	6923      	ldr	r3, [r4, #16]
 8014314:	6023      	str	r3, [r4, #0]
 8014316:	89a3      	ldrh	r3, [r4, #12]
 8014318:	f043 0308 	orr.w	r3, r3, #8
 801431c:	81a3      	strh	r3, [r4, #12]
 801431e:	6923      	ldr	r3, [r4, #16]
 8014320:	b94b      	cbnz	r3, 8014336 <__swsetup_r+0x7a>
 8014322:	89a3      	ldrh	r3, [r4, #12]
 8014324:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801432c:	d003      	beq.n	8014336 <__swsetup_r+0x7a>
 801432e:	4621      	mov	r1, r4
 8014330:	4628      	mov	r0, r5
 8014332:	f000 f883 	bl	801443c <__smakebuf_r>
 8014336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801433a:	f013 0201 	ands.w	r2, r3, #1
 801433e:	d00a      	beq.n	8014356 <__swsetup_r+0x9a>
 8014340:	2200      	movs	r2, #0
 8014342:	60a2      	str	r2, [r4, #8]
 8014344:	6962      	ldr	r2, [r4, #20]
 8014346:	4252      	negs	r2, r2
 8014348:	61a2      	str	r2, [r4, #24]
 801434a:	6922      	ldr	r2, [r4, #16]
 801434c:	b942      	cbnz	r2, 8014360 <__swsetup_r+0xa4>
 801434e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014352:	d1c5      	bne.n	80142e0 <__swsetup_r+0x24>
 8014354:	bd38      	pop	{r3, r4, r5, pc}
 8014356:	0799      	lsls	r1, r3, #30
 8014358:	bf58      	it	pl
 801435a:	6962      	ldrpl	r2, [r4, #20]
 801435c:	60a2      	str	r2, [r4, #8]
 801435e:	e7f4      	b.n	801434a <__swsetup_r+0x8e>
 8014360:	2000      	movs	r0, #0
 8014362:	e7f7      	b.n	8014354 <__swsetup_r+0x98>
 8014364:	24000110 	.word	0x24000110

08014368 <_raise_r>:
 8014368:	291f      	cmp	r1, #31
 801436a:	b538      	push	{r3, r4, r5, lr}
 801436c:	4605      	mov	r5, r0
 801436e:	460c      	mov	r4, r1
 8014370:	d904      	bls.n	801437c <_raise_r+0x14>
 8014372:	2316      	movs	r3, #22
 8014374:	6003      	str	r3, [r0, #0]
 8014376:	f04f 30ff 	mov.w	r0, #4294967295
 801437a:	bd38      	pop	{r3, r4, r5, pc}
 801437c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801437e:	b112      	cbz	r2, 8014386 <_raise_r+0x1e>
 8014380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014384:	b94b      	cbnz	r3, 801439a <_raise_r+0x32>
 8014386:	4628      	mov	r0, r5
 8014388:	f000 f830 	bl	80143ec <_getpid_r>
 801438c:	4622      	mov	r2, r4
 801438e:	4601      	mov	r1, r0
 8014390:	4628      	mov	r0, r5
 8014392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014396:	f000 b817 	b.w	80143c8 <_kill_r>
 801439a:	2b01      	cmp	r3, #1
 801439c:	d00a      	beq.n	80143b4 <_raise_r+0x4c>
 801439e:	1c59      	adds	r1, r3, #1
 80143a0:	d103      	bne.n	80143aa <_raise_r+0x42>
 80143a2:	2316      	movs	r3, #22
 80143a4:	6003      	str	r3, [r0, #0]
 80143a6:	2001      	movs	r0, #1
 80143a8:	e7e7      	b.n	801437a <_raise_r+0x12>
 80143aa:	2100      	movs	r1, #0
 80143ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80143b0:	4620      	mov	r0, r4
 80143b2:	4798      	blx	r3
 80143b4:	2000      	movs	r0, #0
 80143b6:	e7e0      	b.n	801437a <_raise_r+0x12>

080143b8 <raise>:
 80143b8:	4b02      	ldr	r3, [pc, #8]	@ (80143c4 <raise+0xc>)
 80143ba:	4601      	mov	r1, r0
 80143bc:	6818      	ldr	r0, [r3, #0]
 80143be:	f7ff bfd3 	b.w	8014368 <_raise_r>
 80143c2:	bf00      	nop
 80143c4:	24000110 	.word	0x24000110

080143c8 <_kill_r>:
 80143c8:	b538      	push	{r3, r4, r5, lr}
 80143ca:	4d07      	ldr	r5, [pc, #28]	@ (80143e8 <_kill_r+0x20>)
 80143cc:	2300      	movs	r3, #0
 80143ce:	4604      	mov	r4, r0
 80143d0:	4608      	mov	r0, r1
 80143d2:	4611      	mov	r1, r2
 80143d4:	602b      	str	r3, [r5, #0]
 80143d6:	f7fb f986 	bl	800f6e6 <_kill>
 80143da:	1c43      	adds	r3, r0, #1
 80143dc:	d102      	bne.n	80143e4 <_kill_r+0x1c>
 80143de:	682b      	ldr	r3, [r5, #0]
 80143e0:	b103      	cbz	r3, 80143e4 <_kill_r+0x1c>
 80143e2:	6023      	str	r3, [r4, #0]
 80143e4:	bd38      	pop	{r3, r4, r5, pc}
 80143e6:	bf00      	nop
 80143e8:	240028bc 	.word	0x240028bc

080143ec <_getpid_r>:
 80143ec:	f7fb b96d 	b.w	800f6ca <_getpid>

080143f0 <__swhatbuf_r>:
 80143f0:	b570      	push	{r4, r5, r6, lr}
 80143f2:	460c      	mov	r4, r1
 80143f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143f8:	2900      	cmp	r1, #0
 80143fa:	b096      	sub	sp, #88	@ 0x58
 80143fc:	4615      	mov	r5, r2
 80143fe:	461e      	mov	r6, r3
 8014400:	da0d      	bge.n	801441e <__swhatbuf_r+0x2e>
 8014402:	89a3      	ldrh	r3, [r4, #12]
 8014404:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014408:	f04f 0100 	mov.w	r1, #0
 801440c:	bf14      	ite	ne
 801440e:	2340      	movne	r3, #64	@ 0x40
 8014410:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014414:	2000      	movs	r0, #0
 8014416:	6031      	str	r1, [r6, #0]
 8014418:	602b      	str	r3, [r5, #0]
 801441a:	b016      	add	sp, #88	@ 0x58
 801441c:	bd70      	pop	{r4, r5, r6, pc}
 801441e:	466a      	mov	r2, sp
 8014420:	f000 f848 	bl	80144b4 <_fstat_r>
 8014424:	2800      	cmp	r0, #0
 8014426:	dbec      	blt.n	8014402 <__swhatbuf_r+0x12>
 8014428:	9901      	ldr	r1, [sp, #4]
 801442a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801442e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014432:	4259      	negs	r1, r3
 8014434:	4159      	adcs	r1, r3
 8014436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801443a:	e7eb      	b.n	8014414 <__swhatbuf_r+0x24>

0801443c <__smakebuf_r>:
 801443c:	898b      	ldrh	r3, [r1, #12]
 801443e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014440:	079d      	lsls	r5, r3, #30
 8014442:	4606      	mov	r6, r0
 8014444:	460c      	mov	r4, r1
 8014446:	d507      	bpl.n	8014458 <__smakebuf_r+0x1c>
 8014448:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801444c:	6023      	str	r3, [r4, #0]
 801444e:	6123      	str	r3, [r4, #16]
 8014450:	2301      	movs	r3, #1
 8014452:	6163      	str	r3, [r4, #20]
 8014454:	b003      	add	sp, #12
 8014456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014458:	ab01      	add	r3, sp, #4
 801445a:	466a      	mov	r2, sp
 801445c:	f7ff ffc8 	bl	80143f0 <__swhatbuf_r>
 8014460:	9f00      	ldr	r7, [sp, #0]
 8014462:	4605      	mov	r5, r0
 8014464:	4639      	mov	r1, r7
 8014466:	4630      	mov	r0, r6
 8014468:	f7fd fabe 	bl	80119e8 <_malloc_r>
 801446c:	b948      	cbnz	r0, 8014482 <__smakebuf_r+0x46>
 801446e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014472:	059a      	lsls	r2, r3, #22
 8014474:	d4ee      	bmi.n	8014454 <__smakebuf_r+0x18>
 8014476:	f023 0303 	bic.w	r3, r3, #3
 801447a:	f043 0302 	orr.w	r3, r3, #2
 801447e:	81a3      	strh	r3, [r4, #12]
 8014480:	e7e2      	b.n	8014448 <__smakebuf_r+0xc>
 8014482:	89a3      	ldrh	r3, [r4, #12]
 8014484:	6020      	str	r0, [r4, #0]
 8014486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801448a:	81a3      	strh	r3, [r4, #12]
 801448c:	9b01      	ldr	r3, [sp, #4]
 801448e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014492:	b15b      	cbz	r3, 80144ac <__smakebuf_r+0x70>
 8014494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014498:	4630      	mov	r0, r6
 801449a:	f000 f81d 	bl	80144d8 <_isatty_r>
 801449e:	b128      	cbz	r0, 80144ac <__smakebuf_r+0x70>
 80144a0:	89a3      	ldrh	r3, [r4, #12]
 80144a2:	f023 0303 	bic.w	r3, r3, #3
 80144a6:	f043 0301 	orr.w	r3, r3, #1
 80144aa:	81a3      	strh	r3, [r4, #12]
 80144ac:	89a3      	ldrh	r3, [r4, #12]
 80144ae:	431d      	orrs	r5, r3
 80144b0:	81a5      	strh	r5, [r4, #12]
 80144b2:	e7cf      	b.n	8014454 <__smakebuf_r+0x18>

080144b4 <_fstat_r>:
 80144b4:	b538      	push	{r3, r4, r5, lr}
 80144b6:	4d07      	ldr	r5, [pc, #28]	@ (80144d4 <_fstat_r+0x20>)
 80144b8:	2300      	movs	r3, #0
 80144ba:	4604      	mov	r4, r0
 80144bc:	4608      	mov	r0, r1
 80144be:	4611      	mov	r1, r2
 80144c0:	602b      	str	r3, [r5, #0]
 80144c2:	f7fb f8fb 	bl	800f6bc <_fstat>
 80144c6:	1c43      	adds	r3, r0, #1
 80144c8:	d102      	bne.n	80144d0 <_fstat_r+0x1c>
 80144ca:	682b      	ldr	r3, [r5, #0]
 80144cc:	b103      	cbz	r3, 80144d0 <_fstat_r+0x1c>
 80144ce:	6023      	str	r3, [r4, #0]
 80144d0:	bd38      	pop	{r3, r4, r5, pc}
 80144d2:	bf00      	nop
 80144d4:	240028bc 	.word	0x240028bc

080144d8 <_isatty_r>:
 80144d8:	b538      	push	{r3, r4, r5, lr}
 80144da:	4d06      	ldr	r5, [pc, #24]	@ (80144f4 <_isatty_r+0x1c>)
 80144dc:	2300      	movs	r3, #0
 80144de:	4604      	mov	r4, r0
 80144e0:	4608      	mov	r0, r1
 80144e2:	602b      	str	r3, [r5, #0]
 80144e4:	f7fb f8f8 	bl	800f6d8 <_isatty>
 80144e8:	1c43      	adds	r3, r0, #1
 80144ea:	d102      	bne.n	80144f2 <_isatty_r+0x1a>
 80144ec:	682b      	ldr	r3, [r5, #0]
 80144ee:	b103      	cbz	r3, 80144f2 <_isatty_r+0x1a>
 80144f0:	6023      	str	r3, [r4, #0]
 80144f2:	bd38      	pop	{r3, r4, r5, pc}
 80144f4:	240028bc 	.word	0x240028bc

080144f8 <fmod>:
 80144f8:	b508      	push	{r3, lr}
 80144fa:	ed2d 8b04 	vpush	{d8-d9}
 80144fe:	eeb0 9b40 	vmov.f64	d9, d0
 8014502:	eeb0 8b41 	vmov.f64	d8, d1
 8014506:	f000 f85f 	bl	80145c8 <__ieee754_fmod>
 801450a:	eeb4 9b48 	vcmp.f64	d9, d8
 801450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014512:	d60c      	bvs.n	801452e <fmod+0x36>
 8014514:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014538 <fmod+0x40>
 8014518:	eeb4 8b49 	vcmp.f64	d8, d9
 801451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014520:	d105      	bne.n	801452e <fmod+0x36>
 8014522:	f000 f95d 	bl	80147e0 <__errno>
 8014526:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801452a:	2321      	movs	r3, #33	@ 0x21
 801452c:	6003      	str	r3, [r0, #0]
 801452e:	ecbd 8b04 	vpop	{d8-d9}
 8014532:	bd08      	pop	{r3, pc}
 8014534:	f3af 8000 	nop.w
	...

08014540 <sqrt>:
 8014540:	b508      	push	{r3, lr}
 8014542:	ed2d 8b04 	vpush	{d8-d9}
 8014546:	eeb0 8b40 	vmov.f64	d8, d0
 801454a:	f000 f837 	bl	80145bc <__ieee754_sqrt>
 801454e:	eeb4 8b48 	vcmp.f64	d8, d8
 8014552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014556:	d60c      	bvs.n	8014572 <sqrt+0x32>
 8014558:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8014578 <sqrt+0x38>
 801455c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014564:	d505      	bpl.n	8014572 <sqrt+0x32>
 8014566:	f000 f93b 	bl	80147e0 <__errno>
 801456a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801456e:	2321      	movs	r3, #33	@ 0x21
 8014570:	6003      	str	r3, [r0, #0]
 8014572:	ecbd 8b04 	vpop	{d8-d9}
 8014576:	bd08      	pop	{r3, pc}
	...

08014580 <sqrtf>:
 8014580:	b508      	push	{r3, lr}
 8014582:	ed2d 8b02 	vpush	{d8}
 8014586:	eeb0 8a40 	vmov.f32	s16, s0
 801458a:	f000 f81a 	bl	80145c2 <__ieee754_sqrtf>
 801458e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014596:	d60c      	bvs.n	80145b2 <sqrtf+0x32>
 8014598:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80145b8 <sqrtf+0x38>
 801459c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80145a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a4:	d505      	bpl.n	80145b2 <sqrtf+0x32>
 80145a6:	f000 f91b 	bl	80147e0 <__errno>
 80145aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80145ae:	2321      	movs	r3, #33	@ 0x21
 80145b0:	6003      	str	r3, [r0, #0]
 80145b2:	ecbd 8b02 	vpop	{d8}
 80145b6:	bd08      	pop	{r3, pc}
 80145b8:	00000000 	.word	0x00000000

080145bc <__ieee754_sqrt>:
 80145bc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80145c0:	4770      	bx	lr

080145c2 <__ieee754_sqrtf>:
 80145c2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80145c6:	4770      	bx	lr

080145c8 <__ieee754_fmod>:
 80145c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80145cc:	ed8d 1b00 	vstr	d1, [sp]
 80145d0:	e9dd 6500 	ldrd	r6, r5, [sp]
 80145d4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80145d8:	ea56 0307 	orrs.w	r3, r6, r7
 80145dc:	46b6      	mov	lr, r6
 80145de:	d00d      	beq.n	80145fc <__ieee754_fmod+0x34>
 80145e0:	ee10 ca90 	vmov	ip, s1
 80145e4:	4b78      	ldr	r3, [pc, #480]	@ (80147c8 <__ieee754_fmod+0x200>)
 80145e6:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 80145ea:	4598      	cmp	r8, r3
 80145ec:	d806      	bhi.n	80145fc <__ieee754_fmod+0x34>
 80145ee:	4273      	negs	r3, r6
 80145f0:	4a76      	ldr	r2, [pc, #472]	@ (80147cc <__ieee754_fmod+0x204>)
 80145f2:	4333      	orrs	r3, r6
 80145f4:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 80145f8:	4293      	cmp	r3, r2
 80145fa:	d908      	bls.n	801460e <__ieee754_fmod+0x46>
 80145fc:	ed9d 7b00 	vldr	d7, [sp]
 8014600:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014604:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014608:	b003      	add	sp, #12
 801460a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801460e:	ee10 9a10 	vmov	r9, s0
 8014612:	45b8      	cmp	r8, r7
 8014614:	4649      	mov	r1, r9
 8014616:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 801461a:	dc09      	bgt.n	8014630 <__ieee754_fmod+0x68>
 801461c:	dbf4      	blt.n	8014608 <__ieee754_fmod+0x40>
 801461e:	454e      	cmp	r6, r9
 8014620:	d8f2      	bhi.n	8014608 <__ieee754_fmod+0x40>
 8014622:	d105      	bne.n	8014630 <__ieee754_fmod+0x68>
 8014624:	4b6a      	ldr	r3, [pc, #424]	@ (80147d0 <__ieee754_fmod+0x208>)
 8014626:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 801462a:	ed93 0b00 	vldr	d0, [r3]
 801462e:	e7eb      	b.n	8014608 <__ieee754_fmod+0x40>
 8014630:	4a66      	ldr	r2, [pc, #408]	@ (80147cc <__ieee754_fmod+0x204>)
 8014632:	ea1c 0f02 	tst.w	ip, r2
 8014636:	d14a      	bne.n	80146ce <__ieee754_fmod+0x106>
 8014638:	f1b8 0f00 	cmp.w	r8, #0
 801463c:	d13f      	bne.n	80146be <__ieee754_fmod+0xf6>
 801463e:	4865      	ldr	r0, [pc, #404]	@ (80147d4 <__ieee754_fmod+0x20c>)
 8014640:	464b      	mov	r3, r9
 8014642:	2b00      	cmp	r3, #0
 8014644:	dc38      	bgt.n	80146b8 <__ieee754_fmod+0xf0>
 8014646:	4215      	tst	r5, r2
 8014648:	d150      	bne.n	80146ec <__ieee754_fmod+0x124>
 801464a:	2f00      	cmp	r7, #0
 801464c:	d147      	bne.n	80146de <__ieee754_fmod+0x116>
 801464e:	4a61      	ldr	r2, [pc, #388]	@ (80147d4 <__ieee754_fmod+0x20c>)
 8014650:	4633      	mov	r3, r6
 8014652:	2b00      	cmp	r3, #0
 8014654:	dc40      	bgt.n	80146d8 <__ieee754_fmod+0x110>
 8014656:	4b60      	ldr	r3, [pc, #384]	@ (80147d8 <__ieee754_fmod+0x210>)
 8014658:	4298      	cmp	r0, r3
 801465a:	db4b      	blt.n	80146f4 <__ieee754_fmod+0x12c>
 801465c:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8014660:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014664:	f8df c170 	ldr.w	ip, [pc, #368]	@ 80147d8 <__ieee754_fmod+0x210>
 8014668:	4562      	cmp	r2, ip
 801466a:	db58      	blt.n	801471e <__ieee754_fmod+0x156>
 801466c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014670:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014674:	1a80      	subs	r0, r0, r2
 8014676:	1b5e      	subs	r6, r3, r5
 8014678:	eba1 070e 	sub.w	r7, r1, lr
 801467c:	2800      	cmp	r0, #0
 801467e:	d164      	bne.n	801474a <__ieee754_fmod+0x182>
 8014680:	4571      	cmp	r1, lr
 8014682:	bf38      	it	cc
 8014684:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014688:	2e00      	cmp	r6, #0
 801468a:	bfa4      	itt	ge
 801468c:	4639      	movge	r1, r7
 801468e:	4633      	movge	r3, r6
 8014690:	ea53 0001 	orrs.w	r0, r3, r1
 8014694:	d0c6      	beq.n	8014624 <__ieee754_fmod+0x5c>
 8014696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801469a:	db6b      	blt.n	8014774 <__ieee754_fmod+0x1ac>
 801469c:	484e      	ldr	r0, [pc, #312]	@ (80147d8 <__ieee754_fmod+0x210>)
 801469e:	4282      	cmp	r2, r0
 80146a0:	db6e      	blt.n	8014780 <__ieee754_fmod+0x1b8>
 80146a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80146a6:	4323      	orrs	r3, r4
 80146a8:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 80146ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80146b0:	460c      	mov	r4, r1
 80146b2:	ec45 4b10 	vmov	d0, r4, r5
 80146b6:	e7a7      	b.n	8014608 <__ieee754_fmod+0x40>
 80146b8:	3801      	subs	r0, #1
 80146ba:	005b      	lsls	r3, r3, #1
 80146bc:	e7c1      	b.n	8014642 <__ieee754_fmod+0x7a>
 80146be:	4846      	ldr	r0, [pc, #280]	@ (80147d8 <__ieee754_fmod+0x210>)
 80146c0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	ddbe      	ble.n	8014646 <__ieee754_fmod+0x7e>
 80146c8:	3801      	subs	r0, #1
 80146ca:	005b      	lsls	r3, r3, #1
 80146cc:	e7fa      	b.n	80146c4 <__ieee754_fmod+0xfc>
 80146ce:	ea4f 5028 	mov.w	r0, r8, asr #20
 80146d2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 80146d6:	e7b6      	b.n	8014646 <__ieee754_fmod+0x7e>
 80146d8:	3a01      	subs	r2, #1
 80146da:	005b      	lsls	r3, r3, #1
 80146dc:	e7b9      	b.n	8014652 <__ieee754_fmod+0x8a>
 80146de:	4a3e      	ldr	r2, [pc, #248]	@ (80147d8 <__ieee754_fmod+0x210>)
 80146e0:	02fb      	lsls	r3, r7, #11
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	ddb7      	ble.n	8014656 <__ieee754_fmod+0x8e>
 80146e6:	3a01      	subs	r2, #1
 80146e8:	005b      	lsls	r3, r3, #1
 80146ea:	e7fa      	b.n	80146e2 <__ieee754_fmod+0x11a>
 80146ec:	153a      	asrs	r2, r7, #20
 80146ee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80146f2:	e7b0      	b.n	8014656 <__ieee754_fmod+0x8e>
 80146f4:	eba3 0c00 	sub.w	ip, r3, r0
 80146f8:	f1bc 0f1f 	cmp.w	ip, #31
 80146fc:	dc09      	bgt.n	8014712 <__ieee754_fmod+0x14a>
 80146fe:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8014702:	fa08 f10c 	lsl.w	r1, r8, ip
 8014706:	fa29 f303 	lsr.w	r3, r9, r3
 801470a:	430b      	orrs	r3, r1
 801470c:	fa09 f10c 	lsl.w	r1, r9, ip
 8014710:	e7a8      	b.n	8014664 <__ieee754_fmod+0x9c>
 8014712:	4b32      	ldr	r3, [pc, #200]	@ (80147dc <__ieee754_fmod+0x214>)
 8014714:	1a1b      	subs	r3, r3, r0
 8014716:	fa09 f303 	lsl.w	r3, r9, r3
 801471a:	2100      	movs	r1, #0
 801471c:	e7a2      	b.n	8014664 <__ieee754_fmod+0x9c>
 801471e:	ebac 0c02 	sub.w	ip, ip, r2
 8014722:	f1bc 0f1f 	cmp.w	ip, #31
 8014726:	dc09      	bgt.n	801473c <__ieee754_fmod+0x174>
 8014728:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 801472c:	fa07 f70c 	lsl.w	r7, r7, ip
 8014730:	fa26 f505 	lsr.w	r5, r6, r5
 8014734:	433d      	orrs	r5, r7
 8014736:	fa06 fe0c 	lsl.w	lr, r6, ip
 801473a:	e79b      	b.n	8014674 <__ieee754_fmod+0xac>
 801473c:	4d27      	ldr	r5, [pc, #156]	@ (80147dc <__ieee754_fmod+0x214>)
 801473e:	1aad      	subs	r5, r5, r2
 8014740:	fa06 f505 	lsl.w	r5, r6, r5
 8014744:	f04f 0e00 	mov.w	lr, #0
 8014748:	e794      	b.n	8014674 <__ieee754_fmod+0xac>
 801474a:	4571      	cmp	r1, lr
 801474c:	bf38      	it	cc
 801474e:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014752:	2e00      	cmp	r6, #0
 8014754:	da05      	bge.n	8014762 <__ieee754_fmod+0x19a>
 8014756:	0fce      	lsrs	r6, r1, #31
 8014758:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801475c:	0049      	lsls	r1, r1, #1
 801475e:	3801      	subs	r0, #1
 8014760:	e789      	b.n	8014676 <__ieee754_fmod+0xae>
 8014762:	ea56 0307 	orrs.w	r3, r6, r7
 8014766:	f43f af5d 	beq.w	8014624 <__ieee754_fmod+0x5c>
 801476a:	0ffb      	lsrs	r3, r7, #31
 801476c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8014770:	0079      	lsls	r1, r7, #1
 8014772:	e7f4      	b.n	801475e <__ieee754_fmod+0x196>
 8014774:	0fc8      	lsrs	r0, r1, #31
 8014776:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801477a:	0049      	lsls	r1, r1, #1
 801477c:	3a01      	subs	r2, #1
 801477e:	e78a      	b.n	8014696 <__ieee754_fmod+0xce>
 8014780:	1a80      	subs	r0, r0, r2
 8014782:	2814      	cmp	r0, #20
 8014784:	dc0c      	bgt.n	80147a0 <__ieee754_fmod+0x1d8>
 8014786:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801478a:	fa03 f202 	lsl.w	r2, r3, r2
 801478e:	40c1      	lsrs	r1, r0
 8014790:	430a      	orrs	r2, r1
 8014792:	4103      	asrs	r3, r0
 8014794:	ea43 0104 	orr.w	r1, r3, r4
 8014798:	4610      	mov	r0, r2
 801479a:	ec41 0b10 	vmov	d0, r0, r1
 801479e:	e733      	b.n	8014608 <__ieee754_fmod+0x40>
 80147a0:	281f      	cmp	r0, #31
 80147a2:	dc07      	bgt.n	80147b4 <__ieee754_fmod+0x1ec>
 80147a4:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80147a8:	40c1      	lsrs	r1, r0
 80147aa:	fa03 f202 	lsl.w	r2, r3, r2
 80147ae:	430a      	orrs	r2, r1
 80147b0:	4623      	mov	r3, r4
 80147b2:	e7ef      	b.n	8014794 <__ieee754_fmod+0x1cc>
 80147b4:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80147b8:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80147bc:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80147c0:	32e2      	adds	r2, #226	@ 0xe2
 80147c2:	fa43 f202 	asr.w	r2, r3, r2
 80147c6:	e7f3      	b.n	80147b0 <__ieee754_fmod+0x1e8>
 80147c8:	7fefffff 	.word	0x7fefffff
 80147cc:	7ff00000 	.word	0x7ff00000
 80147d0:	08016c40 	.word	0x08016c40
 80147d4:	fffffbed 	.word	0xfffffbed
 80147d8:	fffffc02 	.word	0xfffffc02
 80147dc:	fffffbe2 	.word	0xfffffbe2

080147e0 <__errno>:
 80147e0:	4b01      	ldr	r3, [pc, #4]	@ (80147e8 <__errno+0x8>)
 80147e2:	6818      	ldr	r0, [r3, #0]
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	24000110 	.word	0x24000110

080147ec <_sbrk>:
 80147ec:	4a04      	ldr	r2, [pc, #16]	@ (8014800 <_sbrk+0x14>)
 80147ee:	6811      	ldr	r1, [r2, #0]
 80147f0:	4603      	mov	r3, r0
 80147f2:	b909      	cbnz	r1, 80147f8 <_sbrk+0xc>
 80147f4:	4903      	ldr	r1, [pc, #12]	@ (8014804 <_sbrk+0x18>)
 80147f6:	6011      	str	r1, [r2, #0]
 80147f8:	6810      	ldr	r0, [r2, #0]
 80147fa:	4403      	add	r3, r0
 80147fc:	6013      	str	r3, [r2, #0]
 80147fe:	4770      	bx	lr
 8014800:	240028c4 	.word	0x240028c4
 8014804:	240028c8 	.word	0x240028c8

08014808 <_exit>:
 8014808:	e7fe      	b.n	8014808 <_exit>
	...

0801480c <_init>:
 801480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801480e:	bf00      	nop
 8014810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014812:	bc08      	pop	{r3}
 8014814:	469e      	mov	lr, r3
 8014816:	4770      	bx	lr

08014818 <_fini>:
 8014818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801481a:	bf00      	nop
 801481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801481e:	bc08      	pop	{r3}
 8014820:	469e      	mov	lr, r3
 8014822:	4770      	bx	lr
