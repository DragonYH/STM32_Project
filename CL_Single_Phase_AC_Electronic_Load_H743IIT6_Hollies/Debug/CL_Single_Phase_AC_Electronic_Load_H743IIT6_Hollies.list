
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ee8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c60  08015188  08015188  00016188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015de8  08015de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015df0  08015df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015df4  08015df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  08015df8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002634  240002d0  080160c8  000172d0  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  24002904  080160c8  00017904  2**0
                  ALLOC
  9 ._D3_Area     00000008  38000000  38000000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 ._DTCM_Area   00000010  20000000  20000000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  00019008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031e7f  00000000  00000000  00019036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000069b7  00000000  00000000  0004aeb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002270  00000000  00000000  00051870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a0c  00000000  00000000  00053ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040c24  00000000  00000000  000554ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000338bb  00000000  00000000  00096110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f30c  00000000  00000000  000c99cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00248cd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f6c  00000000  00000000  00248d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00252cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  00252d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00252f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015170 	.word	0x08015170

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	08015170 	.word	0x08015170

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	@ 0x28
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	463b      	mov	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	615a      	str	r2, [r3, #20]
 80003b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003b6:	4a3e      	ldr	r2, [pc, #248]	@ (80004b0 <MX_ADC1_Init+0x120>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ba:	4b3c      	ldr	r3, [pc, #240]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003c2:	4b3a      	ldr	r3, [pc, #232]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003c8:	4b38      	ldr	r3, [pc, #224]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003ce:	4b37      	ldr	r3, [pc, #220]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003d0:	2208      	movs	r2, #8
 80003d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d4:	4b35      	ldr	r3, [pc, #212]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003da:	4b34      	ldr	r3, [pc, #208]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80003e0:	4b32      	ldr	r3, [pc, #200]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b31      	ldr	r3, [pc, #196]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b2f      	ldr	r3, [pc, #188]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f2:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80003f8:	4b2c      	ldr	r3, [pc, #176]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003fe:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000400:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000404:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000406:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000408:	2200      	movs	r2, #0
 800040a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800040c:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800040e:	2201      	movs	r2, #1
 8000410:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 4;
 8000414:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000416:	2204      	movs	r2, #4
 8000418:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800041a:	4b24      	ldr	r3, [pc, #144]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800041c:	2240      	movs	r2, #64	@ 0x40
 800041e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000420:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000422:	2200      	movs	r2, #0
 8000424:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000426:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000428:	2201      	movs	r2, #1
 800042a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800042c:	481f      	ldr	r0, [pc, #124]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800042e:	f001 feab 	bl	8002188 <HAL_ADC_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000438:	f000 fef8 	bl	800122c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	4619      	mov	r1, r3
 8000446:	4819      	ldr	r0, [pc, #100]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000448:	f002 ffba 	bl	80033c0 <HAL_ADCEx_MultiModeConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000452:	f000 feeb 	bl	800122c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <MX_ADC1_Init+0x124>)
 8000458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800045a:	2306      	movs	r3, #6
 800045c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800045e:	2305      	movs	r3, #5
 8000460:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000462:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000466:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000468:	2304      	movs	r3, #4
 800046a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	480c      	ldr	r0, [pc, #48]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800047a:	f002 f909 	bl	8002690 <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000484:	f000 fed2 	bl	800122c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000488:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <MX_ADC1_Init+0x128>)
 800048a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800048c:	230c      	movs	r3, #12
 800048e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000490:	463b      	mov	r3, r7
 8000492:	4619      	mov	r1, r3
 8000494:	4805      	ldr	r0, [pc, #20]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000496:	f002 f8fb 	bl	8002690 <HAL_ADC_ConfigChannel>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80004a0:	f000 fec4 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a4:	bf00      	nop
 80004a6:	3728      	adds	r7, #40	@ 0x28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	240002ec 	.word	0x240002ec
 80004b0:	40022000 	.word	0x40022000
 80004b4:	10c00010 	.word	0x10c00010
 80004b8:	0c900008 	.word	0x0c900008

080004bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b0bc      	sub	sp, #240	@ 0xf0
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	22c0      	movs	r2, #192	@ 0xc0
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f012 fd70 	bl	8012fc2 <memset>
  if(adcHandle->Instance==ADC1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a54      	ldr	r2, [pc, #336]	@ (8000638 <HAL_ADC_MspInit+0x17c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	f040 80a0 	bne.w	800062e <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80004f2:	f04f 0300 	mov.w	r3, #0
 80004f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004fa:	2319      	movs	r3, #25
 80004fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80004fe:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8000502:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 8000504:	2307      	movs	r3, #7
 8000506:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000508:	2302      	movs	r3, #2
 800050a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000510:	2300      	movs	r3, #0
 8000512:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000514:	2300      	movs	r3, #0
 8000516:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800051c:	2300      	movs	r3, #0
 800051e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fe3a 	bl	80091a0 <HAL_RCCEx_PeriphCLKConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000532:	f000 fe7b 	bl	800122c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000536:	4b41      	ldr	r3, [pc, #260]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800053c:	4a3f      	ldr	r2, [pc, #252]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000546:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b39      	ldr	r3, [pc, #228]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800055a:	4a38      	ldr	r2, [pc, #224]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000564:	4b35      	ldr	r3, [pc, #212]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b32      	ldr	r3, [pc, #200]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000578:	4a30      	ldr	r2, [pc, #192]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000590:	2340      	movs	r3, #64	@ 0x40
 8000592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000596:	2303      	movs	r3, #3
 8000598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005a6:	4619      	mov	r1, r3
 80005a8:	4825      	ldr	r0, [pc, #148]	@ (8000640 <HAL_ADC_MspInit+0x184>)
 80005aa:	f005 fc61 	bl	8005e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ae:	2310      	movs	r3, #16
 80005b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	2303      	movs	r3, #3
 80005b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005c4:	4619      	mov	r1, r3
 80005c6:	481f      	ldr	r0, [pc, #124]	@ (8000644 <HAL_ADC_MspInit+0x188>)
 80005c8:	f005 fc52 	bl	8005e70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <HAL_ADC_MspInit+0x190>)
 80005d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005de:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000602:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000606:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800060a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800060c:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000614:	f003 fb54 	bl	8003cc0 <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 800061e:	f000 fe05 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000626:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000628:	4a07      	ldr	r2, [pc, #28]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	37f0      	adds	r7, #240	@ 0xf0
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40022000 	.word	0x40022000
 800063c:	58024400 	.word	0x58024400
 8000640:	58020000 	.word	0x58020000
 8000644:	58020800 	.word	0x58020800
 8000648:	24000350 	.word	0x24000350
 800064c:	40020010 	.word	0x40020010

08000650 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2224      	movs	r2, #36	@ 0x24
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f012 fcb0 	bl	8012fc2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_DAC1_Init+0x5c>)
 8000664:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_DAC1_Init+0x60>)
 8000666:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <MX_DAC1_Init+0x5c>)
 800066a:	f003 f8e3 	bl	8003834 <HAL_DAC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000674:	f000 fdda 	bl	800122c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000684:	2301      	movs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	@ (80006ac <MX_DAC1_Init+0x5c>)
 8000694:	f003 f9cc 	bl	8003a30 <HAL_DAC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800069e:	f000 fdc5 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	@ 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	240003c8 	.word	0x240003c8
 80006b0:	40007400 	.word	0x40007400

080006b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <HAL_DAC_MspInit+0x90>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d131      	bne.n	800073a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80006e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fa:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000704:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000712:	2310      	movs	r3, #16
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	2303      	movs	r3, #3
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <HAL_DAC_MspInit+0x98>)
 8000726:	f005 fba3 	bl	8005e70 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	210f      	movs	r1, #15
 800072e:	2036      	movs	r0, #54	@ 0x36
 8000730:	f002 ffdc 	bl	80036ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000734:	2036      	movs	r0, #54	@ 0x36
 8000736:	f002 fff3 	bl	8003720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	@ 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40007400 	.word	0x40007400
 8000748:	58024400 	.word	0x58024400
 800074c:	58020000 	.word	0x58020000

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <MX_DMA_Init+0x3c>)
 8000758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800075c:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <MX_DMA_Init+0x3c>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_DMA_Init+0x3c>)
 8000768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	200b      	movs	r0, #11
 800077a:	f002 ffb7 	bl	80036ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800077e:	200b      	movs	r0, #11
 8000780:	f002 ffce 	bl	8003720 <HAL_NVIC_EnableIRQ>

}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58024400 	.word	0x58024400

08000790 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b5e      	ldr	r3, [pc, #376]	@ (8000920 <MX_GPIO_Init+0x190>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ac:	4a5c      	ldr	r2, [pc, #368]	@ (8000920 <MX_GPIO_Init+0x190>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b6:	4b5a      	ldr	r3, [pc, #360]	@ (8000920 <MX_GPIO_Init+0x190>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c4:	4b56      	ldr	r3, [pc, #344]	@ (8000920 <MX_GPIO_Init+0x190>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ca:	4a55      	ldr	r2, [pc, #340]	@ (8000920 <MX_GPIO_Init+0x190>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d4:	4b52      	ldr	r3, [pc, #328]	@ (8000920 <MX_GPIO_Init+0x190>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000920 <MX_GPIO_Init+0x190>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a4d      	ldr	r2, [pc, #308]	@ (8000920 <MX_GPIO_Init+0x190>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000920 <MX_GPIO_Init+0x190>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b47      	ldr	r3, [pc, #284]	@ (8000920 <MX_GPIO_Init+0x190>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	4a46      	ldr	r2, [pc, #280]	@ (8000920 <MX_GPIO_Init+0x190>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000810:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <MX_GPIO_Init+0x190>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081e:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <MX_GPIO_Init+0x190>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000824:	4a3e      	ldr	r2, [pc, #248]	@ (8000920 <MX_GPIO_Init+0x190>)
 8000826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082e:	4b3c      	ldr	r3, [pc, #240]	@ (8000920 <MX_GPIO_Init+0x190>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800083c:	4b38      	ldr	r3, [pc, #224]	@ (8000920 <MX_GPIO_Init+0x190>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000842:	4a37      	ldr	r2, [pc, #220]	@ (8000920 <MX_GPIO_Init+0x190>)
 8000844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084c:	4b34      	ldr	r3, [pc, #208]	@ (8000920 <MX_GPIO_Init+0x190>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	4831      	ldr	r0, [pc, #196]	@ (8000924 <MX_GPIO_Init+0x194>)
 8000860:	f005 fcb6 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2102      	movs	r1, #2
 8000868:	482f      	ldr	r0, [pc, #188]	@ (8000928 <MX_GPIO_Init+0x198>)
 800086a:	f005 fcb1 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_CS_Pin|AD7606_RST_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2130      	movs	r1, #48	@ 0x30
 8000872:	482e      	ldr	r0, [pc, #184]	@ (800092c <MX_GPIO_Init+0x19c>)
 8000874:	f005 fcac 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2101      	movs	r1, #1
 800087c:	482c      	ldr	r0, [pc, #176]	@ (8000930 <MX_GPIO_Init+0x1a0>)
 800087e:	f005 fca7 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2140      	movs	r1, #64	@ 0x40
 8000886:	482a      	ldr	r0, [pc, #168]	@ (8000930 <MX_GPIO_Init+0x1a0>)
 8000888:	f005 fca2 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800088c:	2320      	movs	r3, #32
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000898:	2301      	movs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4820      	ldr	r0, [pc, #128]	@ (8000924 <MX_GPIO_Init+0x194>)
 80008a4:	f005 fae4 	bl	8005e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	481a      	ldr	r0, [pc, #104]	@ (8000928 <MX_GPIO_Init+0x198>)
 80008c0:	f005 fad6 	bl	8005e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_CS_Pin|AD7606_RST_Pin;
 80008c4:	2330      	movs	r3, #48	@ 0x30
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4814      	ldr	r0, [pc, #80]	@ (800092c <MX_GPIO_Init+0x19c>)
 80008dc:	f005 fac8 	bl	8005e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	480e      	ldr	r0, [pc, #56]	@ (8000930 <MX_GPIO_Init+0x1a0>)
 80008f8:	f005 faba 	bl	8005e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80008fc:	2340      	movs	r3, #64	@ 0x40
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000908:	2301      	movs	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4807      	ldr	r0, [pc, #28]	@ (8000930 <MX_GPIO_Init+0x1a0>)
 8000914:	f005 faac 	bl	8005e70 <HAL_GPIO_Init>

}
 8000918:	bf00      	nop
 800091a:	3730      	adds	r7, #48	@ 0x30
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	58024400 	.word	0x58024400
 8000924:	58020800 	.word	0x58020800
 8000928:	58020400 	.word	0x58020400
 800092c:	58021800 	.word	0x58021800
 8000930:	58022000 	.word	0x58022000

08000934 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ac <MX_I2C1_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000940:	4a1b      	ldr	r2, [pc, #108]	@ (80009b0 <MX_I2C1_Init+0x7c>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000944:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800094c:	2201      	movs	r2, #1
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096e:	480e      	ldr	r0, [pc, #56]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000970:	f005 fc62 	bl	8006238 <HAL_I2C_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800097a:	f000 fc57 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4809      	ldr	r0, [pc, #36]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000982:	f006 f861 	bl	8006a48 <HAL_I2CEx_ConfigAnalogFilter>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800098c:	f000 fc4e 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000994:	f006 f8a3 	bl	8006ade <HAL_I2CEx_ConfigDigitalFilter>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 fc45 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	240003dc 	.word	0x240003dc
 80009ac:	40005400 	.word	0x40005400
 80009b0:	307075b1 	.word	0x307075b1

080009b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0ba      	sub	sp, #232	@ 0xe8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	22c0      	movs	r2, #192	@ 0xc0
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f012 faf4 	bl	8012fc2 <memset>
  if(i2cHandle->Instance==I2C1)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a26      	ldr	r2, [pc, #152]	@ (8000a78 <HAL_I2C_MspInit+0xc4>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d145      	bne.n	8000a70 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009e4:	f04f 0208 	mov.w	r2, #8
 80009e8:	f04f 0300 	mov.w	r3, #0
 80009ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	4618      	mov	r0, r3
 80009fc:	f008 fbd0 	bl	80091a0 <HAL_RCCEx_PeriphCLKConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000a06:	f000 fc11 	bl	800122c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_I2C_MspInit+0xc8>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a10:	4a1a      	ldr	r2, [pc, #104]	@ (8000a7c <HAL_I2C_MspInit+0xc8>)
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <HAL_I2C_MspInit+0xc8>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a28:	23c0      	movs	r3, #192	@ 0xc0
 8000a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2e:	2312      	movs	r3, #18
 8000a30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a40:	2304      	movs	r3, #4
 8000a42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <HAL_I2C_MspInit+0xcc>)
 8000a4e:	f005 fa0f 	bl	8005e70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_I2C_MspInit+0xc8>)
 8000a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a58:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <HAL_I2C_MspInit+0xc8>)
 8000a5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_I2C_MspInit+0xc8>)
 8000a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a70:	bf00      	nop
 8000a72:	37e8      	adds	r7, #232	@ 0xe8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	58024400 	.word	0x58024400
 8000a80:	58020400 	.word	0x58020400

08000a84 <oled_Show>:
float M = 0.9f;
// 显示函数
uint8_t textBuf[256] = {0};
float theta_diff = 0.f;
void oled_Show()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	ed2d 8b02 	vpush	{d8}
 8000a8a:	b090      	sub	sp, #64	@ 0x40
 8000a8c:	af10      	add	r7, sp, #64	@ 0x40
  //  // EFF: 效率
  //  sprintf((char *)textBuf, "EFF: %5.2f%%", (signal_V->u_0 * signal_I->u_0) / (signal_V->u_0 * signal_I->u_0) * 100.f);
  //  OLED_ShowString(0, 48, textBuf, 12);
  //  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  sprintf((char *)textBuf, "x=0,park_Iq=%.2f,park_Id=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,sogi_Ia=%.2f,sogi_Ib=%.2f,inv_a=%.2f\n", signal_I->park_q, signal_I->park_d, signal_V->park_d, signal_V->park_q, signal_V->sogi_a_0, signal_V->sogi_b_0 / 382 * 3, signal_I->sogi_a_0, signal_I->sogi_b_0 / 382 * 3, signal_I->park_inv_a);
 8000a8e:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <oled_Show+0xd8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000a96:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000a9a:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <oled_Show+0xd8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000aa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b60 <oled_Show+0xdc>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8000aae:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b60 <oled_Show+0xdc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8000aba:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000abe:	4b28      	ldr	r3, [pc, #160]	@ (8000b60 <oled_Show+0xdc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	edd3 4a03 	vldr	s9, [r3, #12]
 8000ac6:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000aca:	4b25      	ldr	r3, [pc, #148]	@ (8000b60 <oled_Show+0xdc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	ed93 3a06 	vldr	s6, [r3, #24]
 8000ad2:	eddf 2a24 	vldr	s5, [pc, #144]	@ 8000b64 <oled_Show+0xe0>
 8000ad6:	eec3 3a22 	vdiv.f32	s7, s6, s5
 8000ada:	eeb0 3a08 	vmov.f32	s6, #8	@ 0x40400000  3.0
 8000ade:	ee63 3a83 	vmul.f32	s7, s7, s6
 8000ae2:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <oled_Show+0xd8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	edd3 2a03 	vldr	s5, [r3, #12]
 8000aee:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <oled_Show+0xd8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	ed93 1a06 	vldr	s2, [r3, #24]
 8000afa:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8000b64 <oled_Show+0xe0>
 8000afe:	eec1 1a20 	vdiv.f32	s3, s2, s1
 8000b02:	eeb0 1a08 	vmov.f32	s2, #8	@ 0x40400000  3.0
 8000b06:	ee61 1a81 	vmul.f32	s3, s3, s2
 8000b0a:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <oled_Show+0xd8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	edd3 0a0b 	vldr	s1, [r3, #44]	@ 0x2c
 8000b16:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8000b1a:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8000b1e:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8000b22:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8000b26:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000b2a:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000b2e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000b32:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b36:	ed8d 7b00 	vstr	d7, [sp]
 8000b3a:	ec53 2b18 	vmov	r2, r3, d8
 8000b3e:	490a      	ldr	r1, [pc, #40]	@ (8000b68 <oled_Show+0xe4>)
 8000b40:	480a      	ldr	r0, [pc, #40]	@ (8000b6c <oled_Show+0xe8>)
 8000b42:	f012 f9db 	bl	8012efc <siprintf>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000b46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b4a:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <oled_Show+0xe8>)
 8000b4c:	f010 ff26 	bl	801199c <CDC_Transmit_FS>

  //  OLED_Refresh();
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	ecbd 8b02 	vpop	{d8}
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000000 	.word	0x20000000
 8000b64:	43bf0000 	.word	0x43bf0000
 8000b68:	08015188 	.word	0x08015188
 8000b6c:	24000430 	.word	0x24000430

08000b70 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b76:	f000 f9e5 	bl	8000f44 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b7a:	4b76      	ldr	r3, [pc, #472]	@ (8000d54 <main+0x1e4>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d11b      	bne.n	8000bbe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b86:	f3bf 8f4f 	dsb	sy
}
 8000b8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b8c:	f3bf 8f6f 	isb	sy
}
 8000b90:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b92:	4b70      	ldr	r3, [pc, #448]	@ (8000d54 <main+0x1e4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b9a:	f3bf 8f4f 	dsb	sy
}
 8000b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ba0:	f3bf 8f6f 	isb	sy
}
 8000ba4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <main+0x1e4>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	4a6a      	ldr	r2, [pc, #424]	@ (8000d54 <main+0x1e4>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb2:	f3bf 8f4f 	dsb	sy
}
 8000bb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bb8:	f3bf 8f6f 	isb	sy
}
 8000bbc:	e000      	b.n	8000bc0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bbe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000bc0:	4b64      	ldr	r3, [pc, #400]	@ (8000d54 <main+0x1e4>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d138      	bne.n	8000c3e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000bcc:	4b61      	ldr	r3, [pc, #388]	@ (8000d54 <main+0x1e4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd4:	f3bf 8f4f 	dsb	sy
}
 8000bd8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bda:	4b5e      	ldr	r3, [pc, #376]	@ (8000d54 <main+0x1e4>)
 8000bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000be0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	0b5b      	lsrs	r3, r3, #13
 8000be6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bea:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	08db      	lsrs	r3, r3, #3
 8000bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bf4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	015a      	lsls	r2, r3, #5
 8000bfa:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000bfe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c04:	4953      	ldr	r1, [pc, #332]	@ (8000d54 <main+0x1e4>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1ef      	bne.n	8000bf6 <main+0x86>
    } while(sets-- != 0U);
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1e5a      	subs	r2, r3, #1
 8000c1a:	60ba      	str	r2, [r7, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1e5      	bne.n	8000bec <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c20:	f3bf 8f4f 	dsb	sy
}
 8000c24:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c26:	4b4b      	ldr	r3, [pc, #300]	@ (8000d54 <main+0x1e4>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8000d54 <main+0x1e4>)
 8000c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c32:	f3bf 8f4f 	dsb	sy
}
 8000c36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c38:	f3bf 8f6f 	isb	sy
}
 8000c3c:	e000      	b.n	8000c40 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c3e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c40:	f001 f808 	bl	8001c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c44:	f000 f8a0 	bl	8000d88 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c48:	f000 f94c 	bl	8000ee4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f7ff fda0 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c50:	f7ff fd7e 	bl	8000750 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c54:	f000 fe54 	bl	8001900 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000c58:	f000 fea0 	bl	800199c <MX_TIM8_Init>
  MX_ADC1_Init();
 8000c5c:	f7ff fb98 	bl	8000390 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000c60:	f010 fddc 	bl	801181c <MX_USB_DEVICE_Init>
  MX_DAC1_Init();
 8000c64:	f7ff fcf4 	bl	8000650 <MX_DAC1_Init>
  MX_I2C1_Init();
 8000c68:	f7ff fe64 	bl	8000934 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c6c:	f000 fae4 	bl	8001238 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c70:	f000 fb38 	bl	80012e4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000c74:	205c      	movs	r0, #92	@ 0x5c
 8000c76:	f011 fb91 	bl	801239c <malloc>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b36      	ldr	r3, [pc, #216]	@ (8000d58 <main+0x1e8>)
 8000c80:	601a      	str	r2, [r3, #0]
  signal_config_V = (pll_Config *)malloc(sizeof(pll_Config));
 8000c82:	2020      	movs	r0, #32
 8000c84:	f011 fb8a 	bl	801239c <malloc>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <main+0x1ec>)
 8000c8e:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000c90:	205c      	movs	r0, #92	@ 0x5c
 8000c92:	f011 fb83 	bl	801239c <malloc>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b31      	ldr	r3, [pc, #196]	@ (8000d60 <main+0x1f0>)
 8000c9c:	601a      	str	r2, [r3, #0]
  signal_config_I = (pll_Config *)malloc(sizeof(pll_Config));
 8000c9e:	2020      	movs	r0, #32
 8000ca0:	f011 fb7c 	bl	801239c <malloc>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d64 <main+0x1f4>)
 8000caa:	601a      	str	r2, [r3, #0]
  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 锁相环初始化
  pll_Init(signal_V, signal_config_V, 50, 20000); // 电压环
 8000cac:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <main+0x1e8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8000d5c <main+0x1ec>)
 8000cb2:	6811      	ldr	r1, [r2, #0]
 8000cb4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000cb8:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8000d68 <main+0x1f8>
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f010 fb09 	bl	80112d4 <pll_Init>
  pll_Init(signal_I, signal_config_I, 50, 20000); // 电流环
 8000cc2:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <main+0x1f0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a27      	ldr	r2, [pc, #156]	@ (8000d64 <main+0x1f4>)
 8000cc8:	6811      	ldr	r1, [r2, #0]
 8000cca:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000cce:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8000d68 <main+0x1f8>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f010 fafe 	bl	80112d4 <pll_Init>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000cd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4822      	ldr	r0, [pc, #136]	@ (8000d6c <main+0x1fc>)
 8000ce2:	f002 fe75 	bl	80039d0 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4820      	ldr	r0, [pc, #128]	@ (8000d6c <main+0x1fc>)
 8000cea:	f002 fdc5 	bl	8003878 <HAL_DAC_Start>
  // ADC校准并开启
  HAL_Delay(200);
 8000cee:	20c8      	movs	r0, #200	@ 0xc8
 8000cf0:	f001 f80c 	bl	8001d0c <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000cf4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	481d      	ldr	r0, [pc, #116]	@ (8000d70 <main+0x200>)
 8000cfc:	f002 fafc 	bl	80032f8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED); // 线性度校准
 8000d00:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000d04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000d08:	4819      	ldr	r0, [pc, #100]	@ (8000d70 <main+0x200>)
 8000d0a:	f002 faf5 	bl	80032f8 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(500);
 8000d0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d12:	f000 fffb 	bl	8001d0c <HAL_Delay>
  // 打开PWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000d16:	2100      	movs	r1, #0
 8000d18:	4816      	ldr	r0, [pc, #88]	@ (8000d74 <main+0x204>)
 8000d1a:	f00b fc79 	bl	800c610 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000d1e:	2104      	movs	r1, #4
 8000d20:	4814      	ldr	r0, [pc, #80]	@ (8000d74 <main+0x204>)
 8000d22:	f00b fc75 	bl	800c610 <HAL_TIM_PWM_Start>
  // OLED初始化
  OLED_Init();
 8000d26:	f010 fa4f 	bl	80111c8 <OLED_Init>
  //  INA238初始化
  ina238_Init(&hi2c1, 0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4812      	ldr	r0, [pc, #72]	@ (8000d78 <main+0x208>)
 8000d2e:	f010 f975 	bl	801101c <ina238_Init>
  // 开启中断
  HAL_TIM_Base_Start_IT(&htim2);
 8000d32:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <main+0x20c>)
 8000d34:	f00b fb92 	bl	800c45c <HAL_TIM_Base_Start_IT>
  signal_config_I->phase = PI / 2.f;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <main+0x1f4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <main+0x210>)
 8000d3e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 虚拟串口输出日志
    // oled_Show();
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000d40:	2101      	movs	r1, #1
 8000d42:	4810      	ldr	r0, [pc, #64]	@ (8000d84 <main+0x214>)
 8000d44:	f005 fa5d 	bl	8006202 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000d48:	20c8      	movs	r0, #200	@ 0xc8
 8000d4a:	f000 ffdf 	bl	8001d0c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000d4e:	bf00      	nop
 8000d50:	e7f6      	b.n	8000d40 <main+0x1d0>
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000004 	.word	0x20000004
 8000d60:	20000008 	.word	0x20000008
 8000d64:	2000000c 	.word	0x2000000c
 8000d68:	42480000 	.word	0x42480000
 8000d6c:	240003c8 	.word	0x240003c8
 8000d70:	240002ec 	.word	0x240002ec
 8000d74:	240006dc 	.word	0x240006dc
 8000d78:	240003dc 	.word	0x240003dc
 8000d7c:	24000690 	.word	0x24000690
 8000d80:	3fc90fdb 	.word	0x3fc90fdb
 8000d84:	58022000 	.word	0x58022000

08000d88 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09e      	sub	sp, #120	@ 0x78
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d92:	224c      	movs	r2, #76	@ 0x4c
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f012 f913 	bl	8012fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2220      	movs	r2, #32
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f012 f90c 	bl	8012fc2 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000daa:	2002      	movs	r0, #2
 8000dac:	f007 f99c 	bl	80080e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	4b48      	ldr	r3, [pc, #288]	@ (8000ed8 <SystemClock_Config+0x150>)
 8000db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db8:	4a47      	ldr	r2, [pc, #284]	@ (8000ed8 <SystemClock_Config+0x150>)
 8000dba:	f023 0301 	bic.w	r3, r3, #1
 8000dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000dc0:	4b45      	ldr	r3, [pc, #276]	@ (8000ed8 <SystemClock_Config+0x150>)
 8000dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b44      	ldr	r3, [pc, #272]	@ (8000edc <SystemClock_Config+0x154>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a43      	ldr	r2, [pc, #268]	@ (8000edc <SystemClock_Config+0x154>)
 8000dd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dd4:	6193      	str	r3, [r2, #24]
 8000dd6:	4b41      	ldr	r3, [pc, #260]	@ (8000edc <SystemClock_Config+0x154>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000de2:	bf00      	nop
 8000de4:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <SystemClock_Config+0x154>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000df0:	d1f8      	bne.n	8000de4 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee0 <SystemClock_Config+0x158>)
 8000df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df8:	4a39      	ldr	r2, [pc, #228]	@ (8000ee0 <SystemClock_Config+0x158>)
 8000dfa:	f043 0302 	orr.w	r3, r3, #2
 8000dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e02:	4b37      	ldr	r3, [pc, #220]	@ (8000ee0 <SystemClock_Config+0x158>)
 8000e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e10:	2300      	movs	r3, #0
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	4b31      	ldr	r3, [pc, #196]	@ (8000edc <SystemClock_Config+0x154>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a30      	ldr	r2, [pc, #192]	@ (8000edc <SystemClock_Config+0x154>)
 8000e1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <SystemClock_Config+0x154>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed8 <SystemClock_Config+0x150>)
 8000e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed8 <SystemClock_Config+0x150>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e36:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <SystemClock_Config+0x150>)
 8000e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000e42:	bf00      	nop
 8000e44:	4b25      	ldr	r3, [pc, #148]	@ (8000edc <SystemClock_Config+0x154>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e50:	d1f8      	bne.n	8000e44 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e52:	2301      	movs	r3, #1
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e60:	2302      	movs	r3, #2
 8000e62:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e64:	2305      	movs	r3, #5
 8000e66:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e68:	23c0      	movs	r3, #192	@ 0xc0
 8000e6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e70:	2314      	movs	r3, #20
 8000e72:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f007 f977 	bl	800817c <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e94:	f000 f9ca 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000e98:	233f      	movs	r3, #63	@ 0x3f
 8000e9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ea8:	2340      	movs	r3, #64	@ 0x40
 8000eaa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eac:	2340      	movs	r3, #64	@ 0x40
 8000eae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eb6:	2340      	movs	r3, #64	@ 0x40
 8000eb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f007 fdb5 	bl	8008a30 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000ecc:	f000 f9ae 	bl	800122c <Error_Handler>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3778      	adds	r7, #120	@ 0x78
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	58000400 	.word	0x58000400
 8000edc:	58024800 	.word	0x58024800
 8000ee0:	58024400 	.word	0x58024400

08000ee4 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0b0      	sub	sp, #192	@ 0xc0
 8000ee8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	22c0      	movs	r2, #192	@ 0xc0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f012 f866 	bl	8012fc2 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 8000ef6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000f02:	2319      	movs	r3, #25
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000f06:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000f24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f008 f937 	bl	80091a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000f38:	f000 f978 	bl	800122c <Error_Handler>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	37c0      	adds	r7, #192	@ 0xc0
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f56:	f002 fbf1 	bl	800373c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000f62:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000f66:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f74:	2303      	movs	r3, #3
 8000f76:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fc0e 	bl	80037ac <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000f94:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000f98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fbff 	bl	80037ac <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8000fb2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fb6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fbf4 	bl	80037ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f002 fbd1 	bl	800376c <HAL_MPU_Enable>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	ed2d 8b02 	vpush	{d8}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a81      	ldr	r2, [pc, #516]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_IncTick();
 8000fea:	f000 fe6f 	bl	8001ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff6:	f040 80f2 	bne.w	80011de <HAL_TIM_PeriodElapsedCallback+0x20a>
  {
    // 缓存adcBuf
    HAL_ADC_Start_DMA(&hadc1, adcBuf, 2);
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	497c      	ldr	r1, [pc, #496]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000ffe:	487d      	ldr	r0, [pc, #500]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001000:	f001 fa64 	bl	80024cc <HAL_ADC_Start_DMA>
 8001004:	4b7a      	ldr	r3, [pc, #488]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	2308      	movs	r3, #8
 800100a:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	dd1d      	ble.n	800104e <HAL_TIM_PeriodElapsedCallback+0x7a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001022:	f3bf 8f4f 	dsb	sy
}
 8001026:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001028:	4a73      	ldr	r2, [pc, #460]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	3320      	adds	r3, #32
 8001034:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3b20      	subs	r3, #32
 800103a:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	dcf2      	bgt.n	8001028 <HAL_TIM_PeriodElapsedCallback+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
 8001042:	f3bf 8f4f 	dsb	sy
}
 8001046:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001048:	f3bf 8f6f 	isb	sy
}
 800104c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800104e:	bf00      	nop
    SCB_InvalidateDCache_by_Addr(adcBuf, sizeof(adcBuf));
    signal_V->u_0 = adcBuf[0] * 3.3f / 65536.0f - 1.5f;
 8001050:	4b67      	ldr	r3, [pc, #412]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800105c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80011fc <HAL_TIM_PeriodElapsedCallback+0x228>
 8001060:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001064:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8001200 <HAL_TIM_PeriodElapsedCallback+0x22c>
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	4b65      	ldr	r3, [pc, #404]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001078:	edc3 7a00 	vstr	s15, [r3]
    signal_I->u_0 = adcBuf[1] * 3.3f / 65536.0f - 1.5f;
 800107c:	4b5c      	ldr	r3, [pc, #368]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001088:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80011fc <HAL_TIM_PeriodElapsedCallback+0x228>
 800108c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001090:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001200 <HAL_TIM_PeriodElapsedCallback+0x22c>
 8001094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001098:	4b5b      	ldr	r3, [pc, #364]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80010a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a4:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control(signal_V, signal_config_V, signal_V); // 电压环
 80010a8:	4b56      	ldr	r3, [pc, #344]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a57      	ldr	r2, [pc, #348]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x238>)
 80010ae:	6811      	ldr	r1, [r2, #0]
 80010b0:	4a54      	ldr	r2, [pc, #336]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f010 f9f3 	bl	80114a0 <pll_Control>
    pll_Control(signal_I, signal_config_I, signal_V); // 电流环
 80010ba:	4b53      	ldr	r3, [pc, #332]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a54      	ldr	r2, [pc, #336]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80010c0:	6811      	ldr	r1, [r2, #0]
 80010c2:	4a50      	ldr	r2, [pc, #320]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f010 f9ea 	bl	80114a0 <pll_Control>
    // 调节SPWM占空比
    // 要想实现PFC，需要让电流相位与电压相位相同，而电压相位由电网控制，所以需要闭环控制的是电流相位
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 80010cc:	4b51      	ldr	r3, [pc, #324]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80010de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80010ec:	4b46      	ldr	r3, [pc, #280]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80010f4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800121c <HAL_TIM_PeriodElapsedCallback+0x248>
 80010f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001100:	f011 f8bc 	bl	801227c <arm_sin_f32>
 8001104:	eef0 7a40 	vmov.f32	s15, s0
 8001108:	ee28 7a27 	vmul.f32	s14, s16, s15
 800110c:	4b41      	ldr	r3, [pc, #260]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800111a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800111e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001126:	4b3b      	ldr	r3, [pc, #236]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112e:	ee17 2a90 	vmov	r2, s15
 8001132:	635a      	str	r2, [r3, #52]	@ 0x34
    // 反馈侧
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 8001134:	4b37      	ldr	r3, [pc, #220]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001142:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001146:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800114a:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800115c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800121c <HAL_TIM_PeriodElapsedCallback+0x248>
 8001160:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001164:	eeb0 0a67 	vmov.f32	s0, s15
 8001168:	f011 f888 	bl	801227c <arm_sin_f32>
 800116c:	eef0 7a40 	vmov.f32	s15, s0
 8001170:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001174:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001182:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001186:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800118a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001196:	ee17 2a90 	vmov	r2, s15
 800119a:	639a      	str	r2, [r3, #56]	@ 0x38

    // todo: 控制中间直流电压
    // static float dcVolt;
    // dcVolt = ina238_GetVolt(&hi2c1);
    // DAC模拟输出，便于调试，不需要时可关闭
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_V->theta + PI / 2.f) + 2048.f);
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80011a4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800121c <HAL_TIM_PeriodElapsedCallback+0x248>
 80011a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	f011 f864 	bl	801227c <arm_sin_f32>
 80011b4:	eef0 7a40 	vmov.f32	s15, s0
 80011b8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001220 <HAL_TIM_PeriodElapsedCallback+0x24c>
 80011bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001224 <HAL_TIM_PeriodElapsedCallback+0x250>
 80011c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011cc:	ee17 3a90 	vmov	r3, s15
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4814      	ldr	r0, [pc, #80]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80011d6:	f002 fbfb 	bl	80039d0 <HAL_DAC_SetValue>

    oled_Show();
 80011da:	f7ff fc53 	bl	8000a84 <oled_Show>
  }
  /* USER CODE END Callback 1 */
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	ecbd 8b02 	vpop	{d8}
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40001000 	.word	0x40001000
 80011f0:	38000000 	.word	0x38000000
 80011f4:	240002ec 	.word	0x240002ec
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	40533333 	.word	0x40533333
 8001200:	47800000 	.word	0x47800000
 8001204:	20000000 	.word	0x20000000
 8001208:	20000008 	.word	0x20000008
 800120c:	20000004 	.word	0x20000004
 8001210:	2000000c 	.word	0x2000000c
 8001214:	240006dc 	.word	0x240006dc
 8001218:	24000000 	.word	0x24000000
 800121c:	3fc90fdb 	.word	0x3fc90fdb
 8001220:	44fa0000 	.word	0x44fa0000
 8001224:	45000000 	.word	0x45000000
 8001228:	240003c8 	.word	0x240003c8

0800122c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800123c:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800123e:	4a28      	ldr	r2, [pc, #160]	@ (80012e0 <MX_SPI1_Init+0xa8>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001244:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800124a:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800124c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001250:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001252:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001254:	2207      	movs	r2, #7
 8001256:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001258:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125e:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001264:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001266:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800126a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800128c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001290:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012ca:	f00a fc67 	bl	800bb9c <HAL_SPI_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80012d4:	f7ff ffaa 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	24000530 	.word	0x24000530
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <MX_SPI2_Init+0xa4>)
 80012ea:	4a28      	ldr	r2, [pc, #160]	@ (800138c <MX_SPI2_Init+0xa8>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <MX_SPI2_Init+0xa4>)
 80012f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012f6:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <MX_SPI2_Init+0xa4>)
 80012f8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001300:	2203      	movs	r2, #3
 8001302:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <MX_SPI2_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001312:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001316:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_SPI2_Init+0xa4>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <MX_SPI2_Init+0xa4>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001338:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001340:	2200      	movs	r2, #0
 8001342:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <MX_SPI2_Init+0xa4>)
 800134c:	2200      	movs	r2, #0
 800134e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001352:	2200      	movs	r2, #0
 8001354:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001358:	2200      	movs	r2, #0
 800135a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <MX_SPI2_Init+0xa4>)
 800135e:	2200      	movs	r2, #0
 8001360:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <MX_SPI2_Init+0xa4>)
 800136a:	2200      	movs	r2, #0
 800136c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	@ (8001388 <MX_SPI2_Init+0xa4>)
 8001376:	f00a fc11 	bl	800bb9c <HAL_SPI_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001380:	f7ff ff54 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	240005b8 	.word	0x240005b8
 800138c:	40003800 	.word	0x40003800

08001390 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a34      	ldr	r2, [pc, #208]	@ (8001480 <HAL_SPI_MspInit+0xf0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12e      	bne.n	8001410 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b2:	4b34      	ldr	r3, [pc, #208]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 80013b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013b8:	4a32      	ldr	r2, [pc, #200]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 80013ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013c2:	4b30      	ldr	r3, [pc, #192]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 80013c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e0:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 80013ee:	23a0      	movs	r3, #160	@ 0xa0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013fa:	2301      	movs	r3, #1
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013fe:	2305      	movs	r3, #5
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	481f      	ldr	r0, [pc, #124]	@ (8001488 <HAL_SPI_MspInit+0xf8>)
 800140a:	f004 fd31 	bl	8005e70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800140e:	e032      	b.n	8001476 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <HAL_SPI_MspInit+0xfc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12d      	bne.n	8001476 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 800141c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001420:	4a18      	ldr	r2, [pc, #96]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001426:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 800142c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143e:	4a11      	ldr	r2, [pc, #68]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <HAL_SPI_MspInit+0xf4>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001456:	2306      	movs	r3, #6
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001466:	2305      	movs	r3, #5
 8001468:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4807      	ldr	r0, [pc, #28]	@ (8001490 <HAL_SPI_MspInit+0x100>)
 8001472:	f004 fcfd 	bl	8005e70 <HAL_GPIO_Init>
}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	@ 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40013000 	.word	0x40013000
 8001484:	58024400 	.word	0x58024400
 8001488:	58020000 	.word	0x58020000
 800148c:	40003800 	.word	0x40003800
 8001490:	58022000 	.word	0x58022000

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <HAL_MspInit+0x30>)
 800149c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014a0:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_MspInit+0x30>)
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_MspInit+0x30>)
 80014ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	58024400 	.word	0x58024400

080014c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b090      	sub	sp, #64	@ 0x40
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	d827      	bhi.n	8001526 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80014d6:	2200      	movs	r2, #0
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	2036      	movs	r0, #54	@ 0x36
 80014dc:	f002 f906 	bl	80036ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014e0:	2036      	movs	r0, #54	@ 0x36
 80014e2:	f002 f91d 	bl	8003720 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014e6:	4a29      	ldr	r2, [pc, #164]	@ (800158c <HAL_InitTick+0xc4>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014ec:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <HAL_InitTick+0xc8>)
 80014ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014f2:	4a27      	ldr	r2, [pc, #156]	@ (8001590 <HAL_InitTick+0xc8>)
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014fc:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_InitTick+0xc8>)
 80014fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800150a:	f107 0210 	add.w	r2, r7, #16
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f007 fe01 	bl	800911c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800151e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001520:	2b00      	cmp	r3, #0
 8001522:	d106      	bne.n	8001532 <HAL_InitTick+0x6a>
 8001524:	e001      	b.n	800152a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e02b      	b.n	8001582 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800152a:	f007 fde1 	bl	80090f0 <HAL_RCC_GetPCLK1Freq>
 800152e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001530:	e004      	b.n	800153c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001532:	f007 fddd 	bl	80090f0 <HAL_RCC_GetPCLK1Freq>
 8001536:	4603      	mov	r3, r0
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800153c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800153e:	4a15      	ldr	r2, [pc, #84]	@ (8001594 <HAL_InitTick+0xcc>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	0c9b      	lsrs	r3, r3, #18
 8001546:	3b01      	subs	r3, #1
 8001548:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <HAL_InitTick+0xd0>)
 800154c:	4a13      	ldr	r2, [pc, #76]	@ (800159c <HAL_InitTick+0xd4>)
 800154e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_InitTick+0xd0>)
 8001552:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001556:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001558:	4a0f      	ldr	r2, [pc, #60]	@ (8001598 <HAL_InitTick+0xd0>)
 800155a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_InitTick+0xd0>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <HAL_InitTick+0xd0>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800156a:	480b      	ldr	r0, [pc, #44]	@ (8001598 <HAL_InitTick+0xd0>)
 800156c:	f00a ff1f 	bl	800c3ae <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d104      	bne.n	8001580 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001576:	4808      	ldr	r0, [pc, #32]	@ (8001598 <HAL_InitTick+0xd0>)
 8001578:	f00a ff70 	bl	800c45c <HAL_TIM_Base_Start_IT>
 800157c:	4603      	mov	r3, r0
 800157e:	e000      	b.n	8001582 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
}
 8001582:	4618      	mov	r0, r3
 8001584:	3740      	adds	r7, #64	@ 0x40
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2400000c 	.word	0x2400000c
 8001590:	58024400 	.word	0x58024400
 8001594:	431bde83 	.word	0x431bde83
 8001598:	24000640 	.word	0x24000640
 800159c:	40001000 	.word	0x40001000

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <NMI_Handler+0x4>

080015a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <MemManage_Handler+0x4>

080015b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <DMA1_Stream0_IRQHandler+0x10>)
 8001606:	f003 f921 	bl	800484c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	24000350 	.word	0x24000350

08001614 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <TIM2_IRQHandler+0x10>)
 800161a:	f00b f907 	bl	800c82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	24000690 	.word	0x24000690

08001628 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <TIM6_DAC_IRQHandler+0x20>)
 800162e:	791b      	ldrb	r3, [r3, #4]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001636:	4804      	ldr	r0, [pc, #16]	@ (8001648 <TIM6_DAC_IRQHandler+0x20>)
 8001638:	f002 f970 	bl	800391c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800163c:	4803      	ldr	r0, [pc, #12]	@ (800164c <TIM6_DAC_IRQHandler+0x24>)
 800163e:	f00b f8f5 	bl	800c82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	240003c8 	.word	0x240003c8
 800164c:	24000640 	.word	0x24000640

08001650 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <OTG_FS_IRQHandler+0x10>)
 8001656:	f005 fbe7 	bl	8006e28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2400208c 	.word	0x2400208c

08001664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return 1;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_kill>:

int _kill(int pid, int sig)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800167e:	f011 fd03 	bl	8013088 <__errno>
 8001682:	4603      	mov	r3, r0
 8001684:	2216      	movs	r2, #22
 8001686:	601a      	str	r2, [r3, #0]
  return -1;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_exit>:

void _exit (int status)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ffe7 	bl	8001674 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016a6:	bf00      	nop
 80016a8:	e7fd      	b.n	80016a6 <_exit+0x12>

080016aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e00a      	b.n	80016d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016bc:	f3af 8000 	nop.w
 80016c0:	4601      	mov	r1, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	60ba      	str	r2, [r7, #8]
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	dbf0      	blt.n	80016bc <_read+0x12>
  }

  return len;
 80016da:	687b      	ldr	r3, [r7, #4]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e009      	b.n	800170a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60ba      	str	r2, [r7, #8]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbf1      	blt.n	80016f6 <_write+0x12>
  }
  return len;
 8001712:	687b      	ldr	r3, [r7, #4]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_close>:

int _close(int file)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001744:	605a      	str	r2, [r3, #4]
  return 0;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_isatty>:

int _isatty(int file)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176a:	b480      	push	{r7}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800178c:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <_sbrk+0x5c>)
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <_sbrk+0x60>)
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001798:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <_sbrk+0x64>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <_sbrk+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d207      	bcs.n	80017c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b4:	f011 fc68 	bl	8013088 <__errno>
 80017b8:	4603      	mov	r3, r0
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <_sbrk+0x64>)
 80017d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	24080000 	.word	0x24080000
 80017e4:	00004000 	.word	0x00004000
 80017e8:	2400068c 	.word	0x2400068c
 80017ec:	24002908 	.word	0x24002908

080017f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017f4:	4b37      	ldr	r3, [pc, #220]	@ (80018d4 <SystemInit+0xe4>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fa:	4a36      	ldr	r2, [pc, #216]	@ (80018d4 <SystemInit+0xe4>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <SystemInit+0xe8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	2b06      	cmp	r3, #6
 800180e:	d807      	bhi.n	8001820 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001810:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <SystemInit+0xe8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 030f 	bic.w	r3, r3, #15
 8001818:	4a2f      	ldr	r2, [pc, #188]	@ (80018d8 <SystemInit+0xe8>)
 800181a:	f043 0307 	orr.w	r3, r3, #7
 800181e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001820:	4b2e      	ldr	r3, [pc, #184]	@ (80018dc <SystemInit+0xec>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2d      	ldr	r2, [pc, #180]	@ (80018dc <SystemInit+0xec>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800182c:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <SystemInit+0xec>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001832:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <SystemInit+0xec>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4929      	ldr	r1, [pc, #164]	@ (80018dc <SystemInit+0xec>)
 8001838:	4b29      	ldr	r3, [pc, #164]	@ (80018e0 <SystemInit+0xf0>)
 800183a:	4013      	ands	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800183e:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <SystemInit+0xe8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800184a:	4b23      	ldr	r3, [pc, #140]	@ (80018d8 <SystemInit+0xe8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 030f 	bic.w	r3, r3, #15
 8001852:	4a21      	ldr	r2, [pc, #132]	@ (80018d8 <SystemInit+0xe8>)
 8001854:	f043 0307 	orr.w	r3, r3, #7
 8001858:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <SystemInit+0xec>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001860:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <SystemInit+0xec>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001866:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <SystemInit+0xec>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <SystemInit+0xec>)
 800186e:	4a1d      	ldr	r2, [pc, #116]	@ (80018e4 <SystemInit+0xf4>)
 8001870:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <SystemInit+0xec>)
 8001874:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <SystemInit+0xf8>)
 8001876:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <SystemInit+0xec>)
 800187a:	4a1c      	ldr	r2, [pc, #112]	@ (80018ec <SystemInit+0xfc>)
 800187c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <SystemInit+0xec>)
 8001880:	2200      	movs	r2, #0
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <SystemInit+0xec>)
 8001886:	4a19      	ldr	r2, [pc, #100]	@ (80018ec <SystemInit+0xfc>)
 8001888:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <SystemInit+0xec>)
 800188c:	2200      	movs	r2, #0
 800188e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <SystemInit+0xec>)
 8001892:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <SystemInit+0xfc>)
 8001894:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <SystemInit+0xec>)
 8001898:	2200      	movs	r2, #0
 800189a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800189c:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <SystemInit+0xec>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0e      	ldr	r2, [pc, #56]	@ (80018dc <SystemInit+0xec>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <SystemInit+0xec>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <SystemInit+0x100>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <SystemInit+0x104>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018ba:	d202      	bcs.n	80018c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018bc:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <SystemInit+0x108>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <SystemInit+0x10c>)
 80018c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00
 80018d8:	52002000 	.word	0x52002000
 80018dc:	58024400 	.word	0x58024400
 80018e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80018e4:	02020200 	.word	0x02020200
 80018e8:	01ff0000 	.word	0x01ff0000
 80018ec:	01010280 	.word	0x01010280
 80018f0:	5c001000 	.word	0x5c001000
 80018f4:	ffff0000 	.word	0xffff0000
 80018f8:	51008108 	.word	0x51008108
 80018fc:	52004000 	.word	0x52004000

08001900 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	f107 0310 	add.w	r3, r7, #16
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800191e:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <MX_TIM2_Init+0x98>)
 8001920:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001924:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001926:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <MX_TIM2_Init+0x98>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <MX_TIM2_Init+0x98>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001932:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <MX_TIM2_Init+0x98>)
 8001934:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001938:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <MX_TIM2_Init+0x98>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <MX_TIM2_Init+0x98>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001946:	4814      	ldr	r0, [pc, #80]	@ (8001998 <MX_TIM2_Init+0x98>)
 8001948:	f00a fd31 	bl	800c3ae <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001952:	f7ff fc6b 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800195a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4619      	mov	r1, r3
 8001962:	480d      	ldr	r0, [pc, #52]	@ (8001998 <MX_TIM2_Init+0x98>)
 8001964:	f00b f996 	bl	800cc94 <HAL_TIM_ConfigClockSource>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800196e:	f7ff fc5d 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	4619      	mov	r1, r3
 800197e:	4806      	ldr	r0, [pc, #24]	@ (8001998 <MX_TIM2_Init+0x98>)
 8001980:	f00b fedc 	bl	800d73c <HAL_TIMEx_MasterConfigSynchronization>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800198a:	f7ff fc4f 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	24000690 	.word	0x24000690

0800199c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b09a      	sub	sp, #104	@ 0x68
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	222c      	movs	r2, #44	@ 0x2c
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f011 faf3 	bl	8012fc2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 80019de:	4a4b      	ldr	r2, [pc, #300]	@ (8001b0c <MX_TIM8_Init+0x170>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019e2:	4b49      	ldr	r3, [pc, #292]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 80019ee:	4b46      	ldr	r3, [pc, #280]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 80019f0:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80019f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b44      	ldr	r3, [pc, #272]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019fc:	4b42      	ldr	r3, [pc, #264]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b41      	ldr	r3, [pc, #260]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a08:	483f      	ldr	r0, [pc, #252]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 8001a0a:	f00a fcd0 	bl	800c3ae <HAL_TIM_Base_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001a14:	f7ff fc0a 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a22:	4619      	mov	r1, r3
 8001a24:	4838      	ldr	r0, [pc, #224]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 8001a26:	f00b f935 	bl	800cc94 <HAL_TIM_ConfigClockSource>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001a30:	f7ff fbfc 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a34:	4834      	ldr	r0, [pc, #208]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 8001a36:	f00a fd89 	bl	800c54c <HAL_TIM_PWM_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001a40:	f7ff fbf4 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a54:	4619      	mov	r1, r3
 8001a56:	482c      	ldr	r0, [pc, #176]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 8001a58:	f00b fe70 	bl	800d73c <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001a62:	f7ff fbe3 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a66:	2360      	movs	r3, #96	@ 0x60
 8001a68:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 6000-1;
 8001a6a:	f241 736f 	movw	r3, #5999	@ 0x176f
 8001a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a70:	2300      	movs	r3, #0
 8001a72:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a74:	2300      	movs	r3, #0
 8001a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	481e      	ldr	r0, [pc, #120]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 8001a8e:	f00a ffed 	bl	800ca6c <HAL_TIM_PWM_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001a98:	f7ff fbc8 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4818      	ldr	r0, [pc, #96]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 8001aa6:	f00a ffe1 	bl	800ca6c <HAL_TIM_PWM_ConfigChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001ab0:	f7ff fbbc 	bl	800122c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ac8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001acc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ad6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4807      	ldr	r0, [pc, #28]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 8001aea:	f00b feb5 	bl	800d858 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8001af4:	f7ff fb9a 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001af8:	4803      	ldr	r0, [pc, #12]	@ (8001b08 <MX_TIM8_Init+0x16c>)
 8001afa:	f000 f847 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 8001afe:	bf00      	nop
 8001b00:	3768      	adds	r7, #104	@ 0x68
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	240006dc 	.word	0x240006dc
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b20:	d117      	bne.n	8001b52 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b28:	4a16      	ldr	r2, [pc, #88]	@ (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	201c      	movs	r0, #28
 8001b46:	f001 fdd1 	bl	80036ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b4a:	201c      	movs	r0, #28
 8001b4c:	f001 fde8 	bl	8003720 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001b50:	e013      	b.n	8001b7a <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM8)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a0c      	ldr	r2, [pc, #48]	@ (8001b88 <HAL_TIM_Base_MspInit+0x78>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d10e      	bne.n	8001b7a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b5c:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	58024400 	.word	0x58024400
 8001b88:	40010400 	.word	0x40010400

08001b8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a12      	ldr	r2, [pc, #72]	@ (8001bf4 <HAL_TIM_MspPostInit+0x68>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d11e      	bne.n	8001bec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_TIM_MspPostInit+0x6c>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb4:	4a10      	ldr	r2, [pc, #64]	@ (8001bf8 <HAL_TIM_MspPostInit+0x6c>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_TIM_MspPostInit+0x6c>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bcc:	23c0      	movs	r3, #192	@ 0xc0
 8001bce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <HAL_TIM_MspPostInit+0x70>)
 8001be8:	f004 f942 	bl	8005e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001bec:	bf00      	nop
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40010400 	.word	0x40010400
 8001bf8:	58024400 	.word	0x58024400
 8001bfc:	58020800 	.word	0x58020800

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c04:	f7ff fdf4 	bl	80017f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	@ (8001c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	@ (8001c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f011 fa31 	bl	8013094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7fe ff9d 	bl	8000b70 <main>
  bx  lr
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c38:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c40:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 8001c44:	08015df8 	.word	0x08015df8
  ldr r2, =_sbss
 8001c48:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8001c4c:	24002904 	.word	0x24002904

08001c50 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC3_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	f001 fd3b 	bl	80036d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c60:	f007 f89c 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_Init+0x68>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	4913      	ldr	r1, [pc, #76]	@ (8001cc0 <HAL_Init+0x6c>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <HAL_Init+0x68>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc0 <HAL_Init+0x6c>)
 8001c88:	5cd3      	ldrb	r3, [r2, r3]
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <HAL_Init+0x70>)
 8001c96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c98:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc8 <HAL_Init+0x74>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c9e:	200f      	movs	r0, #15
 8001ca0:	f7ff fc12 	bl	80014c8 <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e002      	b.n	8001cb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cae:	f7ff fbf1 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	08015248 	.word	0x08015248
 8001cc4:	24000008 	.word	0x24000008
 8001cc8:	24000004 	.word	0x24000004

08001ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_IncTick+0x20>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_IncTick+0x24>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <HAL_IncTick+0x24>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	24000010 	.word	0x24000010
 8001cf0:	24000728 	.word	0x24000728

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <HAL_GetTick+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	24000728 	.word	0x24000728

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff ffee 	bl	8001cf4 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d005      	beq.n	8001d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <HAL_Delay+0x44>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d32:	bf00      	nop
 8001d34:	f7ff ffde 	bl	8001cf4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f7      	bhi.n	8001d34 <HAL_Delay+0x28>
  {
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	24000010 	.word	0x24000010

08001d54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d58:	4b03      	ldr	r3, [pc, #12]	@ (8001d68 <HAL_GetREVID+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	5c001000 	.word	0x5c001000

08001d6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3360      	adds	r3, #96	@ 0x60
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	431a      	orrs	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	611a      	str	r2, [r3, #16]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b087      	sub	sp, #28
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3360      	adds	r3, #96	@ 0x60
 8001e56:	461a      	mov	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	601a      	str	r2, [r3, #0]
  }
}
 8001e70:	bf00      	nop
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b087      	sub	sp, #28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3330      	adds	r3, #48	@ 0x30
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	4413      	add	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	211f      	movs	r1, #31
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	f003 011f 	and.w	r1, r3, #31
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eee:	bf00      	nop
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f023 0203 	bic.w	r2, r3, #3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3314      	adds	r3, #20
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	0e5b      	lsrs	r3, r3, #25
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	0d1b      	lsrs	r3, r3, #20
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2107      	movs	r1, #7
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	401a      	ands	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0d1b      	lsrs	r3, r3, #20
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f90:	43db      	mvns	r3, r3
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0318 	and.w	r3, r3, #24
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f9c:	40d9      	lsrs	r1, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	000fffff 	.word	0x000fffff

08001fc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6093      	str	r3, [r2, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	5fffffc0 	.word	0x5fffffc0

08002000 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002014:	d101      	bne.n	800201a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <LL_ADC_EnableInternalRegulator+0x24>)
 8002036:	4013      	ands	r3, r2
 8002038:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	6fffffc0 	.word	0x6fffffc0

08002050 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002064:	d101      	bne.n	800206a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <LL_ADC_Enable+0x24>)
 8002086:	4013      	ands	r3, r2
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	7fffffc0 	.word	0x7fffffc0

080020a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <LL_ADC_Disable+0x24>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	f043 0202 	orr.w	r2, r3, #2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	7fffffc0 	.word	0x7fffffc0

080020c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <LL_ADC_IsEnabled+0x18>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <LL_ADC_IsEnabled+0x1a>
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d101      	bne.n	8002106 <LL_ADC_IsDisableOngoing+0x18>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <LL_ADC_IsDisableOngoing+0x1a>
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <LL_ADC_REG_StartConversion+0x24>)
 8002122:	4013      	ands	r3, r2
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	7fffffc0 	.word	0x7fffffc0

0800213c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b04      	cmp	r3, #4
 800214e:	d101      	bne.n	8002154 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b08      	cmp	r3, #8
 8002174:	d101      	bne.n	800217a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b089      	sub	sp, #36	@ 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e18f      	b.n	80024c2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7fe f983 	bl	80004bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff19 	bl	8002000 <LL_ADC_IsDeepPowerDownEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff feff 	bl	8001fdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff34 	bl	8002050 <LL_ADC_IsInternalRegulatorEnabled>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d114      	bne.n	8002218 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff18 	bl	8002028 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f8:	4b87      	ldr	r3, [pc, #540]	@ (8002418 <HAL_ADC_Init+0x290>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	4a87      	ldr	r2, [pc, #540]	@ (800241c <HAL_ADC_Init+0x294>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	3301      	adds	r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800220a:	e002      	b.n	8002212 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	3b01      	subs	r3, #1
 8002210:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f9      	bne.n	800220c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff17 	bl	8002050 <LL_ADC_IsInternalRegulatorEnabled>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10d      	bne.n	8002244 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f043 0210 	orr.w	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff77 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 800224e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	f040 8129 	bne.w	80024b0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	f040 8125 	bne.w	80024b0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800226e:	f043 0202 	orr.w	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff24 	bl	80020c8 <LL_ADC_IsEnabled>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d136      	bne.n	80022f4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a65      	ldr	r2, [pc, #404]	@ (8002420 <HAL_ADC_Init+0x298>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_ADC_Init+0x112>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a63      	ldr	r2, [pc, #396]	@ (8002424 <HAL_ADC_Init+0x29c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d10e      	bne.n	80022b8 <HAL_ADC_Init+0x130>
 800229a:	4861      	ldr	r0, [pc, #388]	@ (8002420 <HAL_ADC_Init+0x298>)
 800229c:	f7ff ff14 	bl	80020c8 <LL_ADC_IsEnabled>
 80022a0:	4604      	mov	r4, r0
 80022a2:	4860      	ldr	r0, [pc, #384]	@ (8002424 <HAL_ADC_Init+0x29c>)
 80022a4:	f7ff ff10 	bl	80020c8 <LL_ADC_IsEnabled>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4323      	orrs	r3, r4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e008      	b.n	80022ca <HAL_ADC_Init+0x142>
 80022b8:	485b      	ldr	r0, [pc, #364]	@ (8002428 <HAL_ADC_Init+0x2a0>)
 80022ba:	f7ff ff05 	bl	80020c8 <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d012      	beq.n	80022f4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a53      	ldr	r2, [pc, #332]	@ (8002420 <HAL_ADC_Init+0x298>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d004      	beq.n	80022e2 <HAL_ADC_Init+0x15a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a51      	ldr	r2, [pc, #324]	@ (8002424 <HAL_ADC_Init+0x29c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_Init+0x15e>
 80022e2:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_ADC_Init+0x2a4>)
 80022e4:	e000      	b.n	80022e8 <HAL_ADC_Init+0x160>
 80022e6:	4a52      	ldr	r2, [pc, #328]	@ (8002430 <HAL_ADC_Init+0x2a8>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f7ff fd3c 	bl	8001d6c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80022f4:	f7ff fd2e 	bl	8001d54 <HAL_GetREVID>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022fe:	4293      	cmp	r3, r2
 8002300:	d914      	bls.n	800232c <HAL_ADC_Init+0x1a4>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b10      	cmp	r3, #16
 8002308:	d110      	bne.n	800232c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7d5b      	ldrb	r3, [r3, #21]
 800230e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002314:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800231a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7f1b      	ldrb	r3, [r3, #28]
 8002320:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002322:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002324:	f043 030c 	orr.w	r3, r3, #12
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	e00d      	b.n	8002348 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7d5b      	ldrb	r3, [r3, #21]
 8002330:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002336:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800233c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7f1b      	ldrb	r3, [r3, #28]
 8002342:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7f1b      	ldrb	r3, [r3, #28]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d106      	bne.n	800235e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	3b01      	subs	r3, #1
 8002356:	045b      	lsls	r3, r3, #17
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	4b2c      	ldr	r3, [pc, #176]	@ (8002434 <HAL_ADC_Init+0x2ac>)
 8002382:	4013      	ands	r3, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	69b9      	ldr	r1, [r7, #24]
 800238a:	430b      	orrs	r3, r1
 800238c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fed2 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 8002398:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fedf 	bl	8002162 <LL_ADC_INJ_IsConversionOngoing>
 80023a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d15f      	bne.n	800246c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d15c      	bne.n	800246c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7d1b      	ldrb	r3, [r3, #20]
 80023b6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <HAL_ADC_Init+0x2b0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d130      	bne.n	8002440 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	4b14      	ldr	r3, [pc, #80]	@ (800243c <HAL_ADC_Init+0x2b4>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023f2:	3a01      	subs	r2, #1
 80023f4:	0411      	lsls	r1, r2, #16
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002400:	4311      	orrs	r1, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002406:	430a      	orrs	r2, r1
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	611a      	str	r2, [r3, #16]
 8002414:	e01c      	b.n	8002450 <HAL_ADC_Init+0x2c8>
 8002416:	bf00      	nop
 8002418:	24000004 	.word	0x24000004
 800241c:	053e2d63 	.word	0x053e2d63
 8002420:	40022000 	.word	0x40022000
 8002424:	40022100 	.word	0x40022100
 8002428:	58026000 	.word	0x58026000
 800242c:	40022300 	.word	0x40022300
 8002430:	58026300 	.word	0x58026300
 8002434:	fff0c003 	.word	0xfff0c003
 8002438:	ffffbffc 	.word	0xffffbffc
 800243c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fde0 	bl	800302c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d10c      	bne.n	800248e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f023 010f 	bic.w	r1, r3, #15
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	1e5a      	subs	r2, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	631a      	str	r2, [r3, #48]	@ 0x30
 800248c:	e007      	b.n	800249e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 020f 	bic.w	r2, r2, #15
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80024ae:	e007      	b.n	80024c0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b4:	f043 0210 	orr.w	r2, r3, #16
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	@ 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	bf00      	nop

080024cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a55      	ldr	r2, [pc, #340]	@ (8002634 <HAL_ADC_Start_DMA+0x168>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_ADC_Start_DMA+0x20>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a54      	ldr	r2, [pc, #336]	@ (8002638 <HAL_ADC_Start_DMA+0x16c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_Start_DMA+0x24>
 80024ec:	4b53      	ldr	r3, [pc, #332]	@ (800263c <HAL_ADC_Start_DMA+0x170>)
 80024ee:	e000      	b.n	80024f2 <HAL_ADC_Start_DMA+0x26>
 80024f0:	4b53      	ldr	r3, [pc, #332]	@ (8002640 <HAL_ADC_Start_DMA+0x174>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fd64 	bl	8001fc0 <LL_ADC_GetMultimode>
 80024f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fe1c 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 808c 	bne.w	8002624 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_ADC_Start_DMA+0x4e>
 8002516:	2302      	movs	r3, #2
 8002518:	e087      	b.n	800262a <HAL_ADC_Start_DMA+0x15e>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b05      	cmp	r3, #5
 800252c:	d002      	beq.n	8002534 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b09      	cmp	r3, #9
 8002532:	d170      	bne.n	8002616 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fbfb 	bl	8002d30 <ADC_Enable>
 800253a:	4603      	mov	r3, r0
 800253c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d163      	bne.n	800260c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002548:	4b3e      	ldr	r3, [pc, #248]	@ (8002644 <HAL_ADC_Start_DMA+0x178>)
 800254a:	4013      	ands	r3, r2
 800254c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a37      	ldr	r2, [pc, #220]	@ (8002638 <HAL_ADC_Start_DMA+0x16c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d002      	beq.n	8002564 <HAL_ADC_Start_DMA+0x98>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	e000      	b.n	8002566 <HAL_ADC_Start_DMA+0x9a>
 8002564:	4b33      	ldr	r3, [pc, #204]	@ (8002634 <HAL_ADC_Start_DMA+0x168>)
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	4293      	cmp	r3, r2
 800256c:	d002      	beq.n	8002574 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002578:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f023 0206 	bic.w	r2, r3, #6
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	659a      	str	r2, [r3, #88]	@ 0x58
 8002598:	e002      	b.n	80025a0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a4:	4a28      	ldr	r2, [pc, #160]	@ (8002648 <HAL_ADC_Start_DMA+0x17c>)
 80025a6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ac:	4a27      	ldr	r2, [pc, #156]	@ (800264c <HAL_ADC_Start_DMA+0x180>)
 80025ae:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b4:	4a26      	ldr	r2, [pc, #152]	@ (8002650 <HAL_ADC_Start_DMA+0x184>)
 80025b6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	221c      	movs	r2, #28
 80025be:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0210 	orr.w	r2, r2, #16
 80025d6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f7ff fc89 	bl	8001efa <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3340      	adds	r3, #64	@ 0x40
 80025f2:	4619      	mov	r1, r3
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f001 febe 	bl	8004378 <HAL_DMA_Start_IT>
 80025fc:	4603      	mov	r3, r0
 80025fe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fd85 	bl	8002114 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800260a:	e00d      	b.n	8002628 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002614:	e008      	b.n	8002628 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002622:	e001      	b.n	8002628 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002624:	2302      	movs	r3, #2
 8002626:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002628:	7dfb      	ldrb	r3, [r7, #23]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40022000 	.word	0x40022000
 8002638:	40022100 	.word	0x40022100
 800263c:	40022300 	.word	0x40022300
 8002640:	58026300 	.word	0x58026300
 8002644:	fffff0fe 	.word	0xfffff0fe
 8002648:	08002f03 	.word	0x08002f03
 800264c:	08002fdb 	.word	0x08002fdb
 8002650:	08002ff7 	.word	0x08002ff7

08002654 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b0a1      	sub	sp, #132	@ 0x84
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a9d      	ldr	r2, [pc, #628]	@ (8002920 <HAL_ADC_ConfigChannel+0x290>)
 80026aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x2a>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e321      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x66e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fd38 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 8306 	bne.w	8002ce0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d108      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x62>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0e9b      	lsrs	r3, r3, #26
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2201      	movs	r2, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	e016      	b.n	8002720 <HAL_ADC_ConfigChannel+0x90>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002702:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002704:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800270a:	2320      	movs	r3, #32
 800270c:	e003      	b.n	8002716 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800270e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2201      	movs	r2, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	69d1      	ldr	r1, [r2, #28]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	430b      	orrs	r3, r1
 800272c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	f7ff fbb1 	bl	8001ea2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fcf9 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 800274a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fd06 	bl	8002162 <LL_ADC_INJ_IsConversionOngoing>
 8002756:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 80b3 	bne.w	80028c6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 80af 	bne.w	80028c6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	461a      	mov	r2, r3
 8002776:	f7ff fbd3 	bl	8001f20 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800277a:	4b6a      	ldr	r3, [pc, #424]	@ (8002924 <HAL_ADC_ConfigChannel+0x294>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002786:	d10b      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x110>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	e01d      	b.n	80027dc <HAL_ADC_ConfigChannel+0x14c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x136>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	e00a      	b.n	80027dc <HAL_ADC_ConfigChannel+0x14c>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d027      	beq.n	8002836 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6919      	ldr	r1, [r3, #16]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027f4:	f7ff faee 	bl	8001dd4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6919      	ldr	r1, [r3, #16]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	7e5b      	ldrb	r3, [r3, #25]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d102      	bne.n	800280e <HAL_ADC_ConfigChannel+0x17e>
 8002808:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800280c:	e000      	b.n	8002810 <HAL_ADC_ConfigChannel+0x180>
 800280e:	2300      	movs	r3, #0
 8002810:	461a      	mov	r2, r3
 8002812:	f7ff fb18 	bl	8001e46 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6919      	ldr	r1, [r3, #16]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	7e1b      	ldrb	r3, [r3, #24]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_ADC_ConfigChannel+0x19c>
 8002826:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800282a:	e000      	b.n	800282e <HAL_ADC_ConfigChannel+0x19e>
 800282c:	2300      	movs	r3, #0
 800282e:	461a      	mov	r2, r3
 8002830:	f7ff faf0 	bl	8001e14 <LL_ADC_SetDataRightShift>
 8002834:	e047      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	069b      	lsls	r3, r3, #26
 8002846:	429a      	cmp	r2, r3
 8002848:	d107      	bne.n	800285a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002858:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002860:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	429a      	cmp	r2, r3
 800286c:	d107      	bne.n	800287e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800287c:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002884:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	069b      	lsls	r3, r3, #26
 800288e:	429a      	cmp	r2, r3
 8002890:	d107      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028a0:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	069b      	lsls	r3, r3, #26
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d107      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fbfc 	bl	80020c8 <LL_ADC_IsEnabled>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 820d 	bne.w	8002cf2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	461a      	mov	r2, r3
 80028e6:	f7ff fb47 	bl	8001f78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002920 <HAL_ADC_ConfigChannel+0x290>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	f040 8133 	bne.w	8002b5c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002902:	2b00      	cmp	r3, #0
 8002904:	d110      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x298>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	3301      	adds	r3, #1
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2b09      	cmp	r3, #9
 8002914:	bf94      	ite	ls
 8002916:	2301      	movls	r3, #1
 8002918:	2300      	movhi	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e01e      	b.n	800295c <HAL_ADC_ConfigChannel+0x2cc>
 800291e:	bf00      	nop
 8002920:	47ff0000 	.word	0x47ff0000
 8002924:	5c001000 	.word	0x5c001000
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002938:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800293a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e003      	b.n	800294c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2b09      	cmp	r3, #9
 8002954:	bf94      	ite	ls
 8002956:	2301      	movls	r3, #1
 8002958:	2300      	movhi	r3, #0
 800295a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295c:	2b00      	cmp	r3, #0
 800295e:	d079      	beq.n	8002a54 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_ADC_ConfigChannel+0x2ec>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	3301      	adds	r3, #1
 8002974:	069b      	lsls	r3, r3, #26
 8002976:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800297a:	e015      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x318>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800298a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800298c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800298e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002994:	2320      	movs	r3, #32
 8002996:	e003      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	069b      	lsls	r3, r3, #26
 80029a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x338>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	e017      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x368>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80029d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80029da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80029e0:	2320      	movs	r3, #32
 80029e2:	e003      	b.n	80029ec <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80029e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	ea42 0103 	orr.w	r1, r2, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x38e>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	051b      	lsls	r3, r3, #20
 8002a1c:	e018      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x3c0>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002a36:	2320      	movs	r3, #32
 8002a38:	e003      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a50:	430b      	orrs	r3, r1
 8002a52:	e07e      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x3e0>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	069b      	lsls	r3, r3, #26
 8002a6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a6e:	e015      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x40c>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	069b      	lsls	r3, r3, #26
 8002a98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x42c>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	e017      	b.n	8002aec <HAL_ADC_ConfigChannel+0x45c>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	61bb      	str	r3, [r7, #24]
  return result;
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	e003      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	ea42 0103 	orr.w	r1, r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10d      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x488>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3b1e      	subs	r3, #30
 8002b10:	051b      	lsls	r3, r3, #20
 8002b12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b16:	e01b      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x4c0>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	60fb      	str	r3, [r7, #12]
  return result;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e003      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f003 021f 	and.w	r2, r3, #31
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	3b1e      	subs	r3, #30
 8002b4a:	051b      	lsls	r3, r3, #20
 8002b4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b50:	430b      	orrs	r3, r1
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	6892      	ldr	r2, [r2, #8]
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7ff f9e2 	bl	8001f20 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f280 80c6 	bge.w	8002cf2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a67      	ldr	r2, [pc, #412]	@ (8002d08 <HAL_ADC_ConfigChannel+0x678>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_ADC_ConfigChannel+0x4ea>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a65      	ldr	r2, [pc, #404]	@ (8002d0c <HAL_ADC_ConfigChannel+0x67c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x4ee>
 8002b7a:	4b65      	ldr	r3, [pc, #404]	@ (8002d10 <HAL_ADC_ConfigChannel+0x680>)
 8002b7c:	e000      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x4f0>
 8002b7e:	4b65      	ldr	r3, [pc, #404]	@ (8002d14 <HAL_ADC_ConfigChannel+0x684>)
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f919 	bl	8001db8 <LL_ADC_GetCommonPathInternalCh>
 8002b86:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a5e      	ldr	r2, [pc, #376]	@ (8002d08 <HAL_ADC_ConfigChannel+0x678>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x50c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a5d      	ldr	r2, [pc, #372]	@ (8002d0c <HAL_ADC_ConfigChannel+0x67c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10e      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x52a>
 8002b9c:	485a      	ldr	r0, [pc, #360]	@ (8002d08 <HAL_ADC_ConfigChannel+0x678>)
 8002b9e:	f7ff fa93 	bl	80020c8 <LL_ADC_IsEnabled>
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	4859      	ldr	r0, [pc, #356]	@ (8002d0c <HAL_ADC_ConfigChannel+0x67c>)
 8002ba6:	f7ff fa8f 	bl	80020c8 <LL_ADC_IsEnabled>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4323      	orrs	r3, r4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	e008      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x53c>
 8002bba:	4857      	ldr	r0, [pc, #348]	@ (8002d18 <HAL_ADC_ConfigChannel+0x688>)
 8002bbc:	f7ff fa84 	bl	80020c8 <LL_ADC_IsEnabled>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d07d      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a51      	ldr	r2, [pc, #324]	@ (8002d1c <HAL_ADC_ConfigChannel+0x68c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d130      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5ac>
 8002bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d12b      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d18 <HAL_ADC_ConfigChannel+0x688>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	f040 8081 	bne.w	8002cf2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a44      	ldr	r2, [pc, #272]	@ (8002d08 <HAL_ADC_ConfigChannel+0x678>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_ADC_ConfigChannel+0x574>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a43      	ldr	r2, [pc, #268]	@ (8002d0c <HAL_ADC_ConfigChannel+0x67c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x578>
 8002c04:	4a42      	ldr	r2, [pc, #264]	@ (8002d10 <HAL_ADC_ConfigChannel+0x680>)
 8002c06:	e000      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x57a>
 8002c08:	4a42      	ldr	r2, [pc, #264]	@ (8002d14 <HAL_ADC_ConfigChannel+0x684>)
 8002c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	f7ff f8bd 	bl	8001d92 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c18:	4b41      	ldr	r3, [pc, #260]	@ (8002d20 <HAL_ADC_ConfigChannel+0x690>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	4a41      	ldr	r2, [pc, #260]	@ (8002d24 <HAL_ADC_ConfigChannel+0x694>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	3301      	adds	r3, #1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c2c:	e002      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f9      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c3a:	e05a      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a39      	ldr	r2, [pc, #228]	@ (8002d28 <HAL_ADC_ConfigChannel+0x698>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d11e      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x5f4>
 8002c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d119      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a30      	ldr	r2, [pc, #192]	@ (8002d18 <HAL_ADC_ConfigChannel+0x688>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d14b      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002d08 <HAL_ADC_ConfigChannel+0x678>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_ADC_ConfigChannel+0x5de>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a28      	ldr	r2, [pc, #160]	@ (8002d0c <HAL_ADC_ConfigChannel+0x67c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x5e2>
 8002c6e:	4a28      	ldr	r2, [pc, #160]	@ (8002d10 <HAL_ADC_ConfigChannel+0x680>)
 8002c70:	e000      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x5e4>
 8002c72:	4a28      	ldr	r2, [pc, #160]	@ (8002d14 <HAL_ADC_ConfigChannel+0x684>)
 8002c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f7ff f888 	bl	8001d92 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c82:	e036      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a28      	ldr	r2, [pc, #160]	@ (8002d2c <HAL_ADC_ConfigChannel+0x69c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d131      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x662>
 8002c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d12c      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d18 <HAL_ADC_ConfigChannel+0x688>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d127      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a18      	ldr	r2, [pc, #96]	@ (8002d08 <HAL_ADC_ConfigChannel+0x678>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_ADC_ConfigChannel+0x626>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a16      	ldr	r2, [pc, #88]	@ (8002d0c <HAL_ADC_ConfigChannel+0x67c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x62a>
 8002cb6:	4a16      	ldr	r2, [pc, #88]	@ (8002d10 <HAL_ADC_ConfigChannel+0x680>)
 8002cb8:	e000      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x62c>
 8002cba:	4a16      	ldr	r2, [pc, #88]	@ (8002d14 <HAL_ADC_ConfigChannel+0x684>)
 8002cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7ff f864 	bl	8001d92 <LL_ADC_SetCommonPathInternalCh>
 8002cca:	e012      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002cde:	e008      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cfa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3784      	adds	r7, #132	@ 0x84
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40022100 	.word	0x40022100
 8002d10:	40022300 	.word	0x40022300
 8002d14:	58026300 	.word	0x58026300
 8002d18:	58026000 	.word	0x58026000
 8002d1c:	cb840000 	.word	0xcb840000
 8002d20:	24000004 	.word	0x24000004
 8002d24:	053e2d63 	.word	0x053e2d63
 8002d28:	c7520000 	.word	0xc7520000
 8002d2c:	cfb80000 	.word	0xcfb80000

08002d30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f9c3 	bl	80020c8 <LL_ADC_IsEnabled>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d16e      	bne.n	8002e26 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	4b38      	ldr	r3, [pc, #224]	@ (8002e30 <ADC_Enable+0x100>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	f043 0210 	orr.w	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d66:	f043 0201 	orr.w	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e05a      	b.n	8002e28 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f97e 	bl	8002078 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d7c:	f7fe ffba 	bl	8001cf4 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2b      	ldr	r2, [pc, #172]	@ (8002e34 <ADC_Enable+0x104>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <ADC_Enable+0x66>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <ADC_Enable+0x108>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <ADC_Enable+0x6a>
 8002d96:	4b29      	ldr	r3, [pc, #164]	@ (8002e3c <ADC_Enable+0x10c>)
 8002d98:	e000      	b.n	8002d9c <ADC_Enable+0x6c>
 8002d9a:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <ADC_Enable+0x110>)
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff f90f 	bl	8001fc0 <LL_ADC_GetMultimode>
 8002da2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a23      	ldr	r2, [pc, #140]	@ (8002e38 <ADC_Enable+0x108>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d002      	beq.n	8002db4 <ADC_Enable+0x84>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	e000      	b.n	8002db6 <ADC_Enable+0x86>
 8002db4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e34 <ADC_Enable+0x104>)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02c      	beq.n	8002e18 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d130      	bne.n	8002e26 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dc4:	e028      	b.n	8002e18 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f97c 	bl	80020c8 <LL_ADC_IsEnabled>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f94c 	bl	8002078 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002de0:	f7fe ff88 	bl	8001cf4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d914      	bls.n	8002e18 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d00d      	beq.n	8002e18 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e00:	f043 0210 	orr.w	r2, r3, #16
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e007      	b.n	8002e28 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d1cf      	bne.n	8002dc6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	8000003f 	.word	0x8000003f
 8002e34:	40022000 	.word	0x40022000
 8002e38:	40022100 	.word	0x40022100
 8002e3c:	40022300 	.word	0x40022300
 8002e40:	58026300 	.word	0x58026300

08002e44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f94c 	bl	80020ee <LL_ADC_IsDisableOngoing>
 8002e56:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff f933 	bl	80020c8 <LL_ADC_IsEnabled>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d047      	beq.n	8002ef8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d144      	bne.n	8002ef8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030d 	and.w	r3, r3, #13
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10c      	bne.n	8002e96 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff f90d 	bl	80020a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e8e:	f7fe ff31 	bl	8001cf4 <HAL_GetTick>
 8002e92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e94:	e029      	b.n	8002eea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e023      	b.n	8002efa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002eb2:	f7fe ff1f 	bl	8001cf4 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d914      	bls.n	8002eea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	f043 0210 	orr.w	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e007      	b.n	8002efa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1dc      	bne.n	8002eb2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f14:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d14b      	bne.n	8002fb4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d021      	beq.n	8002f7a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe ff9e 	bl	8001e7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d032      	beq.n	8002fac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d12b      	bne.n	8002fac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d11f      	bne.n	8002fac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f78:	e018      	b.n	8002fac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d105      	bne.n	8002fac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff fb51 	bl	8002654 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fb2:	e00e      	b.n	8002fd2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff fb5b 	bl	800267c <HAL_ADC_ErrorCallback>
}
 8002fc6:	e004      	b.n	8002fd2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7ff fb3d 	bl	8002668 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003002:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003008:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003014:	f043 0204 	orr.w	r2, r3, #4
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff fb2d 	bl	800267c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a7a      	ldr	r2, [pc, #488]	@ (8003224 <ADC_ConfigureBoostMode+0x1f8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <ADC_ConfigureBoostMode+0x1c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a79      	ldr	r2, [pc, #484]	@ (8003228 <ADC_ConfigureBoostMode+0x1fc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d109      	bne.n	800305c <ADC_ConfigureBoostMode+0x30>
 8003048:	4b78      	ldr	r3, [pc, #480]	@ (800322c <ADC_ConfigureBoostMode+0x200>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e008      	b.n	800306e <ADC_ConfigureBoostMode+0x42>
 800305c:	4b74      	ldr	r3, [pc, #464]	@ (8003230 <ADC_ConfigureBoostMode+0x204>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01c      	beq.n	80030ac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003072:	f006 f80d 	bl	8009090 <HAL_RCC_GetHCLKFreq>
 8003076:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003080:	d010      	beq.n	80030a4 <ADC_ConfigureBoostMode+0x78>
 8003082:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003086:	d873      	bhi.n	8003170 <ADC_ConfigureBoostMode+0x144>
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308c:	d002      	beq.n	8003094 <ADC_ConfigureBoostMode+0x68>
 800308e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003092:	d16d      	bne.n	8003170 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	60fb      	str	r3, [r7, #12]
        break;
 80030a2:	e068      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	60fb      	str	r3, [r7, #12]
        break;
 80030aa:	e064      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030ac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	f007 fa7e 	bl	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80030b8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80030c2:	d051      	beq.n	8003168 <ADC_ConfigureBoostMode+0x13c>
 80030c4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80030c8:	d854      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 80030ca:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80030ce:	d047      	beq.n	8003160 <ADC_ConfigureBoostMode+0x134>
 80030d0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80030d4:	d84e      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 80030d6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80030da:	d03d      	beq.n	8003158 <ADC_ConfigureBoostMode+0x12c>
 80030dc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80030e0:	d848      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 80030e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030e6:	d033      	beq.n	8003150 <ADC_ConfigureBoostMode+0x124>
 80030e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030ec:	d842      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 80030ee:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80030f2:	d029      	beq.n	8003148 <ADC_ConfigureBoostMode+0x11c>
 80030f4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80030f8:	d83c      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 80030fa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80030fe:	d01a      	beq.n	8003136 <ADC_ConfigureBoostMode+0x10a>
 8003100:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003104:	d836      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 8003106:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800310a:	d014      	beq.n	8003136 <ADC_ConfigureBoostMode+0x10a>
 800310c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003110:	d830      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 8003112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003116:	d00e      	beq.n	8003136 <ADC_ConfigureBoostMode+0x10a>
 8003118:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800311c:	d82a      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 800311e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003122:	d008      	beq.n	8003136 <ADC_ConfigureBoostMode+0x10a>
 8003124:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003128:	d824      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 800312a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800312e:	d002      	beq.n	8003136 <ADC_ConfigureBoostMode+0x10a>
 8003130:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003134:	d11e      	bne.n	8003174 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0c9b      	lsrs	r3, r3, #18
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	60fb      	str	r3, [r7, #12]
        break;
 8003146:	e016      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	60fb      	str	r3, [r7, #12]
        break;
 800314e:	e012      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	60fb      	str	r3, [r7, #12]
        break;
 8003156:	e00e      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	099b      	lsrs	r3, r3, #6
 800315c:	60fb      	str	r3, [r7, #12]
        break;
 800315e:	e00a      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	09db      	lsrs	r3, r3, #7
 8003164:	60fb      	str	r3, [r7, #12]
        break;
 8003166:	e006      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	60fb      	str	r3, [r7, #12]
        break;
 800316e:	e002      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003174:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003176:	f7fe fded 	bl	8001d54 <HAL_GetREVID>
 800317a:	4603      	mov	r3, r0
 800317c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003180:	4293      	cmp	r3, r2
 8003182:	d815      	bhi.n	80031b0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a2b      	ldr	r2, [pc, #172]	@ (8003234 <ADC_ConfigureBoostMode+0x208>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d908      	bls.n	800319e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800319a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800319c:	e03e      	b.n	800321c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031ac:	609a      	str	r2, [r3, #8]
}
 80031ae:	e035      	b.n	800321c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003238 <ADC_ConfigureBoostMode+0x20c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d808      	bhi.n	80031d0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80031cc:	609a      	str	r2, [r3, #8]
}
 80031ce:	e025      	b.n	800321c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a1a      	ldr	r2, [pc, #104]	@ (800323c <ADC_ConfigureBoostMode+0x210>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d80a      	bhi.n	80031ee <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ea:	609a      	str	r2, [r3, #8]
}
 80031ec:	e016      	b.n	800321c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a13      	ldr	r2, [pc, #76]	@ (8003240 <ADC_ConfigureBoostMode+0x214>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d80a      	bhi.n	800320c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003208:	609a      	str	r2, [r3, #8]
}
 800320a:	e007      	b.n	800321c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40022000 	.word	0x40022000
 8003228:	40022100 	.word	0x40022100
 800322c:	40022300 	.word	0x40022300
 8003230:	58026300 	.word	0x58026300
 8003234:	01312d00 	.word	0x01312d00
 8003238:	005f5e10 	.word	0x005f5e10
 800323c:	00bebc20 	.word	0x00bebc20
 8003240:	017d7840 	.word	0x017d7840

08003244 <LL_ADC_IsEnabled>:
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <LL_ADC_IsEnabled+0x18>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <LL_ADC_IsEnabled+0x1a>
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <LL_ADC_StartCalibration>:
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <LL_ADC_StartCalibration+0x38>)
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800328c:	430a      	orrs	r2, r1
 800328e:	4313      	orrs	r3, r2
 8003290:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	3ffeffc0 	.word	0x3ffeffc0

080032a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032bc:	d101      	bne.n	80032c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_REG_IsConversionOngoing>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d101      	bne.n	80032e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_ADCEx_Calibration_Start+0x1e>
 8003312:	2302      	movs	r3, #2
 8003314:	e04c      	b.n	80033b0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f7ff fd90 	bl	8002e44 <ADC_Disable>
 8003324:	4603      	mov	r3, r0
 8003326:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d135      	bne.n	800339a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003332:	4b21      	ldr	r3, [pc, #132]	@ (80033b8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003334:	4013      	ands	r3, r2
 8003336:	f043 0202 	orr.w	r2, r3, #2
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff90 	bl	800326c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800334c:	e014      	b.n	8003378 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	3301      	adds	r3, #1
 8003352:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4a19      	ldr	r2, [pc, #100]	@ (80033bc <HAL_ADCEx_Calibration_Start+0xc4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d30d      	bcc.n	8003378 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003360:	f023 0312 	bic.w	r3, r3, #18
 8003364:	f043 0210 	orr.w	r2, r3, #16
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e01b      	b.n	80033b0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff93 	bl	80032a8 <LL_ADC_IsCalibrationOnGoing>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e2      	bne.n	800334e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338c:	f023 0303 	bic.w	r3, r3, #3
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	655a      	str	r2, [r3, #84]	@ 0x54
 8003398:	e005      	b.n	80033a6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	f043 0210 	orr.w	r2, r3, #16
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	ffffeefd 	.word	0xffffeefd
 80033bc:	25c3f800 	.word	0x25c3f800

080033c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b09f      	sub	sp, #124	@ 0x7c
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0be      	b.n	800355c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d102      	bne.n	80033fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	e001      	b.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e09d      	b.n	800355c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ff54 	bl	80032d0 <LL_ADC_REG_IsConversionOngoing>
 8003428:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff4e 	bl	80032d0 <LL_ADC_REG_IsConversionOngoing>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d17f      	bne.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800343a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800343c:	2b00      	cmp	r3, #0
 800343e:	d17c      	bne.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a47      	ldr	r2, [pc, #284]	@ (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a46      	ldr	r2, [pc, #280]	@ (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003454:	4b45      	ldr	r3, [pc, #276]	@ (800356c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003456:	e000      	b.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003458:	4b45      	ldr	r3, [pc, #276]	@ (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800345a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d039      	beq.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	431a      	orrs	r2, r3
 8003472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003474:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a3a      	ldr	r2, [pc, #232]	@ (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a38      	ldr	r2, [pc, #224]	@ (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10e      	bne.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800348a:	4836      	ldr	r0, [pc, #216]	@ (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800348c:	f7ff feda 	bl	8003244 <LL_ADC_IsEnabled>
 8003490:	4604      	mov	r4, r0
 8003492:	4835      	ldr	r0, [pc, #212]	@ (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003494:	f7ff fed6 	bl	8003244 <LL_ADC_IsEnabled>
 8003498:	4603      	mov	r3, r0
 800349a:	4323      	orrs	r3, r4
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e008      	b.n	80034ba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80034a8:	4832      	ldr	r0, [pc, #200]	@ (8003574 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034aa:	f7ff fecb 	bl	8003244 <LL_ADC_IsEnabled>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d047      	beq.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003578 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	6811      	ldr	r1, [r2, #0]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	6892      	ldr	r2, [r2, #8]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034d6:	e03a      	b.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80034d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d10e      	bne.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80034f8:	481a      	ldr	r0, [pc, #104]	@ (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034fa:	f7ff fea3 	bl	8003244 <LL_ADC_IsEnabled>
 80034fe:	4604      	mov	r4, r0
 8003500:	4819      	ldr	r0, [pc, #100]	@ (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003502:	f7ff fe9f 	bl	8003244 <LL_ADC_IsEnabled>
 8003506:	4603      	mov	r3, r0
 8003508:	4323      	orrs	r3, r4
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e008      	b.n	8003528 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003516:	4817      	ldr	r0, [pc, #92]	@ (8003574 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003518:	f7ff fe94 	bl	8003244 <LL_ADC_IsEnabled>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800352c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	4b11      	ldr	r3, [pc, #68]	@ (8003578 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003532:	4013      	ands	r3, r2
 8003534:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003536:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003538:	e009      	b.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	f043 0220 	orr.w	r2, r3, #32
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800354c:	e000      	b.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800354e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003558:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800355c:	4618      	mov	r0, r3
 800355e:	377c      	adds	r7, #124	@ 0x7c
 8003560:	46bd      	mov	sp, r7
 8003562:	bd90      	pop	{r4, r7, pc}
 8003564:	40022000 	.word	0x40022000
 8003568:	40022100 	.word	0x40022100
 800356c:	40022300 	.word	0x40022300
 8003570:	58026300 	.word	0x58026300
 8003574:	58026000 	.word	0x58026000
 8003578:	fffff0e0 	.word	0xfffff0e0

0800357c <__NVIC_SetPriorityGrouping>:
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800358c:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <__NVIC_SetPriorityGrouping+0x40>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003598:	4013      	ands	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035a4:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035aa:	4a04      	ldr	r2, [pc, #16]	@ (80035bc <__NVIC_SetPriorityGrouping+0x40>)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	60d3      	str	r3, [r2, #12]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000ed00 	.word	0xe000ed00
 80035c0:	05fa0000 	.word	0x05fa0000

080035c4 <__NVIC_GetPriorityGrouping>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c8:	4b04      	ldr	r3, [pc, #16]	@ (80035dc <__NVIC_GetPriorityGrouping+0x18>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	f003 0307 	and.w	r3, r3, #7
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_EnableIRQ>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	db0b      	blt.n	800360a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4907      	ldr	r1, [pc, #28]	@ (8003618 <__NVIC_EnableIRQ+0x38>)
 80035fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2001      	movs	r0, #1
 8003602:	fa00 f202 	lsl.w	r2, r0, r2
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000e100 	.word	0xe000e100

0800361c <__NVIC_SetPriority>:
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	db0a      	blt.n	8003646 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	490c      	ldr	r1, [pc, #48]	@ (8003668 <__NVIC_SetPriority+0x4c>)
 8003636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	440b      	add	r3, r1
 8003640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003644:	e00a      	b.n	800365c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4908      	ldr	r1, [pc, #32]	@ (800366c <__NVIC_SetPriority+0x50>)
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	3b04      	subs	r3, #4
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	440b      	add	r3, r1
 800365a:	761a      	strb	r2, [r3, #24]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000e100 	.word	0xe000e100
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <NVIC_EncodePriority>:
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	@ 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f1c3 0307 	rsb	r3, r3, #7
 800368a:	2b04      	cmp	r3, #4
 800368c:	bf28      	it	cs
 800368e:	2304      	movcs	r3, #4
 8003690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3304      	adds	r3, #4
 8003696:	2b06      	cmp	r3, #6
 8003698:	d902      	bls.n	80036a0 <NVIC_EncodePriority+0x30>
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3b03      	subs	r3, #3
 800369e:	e000      	b.n	80036a2 <NVIC_EncodePriority+0x32>
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	401a      	ands	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b8:	f04f 31ff 	mov.w	r1, #4294967295
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	43d9      	mvns	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	4313      	orrs	r3, r2
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3724      	adds	r7, #36	@ 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ff4c 	bl	800357c <__NVIC_SetPriorityGrouping>
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036fa:	f7ff ff63 	bl	80035c4 <__NVIC_GetPriorityGrouping>
 80036fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	6978      	ldr	r0, [r7, #20]
 8003706:	f7ff ffb3 	bl	8003670 <NVIC_EncodePriority>
 800370a:	4602      	mov	r2, r0
 800370c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff ff82 	bl	800361c <__NVIC_SetPriority>
}
 8003718:	bf00      	nop
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800372a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ff56 	bl	80035e0 <__NVIC_EnableIRQ>
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003740:	f3bf 8f5f 	dmb	sy
}
 8003744:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003746:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <HAL_MPU_Disable+0x28>)
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	4a06      	ldr	r2, [pc, #24]	@ (8003764 <HAL_MPU_Disable+0x28>)
 800374c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003750:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <HAL_MPU_Disable+0x2c>)
 8003754:	2200      	movs	r2, #0
 8003756:	605a      	str	r2, [r3, #4]
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000ed00 	.word	0xe000ed00
 8003768:	e000ed90 	.word	0xe000ed90

0800376c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003774:	4a0b      	ldr	r2, [pc, #44]	@ (80037a4 <HAL_MPU_Enable+0x38>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800377e:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <HAL_MPU_Enable+0x3c>)
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	4a09      	ldr	r2, [pc, #36]	@ (80037a8 <HAL_MPU_Enable+0x3c>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003788:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800378a:	f3bf 8f4f 	dsb	sy
}
 800378e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003790:	f3bf 8f6f 	isb	sy
}
 8003794:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed90 	.word	0xe000ed90
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	785a      	ldrb	r2, [r3, #1]
 80037b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003830 <HAL_MPU_ConfigRegion+0x84>)
 80037ba:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d029      	beq.n	8003818 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80037c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003830 <HAL_MPU_ConfigRegion+0x84>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	7b1b      	ldrb	r3, [r3, #12]
 80037d0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7adb      	ldrb	r3, [r3, #11]
 80037d6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7a9b      	ldrb	r3, [r3, #10]
 80037de:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7b5b      	ldrb	r3, [r3, #13]
 80037e6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7b9b      	ldrb	r3, [r3, #14]
 80037ee:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7bdb      	ldrb	r3, [r3, #15]
 80037f6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80037f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7a5b      	ldrb	r3, [r3, #9]
 80037fe:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003800:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	7a1b      	ldrb	r3, [r3, #8]
 8003806:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003808:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003810:	4a07      	ldr	r2, [pc, #28]	@ (8003830 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003812:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003814:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003816:	e005      	b.n	8003824 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <HAL_MPU_ConfigRegion+0x84>)
 800381a:	2200      	movs	r2, #0
 800381c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800381e:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <HAL_MPU_ConfigRegion+0x84>)
 8003820:	2200      	movs	r2, #0
 8003822:	611a      	str	r2, [r3, #16]
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed90 	.word	0xe000ed90

08003834 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e014      	b.n	8003870 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	791b      	ldrb	r3, [r3, #4]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fc ff2c 	bl	80006b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	795b      	ldrb	r3, [r3, #5]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_DAC_Start+0x16>
 800388a:	2302      	movs	r3, #2
 800388c:	e040      	b.n	8003910 <HAL_DAC_Start+0x98>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2201      	movs	r2, #1
 80038a8:	409a      	lsls	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10f      	bne.n	80038d8 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d11d      	bne.n	8003902 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e014      	b.n	8003902 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2102      	movs	r1, #2
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d107      	bne.n	8003902 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0202 	orr.w	r2, r2, #2
 8003900:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800392e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003932:	d120      	bne.n	8003976 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003942:	d118      	bne.n	8003976 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2204      	movs	r2, #4
 8003948:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800395e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800396e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f852 	bl	8003a1a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003984:	d120      	bne.n	80039c8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003994:	d118      	bne.n	80039c8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2204      	movs	r2, #4
 800399a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f043 0202 	orr.w	r2, r3, #2
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80039b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80039c0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f972 	bl	8003cac <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4413      	add	r3, r2
 80039f4:	3308      	adds	r3, #8
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e004      	b.n	8003a04 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	3314      	adds	r3, #20
 8003a02:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	461a      	mov	r2, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	795b      	ldrb	r3, [r3, #5]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_DAC_ConfigChannel+0x18>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e12a      	b.n	8003c9e <HAL_DAC_ConfigChannel+0x26e>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2202      	movs	r2, #2
 8003a52:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	f040 8081 	bne.w	8003b60 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003a5e:	f7fe f949 	bl	8001cf4 <HAL_GetTick>
 8003a62:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d140      	bne.n	8003aec <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a6a:	e018      	b.n	8003a9e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a6c:	f7fe f942 	bl	8001cf4 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d911      	bls.n	8003a9e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a80:	4b89      	ldr	r3, [pc, #548]	@ (8003ca8 <HAL_DAC_ConfigChannel+0x278>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f043 0208 	orr.w	r2, r3, #8
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2203      	movs	r2, #3
 8003a98:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e0ff      	b.n	8003c9e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aa4:	4b80      	ldr	r3, [pc, #512]	@ (8003ca8 <HAL_DAC_ConfigChannel+0x278>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1df      	bne.n	8003a6c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7fe f92d 	bl	8001d0c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	6992      	ldr	r2, [r2, #24]
 8003aba:	641a      	str	r2, [r3, #64]	@ 0x40
 8003abc:	e023      	b.n	8003b06 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003abe:	f7fe f919 	bl	8001cf4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d90f      	bls.n	8003aec <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	da0a      	bge.n	8003aec <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f043 0208 	orr.w	r2, r3, #8
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e0d8      	b.n	8003c9e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	dbe3      	blt.n	8003abe <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8003af6:	2001      	movs	r0, #1
 8003af8:	f7fe f908 	bl	8001d0c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	6992      	ldr	r2, [r2, #24]
 8003b04:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	ea02 0103 	and.w	r1, r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	21ff      	movs	r1, #255	@ 0xff
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	ea02 0103 	and.w	r1, r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6a1a      	ldr	r2, [r3, #32]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	409a      	lsls	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d11d      	bne.n	8003ba4 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	221f      	movs	r2, #31
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4013      	ands	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003baa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d102      	bne.n	8003bce <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	e00f      	b.n	8003bee <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d102      	bne.n	8003bdc <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	e008      	b.n	8003bee <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003be4:	2301      	movs	r3, #1
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e001      	b.n	8003bee <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	400a      	ands	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4013      	ands	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	22c0      	movs	r2, #192	@ 0xc0
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43da      	mvns	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20008000 	.word	0x20008000

08003cac <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003cc8:	f7fe f814 	bl	8001cf4 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e316      	b.n	8004306 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a66      	ldr	r2, [pc, #408]	@ (8003e78 <HAL_DMA_Init+0x1b8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d04a      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a65      	ldr	r2, [pc, #404]	@ (8003e7c <HAL_DMA_Init+0x1bc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d045      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a63      	ldr	r2, [pc, #396]	@ (8003e80 <HAL_DMA_Init+0x1c0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d040      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a62      	ldr	r2, [pc, #392]	@ (8003e84 <HAL_DMA_Init+0x1c4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d03b      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a60      	ldr	r2, [pc, #384]	@ (8003e88 <HAL_DMA_Init+0x1c8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d036      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8003e8c <HAL_DMA_Init+0x1cc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d031      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a5d      	ldr	r2, [pc, #372]	@ (8003e90 <HAL_DMA_Init+0x1d0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d02c      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a5c      	ldr	r2, [pc, #368]	@ (8003e94 <HAL_DMA_Init+0x1d4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d027      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8003e98 <HAL_DMA_Init+0x1d8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d022      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a59      	ldr	r2, [pc, #356]	@ (8003e9c <HAL_DMA_Init+0x1dc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d01d      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a57      	ldr	r2, [pc, #348]	@ (8003ea0 <HAL_DMA_Init+0x1e0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d018      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a56      	ldr	r2, [pc, #344]	@ (8003ea4 <HAL_DMA_Init+0x1e4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a54      	ldr	r2, [pc, #336]	@ (8003ea8 <HAL_DMA_Init+0x1e8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00e      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a53      	ldr	r2, [pc, #332]	@ (8003eac <HAL_DMA_Init+0x1ec>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d009      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a51      	ldr	r2, [pc, #324]	@ (8003eb0 <HAL_DMA_Init+0x1f0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <HAL_DMA_Init+0xb8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a50      	ldr	r2, [pc, #320]	@ (8003eb4 <HAL_DMA_Init+0x1f4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <HAL_DMA_Init+0xbc>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <HAL_DMA_Init+0xbe>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 813b 	beq.w	8003ffa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a37      	ldr	r2, [pc, #220]	@ (8003e78 <HAL_DMA_Init+0x1b8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d04a      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a36      	ldr	r2, [pc, #216]	@ (8003e7c <HAL_DMA_Init+0x1bc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d045      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a34      	ldr	r2, [pc, #208]	@ (8003e80 <HAL_DMA_Init+0x1c0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d040      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a33      	ldr	r2, [pc, #204]	@ (8003e84 <HAL_DMA_Init+0x1c4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d03b      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a31      	ldr	r2, [pc, #196]	@ (8003e88 <HAL_DMA_Init+0x1c8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d036      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a30      	ldr	r2, [pc, #192]	@ (8003e8c <HAL_DMA_Init+0x1cc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d031      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8003e90 <HAL_DMA_Init+0x1d0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d02c      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2d      	ldr	r2, [pc, #180]	@ (8003e94 <HAL_DMA_Init+0x1d4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d027      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e98 <HAL_DMA_Init+0x1d8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d022      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2a      	ldr	r2, [pc, #168]	@ (8003e9c <HAL_DMA_Init+0x1dc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d01d      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a28      	ldr	r2, [pc, #160]	@ (8003ea0 <HAL_DMA_Init+0x1e0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d018      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a27      	ldr	r2, [pc, #156]	@ (8003ea4 <HAL_DMA_Init+0x1e4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a25      	ldr	r2, [pc, #148]	@ (8003ea8 <HAL_DMA_Init+0x1e8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00e      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a24      	ldr	r2, [pc, #144]	@ (8003eac <HAL_DMA_Init+0x1ec>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d009      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a22      	ldr	r2, [pc, #136]	@ (8003eb0 <HAL_DMA_Init+0x1f0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_DMA_Init+0x174>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a21      	ldr	r2, [pc, #132]	@ (8003eb4 <HAL_DMA_Init+0x1f4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <HAL_DMA_Init+0x186>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e007      	b.n	8003e56 <HAL_DMA_Init+0x196>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e56:	e02f      	b.n	8003eb8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e58:	f7fd ff4c 	bl	8001cf4 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d928      	bls.n	8003eb8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2203      	movs	r2, #3
 8003e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e246      	b.n	8004306 <HAL_DMA_Init+0x646>
 8003e78:	40020010 	.word	0x40020010
 8003e7c:	40020028 	.word	0x40020028
 8003e80:	40020040 	.word	0x40020040
 8003e84:	40020058 	.word	0x40020058
 8003e88:	40020070 	.word	0x40020070
 8003e8c:	40020088 	.word	0x40020088
 8003e90:	400200a0 	.word	0x400200a0
 8003e94:	400200b8 	.word	0x400200b8
 8003e98:	40020410 	.word	0x40020410
 8003e9c:	40020428 	.word	0x40020428
 8003ea0:	40020440 	.word	0x40020440
 8003ea4:	40020458 	.word	0x40020458
 8003ea8:	40020470 	.word	0x40020470
 8003eac:	40020488 	.word	0x40020488
 8003eb0:	400204a0 	.word	0x400204a0
 8003eb4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1c8      	bne.n	8003e58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4b83      	ldr	r3, [pc, #524]	@ (80040e0 <HAL_DMA_Init+0x420>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003ede:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d107      	bne.n	8003f1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f14:	4313      	orrs	r3, r2
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f1c:	4b71      	ldr	r3, [pc, #452]	@ (80040e4 <HAL_DMA_Init+0x424>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4b71      	ldr	r3, [pc, #452]	@ (80040e8 <HAL_DMA_Init+0x428>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f28:	d328      	bcc.n	8003f7c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b28      	cmp	r3, #40	@ 0x28
 8003f30:	d903      	bls.n	8003f3a <HAL_DMA_Init+0x27a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f38:	d917      	bls.n	8003f6a <HAL_DMA_Init+0x2aa>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f40:	d903      	bls.n	8003f4a <HAL_DMA_Init+0x28a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b42      	cmp	r3, #66	@ 0x42
 8003f48:	d90f      	bls.n	8003f6a <HAL_DMA_Init+0x2aa>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b46      	cmp	r3, #70	@ 0x46
 8003f50:	d903      	bls.n	8003f5a <HAL_DMA_Init+0x29a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b48      	cmp	r3, #72	@ 0x48
 8003f58:	d907      	bls.n	8003f6a <HAL_DMA_Init+0x2aa>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003f60:	d905      	bls.n	8003f6e <HAL_DMA_Init+0x2ae>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b52      	cmp	r3, #82	@ 0x52
 8003f68:	d801      	bhi.n	8003f6e <HAL_DMA_Init+0x2ae>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_DMA_Init+0x2b0>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f7a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0307 	bic.w	r3, r3, #7
 8003f92:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d117      	bne.n	8003fd6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f001 fdcf 	bl	8005b5c <DMA_CheckFifoParam>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2240      	movs	r2, #64	@ 0x40
 8003fc8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e197      	b.n	8004306 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f001 fd0a 	bl	80059f8 <DMA_CalcBaseAndBitshift>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	223f      	movs	r2, #63	@ 0x3f
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	e0cd      	b.n	8004196 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a3b      	ldr	r2, [pc, #236]	@ (80040ec <HAL_DMA_Init+0x42c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d022      	beq.n	800404a <HAL_DMA_Init+0x38a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a39      	ldr	r2, [pc, #228]	@ (80040f0 <HAL_DMA_Init+0x430>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01d      	beq.n	800404a <HAL_DMA_Init+0x38a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a38      	ldr	r2, [pc, #224]	@ (80040f4 <HAL_DMA_Init+0x434>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d018      	beq.n	800404a <HAL_DMA_Init+0x38a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a36      	ldr	r2, [pc, #216]	@ (80040f8 <HAL_DMA_Init+0x438>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_DMA_Init+0x38a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a35      	ldr	r2, [pc, #212]	@ (80040fc <HAL_DMA_Init+0x43c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_DMA_Init+0x38a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a33      	ldr	r2, [pc, #204]	@ (8004100 <HAL_DMA_Init+0x440>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_DMA_Init+0x38a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a32      	ldr	r2, [pc, #200]	@ (8004104 <HAL_DMA_Init+0x444>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_DMA_Init+0x38a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a30      	ldr	r2, [pc, #192]	@ (8004108 <HAL_DMA_Init+0x448>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <HAL_DMA_Init+0x38e>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_DMA_Init+0x390>
 800404e:	2300      	movs	r3, #0
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 8097 	beq.w	8004184 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a24      	ldr	r2, [pc, #144]	@ (80040ec <HAL_DMA_Init+0x42c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d021      	beq.n	80040a4 <HAL_DMA_Init+0x3e4>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a22      	ldr	r2, [pc, #136]	@ (80040f0 <HAL_DMA_Init+0x430>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01c      	beq.n	80040a4 <HAL_DMA_Init+0x3e4>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a21      	ldr	r2, [pc, #132]	@ (80040f4 <HAL_DMA_Init+0x434>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d017      	beq.n	80040a4 <HAL_DMA_Init+0x3e4>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1f      	ldr	r2, [pc, #124]	@ (80040f8 <HAL_DMA_Init+0x438>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d012      	beq.n	80040a4 <HAL_DMA_Init+0x3e4>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1e      	ldr	r2, [pc, #120]	@ (80040fc <HAL_DMA_Init+0x43c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00d      	beq.n	80040a4 <HAL_DMA_Init+0x3e4>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1c      	ldr	r2, [pc, #112]	@ (8004100 <HAL_DMA_Init+0x440>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d008      	beq.n	80040a4 <HAL_DMA_Init+0x3e4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1b      	ldr	r2, [pc, #108]	@ (8004104 <HAL_DMA_Init+0x444>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <HAL_DMA_Init+0x3e4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a19      	ldr	r2, [pc, #100]	@ (8004108 <HAL_DMA_Init+0x448>)
 80040a2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4b13      	ldr	r3, [pc, #76]	@ (800410c <HAL_DMA_Init+0x44c>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b40      	cmp	r3, #64	@ 0x40
 80040ca:	d021      	beq.n	8004110 <HAL_DMA_Init+0x450>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b80      	cmp	r3, #128	@ 0x80
 80040d2:	d102      	bne.n	80040da <HAL_DMA_Init+0x41a>
 80040d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80040d8:	e01b      	b.n	8004112 <HAL_DMA_Init+0x452>
 80040da:	2300      	movs	r3, #0
 80040dc:	e019      	b.n	8004112 <HAL_DMA_Init+0x452>
 80040de:	bf00      	nop
 80040e0:	fe10803f 	.word	0xfe10803f
 80040e4:	5c001000 	.word	0x5c001000
 80040e8:	ffff0000 	.word	0xffff0000
 80040ec:	58025408 	.word	0x58025408
 80040f0:	5802541c 	.word	0x5802541c
 80040f4:	58025430 	.word	0x58025430
 80040f8:	58025444 	.word	0x58025444
 80040fc:	58025458 	.word	0x58025458
 8004100:	5802546c 	.word	0x5802546c
 8004104:	58025480 	.word	0x58025480
 8004108:	58025494 	.word	0x58025494
 800410c:	fffe000f 	.word	0xfffe000f
 8004110:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68d2      	ldr	r2, [r2, #12]
 8004116:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004118:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004140:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	4b6e      	ldr	r3, [pc, #440]	@ (8004310 <HAL_DMA_Init+0x650>)
 8004158:	4413      	add	r3, r2
 800415a:	4a6e      	ldr	r2, [pc, #440]	@ (8004314 <HAL_DMA_Init+0x654>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	009a      	lsls	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f001 fc45 	bl	80059f8 <DMA_CalcBaseAndBitshift>
 800416e:	4603      	mov	r3, r0
 8004170:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2201      	movs	r2, #1
 800417c:	409a      	lsls	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	e008      	b.n	8004196 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2240      	movs	r2, #64	@ 0x40
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2203      	movs	r2, #3
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0b7      	b.n	8004306 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a5f      	ldr	r2, [pc, #380]	@ (8004318 <HAL_DMA_Init+0x658>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d072      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5d      	ldr	r2, [pc, #372]	@ (800431c <HAL_DMA_Init+0x65c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d06d      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004320 <HAL_DMA_Init+0x660>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d068      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004324 <HAL_DMA_Init+0x664>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d063      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a59      	ldr	r2, [pc, #356]	@ (8004328 <HAL_DMA_Init+0x668>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d05e      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a57      	ldr	r2, [pc, #348]	@ (800432c <HAL_DMA_Init+0x66c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d059      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a56      	ldr	r2, [pc, #344]	@ (8004330 <HAL_DMA_Init+0x670>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d054      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a54      	ldr	r2, [pc, #336]	@ (8004334 <HAL_DMA_Init+0x674>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d04f      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a53      	ldr	r2, [pc, #332]	@ (8004338 <HAL_DMA_Init+0x678>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d04a      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a51      	ldr	r2, [pc, #324]	@ (800433c <HAL_DMA_Init+0x67c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d045      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a50      	ldr	r2, [pc, #320]	@ (8004340 <HAL_DMA_Init+0x680>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d040      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a4e      	ldr	r2, [pc, #312]	@ (8004344 <HAL_DMA_Init+0x684>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d03b      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a4d      	ldr	r2, [pc, #308]	@ (8004348 <HAL_DMA_Init+0x688>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d036      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a4b      	ldr	r2, [pc, #300]	@ (800434c <HAL_DMA_Init+0x68c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d031      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a4a      	ldr	r2, [pc, #296]	@ (8004350 <HAL_DMA_Init+0x690>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d02c      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a48      	ldr	r2, [pc, #288]	@ (8004354 <HAL_DMA_Init+0x694>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a47      	ldr	r2, [pc, #284]	@ (8004358 <HAL_DMA_Init+0x698>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a45      	ldr	r2, [pc, #276]	@ (800435c <HAL_DMA_Init+0x69c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a44      	ldr	r2, [pc, #272]	@ (8004360 <HAL_DMA_Init+0x6a0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a42      	ldr	r2, [pc, #264]	@ (8004364 <HAL_DMA_Init+0x6a4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a41      	ldr	r2, [pc, #260]	@ (8004368 <HAL_DMA_Init+0x6a8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a3f      	ldr	r2, [pc, #252]	@ (800436c <HAL_DMA_Init+0x6ac>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a3e      	ldr	r2, [pc, #248]	@ (8004370 <HAL_DMA_Init+0x6b0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_DMA_Init+0x5c6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a3c      	ldr	r2, [pc, #240]	@ (8004374 <HAL_DMA_Init+0x6b4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <HAL_DMA_Init+0x5ca>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_DMA_Init+0x5cc>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d032      	beq.n	80042f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f001 fcdf 	bl	8005c54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b80      	cmp	r3, #128	@ 0x80
 800429c:	d102      	bne.n	80042a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80042b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d010      	beq.n	80042e4 <HAL_DMA_Init+0x624>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d80c      	bhi.n	80042e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f001 fd5c 	bl	8005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	e008      	b.n	80042f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	a7fdabf8 	.word	0xa7fdabf8
 8004314:	cccccccd 	.word	0xcccccccd
 8004318:	40020010 	.word	0x40020010
 800431c:	40020028 	.word	0x40020028
 8004320:	40020040 	.word	0x40020040
 8004324:	40020058 	.word	0x40020058
 8004328:	40020070 	.word	0x40020070
 800432c:	40020088 	.word	0x40020088
 8004330:	400200a0 	.word	0x400200a0
 8004334:	400200b8 	.word	0x400200b8
 8004338:	40020410 	.word	0x40020410
 800433c:	40020428 	.word	0x40020428
 8004340:	40020440 	.word	0x40020440
 8004344:	40020458 	.word	0x40020458
 8004348:	40020470 	.word	0x40020470
 800434c:	40020488 	.word	0x40020488
 8004350:	400204a0 	.word	0x400204a0
 8004354:	400204b8 	.word	0x400204b8
 8004358:	58025408 	.word	0x58025408
 800435c:	5802541c 	.word	0x5802541c
 8004360:	58025430 	.word	0x58025430
 8004364:	58025444 	.word	0x58025444
 8004368:	58025458 	.word	0x58025458
 800436c:	5802546c 	.word	0x5802546c
 8004370:	58025480 	.word	0x58025480
 8004374:	58025494 	.word	0x58025494

08004378 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e226      	b.n	80047e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_DMA_Start_IT+0x2a>
 800439e:	2302      	movs	r3, #2
 80043a0:	e21f      	b.n	80047e2 <HAL_DMA_Start_IT+0x46a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	f040 820a 	bne.w	80047cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a68      	ldr	r2, [pc, #416]	@ (800456c <HAL_DMA_Start_IT+0x1f4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d04a      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a66      	ldr	r2, [pc, #408]	@ (8004570 <HAL_DMA_Start_IT+0x1f8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d045      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a65      	ldr	r2, [pc, #404]	@ (8004574 <HAL_DMA_Start_IT+0x1fc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d040      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a63      	ldr	r2, [pc, #396]	@ (8004578 <HAL_DMA_Start_IT+0x200>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d03b      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a62      	ldr	r2, [pc, #392]	@ (800457c <HAL_DMA_Start_IT+0x204>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d036      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a60      	ldr	r2, [pc, #384]	@ (8004580 <HAL_DMA_Start_IT+0x208>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d031      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5f      	ldr	r2, [pc, #380]	@ (8004584 <HAL_DMA_Start_IT+0x20c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d02c      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a5d      	ldr	r2, [pc, #372]	@ (8004588 <HAL_DMA_Start_IT+0x210>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d027      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a5c      	ldr	r2, [pc, #368]	@ (800458c <HAL_DMA_Start_IT+0x214>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d022      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a5a      	ldr	r2, [pc, #360]	@ (8004590 <HAL_DMA_Start_IT+0x218>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01d      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a59      	ldr	r2, [pc, #356]	@ (8004594 <HAL_DMA_Start_IT+0x21c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d018      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a57      	ldr	r2, [pc, #348]	@ (8004598 <HAL_DMA_Start_IT+0x220>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a56      	ldr	r2, [pc, #344]	@ (800459c <HAL_DMA_Start_IT+0x224>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00e      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a54      	ldr	r2, [pc, #336]	@ (80045a0 <HAL_DMA_Start_IT+0x228>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d009      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a53      	ldr	r2, [pc, #332]	@ (80045a4 <HAL_DMA_Start_IT+0x22c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_DMA_Start_IT+0xee>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a51      	ldr	r2, [pc, #324]	@ (80045a8 <HAL_DMA_Start_IT+0x230>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d108      	bne.n	8004478 <HAL_DMA_Start_IT+0x100>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0201 	bic.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e007      	b.n	8004488 <HAL_DMA_Start_IT+0x110>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f001 f906 	bl	80056a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a34      	ldr	r2, [pc, #208]	@ (800456c <HAL_DMA_Start_IT+0x1f4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d04a      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a33      	ldr	r2, [pc, #204]	@ (8004570 <HAL_DMA_Start_IT+0x1f8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d045      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a31      	ldr	r2, [pc, #196]	@ (8004574 <HAL_DMA_Start_IT+0x1fc>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d040      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a30      	ldr	r2, [pc, #192]	@ (8004578 <HAL_DMA_Start_IT+0x200>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d03b      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <HAL_DMA_Start_IT+0x204>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d036      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004580 <HAL_DMA_Start_IT+0x208>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d031      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004584 <HAL_DMA_Start_IT+0x20c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d02c      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2a      	ldr	r2, [pc, #168]	@ (8004588 <HAL_DMA_Start_IT+0x210>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d027      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a28      	ldr	r2, [pc, #160]	@ (800458c <HAL_DMA_Start_IT+0x214>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d022      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a27      	ldr	r2, [pc, #156]	@ (8004590 <HAL_DMA_Start_IT+0x218>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d01d      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a25      	ldr	r2, [pc, #148]	@ (8004594 <HAL_DMA_Start_IT+0x21c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d018      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a24      	ldr	r2, [pc, #144]	@ (8004598 <HAL_DMA_Start_IT+0x220>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d013      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a22      	ldr	r2, [pc, #136]	@ (800459c <HAL_DMA_Start_IT+0x224>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a21      	ldr	r2, [pc, #132]	@ (80045a0 <HAL_DMA_Start_IT+0x228>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1f      	ldr	r2, [pc, #124]	@ (80045a4 <HAL_DMA_Start_IT+0x22c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_DMA_Start_IT+0x1bc>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1e      	ldr	r2, [pc, #120]	@ (80045a8 <HAL_DMA_Start_IT+0x230>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d101      	bne.n	8004538 <HAL_DMA_Start_IT+0x1c0>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_DMA_Start_IT+0x1c2>
 8004538:	2300      	movs	r3, #0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d036      	beq.n	80045ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 021e 	bic.w	r2, r3, #30
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0216 	orr.w	r2, r2, #22
 8004550:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d03e      	beq.n	80045d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0208 	orr.w	r2, r2, #8
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e035      	b.n	80045d8 <HAL_DMA_Start_IT+0x260>
 800456c:	40020010 	.word	0x40020010
 8004570:	40020028 	.word	0x40020028
 8004574:	40020040 	.word	0x40020040
 8004578:	40020058 	.word	0x40020058
 800457c:	40020070 	.word	0x40020070
 8004580:	40020088 	.word	0x40020088
 8004584:	400200a0 	.word	0x400200a0
 8004588:	400200b8 	.word	0x400200b8
 800458c:	40020410 	.word	0x40020410
 8004590:	40020428 	.word	0x40020428
 8004594:	40020440 	.word	0x40020440
 8004598:	40020458 	.word	0x40020458
 800459c:	40020470 	.word	0x40020470
 80045a0:	40020488 	.word	0x40020488
 80045a4:	400204a0 	.word	0x400204a0
 80045a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 020e 	bic.w	r2, r3, #14
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 020a 	orr.w	r2, r2, #10
 80045be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0204 	orr.w	r2, r2, #4
 80045d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a83      	ldr	r2, [pc, #524]	@ (80047ec <HAL_DMA_Start_IT+0x474>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d072      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a82      	ldr	r2, [pc, #520]	@ (80047f0 <HAL_DMA_Start_IT+0x478>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d06d      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a80      	ldr	r2, [pc, #512]	@ (80047f4 <HAL_DMA_Start_IT+0x47c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d068      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a7f      	ldr	r2, [pc, #508]	@ (80047f8 <HAL_DMA_Start_IT+0x480>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d063      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a7d      	ldr	r2, [pc, #500]	@ (80047fc <HAL_DMA_Start_IT+0x484>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d05e      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7c      	ldr	r2, [pc, #496]	@ (8004800 <HAL_DMA_Start_IT+0x488>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d059      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a7a      	ldr	r2, [pc, #488]	@ (8004804 <HAL_DMA_Start_IT+0x48c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d054      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a79      	ldr	r2, [pc, #484]	@ (8004808 <HAL_DMA_Start_IT+0x490>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d04f      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a77      	ldr	r2, [pc, #476]	@ (800480c <HAL_DMA_Start_IT+0x494>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d04a      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a76      	ldr	r2, [pc, #472]	@ (8004810 <HAL_DMA_Start_IT+0x498>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d045      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a74      	ldr	r2, [pc, #464]	@ (8004814 <HAL_DMA_Start_IT+0x49c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d040      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a73      	ldr	r2, [pc, #460]	@ (8004818 <HAL_DMA_Start_IT+0x4a0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d03b      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a71      	ldr	r2, [pc, #452]	@ (800481c <HAL_DMA_Start_IT+0x4a4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d036      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a70      	ldr	r2, [pc, #448]	@ (8004820 <HAL_DMA_Start_IT+0x4a8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d031      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a6e      	ldr	r2, [pc, #440]	@ (8004824 <HAL_DMA_Start_IT+0x4ac>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d02c      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6d      	ldr	r2, [pc, #436]	@ (8004828 <HAL_DMA_Start_IT+0x4b0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d027      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a6b      	ldr	r2, [pc, #428]	@ (800482c <HAL_DMA_Start_IT+0x4b4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d022      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6a      	ldr	r2, [pc, #424]	@ (8004830 <HAL_DMA_Start_IT+0x4b8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d01d      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a68      	ldr	r2, [pc, #416]	@ (8004834 <HAL_DMA_Start_IT+0x4bc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d018      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a67      	ldr	r2, [pc, #412]	@ (8004838 <HAL_DMA_Start_IT+0x4c0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a65      	ldr	r2, [pc, #404]	@ (800483c <HAL_DMA_Start_IT+0x4c4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a64      	ldr	r2, [pc, #400]	@ (8004840 <HAL_DMA_Start_IT+0x4c8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d009      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a62      	ldr	r2, [pc, #392]	@ (8004844 <HAL_DMA_Start_IT+0x4cc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_DMA_Start_IT+0x350>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a61      	ldr	r2, [pc, #388]	@ (8004848 <HAL_DMA_Start_IT+0x4d0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_DMA_Start_IT+0x354>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_DMA_Start_IT+0x356>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01a      	beq.n	8004708 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004706:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a37      	ldr	r2, [pc, #220]	@ (80047ec <HAL_DMA_Start_IT+0x474>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d04a      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a36      	ldr	r2, [pc, #216]	@ (80047f0 <HAL_DMA_Start_IT+0x478>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d045      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a34      	ldr	r2, [pc, #208]	@ (80047f4 <HAL_DMA_Start_IT+0x47c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d040      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a33      	ldr	r2, [pc, #204]	@ (80047f8 <HAL_DMA_Start_IT+0x480>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d03b      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a31      	ldr	r2, [pc, #196]	@ (80047fc <HAL_DMA_Start_IT+0x484>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d036      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a30      	ldr	r2, [pc, #192]	@ (8004800 <HAL_DMA_Start_IT+0x488>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d031      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2e      	ldr	r2, [pc, #184]	@ (8004804 <HAL_DMA_Start_IT+0x48c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d02c      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2d      	ldr	r2, [pc, #180]	@ (8004808 <HAL_DMA_Start_IT+0x490>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d027      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2b      	ldr	r2, [pc, #172]	@ (800480c <HAL_DMA_Start_IT+0x494>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d022      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2a      	ldr	r2, [pc, #168]	@ (8004810 <HAL_DMA_Start_IT+0x498>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d01d      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a28      	ldr	r2, [pc, #160]	@ (8004814 <HAL_DMA_Start_IT+0x49c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d018      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a27      	ldr	r2, [pc, #156]	@ (8004818 <HAL_DMA_Start_IT+0x4a0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d013      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a25      	ldr	r2, [pc, #148]	@ (800481c <HAL_DMA_Start_IT+0x4a4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00e      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a24      	ldr	r2, [pc, #144]	@ (8004820 <HAL_DMA_Start_IT+0x4a8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <HAL_DMA_Start_IT+0x4ac>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <HAL_DMA_Start_IT+0x430>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a21      	ldr	r2, [pc, #132]	@ (8004828 <HAL_DMA_Start_IT+0x4b0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d108      	bne.n	80047ba <HAL_DMA_Start_IT+0x442>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e012      	b.n	80047e0 <HAL_DMA_Start_IT+0x468>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e009      	b.n	80047e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40020010 	.word	0x40020010
 80047f0:	40020028 	.word	0x40020028
 80047f4:	40020040 	.word	0x40020040
 80047f8:	40020058 	.word	0x40020058
 80047fc:	40020070 	.word	0x40020070
 8004800:	40020088 	.word	0x40020088
 8004804:	400200a0 	.word	0x400200a0
 8004808:	400200b8 	.word	0x400200b8
 800480c:	40020410 	.word	0x40020410
 8004810:	40020428 	.word	0x40020428
 8004814:	40020440 	.word	0x40020440
 8004818:	40020458 	.word	0x40020458
 800481c:	40020470 	.word	0x40020470
 8004820:	40020488 	.word	0x40020488
 8004824:	400204a0 	.word	0x400204a0
 8004828:	400204b8 	.word	0x400204b8
 800482c:	58025408 	.word	0x58025408
 8004830:	5802541c 	.word	0x5802541c
 8004834:	58025430 	.word	0x58025430
 8004838:	58025444 	.word	0x58025444
 800483c:	58025458 	.word	0x58025458
 8004840:	5802546c 	.word	0x5802546c
 8004844:	58025480 	.word	0x58025480
 8004848:	58025494 	.word	0x58025494

0800484c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	@ 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004858:	4b67      	ldr	r3, [pc, #412]	@ (80049f8 <HAL_DMA_IRQHandler+0x1ac>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a67      	ldr	r2, [pc, #412]	@ (80049fc <HAL_DMA_IRQHandler+0x1b0>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	0a9b      	lsrs	r3, r3, #10
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004870:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a5f      	ldr	r2, [pc, #380]	@ (8004a00 <HAL_DMA_IRQHandler+0x1b4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d04a      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a5d      	ldr	r2, [pc, #372]	@ (8004a04 <HAL_DMA_IRQHandler+0x1b8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d045      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a5c      	ldr	r2, [pc, #368]	@ (8004a08 <HAL_DMA_IRQHandler+0x1bc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d040      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a5a      	ldr	r2, [pc, #360]	@ (8004a0c <HAL_DMA_IRQHandler+0x1c0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d03b      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a59      	ldr	r2, [pc, #356]	@ (8004a10 <HAL_DMA_IRQHandler+0x1c4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d036      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a57      	ldr	r2, [pc, #348]	@ (8004a14 <HAL_DMA_IRQHandler+0x1c8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d031      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a56      	ldr	r2, [pc, #344]	@ (8004a18 <HAL_DMA_IRQHandler+0x1cc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d02c      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a54      	ldr	r2, [pc, #336]	@ (8004a1c <HAL_DMA_IRQHandler+0x1d0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d027      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a53      	ldr	r2, [pc, #332]	@ (8004a20 <HAL_DMA_IRQHandler+0x1d4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d022      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a51      	ldr	r2, [pc, #324]	@ (8004a24 <HAL_DMA_IRQHandler+0x1d8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01d      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a50      	ldr	r2, [pc, #320]	@ (8004a28 <HAL_DMA_IRQHandler+0x1dc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d018      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a4e      	ldr	r2, [pc, #312]	@ (8004a2c <HAL_DMA_IRQHandler+0x1e0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004a30 <HAL_DMA_IRQHandler+0x1e4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a4b      	ldr	r2, [pc, #300]	@ (8004a34 <HAL_DMA_IRQHandler+0x1e8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a4a      	ldr	r2, [pc, #296]	@ (8004a38 <HAL_DMA_IRQHandler+0x1ec>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_DMA_IRQHandler+0xd2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a48      	ldr	r2, [pc, #288]	@ (8004a3c <HAL_DMA_IRQHandler+0x1f0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d101      	bne.n	8004922 <HAL_DMA_IRQHandler+0xd6>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <HAL_DMA_IRQHandler+0xd8>
 8004922:	2300      	movs	r3, #0
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 842b 	beq.w	8005180 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	2208      	movs	r2, #8
 8004934:	409a      	lsls	r2, r3
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80a2 	beq.w	8004a84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2e      	ldr	r2, [pc, #184]	@ (8004a00 <HAL_DMA_IRQHandler+0x1b4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d04a      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a2d      	ldr	r2, [pc, #180]	@ (8004a04 <HAL_DMA_IRQHandler+0x1b8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d045      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2b      	ldr	r2, [pc, #172]	@ (8004a08 <HAL_DMA_IRQHandler+0x1bc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d040      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2a      	ldr	r2, [pc, #168]	@ (8004a0c <HAL_DMA_IRQHandler+0x1c0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d03b      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a28      	ldr	r2, [pc, #160]	@ (8004a10 <HAL_DMA_IRQHandler+0x1c4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d036      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a27      	ldr	r2, [pc, #156]	@ (8004a14 <HAL_DMA_IRQHandler+0x1c8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d031      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a25      	ldr	r2, [pc, #148]	@ (8004a18 <HAL_DMA_IRQHandler+0x1cc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d02c      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a24      	ldr	r2, [pc, #144]	@ (8004a1c <HAL_DMA_IRQHandler+0x1d0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d027      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a22      	ldr	r2, [pc, #136]	@ (8004a20 <HAL_DMA_IRQHandler+0x1d4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d022      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a21      	ldr	r2, [pc, #132]	@ (8004a24 <HAL_DMA_IRQHandler+0x1d8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d01d      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a28 <HAL_DMA_IRQHandler+0x1dc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d018      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a2c <HAL_DMA_IRQHandler+0x1e0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d013      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a30 <HAL_DMA_IRQHandler+0x1e4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00e      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a34 <HAL_DMA_IRQHandler+0x1e8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d009      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a19      	ldr	r2, [pc, #100]	@ (8004a38 <HAL_DMA_IRQHandler+0x1ec>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d004      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x194>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a18      	ldr	r2, [pc, #96]	@ (8004a3c <HAL_DMA_IRQHandler+0x1f0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d12f      	bne.n	8004a40 <HAL_DMA_IRQHandler+0x1f4>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bf14      	ite	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	2300      	moveq	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	e02e      	b.n	8004a54 <HAL_DMA_IRQHandler+0x208>
 80049f6:	bf00      	nop
 80049f8:	24000004 	.word	0x24000004
 80049fc:	1b4e81b5 	.word	0x1b4e81b5
 8004a00:	40020010 	.word	0x40020010
 8004a04:	40020028 	.word	0x40020028
 8004a08:	40020040 	.word	0x40020040
 8004a0c:	40020058 	.word	0x40020058
 8004a10:	40020070 	.word	0x40020070
 8004a14:	40020088 	.word	0x40020088
 8004a18:	400200a0 	.word	0x400200a0
 8004a1c:	400200b8 	.word	0x400200b8
 8004a20:	40020410 	.word	0x40020410
 8004a24:	40020428 	.word	0x40020428
 8004a28:	40020440 	.word	0x40020440
 8004a2c:	40020458 	.word	0x40020458
 8004a30:	40020470 	.word	0x40020470
 8004a34:	40020488 	.word	0x40020488
 8004a38:	400204a0 	.word	0x400204a0
 8004a3c:	400204b8 	.word	0x400204b8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf14      	ite	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	2300      	moveq	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0204 	bic.w	r2, r2, #4
 8004a66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	2208      	movs	r2, #8
 8004a72:	409a      	lsls	r2, r3
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7c:	f043 0201 	orr.w	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d06e      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a69      	ldr	r2, [pc, #420]	@ (8004c44 <HAL_DMA_IRQHandler+0x3f8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d04a      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a67      	ldr	r2, [pc, #412]	@ (8004c48 <HAL_DMA_IRQHandler+0x3fc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d045      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a66      	ldr	r2, [pc, #408]	@ (8004c4c <HAL_DMA_IRQHandler+0x400>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d040      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a64      	ldr	r2, [pc, #400]	@ (8004c50 <HAL_DMA_IRQHandler+0x404>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d03b      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a63      	ldr	r2, [pc, #396]	@ (8004c54 <HAL_DMA_IRQHandler+0x408>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d036      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a61      	ldr	r2, [pc, #388]	@ (8004c58 <HAL_DMA_IRQHandler+0x40c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d031      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a60      	ldr	r2, [pc, #384]	@ (8004c5c <HAL_DMA_IRQHandler+0x410>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d02c      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a5e      	ldr	r2, [pc, #376]	@ (8004c60 <HAL_DMA_IRQHandler+0x414>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d027      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a5d      	ldr	r2, [pc, #372]	@ (8004c64 <HAL_DMA_IRQHandler+0x418>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d022      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a5b      	ldr	r2, [pc, #364]	@ (8004c68 <HAL_DMA_IRQHandler+0x41c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01d      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a5a      	ldr	r2, [pc, #360]	@ (8004c6c <HAL_DMA_IRQHandler+0x420>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d018      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a58      	ldr	r2, [pc, #352]	@ (8004c70 <HAL_DMA_IRQHandler+0x424>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d013      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a57      	ldr	r2, [pc, #348]	@ (8004c74 <HAL_DMA_IRQHandler+0x428>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00e      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a55      	ldr	r2, [pc, #340]	@ (8004c78 <HAL_DMA_IRQHandler+0x42c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d009      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a54      	ldr	r2, [pc, #336]	@ (8004c7c <HAL_DMA_IRQHandler+0x430>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d004      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x2ee>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a52      	ldr	r2, [pc, #328]	@ (8004c80 <HAL_DMA_IRQHandler+0x434>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10a      	bne.n	8004b50 <HAL_DMA_IRQHandler+0x304>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bf14      	ite	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	2300      	moveq	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e003      	b.n	8004b58 <HAL_DMA_IRQHandler+0x30c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	2201      	movs	r2, #1
 8004b66:	409a      	lsls	r2, r3
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b70:	f043 0202 	orr.w	r2, r3, #2
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	2204      	movs	r2, #4
 8004b82:	409a      	lsls	r2, r3
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 808f 	beq.w	8004cac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2c      	ldr	r2, [pc, #176]	@ (8004c44 <HAL_DMA_IRQHandler+0x3f8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d04a      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c48 <HAL_DMA_IRQHandler+0x3fc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d045      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a29      	ldr	r2, [pc, #164]	@ (8004c4c <HAL_DMA_IRQHandler+0x400>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d040      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a27      	ldr	r2, [pc, #156]	@ (8004c50 <HAL_DMA_IRQHandler+0x404>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d03b      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a26      	ldr	r2, [pc, #152]	@ (8004c54 <HAL_DMA_IRQHandler+0x408>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d036      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a24      	ldr	r2, [pc, #144]	@ (8004c58 <HAL_DMA_IRQHandler+0x40c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d031      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a23      	ldr	r2, [pc, #140]	@ (8004c5c <HAL_DMA_IRQHandler+0x410>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d02c      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a21      	ldr	r2, [pc, #132]	@ (8004c60 <HAL_DMA_IRQHandler+0x414>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d027      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a20      	ldr	r2, [pc, #128]	@ (8004c64 <HAL_DMA_IRQHandler+0x418>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d022      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1e      	ldr	r2, [pc, #120]	@ (8004c68 <HAL_DMA_IRQHandler+0x41c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01d      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c6c <HAL_DMA_IRQHandler+0x420>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d018      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1b      	ldr	r2, [pc, #108]	@ (8004c70 <HAL_DMA_IRQHandler+0x424>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c74 <HAL_DMA_IRQHandler+0x428>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00e      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a18      	ldr	r2, [pc, #96]	@ (8004c78 <HAL_DMA_IRQHandler+0x42c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d009      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a17      	ldr	r2, [pc, #92]	@ (8004c7c <HAL_DMA_IRQHandler+0x430>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x3e2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a15      	ldr	r2, [pc, #84]	@ (8004c80 <HAL_DMA_IRQHandler+0x434>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d12a      	bne.n	8004c84 <HAL_DMA_IRQHandler+0x438>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf14      	ite	ne
 8004c3c:	2301      	movne	r3, #1
 8004c3e:	2300      	moveq	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	e023      	b.n	8004c8c <HAL_DMA_IRQHandler+0x440>
 8004c44:	40020010 	.word	0x40020010
 8004c48:	40020028 	.word	0x40020028
 8004c4c:	40020040 	.word	0x40020040
 8004c50:	40020058 	.word	0x40020058
 8004c54:	40020070 	.word	0x40020070
 8004c58:	40020088 	.word	0x40020088
 8004c5c:	400200a0 	.word	0x400200a0
 8004c60:	400200b8 	.word	0x400200b8
 8004c64:	40020410 	.word	0x40020410
 8004c68:	40020428 	.word	0x40020428
 8004c6c:	40020440 	.word	0x40020440
 8004c70:	40020458 	.word	0x40020458
 8004c74:	40020470 	.word	0x40020470
 8004c78:	40020488 	.word	0x40020488
 8004c7c:	400204a0 	.word	0x400204a0
 8004c80:	400204b8 	.word	0x400204b8
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00d      	beq.n	8004cac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	2204      	movs	r2, #4
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca4:	f043 0204 	orr.w	r2, r3, #4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	2210      	movs	r2, #16
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80a6 	beq.w	8004e0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a85      	ldr	r2, [pc, #532]	@ (8004edc <HAL_DMA_IRQHandler+0x690>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d04a      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a83      	ldr	r2, [pc, #524]	@ (8004ee0 <HAL_DMA_IRQHandler+0x694>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d045      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a82      	ldr	r2, [pc, #520]	@ (8004ee4 <HAL_DMA_IRQHandler+0x698>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d040      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a80      	ldr	r2, [pc, #512]	@ (8004ee8 <HAL_DMA_IRQHandler+0x69c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d03b      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a7f      	ldr	r2, [pc, #508]	@ (8004eec <HAL_DMA_IRQHandler+0x6a0>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d036      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a7d      	ldr	r2, [pc, #500]	@ (8004ef0 <HAL_DMA_IRQHandler+0x6a4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d031      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a7c      	ldr	r2, [pc, #496]	@ (8004ef4 <HAL_DMA_IRQHandler+0x6a8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d02c      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7a      	ldr	r2, [pc, #488]	@ (8004ef8 <HAL_DMA_IRQHandler+0x6ac>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d027      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a79      	ldr	r2, [pc, #484]	@ (8004efc <HAL_DMA_IRQHandler+0x6b0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d022      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a77      	ldr	r2, [pc, #476]	@ (8004f00 <HAL_DMA_IRQHandler+0x6b4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01d      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a76      	ldr	r2, [pc, #472]	@ (8004f04 <HAL_DMA_IRQHandler+0x6b8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d018      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a74      	ldr	r2, [pc, #464]	@ (8004f08 <HAL_DMA_IRQHandler+0x6bc>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a73      	ldr	r2, [pc, #460]	@ (8004f0c <HAL_DMA_IRQHandler+0x6c0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a71      	ldr	r2, [pc, #452]	@ (8004f10 <HAL_DMA_IRQHandler+0x6c4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a70      	ldr	r2, [pc, #448]	@ (8004f14 <HAL_DMA_IRQHandler+0x6c8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x516>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8004f18 <HAL_DMA_IRQHandler+0x6cc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10a      	bne.n	8004d78 <HAL_DMA_IRQHandler+0x52c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e009      	b.n	8004d8c <HAL_DMA_IRQHandler+0x540>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d03e      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	2210      	movs	r2, #16
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d018      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d108      	bne.n	8004dce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d024      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
 8004dcc:	e01f      	b.n	8004e0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01b      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
 8004dde:	e016      	b.n	8004e0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d107      	bne.n	8004dfe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0208 	bic.w	r2, r2, #8
 8004dfc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	2220      	movs	r2, #32
 8004e18:	409a      	lsls	r2, r3
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8110 	beq.w	8005044 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a2c      	ldr	r2, [pc, #176]	@ (8004edc <HAL_DMA_IRQHandler+0x690>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d04a      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee0 <HAL_DMA_IRQHandler+0x694>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d045      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a29      	ldr	r2, [pc, #164]	@ (8004ee4 <HAL_DMA_IRQHandler+0x698>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d040      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a28      	ldr	r2, [pc, #160]	@ (8004ee8 <HAL_DMA_IRQHandler+0x69c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d03b      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a26      	ldr	r2, [pc, #152]	@ (8004eec <HAL_DMA_IRQHandler+0x6a0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d036      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a25      	ldr	r2, [pc, #148]	@ (8004ef0 <HAL_DMA_IRQHandler+0x6a4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d031      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a23      	ldr	r2, [pc, #140]	@ (8004ef4 <HAL_DMA_IRQHandler+0x6a8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d02c      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a22      	ldr	r2, [pc, #136]	@ (8004ef8 <HAL_DMA_IRQHandler+0x6ac>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d027      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a20      	ldr	r2, [pc, #128]	@ (8004efc <HAL_DMA_IRQHandler+0x6b0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d022      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1f      	ldr	r2, [pc, #124]	@ (8004f00 <HAL_DMA_IRQHandler+0x6b4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d01d      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f04 <HAL_DMA_IRQHandler+0x6b8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d018      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	@ (8004f08 <HAL_DMA_IRQHandler+0x6bc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d013      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f0c <HAL_DMA_IRQHandler+0x6c0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00e      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a19      	ldr	r2, [pc, #100]	@ (8004f10 <HAL_DMA_IRQHandler+0x6c4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d009      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a17      	ldr	r2, [pc, #92]	@ (8004f14 <HAL_DMA_IRQHandler+0x6c8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x678>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a16      	ldr	r2, [pc, #88]	@ (8004f18 <HAL_DMA_IRQHandler+0x6cc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d12b      	bne.n	8004f1c <HAL_DMA_IRQHandler+0x6d0>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e02a      	b.n	8004f30 <HAL_DMA_IRQHandler+0x6e4>
 8004eda:	bf00      	nop
 8004edc:	40020010 	.word	0x40020010
 8004ee0:	40020028 	.word	0x40020028
 8004ee4:	40020040 	.word	0x40020040
 8004ee8:	40020058 	.word	0x40020058
 8004eec:	40020070 	.word	0x40020070
 8004ef0:	40020088 	.word	0x40020088
 8004ef4:	400200a0 	.word	0x400200a0
 8004ef8:	400200b8 	.word	0x400200b8
 8004efc:	40020410 	.word	0x40020410
 8004f00:	40020428 	.word	0x40020428
 8004f04:	40020440 	.word	0x40020440
 8004f08:	40020458 	.word	0x40020458
 8004f0c:	40020470 	.word	0x40020470
 8004f10:	40020488 	.word	0x40020488
 8004f14:	400204a0 	.word	0x400204a0
 8004f18:	400204b8 	.word	0x400204b8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf14      	ite	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	2300      	moveq	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8087 	beq.w	8005044 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	2220      	movs	r2, #32
 8004f40:	409a      	lsls	r2, r3
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d139      	bne.n	8004fc6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0216 	bic.w	r2, r2, #22
 8004f60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d103      	bne.n	8004f82 <HAL_DMA_IRQHandler+0x736>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0208 	bic.w	r2, r2, #8
 8004f90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	223f      	movs	r2, #63	@ 0x3f
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 834a 	beq.w	8005650 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4798      	blx	r3
          }
          return;
 8004fc4:	e344      	b.n	8005650 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d018      	beq.n	8005006 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d108      	bne.n	8004ff4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d02c      	beq.n	8005044 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
 8004ff2:	e027      	b.n	8005044 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d023      	beq.n	8005044 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
 8005004:	e01e      	b.n	8005044 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10f      	bne.n	8005034 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0210 	bic.w	r2, r2, #16
 8005022:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8306 	beq.w	800565a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8088 	beq.w	800516c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2204      	movs	r2, #4
 8005060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a7a      	ldr	r2, [pc, #488]	@ (8005254 <HAL_DMA_IRQHandler+0xa08>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d04a      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a79      	ldr	r2, [pc, #484]	@ (8005258 <HAL_DMA_IRQHandler+0xa0c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d045      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a77      	ldr	r2, [pc, #476]	@ (800525c <HAL_DMA_IRQHandler+0xa10>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d040      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a76      	ldr	r2, [pc, #472]	@ (8005260 <HAL_DMA_IRQHandler+0xa14>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d03b      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a74      	ldr	r2, [pc, #464]	@ (8005264 <HAL_DMA_IRQHandler+0xa18>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d036      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a73      	ldr	r2, [pc, #460]	@ (8005268 <HAL_DMA_IRQHandler+0xa1c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d031      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a71      	ldr	r2, [pc, #452]	@ (800526c <HAL_DMA_IRQHandler+0xa20>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d02c      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a70      	ldr	r2, [pc, #448]	@ (8005270 <HAL_DMA_IRQHandler+0xa24>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d027      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005274 <HAL_DMA_IRQHandler+0xa28>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d022      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005278 <HAL_DMA_IRQHandler+0xa2c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d01d      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a6b      	ldr	r2, [pc, #428]	@ (800527c <HAL_DMA_IRQHandler+0xa30>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d018      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005280 <HAL_DMA_IRQHandler+0xa34>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a68      	ldr	r2, [pc, #416]	@ (8005284 <HAL_DMA_IRQHandler+0xa38>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00e      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a67      	ldr	r2, [pc, #412]	@ (8005288 <HAL_DMA_IRQHandler+0xa3c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d009      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a65      	ldr	r2, [pc, #404]	@ (800528c <HAL_DMA_IRQHandler+0xa40>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_DMA_IRQHandler+0x8b8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a64      	ldr	r2, [pc, #400]	@ (8005290 <HAL_DMA_IRQHandler+0xa44>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <HAL_DMA_IRQHandler+0x8ca>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e007      	b.n	8005126 <HAL_DMA_IRQHandler+0x8da>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3301      	adds	r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512e:	429a      	cmp	r2, r3
 8005130:	d307      	bcc.n	8005142 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f2      	bne.n	8005126 <HAL_DMA_IRQHandler+0x8da>
 8005140:	e000      	b.n	8005144 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005142:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2203      	movs	r2, #3
 8005156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800515a:	e003      	b.n	8005164 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8272 	beq.w	800565a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	4798      	blx	r3
 800517e:	e26c      	b.n	800565a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a43      	ldr	r2, [pc, #268]	@ (8005294 <HAL_DMA_IRQHandler+0xa48>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d022      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x984>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a42      	ldr	r2, [pc, #264]	@ (8005298 <HAL_DMA_IRQHandler+0xa4c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d01d      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x984>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a40      	ldr	r2, [pc, #256]	@ (800529c <HAL_DMA_IRQHandler+0xa50>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d018      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x984>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a3f      	ldr	r2, [pc, #252]	@ (80052a0 <HAL_DMA_IRQHandler+0xa54>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d013      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x984>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a3d      	ldr	r2, [pc, #244]	@ (80052a4 <HAL_DMA_IRQHandler+0xa58>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00e      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x984>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a3c      	ldr	r2, [pc, #240]	@ (80052a8 <HAL_DMA_IRQHandler+0xa5c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d009      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x984>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a3a      	ldr	r2, [pc, #232]	@ (80052ac <HAL_DMA_IRQHandler+0xa60>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x984>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a39      	ldr	r2, [pc, #228]	@ (80052b0 <HAL_DMA_IRQHandler+0xa64>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d101      	bne.n	80051d4 <HAL_DMA_IRQHandler+0x988>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <HAL_DMA_IRQHandler+0x98a>
 80051d4:	2300      	movs	r3, #0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 823f 	beq.w	800565a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	2204      	movs	r2, #4
 80051ee:	409a      	lsls	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80cd 	beq.w	8005394 <HAL_DMA_IRQHandler+0xb48>
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80c7 	beq.w	8005394 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520a:	f003 031f 	and.w	r3, r3, #31
 800520e:	2204      	movs	r2, #4
 8005210:	409a      	lsls	r2, r3
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d049      	beq.n	80052b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8210 	beq.w	8005654 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800523c:	e20a      	b.n	8005654 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8206 	beq.w	8005654 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005250:	e200      	b.n	8005654 <HAL_DMA_IRQHandler+0xe08>
 8005252:	bf00      	nop
 8005254:	40020010 	.word	0x40020010
 8005258:	40020028 	.word	0x40020028
 800525c:	40020040 	.word	0x40020040
 8005260:	40020058 	.word	0x40020058
 8005264:	40020070 	.word	0x40020070
 8005268:	40020088 	.word	0x40020088
 800526c:	400200a0 	.word	0x400200a0
 8005270:	400200b8 	.word	0x400200b8
 8005274:	40020410 	.word	0x40020410
 8005278:	40020428 	.word	0x40020428
 800527c:	40020440 	.word	0x40020440
 8005280:	40020458 	.word	0x40020458
 8005284:	40020470 	.word	0x40020470
 8005288:	40020488 	.word	0x40020488
 800528c:	400204a0 	.word	0x400204a0
 8005290:	400204b8 	.word	0x400204b8
 8005294:	58025408 	.word	0x58025408
 8005298:	5802541c 	.word	0x5802541c
 800529c:	58025430 	.word	0x58025430
 80052a0:	58025444 	.word	0x58025444
 80052a4:	58025458 	.word	0x58025458
 80052a8:	5802546c 	.word	0x5802546c
 80052ac:	58025480 	.word	0x58025480
 80052b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d160      	bne.n	8005380 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a7f      	ldr	r2, [pc, #508]	@ (80054c0 <HAL_DMA_IRQHandler+0xc74>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d04a      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a7d      	ldr	r2, [pc, #500]	@ (80054c4 <HAL_DMA_IRQHandler+0xc78>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d045      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a7c      	ldr	r2, [pc, #496]	@ (80054c8 <HAL_DMA_IRQHandler+0xc7c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d040      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a7a      	ldr	r2, [pc, #488]	@ (80054cc <HAL_DMA_IRQHandler+0xc80>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d03b      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a79      	ldr	r2, [pc, #484]	@ (80054d0 <HAL_DMA_IRQHandler+0xc84>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d036      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a77      	ldr	r2, [pc, #476]	@ (80054d4 <HAL_DMA_IRQHandler+0xc88>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d031      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a76      	ldr	r2, [pc, #472]	@ (80054d8 <HAL_DMA_IRQHandler+0xc8c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d02c      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a74      	ldr	r2, [pc, #464]	@ (80054dc <HAL_DMA_IRQHandler+0xc90>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d027      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a73      	ldr	r2, [pc, #460]	@ (80054e0 <HAL_DMA_IRQHandler+0xc94>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d022      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a71      	ldr	r2, [pc, #452]	@ (80054e4 <HAL_DMA_IRQHandler+0xc98>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01d      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a70      	ldr	r2, [pc, #448]	@ (80054e8 <HAL_DMA_IRQHandler+0xc9c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d018      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a6e      	ldr	r2, [pc, #440]	@ (80054ec <HAL_DMA_IRQHandler+0xca0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a6d      	ldr	r2, [pc, #436]	@ (80054f0 <HAL_DMA_IRQHandler+0xca4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00e      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a6b      	ldr	r2, [pc, #428]	@ (80054f4 <HAL_DMA_IRQHandler+0xca8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6a      	ldr	r2, [pc, #424]	@ (80054f8 <HAL_DMA_IRQHandler+0xcac>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_DMA_IRQHandler+0xb12>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a68      	ldr	r2, [pc, #416]	@ (80054fc <HAL_DMA_IRQHandler+0xcb0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <HAL_DMA_IRQHandler+0xb24>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0208 	bic.w	r2, r2, #8
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	e007      	b.n	8005380 <HAL_DMA_IRQHandler+0xb34>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0204 	bic.w	r2, r2, #4
 800537e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8165 	beq.w	8005654 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005392:	e15f      	b.n	8005654 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	2202      	movs	r2, #2
 800539e:	409a      	lsls	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80c5 	beq.w	8005534 <HAL_DMA_IRQHandler+0xce8>
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80bf 	beq.w	8005534 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2202      	movs	r2, #2
 80053c0:	409a      	lsls	r2, r3
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d018      	beq.n	8005402 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 813a 	beq.w	8005658 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053ec:	e134      	b.n	8005658 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 8130 	beq.w	8005658 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005400:	e12a      	b.n	8005658 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	f040 8089 	bne.w	8005520 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2b      	ldr	r2, [pc, #172]	@ (80054c0 <HAL_DMA_IRQHandler+0xc74>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d04a      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a29      	ldr	r2, [pc, #164]	@ (80054c4 <HAL_DMA_IRQHandler+0xc78>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d045      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a28      	ldr	r2, [pc, #160]	@ (80054c8 <HAL_DMA_IRQHandler+0xc7c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d040      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a26      	ldr	r2, [pc, #152]	@ (80054cc <HAL_DMA_IRQHandler+0xc80>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d03b      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a25      	ldr	r2, [pc, #148]	@ (80054d0 <HAL_DMA_IRQHandler+0xc84>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d036      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a23      	ldr	r2, [pc, #140]	@ (80054d4 <HAL_DMA_IRQHandler+0xc88>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d031      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a22      	ldr	r2, [pc, #136]	@ (80054d8 <HAL_DMA_IRQHandler+0xc8c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d02c      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a20      	ldr	r2, [pc, #128]	@ (80054dc <HAL_DMA_IRQHandler+0xc90>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d027      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1f      	ldr	r2, [pc, #124]	@ (80054e0 <HAL_DMA_IRQHandler+0xc94>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d022      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1d      	ldr	r2, [pc, #116]	@ (80054e4 <HAL_DMA_IRQHandler+0xc98>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01d      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1c      	ldr	r2, [pc, #112]	@ (80054e8 <HAL_DMA_IRQHandler+0xc9c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d018      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1a      	ldr	r2, [pc, #104]	@ (80054ec <HAL_DMA_IRQHandler+0xca0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a19      	ldr	r2, [pc, #100]	@ (80054f0 <HAL_DMA_IRQHandler+0xca4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00e      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a17      	ldr	r2, [pc, #92]	@ (80054f4 <HAL_DMA_IRQHandler+0xca8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d009      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a16      	ldr	r2, [pc, #88]	@ (80054f8 <HAL_DMA_IRQHandler+0xcac>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_DMA_IRQHandler+0xc62>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a14      	ldr	r2, [pc, #80]	@ (80054fc <HAL_DMA_IRQHandler+0xcb0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d128      	bne.n	8005500 <HAL_DMA_IRQHandler+0xcb4>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0214 	bic.w	r2, r2, #20
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	e027      	b.n	8005510 <HAL_DMA_IRQHandler+0xcc4>
 80054c0:	40020010 	.word	0x40020010
 80054c4:	40020028 	.word	0x40020028
 80054c8:	40020040 	.word	0x40020040
 80054cc:	40020058 	.word	0x40020058
 80054d0:	40020070 	.word	0x40020070
 80054d4:	40020088 	.word	0x40020088
 80054d8:	400200a0 	.word	0x400200a0
 80054dc:	400200b8 	.word	0x400200b8
 80054e0:	40020410 	.word	0x40020410
 80054e4:	40020428 	.word	0x40020428
 80054e8:	40020440 	.word	0x40020440
 80054ec:	40020458 	.word	0x40020458
 80054f0:	40020470 	.word	0x40020470
 80054f4:	40020488 	.word	0x40020488
 80054f8:	400204a0 	.word	0x400204a0
 80054fc:	400204b8 	.word	0x400204b8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 020a 	bic.w	r2, r2, #10
 800550e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8097 	beq.w	8005658 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005532:	e091      	b.n	8005658 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2208      	movs	r2, #8
 800553e:	409a      	lsls	r2, r3
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8088 	beq.w	800565a <HAL_DMA_IRQHandler+0xe0e>
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8082 	beq.w	800565a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a41      	ldr	r2, [pc, #260]	@ (8005660 <HAL_DMA_IRQHandler+0xe14>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d04a      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a3f      	ldr	r2, [pc, #252]	@ (8005664 <HAL_DMA_IRQHandler+0xe18>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d045      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a3e      	ldr	r2, [pc, #248]	@ (8005668 <HAL_DMA_IRQHandler+0xe1c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d040      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a3c      	ldr	r2, [pc, #240]	@ (800566c <HAL_DMA_IRQHandler+0xe20>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d03b      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a3b      	ldr	r2, [pc, #236]	@ (8005670 <HAL_DMA_IRQHandler+0xe24>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d036      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a39      	ldr	r2, [pc, #228]	@ (8005674 <HAL_DMA_IRQHandler+0xe28>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d031      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a38      	ldr	r2, [pc, #224]	@ (8005678 <HAL_DMA_IRQHandler+0xe2c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d02c      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a36      	ldr	r2, [pc, #216]	@ (800567c <HAL_DMA_IRQHandler+0xe30>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d027      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a35      	ldr	r2, [pc, #212]	@ (8005680 <HAL_DMA_IRQHandler+0xe34>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d022      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a33      	ldr	r2, [pc, #204]	@ (8005684 <HAL_DMA_IRQHandler+0xe38>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01d      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a32      	ldr	r2, [pc, #200]	@ (8005688 <HAL_DMA_IRQHandler+0xe3c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d018      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a30      	ldr	r2, [pc, #192]	@ (800568c <HAL_DMA_IRQHandler+0xe40>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d013      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005690 <HAL_DMA_IRQHandler+0xe44>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00e      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005694 <HAL_DMA_IRQHandler+0xe48>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d009      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005698 <HAL_DMA_IRQHandler+0xe4c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xdaa>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a2a      	ldr	r2, [pc, #168]	@ (800569c <HAL_DMA_IRQHandler+0xe50>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d108      	bne.n	8005608 <HAL_DMA_IRQHandler+0xdbc>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 021c 	bic.w	r2, r2, #28
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e007      	b.n	8005618 <HAL_DMA_IRQHandler+0xdcc>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 020e 	bic.w	r2, r2, #14
 8005616:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2201      	movs	r2, #1
 8005622:	409a      	lsls	r2, r3
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d009      	beq.n	800565a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	4798      	blx	r3
 800564e:	e004      	b.n	800565a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005650:	bf00      	nop
 8005652:	e002      	b.n	800565a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005654:	bf00      	nop
 8005656:	e000      	b.n	800565a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005658:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800565a:	3728      	adds	r7, #40	@ 0x28
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40020010 	.word	0x40020010
 8005664:	40020028 	.word	0x40020028
 8005668:	40020040 	.word	0x40020040
 800566c:	40020058 	.word	0x40020058
 8005670:	40020070 	.word	0x40020070
 8005674:	40020088 	.word	0x40020088
 8005678:	400200a0 	.word	0x400200a0
 800567c:	400200b8 	.word	0x400200b8
 8005680:	40020410 	.word	0x40020410
 8005684:	40020428 	.word	0x40020428
 8005688:	40020440 	.word	0x40020440
 800568c:	40020458 	.word	0x40020458
 8005690:	40020470 	.word	0x40020470
 8005694:	40020488 	.word	0x40020488
 8005698:	400204a0 	.word	0x400204a0
 800569c:	400204b8 	.word	0x400204b8

080056a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7f      	ldr	r2, [pc, #508]	@ (80058bc <DMA_SetConfig+0x21c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d072      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a7d      	ldr	r2, [pc, #500]	@ (80058c0 <DMA_SetConfig+0x220>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d06d      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a7c      	ldr	r2, [pc, #496]	@ (80058c4 <DMA_SetConfig+0x224>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d068      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a7a      	ldr	r2, [pc, #488]	@ (80058c8 <DMA_SetConfig+0x228>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d063      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a79      	ldr	r2, [pc, #484]	@ (80058cc <DMA_SetConfig+0x22c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d05e      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a77      	ldr	r2, [pc, #476]	@ (80058d0 <DMA_SetConfig+0x230>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d059      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a76      	ldr	r2, [pc, #472]	@ (80058d4 <DMA_SetConfig+0x234>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d054      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a74      	ldr	r2, [pc, #464]	@ (80058d8 <DMA_SetConfig+0x238>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d04f      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a73      	ldr	r2, [pc, #460]	@ (80058dc <DMA_SetConfig+0x23c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d04a      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a71      	ldr	r2, [pc, #452]	@ (80058e0 <DMA_SetConfig+0x240>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d045      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a70      	ldr	r2, [pc, #448]	@ (80058e4 <DMA_SetConfig+0x244>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d040      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a6e      	ldr	r2, [pc, #440]	@ (80058e8 <DMA_SetConfig+0x248>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d03b      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a6d      	ldr	r2, [pc, #436]	@ (80058ec <DMA_SetConfig+0x24c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d036      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a6b      	ldr	r2, [pc, #428]	@ (80058f0 <DMA_SetConfig+0x250>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d031      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a6a      	ldr	r2, [pc, #424]	@ (80058f4 <DMA_SetConfig+0x254>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d02c      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a68      	ldr	r2, [pc, #416]	@ (80058f8 <DMA_SetConfig+0x258>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d027      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a67      	ldr	r2, [pc, #412]	@ (80058fc <DMA_SetConfig+0x25c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d022      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a65      	ldr	r2, [pc, #404]	@ (8005900 <DMA_SetConfig+0x260>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01d      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a64      	ldr	r2, [pc, #400]	@ (8005904 <DMA_SetConfig+0x264>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d018      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a62      	ldr	r2, [pc, #392]	@ (8005908 <DMA_SetConfig+0x268>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a61      	ldr	r2, [pc, #388]	@ (800590c <DMA_SetConfig+0x26c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00e      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a5f      	ldr	r2, [pc, #380]	@ (8005910 <DMA_SetConfig+0x270>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a5e      	ldr	r2, [pc, #376]	@ (8005914 <DMA_SetConfig+0x274>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005918 <DMA_SetConfig+0x278>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <DMA_SetConfig+0x10e>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <DMA_SetConfig+0x110>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80057bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80057ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a39      	ldr	r2, [pc, #228]	@ (80058bc <DMA_SetConfig+0x21c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d04a      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a38      	ldr	r2, [pc, #224]	@ (80058c0 <DMA_SetConfig+0x220>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d045      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a36      	ldr	r2, [pc, #216]	@ (80058c4 <DMA_SetConfig+0x224>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d040      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a35      	ldr	r2, [pc, #212]	@ (80058c8 <DMA_SetConfig+0x228>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d03b      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a33      	ldr	r2, [pc, #204]	@ (80058cc <DMA_SetConfig+0x22c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d036      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a32      	ldr	r2, [pc, #200]	@ (80058d0 <DMA_SetConfig+0x230>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d031      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a30      	ldr	r2, [pc, #192]	@ (80058d4 <DMA_SetConfig+0x234>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02c      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2f      	ldr	r2, [pc, #188]	@ (80058d8 <DMA_SetConfig+0x238>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d027      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2d      	ldr	r2, [pc, #180]	@ (80058dc <DMA_SetConfig+0x23c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d022      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2c      	ldr	r2, [pc, #176]	@ (80058e0 <DMA_SetConfig+0x240>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d01d      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2a      	ldr	r2, [pc, #168]	@ (80058e4 <DMA_SetConfig+0x244>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d018      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a29      	ldr	r2, [pc, #164]	@ (80058e8 <DMA_SetConfig+0x248>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a27      	ldr	r2, [pc, #156]	@ (80058ec <DMA_SetConfig+0x24c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00e      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a26      	ldr	r2, [pc, #152]	@ (80058f0 <DMA_SetConfig+0x250>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d009      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a24      	ldr	r2, [pc, #144]	@ (80058f4 <DMA_SetConfig+0x254>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a23      	ldr	r2, [pc, #140]	@ (80058f8 <DMA_SetConfig+0x258>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d101      	bne.n	8005874 <DMA_SetConfig+0x1d4>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <DMA_SetConfig+0x1d6>
 8005874:	2300      	movs	r3, #0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d059      	beq.n	800592e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	223f      	movs	r2, #63	@ 0x3f
 8005884:	409a      	lsls	r2, r3
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005898:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b40      	cmp	r3, #64	@ 0x40
 80058a8:	d138      	bne.n	800591c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058ba:	e086      	b.n	80059ca <DMA_SetConfig+0x32a>
 80058bc:	40020010 	.word	0x40020010
 80058c0:	40020028 	.word	0x40020028
 80058c4:	40020040 	.word	0x40020040
 80058c8:	40020058 	.word	0x40020058
 80058cc:	40020070 	.word	0x40020070
 80058d0:	40020088 	.word	0x40020088
 80058d4:	400200a0 	.word	0x400200a0
 80058d8:	400200b8 	.word	0x400200b8
 80058dc:	40020410 	.word	0x40020410
 80058e0:	40020428 	.word	0x40020428
 80058e4:	40020440 	.word	0x40020440
 80058e8:	40020458 	.word	0x40020458
 80058ec:	40020470 	.word	0x40020470
 80058f0:	40020488 	.word	0x40020488
 80058f4:	400204a0 	.word	0x400204a0
 80058f8:	400204b8 	.word	0x400204b8
 80058fc:	58025408 	.word	0x58025408
 8005900:	5802541c 	.word	0x5802541c
 8005904:	58025430 	.word	0x58025430
 8005908:	58025444 	.word	0x58025444
 800590c:	58025458 	.word	0x58025458
 8005910:	5802546c 	.word	0x5802546c
 8005914:	58025480 	.word	0x58025480
 8005918:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	60da      	str	r2, [r3, #12]
}
 800592c:	e04d      	b.n	80059ca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a29      	ldr	r2, [pc, #164]	@ (80059d8 <DMA_SetConfig+0x338>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <DMA_SetConfig+0x2de>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a27      	ldr	r2, [pc, #156]	@ (80059dc <DMA_SetConfig+0x33c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01d      	beq.n	800597e <DMA_SetConfig+0x2de>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a26      	ldr	r2, [pc, #152]	@ (80059e0 <DMA_SetConfig+0x340>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d018      	beq.n	800597e <DMA_SetConfig+0x2de>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a24      	ldr	r2, [pc, #144]	@ (80059e4 <DMA_SetConfig+0x344>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <DMA_SetConfig+0x2de>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a23      	ldr	r2, [pc, #140]	@ (80059e8 <DMA_SetConfig+0x348>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <DMA_SetConfig+0x2de>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a21      	ldr	r2, [pc, #132]	@ (80059ec <DMA_SetConfig+0x34c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <DMA_SetConfig+0x2de>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a20      	ldr	r2, [pc, #128]	@ (80059f0 <DMA_SetConfig+0x350>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <DMA_SetConfig+0x2de>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1e      	ldr	r2, [pc, #120]	@ (80059f4 <DMA_SetConfig+0x354>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <DMA_SetConfig+0x2e2>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <DMA_SetConfig+0x2e4>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d020      	beq.n	80059ca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	2201      	movs	r2, #1
 8005992:	409a      	lsls	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b40      	cmp	r3, #64	@ 0x40
 80059a6:	d108      	bne.n	80059ba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	60da      	str	r2, [r3, #12]
}
 80059b8:	e007      	b.n	80059ca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	60da      	str	r2, [r3, #12]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	58025408 	.word	0x58025408
 80059dc:	5802541c 	.word	0x5802541c
 80059e0:	58025430 	.word	0x58025430
 80059e4:	58025444 	.word	0x58025444
 80059e8:	58025458 	.word	0x58025458
 80059ec:	5802546c 	.word	0x5802546c
 80059f0:	58025480 	.word	0x58025480
 80059f4:	58025494 	.word	0x58025494

080059f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a42      	ldr	r2, [pc, #264]	@ (8005b10 <DMA_CalcBaseAndBitshift+0x118>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d04a      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a41      	ldr	r2, [pc, #260]	@ (8005b14 <DMA_CalcBaseAndBitshift+0x11c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d045      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a3f      	ldr	r2, [pc, #252]	@ (8005b18 <DMA_CalcBaseAndBitshift+0x120>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d040      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a3e      	ldr	r2, [pc, #248]	@ (8005b1c <DMA_CalcBaseAndBitshift+0x124>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d03b      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b20 <DMA_CalcBaseAndBitshift+0x128>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d036      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a3b      	ldr	r2, [pc, #236]	@ (8005b24 <DMA_CalcBaseAndBitshift+0x12c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d031      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a39      	ldr	r2, [pc, #228]	@ (8005b28 <DMA_CalcBaseAndBitshift+0x130>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d02c      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a38      	ldr	r2, [pc, #224]	@ (8005b2c <DMA_CalcBaseAndBitshift+0x134>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d027      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a36      	ldr	r2, [pc, #216]	@ (8005b30 <DMA_CalcBaseAndBitshift+0x138>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d022      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a35      	ldr	r2, [pc, #212]	@ (8005b34 <DMA_CalcBaseAndBitshift+0x13c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d01d      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a33      	ldr	r2, [pc, #204]	@ (8005b38 <DMA_CalcBaseAndBitshift+0x140>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d018      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a32      	ldr	r2, [pc, #200]	@ (8005b3c <DMA_CalcBaseAndBitshift+0x144>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a30      	ldr	r2, [pc, #192]	@ (8005b40 <DMA_CalcBaseAndBitshift+0x148>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00e      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2f      	ldr	r2, [pc, #188]	@ (8005b44 <DMA_CalcBaseAndBitshift+0x14c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <DMA_CalcBaseAndBitshift+0x150>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b4c <DMA_CalcBaseAndBitshift+0x154>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d101      	bne.n	8005aa4 <DMA_CalcBaseAndBitshift+0xac>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <DMA_CalcBaseAndBitshift+0xae>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d024      	beq.n	8005af4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	3b10      	subs	r3, #16
 8005ab2:	4a27      	ldr	r2, [pc, #156]	@ (8005b50 <DMA_CalcBaseAndBitshift+0x158>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	4a24      	ldr	r2, [pc, #144]	@ (8005b54 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ac4:	5cd3      	ldrb	r3, [r2, r3]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d908      	bls.n	8005ae4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8005b58 <DMA_CalcBaseAndBitshift+0x160>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	1d1a      	adds	r2, r3, #4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ae2:	e00d      	b.n	8005b00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b1b      	ldr	r3, [pc, #108]	@ (8005b58 <DMA_CalcBaseAndBitshift+0x160>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005af2:	e005      	b.n	8005b00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
 8005b50:	aaaaaaab 	.word	0xaaaaaaab
 8005b54:	08015258 	.word	0x08015258
 8005b58:	fffffc00 	.word	0xfffffc00

08005b5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d120      	bne.n	8005bb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d858      	bhi.n	8005c2a <DMA_CheckFifoParam+0xce>
 8005b78:	a201      	add	r2, pc, #4	@ (adr r2, 8005b80 <DMA_CheckFifoParam+0x24>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005b91 	.word	0x08005b91
 8005b84:	08005ba3 	.word	0x08005ba3
 8005b88:	08005b91 	.word	0x08005b91
 8005b8c:	08005c2b 	.word	0x08005c2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d048      	beq.n	8005c2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ba0:	e045      	b.n	8005c2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005baa:	d142      	bne.n	8005c32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bb0:	e03f      	b.n	8005c32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bba:	d123      	bne.n	8005c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d838      	bhi.n	8005c36 <DMA_CheckFifoParam+0xda>
 8005bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <DMA_CheckFifoParam+0x70>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005bdd 	.word	0x08005bdd
 8005bd0:	08005be3 	.word	0x08005be3
 8005bd4:	08005bdd 	.word	0x08005bdd
 8005bd8:	08005bf5 	.word	0x08005bf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
        break;
 8005be0:	e030      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d025      	beq.n	8005c3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bf2:	e022      	b.n	8005c3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bfc:	d11f      	bne.n	8005c3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c02:	e01c      	b.n	8005c3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d902      	bls.n	8005c12 <DMA_CheckFifoParam+0xb6>
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d003      	beq.n	8005c18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005c10:	e018      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	73fb      	strb	r3, [r7, #15]
        break;
 8005c16:	e015      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00e      	beq.n	8005c42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
    break;
 8005c28:	e00b      	b.n	8005c42 <DMA_CheckFifoParam+0xe6>
        break;
 8005c2a:	bf00      	nop
 8005c2c:	e00a      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e008      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        break;
 8005c32:	bf00      	nop
 8005c34:	e006      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        break;
 8005c36:	bf00      	nop
 8005c38:	e004      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        break;
 8005c3a:	bf00      	nop
 8005c3c:	e002      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        break;
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
    break;
 8005c42:	bf00      	nop
    }
  }

  return status;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop

08005c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a38      	ldr	r2, [pc, #224]	@ (8005d48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d022      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a36      	ldr	r2, [pc, #216]	@ (8005d4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01d      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a35      	ldr	r2, [pc, #212]	@ (8005d50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d018      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a33      	ldr	r2, [pc, #204]	@ (8005d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a32      	ldr	r2, [pc, #200]	@ (8005d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a30      	ldr	r2, [pc, #192]	@ (8005d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8005d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2d      	ldr	r2, [pc, #180]	@ (8005d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d101      	bne.n	8005cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01a      	beq.n	8005cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	3b08      	subs	r3, #8
 8005cc4:	4a28      	ldr	r2, [pc, #160]	@ (8005d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	091b      	lsrs	r3, r3, #4
 8005ccc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4b26      	ldr	r3, [pc, #152]	@ (8005d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a24      	ldr	r2, [pc, #144]	@ (8005d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ce0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 031f 	and.w	r3, r3, #31
 8005ce8:	2201      	movs	r2, #1
 8005cea:	409a      	lsls	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005cf0:	e024      	b.n	8005d3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	3b10      	subs	r3, #16
 8005cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4a1c      	ldr	r2, [pc, #112]	@ (8005d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d806      	bhi.n	8005d1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d902      	bls.n	8005d1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3308      	adds	r3, #8
 8005d18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4b18      	ldr	r3, [pc, #96]	@ (8005d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a16      	ldr	r2, [pc, #88]	@ (8005d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005d2c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	2201      	movs	r2, #1
 8005d36:	409a      	lsls	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	58025408 	.word	0x58025408
 8005d4c:	5802541c 	.word	0x5802541c
 8005d50:	58025430 	.word	0x58025430
 8005d54:	58025444 	.word	0x58025444
 8005d58:	58025458 	.word	0x58025458
 8005d5c:	5802546c 	.word	0x5802546c
 8005d60:	58025480 	.word	0x58025480
 8005d64:	58025494 	.word	0x58025494
 8005d68:	cccccccd 	.word	0xcccccccd
 8005d6c:	16009600 	.word	0x16009600
 8005d70:	58025880 	.word	0x58025880
 8005d74:	aaaaaaab 	.word	0xaaaaaaab
 8005d78:	400204b8 	.word	0x400204b8
 8005d7c:	4002040f 	.word	0x4002040f
 8005d80:	10008200 	.word	0x10008200
 8005d84:	40020880 	.word	0x40020880

08005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d04a      	beq.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d847      	bhi.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a25      	ldr	r2, [pc, #148]	@ (8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d022      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a24      	ldr	r2, [pc, #144]	@ (8005e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d01d      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a22      	ldr	r2, [pc, #136]	@ (8005e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d018      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a21      	ldr	r2, [pc, #132]	@ (8005e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00e      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1e      	ldr	r2, [pc, #120]	@ (8005e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d009      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1b      	ldr	r2, [pc, #108]	@ (8005e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d101      	bne.n	8005df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4b17      	ldr	r3, [pc, #92]	@ (8005e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	461a      	mov	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a15      	ldr	r2, [pc, #84]	@ (8005e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005e10:	671a      	str	r2, [r3, #112]	@ 0x70
 8005e12:	e009      	b.n	8005e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4b14      	ldr	r3, [pc, #80]	@ (8005e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a11      	ldr	r2, [pc, #68]	@ (8005e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005e26:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	58025408 	.word	0x58025408
 8005e44:	5802541c 	.word	0x5802541c
 8005e48:	58025430 	.word	0x58025430
 8005e4c:	58025444 	.word	0x58025444
 8005e50:	58025458 	.word	0x58025458
 8005e54:	5802546c 	.word	0x5802546c
 8005e58:	58025480 	.word	0x58025480
 8005e5c:	58025494 	.word	0x58025494
 8005e60:	1600963f 	.word	0x1600963f
 8005e64:	58025940 	.word	0x58025940
 8005e68:	1000823f 	.word	0x1000823f
 8005e6c:	40020940 	.word	0x40020940

08005e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b089      	sub	sp, #36	@ 0x24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e7e:	4b89      	ldr	r3, [pc, #548]	@ (80060a4 <HAL_GPIO_Init+0x234>)
 8005e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e82:	e194      	b.n	80061ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	2101      	movs	r1, #1
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e90:	4013      	ands	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 8186 	beq.w	80061a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d005      	beq.n	8005eb4 <HAL_GPIO_Init+0x44>
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d130      	bne.n	8005f16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005eea:	2201      	movs	r2, #1
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	43db      	mvns	r3, r3
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	091b      	lsrs	r3, r3, #4
 8005f00:	f003 0201 	and.w	r2, r3, #1
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d017      	beq.n	8005f52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43db      	mvns	r3, r3
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	4013      	ands	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d123      	bne.n	8005fa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	08da      	lsrs	r2, r3, #3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3208      	adds	r2, #8
 8005f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	220f      	movs	r2, #15
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	691a      	ldr	r2, [r3, #16]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	08da      	lsrs	r2, r3, #3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3208      	adds	r2, #8
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f003 0203 	and.w	r2, r3, #3
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80e0 	beq.w	80061a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80060a8 <HAL_GPIO_Init+0x238>)
 8005fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fee:	4a2e      	ldr	r2, [pc, #184]	@ (80060a8 <HAL_GPIO_Init+0x238>)
 8005ff0:	f043 0302 	orr.w	r3, r3, #2
 8005ff4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80060a8 <HAL_GPIO_Init+0x238>)
 8005ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006006:	4a29      	ldr	r2, [pc, #164]	@ (80060ac <HAL_GPIO_Init+0x23c>)
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	089b      	lsrs	r3, r3, #2
 800600c:	3302      	adds	r3, #2
 800600e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	220f      	movs	r2, #15
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	43db      	mvns	r3, r3
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4013      	ands	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a20      	ldr	r2, [pc, #128]	@ (80060b0 <HAL_GPIO_Init+0x240>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d052      	beq.n	80060d8 <HAL_GPIO_Init+0x268>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a1f      	ldr	r2, [pc, #124]	@ (80060b4 <HAL_GPIO_Init+0x244>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d031      	beq.n	800609e <HAL_GPIO_Init+0x22e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1e      	ldr	r2, [pc, #120]	@ (80060b8 <HAL_GPIO_Init+0x248>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d02b      	beq.n	800609a <HAL_GPIO_Init+0x22a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1d      	ldr	r2, [pc, #116]	@ (80060bc <HAL_GPIO_Init+0x24c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d025      	beq.n	8006096 <HAL_GPIO_Init+0x226>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1c      	ldr	r2, [pc, #112]	@ (80060c0 <HAL_GPIO_Init+0x250>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d01f      	beq.n	8006092 <HAL_GPIO_Init+0x222>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1b      	ldr	r2, [pc, #108]	@ (80060c4 <HAL_GPIO_Init+0x254>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d019      	beq.n	800608e <HAL_GPIO_Init+0x21e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1a      	ldr	r2, [pc, #104]	@ (80060c8 <HAL_GPIO_Init+0x258>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <HAL_GPIO_Init+0x21a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a19      	ldr	r2, [pc, #100]	@ (80060cc <HAL_GPIO_Init+0x25c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00d      	beq.n	8006086 <HAL_GPIO_Init+0x216>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a18      	ldr	r2, [pc, #96]	@ (80060d0 <HAL_GPIO_Init+0x260>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <HAL_GPIO_Init+0x212>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a17      	ldr	r2, [pc, #92]	@ (80060d4 <HAL_GPIO_Init+0x264>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <HAL_GPIO_Init+0x20e>
 800607a:	2309      	movs	r3, #9
 800607c:	e02d      	b.n	80060da <HAL_GPIO_Init+0x26a>
 800607e:	230a      	movs	r3, #10
 8006080:	e02b      	b.n	80060da <HAL_GPIO_Init+0x26a>
 8006082:	2308      	movs	r3, #8
 8006084:	e029      	b.n	80060da <HAL_GPIO_Init+0x26a>
 8006086:	2307      	movs	r3, #7
 8006088:	e027      	b.n	80060da <HAL_GPIO_Init+0x26a>
 800608a:	2306      	movs	r3, #6
 800608c:	e025      	b.n	80060da <HAL_GPIO_Init+0x26a>
 800608e:	2305      	movs	r3, #5
 8006090:	e023      	b.n	80060da <HAL_GPIO_Init+0x26a>
 8006092:	2304      	movs	r3, #4
 8006094:	e021      	b.n	80060da <HAL_GPIO_Init+0x26a>
 8006096:	2303      	movs	r3, #3
 8006098:	e01f      	b.n	80060da <HAL_GPIO_Init+0x26a>
 800609a:	2302      	movs	r3, #2
 800609c:	e01d      	b.n	80060da <HAL_GPIO_Init+0x26a>
 800609e:	2301      	movs	r3, #1
 80060a0:	e01b      	b.n	80060da <HAL_GPIO_Init+0x26a>
 80060a2:	bf00      	nop
 80060a4:	58000080 	.word	0x58000080
 80060a8:	58024400 	.word	0x58024400
 80060ac:	58000400 	.word	0x58000400
 80060b0:	58020000 	.word	0x58020000
 80060b4:	58020400 	.word	0x58020400
 80060b8:	58020800 	.word	0x58020800
 80060bc:	58020c00 	.word	0x58020c00
 80060c0:	58021000 	.word	0x58021000
 80060c4:	58021400 	.word	0x58021400
 80060c8:	58021800 	.word	0x58021800
 80060cc:	58021c00 	.word	0x58021c00
 80060d0:	58022000 	.word	0x58022000
 80060d4:	58022400 	.word	0x58022400
 80060d8:	2300      	movs	r3, #0
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	f002 0203 	and.w	r2, r2, #3
 80060e0:	0092      	lsls	r2, r2, #2
 80060e2:	4093      	lsls	r3, r2
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060ea:	4938      	ldr	r1, [pc, #224]	@ (80061cc <HAL_GPIO_Init+0x35c>)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	089b      	lsrs	r3, r3, #2
 80060f0:	3302      	adds	r3, #2
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	43db      	mvns	r3, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4013      	ands	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800611e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	43db      	mvns	r3, r3
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4013      	ands	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800614c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	43db      	mvns	r3, r3
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4013      	ands	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f47f ae63 	bne.w	8005e84 <HAL_GPIO_Init+0x14>
  }
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	3724      	adds	r7, #36	@ 0x24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	58000400 	.word	0x58000400

080061d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	807b      	strh	r3, [r7, #2]
 80061dc:	4613      	mov	r3, r2
 80061de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061e0:	787b      	ldrb	r3, [r7, #1]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061e6:	887a      	ldrh	r2, [r7, #2]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061ec:	e003      	b.n	80061f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061ee:	887b      	ldrh	r3, [r7, #2]
 80061f0:	041a      	lsls	r2, r3, #16
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	619a      	str	r2, [r3, #24]
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006202:	b480      	push	{r7}
 8006204:	b085      	sub	sp, #20
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006214:	887a      	ldrh	r2, [r7, #2]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4013      	ands	r3, r2
 800621a:	041a      	lsls	r2, r3, #16
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	43d9      	mvns	r1, r3
 8006220:	887b      	ldrh	r3, [r7, #2]
 8006222:	400b      	ands	r3, r1
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	619a      	str	r2, [r3, #24]
}
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e07f      	b.n	800634a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fa fba8 	bl	80009b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2224      	movs	r2, #36	@ 0x24
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0201 	bic.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006288:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006298:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d107      	bne.n	80062b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062ae:	609a      	str	r2, [r3, #8]
 80062b0:	e006      	b.n	80062c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80062be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d104      	bne.n	80062d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6859      	ldr	r1, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006354 <HAL_I2C_Init+0x11c>)
 80062de:	430b      	orrs	r3, r1
 80062e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69d9      	ldr	r1, [r3, #28]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1a      	ldr	r2, [r3, #32]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	02008000 	.word	0x02008000

08006358 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	4608      	mov	r0, r1
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	4603      	mov	r3, r0
 8006368:	817b      	strh	r3, [r7, #10]
 800636a:	460b      	mov	r3, r1
 800636c:	813b      	strh	r3, [r7, #8]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b20      	cmp	r3, #32
 800637c:	f040 80f9 	bne.w	8006572 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_I2C_Mem_Write+0x34>
 8006386:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006392:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0ed      	b.n	8006574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d101      	bne.n	80063a6 <HAL_I2C_Mem_Write+0x4e>
 80063a2:	2302      	movs	r3, #2
 80063a4:	e0e6      	b.n	8006574 <HAL_I2C_Mem_Write+0x21c>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063ae:	f7fb fca1 	bl	8001cf4 <HAL_GetTick>
 80063b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	2319      	movs	r3, #25
 80063ba:	2201      	movs	r2, #1
 80063bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f955 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0d1      	b.n	8006574 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2221      	movs	r2, #33	@ 0x21
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2240      	movs	r2, #64	@ 0x40
 80063dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a3a      	ldr	r2, [r7, #32]
 80063ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80063f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063f8:	88f8      	ldrh	r0, [r7, #6]
 80063fa:	893a      	ldrh	r2, [r7, #8]
 80063fc:	8979      	ldrh	r1, [r7, #10]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4603      	mov	r3, r0
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f8b9 	bl	8006580 <I2C_RequestMemoryWrite>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d005      	beq.n	8006420 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e0a9      	b.n	8006574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	2bff      	cmp	r3, #255	@ 0xff
 8006428:	d90e      	bls.n	8006448 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	22ff      	movs	r2, #255	@ 0xff
 800642e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006434:	b2da      	uxtb	r2, r3
 8006436:	8979      	ldrh	r1, [r7, #10]
 8006438:	2300      	movs	r3, #0
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 facf 	bl	80069e4 <I2C_TransferConfig>
 8006446:	e00f      	b.n	8006468 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006456:	b2da      	uxtb	r2, r3
 8006458:	8979      	ldrh	r1, [r7, #10]
 800645a:	2300      	movs	r3, #0
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fabe 	bl	80069e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f94e 	bl	800670e <I2C_WaitOnTXISFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e07b      	b.n	8006574 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d034      	beq.n	8006520 <HAL_I2C_Mem_Write+0x1c8>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d130      	bne.n	8006520 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c4:	2200      	movs	r2, #0
 80064c6:	2180      	movs	r1, #128	@ 0x80
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f8d1 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e04d      	b.n	8006574 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2bff      	cmp	r3, #255	@ 0xff
 80064e0:	d90e      	bls.n	8006500 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	22ff      	movs	r2, #255	@ 0xff
 80064e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	8979      	ldrh	r1, [r7, #10]
 80064f0:	2300      	movs	r3, #0
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fa73 	bl	80069e4 <I2C_TransferConfig>
 80064fe:	e00f      	b.n	8006520 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650e:	b2da      	uxtb	r2, r3
 8006510:	8979      	ldrh	r1, [r7, #10]
 8006512:	2300      	movs	r3, #0
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fa62 	bl	80069e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d19e      	bne.n	8006468 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f934 	bl	800679c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e01a      	b.n	8006574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2220      	movs	r2, #32
 8006544:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6859      	ldr	r1, [r3, #4]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <HAL_I2C_Mem_Write+0x224>)
 8006552:	400b      	ands	r3, r1
 8006554:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	e000      	b.n	8006574 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006572:	2302      	movs	r3, #2
  }
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	fe00e800 	.word	0xfe00e800

08006580 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	4608      	mov	r0, r1
 800658a:	4611      	mov	r1, r2
 800658c:	461a      	mov	r2, r3
 800658e:	4603      	mov	r3, r0
 8006590:	817b      	strh	r3, [r7, #10]
 8006592:	460b      	mov	r3, r1
 8006594:	813b      	strh	r3, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	b2da      	uxtb	r2, r3
 800659e:	8979      	ldrh	r1, [r7, #10]
 80065a0:	4b20      	ldr	r3, [pc, #128]	@ (8006624 <I2C_RequestMemoryWrite+0xa4>)
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fa1b 	bl	80069e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	69b9      	ldr	r1, [r7, #24]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f8ab 	bl	800670e <I2C_WaitOnTXISFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e02c      	b.n	800661c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065c2:	88fb      	ldrh	r3, [r7, #6]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d105      	bne.n	80065d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065c8:	893b      	ldrh	r3, [r7, #8]
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80065d2:	e015      	b.n	8006600 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065d4:	893b      	ldrh	r3, [r7, #8]
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	b29b      	uxth	r3, r3
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	69b9      	ldr	r1, [r7, #24]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f891 	bl	800670e <I2C_WaitOnTXISFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e012      	b.n	800661c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065f6:	893b      	ldrh	r3, [r7, #8]
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	2200      	movs	r2, #0
 8006608:	2180      	movs	r1, #128	@ 0x80
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f830 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	80002000 	.word	0x80002000

08006628 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b02      	cmp	r3, #2
 800663c:	d103      	bne.n	8006646 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2200      	movs	r2, #0
 8006644:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b01      	cmp	r3, #1
 8006652:	d007      	beq.n	8006664 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	619a      	str	r2, [r3, #24]
  }
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006680:	e031      	b.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d02d      	beq.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668a:	f7fb fb33 	bl	8001cf4 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d302      	bcc.n	80066a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d122      	bne.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	4013      	ands	r3, r2
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	bf0c      	ite	eq
 80066b0:	2301      	moveq	r3, #1
 80066b2:	2300      	movne	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d113      	bne.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c2:	f043 0220 	orr.w	r2, r3, #32
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e00f      	b.n	8006706 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699a      	ldr	r2, [r3, #24]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4013      	ands	r3, r2
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	429a      	cmp	r2, r3
 8006702:	d0be      	beq.n	8006682 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800671a:	e033      	b.n	8006784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f87f 	bl	8006824 <I2C_IsErrorOccurred>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e031      	b.n	8006794 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d025      	beq.n	8006784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006738:	f7fb fadc 	bl	8001cf4 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	429a      	cmp	r2, r3
 8006746:	d302      	bcc.n	800674e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d11a      	bne.n	8006784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b02      	cmp	r3, #2
 800675a:	d013      	beq.n	8006784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006760:	f043 0220 	orr.w	r2, r3, #32
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e007      	b.n	8006794 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d1c4      	bne.n	800671c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067a8:	e02f      	b.n	800680a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f838 	bl	8006824 <I2C_IsErrorOccurred>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e02d      	b.n	800681a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067be:	f7fb fa99 	bl	8001cf4 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d302      	bcc.n	80067d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d11a      	bne.n	800680a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d013      	beq.n	800680a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e007      	b.n	800681a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b20      	cmp	r3, #32
 8006816:	d1c8      	bne.n	80067aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	@ 0x28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b00      	cmp	r3, #0
 800684e:	d068      	beq.n	8006922 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2210      	movs	r2, #16
 8006856:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006858:	e049      	b.n	80068ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d045      	beq.n	80068ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006862:	f7fb fa47 	bl	8001cf4 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	429a      	cmp	r2, r3
 8006870:	d302      	bcc.n	8006878 <I2C_IsErrorOccurred+0x54>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d13a      	bne.n	80068ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006882:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800688a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800689a:	d121      	bne.n	80068e0 <I2C_IsErrorOccurred+0xbc>
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068a2:	d01d      	beq.n	80068e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80068a4:	7cfb      	ldrb	r3, [r7, #19]
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d01a      	beq.n	80068e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068ba:	f7fb fa1b 	bl	8001cf4 <HAL_GetTick>
 80068be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068c0:	e00e      	b.n	80068e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068c2:	f7fb fa17 	bl	8001cf4 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b19      	cmp	r3, #25
 80068ce:	d907      	bls.n	80068e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	f043 0320 	orr.w	r3, r3, #32
 80068d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80068de:	e006      	b.n	80068ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d1e9      	bne.n	80068c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	f003 0320 	and.w	r3, r3, #32
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	d003      	beq.n	8006904 <I2C_IsErrorOccurred+0xe0>
 80068fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0aa      	beq.n	800685a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2220      	movs	r2, #32
 8006912:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	f043 0304 	orr.w	r3, r3, #4
 800691a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00b      	beq.n	800694c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	f043 0301 	orr.w	r3, r3, #1
 800693a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006944:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	f043 0308 	orr.w	r3, r3, #8
 800695c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006966:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	f043 0302 	orr.w	r3, r3, #2
 800697e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006988:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01c      	beq.n	80069d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff fe45 	bl	8006628 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6859      	ldr	r1, [r3, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <I2C_IsErrorOccurred+0x1bc>)
 80069aa:	400b      	ands	r3, r1
 80069ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80069d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3728      	adds	r7, #40	@ 0x28
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	fe00e800 	.word	0xfe00e800

080069e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	607b      	str	r3, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	817b      	strh	r3, [r7, #10]
 80069f2:	4613      	mov	r3, r2
 80069f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069f6:	897b      	ldrh	r3, [r7, #10]
 80069f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069fc:	7a7b      	ldrb	r3, [r7, #9]
 80069fe:	041b      	lsls	r3, r3, #16
 8006a00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	0d5b      	lsrs	r3, r3, #21
 8006a1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006a22:	4b08      	ldr	r3, [pc, #32]	@ (8006a44 <I2C_TransferConfig+0x60>)
 8006a24:	430b      	orrs	r3, r1
 8006a26:	43db      	mvns	r3, r3
 8006a28:	ea02 0103 	and.w	r1, r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	03ff63ff 	.word	0x03ff63ff

08006a48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d138      	bne.n	8006ad0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e032      	b.n	8006ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2224      	movs	r2, #36	@ 0x24
 8006a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0201 	bic.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6819      	ldr	r1, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e000      	b.n	8006ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ad0:	2302      	movs	r3, #2
  }
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d139      	bne.n	8006b68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e033      	b.n	8006b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2224      	movs	r2, #36	@ 0x24
 8006b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0201 	bic.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006b30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e000      	b.n	8006b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b68:	2302      	movs	r3, #2
  }
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b78:	b08f      	sub	sp, #60	@ 0x3c
 8006b7a:	af0a      	add	r7, sp, #40	@ 0x28
 8006b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e116      	b.n	8006db6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f00b f832 	bl	8011c0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2203      	movs	r2, #3
 8006bac:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f007 f803 	bl	800dbd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	687e      	ldr	r6, [r7, #4]
 8006bd4:	466d      	mov	r5, sp
 8006bd6:	f106 0410 	add.w	r4, r6, #16
 8006bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006be2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006be6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006bea:	1d33      	adds	r3, r6, #4
 8006bec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bee:	6838      	ldr	r0, [r7, #0]
 8006bf0:	f006 fece 	bl	800d990 <USB_CoreInit>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e0d7      	b.n	8006db6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f006 fff1 	bl	800dbf4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]
 8006c16:	e04a      	b.n	8006cae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c18:	7bfa      	ldrb	r2, [r7, #15]
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	333d      	adds	r3, #61	@ 0x3d
 8006c28:	2201      	movs	r2, #1
 8006c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c2c:	7bfa      	ldrb	r2, [r7, #15]
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	440b      	add	r3, r1
 8006c3a:	333c      	adds	r3, #60	@ 0x3c
 8006c3c:	7bfa      	ldrb	r2, [r7, #15]
 8006c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c40:	7bfa      	ldrb	r2, [r7, #15]
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	b298      	uxth	r0, r3
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	3356      	adds	r3, #86	@ 0x56
 8006c54:	4602      	mov	r2, r0
 8006c56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c58:	7bfa      	ldrb	r2, [r7, #15]
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	3340      	adds	r3, #64	@ 0x40
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c6c:	7bfa      	ldrb	r2, [r7, #15]
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	4613      	mov	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	3344      	adds	r3, #68	@ 0x44
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c80:	7bfa      	ldrb	r2, [r7, #15]
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	4613      	mov	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	3348      	adds	r3, #72	@ 0x48
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c94:	7bfa      	ldrb	r2, [r7, #15]
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	334c      	adds	r3, #76	@ 0x4c
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	3301      	adds	r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
 8006cae:	7bfa      	ldrb	r2, [r7, #15]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d3af      	bcc.n	8006c18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cb8:	2300      	movs	r3, #0
 8006cba:	73fb      	strb	r3, [r7, #15]
 8006cbc:	e044      	b.n	8006d48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cbe:	7bfa      	ldrb	r2, [r7, #15]
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cd4:	7bfa      	ldrb	r2, [r7, #15]
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8006ce6:	7bfa      	ldrb	r2, [r7, #15]
 8006ce8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cea:	7bfa      	ldrb	r2, [r7, #15]
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d00:	7bfa      	ldrb	r2, [r7, #15]
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d16:	7bfa      	ldrb	r2, [r7, #15]
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d2c:	7bfa      	ldrb	r2, [r7, #15]
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	4613      	mov	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	3301      	adds	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
 8006d48:	7bfa      	ldrb	r2, [r7, #15]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d3b5      	bcc.n	8006cbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	687e      	ldr	r6, [r7, #4]
 8006d5a:	466d      	mov	r5, sp
 8006d5c:	f106 0410 	add.w	r4, r6, #16
 8006d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d70:	1d33      	adds	r3, r6, #4
 8006d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d74:	6838      	ldr	r0, [r7, #0]
 8006d76:	f006 ff89 	bl	800dc8c <USB_DevInit>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e014      	b.n	8006db6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d102      	bne.n	8006daa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 f96f 	bl	8008088 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f007 ffcb 	bl	800ed4a <USB_DevDisconnect>

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006dbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <HAL_PCD_Start+0x1c>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e022      	b.n	8006e20 <HAL_PCD_Start+0x62>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d105      	bne.n	8006e02 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f006 fed2 	bl	800dbb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f007 ff79 	bl	800ed08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e28:	b590      	push	{r4, r7, lr}
 8006e2a:	b08d      	sub	sp, #52	@ 0x34
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f008 f837 	bl	800eeb2 <USB_GetMode>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 84b7 	bne.w	80077ba <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f007 ff9b 	bl	800ed8c <USB_ReadInterrupts>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 84ad 	beq.w	80077b8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f007 ff88 	bl	800ed8c <USB_ReadInterrupts>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d107      	bne.n	8006e96 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f002 0202 	and.w	r2, r2, #2
 8006e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f007 ff76 	bl	800ed8c <USB_ReadInterrupts>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	d161      	bne.n	8006f6e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699a      	ldr	r2, [r3, #24]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0210 	bic.w	r2, r2, #16
 8006eb8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	f003 020f 	and.w	r2, r3, #15
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	0c5b      	lsrs	r3, r3, #17
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d124      	bne.n	8006f30 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d035      	beq.n	8006f5e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	091b      	lsrs	r3, r3, #4
 8006efa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	461a      	mov	r2, r3
 8006f04:	6a38      	ldr	r0, [r7, #32]
 8006f06:	f007 fdad 	bl	800ea64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	091b      	lsrs	r3, r3, #4
 8006f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f16:	441a      	add	r2, r3
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	695a      	ldr	r2, [r3, #20]
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	091b      	lsrs	r3, r3, #4
 8006f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f28:	441a      	add	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	615a      	str	r2, [r3, #20]
 8006f2e:	e016      	b.n	8006f5e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	0c5b      	lsrs	r3, r3, #17
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	2b06      	cmp	r3, #6
 8006f3a:	d110      	bne.n	8006f5e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006f42:	2208      	movs	r2, #8
 8006f44:	4619      	mov	r1, r3
 8006f46:	6a38      	ldr	r0, [r7, #32]
 8006f48:	f007 fd8c 	bl	800ea64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	695a      	ldr	r2, [r3, #20]
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f58:	441a      	add	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699a      	ldr	r2, [r3, #24]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0210 	orr.w	r2, r2, #16
 8006f6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f007 ff0a 	bl	800ed8c <USB_ReadInterrupts>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f7e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f82:	f040 80a7 	bne.w	80070d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f007 ff0f 	bl	800edb2 <USB_ReadDevAllOutEpInterrupt>
 8006f94:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006f96:	e099      	b.n	80070cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 808e 	beq.w	80070c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	4611      	mov	r1, r2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f007 ff33 	bl	800ee1a <USB_ReadDevOutEPInterrupt>
 8006fb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00c      	beq.n	8006fda <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fcc:	461a      	mov	r2, r3
 8006fce:	2301      	movs	r3, #1
 8006fd0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006fd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fed1 	bl	8007d7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00c      	beq.n	8006ffe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006ff6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 ffa7 	bl	8007f4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007014:	461a      	mov	r2, r3
 8007016:	2310      	movs	r3, #16
 8007018:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d030      	beq.n	8007086 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702c:	2b80      	cmp	r3, #128	@ 0x80
 800702e:	d109      	bne.n	8007044 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800703e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007042:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007046:	4613      	mov	r3, r2
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	3304      	adds	r3, #4
 8007058:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	78db      	ldrb	r3, [r3, #3]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d108      	bne.n	8007074 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2200      	movs	r2, #0
 8007066:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	b2db      	uxtb	r3, r3
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f00a fef2 	bl	8011e58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007080:	461a      	mov	r2, r3
 8007082:	2302      	movs	r3, #2
 8007084:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f003 0320 	and.w	r3, r3, #32
 800708c:	2b00      	cmp	r3, #0
 800708e:	d008      	beq.n	80070a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709c:	461a      	mov	r2, r3
 800709e:	2320      	movs	r3, #32
 80070a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d009      	beq.n	80070c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80070ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b8:	461a      	mov	r2, r3
 80070ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	3301      	adds	r3, #1
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	085b      	lsrs	r3, r3, #1
 80070ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f47f af62 	bne.w	8006f98 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f007 fe57 	bl	800ed8c <USB_ReadInterrupts>
 80070de:	4603      	mov	r3, r0
 80070e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070e8:	f040 80db 	bne.w	80072a2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f007 fe78 	bl	800ede6 <USB_ReadDevAllInEpInterrupt>
 80070f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80070fc:	e0cd      	b.n	800729a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80c2 	beq.w	800728e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	4611      	mov	r1, r2
 8007114:	4618      	mov	r0, r3
 8007116:	f007 fe9e 	bl	800ee56 <USB_ReadDevInEPInterrupt>
 800711a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d057      	beq.n	80071d6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	2201      	movs	r2, #1
 800712e:	fa02 f303 	lsl.w	r3, r2, r3
 8007132:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800713a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	43db      	mvns	r3, r3
 8007140:	69f9      	ldr	r1, [r7, #28]
 8007142:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007146:	4013      	ands	r3, r2
 8007148:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007156:	461a      	mov	r2, r3
 8007158:	2301      	movs	r3, #1
 800715a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d132      	bne.n	80071ca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007168:	4613      	mov	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	3348      	adds	r3, #72	@ 0x48
 8007174:	6819      	ldr	r1, [r3, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800717a:	4613      	mov	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4403      	add	r3, r0
 8007184:	3344      	adds	r3, #68	@ 0x44
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4419      	add	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800718e:	4613      	mov	r3, r2
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4403      	add	r3, r0
 8007198:	3348      	adds	r3, #72	@ 0x48
 800719a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d113      	bne.n	80071ca <HAL_PCD_IRQHandler+0x3a2>
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071a6:	4613      	mov	r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	334c      	adds	r3, #76	@ 0x4c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d108      	bne.n	80071ca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80071c2:	461a      	mov	r2, r3
 80071c4:	2101      	movs	r1, #1
 80071c6:	f007 fea7 	bl	800ef18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f00a fdbc 	bl	8011d4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f003 0308 	and.w	r3, r3, #8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d008      	beq.n	80071f2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ec:	461a      	mov	r2, r3
 80071ee:	2308      	movs	r3, #8
 80071f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007208:	461a      	mov	r2, r3
 800720a:	2310      	movs	r3, #16
 800720c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007224:	461a      	mov	r2, r3
 8007226:	2340      	movs	r3, #64	@ 0x40
 8007228:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d023      	beq.n	800727c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007234:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007236:	6a38      	ldr	r0, [r7, #32]
 8007238:	f006 fe86 	bl	800df48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800723c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800723e:	4613      	mov	r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	3338      	adds	r3, #56	@ 0x38
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	4413      	add	r3, r2
 800724c:	3304      	adds	r3, #4
 800724e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	78db      	ldrb	r3, [r3, #3]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d108      	bne.n	800726a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2200      	movs	r2, #0
 800725c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	b2db      	uxtb	r3, r3
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f00a fe09 	bl	8011e7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007276:	461a      	mov	r2, r3
 8007278:	2302      	movs	r3, #2
 800727a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007286:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fcea 	bl	8007c62 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	3301      	adds	r3, #1
 8007292:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800729a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729c:	2b00      	cmp	r3, #0
 800729e:	f47f af2e 	bne.w	80070fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f007 fd70 	bl	800ed8c <USB_ReadInterrupts>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072b6:	d122      	bne.n	80072fe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072c6:	f023 0301 	bic.w	r3, r3, #1
 80072ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d108      	bne.n	80072e8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80072de:	2100      	movs	r1, #0
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fef5 	bl	80080d0 <HAL_PCDEx_LPM_Callback>
 80072e6:	e002      	b.n	80072ee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f00a fda7 	bl	8011e3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695a      	ldr	r2, [r3, #20]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80072fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f007 fd42 	bl	800ed8c <USB_ReadInterrupts>
 8007308:	4603      	mov	r3, r0
 800730a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800730e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007312:	d112      	bne.n	800733a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b01      	cmp	r3, #1
 8007322:	d102      	bne.n	800732a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f00a fd63 	bl	8011df0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695a      	ldr	r2, [r3, #20]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007338:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f007 fd24 	bl	800ed8c <USB_ReadInterrupts>
 8007344:	4603      	mov	r3, r0
 8007346:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800734a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800734e:	d121      	bne.n	8007394 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695a      	ldr	r2, [r3, #20]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800735e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8007366:	2b00      	cmp	r3, #0
 8007368:	d111      	bne.n	800738e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007378:	089b      	lsrs	r3, r3, #2
 800737a:	f003 020f 	and.w	r2, r3, #15
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007384:	2101      	movs	r1, #1
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fea2 	bl	80080d0 <HAL_PCDEx_LPM_Callback>
 800738c:	e002      	b.n	8007394 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f00a fd2e 	bl	8011df0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f007 fcf7 	bl	800ed8c <USB_ReadInterrupts>
 800739e:	4603      	mov	r3, r0
 80073a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a8:	f040 80b7 	bne.w	800751a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073ba:	f023 0301 	bic.w	r3, r3, #1
 80073be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2110      	movs	r1, #16
 80073c6:	4618      	mov	r0, r3
 80073c8:	f006 fdbe 	bl	800df48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073cc:	2300      	movs	r3, #0
 80073ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073d0:	e046      	b.n	8007460 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80073d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073de:	461a      	mov	r2, r3
 80073e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007400:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007404:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007412:	461a      	mov	r2, r3
 8007414:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007418:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800741a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800742a:	0151      	lsls	r1, r2, #5
 800742c:	69fa      	ldr	r2, [r7, #28]
 800742e:	440a      	add	r2, r1
 8007430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007434:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007438:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800743a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800744a:	0151      	lsls	r1, r2, #5
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	440a      	add	r2, r1
 8007450:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007454:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007458:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800745a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745c:	3301      	adds	r3, #1
 800745e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007466:	429a      	cmp	r2, r3
 8007468:	d3b3      	bcc.n	80073d2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007478:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800747c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007482:	2b00      	cmp	r3, #0
 8007484:	d016      	beq.n	80074b4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800748c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007496:	f043 030b 	orr.w	r3, r3, #11
 800749a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074ac:	f043 030b 	orr.w	r3, r3, #11
 80074b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80074b2:	e015      	b.n	80074e0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ba:	695a      	ldr	r2, [r3, #20]
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c2:	4619      	mov	r1, r3
 80074c4:	f242 032b 	movw	r3, #8235	@ 0x202b
 80074c8:	4313      	orrs	r3, r2
 80074ca:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074da:	f043 030b 	orr.w	r3, r3, #11
 80074de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80074f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007504:	461a      	mov	r2, r3
 8007506:	f007 fd07 	bl	800ef18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695a      	ldr	r2, [r3, #20]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4618      	mov	r0, r3
 8007520:	f007 fc34 	bl	800ed8c <USB_ReadInterrupts>
 8007524:	4603      	mov	r3, r0
 8007526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800752a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800752e:	d124      	bne.n	800757a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f007 fccb 	bl	800eed0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4618      	mov	r0, r3
 8007540:	f006 fd7f 	bl	800e042 <USB_GetDevSpeed>
 8007544:	4603      	mov	r3, r0
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681c      	ldr	r4, [r3, #0]
 8007550:	f001 fd9e 	bl	8009090 <HAL_RCC_GetHCLKFreq>
 8007554:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	4620      	mov	r0, r4
 8007560:	f006 fa84 	bl	800da6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f00a fc1a 	bl	8011d9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	695a      	ldr	r2, [r3, #20]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007578:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4618      	mov	r0, r3
 8007580:	f007 fc04 	bl	800ed8c <USB_ReadInterrupts>
 8007584:	4603      	mov	r3, r0
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b08      	cmp	r3, #8
 800758c:	d10a      	bne.n	80075a4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f00a fbf7 	bl	8011d82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695a      	ldr	r2, [r3, #20]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f002 0208 	and.w	r2, r2, #8
 80075a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f007 fbef 	bl	800ed8c <USB_ReadInterrupts>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b4:	2b80      	cmp	r3, #128	@ 0x80
 80075b6:	d122      	bne.n	80075fe <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075c4:	2301      	movs	r3, #1
 80075c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c8:	e014      	b.n	80075f4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ce:	4613      	mov	r3, r2
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	440b      	add	r3, r1
 80075d8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d105      	bne.n	80075ee <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fb09 	bl	8007c00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	3301      	adds	r3, #1
 80075f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d3e5      	bcc.n	80075ca <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f007 fbc2 	bl	800ed8c <USB_ReadInterrupts>
 8007608:	4603      	mov	r3, r0
 800760a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800760e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007612:	d13b      	bne.n	800768c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007614:	2301      	movs	r3, #1
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
 8007618:	e02b      	b.n	8007672 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800762e:	4613      	mov	r3, r2
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	440b      	add	r3, r1
 8007638:	3340      	adds	r3, #64	@ 0x40
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d115      	bne.n	800766c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007640:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007642:	2b00      	cmp	r3, #0
 8007644:	da12      	bge.n	800766c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800764a:	4613      	mov	r3, r2
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	440b      	add	r3, r1
 8007654:	333f      	adds	r3, #63	@ 0x3f
 8007656:	2201      	movs	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007662:	b2db      	uxtb	r3, r3
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 faca 	bl	8007c00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	3301      	adds	r3, #1
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007678:	429a      	cmp	r2, r3
 800767a:	d3ce      	bcc.n	800761a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695a      	ldr	r2, [r3, #20]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800768a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4618      	mov	r0, r3
 8007692:	f007 fb7b 	bl	800ed8c <USB_ReadInterrupts>
 8007696:	4603      	mov	r3, r0
 8007698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800769c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076a0:	d155      	bne.n	800774e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076a2:	2301      	movs	r3, #1
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a6:	e045      	b.n	8007734 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076bc:	4613      	mov	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d12e      	bne.n	800772e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	da2b      	bge.n	800772e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80076e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d121      	bne.n	800772e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ee:	4613      	mov	r3, r2
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80076fc:	2201      	movs	r2, #1
 80076fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800772a:	6053      	str	r3, [r2, #4]
            break;
 800772c:	e007      	b.n	800773e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007730:	3301      	adds	r3, #1
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800773a:	429a      	cmp	r2, r3
 800773c:	d3b4      	bcc.n	80076a8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695a      	ldr	r2, [r3, #20]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800774c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4618      	mov	r0, r3
 8007754:	f007 fb1a 	bl	800ed8c <USB_ReadInterrupts>
 8007758:	4603      	mov	r3, r0
 800775a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800775e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007762:	d10a      	bne.n	800777a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f00a fb9b 	bl	8011ea0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695a      	ldr	r2, [r3, #20]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f007 fb04 	bl	800ed8c <USB_ReadInterrupts>
 8007784:	4603      	mov	r3, r0
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b04      	cmp	r3, #4
 800778c:	d115      	bne.n	80077ba <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f00a fb8b 	bl	8011ebc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6859      	ldr	r1, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
 80077b6:	e000      	b.n	80077ba <HAL_PCD_IRQHandler+0x992>
      return;
 80077b8:	bf00      	nop
    }
  }
}
 80077ba:	3734      	adds	r7, #52	@ 0x34
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}

080077c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_PCD_SetAddress+0x1a>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e013      	b.n	8007802 <HAL_PCD_SetAddress+0x42>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	78fa      	ldrb	r2, [r7, #3]
 80077f0:	4611      	mov	r1, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f007 fa62 	bl	800ecbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	4608      	mov	r0, r1
 8007814:	4611      	mov	r1, r2
 8007816:	461a      	mov	r2, r3
 8007818:	4603      	mov	r3, r0
 800781a:	70fb      	strb	r3, [r7, #3]
 800781c:	460b      	mov	r3, r1
 800781e:	803b      	strh	r3, [r7, #0]
 8007820:	4613      	mov	r3, r2
 8007822:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800782c:	2b00      	cmp	r3, #0
 800782e:	da0f      	bge.n	8007850 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	f003 020f 	and.w	r2, r3, #15
 8007836:	4613      	mov	r3, r2
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	4413      	add	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	3338      	adds	r3, #56	@ 0x38
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	4413      	add	r3, r2
 8007844:	3304      	adds	r3, #4
 8007846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2201      	movs	r2, #1
 800784c:	705a      	strb	r2, [r3, #1]
 800784e:	e00f      	b.n	8007870 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	f003 020f 	and.w	r2, r3, #15
 8007856:	4613      	mov	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	4413      	add	r3, r2
 8007866:	3304      	adds	r3, #4
 8007868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	b2da      	uxtb	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800787c:	883a      	ldrh	r2, [r7, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	78ba      	ldrb	r2, [r7, #2]
 8007886:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800789a:	78bb      	ldrb	r3, [r7, #2]
 800789c:	2b02      	cmp	r3, #2
 800789e:	d102      	bne.n	80078a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_PCD_EP_Open+0xaa>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e00e      	b.n	80078d2 <HAL_PCD_EP_Open+0xc8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68f9      	ldr	r1, [r7, #12]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f006 fbe2 	bl	800e08c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80078d0:	7afb      	ldrb	r3, [r7, #11]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80078e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	da0f      	bge.n	800790e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	f003 020f 	and.w	r2, r3, #15
 80078f4:	4613      	mov	r3, r2
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	3338      	adds	r3, #56	@ 0x38
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	4413      	add	r3, r2
 8007902:	3304      	adds	r3, #4
 8007904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	705a      	strb	r2, [r3, #1]
 800790c:	e00f      	b.n	800792e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800790e:	78fb      	ldrb	r3, [r7, #3]
 8007910:	f003 020f 	and.w	r2, r3, #15
 8007914:	4613      	mov	r3, r2
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	4413      	add	r3, r2
 8007924:	3304      	adds	r3, #4
 8007926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	f003 030f 	and.w	r3, r3, #15
 8007934:	b2da      	uxtb	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_PCD_EP_Close+0x6e>
 8007944:	2302      	movs	r3, #2
 8007946:	e00e      	b.n	8007966 <HAL_PCD_EP_Close+0x8c>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68f9      	ldr	r1, [r7, #12]
 8007956:	4618      	mov	r0, r3
 8007958:	f006 fc20 	bl	800e19c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b086      	sub	sp, #24
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	460b      	mov	r3, r1
 800797c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	f003 020f 	and.w	r2, r3, #15
 8007984:	4613      	mov	r3, r2
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	3304      	adds	r3, #4
 8007996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2200      	movs	r2, #0
 80079a8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2200      	movs	r2, #0
 80079ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d102      	bne.n	80079ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	6979      	ldr	r1, [r7, #20]
 80079d8:	f006 fcbc 	bl	800e354 <USB_EPStartXfer>

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	f003 020f 	and.w	r2, r3, #15
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8007a08:	681b      	ldr	r3, [r3, #0]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b086      	sub	sp, #24
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
 8007a22:	460b      	mov	r3, r1
 8007a24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a26:	7afb      	ldrb	r3, [r7, #11]
 8007a28:	f003 020f 	and.w	r2, r3, #15
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	4413      	add	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	3338      	adds	r3, #56	@ 0x38
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2201      	movs	r2, #1
 8007a54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	f003 030f 	and.w	r3, r3, #15
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d102      	bne.n	8007a70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	6979      	ldr	r1, [r7, #20]
 8007a7e:	f006 fc69 	bl	800e354 <USB_EPStartXfer>

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 020f 	and.w	r2, r3, #15
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d901      	bls.n	8007aaa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e050      	b.n	8007b4c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	da0f      	bge.n	8007ad2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	f003 020f 	and.w	r2, r3, #15
 8007ab8:	4613      	mov	r3, r2
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	3338      	adds	r3, #56	@ 0x38
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	705a      	strb	r2, [r3, #1]
 8007ad0:	e00d      	b.n	8007aee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	4413      	add	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	f003 030f 	and.w	r3, r3, #15
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d101      	bne.n	8007b0e <HAL_PCD_EP_SetStall+0x82>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e01e      	b.n	8007b4c <HAL_PCD_EP_SetStall+0xc0>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68f9      	ldr	r1, [r7, #12]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f006 fff9 	bl	800eb14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	f003 030f 	and.w	r3, r3, #15
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	b2d9      	uxtb	r1, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f007 f9eb 	bl	800ef18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	f003 020f 	and.w	r2, r3, #15
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d901      	bls.n	8007b72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e042      	b.n	8007bf8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	da0f      	bge.n	8007b9a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	f003 020f 	and.w	r2, r3, #15
 8007b80:	4613      	mov	r3, r2
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	3338      	adds	r3, #56	@ 0x38
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	3304      	adds	r3, #4
 8007b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	705a      	strb	r2, [r3, #1]
 8007b98:	e00f      	b.n	8007bba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	f003 020f 	and.w	r2, r3, #15
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	4413      	add	r3, r2
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d101      	bne.n	8007bda <HAL_PCD_EP_ClrStall+0x86>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e00e      	b.n	8007bf8 <HAL_PCD_EP_ClrStall+0xa4>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f007 f801 	bl	800ebf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	da0c      	bge.n	8007c2e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	f003 020f 	and.w	r2, r3, #15
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	3338      	adds	r3, #56	@ 0x38
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	4413      	add	r3, r2
 8007c28:	3304      	adds	r3, #4
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e00c      	b.n	8007c48 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	f003 020f 	and.w	r2, r3, #15
 8007c34:	4613      	mov	r3, r2
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	3304      	adds	r3, #4
 8007c46:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68f9      	ldr	r1, [r7, #12]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f006 fe20 	bl	800e894 <USB_EPStopXfer>
 8007c54:	4603      	mov	r3, r0
 8007c56:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b08a      	sub	sp, #40	@ 0x28
 8007c66:	af02      	add	r7, sp, #8
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	3338      	adds	r3, #56	@ 0x38
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	4413      	add	r3, r2
 8007c86:	3304      	adds	r3, #4
 8007c88:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	695a      	ldr	r2, [r3, #20]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d901      	bls.n	8007c9a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e06c      	b.n	8007d74 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	691a      	ldr	r2, [r3, #16]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	69fa      	ldr	r2, [r7, #28]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d902      	bls.n	8007cb6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	3303      	adds	r3, #3
 8007cba:	089b      	lsrs	r3, r3, #2
 8007cbc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007cbe:	e02b      	b.n	8007d18 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d902      	bls.n	8007cdc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	3303      	adds	r3, #3
 8007ce0:	089b      	lsrs	r3, r3, #2
 8007ce2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68d9      	ldr	r1, [r3, #12]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	6978      	ldr	r0, [r7, #20]
 8007cfc:	f006 fe74 	bl	800e9e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	441a      	add	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	695a      	ldr	r2, [r3, #20]
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	441a      	add	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d809      	bhi.n	8007d42 <PCD_WriteEmptyTxFifo+0xe0>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	695a      	ldr	r2, [r3, #20]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d203      	bcs.n	8007d42 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1be      	bne.n	8007cc0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	691a      	ldr	r2, [r3, #16]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d811      	bhi.n	8007d72 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	2201      	movs	r2, #1
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	43db      	mvns	r3, r3
 8007d68:	6939      	ldr	r1, [r7, #16]
 8007d6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d6e:	4013      	ands	r3, r2
 8007d70:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3720      	adds	r7, #32
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	333c      	adds	r3, #60	@ 0x3c
 8007d94:	3304      	adds	r3, #4
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d17b      	bne.n	8007eaa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d015      	beq.n	8007de8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	4a61      	ldr	r2, [pc, #388]	@ (8007f44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	f240 80b9 	bls.w	8007f38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 80b3 	beq.w	8007f38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dde:	461a      	mov	r2, r3
 8007de0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007de4:	6093      	str	r3, [r2, #8]
 8007de6:	e0a7      	b.n	8007f38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d009      	beq.n	8007e06 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfe:	461a      	mov	r2, r3
 8007e00:	2320      	movs	r3, #32
 8007e02:	6093      	str	r3, [r2, #8]
 8007e04:	e098      	b.n	8007f38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f040 8093 	bne.w	8007f38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	4a4b      	ldr	r2, [pc, #300]	@ (8007f44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d90f      	bls.n	8007e3a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00a      	beq.n	8007e3a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e30:	461a      	mov	r2, r3
 8007e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e36:	6093      	str	r3, [r2, #8]
 8007e38:	e07e      	b.n	8007f38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a1a      	ldr	r2, [r3, #32]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	0159      	lsls	r1, r3, #5
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	440b      	add	r3, r1
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d114      	bne.n	8007e9c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007e84:	461a      	mov	r2, r3
 8007e86:	2101      	movs	r1, #1
 8007e88:	f007 f846 	bl	800ef18 <USB_EP0_OutStart>
 8007e8c:	e006      	b.n	8007e9c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	441a      	add	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f009 ff38 	bl	8011d18 <HAL_PCD_DataOutStageCallback>
 8007ea8:	e046      	b.n	8007f38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	4a26      	ldr	r2, [pc, #152]	@ (8007f48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d124      	bne.n	8007efc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ece:	6093      	str	r3, [r2, #8]
 8007ed0:	e032      	b.n	8007f38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee8:	461a      	mov	r2, r3
 8007eea:	2320      	movs	r3, #32
 8007eec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f009 ff0f 	bl	8011d18 <HAL_PCD_DataOutStageCallback>
 8007efa:	e01d      	b.n	8007f38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d114      	bne.n	8007f2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007f02:	6879      	ldr	r1, [r7, #4]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	440b      	add	r3, r1
 8007f10:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d108      	bne.n	8007f2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007f24:	461a      	mov	r2, r3
 8007f26:	2100      	movs	r1, #0
 8007f28:	f006 fff6 	bl	800ef18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f009 fef0 	bl	8011d18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3720      	adds	r7, #32
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	4f54300a 	.word	0x4f54300a
 8007f48:	4f54310a 	.word	0x4f54310a

08007f4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	333c      	adds	r3, #60	@ 0x3c
 8007f64:	3304      	adds	r3, #4
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4a15      	ldr	r2, [pc, #84]	@ (8007fd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d90e      	bls.n	8007fa0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d009      	beq.n	8007fa0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f98:	461a      	mov	r2, r3
 8007f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f009 fea7 	bl	8011cf4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8007fd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d90c      	bls.n	8007fc8 <PCD_EP_OutSetupPacket_int+0x7c>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d108      	bne.n	8007fc8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	f006 ffa8 	bl	800ef18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	4f54300a 	.word	0x4f54300a

08007fd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d107      	bne.n	8008006 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007ff6:	883b      	ldrh	r3, [r7, #0]
 8007ff8:	0419      	lsls	r1, r3, #16
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	430a      	orrs	r2, r1
 8008002:	629a      	str	r2, [r3, #40]	@ 0x28
 8008004:	e028      	b.n	8008058 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800c:	0c1b      	lsrs	r3, r3, #16
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4413      	add	r3, r2
 8008012:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008014:	2300      	movs	r3, #0
 8008016:	73fb      	strb	r3, [r7, #15]
 8008018:	e00d      	b.n	8008036 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	3340      	adds	r3, #64	@ 0x40
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	0c1b      	lsrs	r3, r3, #16
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	3301      	adds	r3, #1
 8008034:	73fb      	strb	r3, [r7, #15]
 8008036:	7bfa      	ldrb	r2, [r7, #15]
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	3b01      	subs	r3, #1
 800803c:	429a      	cmp	r2, r3
 800803e:	d3ec      	bcc.n	800801a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008040:	883b      	ldrh	r3, [r7, #0]
 8008042:	0418      	lsls	r0, r3, #16
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6819      	ldr	r1, [r3, #0]
 8008048:	78fb      	ldrb	r3, [r7, #3]
 800804a:	3b01      	subs	r3, #1
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	4302      	orrs	r2, r0
 8008050:	3340      	adds	r3, #64	@ 0x40
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	440b      	add	r3, r1
 8008056:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	887a      	ldrh	r2, [r7, #2]
 8008078:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080b6:	4b05      	ldr	r3, [pc, #20]	@ (80080cc <HAL_PCDEx_ActivateLPM+0x44>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	10000003 	.word	0x10000003

080080d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80080f0:	4b19      	ldr	r3, [pc, #100]	@ (8008158 <HAL_PWREx_ConfigSupply+0x70>)
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	d00a      	beq.n	8008112 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80080fc:	4b16      	ldr	r3, [pc, #88]	@ (8008158 <HAL_PWREx_ConfigSupply+0x70>)
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	429a      	cmp	r2, r3
 8008108:	d001      	beq.n	800810e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e01f      	b.n	800814e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	e01d      	b.n	800814e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008112:	4b11      	ldr	r3, [pc, #68]	@ (8008158 <HAL_PWREx_ConfigSupply+0x70>)
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f023 0207 	bic.w	r2, r3, #7
 800811a:	490f      	ldr	r1, [pc, #60]	@ (8008158 <HAL_PWREx_ConfigSupply+0x70>)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4313      	orrs	r3, r2
 8008120:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008122:	f7f9 fde7 	bl	8001cf4 <HAL_GetTick>
 8008126:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008128:	e009      	b.n	800813e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800812a:	f7f9 fde3 	bl	8001cf4 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008138:	d901      	bls.n	800813e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e007      	b.n	800814e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800813e:	4b06      	ldr	r3, [pc, #24]	@ (8008158 <HAL_PWREx_ConfigSupply+0x70>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800814a:	d1ee      	bne.n	800812a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	58024800 	.word	0x58024800

0800815c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008160:	4b05      	ldr	r3, [pc, #20]	@ (8008178 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	4a04      	ldr	r2, [pc, #16]	@ (8008178 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800816a:	60d3      	str	r3, [r2, #12]
}
 800816c:	bf00      	nop
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	58024800 	.word	0x58024800

0800817c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08c      	sub	sp, #48	@ 0x30
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d102      	bne.n	8008190 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	f000 bc48 	b.w	8008a20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8088 	beq.w	80082ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800819e:	4b99      	ldr	r3, [pc, #612]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081a8:	4b96      	ldr	r3, [pc, #600]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80081aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80081ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b0:	2b10      	cmp	r3, #16
 80081b2:	d007      	beq.n	80081c4 <HAL_RCC_OscConfig+0x48>
 80081b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b6:	2b18      	cmp	r3, #24
 80081b8:	d111      	bne.n	80081de <HAL_RCC_OscConfig+0x62>
 80081ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d10c      	bne.n	80081de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081c4:	4b8f      	ldr	r3, [pc, #572]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d06d      	beq.n	80082ac <HAL_RCC_OscConfig+0x130>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d169      	bne.n	80082ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	f000 bc21 	b.w	8008a20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e6:	d106      	bne.n	80081f6 <HAL_RCC_OscConfig+0x7a>
 80081e8:	4b86      	ldr	r3, [pc, #536]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a85      	ldr	r2, [pc, #532]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80081ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	e02e      	b.n	8008254 <HAL_RCC_OscConfig+0xd8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10c      	bne.n	8008218 <HAL_RCC_OscConfig+0x9c>
 80081fe:	4b81      	ldr	r3, [pc, #516]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a80      	ldr	r2, [pc, #512]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	4b7e      	ldr	r3, [pc, #504]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a7d      	ldr	r2, [pc, #500]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008210:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	e01d      	b.n	8008254 <HAL_RCC_OscConfig+0xd8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008220:	d10c      	bne.n	800823c <HAL_RCC_OscConfig+0xc0>
 8008222:	4b78      	ldr	r3, [pc, #480]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a77      	ldr	r2, [pc, #476]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	4b75      	ldr	r3, [pc, #468]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a74      	ldr	r2, [pc, #464]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	e00b      	b.n	8008254 <HAL_RCC_OscConfig+0xd8>
 800823c:	4b71      	ldr	r3, [pc, #452]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a70      	ldr	r2, [pc, #448]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	4b6e      	ldr	r3, [pc, #440]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a6d      	ldr	r2, [pc, #436]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 800824e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d013      	beq.n	8008284 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825c:	f7f9 fd4a 	bl	8001cf4 <HAL_GetTick>
 8008260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008262:	e008      	b.n	8008276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008264:	f7f9 fd46 	bl	8001cf4 <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b64      	cmp	r3, #100	@ 0x64
 8008270:	d901      	bls.n	8008276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e3d4      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008276:	4b63      	ldr	r3, [pc, #396]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0f0      	beq.n	8008264 <HAL_RCC_OscConfig+0xe8>
 8008282:	e014      	b.n	80082ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7f9 fd36 	bl	8001cf4 <HAL_GetTick>
 8008288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800828c:	f7f9 fd32 	bl	8001cf4 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b64      	cmp	r3, #100	@ 0x64
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e3c0      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800829e:	4b59      	ldr	r3, [pc, #356]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1f0      	bne.n	800828c <HAL_RCC_OscConfig+0x110>
 80082aa:	e000      	b.n	80082ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 80ca 	beq.w	8008450 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082bc:	4b51      	ldr	r3, [pc, #324]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80082c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d007      	beq.n	80082e2 <HAL_RCC_OscConfig+0x166>
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	2b18      	cmp	r3, #24
 80082d6:	d156      	bne.n	8008386 <HAL_RCC_OscConfig+0x20a>
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d151      	bne.n	8008386 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082e2:	4b48      	ldr	r3, [pc, #288]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <HAL_RCC_OscConfig+0x17e>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e392      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80082fa:	4b42      	ldr	r3, [pc, #264]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f023 0219 	bic.w	r2, r3, #25
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	493f      	ldr	r1, [pc, #252]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008308:	4313      	orrs	r3, r2
 800830a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830c:	f7f9 fcf2 	bl	8001cf4 <HAL_GetTick>
 8008310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008314:	f7f9 fcee 	bl	8001cf4 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e37c      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008326:	4b37      	ldr	r3, [pc, #220]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0304 	and.w	r3, r3, #4
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0f0      	beq.n	8008314 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008332:	f7f9 fd0f 	bl	8001d54 <HAL_GetREVID>
 8008336:	4603      	mov	r3, r0
 8008338:	f241 0203 	movw	r2, #4099	@ 0x1003
 800833c:	4293      	cmp	r3, r2
 800833e:	d817      	bhi.n	8008370 <HAL_RCC_OscConfig+0x1f4>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b40      	cmp	r3, #64	@ 0x40
 8008346:	d108      	bne.n	800835a <HAL_RCC_OscConfig+0x1de>
 8008348:	4b2e      	ldr	r3, [pc, #184]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008350:	4a2c      	ldr	r2, [pc, #176]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008356:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008358:	e07a      	b.n	8008450 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800835a:	4b2a      	ldr	r3, [pc, #168]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	031b      	lsls	r3, r3, #12
 8008368:	4926      	ldr	r1, [pc, #152]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 800836a:	4313      	orrs	r3, r2
 800836c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800836e:	e06f      	b.n	8008450 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008370:	4b24      	ldr	r3, [pc, #144]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	061b      	lsls	r3, r3, #24
 800837e:	4921      	ldr	r1, [pc, #132]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008380:	4313      	orrs	r3, r2
 8008382:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008384:	e064      	b.n	8008450 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d047      	beq.n	800841e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800838e:	4b1d      	ldr	r3, [pc, #116]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f023 0219 	bic.w	r2, r3, #25
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	491a      	ldr	r1, [pc, #104]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 800839c:	4313      	orrs	r3, r2
 800839e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a0:	f7f9 fca8 	bl	8001cf4 <HAL_GetTick>
 80083a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083a6:	e008      	b.n	80083ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083a8:	f7f9 fca4 	bl	8001cf4 <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d901      	bls.n	80083ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e332      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083ba:	4b12      	ldr	r3, [pc, #72]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0304 	and.w	r3, r3, #4
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0f0      	beq.n	80083a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c6:	f7f9 fcc5 	bl	8001d54 <HAL_GetREVID>
 80083ca:	4603      	mov	r3, r0
 80083cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d819      	bhi.n	8008408 <HAL_RCC_OscConfig+0x28c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	2b40      	cmp	r3, #64	@ 0x40
 80083da:	d108      	bne.n	80083ee <HAL_RCC_OscConfig+0x272>
 80083dc:	4b09      	ldr	r3, [pc, #36]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80083e4:	4a07      	ldr	r2, [pc, #28]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80083e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ea:	6053      	str	r3, [r2, #4]
 80083ec:	e030      	b.n	8008450 <HAL_RCC_OscConfig+0x2d4>
 80083ee:	4b05      	ldr	r3, [pc, #20]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	031b      	lsls	r3, r3, #12
 80083fc:	4901      	ldr	r1, [pc, #4]	@ (8008404 <HAL_RCC_OscConfig+0x288>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	604b      	str	r3, [r1, #4]
 8008402:	e025      	b.n	8008450 <HAL_RCC_OscConfig+0x2d4>
 8008404:	58024400 	.word	0x58024400
 8008408:	4b9a      	ldr	r3, [pc, #616]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	061b      	lsls	r3, r3, #24
 8008416:	4997      	ldr	r1, [pc, #604]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008418:	4313      	orrs	r3, r2
 800841a:	604b      	str	r3, [r1, #4]
 800841c:	e018      	b.n	8008450 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800841e:	4b95      	ldr	r3, [pc, #596]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a94      	ldr	r2, [pc, #592]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008424:	f023 0301 	bic.w	r3, r3, #1
 8008428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842a:	f7f9 fc63 	bl	8001cf4 <HAL_GetTick>
 800842e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008430:	e008      	b.n	8008444 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008432:	f7f9 fc5f 	bl	8001cf4 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e2ed      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008444:	4b8b      	ldr	r3, [pc, #556]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1f0      	bne.n	8008432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0310 	and.w	r3, r3, #16
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 80a9 	beq.w	80085b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800845e:	4b85      	ldr	r3, [pc, #532]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008466:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008468:	4b82      	ldr	r3, [pc, #520]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 800846a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	2b08      	cmp	r3, #8
 8008472:	d007      	beq.n	8008484 <HAL_RCC_OscConfig+0x308>
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2b18      	cmp	r3, #24
 8008478:	d13a      	bne.n	80084f0 <HAL_RCC_OscConfig+0x374>
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	2b01      	cmp	r3, #1
 8008482:	d135      	bne.n	80084f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008484:	4b7b      	ldr	r3, [pc, #492]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800848c:	2b00      	cmp	r3, #0
 800848e:	d005      	beq.n	800849c <HAL_RCC_OscConfig+0x320>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	2b80      	cmp	r3, #128	@ 0x80
 8008496:	d001      	beq.n	800849c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e2c1      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800849c:	f7f9 fc5a 	bl	8001d54 <HAL_GetREVID>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d817      	bhi.n	80084da <HAL_RCC_OscConfig+0x35e>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	d108      	bne.n	80084c4 <HAL_RCC_OscConfig+0x348>
 80084b2:	4b70      	ldr	r3, [pc, #448]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80084ba:	4a6e      	ldr	r2, [pc, #440]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80084bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084c2:	e075      	b.n	80085b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084c4:	4b6b      	ldr	r3, [pc, #428]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	069b      	lsls	r3, r3, #26
 80084d2:	4968      	ldr	r1, [pc, #416]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084d8:	e06a      	b.n	80085b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084da:	4b66      	ldr	r3, [pc, #408]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	061b      	lsls	r3, r3, #24
 80084e8:	4962      	ldr	r1, [pc, #392]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084ee:	e05f      	b.n	80085b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d042      	beq.n	800857e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80084f8:	4b5e      	ldr	r3, [pc, #376]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a5d      	ldr	r2, [pc, #372]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80084fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008504:	f7f9 fbf6 	bl	8001cf4 <HAL_GetTick>
 8008508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800850a:	e008      	b.n	800851e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800850c:	f7f9 fbf2 	bl	8001cf4 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d901      	bls.n	800851e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e280      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800851e:	4b55      	ldr	r3, [pc, #340]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0f0      	beq.n	800850c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800852a:	f7f9 fc13 	bl	8001d54 <HAL_GetREVID>
 800852e:	4603      	mov	r3, r0
 8008530:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008534:	4293      	cmp	r3, r2
 8008536:	d817      	bhi.n	8008568 <HAL_RCC_OscConfig+0x3ec>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	2b20      	cmp	r3, #32
 800853e:	d108      	bne.n	8008552 <HAL_RCC_OscConfig+0x3d6>
 8008540:	4b4c      	ldr	r3, [pc, #304]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008548:	4a4a      	ldr	r2, [pc, #296]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 800854a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800854e:	6053      	str	r3, [r2, #4]
 8008550:	e02e      	b.n	80085b0 <HAL_RCC_OscConfig+0x434>
 8008552:	4b48      	ldr	r3, [pc, #288]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	069b      	lsls	r3, r3, #26
 8008560:	4944      	ldr	r1, [pc, #272]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008562:	4313      	orrs	r3, r2
 8008564:	604b      	str	r3, [r1, #4]
 8008566:	e023      	b.n	80085b0 <HAL_RCC_OscConfig+0x434>
 8008568:	4b42      	ldr	r3, [pc, #264]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	061b      	lsls	r3, r3, #24
 8008576:	493f      	ldr	r1, [pc, #252]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008578:	4313      	orrs	r3, r2
 800857a:	60cb      	str	r3, [r1, #12]
 800857c:	e018      	b.n	80085b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800857e:	4b3d      	ldr	r3, [pc, #244]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a3c      	ldr	r2, [pc, #240]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008584:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858a:	f7f9 fbb3 	bl	8001cf4 <HAL_GetTick>
 800858e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008590:	e008      	b.n	80085a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008592:	f7f9 fbaf 	bl	8001cf4 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e23d      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085a4:	4b33      	ldr	r3, [pc, #204]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1f0      	bne.n	8008592 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d036      	beq.n	800862a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d019      	beq.n	80085f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80085c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085c8:	4a2a      	ldr	r2, [pc, #168]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80085ca:	f043 0301 	orr.w	r3, r3, #1
 80085ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d0:	f7f9 fb90 	bl	8001cf4 <HAL_GetTick>
 80085d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085d6:	e008      	b.n	80085ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085d8:	f7f9 fb8c 	bl	8001cf4 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e21a      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085ea:	4b22      	ldr	r3, [pc, #136]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80085ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f0      	beq.n	80085d8 <HAL_RCC_OscConfig+0x45c>
 80085f6:	e018      	b.n	800862a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085f8:	4b1e      	ldr	r3, [pc, #120]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80085fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 80085fe:	f023 0301 	bic.w	r3, r3, #1
 8008602:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008604:	f7f9 fb76 	bl	8001cf4 <HAL_GetTick>
 8008608:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800860a:	e008      	b.n	800861e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800860c:	f7f9 fb72 	bl	8001cf4 <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	2b02      	cmp	r3, #2
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e200      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800861e:	4b15      	ldr	r3, [pc, #84]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1f0      	bne.n	800860c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	d039      	beq.n	80086aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01c      	beq.n	8008678 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800863e:	4b0d      	ldr	r3, [pc, #52]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a0c      	ldr	r2, [pc, #48]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008644:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008648:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800864a:	f7f9 fb53 	bl	8001cf4 <HAL_GetTick>
 800864e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008650:	e008      	b.n	8008664 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008652:	f7f9 fb4f 	bl	8001cf4 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	2b02      	cmp	r3, #2
 800865e:	d901      	bls.n	8008664 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e1dd      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008664:	4b03      	ldr	r3, [pc, #12]	@ (8008674 <HAL_RCC_OscConfig+0x4f8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0f0      	beq.n	8008652 <HAL_RCC_OscConfig+0x4d6>
 8008670:	e01b      	b.n	80086aa <HAL_RCC_OscConfig+0x52e>
 8008672:	bf00      	nop
 8008674:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008678:	4b9b      	ldr	r3, [pc, #620]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a9a      	ldr	r2, [pc, #616]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800867e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008682:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008684:	f7f9 fb36 	bl	8001cf4 <HAL_GetTick>
 8008688:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800868a:	e008      	b.n	800869e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800868c:	f7f9 fb32 	bl	8001cf4 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e1c0      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800869e:	4b92      	ldr	r3, [pc, #584]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f0      	bne.n	800868c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0304 	and.w	r3, r3, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 8081 	beq.w	80087ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80086b8:	4b8c      	ldr	r3, [pc, #560]	@ (80088ec <HAL_RCC_OscConfig+0x770>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a8b      	ldr	r2, [pc, #556]	@ (80088ec <HAL_RCC_OscConfig+0x770>)
 80086be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086c4:	f7f9 fb16 	bl	8001cf4 <HAL_GetTick>
 80086c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086cc:	f7f9 fb12 	bl	8001cf4 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b64      	cmp	r3, #100	@ 0x64
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e1a0      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086de:	4b83      	ldr	r3, [pc, #524]	@ (80088ec <HAL_RCC_OscConfig+0x770>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f0      	beq.n	80086cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d106      	bne.n	8008700 <HAL_RCC_OscConfig+0x584>
 80086f2:	4b7d      	ldr	r3, [pc, #500]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80086f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f6:	4a7c      	ldr	r2, [pc, #496]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80086f8:	f043 0301 	orr.w	r3, r3, #1
 80086fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80086fe:	e02d      	b.n	800875c <HAL_RCC_OscConfig+0x5e0>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10c      	bne.n	8008722 <HAL_RCC_OscConfig+0x5a6>
 8008708:	4b77      	ldr	r3, [pc, #476]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800870a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800870c:	4a76      	ldr	r2, [pc, #472]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	6713      	str	r3, [r2, #112]	@ 0x70
 8008714:	4b74      	ldr	r3, [pc, #464]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008718:	4a73      	ldr	r2, [pc, #460]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800871a:	f023 0304 	bic.w	r3, r3, #4
 800871e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008720:	e01c      	b.n	800875c <HAL_RCC_OscConfig+0x5e0>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	2b05      	cmp	r3, #5
 8008728:	d10c      	bne.n	8008744 <HAL_RCC_OscConfig+0x5c8>
 800872a:	4b6f      	ldr	r3, [pc, #444]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800872c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800872e:	4a6e      	ldr	r2, [pc, #440]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008730:	f043 0304 	orr.w	r3, r3, #4
 8008734:	6713      	str	r3, [r2, #112]	@ 0x70
 8008736:	4b6c      	ldr	r3, [pc, #432]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873a:	4a6b      	ldr	r2, [pc, #428]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800873c:	f043 0301 	orr.w	r3, r3, #1
 8008740:	6713      	str	r3, [r2, #112]	@ 0x70
 8008742:	e00b      	b.n	800875c <HAL_RCC_OscConfig+0x5e0>
 8008744:	4b68      	ldr	r3, [pc, #416]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008748:	4a67      	ldr	r2, [pc, #412]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800874a:	f023 0301 	bic.w	r3, r3, #1
 800874e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008750:	4b65      	ldr	r3, [pc, #404]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008754:	4a64      	ldr	r2, [pc, #400]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008756:	f023 0304 	bic.w	r3, r3, #4
 800875a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d015      	beq.n	8008790 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008764:	f7f9 fac6 	bl	8001cf4 <HAL_GetTick>
 8008768:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800876a:	e00a      	b.n	8008782 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800876c:	f7f9 fac2 	bl	8001cf4 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800877a:	4293      	cmp	r3, r2
 800877c:	d901      	bls.n	8008782 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e14e      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008782:	4b59      	ldr	r3, [pc, #356]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0ee      	beq.n	800876c <HAL_RCC_OscConfig+0x5f0>
 800878e:	e014      	b.n	80087ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008790:	f7f9 fab0 	bl	8001cf4 <HAL_GetTick>
 8008794:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008796:	e00a      	b.n	80087ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008798:	f7f9 faac 	bl	8001cf4 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e138      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087ae:	4b4e      	ldr	r3, [pc, #312]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80087b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1ee      	bne.n	8008798 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 812d 	beq.w	8008a1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80087c4:	4b48      	ldr	r3, [pc, #288]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087cc:	2b18      	cmp	r3, #24
 80087ce:	f000 80bd 	beq.w	800894c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	f040 809e 	bne.w	8008918 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087dc:	4b42      	ldr	r3, [pc, #264]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a41      	ldr	r2, [pc, #260]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80087e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e8:	f7f9 fa84 	bl	8001cf4 <HAL_GetTick>
 80087ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087f0:	f7f9 fa80 	bl	8001cf4 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e10e      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008802:	4b39      	ldr	r3, [pc, #228]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f0      	bne.n	80087f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800880e:	4b36      	ldr	r3, [pc, #216]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008810:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008812:	4b37      	ldr	r3, [pc, #220]	@ (80088f0 <HAL_RCC_OscConfig+0x774>)
 8008814:	4013      	ands	r3, r2
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800881e:	0112      	lsls	r2, r2, #4
 8008820:	430a      	orrs	r2, r1
 8008822:	4931      	ldr	r1, [pc, #196]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008824:	4313      	orrs	r3, r2
 8008826:	628b      	str	r3, [r1, #40]	@ 0x28
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800882c:	3b01      	subs	r3, #1
 800882e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008836:	3b01      	subs	r3, #1
 8008838:	025b      	lsls	r3, r3, #9
 800883a:	b29b      	uxth	r3, r3
 800883c:	431a      	orrs	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008842:	3b01      	subs	r3, #1
 8008844:	041b      	lsls	r3, r3, #16
 8008846:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008850:	3b01      	subs	r3, #1
 8008852:	061b      	lsls	r3, r3, #24
 8008854:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008858:	4923      	ldr	r1, [pc, #140]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800885a:	4313      	orrs	r3, r2
 800885c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800885e:	4b22      	ldr	r3, [pc, #136]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008862:	4a21      	ldr	r2, [pc, #132]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008864:	f023 0301 	bic.w	r3, r3, #1
 8008868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800886a:	4b1f      	ldr	r3, [pc, #124]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800886c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800886e:	4b21      	ldr	r3, [pc, #132]	@ (80088f4 <HAL_RCC_OscConfig+0x778>)
 8008870:	4013      	ands	r3, r2
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008876:	00d2      	lsls	r2, r2, #3
 8008878:	491b      	ldr	r1, [pc, #108]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800887a:	4313      	orrs	r3, r2
 800887c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800887e:	4b1a      	ldr	r3, [pc, #104]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008882:	f023 020c 	bic.w	r2, r3, #12
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888a:	4917      	ldr	r1, [pc, #92]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800888c:	4313      	orrs	r3, r2
 800888e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008890:	4b15      	ldr	r3, [pc, #84]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 8008892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008894:	f023 0202 	bic.w	r2, r3, #2
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889c:	4912      	ldr	r1, [pc, #72]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80088a2:	4b11      	ldr	r3, [pc, #68]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80088a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a6:	4a10      	ldr	r2, [pc, #64]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80088a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ae:	4b0e      	ldr	r3, [pc, #56]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80088b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b2:	4a0d      	ldr	r2, [pc, #52]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80088b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80088ba:	4b0b      	ldr	r3, [pc, #44]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	4a0a      	ldr	r2, [pc, #40]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80088c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80088c6:	4b08      	ldr	r3, [pc, #32]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80088c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ca:	4a07      	ldr	r2, [pc, #28]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80088cc:	f043 0301 	orr.w	r3, r3, #1
 80088d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088d2:	4b05      	ldr	r3, [pc, #20]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a04      	ldr	r2, [pc, #16]	@ (80088e8 <HAL_RCC_OscConfig+0x76c>)
 80088d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088de:	f7f9 fa09 	bl	8001cf4 <HAL_GetTick>
 80088e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088e4:	e011      	b.n	800890a <HAL_RCC_OscConfig+0x78e>
 80088e6:	bf00      	nop
 80088e8:	58024400 	.word	0x58024400
 80088ec:	58024800 	.word	0x58024800
 80088f0:	fffffc0c 	.word	0xfffffc0c
 80088f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088f8:	f7f9 f9fc 	bl	8001cf4 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	2b02      	cmp	r3, #2
 8008904:	d901      	bls.n	800890a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e08a      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800890a:	4b47      	ldr	r3, [pc, #284]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0f0      	beq.n	80088f8 <HAL_RCC_OscConfig+0x77c>
 8008916:	e082      	b.n	8008a1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008918:	4b43      	ldr	r3, [pc, #268]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a42      	ldr	r2, [pc, #264]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 800891e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008924:	f7f9 f9e6 	bl	8001cf4 <HAL_GetTick>
 8008928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800892c:	f7f9 f9e2 	bl	8001cf4 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e070      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800893e:	4b3a      	ldr	r3, [pc, #232]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f0      	bne.n	800892c <HAL_RCC_OscConfig+0x7b0>
 800894a:	e068      	b.n	8008a1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800894c:	4b36      	ldr	r3, [pc, #216]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 800894e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008950:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008952:	4b35      	ldr	r3, [pc, #212]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 8008954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008956:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895c:	2b01      	cmp	r3, #1
 800895e:	d031      	beq.n	80089c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	f003 0203 	and.w	r2, r3, #3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800896a:	429a      	cmp	r2, r3
 800896c:	d12a      	bne.n	80089c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	091b      	lsrs	r3, r3, #4
 8008972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800897a:	429a      	cmp	r2, r3
 800897c:	d122      	bne.n	80089c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008988:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800898a:	429a      	cmp	r2, r3
 800898c:	d11a      	bne.n	80089c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	0a5b      	lsrs	r3, r3, #9
 8008992:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800899a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800899c:	429a      	cmp	r2, r3
 800899e:	d111      	bne.n	80089c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	0c1b      	lsrs	r3, r3, #16
 80089a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d108      	bne.n	80089c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	0e1b      	lsrs	r3, r3, #24
 80089b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d001      	beq.n	80089c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e02b      	b.n	8008a20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80089c8:	4b17      	ldr	r3, [pc, #92]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 80089ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089cc:	08db      	lsrs	r3, r3, #3
 80089ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d01f      	beq.n	8008a1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80089de:	4b12      	ldr	r3, [pc, #72]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e2:	4a11      	ldr	r2, [pc, #68]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 80089e4:	f023 0301 	bic.w	r3, r3, #1
 80089e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80089ea:	f7f9 f983 	bl	8001cf4 <HAL_GetTick>
 80089ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80089f0:	bf00      	nop
 80089f2:	f7f9 f97f 	bl	8001cf4 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d0f9      	beq.n	80089f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 8008a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a02:	4b0a      	ldr	r3, [pc, #40]	@ (8008a2c <HAL_RCC_OscConfig+0x8b0>)
 8008a04:	4013      	ands	r3, r2
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a0a:	00d2      	lsls	r2, r2, #3
 8008a0c:	4906      	ldr	r1, [pc, #24]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008a12:	4b05      	ldr	r3, [pc, #20]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 8008a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a16:	4a04      	ldr	r2, [pc, #16]	@ (8008a28 <HAL_RCC_OscConfig+0x8ac>)
 8008a18:	f043 0301 	orr.w	r3, r3, #1
 8008a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3730      	adds	r7, #48	@ 0x30
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	ffff0007 	.word	0xffff0007

08008a30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e19c      	b.n	8008d7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a44:	4b8a      	ldr	r3, [pc, #552]	@ (8008c70 <HAL_RCC_ClockConfig+0x240>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 030f 	and.w	r3, r3, #15
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d910      	bls.n	8008a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a52:	4b87      	ldr	r3, [pc, #540]	@ (8008c70 <HAL_RCC_ClockConfig+0x240>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f023 020f 	bic.w	r2, r3, #15
 8008a5a:	4985      	ldr	r1, [pc, #532]	@ (8008c70 <HAL_RCC_ClockConfig+0x240>)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a62:	4b83      	ldr	r3, [pc, #524]	@ (8008c70 <HAL_RCC_ClockConfig+0x240>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 030f 	and.w	r3, r3, #15
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d001      	beq.n	8008a74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e184      	b.n	8008d7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d010      	beq.n	8008aa2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691a      	ldr	r2, [r3, #16]
 8008a84:	4b7b      	ldr	r3, [pc, #492]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d908      	bls.n	8008aa2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a90:	4b78      	ldr	r3, [pc, #480]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	4975      	ldr	r1, [pc, #468]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0308 	and.w	r3, r3, #8
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d010      	beq.n	8008ad0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	695a      	ldr	r2, [r3, #20]
 8008ab2:	4b70      	ldr	r3, [pc, #448]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d908      	bls.n	8008ad0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008abe:	4b6d      	ldr	r3, [pc, #436]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	496a      	ldr	r1, [pc, #424]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0310 	and.w	r3, r3, #16
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d010      	beq.n	8008afe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	699a      	ldr	r2, [r3, #24]
 8008ae0:	4b64      	ldr	r3, [pc, #400]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d908      	bls.n	8008afe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008aec:	4b61      	ldr	r3, [pc, #388]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	495e      	ldr	r1, [pc, #376]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0320 	and.w	r3, r3, #32
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d010      	beq.n	8008b2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	69da      	ldr	r2, [r3, #28]
 8008b0e:	4b59      	ldr	r3, [pc, #356]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d908      	bls.n	8008b2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b1a:	4b56      	ldr	r3, [pc, #344]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	4953      	ldr	r1, [pc, #332]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0302 	and.w	r3, r3, #2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d010      	beq.n	8008b5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68da      	ldr	r2, [r3, #12]
 8008b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	f003 030f 	and.w	r3, r3, #15
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d908      	bls.n	8008b5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b48:	4b4a      	ldr	r3, [pc, #296]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	f023 020f 	bic.w	r2, r3, #15
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	4947      	ldr	r1, [pc, #284]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d055      	beq.n	8008c12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b66:	4b43      	ldr	r3, [pc, #268]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	4940      	ldr	r1, [pc, #256]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d107      	bne.n	8008b90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b80:	4b3c      	ldr	r3, [pc, #240]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d121      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e0f6      	b.n	8008d7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d107      	bne.n	8008ba8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b98:	4b36      	ldr	r3, [pc, #216]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d115      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e0ea      	b.n	8008d7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d107      	bne.n	8008bc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bb0:	4b30      	ldr	r3, [pc, #192]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d109      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e0de      	b.n	8008d7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e0d6      	b.n	8008d7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008bd0:	4b28      	ldr	r3, [pc, #160]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	f023 0207 	bic.w	r2, r3, #7
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	4925      	ldr	r1, [pc, #148]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008be2:	f7f9 f887 	bl	8001cf4 <HAL_GetTick>
 8008be6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008be8:	e00a      	b.n	8008c00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bea:	f7f9 f883 	bl	8001cf4 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d901      	bls.n	8008c00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e0be      	b.n	8008d7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c00:	4b1c      	ldr	r3, [pc, #112]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d1eb      	bne.n	8008bea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d010      	beq.n	8008c40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68da      	ldr	r2, [r3, #12]
 8008c22:	4b14      	ldr	r3, [pc, #80]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d208      	bcs.n	8008c40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c2e:	4b11      	ldr	r3, [pc, #68]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	f023 020f 	bic.w	r2, r3, #15
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	490e      	ldr	r1, [pc, #56]	@ (8008c74 <HAL_RCC_ClockConfig+0x244>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c40:	4b0b      	ldr	r3, [pc, #44]	@ (8008c70 <HAL_RCC_ClockConfig+0x240>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 030f 	and.w	r3, r3, #15
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d214      	bcs.n	8008c78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c4e:	4b08      	ldr	r3, [pc, #32]	@ (8008c70 <HAL_RCC_ClockConfig+0x240>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f023 020f 	bic.w	r2, r3, #15
 8008c56:	4906      	ldr	r1, [pc, #24]	@ (8008c70 <HAL_RCC_ClockConfig+0x240>)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c5e:	4b04      	ldr	r3, [pc, #16]	@ (8008c70 <HAL_RCC_ClockConfig+0x240>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 030f 	and.w	r3, r3, #15
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d005      	beq.n	8008c78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e086      	b.n	8008d7e <HAL_RCC_ClockConfig+0x34e>
 8008c70:	52002000 	.word	0x52002000
 8008c74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d010      	beq.n	8008ca6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	4b3f      	ldr	r3, [pc, #252]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d208      	bcs.n	8008ca6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c94:	4b3c      	ldr	r3, [pc, #240]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	4939      	ldr	r1, [pc, #228]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0308 	and.w	r3, r3, #8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d010      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	695a      	ldr	r2, [r3, #20]
 8008cb6:	4b34      	ldr	r3, [pc, #208]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d208      	bcs.n	8008cd4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cc2:	4b31      	ldr	r3, [pc, #196]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	492e      	ldr	r1, [pc, #184]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d010      	beq.n	8008d02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	699a      	ldr	r2, [r3, #24]
 8008ce4:	4b28      	ldr	r3, [pc, #160]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d208      	bcs.n	8008d02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cf0:	4b25      	ldr	r3, [pc, #148]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	4922      	ldr	r1, [pc, #136]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d010      	beq.n	8008d30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	69da      	ldr	r2, [r3, #28]
 8008d12:	4b1d      	ldr	r3, [pc, #116]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d208      	bcs.n	8008d30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	4917      	ldr	r1, [pc, #92]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d30:	f000 f834 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
 8008d34:	4602      	mov	r2, r0
 8008d36:	4b14      	ldr	r3, [pc, #80]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	0a1b      	lsrs	r3, r3, #8
 8008d3c:	f003 030f 	and.w	r3, r3, #15
 8008d40:	4912      	ldr	r1, [pc, #72]	@ (8008d8c <HAL_RCC_ClockConfig+0x35c>)
 8008d42:	5ccb      	ldrb	r3, [r1, r3]
 8008d44:	f003 031f 	and.w	r3, r3, #31
 8008d48:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d88 <HAL_RCC_ClockConfig+0x358>)
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	f003 030f 	and.w	r3, r3, #15
 8008d56:	4a0d      	ldr	r2, [pc, #52]	@ (8008d8c <HAL_RCC_ClockConfig+0x35c>)
 8008d58:	5cd3      	ldrb	r3, [r2, r3]
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	fa22 f303 	lsr.w	r3, r2, r3
 8008d64:	4a0a      	ldr	r2, [pc, #40]	@ (8008d90 <HAL_RCC_ClockConfig+0x360>)
 8008d66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d68:	4a0a      	ldr	r2, [pc, #40]	@ (8008d94 <HAL_RCC_ClockConfig+0x364>)
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d98 <HAL_RCC_ClockConfig+0x368>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f8 fba8 	bl	80014c8 <HAL_InitTick>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	08015248 	.word	0x08015248
 8008d90:	24000008 	.word	0x24000008
 8008d94:	24000004 	.word	0x24000004
 8008d98:	2400000c 	.word	0x2400000c

08008d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b089      	sub	sp, #36	@ 0x24
 8008da0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008da2:	4bb3      	ldr	r3, [pc, #716]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008daa:	2b18      	cmp	r3, #24
 8008dac:	f200 8155 	bhi.w	800905a <HAL_RCC_GetSysClockFreq+0x2be>
 8008db0:	a201      	add	r2, pc, #4	@ (adr r2, 8008db8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db6:	bf00      	nop
 8008db8:	08008e1d 	.word	0x08008e1d
 8008dbc:	0800905b 	.word	0x0800905b
 8008dc0:	0800905b 	.word	0x0800905b
 8008dc4:	0800905b 	.word	0x0800905b
 8008dc8:	0800905b 	.word	0x0800905b
 8008dcc:	0800905b 	.word	0x0800905b
 8008dd0:	0800905b 	.word	0x0800905b
 8008dd4:	0800905b 	.word	0x0800905b
 8008dd8:	08008e43 	.word	0x08008e43
 8008ddc:	0800905b 	.word	0x0800905b
 8008de0:	0800905b 	.word	0x0800905b
 8008de4:	0800905b 	.word	0x0800905b
 8008de8:	0800905b 	.word	0x0800905b
 8008dec:	0800905b 	.word	0x0800905b
 8008df0:	0800905b 	.word	0x0800905b
 8008df4:	0800905b 	.word	0x0800905b
 8008df8:	08008e49 	.word	0x08008e49
 8008dfc:	0800905b 	.word	0x0800905b
 8008e00:	0800905b 	.word	0x0800905b
 8008e04:	0800905b 	.word	0x0800905b
 8008e08:	0800905b 	.word	0x0800905b
 8008e0c:	0800905b 	.word	0x0800905b
 8008e10:	0800905b 	.word	0x0800905b
 8008e14:	0800905b 	.word	0x0800905b
 8008e18:	08008e4f 	.word	0x08008e4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e1c:	4b94      	ldr	r3, [pc, #592]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0320 	and.w	r3, r3, #32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d009      	beq.n	8008e3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e28:	4b91      	ldr	r3, [pc, #580]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	08db      	lsrs	r3, r3, #3
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	4a90      	ldr	r2, [pc, #576]	@ (8009074 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e34:	fa22 f303 	lsr.w	r3, r2, r3
 8008e38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008e3a:	e111      	b.n	8009060 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e3c:	4b8d      	ldr	r3, [pc, #564]	@ (8009074 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e3e:	61bb      	str	r3, [r7, #24]
      break;
 8008e40:	e10e      	b.n	8009060 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008e42:	4b8d      	ldr	r3, [pc, #564]	@ (8009078 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e44:	61bb      	str	r3, [r7, #24]
      break;
 8008e46:	e10b      	b.n	8009060 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008e48:	4b8c      	ldr	r3, [pc, #560]	@ (800907c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e4a:	61bb      	str	r3, [r7, #24]
      break;
 8008e4c:	e108      	b.n	8009060 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e4e:	4b88      	ldr	r3, [pc, #544]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008e58:	4b85      	ldr	r3, [pc, #532]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5c:	091b      	lsrs	r3, r3, #4
 8008e5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e64:	4b82      	ldr	r3, [pc, #520]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e6e:	4b80      	ldr	r3, [pc, #512]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e72:	08db      	lsrs	r3, r3, #3
 8008e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	fb02 f303 	mul.w	r3, r2, r3
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 80e1 	beq.w	8009054 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	f000 8083 	beq.w	8008fa0 <HAL_RCC_GetSysClockFreq+0x204>
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	f200 80a1 	bhi.w	8008fe4 <HAL_RCC_GetSysClockFreq+0x248>
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <HAL_RCC_GetSysClockFreq+0x114>
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d056      	beq.n	8008f5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008eae:	e099      	b.n	8008fe4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0320 	and.w	r3, r3, #32
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d02d      	beq.n	8008f18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	08db      	lsrs	r3, r3, #3
 8008ec2:	f003 0303 	and.w	r3, r3, #3
 8008ec6:	4a6b      	ldr	r2, [pc, #428]	@ (8009074 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ecc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	ee07 3a90 	vmov	s15, r3
 8008ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee6:	4b62      	ldr	r3, [pc, #392]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008efa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008f16:	e087      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009084 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2a:	4b51      	ldr	r3, [pc, #324]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f5a:	e065      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009088 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6e:	4b40      	ldr	r3, [pc, #256]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f9e:	e043      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008faa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800908c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fe2:	e021      	b.n	8009028 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009088 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009006:	ed97 6a02 	vldr	s12, [r7, #8]
 800900a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009080 <HAL_RCC_GetSysClockFreq+0x2e4>
 800900e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800901a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009026:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009028:	4b11      	ldr	r3, [pc, #68]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800902a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800902c:	0a5b      	lsrs	r3, r3, #9
 800902e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009032:	3301      	adds	r3, #1
 8009034:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	ee07 3a90 	vmov	s15, r3
 800903c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009040:	edd7 6a07 	vldr	s13, [r7, #28]
 8009044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800904c:	ee17 3a90 	vmov	r3, s15
 8009050:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009052:	e005      	b.n	8009060 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	61bb      	str	r3, [r7, #24]
      break;
 8009058:	e002      	b.n	8009060 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800905a:	4b07      	ldr	r3, [pc, #28]	@ (8009078 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800905c:	61bb      	str	r3, [r7, #24]
      break;
 800905e:	bf00      	nop
  }

  return sysclockfreq;
 8009060:	69bb      	ldr	r3, [r7, #24]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3724      	adds	r7, #36	@ 0x24
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	58024400 	.word	0x58024400
 8009074:	03d09000 	.word	0x03d09000
 8009078:	003d0900 	.word	0x003d0900
 800907c:	017d7840 	.word	0x017d7840
 8009080:	46000000 	.word	0x46000000
 8009084:	4c742400 	.word	0x4c742400
 8009088:	4a742400 	.word	0x4a742400
 800908c:	4bbebc20 	.word	0x4bbebc20

08009090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009096:	f7ff fe81 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
 800909a:	4602      	mov	r2, r0
 800909c:	4b10      	ldr	r3, [pc, #64]	@ (80090e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	f003 030f 	and.w	r3, r3, #15
 80090a6:	490f      	ldr	r1, [pc, #60]	@ (80090e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80090a8:	5ccb      	ldrb	r3, [r1, r3]
 80090aa:	f003 031f 	and.w	r3, r3, #31
 80090ae:	fa22 f303 	lsr.w	r3, r2, r3
 80090b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090b4:	4b0a      	ldr	r3, [pc, #40]	@ (80090e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	f003 030f 	and.w	r3, r3, #15
 80090bc:	4a09      	ldr	r2, [pc, #36]	@ (80090e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80090be:	5cd3      	ldrb	r3, [r2, r3]
 80090c0:	f003 031f 	and.w	r3, r3, #31
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	fa22 f303 	lsr.w	r3, r2, r3
 80090ca:	4a07      	ldr	r2, [pc, #28]	@ (80090e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80090cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090ce:	4a07      	ldr	r2, [pc, #28]	@ (80090ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80090d4:	4b04      	ldr	r3, [pc, #16]	@ (80090e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80090d6:	681b      	ldr	r3, [r3, #0]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	58024400 	.word	0x58024400
 80090e4:	08015248 	.word	0x08015248
 80090e8:	24000008 	.word	0x24000008
 80090ec:	24000004 	.word	0x24000004

080090f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80090f4:	f7ff ffcc 	bl	8009090 <HAL_RCC_GetHCLKFreq>
 80090f8:	4602      	mov	r2, r0
 80090fa:	4b06      	ldr	r3, [pc, #24]	@ (8009114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	091b      	lsrs	r3, r3, #4
 8009100:	f003 0307 	and.w	r3, r3, #7
 8009104:	4904      	ldr	r1, [pc, #16]	@ (8009118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009106:	5ccb      	ldrb	r3, [r1, r3]
 8009108:	f003 031f 	and.w	r3, r3, #31
 800910c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009110:	4618      	mov	r0, r3
 8009112:	bd80      	pop	{r7, pc}
 8009114:	58024400 	.word	0x58024400
 8009118:	08015248 	.word	0x08015248

0800911c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	223f      	movs	r2, #63	@ 0x3f
 800912a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800912c:	4b1a      	ldr	r3, [pc, #104]	@ (8009198 <HAL_RCC_GetClockConfig+0x7c>)
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f003 0207 	and.w	r2, r3, #7
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009138:	4b17      	ldr	r3, [pc, #92]	@ (8009198 <HAL_RCC_GetClockConfig+0x7c>)
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009144:	4b14      	ldr	r3, [pc, #80]	@ (8009198 <HAL_RCC_GetClockConfig+0x7c>)
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	f003 020f 	and.w	r2, r3, #15
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009150:	4b11      	ldr	r3, [pc, #68]	@ (8009198 <HAL_RCC_GetClockConfig+0x7c>)
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800915c:	4b0e      	ldr	r3, [pc, #56]	@ (8009198 <HAL_RCC_GetClockConfig+0x7c>)
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009168:	4b0b      	ldr	r3, [pc, #44]	@ (8009198 <HAL_RCC_GetClockConfig+0x7c>)
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009174:	4b08      	ldr	r3, [pc, #32]	@ (8009198 <HAL_RCC_GetClockConfig+0x7c>)
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009180:	4b06      	ldr	r3, [pc, #24]	@ (800919c <HAL_RCC_GetClockConfig+0x80>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 020f 	and.w	r2, r3, #15
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	601a      	str	r2, [r3, #0]
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	58024400 	.word	0x58024400
 800919c:	52002000 	.word	0x52002000

080091a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091a4:	b0ca      	sub	sp, #296	@ 0x128
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091ac:	2300      	movs	r3, #0
 80091ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091b2:	2300      	movs	r3, #0
 80091b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80091c4:	2500      	movs	r5, #0
 80091c6:	ea54 0305 	orrs.w	r3, r4, r5
 80091ca:	d049      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80091cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091d6:	d02f      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80091d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091dc:	d828      	bhi.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80091de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091e2:	d01a      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80091e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091e8:	d822      	bhi.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80091ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091f2:	d007      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80091f4:	e01c      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f6:	4bb8      	ldr	r3, [pc, #736]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fa:	4ab7      	ldr	r2, [pc, #732]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009200:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009202:	e01a      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009208:	3308      	adds	r3, #8
 800920a:	2102      	movs	r1, #2
 800920c:	4618      	mov	r0, r3
 800920e:	f002 fb61 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009212:	4603      	mov	r3, r0
 8009214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009218:	e00f      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800921a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921e:	3328      	adds	r3, #40	@ 0x28
 8009220:	2102      	movs	r1, #2
 8009222:	4618      	mov	r0, r3
 8009224:	f002 fc08 	bl	800ba38 <RCCEx_PLL3_Config>
 8009228:	4603      	mov	r3, r0
 800922a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800922e:	e004      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009236:	e000      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800923a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009242:	4ba5      	ldr	r3, [pc, #660]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009246:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800924a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009250:	4aa1      	ldr	r2, [pc, #644]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009252:	430b      	orrs	r3, r1
 8009254:	6513      	str	r3, [r2, #80]	@ 0x50
 8009256:	e003      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800925c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800926c:	f04f 0900 	mov.w	r9, #0
 8009270:	ea58 0309 	orrs.w	r3, r8, r9
 8009274:	d047      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800927a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800927c:	2b04      	cmp	r3, #4
 800927e:	d82a      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009280:	a201      	add	r2, pc, #4	@ (adr r2, 8009288 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	0800929d 	.word	0x0800929d
 800928c:	080092ab 	.word	0x080092ab
 8009290:	080092c1 	.word	0x080092c1
 8009294:	080092df 	.word	0x080092df
 8009298:	080092df 	.word	0x080092df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800929c:	4b8e      	ldr	r3, [pc, #568]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800929e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a0:	4a8d      	ldr	r2, [pc, #564]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092a8:	e01a      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ae:	3308      	adds	r3, #8
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f002 fb0e 	bl	800b8d4 <RCCEx_PLL2_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092be:	e00f      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c4:	3328      	adds	r3, #40	@ 0x28
 80092c6:	2100      	movs	r1, #0
 80092c8:	4618      	mov	r0, r3
 80092ca:	f002 fbb5 	bl	800ba38 <RCCEx_PLL3_Config>
 80092ce:	4603      	mov	r3, r0
 80092d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092d4:	e004      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092dc:	e000      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80092de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092e8:	4b7b      	ldr	r3, [pc, #492]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092ec:	f023 0107 	bic.w	r1, r3, #7
 80092f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f6:	4a78      	ldr	r2, [pc, #480]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092f8:	430b      	orrs	r3, r1
 80092fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80092fc:	e003      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009312:	f04f 0b00 	mov.w	fp, #0
 8009316:	ea5a 030b 	orrs.w	r3, sl, fp
 800931a:	d04c      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800931c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009326:	d030      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800932c:	d829      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800932e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009330:	d02d      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009332:	2bc0      	cmp	r3, #192	@ 0xc0
 8009334:	d825      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009336:	2b80      	cmp	r3, #128	@ 0x80
 8009338:	d018      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800933a:	2b80      	cmp	r3, #128	@ 0x80
 800933c:	d821      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009342:	2b40      	cmp	r3, #64	@ 0x40
 8009344:	d007      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009346:	e01c      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009348:	4b63      	ldr	r3, [pc, #396]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800934a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934c:	4a62      	ldr	r2, [pc, #392]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800934e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009354:	e01c      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935a:	3308      	adds	r3, #8
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f002 fab8 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009364:	4603      	mov	r3, r0
 8009366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800936a:	e011      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800936c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009370:	3328      	adds	r3, #40	@ 0x28
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f002 fb5f 	bl	800ba38 <RCCEx_PLL3_Config>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009380:	e006      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009388:	e002      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800938a:	bf00      	nop
 800938c:	e000      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800938e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10a      	bne.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009398:	4b4f      	ldr	r3, [pc, #316]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800939a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800939c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80093a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093a6:	4a4c      	ldr	r2, [pc, #304]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093a8:	430b      	orrs	r3, r1
 80093aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80093ac:	e003      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80093b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80093c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80093c6:	2300      	movs	r3, #0
 80093c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80093cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80093d0:	460b      	mov	r3, r1
 80093d2:	4313      	orrs	r3, r2
 80093d4:	d053      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80093de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093e2:	d035      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80093e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093e8:	d82e      	bhi.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80093ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80093ee:	d031      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80093f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80093f4:	d828      	bhi.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80093f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093fa:	d01a      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80093fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009400:	d822      	bhi.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800940a:	d007      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800940c:	e01c      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800940e:	4b32      	ldr	r3, [pc, #200]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009412:	4a31      	ldr	r2, [pc, #196]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009418:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800941a:	e01c      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800941c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009420:	3308      	adds	r3, #8
 8009422:	2100      	movs	r1, #0
 8009424:	4618      	mov	r0, r3
 8009426:	f002 fa55 	bl	800b8d4 <RCCEx_PLL2_Config>
 800942a:	4603      	mov	r3, r0
 800942c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009430:	e011      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009436:	3328      	adds	r3, #40	@ 0x28
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f002 fafc 	bl	800ba38 <RCCEx_PLL3_Config>
 8009440:	4603      	mov	r3, r0
 8009442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009446:	e006      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800944e:	e002      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009450:	bf00      	nop
 8009452:	e000      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10b      	bne.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800945e:	4b1e      	ldr	r3, [pc, #120]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009462:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800946e:	4a1a      	ldr	r2, [pc, #104]	@ (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009470:	430b      	orrs	r3, r1
 8009472:	6593      	str	r3, [r2, #88]	@ 0x58
 8009474:	e003      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800947a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800947e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800948a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800948e:	2300      	movs	r3, #0
 8009490:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009494:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009498:	460b      	mov	r3, r1
 800949a:	4313      	orrs	r3, r2
 800949c:	d056      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800949e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80094a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094aa:	d038      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80094ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094b0:	d831      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094b6:	d034      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80094b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094bc:	d82b      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094c2:	d01d      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80094c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094c8:	d825      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d006      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80094ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094d2:	d00a      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80094d4:	e01f      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094d6:	bf00      	nop
 80094d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094dc:	4ba2      	ldr	r3, [pc, #648]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e0:	4aa1      	ldr	r2, [pc, #644]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094e8:	e01c      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ee:	3308      	adds	r3, #8
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f002 f9ee 	bl	800b8d4 <RCCEx_PLL2_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80094fe:	e011      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009504:	3328      	adds	r3, #40	@ 0x28
 8009506:	2100      	movs	r1, #0
 8009508:	4618      	mov	r0, r3
 800950a:	f002 fa95 	bl	800ba38 <RCCEx_PLL3_Config>
 800950e:	4603      	mov	r3, r0
 8009510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009514:	e006      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800951c:	e002      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800951e:	bf00      	nop
 8009520:	e000      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10b      	bne.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800952c:	4b8e      	ldr	r3, [pc, #568]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800952e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009530:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009538:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800953c:	4a8a      	ldr	r2, [pc, #552]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800953e:	430b      	orrs	r3, r1
 8009540:	6593      	str	r3, [r2, #88]	@ 0x58
 8009542:	e003      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800954c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009558:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800955c:	2300      	movs	r3, #0
 800955e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009562:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009566:	460b      	mov	r3, r1
 8009568:	4313      	orrs	r3, r2
 800956a:	d03a      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800956c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009572:	2b30      	cmp	r3, #48	@ 0x30
 8009574:	d01f      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009576:	2b30      	cmp	r3, #48	@ 0x30
 8009578:	d819      	bhi.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800957a:	2b20      	cmp	r3, #32
 800957c:	d00c      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800957e:	2b20      	cmp	r3, #32
 8009580:	d815      	bhi.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d019      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009586:	2b10      	cmp	r3, #16
 8009588:	d111      	bne.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800958a:	4b77      	ldr	r3, [pc, #476]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800958c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958e:	4a76      	ldr	r2, [pc, #472]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009596:	e011      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959c:	3308      	adds	r3, #8
 800959e:	2102      	movs	r1, #2
 80095a0:	4618      	mov	r0, r3
 80095a2:	f002 f997 	bl	800b8d4 <RCCEx_PLL2_Config>
 80095a6:	4603      	mov	r3, r0
 80095a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80095ac:	e006      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095b4:	e002      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80095b6:	bf00      	nop
 80095b8:	e000      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80095ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10a      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80095c4:	4b68      	ldr	r3, [pc, #416]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095d2:	4a65      	ldr	r2, [pc, #404]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095d4:	430b      	orrs	r3, r1
 80095d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095d8:	e003      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80095e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80095ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80095f2:	2300      	movs	r3, #0
 80095f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80095f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80095fc:	460b      	mov	r3, r1
 80095fe:	4313      	orrs	r3, r2
 8009600:	d051      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800960c:	d035      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800960e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009612:	d82e      	bhi.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009614:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009618:	d031      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800961a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800961e:	d828      	bhi.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009624:	d01a      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800962a:	d822      	bhi.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009634:	d007      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009636:	e01c      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009638:	4b4b      	ldr	r3, [pc, #300]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800963a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963c:	4a4a      	ldr	r2, [pc, #296]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800963e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009644:	e01c      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800964a:	3308      	adds	r3, #8
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f002 f940 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009654:	4603      	mov	r3, r0
 8009656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800965a:	e011      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800965c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009660:	3328      	adds	r3, #40	@ 0x28
 8009662:	2100      	movs	r1, #0
 8009664:	4618      	mov	r0, r3
 8009666:	f002 f9e7 	bl	800ba38 <RCCEx_PLL3_Config>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009670:	e006      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009678:	e002      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800967a:	bf00      	nop
 800967c:	e000      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800967e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009688:	4b37      	ldr	r3, [pc, #220]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800968a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800968c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009696:	4a34      	ldr	r2, [pc, #208]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009698:	430b      	orrs	r3, r1
 800969a:	6513      	str	r3, [r2, #80]	@ 0x50
 800969c:	e003      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80096b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80096b6:	2300      	movs	r3, #0
 80096b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80096bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80096c0:	460b      	mov	r3, r1
 80096c2:	4313      	orrs	r3, r2
 80096c4:	d056      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80096c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096d0:	d033      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80096d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096d6:	d82c      	bhi.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096dc:	d02f      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80096de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096e2:	d826      	bhi.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80096e8:	d02b      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80096ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80096ee:	d820      	bhi.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096f4:	d012      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80096f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096fa:	d81a      	bhi.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d022      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009704:	d115      	bne.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800970a:	3308      	adds	r3, #8
 800970c:	2101      	movs	r1, #1
 800970e:	4618      	mov	r0, r3
 8009710:	f002 f8e0 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800971a:	e015      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800971c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009720:	3328      	adds	r3, #40	@ 0x28
 8009722:	2101      	movs	r1, #1
 8009724:	4618      	mov	r0, r3
 8009726:	f002 f987 	bl	800ba38 <RCCEx_PLL3_Config>
 800972a:	4603      	mov	r3, r0
 800972c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009730:	e00a      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009738:	e006      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800973a:	bf00      	nop
 800973c:	e004      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800973e:	bf00      	nop
 8009740:	e002      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009742:	bf00      	nop
 8009744:	e000      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10d      	bne.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009750:	4b05      	ldr	r3, [pc, #20]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009754:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800975c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800975e:	4a02      	ldr	r2, [pc, #8]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009760:	430b      	orrs	r3, r1
 8009762:	6513      	str	r3, [r2, #80]	@ 0x50
 8009764:	e006      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009766:	bf00      	nop
 8009768:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009784:	2300      	movs	r3, #0
 8009786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800978a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800978e:	460b      	mov	r3, r1
 8009790:	4313      	orrs	r3, r2
 8009792:	d055      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800979c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097a0:	d033      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80097a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097a6:	d82c      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ac:	d02f      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80097ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097b2:	d826      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097b8:	d02b      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80097ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097be:	d820      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097c4:	d012      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80097c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097ca:	d81a      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d022      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80097d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097d4:	d115      	bne.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097da:	3308      	adds	r3, #8
 80097dc:	2101      	movs	r1, #1
 80097de:	4618      	mov	r0, r3
 80097e0:	f002 f878 	bl	800b8d4 <RCCEx_PLL2_Config>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80097ea:	e015      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f0:	3328      	adds	r3, #40	@ 0x28
 80097f2:	2101      	movs	r1, #1
 80097f4:	4618      	mov	r0, r3
 80097f6:	f002 f91f 	bl	800ba38 <RCCEx_PLL3_Config>
 80097fa:	4603      	mov	r3, r0
 80097fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009800:	e00a      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009808:	e006      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800980a:	bf00      	nop
 800980c:	e004      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800980e:	bf00      	nop
 8009810:	e002      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009812:	bf00      	nop
 8009814:	e000      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10b      	bne.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009820:	4ba3      	ldr	r3, [pc, #652]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009824:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009830:	4a9f      	ldr	r2, [pc, #636]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009832:	430b      	orrs	r3, r1
 8009834:	6593      	str	r3, [r2, #88]	@ 0x58
 8009836:	e003      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800983c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800984c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009850:	2300      	movs	r3, #0
 8009852:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009856:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800985a:	460b      	mov	r3, r1
 800985c:	4313      	orrs	r3, r2
 800985e:	d037      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800986a:	d00e      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800986c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009870:	d816      	bhi.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d018      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800987a:	d111      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987c:	4b8c      	ldr	r3, [pc, #560]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800987e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009880:	4a8b      	ldr	r2, [pc, #556]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009888:	e00f      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800988e:	3308      	adds	r3, #8
 8009890:	2101      	movs	r1, #1
 8009892:	4618      	mov	r0, r3
 8009894:	f002 f81e 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009898:	4603      	mov	r3, r0
 800989a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800989e:	e004      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098a6:	e000      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80098a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80098b2:	4b7f      	ldr	r3, [pc, #508]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80098ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098c0:	4a7b      	ldr	r2, [pc, #492]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098c2:	430b      	orrs	r3, r1
 80098c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80098c6:	e003      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80098dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098e0:	2300      	movs	r3, #0
 80098e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80098e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4313      	orrs	r3, r2
 80098ee:	d039      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d81c      	bhi.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80098fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009900 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	0800993d 	.word	0x0800993d
 8009904:	08009911 	.word	0x08009911
 8009908:	0800991f 	.word	0x0800991f
 800990c:	0800993d 	.word	0x0800993d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009910:	4b67      	ldr	r3, [pc, #412]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009914:	4a66      	ldr	r2, [pc, #408]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800991a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800991c:	e00f      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800991e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009922:	3308      	adds	r3, #8
 8009924:	2102      	movs	r1, #2
 8009926:	4618      	mov	r0, r3
 8009928:	f001 ffd4 	bl	800b8d4 <RCCEx_PLL2_Config>
 800992c:	4603      	mov	r3, r0
 800992e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009932:	e004      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800993a:	e000      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800993c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800993e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10a      	bne.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009946:	4b5a      	ldr	r3, [pc, #360]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800994a:	f023 0103 	bic.w	r1, r3, #3
 800994e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009954:	4a56      	ldr	r2, [pc, #344]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009956:	430b      	orrs	r3, r1
 8009958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800995a:	e003      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009970:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009974:	2300      	movs	r3, #0
 8009976:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800997a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800997e:	460b      	mov	r3, r1
 8009980:	4313      	orrs	r3, r2
 8009982:	f000 809f 	beq.w	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009986:	4b4b      	ldr	r3, [pc, #300]	@ (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a4a      	ldr	r2, [pc, #296]	@ (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800998c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009990:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009992:	f7f8 f9af 	bl	8001cf4 <HAL_GetTick>
 8009996:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800999a:	e00b      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800999c:	f7f8 f9aa 	bl	8001cf4 <HAL_GetTick>
 80099a0:	4602      	mov	r2, r0
 80099a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	2b64      	cmp	r3, #100	@ 0x64
 80099aa:	d903      	bls.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099b2:	e005      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099b4:	4b3f      	ldr	r3, [pc, #252]	@ (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0ed      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80099c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d179      	bne.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80099c8:	4b39      	ldr	r3, [pc, #228]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80099cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80099d4:	4053      	eors	r3, r2
 80099d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d015      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099de:	4b34      	ldr	r3, [pc, #208]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80099ea:	4b31      	ldr	r3, [pc, #196]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099ee:	4a30      	ldr	r2, [pc, #192]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099f4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80099f6:	4b2e      	ldr	r3, [pc, #184]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099fa:	4a2d      	ldr	r2, [pc, #180]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a02:	4a2b      	ldr	r2, [pc, #172]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a16:	d118      	bne.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a18:	f7f8 f96c 	bl	8001cf4 <HAL_GetTick>
 8009a1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a20:	e00d      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a22:	f7f8 f967 	bl	8001cf4 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009a2c:	1ad2      	subs	r2, r2, r3
 8009a2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d903      	bls.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009a3c:	e005      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0eb      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d129      	bne.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a62:	d10e      	bne.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009a64:	4b12      	ldr	r3, [pc, #72]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a74:	091a      	lsrs	r2, r3, #4
 8009a76:	4b10      	ldr	r3, [pc, #64]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009a78:	4013      	ands	r3, r2
 8009a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a7c:	430b      	orrs	r3, r1
 8009a7e:	6113      	str	r3, [r2, #16]
 8009a80:	e005      	b.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009a82:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	4a0a      	ldr	r2, [pc, #40]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009a8c:	6113      	str	r3, [r2, #16]
 8009a8e:	4b08      	ldr	r3, [pc, #32]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a90:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a9e:	4a04      	ldr	r2, [pc, #16]	@ (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aa0:	430b      	orrs	r3, r1
 8009aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009aa4:	e00e      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009aae:	e009      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009ab0:	58024400 	.word	0x58024400
 8009ab4:	58024800 	.word	0x58024800
 8009ab8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ac0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	f002 0301 	and.w	r3, r2, #1
 8009ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ada:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	f000 8089 	beq.w	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009aec:	2b28      	cmp	r3, #40	@ 0x28
 8009aee:	d86b      	bhi.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009af0:	a201      	add	r2, pc, #4	@ (adr r2, 8009af8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af6:	bf00      	nop
 8009af8:	08009bd1 	.word	0x08009bd1
 8009afc:	08009bc9 	.word	0x08009bc9
 8009b00:	08009bc9 	.word	0x08009bc9
 8009b04:	08009bc9 	.word	0x08009bc9
 8009b08:	08009bc9 	.word	0x08009bc9
 8009b0c:	08009bc9 	.word	0x08009bc9
 8009b10:	08009bc9 	.word	0x08009bc9
 8009b14:	08009bc9 	.word	0x08009bc9
 8009b18:	08009b9d 	.word	0x08009b9d
 8009b1c:	08009bc9 	.word	0x08009bc9
 8009b20:	08009bc9 	.word	0x08009bc9
 8009b24:	08009bc9 	.word	0x08009bc9
 8009b28:	08009bc9 	.word	0x08009bc9
 8009b2c:	08009bc9 	.word	0x08009bc9
 8009b30:	08009bc9 	.word	0x08009bc9
 8009b34:	08009bc9 	.word	0x08009bc9
 8009b38:	08009bb3 	.word	0x08009bb3
 8009b3c:	08009bc9 	.word	0x08009bc9
 8009b40:	08009bc9 	.word	0x08009bc9
 8009b44:	08009bc9 	.word	0x08009bc9
 8009b48:	08009bc9 	.word	0x08009bc9
 8009b4c:	08009bc9 	.word	0x08009bc9
 8009b50:	08009bc9 	.word	0x08009bc9
 8009b54:	08009bc9 	.word	0x08009bc9
 8009b58:	08009bd1 	.word	0x08009bd1
 8009b5c:	08009bc9 	.word	0x08009bc9
 8009b60:	08009bc9 	.word	0x08009bc9
 8009b64:	08009bc9 	.word	0x08009bc9
 8009b68:	08009bc9 	.word	0x08009bc9
 8009b6c:	08009bc9 	.word	0x08009bc9
 8009b70:	08009bc9 	.word	0x08009bc9
 8009b74:	08009bc9 	.word	0x08009bc9
 8009b78:	08009bd1 	.word	0x08009bd1
 8009b7c:	08009bc9 	.word	0x08009bc9
 8009b80:	08009bc9 	.word	0x08009bc9
 8009b84:	08009bc9 	.word	0x08009bc9
 8009b88:	08009bc9 	.word	0x08009bc9
 8009b8c:	08009bc9 	.word	0x08009bc9
 8009b90:	08009bc9 	.word	0x08009bc9
 8009b94:	08009bc9 	.word	0x08009bc9
 8009b98:	08009bd1 	.word	0x08009bd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f001 fe95 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009baa:	4603      	mov	r3, r0
 8009bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009bb0:	e00f      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb6:	3328      	adds	r3, #40	@ 0x28
 8009bb8:	2101      	movs	r1, #1
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 ff3c 	bl	800ba38 <RCCEx_PLL3_Config>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009bc6:	e004      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bce:	e000      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10a      	bne.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009bda:	4bbf      	ldr	r3, [pc, #764]	@ (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bde:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009be8:	4abb      	ldr	r2, [pc, #748]	@ (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bea:	430b      	orrs	r3, r1
 8009bec:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bee:	e003      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	f002 0302 	and.w	r3, r2, #2
 8009c04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009c0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009c12:	460b      	mov	r3, r1
 8009c14:	4313      	orrs	r3, r2
 8009c16:	d041      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c1e:	2b05      	cmp	r3, #5
 8009c20:	d824      	bhi.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009c22:	a201      	add	r2, pc, #4	@ (adr r2, 8009c28 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c75 	.word	0x08009c75
 8009c2c:	08009c41 	.word	0x08009c41
 8009c30:	08009c57 	.word	0x08009c57
 8009c34:	08009c75 	.word	0x08009c75
 8009c38:	08009c75 	.word	0x08009c75
 8009c3c:	08009c75 	.word	0x08009c75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c44:	3308      	adds	r3, #8
 8009c46:	2101      	movs	r1, #1
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 fe43 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009c54:	e00f      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c5a:	3328      	adds	r3, #40	@ 0x28
 8009c5c:	2101      	movs	r1, #1
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f001 feea 	bl	800ba38 <RCCEx_PLL3_Config>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009c6a:	e004      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c72:	e000      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10a      	bne.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009c7e:	4b96      	ldr	r3, [pc, #600]	@ (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c82:	f023 0107 	bic.w	r1, r3, #7
 8009c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c8c:	4a92      	ldr	r2, [pc, #584]	@ (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c8e:	430b      	orrs	r3, r1
 8009c90:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c92:	e003      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	f002 0304 	and.w	r3, r2, #4
 8009ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cac:	2300      	movs	r3, #0
 8009cae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	d044      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cc4:	2b05      	cmp	r3, #5
 8009cc6:	d825      	bhi.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009d1d 	.word	0x08009d1d
 8009cd4:	08009ce9 	.word	0x08009ce9
 8009cd8:	08009cff 	.word	0x08009cff
 8009cdc:	08009d1d 	.word	0x08009d1d
 8009ce0:	08009d1d 	.word	0x08009d1d
 8009ce4:	08009d1d 	.word	0x08009d1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cec:	3308      	adds	r3, #8
 8009cee:	2101      	movs	r1, #1
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f001 fdef 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009cfc:	e00f      	b.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d02:	3328      	adds	r3, #40	@ 0x28
 8009d04:	2101      	movs	r1, #1
 8009d06:	4618      	mov	r0, r3
 8009d08:	f001 fe96 	bl	800ba38 <RCCEx_PLL3_Config>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d12:	e004      	b.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d1a:	e000      	b.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10b      	bne.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d26:	4b6c      	ldr	r3, [pc, #432]	@ (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d2a:	f023 0107 	bic.w	r1, r3, #7
 8009d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d36:	4a68      	ldr	r2, [pc, #416]	@ (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d38:	430b      	orrs	r3, r1
 8009d3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d3c:	e003      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4e:	f002 0320 	and.w	r3, r2, #32
 8009d52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d56:	2300      	movs	r3, #0
 8009d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d60:	460b      	mov	r3, r1
 8009d62:	4313      	orrs	r3, r2
 8009d64:	d055      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d72:	d033      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d78:	d82c      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d7e:	d02f      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d84:	d826      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d8a:	d02b      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009d8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d90:	d820      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d96:	d012      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d9c:	d81a      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d022      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009da2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009da6:	d115      	bne.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dac:	3308      	adds	r3, #8
 8009dae:	2100      	movs	r1, #0
 8009db0:	4618      	mov	r0, r3
 8009db2:	f001 fd8f 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009db6:	4603      	mov	r3, r0
 8009db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009dbc:	e015      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc2:	3328      	adds	r3, #40	@ 0x28
 8009dc4:	2102      	movs	r1, #2
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f001 fe36 	bl	800ba38 <RCCEx_PLL3_Config>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009dd2:	e00a      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dda:	e006      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ddc:	bf00      	nop
 8009dde:	e004      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009de0:	bf00      	nop
 8009de2:	e002      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009de4:	bf00      	nop
 8009de6:	e000      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10b      	bne.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009df2:	4b39      	ldr	r3, [pc, #228]	@ (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e02:	4a35      	ldr	r2, [pc, #212]	@ (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e04:	430b      	orrs	r3, r1
 8009e06:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e08:	e003      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e22:	2300      	movs	r3, #0
 8009e24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009e28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	d058      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009e3e:	d033      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009e40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009e44:	d82c      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e4a:	d02f      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e50:	d826      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e56:	d02b      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009e58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e5c:	d820      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e62:	d012      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e68:	d81a      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d022      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e72:	d115      	bne.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e78:	3308      	adds	r3, #8
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 fd29 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009e88:	e015      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e8e:	3328      	adds	r3, #40	@ 0x28
 8009e90:	2102      	movs	r1, #2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 fdd0 	bl	800ba38 <RCCEx_PLL3_Config>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009e9e:	e00a      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ea6:	e006      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ea8:	bf00      	nop
 8009eaa:	e004      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009eac:	bf00      	nop
 8009eae:	e002      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009eb0:	bf00      	nop
 8009eb2:	e000      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10e      	bne.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ebe:	4b06      	ldr	r3, [pc, #24]	@ (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ec2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ece:	4a02      	ldr	r2, [pc, #8]	@ (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ed4:	e006      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009ed6:	bf00      	nop
 8009ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009efa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009efe:	460b      	mov	r3, r1
 8009f00:	4313      	orrs	r3, r2
 8009f02:	d055      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f0c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009f10:	d033      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009f12:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009f16:	d82c      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f1c:	d02f      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009f1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f22:	d826      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f24:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009f28:	d02b      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009f2a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009f2e:	d820      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f34:	d012      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f3a:	d81a      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d022      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f44:	d115      	bne.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f001 fcc0 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009f54:	4603      	mov	r3, r0
 8009f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009f5a:	e015      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f60:	3328      	adds	r3, #40	@ 0x28
 8009f62:	2102      	movs	r1, #2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 fd67 	bl	800ba38 <RCCEx_PLL3_Config>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009f70:	e00a      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f78:	e006      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f7a:	bf00      	nop
 8009f7c:	e004      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f7e:	bf00      	nop
 8009f80:	e002      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f82:	bf00      	nop
 8009f84:	e000      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10b      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009f90:	4ba1      	ldr	r3, [pc, #644]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f94:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009fa0:	4a9d      	ldr	r2, [pc, #628]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fa2:	430b      	orrs	r3, r1
 8009fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fa6:	e003      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f002 0308 	and.w	r3, r2, #8
 8009fbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009fc6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	d01e      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fdc:	d10c      	bne.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe2:	3328      	adds	r3, #40	@ 0x28
 8009fe4:	2102      	movs	r1, #2
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f001 fd26 	bl	800ba38 <RCCEx_PLL3_Config>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009ff8:	4b87      	ldr	r3, [pc, #540]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ffc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a008:	4a83      	ldr	r2, [pc, #524]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a00a:	430b      	orrs	r3, r1
 800a00c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a016:	f002 0310 	and.w	r3, r2, #16
 800a01a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a01e:	2300      	movs	r3, #0
 800a020:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a024:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a028:	460b      	mov	r3, r1
 800a02a:	4313      	orrs	r3, r2
 800a02c:	d01e      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a032:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a03a:	d10c      	bne.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a040:	3328      	adds	r3, #40	@ 0x28
 800a042:	2102      	movs	r1, #2
 800a044:	4618      	mov	r0, r3
 800a046:	f001 fcf7 	bl	800ba38 <RCCEx_PLL3_Config>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a056:	4b70      	ldr	r3, [pc, #448]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a05a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a062:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a066:	4a6c      	ldr	r2, [pc, #432]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a068:	430b      	orrs	r3, r1
 800a06a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a078:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a07c:	2300      	movs	r3, #0
 800a07e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a082:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a086:	460b      	mov	r3, r1
 800a088:	4313      	orrs	r3, r2
 800a08a:	d03e      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a098:	d022      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a09a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a09e:	d81b      	bhi.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a0a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0a8:	d00b      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a0aa:	e015      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b0:	3308      	adds	r3, #8
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 fc0d 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a0c0:	e00f      	b.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c6:	3328      	adds	r3, #40	@ 0x28
 800a0c8:	2102      	movs	r1, #2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f001 fcb4 	bl	800ba38 <RCCEx_PLL3_Config>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a0d6:	e004      	b.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0de:	e000      	b.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a0e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10b      	bne.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a0ea:	4b4b      	ldr	r3, [pc, #300]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a0fa:	4a47      	ldr	r2, [pc, #284]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0fc:	430b      	orrs	r3, r1
 800a0fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800a100:	e003      	b.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a116:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a118:	2300      	movs	r3, #0
 800a11a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a11c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a120:	460b      	mov	r3, r1
 800a122:	4313      	orrs	r3, r2
 800a124:	d03b      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a12e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a132:	d01f      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a134:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a138:	d818      	bhi.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a13a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a13e:	d003      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a140:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a144:	d007      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a146:	e011      	b.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a148:	4b33      	ldr	r3, [pc, #204]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14c:	4a32      	ldr	r2, [pc, #200]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a14e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a154:	e00f      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a15a:	3328      	adds	r3, #40	@ 0x28
 800a15c:	2101      	movs	r1, #1
 800a15e:	4618      	mov	r0, r3
 800a160:	f001 fc6a 	bl	800ba38 <RCCEx_PLL3_Config>
 800a164:	4603      	mov	r3, r0
 800a166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a16a:	e004      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a172:	e000      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a174:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10b      	bne.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a17e:	4b26      	ldr	r3, [pc, #152]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a182:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a18e:	4a22      	ldr	r2, [pc, #136]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a190:	430b      	orrs	r3, r1
 800a192:	6553      	str	r3, [r2, #84]	@ 0x54
 800a194:	e003      	b.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a19a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a1aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	677b      	str	r3, [r7, #116]	@ 0x74
 800a1b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	d034      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d003      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a1c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1c8:	d007      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a1ca:	e011      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1cc:	4b12      	ldr	r3, [pc, #72]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d0:	4a11      	ldr	r2, [pc, #68]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a1d8:	e00e      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1de:	3308      	adds	r3, #8
 800a1e0:	2102      	movs	r1, #2
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f001 fb76 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a1ee:	e003      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10d      	bne.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a200:	4b05      	ldr	r3, [pc, #20]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a204:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a20c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a20e:	4a02      	ldr	r2, [pc, #8]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a210:	430b      	orrs	r3, r1
 800a212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a214:	e006      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a216:	bf00      	nop
 800a218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a230:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a232:	2300      	movs	r3, #0
 800a234:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a236:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a23a:	460b      	mov	r3, r1
 800a23c:	4313      	orrs	r3, r2
 800a23e:	d00c      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a244:	3328      	adds	r3, #40	@ 0x28
 800a246:	2102      	movs	r1, #2
 800a248:	4618      	mov	r0, r3
 800a24a:	f001 fbf5 	bl	800ba38 <RCCEx_PLL3_Config>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a266:	663b      	str	r3, [r7, #96]	@ 0x60
 800a268:	2300      	movs	r3, #0
 800a26a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a26c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a270:	460b      	mov	r3, r1
 800a272:	4313      	orrs	r3, r2
 800a274:	d038      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a27a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a27e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a282:	d018      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a284:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a288:	d811      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a28a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a28e:	d014      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a294:	d80b      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a296:	2b00      	cmp	r3, #0
 800a298:	d011      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a29a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a29e:	d106      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2a0:	4bc3      	ldr	r3, [pc, #780]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a4:	4ac2      	ldr	r2, [pc, #776]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a2ac:	e008      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2b4:	e004      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a2b6:	bf00      	nop
 800a2b8:	e002      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a2ba:	bf00      	nop
 800a2bc:	e000      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a2be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10b      	bne.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a2c8:	4bb9      	ldr	r3, [pc, #740]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2d8:	4ab5      	ldr	r2, [pc, #724]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	6553      	str	r3, [r2, #84]	@ 0x54
 800a2de:	e003      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a2f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a2fe:	460b      	mov	r3, r1
 800a300:	4313      	orrs	r3, r2
 800a302:	d009      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a304:	4baa      	ldr	r3, [pc, #680]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a308:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a312:	4aa7      	ldr	r2, [pc, #668]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a314:	430b      	orrs	r3, r1
 800a316:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a324:	653b      	str	r3, [r7, #80]	@ 0x50
 800a326:	2300      	movs	r3, #0
 800a328:	657b      	str	r3, [r7, #84]	@ 0x54
 800a32a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a32e:	460b      	mov	r3, r1
 800a330:	4313      	orrs	r3, r2
 800a332:	d00a      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a334:	4b9e      	ldr	r3, [pc, #632]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a340:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a344:	4a9a      	ldr	r2, [pc, #616]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a346:	430b      	orrs	r3, r1
 800a348:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a356:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a358:	2300      	movs	r3, #0
 800a35a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a35c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a360:	460b      	mov	r3, r1
 800a362:	4313      	orrs	r3, r2
 800a364:	d009      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a366:	4b92      	ldr	r3, [pc, #584]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a36a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a374:	4a8e      	ldr	r2, [pc, #568]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a376:	430b      	orrs	r3, r1
 800a378:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a386:	643b      	str	r3, [r7, #64]	@ 0x40
 800a388:	2300      	movs	r3, #0
 800a38a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a38c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a390:	460b      	mov	r3, r1
 800a392:	4313      	orrs	r3, r2
 800a394:	d00e      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a396:	4b86      	ldr	r3, [pc, #536]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	4a85      	ldr	r2, [pc, #532]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a39c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3a0:	6113      	str	r3, [r2, #16]
 800a3a2:	4b83      	ldr	r3, [pc, #524]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3a4:	6919      	ldr	r1, [r3, #16]
 800a3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a3ae:	4a80      	ldr	r2, [pc, #512]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3b0:	430b      	orrs	r3, r1
 800a3b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	d009      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a3d0:	4b77      	ldr	r3, [pc, #476]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3de:	4a74      	ldr	r2, [pc, #464]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3e0:	430b      	orrs	r3, r1
 800a3e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a3f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	d00a      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a400:	4b6b      	ldr	r3, [pc, #428]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a404:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a410:	4a67      	ldr	r2, [pc, #412]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a412:	430b      	orrs	r3, r1
 800a414:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	2100      	movs	r1, #0
 800a420:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a428:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a42c:	460b      	mov	r3, r1
 800a42e:	4313      	orrs	r3, r2
 800a430:	d011      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a436:	3308      	adds	r3, #8
 800a438:	2100      	movs	r1, #0
 800a43a:	4618      	mov	r0, r3
 800a43c:	f001 fa4a 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a440:	4603      	mov	r3, r0
 800a442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a44e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	2100      	movs	r1, #0
 800a460:	6239      	str	r1, [r7, #32]
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24
 800a468:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a46c:	460b      	mov	r3, r1
 800a46e:	4313      	orrs	r3, r2
 800a470:	d011      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a476:	3308      	adds	r3, #8
 800a478:	2101      	movs	r1, #1
 800a47a:	4618      	mov	r0, r3
 800a47c:	f001 fa2a 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a480:	4603      	mov	r3, r0
 800a482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a48e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	2100      	movs	r1, #0
 800a4a0:	61b9      	str	r1, [r7, #24]
 800a4a2:	f003 0304 	and.w	r3, r3, #4
 800a4a6:	61fb      	str	r3, [r7, #28]
 800a4a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	d011      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	2102      	movs	r1, #2
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f001 fa0a 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a4c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	2100      	movs	r1, #0
 800a4e0:	6139      	str	r1, [r7, #16]
 800a4e2:	f003 0308 	and.w	r3, r3, #8
 800a4e6:	617b      	str	r3, [r7, #20]
 800a4e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	d011      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4f6:	3328      	adds	r3, #40	@ 0x28
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f001 fa9c 	bl	800ba38 <RCCEx_PLL3_Config>
 800a500:	4603      	mov	r3, r0
 800a502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a50e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	2100      	movs	r1, #0
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	f003 0310 	and.w	r3, r3, #16
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a52c:	460b      	mov	r3, r1
 800a52e:	4313      	orrs	r3, r2
 800a530:	d011      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a536:	3328      	adds	r3, #40	@ 0x28
 800a538:	2101      	movs	r1, #1
 800a53a:	4618      	mov	r0, r3
 800a53c:	f001 fa7c 	bl	800ba38 <RCCEx_PLL3_Config>
 800a540:	4603      	mov	r3, r0
 800a542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d003      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a54e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55e:	2100      	movs	r1, #0
 800a560:	6039      	str	r1, [r7, #0]
 800a562:	f003 0320 	and.w	r3, r3, #32
 800a566:	607b      	str	r3, [r7, #4]
 800a568:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a56c:	460b      	mov	r3, r1
 800a56e:	4313      	orrs	r3, r2
 800a570:	d011      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a576:	3328      	adds	r3, #40	@ 0x28
 800a578:	2102      	movs	r1, #2
 800a57a:	4618      	mov	r0, r3
 800a57c:	f001 fa5c 	bl	800ba38 <RCCEx_PLL3_Config>
 800a580:	4603      	mov	r3, r0
 800a582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a58e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a596:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e000      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5b0:	58024400 	.word	0x58024400

0800a5b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b090      	sub	sp, #64	@ 0x40
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a5be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5c2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a5c6:	430b      	orrs	r3, r1
 800a5c8:	f040 8094 	bne.w	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a5cc:	4b9e      	ldr	r3, [pc, #632]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5d0:	f003 0307 	and.w	r3, r3, #7
 800a5d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	f200 8087 	bhi.w	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a5de:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a5f9 	.word	0x0800a5f9
 800a5e8:	0800a621 	.word	0x0800a621
 800a5ec:	0800a649 	.word	0x0800a649
 800a5f0:	0800a6e5 	.word	0x0800a6e5
 800a5f4:	0800a671 	.word	0x0800a671
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5f8:	4b93      	ldr	r3, [pc, #588]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a600:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a604:	d108      	bne.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f001 f810 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a614:	f000 bd45 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a61c:	f000 bd41 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a620:	4b89      	ldr	r3, [pc, #548]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a628:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a62c:	d108      	bne.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a62e:	f107 0318 	add.w	r3, r7, #24
 800a632:	4618      	mov	r0, r3
 800a634:	f000 fd54 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a63c:	f000 bd31 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a644:	f000 bd2d 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a648:	4b7f      	ldr	r3, [pc, #508]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a654:	d108      	bne.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a656:	f107 030c 	add.w	r3, r7, #12
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 fe94 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a664:	f000 bd1d 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66c:	f000 bd19 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a670:	4b75      	ldr	r3, [pc, #468]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a674:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a678:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a67a:	4b73      	ldr	r3, [pc, #460]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0304 	and.w	r3, r3, #4
 800a682:	2b04      	cmp	r3, #4
 800a684:	d10c      	bne.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d109      	bne.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a68c:	4b6e      	ldr	r3, [pc, #440]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	08db      	lsrs	r3, r3, #3
 800a692:	f003 0303 	and.w	r3, r3, #3
 800a696:	4a6d      	ldr	r2, [pc, #436]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a698:	fa22 f303 	lsr.w	r3, r2, r3
 800a69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a69e:	e01f      	b.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6a0:	4b69      	ldr	r3, [pc, #420]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6ac:	d106      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6b4:	d102      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6b6:	4b66      	ldr	r3, [pc, #408]	@ (800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ba:	e011      	b.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6bc:	4b62      	ldr	r3, [pc, #392]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6c8:	d106      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6d0:	d102      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6d2:	4b60      	ldr	r3, [pc, #384]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6d6:	e003      	b.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6dc:	f000 bce1 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6e0:	f000 bcdf 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e8:	f000 bcdb 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f0:	f000 bcd7 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a6f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6f8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	f040 80ad 	bne.w	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a702:	4b51      	ldr	r3, [pc, #324]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a706:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a70a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a712:	d056      	beq.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a71a:	f200 8090 	bhi.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a720:	2bc0      	cmp	r3, #192	@ 0xc0
 800a722:	f000 8088 	beq.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a728:	2bc0      	cmp	r3, #192	@ 0xc0
 800a72a:	f200 8088 	bhi.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a730:	2b80      	cmp	r3, #128	@ 0x80
 800a732:	d032      	beq.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a736:	2b80      	cmp	r3, #128	@ 0x80
 800a738:	f200 8081 	bhi.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a744:	2b40      	cmp	r3, #64	@ 0x40
 800a746:	d014      	beq.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a748:	e079      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a74a:	4b3f      	ldr	r3, [pc, #252]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a752:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a756:	d108      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 ff67 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a766:	f000 bc9c 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a76e:	f000 bc98 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a772:	4b35      	ldr	r3, [pc, #212]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a77a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a77e:	d108      	bne.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a780:	f107 0318 	add.w	r3, r7, #24
 800a784:	4618      	mov	r0, r3
 800a786:	f000 fcab 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a78e:	f000 bc88 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a796:	f000 bc84 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a79a:	4b2b      	ldr	r3, [pc, #172]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7a6:	d108      	bne.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7a8:	f107 030c 	add.w	r3, r7, #12
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fdeb 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b6:	f000 bc74 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7be:	f000 bc70 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7c2:	4b21      	ldr	r3, [pc, #132]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b04      	cmp	r3, #4
 800a7d6:	d10c      	bne.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d109      	bne.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7de:	4b1a      	ldr	r3, [pc, #104]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	08db      	lsrs	r3, r3, #3
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	4a18      	ldr	r2, [pc, #96]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7f0:	e01f      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7f2:	4b15      	ldr	r3, [pc, #84]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7fe:	d106      	bne.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a806:	d102      	bne.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a808:	4b11      	ldr	r3, [pc, #68]	@ (800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a80c:	e011      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a80e:	4b0e      	ldr	r3, [pc, #56]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a81a:	d106      	bne.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a81e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a822:	d102      	bne.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a824:	4b0b      	ldr	r3, [pc, #44]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a828:	e003      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a82e:	f000 bc38 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a832:	f000 bc36 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a836:	4b08      	ldr	r3, [pc, #32]	@ (800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a83a:	f000 bc32 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a842:	f000 bc2e 	b.w	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a846:	bf00      	nop
 800a848:	58024400 	.word	0x58024400
 800a84c:	03d09000 	.word	0x03d09000
 800a850:	003d0900 	.word	0x003d0900
 800a854:	017d7840 	.word	0x017d7840
 800a858:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a85c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a860:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a864:	430b      	orrs	r3, r1
 800a866:	f040 809c 	bne.w	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a86a:	4b9e      	ldr	r3, [pc, #632]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a86e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a872:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a876:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a87a:	d054      	beq.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a882:	f200 808b 	bhi.w	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a888:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a88c:	f000 8083 	beq.w	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a892:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a896:	f200 8081 	bhi.w	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a8a0:	d02f      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a8a8:	d878      	bhi.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8b6:	d012      	beq.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a8b8:	e070      	b.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8ba:	4b8a      	ldr	r3, [pc, #552]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8c6:	d107      	bne.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 feaf 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d6:	e3e4      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8dc:	e3e1      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8de:	4b81      	ldr	r3, [pc, #516]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8ea:	d107      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ec:	f107 0318 	add.w	r3, r7, #24
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fbf5 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fa:	e3d2      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a900:	e3cf      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a902:	4b78      	ldr	r3, [pc, #480]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a90a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a90e:	d107      	bne.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a910:	f107 030c 	add.w	r3, r7, #12
 800a914:	4618      	mov	r0, r3
 800a916:	f000 fd37 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a91e:	e3c0      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a924:	e3bd      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a926:	4b6f      	ldr	r3, [pc, #444]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a92a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a92e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a930:	4b6c      	ldr	r3, [pc, #432]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0304 	and.w	r3, r3, #4
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d10c      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d109      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a942:	4b68      	ldr	r3, [pc, #416]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	08db      	lsrs	r3, r3, #3
 800a948:	f003 0303 	and.w	r3, r3, #3
 800a94c:	4a66      	ldr	r2, [pc, #408]	@ (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a94e:	fa22 f303 	lsr.w	r3, r2, r3
 800a952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a954:	e01e      	b.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a956:	4b63      	ldr	r3, [pc, #396]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a95e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a962:	d106      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a96a:	d102      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a96c:	4b5f      	ldr	r3, [pc, #380]	@ (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a970:	e010      	b.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a972:	4b5c      	ldr	r3, [pc, #368]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a97a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a97e:	d106      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a986:	d102      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a988:	4b59      	ldr	r3, [pc, #356]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a98c:	e002      	b.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a992:	e386      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a994:	e385      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a996:	4b57      	ldr	r3, [pc, #348]	@ (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a99a:	e382      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a0:	e37f      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a9a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9a6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	f040 80a7 	bne.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a9b0:	4b4c      	ldr	r3, [pc, #304]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9b4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a9b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9c0:	d055      	beq.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9c8:	f200 8096 	bhi.w	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a9d2:	f000 8084 	beq.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a9dc:	f200 808c 	bhi.w	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9e6:	d030      	beq.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9ee:	f200 8083 	bhi.w	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d004      	beq.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9fe:	d012      	beq.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800aa00:	e07a      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa02:	4b38      	ldr	r3, [pc, #224]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa0e:	d107      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fe0b 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa1e:	e340      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa24:	e33d      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa26:	4b2f      	ldr	r3, [pc, #188]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa32:	d107      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa34:	f107 0318 	add.w	r3, r7, #24
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fb51 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa42:	e32e      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa48:	e32b      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa4a:	4b26      	ldr	r3, [pc, #152]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa56:	d107      	bne.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa58:	f107 030c 	add.w	r3, r7, #12
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 fc93 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa66:	e31c      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa6c:	e319      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa6e:	4b1d      	ldr	r3, [pc, #116]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa78:	4b1a      	ldr	r3, [pc, #104]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	d10c      	bne.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800aa84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d109      	bne.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa8a:	4b16      	ldr	r3, [pc, #88]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	08db      	lsrs	r3, r3, #3
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	4a14      	ldr	r2, [pc, #80]	@ (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aa96:	fa22 f303 	lsr.w	r3, r2, r3
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa9c:	e01e      	b.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa9e:	4b11      	ldr	r3, [pc, #68]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaaa:	d106      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800aaac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aab2:	d102      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aab4:	4b0d      	ldr	r3, [pc, #52]	@ (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aab8:	e010      	b.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaba:	4b0a      	ldr	r3, [pc, #40]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aac6:	d106      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800aac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aace:	d102      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aad0:	4b07      	ldr	r3, [pc, #28]	@ (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aad4:	e002      	b.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aada:	e2e2      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aadc:	e2e1      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aade:	4b05      	ldr	r3, [pc, #20]	@ (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aae2:	e2de      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aae4:	58024400 	.word	0x58024400
 800aae8:	03d09000 	.word	0x03d09000
 800aaec:	003d0900 	.word	0x003d0900
 800aaf0:	017d7840 	.word	0x017d7840
 800aaf4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aafc:	e2d1      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aafe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab02:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ab06:	430b      	orrs	r3, r1
 800ab08:	f040 809c 	bne.w	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ab0c:	4b93      	ldr	r3, [pc, #588]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab10:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ab14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab1c:	d054      	beq.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab24:	f200 808b 	bhi.w	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab2e:	f000 8083 	beq.w	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ab32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab38:	f200 8081 	bhi.w	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab42:	d02f      	beq.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ab44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab4a:	d878      	bhi.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d004      	beq.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ab52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab58:	d012      	beq.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ab5a:	e070      	b.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab5c:	4b7f      	ldr	r3, [pc, #508]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab68:	d107      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fd5e 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab78:	e293      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab7e:	e290      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab80:	4b76      	ldr	r3, [pc, #472]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab8c:	d107      	bne.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab8e:	f107 0318 	add.w	r3, r7, #24
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 faa4 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab9c:	e281      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba2:	e27e      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aba4:	4b6d      	ldr	r3, [pc, #436]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abb0:	d107      	bne.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abb2:	f107 030c 	add.w	r3, r7, #12
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fbe6 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc0:	e26f      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc6:	e26c      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abc8:	4b64      	ldr	r3, [pc, #400]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abd0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abd2:	4b62      	ldr	r3, [pc, #392]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 0304 	and.w	r3, r3, #4
 800abda:	2b04      	cmp	r3, #4
 800abdc:	d10c      	bne.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800abde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d109      	bne.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abe4:	4b5d      	ldr	r3, [pc, #372]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	08db      	lsrs	r3, r3, #3
 800abea:	f003 0303 	and.w	r3, r3, #3
 800abee:	4a5c      	ldr	r2, [pc, #368]	@ (800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800abf0:	fa22 f303 	lsr.w	r3, r2, r3
 800abf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abf6:	e01e      	b.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abf8:	4b58      	ldr	r3, [pc, #352]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac04:	d106      	bne.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ac06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac0c:	d102      	bne.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac0e:	4b55      	ldr	r3, [pc, #340]	@ (800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac12:	e010      	b.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac14:	4b51      	ldr	r3, [pc, #324]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac20:	d106      	bne.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ac22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac28:	d102      	bne.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac2a:	4b4f      	ldr	r3, [pc, #316]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ac2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac2e:	e002      	b.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac34:	e235      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac36:	e234      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac38:	4b4c      	ldr	r3, [pc, #304]	@ (800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ac3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac3c:	e231      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac42:	e22e      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ac44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac48:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	f040 808f 	bne.w	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ac52:	4b42      	ldr	r3, [pc, #264]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac56:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ac5a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac62:	d06b      	beq.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ac64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac6a:	d874      	bhi.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac72:	d056      	beq.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ac74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac7a:	d86c      	bhi.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac82:	d03b      	beq.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ac84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac8a:	d864      	bhi.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac92:	d021      	beq.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ac94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac9a:	d85c      	bhi.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d004      	beq.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800aca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aca8:	d004      	beq.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800acaa:	e054      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800acac:	f7fe fa20 	bl	80090f0 <HAL_RCC_GetPCLK1Freq>
 800acb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acb2:	e1f6      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb4:	4b29      	ldr	r3, [pc, #164]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acc0:	d107      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc2:	f107 0318 	add.w	r3, r7, #24
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fa0a 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd0:	e1e7      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd6:	e1e4      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acd8:	4b20      	ldr	r3, [pc, #128]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ace0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ace4:	d107      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace6:	f107 030c 	add.w	r3, r7, #12
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fb4c 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf4:	e1d5      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acfa:	e1d2      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acfc:	4b17      	ldr	r3, [pc, #92]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b04      	cmp	r3, #4
 800ad06:	d109      	bne.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad08:	4b14      	ldr	r3, [pc, #80]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	08db      	lsrs	r3, r3, #3
 800ad0e:	f003 0303 	and.w	r3, r3, #3
 800ad12:	4a13      	ldr	r2, [pc, #76]	@ (800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ad14:	fa22 f303 	lsr.w	r3, r2, r3
 800ad18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad1a:	e1c2      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad20:	e1bf      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ad22:	4b0e      	ldr	r3, [pc, #56]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad2e:	d102      	bne.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ad30:	4b0c      	ldr	r3, [pc, #48]	@ (800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad34:	e1b5      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad3a:	e1b2      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad3c:	4b07      	ldr	r3, [pc, #28]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad48:	d102      	bne.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ad4a:	4b07      	ldr	r3, [pc, #28]	@ (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad4e:	e1a8      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad54:	e1a5      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad56:	2300      	movs	r3, #0
 800ad58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad5a:	e1a2      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad5c:	58024400 	.word	0x58024400
 800ad60:	03d09000 	.word	0x03d09000
 800ad64:	003d0900 	.word	0x003d0900
 800ad68:	017d7840 	.word	0x017d7840
 800ad6c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ad70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad74:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ad78:	430b      	orrs	r3, r1
 800ad7a:	d173      	bne.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ad7c:	4b9c      	ldr	r3, [pc, #624]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ad84:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad8c:	d02f      	beq.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad94:	d863      	bhi.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ad96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d004      	beq.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ada2:	d012      	beq.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ada4:	e05b      	b.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ada6:	4b92      	ldr	r3, [pc, #584]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adb2:	d107      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adb4:	f107 0318 	add.w	r3, r7, #24
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 f991 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adc2:	e16e      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adc8:	e16b      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adca:	4b89      	ldr	r3, [pc, #548]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800add2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800add6:	d107      	bne.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800add8:	f107 030c 	add.w	r3, r7, #12
 800addc:	4618      	mov	r0, r3
 800adde:	f000 fad3 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade6:	e15c      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adec:	e159      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adee:	4b80      	ldr	r3, [pc, #512]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adf2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800adf6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adf8:	4b7d      	ldr	r3, [pc, #500]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f003 0304 	and.w	r3, r3, #4
 800ae00:	2b04      	cmp	r3, #4
 800ae02:	d10c      	bne.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ae04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d109      	bne.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae0a:	4b79      	ldr	r3, [pc, #484]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	08db      	lsrs	r3, r3, #3
 800ae10:	f003 0303 	and.w	r3, r3, #3
 800ae14:	4a77      	ldr	r2, [pc, #476]	@ (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae16:	fa22 f303 	lsr.w	r3, r2, r3
 800ae1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae1c:	e01e      	b.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae1e:	4b74      	ldr	r3, [pc, #464]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae2a:	d106      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ae2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae32:	d102      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae34:	4b70      	ldr	r3, [pc, #448]	@ (800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae38:	e010      	b.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae3a:	4b6d      	ldr	r3, [pc, #436]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae46:	d106      	bne.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ae48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae4e:	d102      	bne.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae50:	4b6a      	ldr	r3, [pc, #424]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ae52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae54:	e002      	b.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae5a:	e122      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae5c:	e121      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae62:	e11e      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ae64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae68:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	d133      	bne.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ae70:	4b5f      	ldr	r3, [pc, #380]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d004      	beq.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ae80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae86:	d012      	beq.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ae88:	e023      	b.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae8a:	4b59      	ldr	r3, [pc, #356]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae96:	d107      	bne.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fbc7 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea6:	e0fc      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeac:	e0f9      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeae:	4b50      	ldr	r3, [pc, #320]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeba:	d107      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aebc:	f107 0318 	add.w	r3, r7, #24
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 f90d 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aec6:	6a3b      	ldr	r3, [r7, #32]
 800aec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeca:	e0ea      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed0:	e0e7      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed6:	e0e4      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aedc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800aee0:	430b      	orrs	r3, r1
 800aee2:	f040 808d 	bne.w	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aee6:	4b42      	ldr	r3, [pc, #264]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aeee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aef6:	d06b      	beq.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800aef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aefe:	d874      	bhi.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af06:	d056      	beq.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800af08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af0e:	d86c      	bhi.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af16:	d03b      	beq.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af1e:	d864      	bhi.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af26:	d021      	beq.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800af28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af2e:	d85c      	bhi.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af32:	2b00      	cmp	r3, #0
 800af34:	d004      	beq.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800af36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af3c:	d004      	beq.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800af3e:	e054      	b.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800af40:	f000 f8b8 	bl	800b0b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800af44:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af46:	e0ac      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af48:	4b29      	ldr	r3, [pc, #164]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af54:	d107      	bne.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af56:	f107 0318 	add.w	r3, r7, #24
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 f8c0 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af64:	e09d      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af66:	2300      	movs	r3, #0
 800af68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af6a:	e09a      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af6c:	4b20      	ldr	r3, [pc, #128]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af78:	d107      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af7a:	f107 030c 	add.w	r3, r7, #12
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 fa02 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af88:	e08b      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af8e:	e088      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af90:	4b17      	ldr	r3, [pc, #92]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 0304 	and.w	r3, r3, #4
 800af98:	2b04      	cmp	r3, #4
 800af9a:	d109      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af9c:	4b14      	ldr	r3, [pc, #80]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	08db      	lsrs	r3, r3, #3
 800afa2:	f003 0303 	and.w	r3, r3, #3
 800afa6:	4a13      	ldr	r2, [pc, #76]	@ (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800afa8:	fa22 f303 	lsr.w	r3, r2, r3
 800afac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afae:	e078      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afb4:	e075      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800afb6:	4b0e      	ldr	r3, [pc, #56]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afc2:	d102      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800afc4:	4b0c      	ldr	r3, [pc, #48]	@ (800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800afc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afc8:	e06b      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afca:	2300      	movs	r3, #0
 800afcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afce:	e068      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800afd0:	4b07      	ldr	r3, [pc, #28]	@ (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afdc:	d102      	bne.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800afde:	4b07      	ldr	r3, [pc, #28]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800afe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afe2:	e05e      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afe8:	e05b      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800afea:	2300      	movs	r3, #0
 800afec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afee:	e058      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aff0:	58024400 	.word	0x58024400
 800aff4:	03d09000 	.word	0x03d09000
 800aff8:	003d0900 	.word	0x003d0900
 800affc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b000:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b004:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b008:	430b      	orrs	r3, r1
 800b00a:	d148      	bne.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b00c:	4b27      	ldr	r3, [pc, #156]	@ (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b00e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b010:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b014:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b01c:	d02a      	beq.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b024:	d838      	bhi.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d004      	beq.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b032:	d00d      	beq.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b034:	e030      	b.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b036:	4b1d      	ldr	r3, [pc, #116]	@ (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b03e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b042:	d102      	bne.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b044:	4b1a      	ldr	r3, [pc, #104]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b048:	e02b      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b04e:	e028      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b050:	4b16      	ldr	r3, [pc, #88]	@ (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b058:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b05c:	d107      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b05e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b062:	4618      	mov	r0, r3
 800b064:	f000 fae4 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b06c:	e019      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b072:	e016      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b074:	4b0d      	ldr	r3, [pc, #52]	@ (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b07c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b080:	d107      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b082:	f107 0318 	add.w	r3, r7, #24
 800b086:	4618      	mov	r0, r3
 800b088:	f000 f82a 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b090:	e007      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b096:	e004      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b09c:	e001      	b.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3740      	adds	r7, #64	@ 0x40
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	58024400 	.word	0x58024400
 800b0b0:	017d7840 	.word	0x017d7840

0800b0b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b0b8:	f7fd ffea 	bl	8009090 <HAL_RCC_GetHCLKFreq>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	4b06      	ldr	r3, [pc, #24]	@ (800b0d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b0c0:	6a1b      	ldr	r3, [r3, #32]
 800b0c2:	091b      	lsrs	r3, r3, #4
 800b0c4:	f003 0307 	and.w	r3, r3, #7
 800b0c8:	4904      	ldr	r1, [pc, #16]	@ (800b0dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b0ca:	5ccb      	ldrb	r3, [r1, r3]
 800b0cc:	f003 031f 	and.w	r3, r3, #31
 800b0d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	58024400 	.word	0x58024400
 800b0dc:	08015248 	.word	0x08015248

0800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b089      	sub	sp, #36	@ 0x24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0e8:	4ba1      	ldr	r3, [pc, #644]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ec:	f003 0303 	and.w	r3, r3, #3
 800b0f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b0f2:	4b9f      	ldr	r3, [pc, #636]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f6:	0b1b      	lsrs	r3, r3, #12
 800b0f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b0fe:	4b9c      	ldr	r3, [pc, #624]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b102:	091b      	lsrs	r3, r3, #4
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b10a:	4b99      	ldr	r3, [pc, #612]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b10c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b10e:	08db      	lsrs	r3, r3, #3
 800b110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	fb02 f303 	mul.w	r3, r2, r3
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b122:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 8111 	beq.w	800b350 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	2b02      	cmp	r3, #2
 800b132:	f000 8083 	beq.w	800b23c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2b02      	cmp	r3, #2
 800b13a:	f200 80a1 	bhi.w	800b280 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d056      	beq.n	800b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b14a:	e099      	b.n	800b280 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b14c:	4b88      	ldr	r3, [pc, #544]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0320 	and.w	r3, r3, #32
 800b154:	2b00      	cmp	r3, #0
 800b156:	d02d      	beq.n	800b1b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b158:	4b85      	ldr	r3, [pc, #532]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	08db      	lsrs	r3, r3, #3
 800b15e:	f003 0303 	and.w	r3, r3, #3
 800b162:	4a84      	ldr	r2, [pc, #528]	@ (800b374 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b164:	fa22 f303 	lsr.w	r3, r2, r3
 800b168:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	ee07 3a90 	vmov	s15, r3
 800b170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b182:	4b7b      	ldr	r3, [pc, #492]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18a:	ee07 3a90 	vmov	s15, r3
 800b18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b192:	ed97 6a03 	vldr	s12, [r7, #12]
 800b196:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1b2:	e087      	b.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1c6:	4b6a      	ldr	r3, [pc, #424]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1f6:	e065      	b.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	ee07 3a90 	vmov	s15, r3
 800b1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b202:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b380 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b20a:	4b59      	ldr	r3, [pc, #356]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b20c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b212:	ee07 3a90 	vmov	s15, r3
 800b216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b21e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b22a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b23a:	e043      	b.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b246:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b384 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b24e:	4b48      	ldr	r3, [pc, #288]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b25e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b262:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b26e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b27a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b27e:	e021      	b.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b380 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b28e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b292:	4b37      	ldr	r3, [pc, #220]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b2c4:	4b2a      	ldr	r3, [pc, #168]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c8:	0a5b      	lsrs	r3, r3, #9
 800b2ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2ce:	ee07 3a90 	vmov	s15, r3
 800b2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ea:	ee17 2a90 	vmov	r2, s15
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b2f2:	4b1f      	ldr	r3, [pc, #124]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f6:	0c1b      	lsrs	r3, r3, #16
 800b2f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2fc:	ee07 3a90 	vmov	s15, r3
 800b300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b304:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b30c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b318:	ee17 2a90 	vmov	r2, s15
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b320:	4b13      	ldr	r3, [pc, #76]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b324:	0e1b      	lsrs	r3, r3, #24
 800b326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b32a:	ee07 3a90 	vmov	s15, r3
 800b32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b33a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b33e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b346:	ee17 2a90 	vmov	r2, s15
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b34e:	e008      	b.n	800b362 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	609a      	str	r2, [r3, #8]
}
 800b362:	bf00      	nop
 800b364:	3724      	adds	r7, #36	@ 0x24
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	58024400 	.word	0x58024400
 800b374:	03d09000 	.word	0x03d09000
 800b378:	46000000 	.word	0x46000000
 800b37c:	4c742400 	.word	0x4c742400
 800b380:	4a742400 	.word	0x4a742400
 800b384:	4bbebc20 	.word	0x4bbebc20

0800b388 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b388:	b480      	push	{r7}
 800b38a:	b089      	sub	sp, #36	@ 0x24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b390:	4ba1      	ldr	r3, [pc, #644]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b394:	f003 0303 	and.w	r3, r3, #3
 800b398:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b39a:	4b9f      	ldr	r3, [pc, #636]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39e:	0d1b      	lsrs	r3, r3, #20
 800b3a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b3a6:	4b9c      	ldr	r3, [pc, #624]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3aa:	0a1b      	lsrs	r3, r3, #8
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b3b2:	4b99      	ldr	r3, [pc, #612]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3b6:	08db      	lsrs	r3, r3, #3
 800b3b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	fb02 f303 	mul.w	r3, r2, r3
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 8111 	beq.w	800b5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	f000 8083 	beq.w	800b4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	f200 80a1 	bhi.w	800b528 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d003      	beq.n	800b3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d056      	beq.n	800b4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b3f2:	e099      	b.n	800b528 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3f4:	4b88      	ldr	r3, [pc, #544]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0320 	and.w	r3, r3, #32
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d02d      	beq.n	800b45c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b400:	4b85      	ldr	r3, [pc, #532]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	08db      	lsrs	r3, r3, #3
 800b406:	f003 0303 	and.w	r3, r3, #3
 800b40a:	4a84      	ldr	r2, [pc, #528]	@ (800b61c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b40c:	fa22 f303 	lsr.w	r3, r2, r3
 800b410:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	ee07 3a90 	vmov	s15, r3
 800b418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b42a:	4b7b      	ldr	r3, [pc, #492]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b432:	ee07 3a90 	vmov	s15, r3
 800b436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b43e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b44a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b456:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b45a:	e087      	b.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	ee07 3a90 	vmov	s15, r3
 800b462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b466:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b46a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b46e:	4b6a      	ldr	r3, [pc, #424]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b476:	ee07 3a90 	vmov	s15, r3
 800b47a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b482:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b48a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b48e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b49a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b49e:	e065      	b.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	ee07 3a90 	vmov	s15, r3
 800b4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b628 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b4ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4b2:	4b59      	ldr	r3, [pc, #356]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ba:	ee07 3a90 	vmov	s15, r3
 800b4be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4e2:	e043      	b.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	ee07 3a90 	vmov	s15, r3
 800b4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b62c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b4f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f6:	4b48      	ldr	r3, [pc, #288]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b506:	ed97 6a03 	vldr	s12, [r7, #12]
 800b50a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b50e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b526:	e021      	b.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b532:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b628 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53a:	4b37      	ldr	r3, [pc, #220]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b53c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b54e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b55e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b562:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b56a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b56c:	4b2a      	ldr	r3, [pc, #168]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b56e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b570:	0a5b      	lsrs	r3, r3, #9
 800b572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b576:	ee07 3a90 	vmov	s15, r3
 800b57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b57e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b582:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b586:	edd7 6a07 	vldr	s13, [r7, #28]
 800b58a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b58e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b592:	ee17 2a90 	vmov	r2, s15
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b59a:	4b1f      	ldr	r3, [pc, #124]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b59c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b59e:	0c1b      	lsrs	r3, r3, #16
 800b5a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5a4:	ee07 3a90 	vmov	s15, r3
 800b5a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5c0:	ee17 2a90 	vmov	r2, s15
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b5c8:	4b13      	ldr	r3, [pc, #76]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5cc:	0e1b      	lsrs	r3, r3, #24
 800b5ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5d2:	ee07 3a90 	vmov	s15, r3
 800b5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ee:	ee17 2a90 	vmov	r2, s15
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b5f6:	e008      	b.n	800b60a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	609a      	str	r2, [r3, #8]
}
 800b60a:	bf00      	nop
 800b60c:	3724      	adds	r7, #36	@ 0x24
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	58024400 	.word	0x58024400
 800b61c:	03d09000 	.word	0x03d09000
 800b620:	46000000 	.word	0x46000000
 800b624:	4c742400 	.word	0x4c742400
 800b628:	4a742400 	.word	0x4a742400
 800b62c:	4bbebc20 	.word	0x4bbebc20

0800b630 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b630:	b480      	push	{r7}
 800b632:	b089      	sub	sp, #36	@ 0x24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b638:	4ba0      	ldr	r3, [pc, #640]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63c:	f003 0303 	and.w	r3, r3, #3
 800b640:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b642:	4b9e      	ldr	r3, [pc, #632]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b646:	091b      	lsrs	r3, r3, #4
 800b648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b64c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b64e:	4b9b      	ldr	r3, [pc, #620]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b658:	4b98      	ldr	r3, [pc, #608]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b65a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b65c:	08db      	lsrs	r3, r3, #3
 800b65e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	fb02 f303 	mul.w	r3, r2, r3
 800b668:	ee07 3a90 	vmov	s15, r3
 800b66c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b670:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f000 8111 	beq.w	800b89e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	2b02      	cmp	r3, #2
 800b680:	f000 8083 	beq.w	800b78a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	2b02      	cmp	r3, #2
 800b688:	f200 80a1 	bhi.w	800b7ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d003      	beq.n	800b69a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d056      	beq.n	800b746 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b698:	e099      	b.n	800b7ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b69a:	4b88      	ldr	r3, [pc, #544]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f003 0320 	and.w	r3, r3, #32
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d02d      	beq.n	800b702 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6a6:	4b85      	ldr	r3, [pc, #532]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	08db      	lsrs	r3, r3, #3
 800b6ac:	f003 0303 	and.w	r3, r3, #3
 800b6b0:	4a83      	ldr	r2, [pc, #524]	@ (800b8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b6b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	ee07 3a90 	vmov	s15, r3
 800b6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	ee07 3a90 	vmov	s15, r3
 800b6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6d0:	4b7a      	ldr	r3, [pc, #488]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d8:	ee07 3a90 	vmov	s15, r3
 800b6dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6e4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b700:	e087      	b.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	ee07 3a90 	vmov	s15, r3
 800b708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b714:	4b69      	ldr	r3, [pc, #420]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71c:	ee07 3a90 	vmov	s15, r3
 800b720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b724:	ed97 6a03 	vldr	s12, [r7, #12]
 800b728:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b72c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b734:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b73c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b740:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b744:	e065      	b.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	ee07 3a90 	vmov	s15, r3
 800b74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b750:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b8cc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b758:	4b58      	ldr	r3, [pc, #352]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b760:	ee07 3a90 	vmov	s15, r3
 800b764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b768:	ed97 6a03 	vldr	s12, [r7, #12]
 800b76c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b77c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b780:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b784:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b788:	e043      	b.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	ee07 3a90 	vmov	s15, r3
 800b790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b794:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b79c:	4b47      	ldr	r3, [pc, #284]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a4:	ee07 3a90 	vmov	s15, r3
 800b7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7b0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7cc:	e021      	b.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7e0:	4b36      	ldr	r3, [pc, #216]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7f4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b810:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b812:	4b2a      	ldr	r3, [pc, #168]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b816:	0a5b      	lsrs	r3, r3, #9
 800b818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b81c:	ee07 3a90 	vmov	s15, r3
 800b820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b824:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b82c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b838:	ee17 2a90 	vmov	r2, s15
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b840:	4b1e      	ldr	r3, [pc, #120]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b844:	0c1b      	lsrs	r3, r3, #16
 800b846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b84a:	ee07 3a90 	vmov	s15, r3
 800b84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b852:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b85a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b85e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b866:	ee17 2a90 	vmov	r2, s15
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b86e:	4b13      	ldr	r3, [pc, #76]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b872:	0e1b      	lsrs	r3, r3, #24
 800b874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b878:	ee07 3a90 	vmov	s15, r3
 800b87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b880:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b884:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b888:	edd7 6a07 	vldr	s13, [r7, #28]
 800b88c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b894:	ee17 2a90 	vmov	r2, s15
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b89c:	e008      	b.n	800b8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	609a      	str	r2, [r3, #8]
}
 800b8b0:	bf00      	nop
 800b8b2:	3724      	adds	r7, #36	@ 0x24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	58024400 	.word	0x58024400
 800b8c0:	03d09000 	.word	0x03d09000
 800b8c4:	46000000 	.word	0x46000000
 800b8c8:	4c742400 	.word	0x4c742400
 800b8cc:	4a742400 	.word	0x4a742400
 800b8d0:	4bbebc20 	.word	0x4bbebc20

0800b8d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8e2:	4b53      	ldr	r3, [pc, #332]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8e6:	f003 0303 	and.w	r3, r3, #3
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d101      	bne.n	800b8f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e099      	b.n	800ba26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b8f2:	4b4f      	ldr	r3, [pc, #316]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a4e      	ldr	r2, [pc, #312]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b8f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b8fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8fe:	f7f6 f9f9 	bl	8001cf4 <HAL_GetTick>
 800b902:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b904:	e008      	b.n	800b918 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b906:	f7f6 f9f5 	bl	8001cf4 <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	2b02      	cmp	r3, #2
 800b912:	d901      	bls.n	800b918 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b914:	2303      	movs	r3, #3
 800b916:	e086      	b.n	800ba26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b918:	4b45      	ldr	r3, [pc, #276]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1f0      	bne.n	800b906 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b924:	4b42      	ldr	r3, [pc, #264]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b928:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	031b      	lsls	r3, r3, #12
 800b932:	493f      	ldr	r1, [pc, #252]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b934:	4313      	orrs	r3, r2
 800b936:	628b      	str	r3, [r1, #40]	@ 0x28
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	3b01      	subs	r3, #1
 800b948:	025b      	lsls	r3, r3, #9
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	431a      	orrs	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	3b01      	subs	r3, #1
 800b954:	041b      	lsls	r3, r3, #16
 800b956:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b95a:	431a      	orrs	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	3b01      	subs	r3, #1
 800b962:	061b      	lsls	r3, r3, #24
 800b964:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b968:	4931      	ldr	r1, [pc, #196]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b96a:	4313      	orrs	r3, r2
 800b96c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b96e:	4b30      	ldr	r3, [pc, #192]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b972:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	492d      	ldr	r1, [pc, #180]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b97c:	4313      	orrs	r3, r2
 800b97e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b980:	4b2b      	ldr	r3, [pc, #172]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b984:	f023 0220 	bic.w	r2, r3, #32
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	4928      	ldr	r1, [pc, #160]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b992:	4b27      	ldr	r3, [pc, #156]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b996:	4a26      	ldr	r2, [pc, #152]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b998:	f023 0310 	bic.w	r3, r3, #16
 800b99c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b99e:	4b24      	ldr	r3, [pc, #144]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9a2:	4b24      	ldr	r3, [pc, #144]	@ (800ba34 <RCCEx_PLL2_Config+0x160>)
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	69d2      	ldr	r2, [r2, #28]
 800b9aa:	00d2      	lsls	r2, r2, #3
 800b9ac:	4920      	ldr	r1, [pc, #128]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b9b2:	4b1f      	ldr	r3, [pc, #124]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b6:	4a1e      	ldr	r2, [pc, #120]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9b8:	f043 0310 	orr.w	r3, r3, #16
 800b9bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d106      	bne.n	800b9d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b9c4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c8:	4a19      	ldr	r2, [pc, #100]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b9ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9d0:	e00f      	b.n	800b9f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d106      	bne.n	800b9e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b9d8:	4b15      	ldr	r3, [pc, #84]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9dc:	4a14      	ldr	r2, [pc, #80]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9e4:	e005      	b.n	800b9f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b9e6:	4b12      	ldr	r3, [pc, #72]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ea:	4a11      	ldr	r2, [pc, #68]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b9f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a0e      	ldr	r2, [pc, #56]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9fe:	f7f6 f979 	bl	8001cf4 <HAL_GetTick>
 800ba02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba04:	e008      	b.n	800ba18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba06:	f7f6 f975 	bl	8001cf4 <HAL_GetTick>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d901      	bls.n	800ba18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba14:	2303      	movs	r3, #3
 800ba16:	e006      	b.n	800ba26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba18:	4b05      	ldr	r3, [pc, #20]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d0f0      	beq.n	800ba06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	58024400 	.word	0x58024400
 800ba34:	ffff0007 	.word	0xffff0007

0800ba38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba46:	4b53      	ldr	r3, [pc, #332]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba4a:	f003 0303 	and.w	r3, r3, #3
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	d101      	bne.n	800ba56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e099      	b.n	800bb8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ba56:	4b4f      	ldr	r3, [pc, #316]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a4e      	ldr	r2, [pc, #312]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba62:	f7f6 f947 	bl	8001cf4 <HAL_GetTick>
 800ba66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba68:	e008      	b.n	800ba7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba6a:	f7f6 f943 	bl	8001cf4 <HAL_GetTick>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d901      	bls.n	800ba7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	e086      	b.n	800bb8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba7c:	4b45      	ldr	r3, [pc, #276]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1f0      	bne.n	800ba6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ba88:	4b42      	ldr	r3, [pc, #264]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba8c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	051b      	lsls	r3, r3, #20
 800ba96:	493f      	ldr	r1, [pc, #252]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	628b      	str	r3, [r1, #40]	@ 0x28
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	3b01      	subs	r3, #1
 800baac:	025b      	lsls	r3, r3, #9
 800baae:	b29b      	uxth	r3, r3
 800bab0:	431a      	orrs	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	041b      	lsls	r3, r3, #16
 800baba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800babe:	431a      	orrs	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	061b      	lsls	r3, r3, #24
 800bac8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bacc:	4931      	ldr	r1, [pc, #196]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bad2:	4b30      	ldr	r3, [pc, #192]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	492d      	ldr	r1, [pc, #180]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bae0:	4313      	orrs	r3, r2
 800bae2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bae4:	4b2b      	ldr	r3, [pc, #172]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	4928      	ldr	r1, [pc, #160]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800baf2:	4313      	orrs	r3, r2
 800baf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800baf6:	4b27      	ldr	r3, [pc, #156]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800baf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bafa:	4a26      	ldr	r2, [pc, #152]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bafc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bb02:	4b24      	ldr	r3, [pc, #144]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb06:	4b24      	ldr	r3, [pc, #144]	@ (800bb98 <RCCEx_PLL3_Config+0x160>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	69d2      	ldr	r2, [r2, #28]
 800bb0e:	00d2      	lsls	r2, r2, #3
 800bb10:	4920      	ldr	r1, [pc, #128]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb12:	4313      	orrs	r3, r2
 800bb14:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bb16:	4b1f      	ldr	r3, [pc, #124]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1a:	4a1e      	ldr	r2, [pc, #120]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d106      	bne.n	800bb36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bb28:	4b1a      	ldr	r3, [pc, #104]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2c:	4a19      	ldr	r2, [pc, #100]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bb32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb34:	e00f      	b.n	800bb56 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d106      	bne.n	800bb4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bb3c:	4b15      	ldr	r3, [pc, #84]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb40:	4a14      	ldr	r2, [pc, #80]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bb46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb48:	e005      	b.n	800bb56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bb4a:	4b12      	ldr	r3, [pc, #72]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb4e:	4a11      	ldr	r2, [pc, #68]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bb56:	4b0f      	ldr	r3, [pc, #60]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a0e      	ldr	r2, [pc, #56]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb62:	f7f6 f8c7 	bl	8001cf4 <HAL_GetTick>
 800bb66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb68:	e008      	b.n	800bb7c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb6a:	f7f6 f8c3 	bl	8001cf4 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d901      	bls.n	800bb7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e006      	b.n	800bb8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb7c:	4b05      	ldr	r3, [pc, #20]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0f0      	beq.n	800bb6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	58024400 	.word	0x58024400
 800bb98:	ffff0007 	.word	0xffff0007

0800bb9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e10f      	b.n	800bdce <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a87      	ldr	r2, [pc, #540]	@ (800bdd8 <HAL_SPI_Init+0x23c>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d00f      	beq.n	800bbde <HAL_SPI_Init+0x42>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a86      	ldr	r2, [pc, #536]	@ (800bddc <HAL_SPI_Init+0x240>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d00a      	beq.n	800bbde <HAL_SPI_Init+0x42>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a84      	ldr	r2, [pc, #528]	@ (800bde0 <HAL_SPI_Init+0x244>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d005      	beq.n	800bbde <HAL_SPI_Init+0x42>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	2b0f      	cmp	r3, #15
 800bbd8:	d901      	bls.n	800bbde <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e0f7      	b.n	800bdce <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fbca 	bl	800c378 <SPI_GetPacketSize>
 800bbe4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a7b      	ldr	r2, [pc, #492]	@ (800bdd8 <HAL_SPI_Init+0x23c>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d00c      	beq.n	800bc0a <HAL_SPI_Init+0x6e>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a79      	ldr	r2, [pc, #484]	@ (800bddc <HAL_SPI_Init+0x240>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d007      	beq.n	800bc0a <HAL_SPI_Init+0x6e>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a78      	ldr	r2, [pc, #480]	@ (800bde0 <HAL_SPI_Init+0x244>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d002      	beq.n	800bc0a <HAL_SPI_Init+0x6e>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2b08      	cmp	r3, #8
 800bc08:	d811      	bhi.n	800bc2e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bc0e:	4a72      	ldr	r2, [pc, #456]	@ (800bdd8 <HAL_SPI_Init+0x23c>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d009      	beq.n	800bc28 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a70      	ldr	r2, [pc, #448]	@ (800bddc <HAL_SPI_Init+0x240>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d004      	beq.n	800bc28 <HAL_SPI_Init+0x8c>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a6f      	ldr	r2, [pc, #444]	@ (800bde0 <HAL_SPI_Init+0x244>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d104      	bne.n	800bc32 <HAL_SPI_Init+0x96>
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b10      	cmp	r3, #16
 800bc2c:	d901      	bls.n	800bc32 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e0cd      	b.n	800bdce <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d106      	bne.n	800bc4c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7f5 fba2 	bl	8001390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f022 0201 	bic.w	r2, r2, #1
 800bc62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bc6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc78:	d119      	bne.n	800bcae <HAL_SPI_Init+0x112>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc82:	d103      	bne.n	800bc8c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d008      	beq.n	800bc9e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10c      	bne.n	800bcae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc9c:	d107      	bne.n	800bcae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bcac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00f      	beq.n	800bcda <HAL_SPI_Init+0x13e>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	2b06      	cmp	r3, #6
 800bcc0:	d90b      	bls.n	800bcda <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	430a      	orrs	r2, r1
 800bcd6:	601a      	str	r2, [r3, #0]
 800bcd8:	e007      	b.n	800bcea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bce8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	69da      	ldr	r2, [r3, #28]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcfc:	ea42 0103 	orr.w	r1, r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68da      	ldr	r2, [r3, #12]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd14:	431a      	orrs	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd1a:	431a      	orrs	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	431a      	orrs	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	431a      	orrs	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	695b      	ldr	r3, [r3, #20]
 800bd2c:	431a      	orrs	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	431a      	orrs	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	431a      	orrs	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	431a      	orrs	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd4a:	ea42 0103 	orr.w	r1, r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	430a      	orrs	r2, r1
 800bd58:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d113      	bne.n	800bd8a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd74:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bd88:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f022 0201 	bic.w	r2, r2, #1
 800bd98:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	40013000 	.word	0x40013000
 800bddc:	40003800 	.word	0x40003800
 800bde0:	40003c00 	.word	0x40003c00

0800bde4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08a      	sub	sp, #40	@ 0x28
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3320      	adds	r3, #32
 800bdfa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800be06:	2b01      	cmp	r3, #1
 800be08:	d101      	bne.n	800be0e <HAL_SPI_Transmit+0x2a>
 800be0a:	2302      	movs	r3, #2
 800be0c:	e1e1      	b.n	800c1d2 <HAL_SPI_Transmit+0x3ee>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2201      	movs	r2, #1
 800be12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be16:	f7f5 ff6d 	bl	8001cf4 <HAL_GetTick>
 800be1a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b01      	cmp	r3, #1
 800be26:	d007      	beq.n	800be38 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800be28:	2302      	movs	r3, #2
 800be2a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800be34:	7efb      	ldrb	r3, [r7, #27]
 800be36:	e1cc      	b.n	800c1d2 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <HAL_SPI_Transmit+0x60>
 800be3e:	88fb      	ldrh	r3, [r7, #6]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d107      	bne.n	800be54 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800be50:	7efb      	ldrb	r3, [r7, #27]
 800be52:	e1be      	b.n	800c1d2 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2203      	movs	r2, #3
 800be58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	68ba      	ldr	r2, [r7, #8]
 800be68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	88fa      	ldrh	r2, [r7, #6]
 800be6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	88fa      	ldrh	r2, [r7, #6]
 800be76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bea4:	d108      	bne.n	800beb8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800beb4:	601a      	str	r2, [r3, #0]
 800beb6:	e009      	b.n	800becc <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800beca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	4b96      	ldr	r3, [pc, #600]	@ (800c12c <HAL_SPI_Transmit+0x348>)
 800bed4:	4013      	ands	r3, r2
 800bed6:	88f9      	ldrh	r1, [r7, #6]
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	6812      	ldr	r2, [r2, #0]
 800bedc:	430b      	orrs	r3, r1
 800bede:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f042 0201 	orr.w	r2, r2, #1
 800beee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bef8:	d107      	bne.n	800bf0a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	2b0f      	cmp	r3, #15
 800bf10:	d947      	bls.n	800bfa2 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bf12:	e03f      	b.n	800bf94 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d114      	bne.n	800bf4c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6812      	ldr	r2, [r2, #0]
 800bf2c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf32:	1d1a      	adds	r2, r3, #4
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	3b01      	subs	r3, #1
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bf4a:	e023      	b.n	800bf94 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf4c:	f7f5 fed2 	bl	8001cf4 <HAL_GetTick>
 800bf50:	4602      	mov	r2, r0
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d803      	bhi.n	800bf64 <HAL_SPI_Transmit+0x180>
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d102      	bne.n	800bf6a <HAL_SPI_Transmit+0x186>
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d114      	bne.n	800bf94 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f000 f936 	bl	800c1dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e11e      	b.n	800c1d2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1b9      	bne.n	800bf14 <HAL_SPI_Transmit+0x130>
 800bfa0:	e0f1      	b.n	800c186 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	2b07      	cmp	r3, #7
 800bfa8:	f240 80e6 	bls.w	800c178 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bfac:	e05d      	b.n	800c06a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	695b      	ldr	r3, [r3, #20]
 800bfb4:	f003 0302 	and.w	r3, r3, #2
 800bfb8:	2b02      	cmp	r3, #2
 800bfba:	d132      	bne.n	800c022 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d918      	bls.n	800bffa <HAL_SPI_Transmit+0x216>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d014      	beq.n	800bffa <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6812      	ldr	r2, [r2, #0]
 800bfda:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfe0:	1d1a      	adds	r2, r3, #4
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	3b02      	subs	r3, #2
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bff8:	e037      	b.n	800c06a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bffe:	881a      	ldrh	r2, [r3, #0]
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c008:	1c9a      	adds	r2, r3, #2
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c014:	b29b      	uxth	r3, r3
 800c016:	3b01      	subs	r3, #1
 800c018:	b29a      	uxth	r2, r3
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c020:	e023      	b.n	800c06a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c022:	f7f5 fe67 	bl	8001cf4 <HAL_GetTick>
 800c026:	4602      	mov	r2, r0
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d803      	bhi.n	800c03a <HAL_SPI_Transmit+0x256>
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c038:	d102      	bne.n	800c040 <HAL_SPI_Transmit+0x25c>
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d114      	bne.n	800c06a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f000 f8cb 	bl	800c1dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c054:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2201      	movs	r2, #1
 800c062:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c066:	2303      	movs	r3, #3
 800c068:	e0b3      	b.n	800c1d2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c070:	b29b      	uxth	r3, r3
 800c072:	2b00      	cmp	r3, #0
 800c074:	d19b      	bne.n	800bfae <HAL_SPI_Transmit+0x1ca>
 800c076:	e086      	b.n	800c186 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	f003 0302 	and.w	r3, r3, #2
 800c082:	2b02      	cmp	r3, #2
 800c084:	d154      	bne.n	800c130 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d918      	bls.n	800c0c4 <HAL_SPI_Transmit+0x2e0>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c096:	2b40      	cmp	r3, #64	@ 0x40
 800c098:	d914      	bls.n	800c0c4 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	6812      	ldr	r2, [r2, #0]
 800c0a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0aa:	1d1a      	adds	r2, r3, #4
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	3b04      	subs	r3, #4
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c0c2:	e059      	b.n	800c178 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d917      	bls.n	800c100 <HAL_SPI_Transmit+0x31c>
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d013      	beq.n	800c100 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0dc:	881a      	ldrh	r2, [r3, #0]
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0e6:	1c9a      	adds	r2, r3, #2
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	3b02      	subs	r3, #2
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c0fe:	e03b      	b.n	800c178 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	3320      	adds	r3, #32
 800c10a:	7812      	ldrb	r2, [r2, #0]
 800c10c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c112:	1c5a      	adds	r2, r3, #1
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c11e:	b29b      	uxth	r3, r3
 800c120:	3b01      	subs	r3, #1
 800c122:	b29a      	uxth	r2, r3
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c12a:	e025      	b.n	800c178 <HAL_SPI_Transmit+0x394>
 800c12c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c130:	f7f5 fde0 	bl	8001cf4 <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d803      	bhi.n	800c148 <HAL_SPI_Transmit+0x364>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c146:	d102      	bne.n	800c14e <HAL_SPI_Transmit+0x36a>
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d114      	bne.n	800c178 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f000 f844 	bl	800c1dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c162:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c174:	2303      	movs	r3, #3
 800c176:	e02c      	b.n	800c1d2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c17e:	b29b      	uxth	r3, r3
 800c180:	2b00      	cmp	r3, #0
 800c182:	f47f af79 	bne.w	800c078 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2200      	movs	r2, #0
 800c18e:	2108      	movs	r1, #8
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f000 f8c3 	bl	800c31c <SPI_WaitOnFlagUntilTimeout>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d007      	beq.n	800c1ac <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1a2:	f043 0220 	orr.w	r2, r3, #32
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 f815 	bl	800c1dc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2201      	movs	r2, #1
 800c1be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d001      	beq.n	800c1d0 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e000      	b.n	800c1d2 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800c1d0:	7efb      	ldrb	r3, [r7, #27]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3720      	adds	r7, #32
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop

0800c1dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	699a      	ldr	r2, [r3, #24]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0208 	orr.w	r2, r2, #8
 800c1fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	699a      	ldr	r2, [r3, #24]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f042 0210 	orr.w	r2, r2, #16
 800c20a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f022 0201 	bic.w	r2, r2, #1
 800c21a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	6919      	ldr	r1, [r3, #16]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	4b3c      	ldr	r3, [pc, #240]	@ (800c318 <SPI_CloseTransfer+0x13c>)
 800c228:	400b      	ands	r3, r1
 800c22a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689a      	ldr	r2, [r3, #8]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c23a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b04      	cmp	r3, #4
 800c246:	d014      	beq.n	800c272 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f003 0320 	and.w	r3, r3, #32
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00f      	beq.n	800c272 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c258:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	699a      	ldr	r2, [r3, #24]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f042 0220 	orr.w	r2, r2, #32
 800c270:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d014      	beq.n	800c2a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00f      	beq.n	800c2a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c28e:	f043 0204 	orr.w	r2, r3, #4
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	699a      	ldr	r2, [r3, #24]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00f      	beq.n	800c2d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2b8:	f043 0201 	orr.w	r2, r3, #1
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	699a      	ldr	r2, [r3, #24]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00f      	beq.n	800c2fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2e2:	f043 0208 	orr.w	r2, r3, #8
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	699a      	ldr	r2, [r3, #24]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c30c:	bf00      	nop
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	fffffc90 	.word	0xfffffc90

0800c31c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	603b      	str	r3, [r7, #0]
 800c328:	4613      	mov	r3, r2
 800c32a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c32c:	e010      	b.n	800c350 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c32e:	f7f5 fce1 	bl	8001cf4 <HAL_GetTick>
 800c332:	4602      	mov	r2, r0
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	683a      	ldr	r2, [r7, #0]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d803      	bhi.n	800c346 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c344:	d102      	bne.n	800c34c <SPI_WaitOnFlagUntilTimeout+0x30>
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c34c:	2303      	movs	r3, #3
 800c34e:	e00f      	b.n	800c370 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	695a      	ldr	r2, [r3, #20]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	4013      	ands	r3, r2
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	bf0c      	ite	eq
 800c360:	2301      	moveq	r3, #1
 800c362:	2300      	movne	r3, #0
 800c364:	b2db      	uxtb	r3, r3
 800c366:	461a      	mov	r2, r3
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d0df      	beq.n	800c32e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c384:	095b      	lsrs	r3, r3, #5
 800c386:	3301      	adds	r3, #1
 800c388:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	3301      	adds	r3, #1
 800c390:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	3307      	adds	r3, #7
 800c396:	08db      	lsrs	r3, r3, #3
 800c398:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e049      	b.n	800c454 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d106      	bne.n	800c3da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7f5 fb9b 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2202      	movs	r2, #2
 800c3de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	f000 fd71 	bl	800ced4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2201      	movs	r2, #1
 800c44e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3708      	adds	r7, #8
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d001      	beq.n	800c474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	e054      	b.n	800c51e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2202      	movs	r2, #2
 800c478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68da      	ldr	r2, [r3, #12]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f042 0201 	orr.w	r2, r2, #1
 800c48a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a26      	ldr	r2, [pc, #152]	@ (800c52c <HAL_TIM_Base_Start_IT+0xd0>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d022      	beq.n	800c4dc <HAL_TIM_Base_Start_IT+0x80>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c49e:	d01d      	beq.n	800c4dc <HAL_TIM_Base_Start_IT+0x80>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a22      	ldr	r2, [pc, #136]	@ (800c530 <HAL_TIM_Base_Start_IT+0xd4>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d018      	beq.n	800c4dc <HAL_TIM_Base_Start_IT+0x80>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a21      	ldr	r2, [pc, #132]	@ (800c534 <HAL_TIM_Base_Start_IT+0xd8>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d013      	beq.n	800c4dc <HAL_TIM_Base_Start_IT+0x80>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a1f      	ldr	r2, [pc, #124]	@ (800c538 <HAL_TIM_Base_Start_IT+0xdc>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d00e      	beq.n	800c4dc <HAL_TIM_Base_Start_IT+0x80>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a1e      	ldr	r2, [pc, #120]	@ (800c53c <HAL_TIM_Base_Start_IT+0xe0>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d009      	beq.n	800c4dc <HAL_TIM_Base_Start_IT+0x80>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a1c      	ldr	r2, [pc, #112]	@ (800c540 <HAL_TIM_Base_Start_IT+0xe4>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d004      	beq.n	800c4dc <HAL_TIM_Base_Start_IT+0x80>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a1b      	ldr	r2, [pc, #108]	@ (800c544 <HAL_TIM_Base_Start_IT+0xe8>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d115      	bne.n	800c508 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	689a      	ldr	r2, [r3, #8]
 800c4e2:	4b19      	ldr	r3, [pc, #100]	@ (800c548 <HAL_TIM_Base_Start_IT+0xec>)
 800c4e4:	4013      	ands	r3, r2
 800c4e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2b06      	cmp	r3, #6
 800c4ec:	d015      	beq.n	800c51a <HAL_TIM_Base_Start_IT+0xbe>
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4f4:	d011      	beq.n	800c51a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f042 0201 	orr.w	r2, r2, #1
 800c504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c506:	e008      	b.n	800c51a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f042 0201 	orr.w	r2, r2, #1
 800c516:	601a      	str	r2, [r3, #0]
 800c518:	e000      	b.n	800c51c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c51a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	40010000 	.word	0x40010000
 800c530:	40000400 	.word	0x40000400
 800c534:	40000800 	.word	0x40000800
 800c538:	40000c00 	.word	0x40000c00
 800c53c:	40010400 	.word	0x40010400
 800c540:	40001800 	.word	0x40001800
 800c544:	40014000 	.word	0x40014000
 800c548:	00010007 	.word	0x00010007

0800c54c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	e049      	b.n	800c5f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	d106      	bne.n	800c578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f841 	bl	800c5fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2202      	movs	r2, #2
 800c57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	3304      	adds	r3, #4
 800c588:	4619      	mov	r1, r3
 800c58a:	4610      	mov	r0, r2
 800c58c:	f000 fca2 	bl	800ced4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b083      	sub	sp, #12
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c602:	bf00      	nop
 800c604:	370c      	adds	r7, #12
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
	...

0800c610 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d109      	bne.n	800c634 <HAL_TIM_PWM_Start+0x24>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b01      	cmp	r3, #1
 800c62a:	bf14      	ite	ne
 800c62c:	2301      	movne	r3, #1
 800c62e:	2300      	moveq	r3, #0
 800c630:	b2db      	uxtb	r3, r3
 800c632:	e03c      	b.n	800c6ae <HAL_TIM_PWM_Start+0x9e>
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	2b04      	cmp	r3, #4
 800c638:	d109      	bne.n	800c64e <HAL_TIM_PWM_Start+0x3e>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b01      	cmp	r3, #1
 800c644:	bf14      	ite	ne
 800c646:	2301      	movne	r3, #1
 800c648:	2300      	moveq	r3, #0
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	e02f      	b.n	800c6ae <HAL_TIM_PWM_Start+0x9e>
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b08      	cmp	r3, #8
 800c652:	d109      	bne.n	800c668 <HAL_TIM_PWM_Start+0x58>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	bf14      	ite	ne
 800c660:	2301      	movne	r3, #1
 800c662:	2300      	moveq	r3, #0
 800c664:	b2db      	uxtb	r3, r3
 800c666:	e022      	b.n	800c6ae <HAL_TIM_PWM_Start+0x9e>
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b0c      	cmp	r3, #12
 800c66c:	d109      	bne.n	800c682 <HAL_TIM_PWM_Start+0x72>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b01      	cmp	r3, #1
 800c678:	bf14      	ite	ne
 800c67a:	2301      	movne	r3, #1
 800c67c:	2300      	moveq	r3, #0
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	e015      	b.n	800c6ae <HAL_TIM_PWM_Start+0x9e>
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b10      	cmp	r3, #16
 800c686:	d109      	bne.n	800c69c <HAL_TIM_PWM_Start+0x8c>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b01      	cmp	r3, #1
 800c692:	bf14      	ite	ne
 800c694:	2301      	movne	r3, #1
 800c696:	2300      	moveq	r3, #0
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	e008      	b.n	800c6ae <HAL_TIM_PWM_Start+0x9e>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	bf14      	ite	ne
 800c6a8:	2301      	movne	r3, #1
 800c6aa:	2300      	moveq	r3, #0
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e0a1      	b.n	800c7fa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d104      	bne.n	800c6c6 <HAL_TIM_PWM_Start+0xb6>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6c4:	e023      	b.n	800c70e <HAL_TIM_PWM_Start+0xfe>
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	2b04      	cmp	r3, #4
 800c6ca:	d104      	bne.n	800c6d6 <HAL_TIM_PWM_Start+0xc6>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2202      	movs	r2, #2
 800c6d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6d4:	e01b      	b.n	800c70e <HAL_TIM_PWM_Start+0xfe>
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b08      	cmp	r3, #8
 800c6da:	d104      	bne.n	800c6e6 <HAL_TIM_PWM_Start+0xd6>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2202      	movs	r2, #2
 800c6e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6e4:	e013      	b.n	800c70e <HAL_TIM_PWM_Start+0xfe>
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	2b0c      	cmp	r3, #12
 800c6ea:	d104      	bne.n	800c6f6 <HAL_TIM_PWM_Start+0xe6>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6f4:	e00b      	b.n	800c70e <HAL_TIM_PWM_Start+0xfe>
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	2b10      	cmp	r3, #16
 800c6fa:	d104      	bne.n	800c706 <HAL_TIM_PWM_Start+0xf6>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2202      	movs	r2, #2
 800c700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c704:	e003      	b.n	800c70e <HAL_TIM_PWM_Start+0xfe>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2202      	movs	r2, #2
 800c70a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2201      	movs	r2, #1
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	4618      	mov	r0, r3
 800c718:	f000 ffea 	bl	800d6f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a38      	ldr	r2, [pc, #224]	@ (800c804 <HAL_TIM_PWM_Start+0x1f4>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d013      	beq.n	800c74e <HAL_TIM_PWM_Start+0x13e>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a37      	ldr	r2, [pc, #220]	@ (800c808 <HAL_TIM_PWM_Start+0x1f8>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d00e      	beq.n	800c74e <HAL_TIM_PWM_Start+0x13e>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a35      	ldr	r2, [pc, #212]	@ (800c80c <HAL_TIM_PWM_Start+0x1fc>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d009      	beq.n	800c74e <HAL_TIM_PWM_Start+0x13e>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a34      	ldr	r2, [pc, #208]	@ (800c810 <HAL_TIM_PWM_Start+0x200>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d004      	beq.n	800c74e <HAL_TIM_PWM_Start+0x13e>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a32      	ldr	r2, [pc, #200]	@ (800c814 <HAL_TIM_PWM_Start+0x204>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d101      	bne.n	800c752 <HAL_TIM_PWM_Start+0x142>
 800c74e:	2301      	movs	r3, #1
 800c750:	e000      	b.n	800c754 <HAL_TIM_PWM_Start+0x144>
 800c752:	2300      	movs	r3, #0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d007      	beq.n	800c768 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c766:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a25      	ldr	r2, [pc, #148]	@ (800c804 <HAL_TIM_PWM_Start+0x1f4>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d022      	beq.n	800c7b8 <HAL_TIM_PWM_Start+0x1a8>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c77a:	d01d      	beq.n	800c7b8 <HAL_TIM_PWM_Start+0x1a8>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a25      	ldr	r2, [pc, #148]	@ (800c818 <HAL_TIM_PWM_Start+0x208>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d018      	beq.n	800c7b8 <HAL_TIM_PWM_Start+0x1a8>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a24      	ldr	r2, [pc, #144]	@ (800c81c <HAL_TIM_PWM_Start+0x20c>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d013      	beq.n	800c7b8 <HAL_TIM_PWM_Start+0x1a8>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a22      	ldr	r2, [pc, #136]	@ (800c820 <HAL_TIM_PWM_Start+0x210>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d00e      	beq.n	800c7b8 <HAL_TIM_PWM_Start+0x1a8>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a1a      	ldr	r2, [pc, #104]	@ (800c808 <HAL_TIM_PWM_Start+0x1f8>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d009      	beq.n	800c7b8 <HAL_TIM_PWM_Start+0x1a8>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a1e      	ldr	r2, [pc, #120]	@ (800c824 <HAL_TIM_PWM_Start+0x214>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d004      	beq.n	800c7b8 <HAL_TIM_PWM_Start+0x1a8>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a16      	ldr	r2, [pc, #88]	@ (800c80c <HAL_TIM_PWM_Start+0x1fc>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d115      	bne.n	800c7e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	689a      	ldr	r2, [r3, #8]
 800c7be:	4b1a      	ldr	r3, [pc, #104]	@ (800c828 <HAL_TIM_PWM_Start+0x218>)
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b06      	cmp	r3, #6
 800c7c8:	d015      	beq.n	800c7f6 <HAL_TIM_PWM_Start+0x1e6>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7d0:	d011      	beq.n	800c7f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f042 0201 	orr.w	r2, r2, #1
 800c7e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7e2:	e008      	b.n	800c7f6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f042 0201 	orr.w	r2, r2, #1
 800c7f2:	601a      	str	r2, [r3, #0]
 800c7f4:	e000      	b.n	800c7f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	40010000 	.word	0x40010000
 800c808:	40010400 	.word	0x40010400
 800c80c:	40014000 	.word	0x40014000
 800c810:	40014400 	.word	0x40014400
 800c814:	40014800 	.word	0x40014800
 800c818:	40000400 	.word	0x40000400
 800c81c:	40000800 	.word	0x40000800
 800c820:	40000c00 	.word	0x40000c00
 800c824:	40001800 	.word	0x40001800
 800c828:	00010007 	.word	0x00010007

0800c82c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d122      	bne.n	800c888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	f003 0302 	and.w	r3, r3, #2
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d11b      	bne.n	800c888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f06f 0202 	mvn.w	r2, #2
 800c858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	f003 0303 	and.w	r3, r3, #3
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d003      	beq.n	800c876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fb12 	bl	800ce98 <HAL_TIM_IC_CaptureCallback>
 800c874:	e005      	b.n	800c882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 fb04 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fb15 	bl	800ceac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	f003 0304 	and.w	r3, r3, #4
 800c892:	2b04      	cmp	r3, #4
 800c894:	d122      	bne.n	800c8dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	f003 0304 	and.w	r3, r3, #4
 800c8a0:	2b04      	cmp	r3, #4
 800c8a2:	d11b      	bne.n	800c8dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f06f 0204 	mvn.w	r2, #4
 800c8ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	699b      	ldr	r3, [r3, #24]
 800c8ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fae8 	bl	800ce98 <HAL_TIM_IC_CaptureCallback>
 800c8c8:	e005      	b.n	800c8d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fada 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 faeb 	bl	800ceac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	f003 0308 	and.w	r3, r3, #8
 800c8e6:	2b08      	cmp	r3, #8
 800c8e8:	d122      	bne.n	800c930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	f003 0308 	and.w	r3, r3, #8
 800c8f4:	2b08      	cmp	r3, #8
 800c8f6:	d11b      	bne.n	800c930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f06f 0208 	mvn.w	r2, #8
 800c900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2204      	movs	r2, #4
 800c906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	f003 0303 	and.w	r3, r3, #3
 800c912:	2b00      	cmp	r3, #0
 800c914:	d003      	beq.n	800c91e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fabe 	bl	800ce98 <HAL_TIM_IC_CaptureCallback>
 800c91c:	e005      	b.n	800c92a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fab0 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 fac1 	bl	800ceac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	f003 0310 	and.w	r3, r3, #16
 800c93a:	2b10      	cmp	r3, #16
 800c93c:	d122      	bne.n	800c984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	f003 0310 	and.w	r3, r3, #16
 800c948:	2b10      	cmp	r3, #16
 800c94a:	d11b      	bne.n	800c984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f06f 0210 	mvn.w	r2, #16
 800c954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2208      	movs	r2, #8
 800c95a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	69db      	ldr	r3, [r3, #28]
 800c962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c966:	2b00      	cmp	r3, #0
 800c968:	d003      	beq.n	800c972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f000 fa94 	bl	800ce98 <HAL_TIM_IC_CaptureCallback>
 800c970:	e005      	b.n	800c97e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 fa86 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fa97 	bl	800ceac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	f003 0301 	and.w	r3, r3, #1
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d10e      	bne.n	800c9b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d107      	bne.n	800c9b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f06f 0201 	mvn.w	r2, #1
 800c9a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7f4 fb12 	bl	8000fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9ba:	2b80      	cmp	r3, #128	@ 0x80
 800c9bc:	d10e      	bne.n	800c9dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9c8:	2b80      	cmp	r3, #128	@ 0x80
 800c9ca:	d107      	bne.n	800c9dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c9d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 ffc6 	bl	800d968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9ea:	d10e      	bne.n	800ca0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9f6:	2b80      	cmp	r3, #128	@ 0x80
 800c9f8:	d107      	bne.n	800ca0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ca02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 ffb9 	bl	800d97c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca14:	2b40      	cmp	r3, #64	@ 0x40
 800ca16:	d10e      	bne.n	800ca36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca22:	2b40      	cmp	r3, #64	@ 0x40
 800ca24:	d107      	bne.n	800ca36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ca2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 fa45 	bl	800cec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	f003 0320 	and.w	r3, r3, #32
 800ca40:	2b20      	cmp	r3, #32
 800ca42:	d10e      	bne.n	800ca62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	f003 0320 	and.w	r3, r3, #32
 800ca4e:	2b20      	cmp	r3, #32
 800ca50:	d107      	bne.n	800ca62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f06f 0220 	mvn.w	r2, #32
 800ca5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 ff79 	bl	800d954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca62:	bf00      	nop
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
	...

0800ca6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b086      	sub	sp, #24
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d101      	bne.n	800ca8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ca86:	2302      	movs	r3, #2
 800ca88:	e0ff      	b.n	800cc8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b14      	cmp	r3, #20
 800ca96:	f200 80f0 	bhi.w	800cc7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca9a:	a201      	add	r2, pc, #4	@ (adr r2, 800caa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa0:	0800caf5 	.word	0x0800caf5
 800caa4:	0800cc7b 	.word	0x0800cc7b
 800caa8:	0800cc7b 	.word	0x0800cc7b
 800caac:	0800cc7b 	.word	0x0800cc7b
 800cab0:	0800cb35 	.word	0x0800cb35
 800cab4:	0800cc7b 	.word	0x0800cc7b
 800cab8:	0800cc7b 	.word	0x0800cc7b
 800cabc:	0800cc7b 	.word	0x0800cc7b
 800cac0:	0800cb77 	.word	0x0800cb77
 800cac4:	0800cc7b 	.word	0x0800cc7b
 800cac8:	0800cc7b 	.word	0x0800cc7b
 800cacc:	0800cc7b 	.word	0x0800cc7b
 800cad0:	0800cbb7 	.word	0x0800cbb7
 800cad4:	0800cc7b 	.word	0x0800cc7b
 800cad8:	0800cc7b 	.word	0x0800cc7b
 800cadc:	0800cc7b 	.word	0x0800cc7b
 800cae0:	0800cbf9 	.word	0x0800cbf9
 800cae4:	0800cc7b 	.word	0x0800cc7b
 800cae8:	0800cc7b 	.word	0x0800cc7b
 800caec:	0800cc7b 	.word	0x0800cc7b
 800caf0:	0800cc39 	.word	0x0800cc39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68b9      	ldr	r1, [r7, #8]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 fa84 	bl	800d008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	699a      	ldr	r2, [r3, #24]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f042 0208 	orr.w	r2, r2, #8
 800cb0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	699a      	ldr	r2, [r3, #24]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f022 0204 	bic.w	r2, r2, #4
 800cb1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6999      	ldr	r1, [r3, #24]
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	691a      	ldr	r2, [r3, #16]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	430a      	orrs	r2, r1
 800cb30:	619a      	str	r2, [r3, #24]
      break;
 800cb32:	e0a5      	b.n	800cc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68b9      	ldr	r1, [r7, #8]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 faf4 	bl	800d128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	699a      	ldr	r2, [r3, #24]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	699a      	ldr	r2, [r3, #24]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6999      	ldr	r1, [r3, #24]
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	021a      	lsls	r2, r3, #8
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	430a      	orrs	r2, r1
 800cb72:	619a      	str	r2, [r3, #24]
      break;
 800cb74:	e084      	b.n	800cc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68b9      	ldr	r1, [r7, #8]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f000 fb5d 	bl	800d23c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	69da      	ldr	r2, [r3, #28]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f042 0208 	orr.w	r2, r2, #8
 800cb90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	69da      	ldr	r2, [r3, #28]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f022 0204 	bic.w	r2, r2, #4
 800cba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	69d9      	ldr	r1, [r3, #28]
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	691a      	ldr	r2, [r3, #16]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	430a      	orrs	r2, r1
 800cbb2:	61da      	str	r2, [r3, #28]
      break;
 800cbb4:	e064      	b.n	800cc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	68b9      	ldr	r1, [r7, #8]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f000 fbc5 	bl	800d34c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	69da      	ldr	r2, [r3, #28]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cbd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	69da      	ldr	r2, [r3, #28]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cbe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	69d9      	ldr	r1, [r3, #28]
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	021a      	lsls	r2, r3, #8
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	430a      	orrs	r2, r1
 800cbf4:	61da      	str	r2, [r3, #28]
      break;
 800cbf6:	e043      	b.n	800cc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68b9      	ldr	r1, [r7, #8]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 fc0e 	bl	800d420 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f042 0208 	orr.w	r2, r2, #8
 800cc12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f022 0204 	bic.w	r2, r2, #4
 800cc22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	691a      	ldr	r2, [r3, #16]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	430a      	orrs	r2, r1
 800cc34:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cc36:	e023      	b.n	800cc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	68b9      	ldr	r1, [r7, #8]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 fc52 	bl	800d4e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cc52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	021a      	lsls	r2, r3, #8
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	430a      	orrs	r2, r1
 800cc76:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cc78:	e002      	b.n	800cc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	75fb      	strb	r3, [r7, #23]
      break;
 800cc7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop

0800cc94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d101      	bne.n	800ccb0 <HAL_TIM_ConfigClockSource+0x1c>
 800ccac:	2302      	movs	r3, #2
 800ccae:	e0dc      	b.n	800ce6a <HAL_TIM_ConfigClockSource+0x1d6>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2202      	movs	r2, #2
 800ccbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	4b6a      	ldr	r3, [pc, #424]	@ (800ce74 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cccc:	4013      	ands	r3, r2
 800ccce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a64      	ldr	r2, [pc, #400]	@ (800ce78 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	f000 80a9 	beq.w	800ce3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ccec:	4a62      	ldr	r2, [pc, #392]	@ (800ce78 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	f200 80ae 	bhi.w	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccf4:	4a61      	ldr	r2, [pc, #388]	@ (800ce7c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	f000 80a1 	beq.w	800ce3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ccfc:	4a5f      	ldr	r2, [pc, #380]	@ (800ce7c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	f200 80a6 	bhi.w	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd04:	4a5e      	ldr	r2, [pc, #376]	@ (800ce80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	f000 8099 	beq.w	800ce3e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd0c:	4a5c      	ldr	r2, [pc, #368]	@ (800ce80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	f200 809e 	bhi.w	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cd18:	f000 8091 	beq.w	800ce3e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cd20:	f200 8096 	bhi.w	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd28:	f000 8089 	beq.w	800ce3e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd30:	f200 808e 	bhi.w	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd38:	d03e      	beq.n	800cdb8 <HAL_TIM_ConfigClockSource+0x124>
 800cd3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd3e:	f200 8087 	bhi.w	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd46:	f000 8086 	beq.w	800ce56 <HAL_TIM_ConfigClockSource+0x1c2>
 800cd4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd4e:	d87f      	bhi.n	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd50:	2b70      	cmp	r3, #112	@ 0x70
 800cd52:	d01a      	beq.n	800cd8a <HAL_TIM_ConfigClockSource+0xf6>
 800cd54:	2b70      	cmp	r3, #112	@ 0x70
 800cd56:	d87b      	bhi.n	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd58:	2b60      	cmp	r3, #96	@ 0x60
 800cd5a:	d050      	beq.n	800cdfe <HAL_TIM_ConfigClockSource+0x16a>
 800cd5c:	2b60      	cmp	r3, #96	@ 0x60
 800cd5e:	d877      	bhi.n	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd60:	2b50      	cmp	r3, #80	@ 0x50
 800cd62:	d03c      	beq.n	800cdde <HAL_TIM_ConfigClockSource+0x14a>
 800cd64:	2b50      	cmp	r3, #80	@ 0x50
 800cd66:	d873      	bhi.n	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd68:	2b40      	cmp	r3, #64	@ 0x40
 800cd6a:	d058      	beq.n	800ce1e <HAL_TIM_ConfigClockSource+0x18a>
 800cd6c:	2b40      	cmp	r3, #64	@ 0x40
 800cd6e:	d86f      	bhi.n	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd70:	2b30      	cmp	r3, #48	@ 0x30
 800cd72:	d064      	beq.n	800ce3e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd74:	2b30      	cmp	r3, #48	@ 0x30
 800cd76:	d86b      	bhi.n	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd78:	2b20      	cmp	r3, #32
 800cd7a:	d060      	beq.n	800ce3e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd7c:	2b20      	cmp	r3, #32
 800cd7e:	d867      	bhi.n	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d05c      	beq.n	800ce3e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd84:	2b10      	cmp	r3, #16
 800cd86:	d05a      	beq.n	800ce3e <HAL_TIM_ConfigClockSource+0x1aa>
 800cd88:	e062      	b.n	800ce50 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd9a:	f000 fc89 	bl	800d6b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cdac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	609a      	str	r2, [r3, #8]
      break;
 800cdb6:	e04f      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cdc8:	f000 fc72 	bl	800d6b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	689a      	ldr	r2, [r3, #8]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cdda:	609a      	str	r2, [r3, #8]
      break;
 800cddc:	e03c      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdea:	461a      	mov	r2, r3
 800cdec:	f000 fbe2 	bl	800d5b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2150      	movs	r1, #80	@ 0x50
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 fc3c 	bl	800d674 <TIM_ITRx_SetConfig>
      break;
 800cdfc:	e02c      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	f000 fc01 	bl	800d612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2160      	movs	r1, #96	@ 0x60
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 fc2c 	bl	800d674 <TIM_ITRx_SetConfig>
      break;
 800ce1c:	e01c      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	f000 fbc2 	bl	800d5b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2140      	movs	r1, #64	@ 0x40
 800ce36:	4618      	mov	r0, r3
 800ce38:	f000 fc1c 	bl	800d674 <TIM_ITRx_SetConfig>
      break;
 800ce3c:	e00c      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4619      	mov	r1, r3
 800ce48:	4610      	mov	r0, r2
 800ce4a:	f000 fc13 	bl	800d674 <TIM_ITRx_SetConfig>
      break;
 800ce4e:	e003      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ce50:	2301      	movs	r3, #1
 800ce52:	73fb      	strb	r3, [r7, #15]
      break;
 800ce54:	e000      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ce56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	ffceff88 	.word	0xffceff88
 800ce78:	00100040 	.word	0x00100040
 800ce7c:	00100030 	.word	0x00100030
 800ce80:	00100020 	.word	0x00100020

0800ce84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	4a40      	ldr	r2, [pc, #256]	@ (800cfe8 <TIM_Base_SetConfig+0x114>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d013      	beq.n	800cf14 <TIM_Base_SetConfig+0x40>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cef2:	d00f      	beq.n	800cf14 <TIM_Base_SetConfig+0x40>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4a3d      	ldr	r2, [pc, #244]	@ (800cfec <TIM_Base_SetConfig+0x118>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d00b      	beq.n	800cf14 <TIM_Base_SetConfig+0x40>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	4a3c      	ldr	r2, [pc, #240]	@ (800cff0 <TIM_Base_SetConfig+0x11c>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d007      	beq.n	800cf14 <TIM_Base_SetConfig+0x40>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a3b      	ldr	r2, [pc, #236]	@ (800cff4 <TIM_Base_SetConfig+0x120>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d003      	beq.n	800cf14 <TIM_Base_SetConfig+0x40>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4a3a      	ldr	r2, [pc, #232]	@ (800cff8 <TIM_Base_SetConfig+0x124>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d108      	bne.n	800cf26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4a2f      	ldr	r2, [pc, #188]	@ (800cfe8 <TIM_Base_SetConfig+0x114>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d01f      	beq.n	800cf6e <TIM_Base_SetConfig+0x9a>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf34:	d01b      	beq.n	800cf6e <TIM_Base_SetConfig+0x9a>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4a2c      	ldr	r2, [pc, #176]	@ (800cfec <TIM_Base_SetConfig+0x118>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d017      	beq.n	800cf6e <TIM_Base_SetConfig+0x9a>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4a2b      	ldr	r2, [pc, #172]	@ (800cff0 <TIM_Base_SetConfig+0x11c>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d013      	beq.n	800cf6e <TIM_Base_SetConfig+0x9a>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4a2a      	ldr	r2, [pc, #168]	@ (800cff4 <TIM_Base_SetConfig+0x120>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d00f      	beq.n	800cf6e <TIM_Base_SetConfig+0x9a>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a29      	ldr	r2, [pc, #164]	@ (800cff8 <TIM_Base_SetConfig+0x124>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d00b      	beq.n	800cf6e <TIM_Base_SetConfig+0x9a>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a28      	ldr	r2, [pc, #160]	@ (800cffc <TIM_Base_SetConfig+0x128>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d007      	beq.n	800cf6e <TIM_Base_SetConfig+0x9a>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a27      	ldr	r2, [pc, #156]	@ (800d000 <TIM_Base_SetConfig+0x12c>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d003      	beq.n	800cf6e <TIM_Base_SetConfig+0x9a>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a26      	ldr	r2, [pc, #152]	@ (800d004 <TIM_Base_SetConfig+0x130>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d108      	bne.n	800cf80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	689a      	ldr	r2, [r3, #8]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4a10      	ldr	r2, [pc, #64]	@ (800cfe8 <TIM_Base_SetConfig+0x114>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d00f      	beq.n	800cfcc <TIM_Base_SetConfig+0xf8>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4a12      	ldr	r2, [pc, #72]	@ (800cff8 <TIM_Base_SetConfig+0x124>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d00b      	beq.n	800cfcc <TIM_Base_SetConfig+0xf8>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	4a11      	ldr	r2, [pc, #68]	@ (800cffc <TIM_Base_SetConfig+0x128>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d007      	beq.n	800cfcc <TIM_Base_SetConfig+0xf8>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4a10      	ldr	r2, [pc, #64]	@ (800d000 <TIM_Base_SetConfig+0x12c>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d003      	beq.n	800cfcc <TIM_Base_SetConfig+0xf8>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	4a0f      	ldr	r2, [pc, #60]	@ (800d004 <TIM_Base_SetConfig+0x130>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d103      	bne.n	800cfd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	691a      	ldr	r2, [r3, #16]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	615a      	str	r2, [r3, #20]
}
 800cfda:	bf00      	nop
 800cfdc:	3714      	adds	r7, #20
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	40010000 	.word	0x40010000
 800cfec:	40000400 	.word	0x40000400
 800cff0:	40000800 	.word	0x40000800
 800cff4:	40000c00 	.word	0x40000c00
 800cff8:	40010400 	.word	0x40010400
 800cffc:	40014000 	.word	0x40014000
 800d000:	40014400 	.word	0x40014400
 800d004:	40014800 	.word	0x40014800

0800d008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d008:	b480      	push	{r7}
 800d00a:	b087      	sub	sp, #28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a1b      	ldr	r3, [r3, #32]
 800d016:	f023 0201 	bic.w	r2, r3, #1
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6a1b      	ldr	r3, [r3, #32]
 800d022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	4b37      	ldr	r3, [pc, #220]	@ (800d110 <TIM_OC1_SetConfig+0x108>)
 800d034:	4013      	ands	r3, r2
 800d036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f023 0303 	bic.w	r3, r3, #3
 800d03e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	4313      	orrs	r3, r2
 800d048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	f023 0302 	bic.w	r3, r3, #2
 800d050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	4313      	orrs	r3, r2
 800d05a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a2d      	ldr	r2, [pc, #180]	@ (800d114 <TIM_OC1_SetConfig+0x10c>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d00f      	beq.n	800d084 <TIM_OC1_SetConfig+0x7c>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4a2c      	ldr	r2, [pc, #176]	@ (800d118 <TIM_OC1_SetConfig+0x110>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d00b      	beq.n	800d084 <TIM_OC1_SetConfig+0x7c>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4a2b      	ldr	r2, [pc, #172]	@ (800d11c <TIM_OC1_SetConfig+0x114>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d007      	beq.n	800d084 <TIM_OC1_SetConfig+0x7c>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	4a2a      	ldr	r2, [pc, #168]	@ (800d120 <TIM_OC1_SetConfig+0x118>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d003      	beq.n	800d084 <TIM_OC1_SetConfig+0x7c>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4a29      	ldr	r2, [pc, #164]	@ (800d124 <TIM_OC1_SetConfig+0x11c>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d10c      	bne.n	800d09e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	f023 0308 	bic.w	r3, r3, #8
 800d08a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	4313      	orrs	r3, r2
 800d094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	f023 0304 	bic.w	r3, r3, #4
 800d09c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4a1c      	ldr	r2, [pc, #112]	@ (800d114 <TIM_OC1_SetConfig+0x10c>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d00f      	beq.n	800d0c6 <TIM_OC1_SetConfig+0xbe>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4a1b      	ldr	r2, [pc, #108]	@ (800d118 <TIM_OC1_SetConfig+0x110>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d00b      	beq.n	800d0c6 <TIM_OC1_SetConfig+0xbe>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4a1a      	ldr	r2, [pc, #104]	@ (800d11c <TIM_OC1_SetConfig+0x114>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d007      	beq.n	800d0c6 <TIM_OC1_SetConfig+0xbe>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	4a19      	ldr	r2, [pc, #100]	@ (800d120 <TIM_OC1_SetConfig+0x118>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d003      	beq.n	800d0c6 <TIM_OC1_SetConfig+0xbe>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a18      	ldr	r2, [pc, #96]	@ (800d124 <TIM_OC1_SetConfig+0x11c>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d111      	bne.n	800d0ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d0d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	695b      	ldr	r3, [r3, #20]
 800d0da:	693a      	ldr	r2, [r7, #16]
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	699b      	ldr	r3, [r3, #24]
 800d0e4:	693a      	ldr	r2, [r7, #16]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	693a      	ldr	r2, [r7, #16]
 800d0ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	697a      	ldr	r2, [r7, #20]
 800d102:	621a      	str	r2, [r3, #32]
}
 800d104:	bf00      	nop
 800d106:	371c      	adds	r7, #28
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	fffeff8f 	.word	0xfffeff8f
 800d114:	40010000 	.word	0x40010000
 800d118:	40010400 	.word	0x40010400
 800d11c:	40014000 	.word	0x40014000
 800d120:	40014400 	.word	0x40014400
 800d124:	40014800 	.word	0x40014800

0800d128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d128:	b480      	push	{r7}
 800d12a:	b087      	sub	sp, #28
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	f023 0210 	bic.w	r2, r3, #16
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4b34      	ldr	r3, [pc, #208]	@ (800d224 <TIM_OC2_SetConfig+0xfc>)
 800d154:	4013      	ands	r3, r2
 800d156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d15e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	021b      	lsls	r3, r3, #8
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	4313      	orrs	r3, r2
 800d16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	f023 0320 	bic.w	r3, r3, #32
 800d172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	011b      	lsls	r3, r3, #4
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a29      	ldr	r2, [pc, #164]	@ (800d228 <TIM_OC2_SetConfig+0x100>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d003      	beq.n	800d190 <TIM_OC2_SetConfig+0x68>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a28      	ldr	r2, [pc, #160]	@ (800d22c <TIM_OC2_SetConfig+0x104>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d10d      	bne.n	800d1ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	011b      	lsls	r3, r3, #4
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a1e      	ldr	r2, [pc, #120]	@ (800d228 <TIM_OC2_SetConfig+0x100>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d00f      	beq.n	800d1d4 <TIM_OC2_SetConfig+0xac>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a1d      	ldr	r2, [pc, #116]	@ (800d22c <TIM_OC2_SetConfig+0x104>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d00b      	beq.n	800d1d4 <TIM_OC2_SetConfig+0xac>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a1c      	ldr	r2, [pc, #112]	@ (800d230 <TIM_OC2_SetConfig+0x108>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d007      	beq.n	800d1d4 <TIM_OC2_SetConfig+0xac>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a1b      	ldr	r2, [pc, #108]	@ (800d234 <TIM_OC2_SetConfig+0x10c>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d003      	beq.n	800d1d4 <TIM_OC2_SetConfig+0xac>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a1a      	ldr	r2, [pc, #104]	@ (800d238 <TIM_OC2_SetConfig+0x110>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d113      	bne.n	800d1fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d1da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d1e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	695b      	ldr	r3, [r3, #20]
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	693a      	ldr	r2, [r7, #16]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	699b      	ldr	r3, [r3, #24]
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	693a      	ldr	r2, [r7, #16]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	697a      	ldr	r2, [r7, #20]
 800d214:	621a      	str	r2, [r3, #32]
}
 800d216:	bf00      	nop
 800d218:	371c      	adds	r7, #28
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	feff8fff 	.word	0xfeff8fff
 800d228:	40010000 	.word	0x40010000
 800d22c:	40010400 	.word	0x40010400
 800d230:	40014000 	.word	0x40014000
 800d234:	40014400 	.word	0x40014400
 800d238:	40014800 	.word	0x40014800

0800d23c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b087      	sub	sp, #28
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a1b      	ldr	r3, [r3, #32]
 800d24a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a1b      	ldr	r3, [r3, #32]
 800d256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	69db      	ldr	r3, [r3, #28]
 800d262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	4b33      	ldr	r3, [pc, #204]	@ (800d334 <TIM_OC3_SetConfig+0xf8>)
 800d268:	4013      	ands	r3, r2
 800d26a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f023 0303 	bic.w	r3, r3, #3
 800d272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	021b      	lsls	r3, r3, #8
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	4313      	orrs	r3, r2
 800d290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4a28      	ldr	r2, [pc, #160]	@ (800d338 <TIM_OC3_SetConfig+0xfc>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d003      	beq.n	800d2a2 <TIM_OC3_SetConfig+0x66>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a27      	ldr	r2, [pc, #156]	@ (800d33c <TIM_OC3_SetConfig+0x100>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d10d      	bne.n	800d2be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d2a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	021b      	lsls	r3, r3, #8
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d2bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d338 <TIM_OC3_SetConfig+0xfc>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d00f      	beq.n	800d2e6 <TIM_OC3_SetConfig+0xaa>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a1c      	ldr	r2, [pc, #112]	@ (800d33c <TIM_OC3_SetConfig+0x100>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d00b      	beq.n	800d2e6 <TIM_OC3_SetConfig+0xaa>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4a1b      	ldr	r2, [pc, #108]	@ (800d340 <TIM_OC3_SetConfig+0x104>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d007      	beq.n	800d2e6 <TIM_OC3_SetConfig+0xaa>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a1a      	ldr	r2, [pc, #104]	@ (800d344 <TIM_OC3_SetConfig+0x108>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d003      	beq.n	800d2e6 <TIM_OC3_SetConfig+0xaa>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a19      	ldr	r2, [pc, #100]	@ (800d348 <TIM_OC3_SetConfig+0x10c>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d113      	bne.n	800d30e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d2ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d2f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	011b      	lsls	r3, r3, #4
 800d2fc:	693a      	ldr	r2, [r7, #16]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	011b      	lsls	r3, r3, #4
 800d308:	693a      	ldr	r2, [r7, #16]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	693a      	ldr	r2, [r7, #16]
 800d312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	685a      	ldr	r2, [r3, #4]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	621a      	str	r2, [r3, #32]
}
 800d328:	bf00      	nop
 800d32a:	371c      	adds	r7, #28
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	fffeff8f 	.word	0xfffeff8f
 800d338:	40010000 	.word	0x40010000
 800d33c:	40010400 	.word	0x40010400
 800d340:	40014000 	.word	0x40014000
 800d344:	40014400 	.word	0x40014400
 800d348:	40014800 	.word	0x40014800

0800d34c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b087      	sub	sp, #28
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	4b24      	ldr	r3, [pc, #144]	@ (800d408 <TIM_OC4_SetConfig+0xbc>)
 800d378:	4013      	ands	r3, r2
 800d37a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	021b      	lsls	r3, r3, #8
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	4313      	orrs	r3, r2
 800d38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	031b      	lsls	r3, r3, #12
 800d39e:	693a      	ldr	r2, [r7, #16]
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a19      	ldr	r2, [pc, #100]	@ (800d40c <TIM_OC4_SetConfig+0xc0>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d00f      	beq.n	800d3cc <TIM_OC4_SetConfig+0x80>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4a18      	ldr	r2, [pc, #96]	@ (800d410 <TIM_OC4_SetConfig+0xc4>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d00b      	beq.n	800d3cc <TIM_OC4_SetConfig+0x80>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	4a17      	ldr	r2, [pc, #92]	@ (800d414 <TIM_OC4_SetConfig+0xc8>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d007      	beq.n	800d3cc <TIM_OC4_SetConfig+0x80>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	4a16      	ldr	r2, [pc, #88]	@ (800d418 <TIM_OC4_SetConfig+0xcc>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d003      	beq.n	800d3cc <TIM_OC4_SetConfig+0x80>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4a15      	ldr	r2, [pc, #84]	@ (800d41c <TIM_OC4_SetConfig+0xd0>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d109      	bne.n	800d3e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	695b      	ldr	r3, [r3, #20]
 800d3d8:	019b      	lsls	r3, r3, #6
 800d3da:	697a      	ldr	r2, [r7, #20]
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	697a      	ldr	r2, [r7, #20]
 800d3e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	685a      	ldr	r2, [r3, #4]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	621a      	str	r2, [r3, #32]
}
 800d3fa:	bf00      	nop
 800d3fc:	371c      	adds	r7, #28
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	feff8fff 	.word	0xfeff8fff
 800d40c:	40010000 	.word	0x40010000
 800d410:	40010400 	.word	0x40010400
 800d414:	40014000 	.word	0x40014000
 800d418:	40014400 	.word	0x40014400
 800d41c:	40014800 	.word	0x40014800

0800d420 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d420:	b480      	push	{r7}
 800d422:	b087      	sub	sp, #28
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a1b      	ldr	r3, [r3, #32]
 800d42e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a1b      	ldr	r3, [r3, #32]
 800d43a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	4b21      	ldr	r3, [pc, #132]	@ (800d4d0 <TIM_OC5_SetConfig+0xb0>)
 800d44c:	4013      	ands	r3, r2
 800d44e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	4313      	orrs	r3, r2
 800d458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d460:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	041b      	lsls	r3, r3, #16
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a18      	ldr	r2, [pc, #96]	@ (800d4d4 <TIM_OC5_SetConfig+0xb4>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d00f      	beq.n	800d496 <TIM_OC5_SetConfig+0x76>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a17      	ldr	r2, [pc, #92]	@ (800d4d8 <TIM_OC5_SetConfig+0xb8>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d00b      	beq.n	800d496 <TIM_OC5_SetConfig+0x76>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a16      	ldr	r2, [pc, #88]	@ (800d4dc <TIM_OC5_SetConfig+0xbc>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d007      	beq.n	800d496 <TIM_OC5_SetConfig+0x76>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a15      	ldr	r2, [pc, #84]	@ (800d4e0 <TIM_OC5_SetConfig+0xc0>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d003      	beq.n	800d496 <TIM_OC5_SetConfig+0x76>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a14      	ldr	r2, [pc, #80]	@ (800d4e4 <TIM_OC5_SetConfig+0xc4>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d109      	bne.n	800d4aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d49c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	695b      	ldr	r3, [r3, #20]
 800d4a2:	021b      	lsls	r3, r3, #8
 800d4a4:	697a      	ldr	r2, [r7, #20]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	697a      	ldr	r2, [r7, #20]
 800d4ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	685a      	ldr	r2, [r3, #4]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	621a      	str	r2, [r3, #32]
}
 800d4c4:	bf00      	nop
 800d4c6:	371c      	adds	r7, #28
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr
 800d4d0:	fffeff8f 	.word	0xfffeff8f
 800d4d4:	40010000 	.word	0x40010000
 800d4d8:	40010400 	.word	0x40010400
 800d4dc:	40014000 	.word	0x40014000
 800d4e0:	40014400 	.word	0x40014400
 800d4e4:	40014800 	.word	0x40014800

0800d4e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b087      	sub	sp, #28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6a1b      	ldr	r3, [r3, #32]
 800d502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	4b22      	ldr	r3, [pc, #136]	@ (800d59c <TIM_OC6_SetConfig+0xb4>)
 800d514:	4013      	ands	r3, r2
 800d516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	021b      	lsls	r3, r3, #8
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	4313      	orrs	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d52a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	051b      	lsls	r3, r3, #20
 800d532:	693a      	ldr	r2, [r7, #16]
 800d534:	4313      	orrs	r3, r2
 800d536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	4a19      	ldr	r2, [pc, #100]	@ (800d5a0 <TIM_OC6_SetConfig+0xb8>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d00f      	beq.n	800d560 <TIM_OC6_SetConfig+0x78>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a18      	ldr	r2, [pc, #96]	@ (800d5a4 <TIM_OC6_SetConfig+0xbc>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d00b      	beq.n	800d560 <TIM_OC6_SetConfig+0x78>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4a17      	ldr	r2, [pc, #92]	@ (800d5a8 <TIM_OC6_SetConfig+0xc0>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d007      	beq.n	800d560 <TIM_OC6_SetConfig+0x78>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a16      	ldr	r2, [pc, #88]	@ (800d5ac <TIM_OC6_SetConfig+0xc4>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d003      	beq.n	800d560 <TIM_OC6_SetConfig+0x78>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a15      	ldr	r2, [pc, #84]	@ (800d5b0 <TIM_OC6_SetConfig+0xc8>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d109      	bne.n	800d574 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	695b      	ldr	r3, [r3, #20]
 800d56c:	029b      	lsls	r3, r3, #10
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	4313      	orrs	r3, r2
 800d572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	697a      	ldr	r2, [r7, #20]
 800d578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	693a      	ldr	r2, [r7, #16]
 800d58c:	621a      	str	r2, [r3, #32]
}
 800d58e:	bf00      	nop
 800d590:	371c      	adds	r7, #28
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	feff8fff 	.word	0xfeff8fff
 800d5a0:	40010000 	.word	0x40010000
 800d5a4:	40010400 	.word	0x40010400
 800d5a8:	40014000 	.word	0x40014000
 800d5ac:	40014400 	.word	0x40014400
 800d5b0:	40014800 	.word	0x40014800

0800d5b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b087      	sub	sp, #28
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6a1b      	ldr	r3, [r3, #32]
 800d5c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	f023 0201 	bic.w	r2, r3, #1
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	699b      	ldr	r3, [r3, #24]
 800d5d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d5de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	011b      	lsls	r3, r3, #4
 800d5e4:	693a      	ldr	r2, [r7, #16]
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	f023 030a 	bic.w	r3, r3, #10
 800d5f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d5f2:	697a      	ldr	r2, [r7, #20]
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	693a      	ldr	r2, [r7, #16]
 800d5fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	697a      	ldr	r2, [r7, #20]
 800d604:	621a      	str	r2, [r3, #32]
}
 800d606:	bf00      	nop
 800d608:	371c      	adds	r7, #28
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d612:	b480      	push	{r7}
 800d614:	b087      	sub	sp, #28
 800d616:	af00      	add	r7, sp, #0
 800d618:	60f8      	str	r0, [r7, #12]
 800d61a:	60b9      	str	r1, [r7, #8]
 800d61c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6a1b      	ldr	r3, [r3, #32]
 800d622:	f023 0210 	bic.w	r2, r3, #16
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	699b      	ldr	r3, [r3, #24]
 800d62e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6a1b      	ldr	r3, [r3, #32]
 800d634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d63c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	031b      	lsls	r3, r3, #12
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	4313      	orrs	r3, r2
 800d646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d64e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	011b      	lsls	r3, r3, #4
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	4313      	orrs	r3, r2
 800d658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	693a      	ldr	r2, [r7, #16]
 800d664:	621a      	str	r2, [r3, #32]
}
 800d666:	bf00      	nop
 800d668:	371c      	adds	r7, #28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
	...

0800d674 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	4b09      	ldr	r3, [pc, #36]	@ (800d6ac <TIM_ITRx_SetConfig+0x38>)
 800d688:	4013      	ands	r3, r2
 800d68a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d68c:	683a      	ldr	r2, [r7, #0]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	4313      	orrs	r3, r2
 800d692:	f043 0307 	orr.w	r3, r3, #7
 800d696:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	609a      	str	r2, [r3, #8]
}
 800d69e:	bf00      	nop
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	ffcfff8f 	.word	0xffcfff8f

0800d6b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b087      	sub	sp, #28
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
 800d6bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d6ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	021a      	lsls	r2, r3, #8
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	431a      	orrs	r2, r3
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	697a      	ldr	r2, [r7, #20]
 800d6e2:	609a      	str	r2, [r3, #8]
}
 800d6e4:	bf00      	nop
 800d6e6:	371c      	adds	r7, #28
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b087      	sub	sp, #28
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	f003 031f 	and.w	r3, r3, #31
 800d702:	2201      	movs	r2, #1
 800d704:	fa02 f303 	lsl.w	r3, r2, r3
 800d708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6a1a      	ldr	r2, [r3, #32]
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	43db      	mvns	r3, r3
 800d712:	401a      	ands	r2, r3
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	6a1a      	ldr	r2, [r3, #32]
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	f003 031f 	and.w	r3, r3, #31
 800d722:	6879      	ldr	r1, [r7, #4]
 800d724:	fa01 f303 	lsl.w	r3, r1, r3
 800d728:	431a      	orrs	r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	621a      	str	r2, [r3, #32]
}
 800d72e:	bf00      	nop
 800d730:	371c      	adds	r7, #28
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr
	...

0800d73c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d101      	bne.n	800d754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d750:	2302      	movs	r3, #2
 800d752:	e06d      	b.n	800d830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2202      	movs	r2, #2
 800d760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a30      	ldr	r2, [pc, #192]	@ (800d83c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d004      	beq.n	800d788 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a2f      	ldr	r2, [pc, #188]	@ (800d840 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d108      	bne.n	800d79a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d78e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	4313      	orrs	r3, r2
 800d798:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a20      	ldr	r2, [pc, #128]	@ (800d83c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d022      	beq.n	800d804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7c6:	d01d      	beq.n	800d804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4a1d      	ldr	r2, [pc, #116]	@ (800d844 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d018      	beq.n	800d804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a1c      	ldr	r2, [pc, #112]	@ (800d848 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d013      	beq.n	800d804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a1a      	ldr	r2, [pc, #104]	@ (800d84c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d00e      	beq.n	800d804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a15      	ldr	r2, [pc, #84]	@ (800d840 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d009      	beq.n	800d804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a16      	ldr	r2, [pc, #88]	@ (800d850 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d004      	beq.n	800d804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4a15      	ldr	r2, [pc, #84]	@ (800d854 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d800:	4293      	cmp	r3, r2
 800d802:	d10c      	bne.n	800d81e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d80a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	68ba      	ldr	r2, [r7, #8]
 800d812:	4313      	orrs	r3, r2
 800d814:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3714      	adds	r7, #20
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr
 800d83c:	40010000 	.word	0x40010000
 800d840:	40010400 	.word	0x40010400
 800d844:	40000400 	.word	0x40000400
 800d848:	40000800 	.word	0x40000800
 800d84c:	40000c00 	.word	0x40000c00
 800d850:	40001800 	.word	0x40001800
 800d854:	40014000 	.word	0x40014000

0800d858 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d862:	2300      	movs	r3, #0
 800d864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d101      	bne.n	800d874 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d870:	2302      	movs	r3, #2
 800d872:	e065      	b.n	800d940 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2201      	movs	r2, #1
 800d878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	4313      	orrs	r3, r2
 800d888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	4313      	orrs	r3, r2
 800d896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	695b      	ldr	r3, [r3, #20]
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	699b      	ldr	r3, [r3, #24]
 800d8e8:	041b      	lsls	r3, r3, #16
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a16      	ldr	r2, [pc, #88]	@ (800d94c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d004      	beq.n	800d902 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a14      	ldr	r2, [pc, #80]	@ (800d950 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d115      	bne.n	800d92e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d90c:	051b      	lsls	r3, r3, #20
 800d90e:	4313      	orrs	r3, r2
 800d910:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	69db      	ldr	r3, [r3, #28]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	6a1b      	ldr	r3, [r3, #32]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2200      	movs	r2, #0
 800d93a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3714      	adds	r7, #20
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	40010000 	.word	0x40010000
 800d950:	40010400 	.word	0x40010400

0800d954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d95c:	bf00      	nop
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d970:	bf00      	nop
 800d972:	370c      	adds	r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d984:	bf00      	nop
 800d986:	370c      	adds	r7, #12
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d990:	b084      	sub	sp, #16
 800d992:	b580      	push	{r7, lr}
 800d994:	b084      	sub	sp, #16
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
 800d99a:	f107 001c 	add.w	r0, r7, #28
 800d99e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d120      	bne.n	800d9ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	68da      	ldr	r2, [r3, #12]
 800d9b8:	4b2a      	ldr	r3, [pc, #168]	@ (800da64 <USB_CoreInit+0xd4>)
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d9cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d105      	bne.n	800d9de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f001 faf8 	bl	800efd4 <USB_CoreReset>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	73fb      	strb	r3, [r7, #15]
 800d9e8:	e01a      	b.n	800da20 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f001 faec 	bl	800efd4 <USB_CoreReset>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800da00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da02:	2b00      	cmp	r3, #0
 800da04:	d106      	bne.n	800da14 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da0a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	639a      	str	r2, [r3, #56]	@ 0x38
 800da12:	e005      	b.n	800da20 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800da20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da22:	2b01      	cmp	r3, #1
 800da24:	d116      	bne.n	800da54 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800da34:	4b0c      	ldr	r3, [pc, #48]	@ (800da68 <USB_CoreInit+0xd8>)
 800da36:	4313      	orrs	r3, r2
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	f043 0206 	orr.w	r2, r3, #6
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	f043 0220 	orr.w	r2, r3, #32
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800da54:	7bfb      	ldrb	r3, [r7, #15]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da60:	b004      	add	sp, #16
 800da62:	4770      	bx	lr
 800da64:	ffbdffbf 	.word	0xffbdffbf
 800da68:	03ee0000 	.word	0x03ee0000

0800da6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b087      	sub	sp, #28
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	4613      	mov	r3, r2
 800da78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d165      	bne.n	800db4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	4a41      	ldr	r2, [pc, #260]	@ (800db88 <USB_SetTurnaroundTime+0x11c>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d906      	bls.n	800da96 <USB_SetTurnaroundTime+0x2a>
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	4a40      	ldr	r2, [pc, #256]	@ (800db8c <USB_SetTurnaroundTime+0x120>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d202      	bcs.n	800da96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800da90:	230f      	movs	r3, #15
 800da92:	617b      	str	r3, [r7, #20]
 800da94:	e062      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	4a3c      	ldr	r2, [pc, #240]	@ (800db8c <USB_SetTurnaroundTime+0x120>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d306      	bcc.n	800daac <USB_SetTurnaroundTime+0x40>
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	4a3b      	ldr	r2, [pc, #236]	@ (800db90 <USB_SetTurnaroundTime+0x124>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d202      	bcs.n	800daac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800daa6:	230e      	movs	r3, #14
 800daa8:	617b      	str	r3, [r7, #20]
 800daaa:	e057      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	4a38      	ldr	r2, [pc, #224]	@ (800db90 <USB_SetTurnaroundTime+0x124>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d306      	bcc.n	800dac2 <USB_SetTurnaroundTime+0x56>
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	4a37      	ldr	r2, [pc, #220]	@ (800db94 <USB_SetTurnaroundTime+0x128>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d202      	bcs.n	800dac2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dabc:	230d      	movs	r3, #13
 800dabe:	617b      	str	r3, [r7, #20]
 800dac0:	e04c      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	4a33      	ldr	r2, [pc, #204]	@ (800db94 <USB_SetTurnaroundTime+0x128>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d306      	bcc.n	800dad8 <USB_SetTurnaroundTime+0x6c>
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	4a32      	ldr	r2, [pc, #200]	@ (800db98 <USB_SetTurnaroundTime+0x12c>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d802      	bhi.n	800dad8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dad2:	230c      	movs	r3, #12
 800dad4:	617b      	str	r3, [r7, #20]
 800dad6:	e041      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	4a2f      	ldr	r2, [pc, #188]	@ (800db98 <USB_SetTurnaroundTime+0x12c>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d906      	bls.n	800daee <USB_SetTurnaroundTime+0x82>
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	4a2e      	ldr	r2, [pc, #184]	@ (800db9c <USB_SetTurnaroundTime+0x130>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d802      	bhi.n	800daee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dae8:	230b      	movs	r3, #11
 800daea:	617b      	str	r3, [r7, #20]
 800daec:	e036      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	4a2a      	ldr	r2, [pc, #168]	@ (800db9c <USB_SetTurnaroundTime+0x130>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d906      	bls.n	800db04 <USB_SetTurnaroundTime+0x98>
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	4a29      	ldr	r2, [pc, #164]	@ (800dba0 <USB_SetTurnaroundTime+0x134>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d802      	bhi.n	800db04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dafe:	230a      	movs	r3, #10
 800db00:	617b      	str	r3, [r7, #20]
 800db02:	e02b      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	4a26      	ldr	r2, [pc, #152]	@ (800dba0 <USB_SetTurnaroundTime+0x134>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d906      	bls.n	800db1a <USB_SetTurnaroundTime+0xae>
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	4a25      	ldr	r2, [pc, #148]	@ (800dba4 <USB_SetTurnaroundTime+0x138>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d202      	bcs.n	800db1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800db14:	2309      	movs	r3, #9
 800db16:	617b      	str	r3, [r7, #20]
 800db18:	e020      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	4a21      	ldr	r2, [pc, #132]	@ (800dba4 <USB_SetTurnaroundTime+0x138>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d306      	bcc.n	800db30 <USB_SetTurnaroundTime+0xc4>
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	4a20      	ldr	r2, [pc, #128]	@ (800dba8 <USB_SetTurnaroundTime+0x13c>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d802      	bhi.n	800db30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800db2a:	2308      	movs	r3, #8
 800db2c:	617b      	str	r3, [r7, #20]
 800db2e:	e015      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	4a1d      	ldr	r2, [pc, #116]	@ (800dba8 <USB_SetTurnaroundTime+0x13c>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d906      	bls.n	800db46 <USB_SetTurnaroundTime+0xda>
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	4a1c      	ldr	r2, [pc, #112]	@ (800dbac <USB_SetTurnaroundTime+0x140>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d202      	bcs.n	800db46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800db40:	2307      	movs	r3, #7
 800db42:	617b      	str	r3, [r7, #20]
 800db44:	e00a      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800db46:	2306      	movs	r3, #6
 800db48:	617b      	str	r3, [r7, #20]
 800db4a:	e007      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800db4c:	79fb      	ldrb	r3, [r7, #7]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d102      	bne.n	800db58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800db52:	2309      	movs	r3, #9
 800db54:	617b      	str	r3, [r7, #20]
 800db56:	e001      	b.n	800db5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800db58:	2309      	movs	r3, #9
 800db5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	68da      	ldr	r2, [r3, #12]
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	029b      	lsls	r3, r3, #10
 800db70:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800db74:	431a      	orrs	r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800db7a:	2300      	movs	r3, #0
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	371c      	adds	r7, #28
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr
 800db88:	00d8acbf 	.word	0x00d8acbf
 800db8c:	00e4e1c0 	.word	0x00e4e1c0
 800db90:	00f42400 	.word	0x00f42400
 800db94:	01067380 	.word	0x01067380
 800db98:	011a499f 	.word	0x011a499f
 800db9c:	01312cff 	.word	0x01312cff
 800dba0:	014ca43f 	.word	0x014ca43f
 800dba4:	016e3600 	.word	0x016e3600
 800dba8:	01a6ab1f 	.word	0x01a6ab1f
 800dbac:	01e84800 	.word	0x01e84800

0800dbb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	f043 0201 	orr.w	r2, r3, #1
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	370c      	adds	r7, #12
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbd2:	b480      	push	{r7}
 800dbd4:	b083      	sub	sp, #12
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	f023 0201 	bic.w	r2, r3, #1
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dc00:	2300      	movs	r3, #0
 800dc02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dc10:	78fb      	ldrb	r3, [r7, #3]
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d115      	bne.n	800dc42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dc22:	2001      	movs	r0, #1
 800dc24:	f7f4 f872 	bl	8001d0c <HAL_Delay>
      ms++;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f001 f93f 	bl	800eeb2 <USB_GetMode>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d01e      	beq.n	800dc78 <USB_SetCurrentMode+0x84>
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2b31      	cmp	r3, #49	@ 0x31
 800dc3e:	d9f0      	bls.n	800dc22 <USB_SetCurrentMode+0x2e>
 800dc40:	e01a      	b.n	800dc78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dc42:	78fb      	ldrb	r3, [r7, #3]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d115      	bne.n	800dc74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dc54:	2001      	movs	r0, #1
 800dc56:	f7f4 f859 	bl	8001d0c <HAL_Delay>
      ms++;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f001 f926 	bl	800eeb2 <USB_GetMode>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d005      	beq.n	800dc78 <USB_SetCurrentMode+0x84>
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b31      	cmp	r3, #49	@ 0x31
 800dc70:	d9f0      	bls.n	800dc54 <USB_SetCurrentMode+0x60>
 800dc72:	e001      	b.n	800dc78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dc74:	2301      	movs	r3, #1
 800dc76:	e005      	b.n	800dc84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2b32      	cmp	r3, #50	@ 0x32
 800dc7c:	d101      	bne.n	800dc82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e000      	b.n	800dc84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc8c:	b084      	sub	sp, #16
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b086      	sub	sp, #24
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
 800dc96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dc9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dca6:	2300      	movs	r3, #0
 800dca8:	613b      	str	r3, [r7, #16]
 800dcaa:	e009      	b.n	800dcc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	3340      	adds	r3, #64	@ 0x40
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	4413      	add	r3, r2
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	613b      	str	r3, [r7, #16]
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2b0e      	cmp	r3, #14
 800dcc4:	d9f2      	bls.n	800dcac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dcc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d11c      	bne.n	800dd06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	68fa      	ldr	r2, [r7, #12]
 800dcd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dcda:	f043 0302 	orr.w	r3, r3, #2
 800dcde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dce4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	601a      	str	r2, [r3, #0]
 800dd04:	e005      	b.n	800dd12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dd18:	461a      	mov	r2, r3
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd24:	4619      	mov	r1, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	680b      	ldr	r3, [r1, #0]
 800dd30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d10c      	bne.n	800dd52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d104      	bne.n	800dd48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dd3e:	2100      	movs	r1, #0
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 f965 	bl	800e010 <USB_SetDevSpeed>
 800dd46:	e008      	b.n	800dd5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dd48:	2101      	movs	r1, #1
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 f960 	bl	800e010 <USB_SetDevSpeed>
 800dd50:	e003      	b.n	800dd5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dd52:	2103      	movs	r1, #3
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 f95b 	bl	800e010 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dd5a:	2110      	movs	r1, #16
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 f8f3 	bl	800df48 <USB_FlushTxFifo>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d001      	beq.n	800dd6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 f91f 	bl	800dfb0 <USB_FlushRxFifo>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d001      	beq.n	800dd7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd82:	461a      	mov	r2, r3
 800dd84:	2300      	movs	r3, #0
 800dd86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd8e:	461a      	mov	r2, r3
 800dd90:	2300      	movs	r3, #0
 800dd92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dda0:	2300      	movs	r3, #0
 800dda2:	613b      	str	r3, [r7, #16]
 800dda4:	e043      	b.n	800de2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	015a      	lsls	r2, r3, #5
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	4413      	add	r3, r2
 800ddae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ddb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ddbc:	d118      	bne.n	800ddf0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10a      	bne.n	800ddda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	015a      	lsls	r2, r3, #5
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	4413      	add	r3, r2
 800ddcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ddd6:	6013      	str	r3, [r2, #0]
 800ddd8:	e013      	b.n	800de02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	015a      	lsls	r2, r3, #5
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	4413      	add	r3, r2
 800dde2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dde6:	461a      	mov	r2, r3
 800dde8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ddec:	6013      	str	r3, [r2, #0]
 800ddee:	e008      	b.n	800de02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	015a      	lsls	r2, r3, #5
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	4413      	add	r3, r2
 800ddf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	2300      	movs	r3, #0
 800de00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	015a      	lsls	r2, r3, #5
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	4413      	add	r3, r2
 800de0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de0e:	461a      	mov	r2, r3
 800de10:	2300      	movs	r3, #0
 800de12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	015a      	lsls	r2, r3, #5
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	4413      	add	r3, r2
 800de1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de20:	461a      	mov	r2, r3
 800de22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800de26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	3301      	adds	r3, #1
 800de2c:	613b      	str	r3, [r7, #16]
 800de2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	429a      	cmp	r2, r3
 800de34:	d3b7      	bcc.n	800dda6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de36:	2300      	movs	r3, #0
 800de38:	613b      	str	r3, [r7, #16]
 800de3a:	e043      	b.n	800dec4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	015a      	lsls	r2, r3, #5
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	4413      	add	r3, r2
 800de44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800de4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800de52:	d118      	bne.n	800de86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d10a      	bne.n	800de70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	015a      	lsls	r2, r3, #5
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	4413      	add	r3, r2
 800de62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de66:	461a      	mov	r2, r3
 800de68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	e013      	b.n	800de98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	015a      	lsls	r2, r3, #5
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	4413      	add	r3, r2
 800de78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de7c:	461a      	mov	r2, r3
 800de7e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800de82:	6013      	str	r3, [r2, #0]
 800de84:	e008      	b.n	800de98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	015a      	lsls	r2, r3, #5
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	4413      	add	r3, r2
 800de8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de92:	461a      	mov	r2, r3
 800de94:	2300      	movs	r3, #0
 800de96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	015a      	lsls	r2, r3, #5
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	4413      	add	r3, r2
 800dea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dea4:	461a      	mov	r2, r3
 800dea6:	2300      	movs	r3, #0
 800dea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deb6:	461a      	mov	r2, r3
 800deb8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800debc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	3301      	adds	r3, #1
 800dec2:	613b      	str	r3, [r7, #16]
 800dec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec6:	693a      	ldr	r2, [r7, #16]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d3b7      	bcc.n	800de3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ded2:	691b      	ldr	r3, [r3, #16]
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800deda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dede:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800deec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800deee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def0:	2b00      	cmp	r3, #0
 800def2:	d105      	bne.n	800df00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	f043 0210 	orr.w	r2, r3, #16
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	699a      	ldr	r2, [r3, #24]
 800df04:	4b0e      	ldr	r3, [pc, #56]	@ (800df40 <USB_DevInit+0x2b4>)
 800df06:	4313      	orrs	r3, r2
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800df0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d005      	beq.n	800df1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	699b      	ldr	r3, [r3, #24]
 800df16:	f043 0208 	orr.w	r2, r3, #8
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800df1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df20:	2b01      	cmp	r3, #1
 800df22:	d105      	bne.n	800df30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	699a      	ldr	r2, [r3, #24]
 800df28:	4b06      	ldr	r3, [pc, #24]	@ (800df44 <USB_DevInit+0x2b8>)
 800df2a:	4313      	orrs	r3, r2
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800df30:	7dfb      	ldrb	r3, [r7, #23]
}
 800df32:	4618      	mov	r0, r3
 800df34:	3718      	adds	r7, #24
 800df36:	46bd      	mov	sp, r7
 800df38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df3c:	b004      	add	sp, #16
 800df3e:	4770      	bx	lr
 800df40:	803c3800 	.word	0x803c3800
 800df44:	40000004 	.word	0x40000004

0800df48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800df52:	2300      	movs	r3, #0
 800df54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	3301      	adds	r3, #1
 800df5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	4a13      	ldr	r2, [pc, #76]	@ (800dfac <USB_FlushTxFifo+0x64>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d901      	bls.n	800df68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800df64:	2303      	movs	r3, #3
 800df66:	e01b      	b.n	800dfa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	691b      	ldr	r3, [r3, #16]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	daf2      	bge.n	800df56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800df70:	2300      	movs	r3, #0
 800df72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	019b      	lsls	r3, r3, #6
 800df78:	f043 0220 	orr.w	r2, r3, #32
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	3301      	adds	r3, #1
 800df84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	4a08      	ldr	r2, [pc, #32]	@ (800dfac <USB_FlushTxFifo+0x64>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d901      	bls.n	800df92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800df8e:	2303      	movs	r3, #3
 800df90:	e006      	b.n	800dfa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	691b      	ldr	r3, [r3, #16]
 800df96:	f003 0320 	and.w	r3, r3, #32
 800df9a:	2b20      	cmp	r3, #32
 800df9c:	d0f0      	beq.n	800df80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	00030d40 	.word	0x00030d40

0800dfb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	4a11      	ldr	r2, [pc, #68]	@ (800e00c <USB_FlushRxFifo+0x5c>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d901      	bls.n	800dfce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	e018      	b.n	800e000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	691b      	ldr	r3, [r3, #16]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	daf2      	bge.n	800dfbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2210      	movs	r2, #16
 800dfde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	4a08      	ldr	r2, [pc, #32]	@ (800e00c <USB_FlushRxFifo+0x5c>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d901      	bls.n	800dff2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dfee:	2303      	movs	r3, #3
 800dff0:	e006      	b.n	800e000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	f003 0310 	and.w	r3, r3, #16
 800dffa:	2b10      	cmp	r3, #16
 800dffc:	d0f0      	beq.n	800dfe0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3714      	adds	r7, #20
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr
 800e00c:	00030d40 	.word	0x00030d40

0800e010 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e010:	b480      	push	{r7}
 800e012:	b085      	sub	sp, #20
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	460b      	mov	r3, r1
 800e01a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	78fb      	ldrb	r3, [r7, #3]
 800e02a:	68f9      	ldr	r1, [r7, #12]
 800e02c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e030:	4313      	orrs	r3, r2
 800e032:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3714      	adds	r7, #20
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr

0800e042 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e042:	b480      	push	{r7}
 800e044:	b087      	sub	sp, #28
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	f003 0306 	and.w	r3, r3, #6
 800e05a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d102      	bne.n	800e068 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e062:	2300      	movs	r3, #0
 800e064:	75fb      	strb	r3, [r7, #23]
 800e066:	e00a      	b.n	800e07e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2b02      	cmp	r3, #2
 800e06c:	d002      	beq.n	800e074 <USB_GetDevSpeed+0x32>
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2b06      	cmp	r3, #6
 800e072:	d102      	bne.n	800e07a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e074:	2302      	movs	r3, #2
 800e076:	75fb      	strb	r3, [r7, #23]
 800e078:	e001      	b.n	800e07e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e07a:	230f      	movs	r3, #15
 800e07c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e080:	4618      	mov	r0, r3
 800e082:	371c      	adds	r7, #28
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	785b      	ldrb	r3, [r3, #1]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d139      	bne.n	800e11c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0ae:	69da      	ldr	r2, [r3, #28]
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	f003 030f 	and.w	r3, r3, #15
 800e0b8:	2101      	movs	r1, #1
 800e0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	68f9      	ldr	r1, [r7, #12]
 800e0c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	015a      	lsls	r2, r3, #5
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d153      	bne.n	800e188 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	015a      	lsls	r2, r3, #5
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	791b      	ldrb	r3, [r3, #4]
 800e0fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e0fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	059b      	lsls	r3, r3, #22
 800e102:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e104:	431a      	orrs	r2, r3
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	0159      	lsls	r1, r3, #5
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	440b      	add	r3, r1
 800e10e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e112:	4619      	mov	r1, r3
 800e114:	4b20      	ldr	r3, [pc, #128]	@ (800e198 <USB_ActivateEndpoint+0x10c>)
 800e116:	4313      	orrs	r3, r2
 800e118:	600b      	str	r3, [r1, #0]
 800e11a:	e035      	b.n	800e188 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e122:	69da      	ldr	r2, [r3, #28]
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	f003 030f 	and.w	r3, r3, #15
 800e12c:	2101      	movs	r1, #1
 800e12e:	fa01 f303 	lsl.w	r3, r1, r3
 800e132:	041b      	lsls	r3, r3, #16
 800e134:	68f9      	ldr	r1, [r7, #12]
 800e136:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e13a:	4313      	orrs	r3, r2
 800e13c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	015a      	lsls	r2, r3, #5
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	4413      	add	r3, r2
 800e146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e150:	2b00      	cmp	r3, #0
 800e152:	d119      	bne.n	800e188 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	015a      	lsls	r2, r3, #5
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	4413      	add	r3, r2
 800e15c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	791b      	ldrb	r3, [r3, #4]
 800e16e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e170:	430b      	orrs	r3, r1
 800e172:	431a      	orrs	r2, r3
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	0159      	lsls	r1, r3, #5
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	440b      	add	r3, r1
 800e17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e180:	4619      	mov	r1, r3
 800e182:	4b05      	ldr	r3, [pc, #20]	@ (800e198 <USB_ActivateEndpoint+0x10c>)
 800e184:	4313      	orrs	r3, r2
 800e186:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e188:	2300      	movs	r3, #0
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3714      	adds	r7, #20
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr
 800e196:	bf00      	nop
 800e198:	10008000 	.word	0x10008000

0800e19c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b085      	sub	sp, #20
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	785b      	ldrb	r3, [r3, #1]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d161      	bne.n	800e27c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1ce:	d11f      	bne.n	800e210 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	015a      	lsls	r2, r3, #5
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	4413      	add	r3, r2
 800e1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	68ba      	ldr	r2, [r7, #8]
 800e1e0:	0151      	lsls	r1, r2, #5
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	440a      	add	r2, r1
 800e1e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e1ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e1ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	015a      	lsls	r2, r3, #5
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	68ba      	ldr	r2, [r7, #8]
 800e200:	0151      	lsls	r1, r2, #5
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	440a      	add	r2, r1
 800e206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e20a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e20e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e216:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	f003 030f 	and.w	r3, r3, #15
 800e220:	2101      	movs	r1, #1
 800e222:	fa01 f303 	lsl.w	r3, r1, r3
 800e226:	b29b      	uxth	r3, r3
 800e228:	43db      	mvns	r3, r3
 800e22a:	68f9      	ldr	r1, [r7, #12]
 800e22c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e230:	4013      	ands	r3, r2
 800e232:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e23a:	69da      	ldr	r2, [r3, #28]
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	f003 030f 	and.w	r3, r3, #15
 800e244:	2101      	movs	r1, #1
 800e246:	fa01 f303 	lsl.w	r3, r1, r3
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	43db      	mvns	r3, r3
 800e24e:	68f9      	ldr	r1, [r7, #12]
 800e250:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e254:	4013      	ands	r3, r2
 800e256:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	015a      	lsls	r2, r3, #5
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	4413      	add	r3, r2
 800e260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	0159      	lsls	r1, r3, #5
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	440b      	add	r3, r1
 800e26e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e272:	4619      	mov	r1, r3
 800e274:	4b35      	ldr	r3, [pc, #212]	@ (800e34c <USB_DeactivateEndpoint+0x1b0>)
 800e276:	4013      	ands	r3, r2
 800e278:	600b      	str	r3, [r1, #0]
 800e27a:	e060      	b.n	800e33e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	015a      	lsls	r2, r3, #5
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	4413      	add	r3, r2
 800e284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e28e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e292:	d11f      	bne.n	800e2d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	015a      	lsls	r2, r3, #5
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	4413      	add	r3, r2
 800e29c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	0151      	lsls	r1, r2, #5
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	440a      	add	r2, r1
 800e2aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e2ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e2b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	015a      	lsls	r2, r3, #5
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68ba      	ldr	r2, [r7, #8]
 800e2c4:	0151      	lsls	r1, r2, #5
 800e2c6:	68fa      	ldr	r2, [r7, #12]
 800e2c8:	440a      	add	r2, r1
 800e2ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e2ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	f003 030f 	and.w	r3, r3, #15
 800e2e4:	2101      	movs	r1, #1
 800e2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e2ea:	041b      	lsls	r3, r3, #16
 800e2ec:	43db      	mvns	r3, r3
 800e2ee:	68f9      	ldr	r1, [r7, #12]
 800e2f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e2f4:	4013      	ands	r3, r2
 800e2f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2fe:	69da      	ldr	r2, [r3, #28]
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	f003 030f 	and.w	r3, r3, #15
 800e308:	2101      	movs	r1, #1
 800e30a:	fa01 f303 	lsl.w	r3, r1, r3
 800e30e:	041b      	lsls	r3, r3, #16
 800e310:	43db      	mvns	r3, r3
 800e312:	68f9      	ldr	r1, [r7, #12]
 800e314:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e318:	4013      	ands	r3, r2
 800e31a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	015a      	lsls	r2, r3, #5
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	4413      	add	r3, r2
 800e324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	0159      	lsls	r1, r3, #5
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	440b      	add	r3, r1
 800e332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e336:	4619      	mov	r1, r3
 800e338:	4b05      	ldr	r3, [pc, #20]	@ (800e350 <USB_DeactivateEndpoint+0x1b4>)
 800e33a:	4013      	ands	r3, r2
 800e33c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e33e:	2300      	movs	r3, #0
}
 800e340:	4618      	mov	r0, r3
 800e342:	3714      	adds	r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr
 800e34c:	ec337800 	.word	0xec337800
 800e350:	eff37800 	.word	0xeff37800

0800e354 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b08a      	sub	sp, #40	@ 0x28
 800e358:	af02      	add	r7, sp, #8
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	4613      	mov	r3, r2
 800e360:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	785b      	ldrb	r3, [r3, #1]
 800e370:	2b01      	cmp	r3, #1
 800e372:	f040 8181 	bne.w	800e678 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	691b      	ldr	r3, [r3, #16]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d132      	bne.n	800e3e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	015a      	lsls	r2, r3, #5
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	4413      	add	r3, r2
 800e386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e38a:	691a      	ldr	r2, [r3, #16]
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	0159      	lsls	r1, r3, #5
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	440b      	add	r3, r1
 800e394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e398:	4619      	mov	r1, r3
 800e39a:	4ba5      	ldr	r3, [pc, #660]	@ (800e630 <USB_EPStartXfer+0x2dc>)
 800e39c:	4013      	ands	r3, r2
 800e39e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	015a      	lsls	r2, r3, #5
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	69ba      	ldr	r2, [r7, #24]
 800e3b0:	0151      	lsls	r1, r2, #5
 800e3b2:	69fa      	ldr	r2, [r7, #28]
 800e3b4:	440a      	add	r2, r1
 800e3b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e3be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	015a      	lsls	r2, r3, #5
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3cc:	691a      	ldr	r2, [r3, #16]
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	0159      	lsls	r1, r3, #5
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	440b      	add	r3, r1
 800e3d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3da:	4619      	mov	r1, r3
 800e3dc:	4b95      	ldr	r3, [pc, #596]	@ (800e634 <USB_EPStartXfer+0x2e0>)
 800e3de:	4013      	ands	r3, r2
 800e3e0:	610b      	str	r3, [r1, #16]
 800e3e2:	e092      	b.n	800e50a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	015a      	lsls	r2, r3, #5
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3f0:	691a      	ldr	r2, [r3, #16]
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	0159      	lsls	r1, r3, #5
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	440b      	add	r3, r1
 800e3fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3fe:	4619      	mov	r1, r3
 800e400:	4b8c      	ldr	r3, [pc, #560]	@ (800e634 <USB_EPStartXfer+0x2e0>)
 800e402:	4013      	ands	r3, r2
 800e404:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	015a      	lsls	r2, r3, #5
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	4413      	add	r3, r2
 800e40e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e412:	691a      	ldr	r2, [r3, #16]
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	0159      	lsls	r1, r3, #5
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	440b      	add	r3, r1
 800e41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e420:	4619      	mov	r1, r3
 800e422:	4b83      	ldr	r3, [pc, #524]	@ (800e630 <USB_EPStartXfer+0x2dc>)
 800e424:	4013      	ands	r3, r2
 800e426:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d11a      	bne.n	800e464 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	691a      	ldr	r2, [r3, #16]
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	429a      	cmp	r2, r3
 800e438:	d903      	bls.n	800e442 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	689a      	ldr	r2, [r3, #8]
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	015a      	lsls	r2, r3, #5
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	4413      	add	r3, r2
 800e44a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e44e:	691b      	ldr	r3, [r3, #16]
 800e450:	69ba      	ldr	r2, [r7, #24]
 800e452:	0151      	lsls	r1, r2, #5
 800e454:	69fa      	ldr	r2, [r7, #28]
 800e456:	440a      	add	r2, r1
 800e458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e45c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e460:	6113      	str	r3, [r2, #16]
 800e462:	e01b      	b.n	800e49c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	015a      	lsls	r2, r3, #5
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	4413      	add	r3, r2
 800e46c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e470:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	6919      	ldr	r1, [r3, #16]
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	689b      	ldr	r3, [r3, #8]
 800e47a:	440b      	add	r3, r1
 800e47c:	1e59      	subs	r1, r3, #1
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	689b      	ldr	r3, [r3, #8]
 800e482:	fbb1 f3f3 	udiv	r3, r1, r3
 800e486:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e488:	4b6b      	ldr	r3, [pc, #428]	@ (800e638 <USB_EPStartXfer+0x2e4>)
 800e48a:	400b      	ands	r3, r1
 800e48c:	69b9      	ldr	r1, [r7, #24]
 800e48e:	0148      	lsls	r0, r1, #5
 800e490:	69f9      	ldr	r1, [r7, #28]
 800e492:	4401      	add	r1, r0
 800e494:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e498:	4313      	orrs	r3, r2
 800e49a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	015a      	lsls	r2, r3, #5
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4a8:	691a      	ldr	r2, [r3, #16]
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4b2:	69b9      	ldr	r1, [r7, #24]
 800e4b4:	0148      	lsls	r0, r1, #5
 800e4b6:	69f9      	ldr	r1, [r7, #28]
 800e4b8:	4401      	add	r1, r0
 800e4ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	791b      	ldrb	r3, [r3, #4]
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d11f      	bne.n	800e50a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	015a      	lsls	r2, r3, #5
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4d6:	691b      	ldr	r3, [r3, #16]
 800e4d8:	69ba      	ldr	r2, [r7, #24]
 800e4da:	0151      	lsls	r1, r2, #5
 800e4dc:	69fa      	ldr	r2, [r7, #28]
 800e4de:	440a      	add	r2, r1
 800e4e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4e4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e4e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	015a      	lsls	r2, r3, #5
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	4413      	add	r3, r2
 800e4f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	69ba      	ldr	r2, [r7, #24]
 800e4fa:	0151      	lsls	r1, r2, #5
 800e4fc:	69fa      	ldr	r2, [r7, #28]
 800e4fe:	440a      	add	r2, r1
 800e500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e504:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e508:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e50a:	79fb      	ldrb	r3, [r7, #7]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d14b      	bne.n	800e5a8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	69db      	ldr	r3, [r3, #28]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d009      	beq.n	800e52c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e524:	461a      	mov	r2, r3
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	69db      	ldr	r3, [r3, #28]
 800e52a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	791b      	ldrb	r3, [r3, #4]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d128      	bne.n	800e586 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e540:	2b00      	cmp	r3, #0
 800e542:	d110      	bne.n	800e566 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	015a      	lsls	r2, r3, #5
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	4413      	add	r3, r2
 800e54c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	69ba      	ldr	r2, [r7, #24]
 800e554:	0151      	lsls	r1, r2, #5
 800e556:	69fa      	ldr	r2, [r7, #28]
 800e558:	440a      	add	r2, r1
 800e55a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e55e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e562:	6013      	str	r3, [r2, #0]
 800e564:	e00f      	b.n	800e586 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e566:	69bb      	ldr	r3, [r7, #24]
 800e568:	015a      	lsls	r2, r3, #5
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	4413      	add	r3, r2
 800e56e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	69ba      	ldr	r2, [r7, #24]
 800e576:	0151      	lsls	r1, r2, #5
 800e578:	69fa      	ldr	r2, [r7, #28]
 800e57a:	440a      	add	r2, r1
 800e57c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e584:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	015a      	lsls	r2, r3, #5
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	4413      	add	r3, r2
 800e58e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	69ba      	ldr	r2, [r7, #24]
 800e596:	0151      	lsls	r1, r2, #5
 800e598:	69fa      	ldr	r2, [r7, #28]
 800e59a:	440a      	add	r2, r1
 800e59c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e5a4:	6013      	str	r3, [r2, #0]
 800e5a6:	e16a      	b.n	800e87e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e5a8:	69bb      	ldr	r3, [r7, #24]
 800e5aa:	015a      	lsls	r2, r3, #5
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	69ba      	ldr	r2, [r7, #24]
 800e5b8:	0151      	lsls	r1, r2, #5
 800e5ba:	69fa      	ldr	r2, [r7, #28]
 800e5bc:	440a      	add	r2, r1
 800e5be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e5c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	791b      	ldrb	r3, [r3, #4]
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d015      	beq.n	800e5fc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	691b      	ldr	r3, [r3, #16]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	f000 8152 	beq.w	800e87e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	f003 030f 	and.w	r3, r3, #15
 800e5ea:	2101      	movs	r1, #1
 800e5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800e5f0:	69f9      	ldr	r1, [r7, #28]
 800e5f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	634b      	str	r3, [r1, #52]	@ 0x34
 800e5fa:	e140      	b.n	800e87e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d117      	bne.n	800e63c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	015a      	lsls	r2, r3, #5
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	4413      	add	r3, r2
 800e614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	69ba      	ldr	r2, [r7, #24]
 800e61c:	0151      	lsls	r1, r2, #5
 800e61e:	69fa      	ldr	r2, [r7, #28]
 800e620:	440a      	add	r2, r1
 800e622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e626:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e62a:	6013      	str	r3, [r2, #0]
 800e62c:	e016      	b.n	800e65c <USB_EPStartXfer+0x308>
 800e62e:	bf00      	nop
 800e630:	e007ffff 	.word	0xe007ffff
 800e634:	fff80000 	.word	0xfff80000
 800e638:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	015a      	lsls	r2, r3, #5
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	4413      	add	r3, r2
 800e644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	69ba      	ldr	r2, [r7, #24]
 800e64c:	0151      	lsls	r1, r2, #5
 800e64e:	69fa      	ldr	r2, [r7, #28]
 800e650:	440a      	add	r2, r1
 800e652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e65a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	68d9      	ldr	r1, [r3, #12]
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	781a      	ldrb	r2, [r3, #0]
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	b298      	uxth	r0, r3
 800e66a:	79fb      	ldrb	r3, [r7, #7]
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	4603      	mov	r3, r0
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f000 f9b9 	bl	800e9e8 <USB_WritePacket>
 800e676:	e102      	b.n	800e87e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	015a      	lsls	r2, r3, #5
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	4413      	add	r3, r2
 800e680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e684:	691a      	ldr	r2, [r3, #16]
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	0159      	lsls	r1, r3, #5
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	440b      	add	r3, r1
 800e68e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e692:	4619      	mov	r1, r3
 800e694:	4b7c      	ldr	r3, [pc, #496]	@ (800e888 <USB_EPStartXfer+0x534>)
 800e696:	4013      	ands	r3, r2
 800e698:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	015a      	lsls	r2, r3, #5
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6a6:	691a      	ldr	r2, [r3, #16]
 800e6a8:	69bb      	ldr	r3, [r7, #24]
 800e6aa:	0159      	lsls	r1, r3, #5
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	440b      	add	r3, r1
 800e6b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	4b75      	ldr	r3, [pc, #468]	@ (800e88c <USB_EPStartXfer+0x538>)
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d12f      	bne.n	800e722 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	691b      	ldr	r3, [r3, #16]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d003      	beq.n	800e6d2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	689a      	ldr	r2, [r3, #8]
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	689a      	ldr	r2, [r3, #8]
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e6da:	69bb      	ldr	r3, [r7, #24]
 800e6dc:	015a      	lsls	r2, r3, #5
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6e6:	691a      	ldr	r2, [r3, #16]
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	6a1b      	ldr	r3, [r3, #32]
 800e6ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e6f0:	69b9      	ldr	r1, [r7, #24]
 800e6f2:	0148      	lsls	r0, r1, #5
 800e6f4:	69f9      	ldr	r1, [r7, #28]
 800e6f6:	4401      	add	r1, r0
 800e6f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	015a      	lsls	r2, r3, #5
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	4413      	add	r3, r2
 800e708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	69ba      	ldr	r2, [r7, #24]
 800e710:	0151      	lsls	r1, r2, #5
 800e712:	69fa      	ldr	r2, [r7, #28]
 800e714:	440a      	add	r2, r1
 800e716:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e71a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e71e:	6113      	str	r3, [r2, #16]
 800e720:	e05f      	b.n	800e7e2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	691b      	ldr	r3, [r3, #16]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d123      	bne.n	800e772 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	015a      	lsls	r2, r3, #5
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	4413      	add	r3, r2
 800e732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e736:	691a      	ldr	r2, [r3, #16]
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	689b      	ldr	r3, [r3, #8]
 800e73c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e740:	69b9      	ldr	r1, [r7, #24]
 800e742:	0148      	lsls	r0, r1, #5
 800e744:	69f9      	ldr	r1, [r7, #28]
 800e746:	4401      	add	r1, r0
 800e748:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e74c:	4313      	orrs	r3, r2
 800e74e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	015a      	lsls	r2, r3, #5
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	4413      	add	r3, r2
 800e758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e75c:	691b      	ldr	r3, [r3, #16]
 800e75e:	69ba      	ldr	r2, [r7, #24]
 800e760:	0151      	lsls	r1, r2, #5
 800e762:	69fa      	ldr	r2, [r7, #28]
 800e764:	440a      	add	r2, r1
 800e766:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e76a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e76e:	6113      	str	r3, [r2, #16]
 800e770:	e037      	b.n	800e7e2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	691a      	ldr	r2, [r3, #16]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	4413      	add	r3, r2
 800e77c:	1e5a      	subs	r2, r3, #1
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	689b      	ldr	r3, [r3, #8]
 800e782:	fbb2 f3f3 	udiv	r3, r2, r3
 800e786:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	8afa      	ldrh	r2, [r7, #22]
 800e78e:	fb03 f202 	mul.w	r2, r3, r2
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	015a      	lsls	r2, r3, #5
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	4413      	add	r3, r2
 800e79e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7a2:	691a      	ldr	r2, [r3, #16]
 800e7a4:	8afb      	ldrh	r3, [r7, #22]
 800e7a6:	04d9      	lsls	r1, r3, #19
 800e7a8:	4b39      	ldr	r3, [pc, #228]	@ (800e890 <USB_EPStartXfer+0x53c>)
 800e7aa:	400b      	ands	r3, r1
 800e7ac:	69b9      	ldr	r1, [r7, #24]
 800e7ae:	0148      	lsls	r0, r1, #5
 800e7b0:	69f9      	ldr	r1, [r7, #28]
 800e7b2:	4401      	add	r1, r0
 800e7b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	015a      	lsls	r2, r3, #5
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	4413      	add	r3, r2
 800e7c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7c8:	691a      	ldr	r2, [r3, #16]
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	6a1b      	ldr	r3, [r3, #32]
 800e7ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e7d2:	69b9      	ldr	r1, [r7, #24]
 800e7d4:	0148      	lsls	r0, r1, #5
 800e7d6:	69f9      	ldr	r1, [r7, #28]
 800e7d8:	4401      	add	r1, r0
 800e7da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e7e2:	79fb      	ldrb	r3, [r7, #7]
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d10d      	bne.n	800e804 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d009      	beq.n	800e804 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	68d9      	ldr	r1, [r3, #12]
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	015a      	lsls	r2, r3, #5
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	4413      	add	r3, r2
 800e7fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e800:	460a      	mov	r2, r1
 800e802:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	791b      	ldrb	r3, [r3, #4]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d128      	bne.n	800e85e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d110      	bne.n	800e83e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	015a      	lsls	r2, r3, #5
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	4413      	add	r3, r2
 800e824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	69ba      	ldr	r2, [r7, #24]
 800e82c:	0151      	lsls	r1, r2, #5
 800e82e:	69fa      	ldr	r2, [r7, #28]
 800e830:	440a      	add	r2, r1
 800e832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e836:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e83a:	6013      	str	r3, [r2, #0]
 800e83c:	e00f      	b.n	800e85e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	015a      	lsls	r2, r3, #5
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	4413      	add	r3, r2
 800e846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	69ba      	ldr	r2, [r7, #24]
 800e84e:	0151      	lsls	r1, r2, #5
 800e850:	69fa      	ldr	r2, [r7, #28]
 800e852:	440a      	add	r2, r1
 800e854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e85c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	015a      	lsls	r2, r3, #5
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	4413      	add	r3, r2
 800e866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	69ba      	ldr	r2, [r7, #24]
 800e86e:	0151      	lsls	r1, r2, #5
 800e870:	69fa      	ldr	r2, [r7, #28]
 800e872:	440a      	add	r2, r1
 800e874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e878:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e87c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e87e:	2300      	movs	r3, #0
}
 800e880:	4618      	mov	r0, r3
 800e882:	3720      	adds	r7, #32
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	fff80000 	.word	0xfff80000
 800e88c:	e007ffff 	.word	0xe007ffff
 800e890:	1ff80000 	.word	0x1ff80000

0800e894 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e894:	b480      	push	{r7}
 800e896:	b087      	sub	sp, #28
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	785b      	ldrb	r3, [r3, #1]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d14a      	bne.n	800e948 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	015a      	lsls	r2, r3, #5
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e8c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8ca:	f040 8086 	bne.w	800e9da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	015a      	lsls	r2, r3, #5
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	7812      	ldrb	r2, [r2, #0]
 800e8e2:	0151      	lsls	r1, r2, #5
 800e8e4:	693a      	ldr	r2, [r7, #16]
 800e8e6:	440a      	add	r2, r1
 800e8e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e8f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	015a      	lsls	r2, r3, #5
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	683a      	ldr	r2, [r7, #0]
 800e904:	7812      	ldrb	r2, [r2, #0]
 800e906:	0151      	lsls	r1, r2, #5
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	440a      	add	r2, r1
 800e90c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e914:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	3301      	adds	r3, #1
 800e91a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e922:	4293      	cmp	r3, r2
 800e924:	d902      	bls.n	800e92c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e926:	2301      	movs	r3, #1
 800e928:	75fb      	strb	r3, [r7, #23]
          break;
 800e92a:	e056      	b.n	800e9da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	015a      	lsls	r2, r3, #5
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	4413      	add	r3, r2
 800e936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e940:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e944:	d0e7      	beq.n	800e916 <USB_EPStopXfer+0x82>
 800e946:	e048      	b.n	800e9da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	015a      	lsls	r2, r3, #5
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	4413      	add	r3, r2
 800e952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e95c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e960:	d13b      	bne.n	800e9da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	015a      	lsls	r2, r3, #5
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	4413      	add	r3, r2
 800e96c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	7812      	ldrb	r2, [r2, #0]
 800e976:	0151      	lsls	r1, r2, #5
 800e978:	693a      	ldr	r2, [r7, #16]
 800e97a:	440a      	add	r2, r1
 800e97c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e980:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e984:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	015a      	lsls	r2, r3, #5
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	4413      	add	r3, r2
 800e990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	683a      	ldr	r2, [r7, #0]
 800e998:	7812      	ldrb	r2, [r2, #0]
 800e99a:	0151      	lsls	r1, r2, #5
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	440a      	add	r2, r1
 800e9a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e9a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d902      	bls.n	800e9c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	75fb      	strb	r3, [r7, #23]
          break;
 800e9be:	e00c      	b.n	800e9da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	015a      	lsls	r2, r3, #5
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e9d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e9d8:	d0e7      	beq.n	800e9aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	371c      	adds	r7, #28
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b089      	sub	sp, #36	@ 0x24
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	71fb      	strb	r3, [r7, #7]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ea06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d123      	bne.n	800ea56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ea0e:	88bb      	ldrh	r3, [r7, #4]
 800ea10:	3303      	adds	r3, #3
 800ea12:	089b      	lsrs	r3, r3, #2
 800ea14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ea16:	2300      	movs	r3, #0
 800ea18:	61bb      	str	r3, [r7, #24]
 800ea1a:	e018      	b.n	800ea4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	031a      	lsls	r2, r3, #12
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	4413      	add	r3, r2
 800ea24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea28:	461a      	mov	r2, r3
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	3301      	adds	r3, #1
 800ea34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	3301      	adds	r3, #1
 800ea46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	61bb      	str	r3, [r7, #24]
 800ea4e:	69ba      	ldr	r2, [r7, #24]
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d3e2      	bcc.n	800ea1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3724      	adds	r7, #36	@ 0x24
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b08b      	sub	sp, #44	@ 0x2c
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ea7a:	88fb      	ldrh	r3, [r7, #6]
 800ea7c:	089b      	lsrs	r3, r3, #2
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ea82:	88fb      	ldrh	r3, [r7, #6]
 800ea84:	f003 0303 	and.w	r3, r3, #3
 800ea88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	623b      	str	r3, [r7, #32]
 800ea8e:	e014      	b.n	800eaba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaaa:	3301      	adds	r3, #1
 800eaac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eaae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab0:	3301      	adds	r3, #1
 800eab2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	3301      	adds	r3, #1
 800eab8:	623b      	str	r3, [r7, #32]
 800eaba:	6a3a      	ldr	r2, [r7, #32]
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d3e6      	bcc.n	800ea90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800eac2:	8bfb      	ldrh	r3, [r7, #30]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d01e      	beq.n	800eb06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800eac8:	2300      	movs	r3, #0
 800eaca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800eacc:	69bb      	ldr	r3, [r7, #24]
 800eace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ead2:	461a      	mov	r2, r3
 800ead4:	f107 0310 	add.w	r3, r7, #16
 800ead8:	6812      	ldr	r2, [r2, #0]
 800eada:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800eadc:	693a      	ldr	r2, [r7, #16]
 800eade:	6a3b      	ldr	r3, [r7, #32]
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	00db      	lsls	r3, r3, #3
 800eae4:	fa22 f303 	lsr.w	r3, r2, r3
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaec:	701a      	strb	r2, [r3, #0]
      i++;
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	623b      	str	r3, [r7, #32]
      pDest++;
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800eafa:	8bfb      	ldrh	r3, [r7, #30]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800eb00:	8bfb      	ldrh	r3, [r7, #30]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1ea      	bne.n	800eadc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800eb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	372c      	adds	r7, #44	@ 0x2c
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b085      	sub	sp, #20
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	785b      	ldrb	r3, [r3, #1]
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d12c      	bne.n	800eb8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	015a      	lsls	r2, r3, #5
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	4413      	add	r3, r2
 800eb38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	db12      	blt.n	800eb68 <USB_EPSetStall+0x54>
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d00f      	beq.n	800eb68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	015a      	lsls	r2, r3, #5
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	4413      	add	r3, r2
 800eb50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	68ba      	ldr	r2, [r7, #8]
 800eb58:	0151      	lsls	r1, r2, #5
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	440a      	add	r2, r1
 800eb5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb62:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eb66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	015a      	lsls	r2, r3, #5
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	4413      	add	r3, r2
 800eb70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	0151      	lsls	r1, r2, #5
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	440a      	add	r2, r1
 800eb7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eb86:	6013      	str	r3, [r2, #0]
 800eb88:	e02b      	b.n	800ebe2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	015a      	lsls	r2, r3, #5
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	4413      	add	r3, r2
 800eb92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	db12      	blt.n	800ebc2 <USB_EPSetStall+0xae>
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d00f      	beq.n	800ebc2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	015a      	lsls	r2, r3, #5
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	4413      	add	r3, r2
 800ebaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	0151      	lsls	r1, r2, #5
 800ebb4:	68fa      	ldr	r2, [r7, #12]
 800ebb6:	440a      	add	r2, r1
 800ebb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ebc0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	015a      	lsls	r2, r3, #5
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	4413      	add	r3, r2
 800ebca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	68ba      	ldr	r2, [r7, #8]
 800ebd2:	0151      	lsls	r1, r2, #5
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	440a      	add	r2, r1
 800ebd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ebe0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ebe2:	2300      	movs	r3, #0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	785b      	ldrb	r3, [r3, #1]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d128      	bne.n	800ec5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	015a      	lsls	r2, r3, #5
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	4413      	add	r3, r2
 800ec14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	0151      	lsls	r1, r2, #5
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	440a      	add	r2, r1
 800ec22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ec2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	791b      	ldrb	r3, [r3, #4]
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d003      	beq.n	800ec3c <USB_EPClearStall+0x4c>
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	791b      	ldrb	r3, [r3, #4]
 800ec38:	2b02      	cmp	r3, #2
 800ec3a:	d138      	bne.n	800ecae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	015a      	lsls	r2, r3, #5
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	4413      	add	r3, r2
 800ec44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	0151      	lsls	r1, r2, #5
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	440a      	add	r2, r1
 800ec52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec5a:	6013      	str	r3, [r2, #0]
 800ec5c:	e027      	b.n	800ecae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	015a      	lsls	r2, r3, #5
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	4413      	add	r3, r2
 800ec66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	68ba      	ldr	r2, [r7, #8]
 800ec6e:	0151      	lsls	r1, r2, #5
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	440a      	add	r2, r1
 800ec74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ec7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	791b      	ldrb	r3, [r3, #4]
 800ec82:	2b03      	cmp	r3, #3
 800ec84:	d003      	beq.n	800ec8e <USB_EPClearStall+0x9e>
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	791b      	ldrb	r3, [r3, #4]
 800ec8a:	2b02      	cmp	r3, #2
 800ec8c:	d10f      	bne.n	800ecae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	015a      	lsls	r2, r3, #5
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	4413      	add	r3, r2
 800ec96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68ba      	ldr	r2, [r7, #8]
 800ec9e:	0151      	lsls	r1, r2, #5
 800eca0:	68fa      	ldr	r2, [r7, #12]
 800eca2:	440a      	add	r2, r1
 800eca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ecac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3714      	adds	r7, #20
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ecda:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ecde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	78fb      	ldrb	r3, [r7, #3]
 800ecea:	011b      	lsls	r3, r3, #4
 800ecec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ecf0:	68f9      	ldr	r1, [r7, #12]
 800ecf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ecfa:	2300      	movs	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3714      	adds	r7, #20
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ed22:	f023 0303 	bic.w	r3, r3, #3
 800ed26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed36:	f023 0302 	bic.w	r3, r3, #2
 800ed3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3714      	adds	r7, #20
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr

0800ed4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed4a:	b480      	push	{r7}
 800ed4c:	b085      	sub	sp, #20
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ed64:	f023 0303 	bic.w	r3, r3, #3
 800ed68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed78:	f043 0302 	orr.w	r3, r3, #2
 800ed7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed7e:	2300      	movs	r3, #0
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3714      	adds	r7, #20
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	695b      	ldr	r3, [r3, #20]
 800ed98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	699b      	ldr	r3, [r3, #24]
 800ed9e:	68fa      	ldr	r2, [r7, #12]
 800eda0:	4013      	ands	r3, r2
 800eda2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eda4:	68fb      	ldr	r3, [r7, #12]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3714      	adds	r7, #20
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr

0800edb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800edb2:	b480      	push	{r7}
 800edb4:	b085      	sub	sp, #20
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edc4:	699b      	ldr	r3, [r3, #24]
 800edc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edce:	69db      	ldr	r3, [r3, #28]
 800edd0:	68ba      	ldr	r2, [r7, #8]
 800edd2:	4013      	ands	r3, r2
 800edd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	0c1b      	lsrs	r3, r3, #16
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3714      	adds	r7, #20
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr

0800ede6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ede6:	b480      	push	{r7}
 800ede8:	b085      	sub	sp, #20
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edf8:	699b      	ldr	r3, [r3, #24]
 800edfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee02:	69db      	ldr	r3, [r3, #28]
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	4013      	ands	r3, r2
 800ee08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	b29b      	uxth	r3, r3
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3714      	adds	r7, #20
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr

0800ee1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ee1a:	b480      	push	{r7}
 800ee1c:	b085      	sub	sp, #20
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]
 800ee22:	460b      	mov	r3, r1
 800ee24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ee2a:	78fb      	ldrb	r3, [r7, #3]
 800ee2c:	015a      	lsls	r2, r3, #5
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	4413      	add	r3, r2
 800ee32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee40:	695b      	ldr	r3, [r3, #20]
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	4013      	ands	r3, r2
 800ee46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ee48:	68bb      	ldr	r3, [r7, #8]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3714      	adds	r7, #20
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr

0800ee56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ee56:	b480      	push	{r7}
 800ee58:	b087      	sub	sp, #28
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	460b      	mov	r3, r1
 800ee60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ee7a:	78fb      	ldrb	r3, [r7, #3]
 800ee7c:	f003 030f 	and.w	r3, r3, #15
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	fa22 f303 	lsr.w	r3, r2, r3
 800ee86:	01db      	lsls	r3, r3, #7
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	693a      	ldr	r2, [r7, #16]
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ee90:	78fb      	ldrb	r3, [r7, #3]
 800ee92:	015a      	lsls	r2, r3, #5
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	4413      	add	r3, r2
 800ee98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee9c:	689b      	ldr	r3, [r3, #8]
 800ee9e:	693a      	ldr	r2, [r7, #16]
 800eea0:	4013      	ands	r3, r2
 800eea2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eea4:	68bb      	ldr	r3, [r7, #8]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	371c      	adds	r7, #28
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr

0800eeb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eeb2:	b480      	push	{r7}
 800eeb4:	b083      	sub	sp, #12
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	695b      	ldr	r3, [r3, #20]
 800eebe:	f003 0301 	and.w	r3, r3, #1
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	370c      	adds	r7, #12
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
	...

0800eed0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eeea:	4619      	mov	r1, r3
 800eeec:	4b09      	ldr	r3, [pc, #36]	@ (800ef14 <USB_ActivateSetup+0x44>)
 800eeee:	4013      	ands	r3, r2
 800eef0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	68fa      	ldr	r2, [r7, #12]
 800eefc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ef00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ef04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ef06:	2300      	movs	r3, #0
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3714      	adds	r7, #20
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr
 800ef14:	fffff800 	.word	0xfffff800

0800ef18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	460b      	mov	r3, r1
 800ef22:	607a      	str	r2, [r7, #4]
 800ef24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	333c      	adds	r3, #60	@ 0x3c
 800ef2e:	3304      	adds	r3, #4
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	4a26      	ldr	r2, [pc, #152]	@ (800efd0 <USB_EP0_OutStart+0xb8>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d90a      	bls.n	800ef52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ef48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ef4c:	d101      	bne.n	800ef52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	e037      	b.n	800efc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef58:	461a      	mov	r2, r3
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef64:	691b      	ldr	r3, [r3, #16]
 800ef66:	697a      	ldr	r2, [r7, #20]
 800ef68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ef70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	697a      	ldr	r2, [r7, #20]
 800ef7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef80:	f043 0318 	orr.w	r3, r3, #24
 800ef84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef8c:	691b      	ldr	r3, [r3, #16]
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef94:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ef98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ef9a:	7afb      	ldrb	r3, [r7, #11]
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d10f      	bne.n	800efc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efa6:	461a      	mov	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	697a      	ldr	r2, [r7, #20]
 800efb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800efbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	371c      	adds	r7, #28
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop
 800efd0:	4f54300a 	.word	0x4f54300a

0800efd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b085      	sub	sp, #20
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800efdc:	2300      	movs	r3, #0
 800efde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	3301      	adds	r3, #1
 800efe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	4a13      	ldr	r2, [pc, #76]	@ (800f038 <USB_CoreReset+0x64>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d901      	bls.n	800eff2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800efee:	2303      	movs	r3, #3
 800eff0:	e01b      	b.n	800f02a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	691b      	ldr	r3, [r3, #16]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	daf2      	bge.n	800efe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800effa:	2300      	movs	r3, #0
 800effc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	691b      	ldr	r3, [r3, #16]
 800f002:	f043 0201 	orr.w	r2, r3, #1
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	3301      	adds	r3, #1
 800f00e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	4a09      	ldr	r2, [pc, #36]	@ (800f038 <USB_CoreReset+0x64>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d901      	bls.n	800f01c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f018:	2303      	movs	r3, #3
 800f01a:	e006      	b.n	800f02a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	691b      	ldr	r3, [r3, #16]
 800f020:	f003 0301 	and.w	r3, r3, #1
 800f024:	2b01      	cmp	r3, #1
 800f026:	d0f0      	beq.n	800f00a <USB_CoreReset+0x36>

  return HAL_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3714      	adds	r7, #20
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	00030d40 	.word	0x00030d40

0800f03c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	460b      	mov	r3, r1
 800f046:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f048:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f04c:	f003 f8d2 	bl	80121f4 <USBD_static_malloc>
 800f050:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d109      	bne.n	800f06c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	32b0      	adds	r2, #176	@ 0xb0
 800f062:	2100      	movs	r1, #0
 800f064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f068:	2302      	movs	r3, #2
 800f06a:	e0d4      	b.n	800f216 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f06c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f070:	2100      	movs	r1, #0
 800f072:	68f8      	ldr	r0, [r7, #12]
 800f074:	f003 ffa5 	bl	8012fc2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	32b0      	adds	r2, #176	@ 0xb0
 800f082:	68f9      	ldr	r1, [r7, #12]
 800f084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	32b0      	adds	r2, #176	@ 0xb0
 800f092:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	7c1b      	ldrb	r3, [r3, #16]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d138      	bne.n	800f116 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f0a4:	4b5e      	ldr	r3, [pc, #376]	@ (800f220 <USBD_CDC_Init+0x1e4>)
 800f0a6:	7819      	ldrb	r1, [r3, #0]
 800f0a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f0ac:	2202      	movs	r2, #2
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f002 ff7d 	bl	8011fae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f0b4:	4b5a      	ldr	r3, [pc, #360]	@ (800f220 <USBD_CDC_Init+0x1e4>)
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	f003 020f 	and.w	r2, r3, #15
 800f0bc:	6879      	ldr	r1, [r7, #4]
 800f0be:	4613      	mov	r3, r2
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	4413      	add	r3, r2
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	440b      	add	r3, r1
 800f0c8:	3324      	adds	r3, #36	@ 0x24
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f0ce:	4b55      	ldr	r3, [pc, #340]	@ (800f224 <USBD_CDC_Init+0x1e8>)
 800f0d0:	7819      	ldrb	r1, [r3, #0]
 800f0d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f0d6:	2202      	movs	r2, #2
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f002 ff68 	bl	8011fae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f0de:	4b51      	ldr	r3, [pc, #324]	@ (800f224 <USBD_CDC_Init+0x1e8>)
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	f003 020f 	and.w	r2, r3, #15
 800f0e6:	6879      	ldr	r1, [r7, #4]
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	4413      	add	r3, r2
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	440b      	add	r3, r1
 800f0f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f0fa:	4b4b      	ldr	r3, [pc, #300]	@ (800f228 <USBD_CDC_Init+0x1ec>)
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	f003 020f 	and.w	r2, r3, #15
 800f102:	6879      	ldr	r1, [r7, #4]
 800f104:	4613      	mov	r3, r2
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	4413      	add	r3, r2
 800f10a:	009b      	lsls	r3, r3, #2
 800f10c:	440b      	add	r3, r1
 800f10e:	3326      	adds	r3, #38	@ 0x26
 800f110:	2210      	movs	r2, #16
 800f112:	801a      	strh	r2, [r3, #0]
 800f114:	e035      	b.n	800f182 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f116:	4b42      	ldr	r3, [pc, #264]	@ (800f220 <USBD_CDC_Init+0x1e4>)
 800f118:	7819      	ldrb	r1, [r3, #0]
 800f11a:	2340      	movs	r3, #64	@ 0x40
 800f11c:	2202      	movs	r2, #2
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f002 ff45 	bl	8011fae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f124:	4b3e      	ldr	r3, [pc, #248]	@ (800f220 <USBD_CDC_Init+0x1e4>)
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	f003 020f 	and.w	r2, r3, #15
 800f12c:	6879      	ldr	r1, [r7, #4]
 800f12e:	4613      	mov	r3, r2
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	4413      	add	r3, r2
 800f134:	009b      	lsls	r3, r3, #2
 800f136:	440b      	add	r3, r1
 800f138:	3324      	adds	r3, #36	@ 0x24
 800f13a:	2201      	movs	r2, #1
 800f13c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f13e:	4b39      	ldr	r3, [pc, #228]	@ (800f224 <USBD_CDC_Init+0x1e8>)
 800f140:	7819      	ldrb	r1, [r3, #0]
 800f142:	2340      	movs	r3, #64	@ 0x40
 800f144:	2202      	movs	r2, #2
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f002 ff31 	bl	8011fae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f14c:	4b35      	ldr	r3, [pc, #212]	@ (800f224 <USBD_CDC_Init+0x1e8>)
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	f003 020f 	and.w	r2, r3, #15
 800f154:	6879      	ldr	r1, [r7, #4]
 800f156:	4613      	mov	r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	4413      	add	r3, r2
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	440b      	add	r3, r1
 800f160:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f164:	2201      	movs	r2, #1
 800f166:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f168:	4b2f      	ldr	r3, [pc, #188]	@ (800f228 <USBD_CDC_Init+0x1ec>)
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	f003 020f 	and.w	r2, r3, #15
 800f170:	6879      	ldr	r1, [r7, #4]
 800f172:	4613      	mov	r3, r2
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	4413      	add	r3, r2
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	440b      	add	r3, r1
 800f17c:	3326      	adds	r3, #38	@ 0x26
 800f17e:	2210      	movs	r2, #16
 800f180:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f182:	4b29      	ldr	r3, [pc, #164]	@ (800f228 <USBD_CDC_Init+0x1ec>)
 800f184:	7819      	ldrb	r1, [r3, #0]
 800f186:	2308      	movs	r3, #8
 800f188:	2203      	movs	r2, #3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f002 ff0f 	bl	8011fae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f190:	4b25      	ldr	r3, [pc, #148]	@ (800f228 <USBD_CDC_Init+0x1ec>)
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	f003 020f 	and.w	r2, r3, #15
 800f198:	6879      	ldr	r1, [r7, #4]
 800f19a:	4613      	mov	r3, r2
 800f19c:	009b      	lsls	r3, r3, #2
 800f19e:	4413      	add	r3, r2
 800f1a0:	009b      	lsls	r3, r3, #2
 800f1a2:	440b      	add	r3, r1
 800f1a4:	3324      	adds	r3, #36	@ 0x24
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	33b0      	adds	r3, #176	@ 0xb0
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	4413      	add	r3, r2
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d101      	bne.n	800f1e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f1e0:	2302      	movs	r3, #2
 800f1e2:	e018      	b.n	800f216 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	7c1b      	ldrb	r3, [r3, #16]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d10a      	bne.n	800f202 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f1ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f224 <USBD_CDC_Init+0x1e8>)
 800f1ee:	7819      	ldrb	r1, [r3, #0]
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f1f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f002 ffc6 	bl	801218c <USBD_LL_PrepareReceive>
 800f200:	e008      	b.n	800f214 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f202:	4b08      	ldr	r3, [pc, #32]	@ (800f224 <USBD_CDC_Init+0x1e8>)
 800f204:	7819      	ldrb	r1, [r3, #0]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f20c:	2340      	movs	r3, #64	@ 0x40
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f002 ffbc 	bl	801218c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f214:	2300      	movs	r3, #0
}
 800f216:	4618      	mov	r0, r3
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	2400009b 	.word	0x2400009b
 800f224:	2400009c 	.word	0x2400009c
 800f228:	2400009d 	.word	0x2400009d

0800f22c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	460b      	mov	r3, r1
 800f236:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f238:	4b3a      	ldr	r3, [pc, #232]	@ (800f324 <USBD_CDC_DeInit+0xf8>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	4619      	mov	r1, r3
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f002 fedb 	bl	8011ffa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f244:	4b37      	ldr	r3, [pc, #220]	@ (800f324 <USBD_CDC_DeInit+0xf8>)
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	f003 020f 	and.w	r2, r3, #15
 800f24c:	6879      	ldr	r1, [r7, #4]
 800f24e:	4613      	mov	r3, r2
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	4413      	add	r3, r2
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	440b      	add	r3, r1
 800f258:	3324      	adds	r3, #36	@ 0x24
 800f25a:	2200      	movs	r2, #0
 800f25c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f25e:	4b32      	ldr	r3, [pc, #200]	@ (800f328 <USBD_CDC_DeInit+0xfc>)
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	4619      	mov	r1, r3
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f002 fec8 	bl	8011ffa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f26a:	4b2f      	ldr	r3, [pc, #188]	@ (800f328 <USBD_CDC_DeInit+0xfc>)
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	f003 020f 	and.w	r2, r3, #15
 800f272:	6879      	ldr	r1, [r7, #4]
 800f274:	4613      	mov	r3, r2
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	4413      	add	r3, r2
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	440b      	add	r3, r1
 800f27e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f282:	2200      	movs	r2, #0
 800f284:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f286:	4b29      	ldr	r3, [pc, #164]	@ (800f32c <USBD_CDC_DeInit+0x100>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	4619      	mov	r1, r3
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f002 feb4 	bl	8011ffa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f292:	4b26      	ldr	r3, [pc, #152]	@ (800f32c <USBD_CDC_DeInit+0x100>)
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	f003 020f 	and.w	r2, r3, #15
 800f29a:	6879      	ldr	r1, [r7, #4]
 800f29c:	4613      	mov	r3, r2
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	4413      	add	r3, r2
 800f2a2:	009b      	lsls	r3, r3, #2
 800f2a4:	440b      	add	r3, r1
 800f2a6:	3324      	adds	r3, #36	@ 0x24
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f2ac:	4b1f      	ldr	r3, [pc, #124]	@ (800f32c <USBD_CDC_DeInit+0x100>)
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	f003 020f 	and.w	r2, r3, #15
 800f2b4:	6879      	ldr	r1, [r7, #4]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	009b      	lsls	r3, r3, #2
 800f2ba:	4413      	add	r3, r2
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	440b      	add	r3, r1
 800f2c0:	3326      	adds	r3, #38	@ 0x26
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	32b0      	adds	r2, #176	@ 0xb0
 800f2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d01f      	beq.n	800f318 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	33b0      	adds	r3, #176	@ 0xb0
 800f2e2:	009b      	lsls	r3, r3, #2
 800f2e4:	4413      	add	r3, r2
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	32b0      	adds	r2, #176	@ 0xb0
 800f2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f002 ff88 	bl	8012210 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	32b0      	adds	r2, #176	@ 0xb0
 800f30a:	2100      	movs	r1, #0
 800f30c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3708      	adds	r7, #8
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	2400009b 	.word	0x2400009b
 800f328:	2400009c 	.word	0x2400009c
 800f32c:	2400009d 	.word	0x2400009d

0800f330 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b086      	sub	sp, #24
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	32b0      	adds	r2, #176	@ 0xb0
 800f344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f348:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f34a:	2300      	movs	r3, #0
 800f34c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f34e:	2300      	movs	r3, #0
 800f350:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f352:	2300      	movs	r3, #0
 800f354:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d101      	bne.n	800f360 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f35c:	2303      	movs	r3, #3
 800f35e:	e0bf      	b.n	800f4e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d050      	beq.n	800f40e <USBD_CDC_Setup+0xde>
 800f36c:	2b20      	cmp	r3, #32
 800f36e:	f040 80af 	bne.w	800f4d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	88db      	ldrh	r3, [r3, #6]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d03a      	beq.n	800f3f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	b25b      	sxtb	r3, r3
 800f380:	2b00      	cmp	r3, #0
 800f382:	da1b      	bge.n	800f3bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	33b0      	adds	r3, #176	@ 0xb0
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	4413      	add	r3, r2
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	683a      	ldr	r2, [r7, #0]
 800f398:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f39a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f39c:	683a      	ldr	r2, [r7, #0]
 800f39e:	88d2      	ldrh	r2, [r2, #6]
 800f3a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	88db      	ldrh	r3, [r3, #6]
 800f3a6:	2b07      	cmp	r3, #7
 800f3a8:	bf28      	it	cs
 800f3aa:	2307      	movcs	r3, #7
 800f3ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	89fa      	ldrh	r2, [r7, #14]
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f001 fdb1 	bl	8010f1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f3ba:	e090      	b.n	800f4de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	785a      	ldrb	r2, [r3, #1]
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	88db      	ldrh	r3, [r3, #6]
 800f3ca:	2b3f      	cmp	r3, #63	@ 0x3f
 800f3cc:	d803      	bhi.n	800f3d6 <USBD_CDC_Setup+0xa6>
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	88db      	ldrh	r3, [r3, #6]
 800f3d2:	b2da      	uxtb	r2, r3
 800f3d4:	e000      	b.n	800f3d8 <USBD_CDC_Setup+0xa8>
 800f3d6:	2240      	movs	r2, #64	@ 0x40
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f3de:	6939      	ldr	r1, [r7, #16]
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f001 fdc3 	bl	8010f74 <USBD_CtlPrepareRx>
      break;
 800f3ee:	e076      	b.n	800f4de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	33b0      	adds	r3, #176	@ 0xb0
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	4413      	add	r3, r2
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	689b      	ldr	r3, [r3, #8]
 800f402:	683a      	ldr	r2, [r7, #0]
 800f404:	7850      	ldrb	r0, [r2, #1]
 800f406:	2200      	movs	r2, #0
 800f408:	6839      	ldr	r1, [r7, #0]
 800f40a:	4798      	blx	r3
      break;
 800f40c:	e067      	b.n	800f4de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	785b      	ldrb	r3, [r3, #1]
 800f412:	2b0b      	cmp	r3, #11
 800f414:	d851      	bhi.n	800f4ba <USBD_CDC_Setup+0x18a>
 800f416:	a201      	add	r2, pc, #4	@ (adr r2, 800f41c <USBD_CDC_Setup+0xec>)
 800f418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f41c:	0800f44d 	.word	0x0800f44d
 800f420:	0800f4c9 	.word	0x0800f4c9
 800f424:	0800f4bb 	.word	0x0800f4bb
 800f428:	0800f4bb 	.word	0x0800f4bb
 800f42c:	0800f4bb 	.word	0x0800f4bb
 800f430:	0800f4bb 	.word	0x0800f4bb
 800f434:	0800f4bb 	.word	0x0800f4bb
 800f438:	0800f4bb 	.word	0x0800f4bb
 800f43c:	0800f4bb 	.word	0x0800f4bb
 800f440:	0800f4bb 	.word	0x0800f4bb
 800f444:	0800f477 	.word	0x0800f477
 800f448:	0800f4a1 	.word	0x0800f4a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b03      	cmp	r3, #3
 800f456:	d107      	bne.n	800f468 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f458:	f107 030a 	add.w	r3, r7, #10
 800f45c:	2202      	movs	r2, #2
 800f45e:	4619      	mov	r1, r3
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f001 fd5b 	bl	8010f1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f466:	e032      	b.n	800f4ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f468:	6839      	ldr	r1, [r7, #0]
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f001 fce5 	bl	8010e3a <USBD_CtlError>
            ret = USBD_FAIL;
 800f470:	2303      	movs	r3, #3
 800f472:	75fb      	strb	r3, [r7, #23]
          break;
 800f474:	e02b      	b.n	800f4ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	2b03      	cmp	r3, #3
 800f480:	d107      	bne.n	800f492 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f482:	f107 030d 	add.w	r3, r7, #13
 800f486:	2201      	movs	r2, #1
 800f488:	4619      	mov	r1, r3
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f001 fd46 	bl	8010f1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f490:	e01d      	b.n	800f4ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f492:	6839      	ldr	r1, [r7, #0]
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f001 fcd0 	bl	8010e3a <USBD_CtlError>
            ret = USBD_FAIL;
 800f49a:	2303      	movs	r3, #3
 800f49c:	75fb      	strb	r3, [r7, #23]
          break;
 800f49e:	e016      	b.n	800f4ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	2b03      	cmp	r3, #3
 800f4aa:	d00f      	beq.n	800f4cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f4ac:	6839      	ldr	r1, [r7, #0]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f001 fcc3 	bl	8010e3a <USBD_CtlError>
            ret = USBD_FAIL;
 800f4b4:	2303      	movs	r3, #3
 800f4b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f4b8:	e008      	b.n	800f4cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f4ba:	6839      	ldr	r1, [r7, #0]
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f001 fcbc 	bl	8010e3a <USBD_CtlError>
          ret = USBD_FAIL;
 800f4c2:	2303      	movs	r3, #3
 800f4c4:	75fb      	strb	r3, [r7, #23]
          break;
 800f4c6:	e002      	b.n	800f4ce <USBD_CDC_Setup+0x19e>
          break;
 800f4c8:	bf00      	nop
 800f4ca:	e008      	b.n	800f4de <USBD_CDC_Setup+0x1ae>
          break;
 800f4cc:	bf00      	nop
      }
      break;
 800f4ce:	e006      	b.n	800f4de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f4d0:	6839      	ldr	r1, [r7, #0]
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f001 fcb1 	bl	8010e3a <USBD_CtlError>
      ret = USBD_FAIL;
 800f4d8:	2303      	movs	r3, #3
 800f4da:	75fb      	strb	r3, [r7, #23]
      break;
 800f4dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800f4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3718      	adds	r7, #24
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	32b0      	adds	r2, #176	@ 0xb0
 800f506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d101      	bne.n	800f512 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f50e:	2303      	movs	r3, #3
 800f510:	e065      	b.n	800f5de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	32b0      	adds	r2, #176	@ 0xb0
 800f51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f520:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f522:	78fb      	ldrb	r3, [r7, #3]
 800f524:	f003 020f 	and.w	r2, r3, #15
 800f528:	6879      	ldr	r1, [r7, #4]
 800f52a:	4613      	mov	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4413      	add	r3, r2
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	440b      	add	r3, r1
 800f534:	3318      	adds	r3, #24
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d02f      	beq.n	800f59c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f53c:	78fb      	ldrb	r3, [r7, #3]
 800f53e:	f003 020f 	and.w	r2, r3, #15
 800f542:	6879      	ldr	r1, [r7, #4]
 800f544:	4613      	mov	r3, r2
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	4413      	add	r3, r2
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	440b      	add	r3, r1
 800f54e:	3318      	adds	r3, #24
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	78fb      	ldrb	r3, [r7, #3]
 800f554:	f003 010f 	and.w	r1, r3, #15
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	460b      	mov	r3, r1
 800f55c:	00db      	lsls	r3, r3, #3
 800f55e:	440b      	add	r3, r1
 800f560:	009b      	lsls	r3, r3, #2
 800f562:	4403      	add	r3, r0
 800f564:	3344      	adds	r3, #68	@ 0x44
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	fbb2 f1f3 	udiv	r1, r2, r3
 800f56c:	fb01 f303 	mul.w	r3, r1, r3
 800f570:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f572:	2b00      	cmp	r3, #0
 800f574:	d112      	bne.n	800f59c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f576:	78fb      	ldrb	r3, [r7, #3]
 800f578:	f003 020f 	and.w	r2, r3, #15
 800f57c:	6879      	ldr	r1, [r7, #4]
 800f57e:	4613      	mov	r3, r2
 800f580:	009b      	lsls	r3, r3, #2
 800f582:	4413      	add	r3, r2
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	440b      	add	r3, r1
 800f588:	3318      	adds	r3, #24
 800f58a:	2200      	movs	r2, #0
 800f58c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f58e:	78f9      	ldrb	r1, [r7, #3]
 800f590:	2300      	movs	r3, #0
 800f592:	2200      	movs	r2, #0
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f002 fdd8 	bl	801214a <USBD_LL_Transmit>
 800f59a:	e01f      	b.n	800f5dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	33b0      	adds	r3, #176	@ 0xb0
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4413      	add	r3, r2
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	691b      	ldr	r3, [r3, #16]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d010      	beq.n	800f5dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	33b0      	adds	r3, #176	@ 0xb0
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	4413      	add	r3, r2
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	691b      	ldr	r3, [r3, #16]
 800f5cc:	68ba      	ldr	r2, [r7, #8]
 800f5ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f5d2:	68ba      	ldr	r2, [r7, #8]
 800f5d4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f5d8:	78fa      	ldrb	r2, [r7, #3]
 800f5da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b084      	sub	sp, #16
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	32b0      	adds	r2, #176	@ 0xb0
 800f5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f600:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	32b0      	adds	r2, #176	@ 0xb0
 800f60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d101      	bne.n	800f618 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f614:	2303      	movs	r3, #3
 800f616:	e01a      	b.n	800f64e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f618:	78fb      	ldrb	r3, [r7, #3]
 800f61a:	4619      	mov	r1, r3
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f002 fdd6 	bl	80121ce <USBD_LL_GetRxDataSize>
 800f622:	4602      	mov	r2, r0
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	33b0      	adds	r3, #176	@ 0xb0
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	4413      	add	r3, r2
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f648:	4611      	mov	r1, r2
 800f64a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f656:	b580      	push	{r7, lr}
 800f658:	b084      	sub	sp, #16
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	32b0      	adds	r2, #176	@ 0xb0
 800f668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f66c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d101      	bne.n	800f678 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f674:	2303      	movs	r3, #3
 800f676:	e024      	b.n	800f6c2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	33b0      	adds	r3, #176	@ 0xb0
 800f682:	009b      	lsls	r3, r3, #2
 800f684:	4413      	add	r3, r2
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d019      	beq.n	800f6c0 <USBD_CDC_EP0_RxReady+0x6a>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f692:	2bff      	cmp	r3, #255	@ 0xff
 800f694:	d014      	beq.n	800f6c0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	33b0      	adds	r3, #176	@ 0xb0
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	4413      	add	r3, r2
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f6ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f6b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	22ff      	movs	r2, #255	@ 0xff
 800f6bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f6c0:	2300      	movs	r3, #0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
	...

0800f6cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f6d4:	2182      	movs	r1, #130	@ 0x82
 800f6d6:	4818      	ldr	r0, [pc, #96]	@ (800f738 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f6d8:	f000 fd4f 	bl	801017a <USBD_GetEpDesc>
 800f6dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f6de:	2101      	movs	r1, #1
 800f6e0:	4815      	ldr	r0, [pc, #84]	@ (800f738 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f6e2:	f000 fd4a 	bl	801017a <USBD_GetEpDesc>
 800f6e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f6e8:	2181      	movs	r1, #129	@ 0x81
 800f6ea:	4813      	ldr	r0, [pc, #76]	@ (800f738 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f6ec:	f000 fd45 	bl	801017a <USBD_GetEpDesc>
 800f6f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d002      	beq.n	800f6fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	2210      	movs	r2, #16
 800f6fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d006      	beq.n	800f712 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	2200      	movs	r2, #0
 800f708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f70c:	711a      	strb	r2, [r3, #4]
 800f70e:	2200      	movs	r2, #0
 800f710:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d006      	beq.n	800f726 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2200      	movs	r2, #0
 800f71c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f720:	711a      	strb	r2, [r3, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2243      	movs	r2, #67	@ 0x43
 800f72a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f72c:	4b02      	ldr	r3, [pc, #8]	@ (800f738 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	24000058 	.word	0x24000058

0800f73c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b086      	sub	sp, #24
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f744:	2182      	movs	r1, #130	@ 0x82
 800f746:	4818      	ldr	r0, [pc, #96]	@ (800f7a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f748:	f000 fd17 	bl	801017a <USBD_GetEpDesc>
 800f74c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f74e:	2101      	movs	r1, #1
 800f750:	4815      	ldr	r0, [pc, #84]	@ (800f7a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f752:	f000 fd12 	bl	801017a <USBD_GetEpDesc>
 800f756:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f758:	2181      	movs	r1, #129	@ 0x81
 800f75a:	4813      	ldr	r0, [pc, #76]	@ (800f7a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f75c:	f000 fd0d 	bl	801017a <USBD_GetEpDesc>
 800f760:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d002      	beq.n	800f76e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	2210      	movs	r2, #16
 800f76c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d006      	beq.n	800f782 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	2200      	movs	r2, #0
 800f778:	711a      	strb	r2, [r3, #4]
 800f77a:	2200      	movs	r2, #0
 800f77c:	f042 0202 	orr.w	r2, r2, #2
 800f780:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d006      	beq.n	800f796 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2200      	movs	r2, #0
 800f78c:	711a      	strb	r2, [r3, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	f042 0202 	orr.w	r2, r2, #2
 800f794:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2243      	movs	r2, #67	@ 0x43
 800f79a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f79c:	4b02      	ldr	r3, [pc, #8]	@ (800f7a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3718      	adds	r7, #24
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	24000058 	.word	0x24000058

0800f7ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b086      	sub	sp, #24
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f7b4:	2182      	movs	r1, #130	@ 0x82
 800f7b6:	4818      	ldr	r0, [pc, #96]	@ (800f818 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f7b8:	f000 fcdf 	bl	801017a <USBD_GetEpDesc>
 800f7bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f7be:	2101      	movs	r1, #1
 800f7c0:	4815      	ldr	r0, [pc, #84]	@ (800f818 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f7c2:	f000 fcda 	bl	801017a <USBD_GetEpDesc>
 800f7c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f7c8:	2181      	movs	r1, #129	@ 0x81
 800f7ca:	4813      	ldr	r0, [pc, #76]	@ (800f818 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f7cc:	f000 fcd5 	bl	801017a <USBD_GetEpDesc>
 800f7d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d002      	beq.n	800f7de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	2210      	movs	r2, #16
 800f7dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d006      	beq.n	800f7f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f7ec:	711a      	strb	r2, [r3, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d006      	beq.n	800f806 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f800:	711a      	strb	r2, [r3, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2243      	movs	r2, #67	@ 0x43
 800f80a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f80c:	4b02      	ldr	r3, [pc, #8]	@ (800f818 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3718      	adds	r7, #24
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop
 800f818:	24000058 	.word	0x24000058

0800f81c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	220a      	movs	r2, #10
 800f828:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f82a:	4b03      	ldr	r3, [pc, #12]	@ (800f838 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr
 800f838:	24000014 	.word	0x24000014

0800f83c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d101      	bne.n	800f850 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f84c:	2303      	movs	r3, #3
 800f84e:	e009      	b.n	800f864 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	33b0      	adds	r3, #176	@ 0xb0
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	4413      	add	r3, r2
 800f85e:	683a      	ldr	r2, [r7, #0]
 800f860:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f870:	b480      	push	{r7}
 800f872:	b087      	sub	sp, #28
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	32b0      	adds	r2, #176	@ 0xb0
 800f886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f88a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d101      	bne.n	800f896 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f892:	2303      	movs	r3, #3
 800f894:	e008      	b.n	800f8a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f8a6:	2300      	movs	r3, #0
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	371c      	adds	r7, #28
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr

0800f8b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b085      	sub	sp, #20
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	32b0      	adds	r2, #176	@ 0xb0
 800f8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d101      	bne.n	800f8d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f8d4:	2303      	movs	r3, #3
 800f8d6:	e004      	b.n	800f8e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	683a      	ldr	r2, [r7, #0]
 800f8dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f8e0:	2300      	movs	r3, #0
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3714      	adds	r7, #20
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
	...

0800f8f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	32b0      	adds	r2, #176	@ 0xb0
 800f902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f906:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f908:	2301      	movs	r3, #1
 800f90a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d101      	bne.n	800f916 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f912:	2303      	movs	r3, #3
 800f914:	e025      	b.n	800f962 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d11f      	bne.n	800f960 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	2201      	movs	r2, #1
 800f924:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f928:	4b10      	ldr	r3, [pc, #64]	@ (800f96c <USBD_CDC_TransmitPacket+0x7c>)
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	f003 020f 	and.w	r2, r3, #15
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	4613      	mov	r3, r2
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	4413      	add	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4403      	add	r3, r0
 800f942:	3318      	adds	r3, #24
 800f944:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f946:	4b09      	ldr	r3, [pc, #36]	@ (800f96c <USBD_CDC_TransmitPacket+0x7c>)
 800f948:	7819      	ldrb	r1, [r3, #0]
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f002 fbf7 	bl	801214a <USBD_LL_Transmit>

    ret = USBD_OK;
 800f95c:	2300      	movs	r3, #0
 800f95e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f960:	7bfb      	ldrb	r3, [r7, #15]
}
 800f962:	4618      	mov	r0, r3
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	2400009b 	.word	0x2400009b

0800f970 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	32b0      	adds	r2, #176	@ 0xb0
 800f982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f986:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	32b0      	adds	r2, #176	@ 0xb0
 800f992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d101      	bne.n	800f99e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f99a:	2303      	movs	r3, #3
 800f99c:	e018      	b.n	800f9d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	7c1b      	ldrb	r3, [r3, #16]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d10a      	bne.n	800f9bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f9a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f9d8 <USBD_CDC_ReceivePacket+0x68>)
 800f9a8:	7819      	ldrb	r1, [r3, #0]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f9b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f002 fbe9 	bl	801218c <USBD_LL_PrepareReceive>
 800f9ba:	e008      	b.n	800f9ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f9bc:	4b06      	ldr	r3, [pc, #24]	@ (800f9d8 <USBD_CDC_ReceivePacket+0x68>)
 800f9be:	7819      	ldrb	r1, [r3, #0]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f9c6:	2340      	movs	r3, #64	@ 0x40
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f002 fbdf 	bl	801218c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f9ce:	2300      	movs	r3, #0
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	2400009c 	.word	0x2400009c

0800f9dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b086      	sub	sp, #24
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	4613      	mov	r3, r2
 800f9e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d101      	bne.n	800f9f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f9f0:	2303      	movs	r3, #3
 800f9f2:	e01f      	b.n	800fa34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d003      	beq.n	800fa1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	68ba      	ldr	r2, [r7, #8]
 800fa16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	79fa      	ldrb	r2, [r7, #7]
 800fa26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f002 fa55 	bl	8011ed8 <USBD_LL_Init>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fa32:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3718      	adds	r7, #24
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa46:	2300      	movs	r3, #0
 800fa48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d101      	bne.n	800fa54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fa50:	2303      	movs	r3, #3
 800fa52:	e025      	b.n	800faa0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	683a      	ldr	r2, [r7, #0]
 800fa58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	32ae      	adds	r2, #174	@ 0xae
 800fa66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d00f      	beq.n	800fa90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	32ae      	adds	r2, #174	@ 0xae
 800fa7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa80:	f107 020e 	add.w	r2, r7, #14
 800fa84:	4610      	mov	r0, r2
 800fa86:	4798      	blx	r3
 800fa88:	4602      	mov	r2, r0
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fa96:	1c5a      	adds	r2, r3, #1
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3710      	adds	r7, #16
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f002 fa61 	bl	8011f78 <USBD_LL_Start>
 800fab6:	4603      	mov	r3, r0
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3708      	adds	r7, #8
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fac8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800faca:	4618      	mov	r0, r3
 800facc:	370c      	adds	r7, #12
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr

0800fad6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	b084      	sub	sp, #16
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
 800fade:	460b      	mov	r3, r1
 800fae0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fae2:	2300      	movs	r3, #0
 800fae4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800faec:	2b00      	cmp	r3, #0
 800faee:	d009      	beq.n	800fb04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	78fa      	ldrb	r2, [r7, #3]
 800fafa:	4611      	mov	r1, r2
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	4798      	blx	r3
 800fb00:	4603      	mov	r3, r0
 800fb02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fb0e:	b580      	push	{r7, lr}
 800fb10:	b084      	sub	sp, #16
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
 800fb16:	460b      	mov	r3, r1
 800fb18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	78fa      	ldrb	r2, [r7, #3]
 800fb28:	4611      	mov	r1, r2
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	4798      	blx	r3
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d001      	beq.n	800fb38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fb34:	2303      	movs	r3, #3
 800fb36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3710      	adds	r7, #16
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b084      	sub	sp, #16
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb52:	6839      	ldr	r1, [r7, #0]
 800fb54:	4618      	mov	r0, r3
 800fb56:	f001 f936 	bl	8010dc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fb68:	461a      	mov	r2, r3
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fb76:	f003 031f 	and.w	r3, r3, #31
 800fb7a:	2b02      	cmp	r3, #2
 800fb7c:	d01a      	beq.n	800fbb4 <USBD_LL_SetupStage+0x72>
 800fb7e:	2b02      	cmp	r3, #2
 800fb80:	d822      	bhi.n	800fbc8 <USBD_LL_SetupStage+0x86>
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d002      	beq.n	800fb8c <USBD_LL_SetupStage+0x4a>
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d00a      	beq.n	800fba0 <USBD_LL_SetupStage+0x5e>
 800fb8a:	e01d      	b.n	800fbc8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb92:	4619      	mov	r1, r3
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 fb63 	bl	8010260 <USBD_StdDevReq>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	73fb      	strb	r3, [r7, #15]
      break;
 800fb9e:	e020      	b.n	800fbe2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fba6:	4619      	mov	r1, r3
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 fbcb 	bl	8010344 <USBD_StdItfReq>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	73fb      	strb	r3, [r7, #15]
      break;
 800fbb2:	e016      	b.n	800fbe2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fbba:	4619      	mov	r1, r3
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 fc2d 	bl	801041c <USBD_StdEPReq>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	73fb      	strb	r3, [r7, #15]
      break;
 800fbc6:	e00c      	b.n	800fbe2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fbce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f002 fa2e 	bl	8012038 <USBD_LL_StallEP>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	73fb      	strb	r3, [r7, #15]
      break;
 800fbe0:	bf00      	nop
  }

  return ret;
 800fbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b086      	sub	sp, #24
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	607a      	str	r2, [r7, #4]
 800fbf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fbfe:	7afb      	ldrb	r3, [r7, #11]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d16e      	bne.n	800fce2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fc0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	f040 8098 	bne.w	800fd48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	689a      	ldr	r2, [r3, #8]
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d913      	bls.n	800fc4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	689a      	ldr	r2, [r3, #8]
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	1ad2      	subs	r2, r2, r3
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	68da      	ldr	r2, [r3, #12]
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	689b      	ldr	r3, [r3, #8]
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	bf28      	it	cs
 800fc3e:	4613      	movcs	r3, r2
 800fc40:	461a      	mov	r2, r3
 800fc42:	6879      	ldr	r1, [r7, #4]
 800fc44:	68f8      	ldr	r0, [r7, #12]
 800fc46:	f001 f9b2 	bl	8010fae <USBD_CtlContinueRx>
 800fc4a:	e07d      	b.n	800fd48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fc52:	f003 031f 	and.w	r3, r3, #31
 800fc56:	2b02      	cmp	r3, #2
 800fc58:	d014      	beq.n	800fc84 <USBD_LL_DataOutStage+0x98>
 800fc5a:	2b02      	cmp	r3, #2
 800fc5c:	d81d      	bhi.n	800fc9a <USBD_LL_DataOutStage+0xae>
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d002      	beq.n	800fc68 <USBD_LL_DataOutStage+0x7c>
 800fc62:	2b01      	cmp	r3, #1
 800fc64:	d003      	beq.n	800fc6e <USBD_LL_DataOutStage+0x82>
 800fc66:	e018      	b.n	800fc9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	75bb      	strb	r3, [r7, #22]
            break;
 800fc6c:	e018      	b.n	800fca0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	4619      	mov	r1, r3
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f000 fa64 	bl	8010146 <USBD_CoreFindIF>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	75bb      	strb	r3, [r7, #22]
            break;
 800fc82:	e00d      	b.n	800fca0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fc8a:	b2db      	uxtb	r3, r3
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f000 fa66 	bl	8010160 <USBD_CoreFindEP>
 800fc94:	4603      	mov	r3, r0
 800fc96:	75bb      	strb	r3, [r7, #22]
            break;
 800fc98:	e002      	b.n	800fca0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	75bb      	strb	r3, [r7, #22]
            break;
 800fc9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fca0:	7dbb      	ldrb	r3, [r7, #22]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d119      	bne.n	800fcda <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	2b03      	cmp	r3, #3
 800fcb0:	d113      	bne.n	800fcda <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fcb2:	7dba      	ldrb	r2, [r7, #22]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	32ae      	adds	r2, #174	@ 0xae
 800fcb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcbc:	691b      	ldr	r3, [r3, #16]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00b      	beq.n	800fcda <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fcc2:	7dba      	ldrb	r2, [r7, #22]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fcca:	7dba      	ldrb	r2, [r7, #22]
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	32ae      	adds	r2, #174	@ 0xae
 800fcd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f001 f978 	bl	8010fd0 <USBD_CtlSendStatus>
 800fce0:	e032      	b.n	800fd48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fce2:	7afb      	ldrb	r3, [r7, #11]
 800fce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	4619      	mov	r1, r3
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f000 fa37 	bl	8010160 <USBD_CoreFindEP>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fcf6:	7dbb      	ldrb	r3, [r7, #22]
 800fcf8:	2bff      	cmp	r3, #255	@ 0xff
 800fcfa:	d025      	beq.n	800fd48 <USBD_LL_DataOutStage+0x15c>
 800fcfc:	7dbb      	ldrb	r3, [r7, #22]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d122      	bne.n	800fd48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	2b03      	cmp	r3, #3
 800fd0c:	d117      	bne.n	800fd3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fd0e:	7dba      	ldrb	r2, [r7, #22]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	32ae      	adds	r2, #174	@ 0xae
 800fd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd18:	699b      	ldr	r3, [r3, #24]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d00f      	beq.n	800fd3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fd1e:	7dba      	ldrb	r2, [r7, #22]
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fd26:	7dba      	ldrb	r2, [r7, #22]
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	32ae      	adds	r2, #174	@ 0xae
 800fd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd30:	699b      	ldr	r3, [r3, #24]
 800fd32:	7afa      	ldrb	r2, [r7, #11]
 800fd34:	4611      	mov	r1, r2
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	4798      	blx	r3
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fd3e:	7dfb      	ldrb	r3, [r7, #23]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d001      	beq.n	800fd48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fd44:	7dfb      	ldrb	r3, [r7, #23]
 800fd46:	e000      	b.n	800fd4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fd48:	2300      	movs	r3, #0
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3718      	adds	r7, #24
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}

0800fd52 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b086      	sub	sp, #24
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	60f8      	str	r0, [r7, #12]
 800fd5a:	460b      	mov	r3, r1
 800fd5c:	607a      	str	r2, [r7, #4]
 800fd5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fd60:	7afb      	ldrb	r3, [r7, #11]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d16f      	bne.n	800fe46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	3314      	adds	r3, #20
 800fd6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fd72:	2b02      	cmp	r3, #2
 800fd74:	d15a      	bne.n	800fe2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	689a      	ldr	r2, [r3, #8]
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d914      	bls.n	800fdac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	689a      	ldr	r2, [r3, #8]
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	1ad2      	subs	r2, r2, r3
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	689b      	ldr	r3, [r3, #8]
 800fd94:	461a      	mov	r2, r3
 800fd96:	6879      	ldr	r1, [r7, #4]
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f001 f8da 	bl	8010f52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd9e:	2300      	movs	r3, #0
 800fda0:	2200      	movs	r2, #0
 800fda2:	2100      	movs	r1, #0
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	f002 f9f1 	bl	801218c <USBD_LL_PrepareReceive>
 800fdaa:	e03f      	b.n	800fe2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	68da      	ldr	r2, [r3, #12]
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	689b      	ldr	r3, [r3, #8]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d11c      	bne.n	800fdf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	685a      	ldr	r2, [r3, #4]
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d316      	bcc.n	800fdf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	685a      	ldr	r2, [r3, #4]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d20f      	bcs.n	800fdf2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	2100      	movs	r1, #0
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f001 f8bb 	bl	8010f52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2200      	movs	r2, #0
 800fde0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fde4:	2300      	movs	r3, #0
 800fde6:	2200      	movs	r2, #0
 800fde8:	2100      	movs	r1, #0
 800fdea:	68f8      	ldr	r0, [r7, #12]
 800fdec:	f002 f9ce 	bl	801218c <USBD_LL_PrepareReceive>
 800fdf0:	e01c      	b.n	800fe2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	2b03      	cmp	r3, #3
 800fdfc:	d10f      	bne.n	800fe1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d009      	beq.n	800fe1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe1e:	2180      	movs	r1, #128	@ 0x80
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f002 f909 	bl	8012038 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f001 f8e5 	bl	8010ff6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d03a      	beq.n	800feac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f7ff fe42 	bl	800fac0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800fe44:	e032      	b.n	800feac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fe46:	7afb      	ldrb	r3, [r7, #11]
 800fe48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	4619      	mov	r1, r3
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f000 f985 	bl	8010160 <USBD_CoreFindEP>
 800fe56:	4603      	mov	r3, r0
 800fe58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fe5a:	7dfb      	ldrb	r3, [r7, #23]
 800fe5c:	2bff      	cmp	r3, #255	@ 0xff
 800fe5e:	d025      	beq.n	800feac <USBD_LL_DataInStage+0x15a>
 800fe60:	7dfb      	ldrb	r3, [r7, #23]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d122      	bne.n	800feac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d11c      	bne.n	800feac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fe72:	7dfa      	ldrb	r2, [r7, #23]
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	32ae      	adds	r2, #174	@ 0xae
 800fe78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe7c:	695b      	ldr	r3, [r3, #20]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d014      	beq.n	800feac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fe82:	7dfa      	ldrb	r2, [r7, #23]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fe8a:	7dfa      	ldrb	r2, [r7, #23]
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	32ae      	adds	r2, #174	@ 0xae
 800fe90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe94:	695b      	ldr	r3, [r3, #20]
 800fe96:	7afa      	ldrb	r2, [r7, #11]
 800fe98:	4611      	mov	r1, r2
 800fe9a:	68f8      	ldr	r0, [r7, #12]
 800fe9c:	4798      	blx	r3
 800fe9e:	4603      	mov	r3, r0
 800fea0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fea2:	7dbb      	ldrb	r3, [r7, #22]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d001      	beq.n	800feac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fea8:	7dbb      	ldrb	r3, [r7, #22]
 800feaa:	e000      	b.n	800feae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800feac:	2300      	movs	r3, #0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3718      	adds	r7, #24
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b084      	sub	sp, #16
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800febe:	2300      	movs	r3, #0
 800fec0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2201      	movs	r2, #1
 800fec6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2200      	movs	r2, #0
 800fed6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2200      	movs	r2, #0
 800fedc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2200      	movs	r2, #0
 800fee4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d014      	beq.n	800ff1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00e      	beq.n	800ff1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	6852      	ldr	r2, [r2, #4]
 800ff0a:	b2d2      	uxtb	r2, r2
 800ff0c:	4611      	mov	r1, r2
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	4798      	blx	r3
 800ff12:	4603      	mov	r3, r0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d001      	beq.n	800ff1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ff18:	2303      	movs	r3, #3
 800ff1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ff1c:	2340      	movs	r3, #64	@ 0x40
 800ff1e:	2200      	movs	r2, #0
 800ff20:	2100      	movs	r1, #0
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f002 f843 	bl	8011fae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2240      	movs	r2, #64	@ 0x40
 800ff34:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ff38:	2340      	movs	r3, #64	@ 0x40
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	2180      	movs	r1, #128	@ 0x80
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f002 f835 	bl	8011fae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2201      	movs	r2, #1
 800ff48:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2240      	movs	r2, #64	@ 0x40
 800ff4e:	621a      	str	r2, [r3, #32]

  return ret;
 800ff50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b083      	sub	sp, #12
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	460b      	mov	r3, r1
 800ff64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	78fa      	ldrb	r2, [r7, #3]
 800ff6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ff6c:	2300      	movs	r3, #0
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	370c      	adds	r7, #12
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr

0800ff7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ff7a:	b480      	push	{r7}
 800ff7c:	b083      	sub	sp, #12
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	2b04      	cmp	r3, #4
 800ff8c:	d006      	beq.n	800ff9c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff94:	b2da      	uxtb	r2, r3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2204      	movs	r2, #4
 800ffa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	370c      	adds	r7, #12
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ffb2:	b480      	push	{r7}
 800ffb4:	b083      	sub	sp, #12
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	2b04      	cmp	r3, #4
 800ffc4:	d106      	bne.n	800ffd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ffd4:	2300      	movs	r3, #0
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	370c      	adds	r7, #12
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr

0800ffe2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b082      	sub	sp, #8
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	2b03      	cmp	r3, #3
 800fff4:	d110      	bne.n	8010018 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d00b      	beq.n	8010018 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010006:	69db      	ldr	r3, [r3, #28]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d005      	beq.n	8010018 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010012:	69db      	ldr	r3, [r3, #28]
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010018:	2300      	movs	r3, #0
}
 801001a:	4618      	mov	r0, r3
 801001c:	3708      	adds	r7, #8
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010022:	b580      	push	{r7, lr}
 8010024:	b082      	sub	sp, #8
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
 801002a:	460b      	mov	r3, r1
 801002c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	32ae      	adds	r2, #174	@ 0xae
 8010038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d101      	bne.n	8010044 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010040:	2303      	movs	r3, #3
 8010042:	e01c      	b.n	801007e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801004a:	b2db      	uxtb	r3, r3
 801004c:	2b03      	cmp	r3, #3
 801004e:	d115      	bne.n	801007c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	32ae      	adds	r2, #174	@ 0xae
 801005a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801005e:	6a1b      	ldr	r3, [r3, #32]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d00b      	beq.n	801007c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	32ae      	adds	r2, #174	@ 0xae
 801006e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010072:	6a1b      	ldr	r3, [r3, #32]
 8010074:	78fa      	ldrb	r2, [r7, #3]
 8010076:	4611      	mov	r1, r2
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b082      	sub	sp, #8
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
 801008e:	460b      	mov	r3, r1
 8010090:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	32ae      	adds	r2, #174	@ 0xae
 801009c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d101      	bne.n	80100a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80100a4:	2303      	movs	r3, #3
 80100a6:	e01c      	b.n	80100e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	2b03      	cmp	r3, #3
 80100b2:	d115      	bne.n	80100e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	32ae      	adds	r2, #174	@ 0xae
 80100be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d00b      	beq.n	80100e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	32ae      	adds	r2, #174	@ 0xae
 80100d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100d8:	78fa      	ldrb	r2, [r7, #3]
 80100da:	4611      	mov	r1, r2
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80100e0:	2300      	movs	r3, #0
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3708      	adds	r7, #8
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80100ea:	b480      	push	{r7}
 80100ec:	b083      	sub	sp, #12
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr

08010100 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010108:	2300      	movs	r3, #0
 801010a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2201      	movs	r2, #1
 8010110:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801011a:	2b00      	cmp	r3, #0
 801011c:	d00e      	beq.n	801013c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010124:	685b      	ldr	r3, [r3, #4]
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	6852      	ldr	r2, [r2, #4]
 801012a:	b2d2      	uxtb	r2, r2
 801012c:	4611      	mov	r1, r2
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	4798      	blx	r3
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d001      	beq.n	801013c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010138:	2303      	movs	r3, #3
 801013a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801013c:	7bfb      	ldrb	r3, [r7, #15]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3710      	adds	r7, #16
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}

08010146 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010146:	b480      	push	{r7}
 8010148:	b083      	sub	sp, #12
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
 801014e:	460b      	mov	r3, r1
 8010150:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010152:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010154:	4618      	mov	r0, r3
 8010156:	370c      	adds	r7, #12
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr

08010160 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	460b      	mov	r3, r1
 801016a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801016c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801016e:	4618      	mov	r0, r3
 8010170:	370c      	adds	r7, #12
 8010172:	46bd      	mov	sp, r7
 8010174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010178:	4770      	bx	lr

0801017a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801017a:	b580      	push	{r7, lr}
 801017c:	b086      	sub	sp, #24
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
 8010182:	460b      	mov	r3, r1
 8010184:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801018e:	2300      	movs	r3, #0
 8010190:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	885b      	ldrh	r3, [r3, #2]
 8010196:	b29b      	uxth	r3, r3
 8010198:	68fa      	ldr	r2, [r7, #12]
 801019a:	7812      	ldrb	r2, [r2, #0]
 801019c:	4293      	cmp	r3, r2
 801019e:	d91f      	bls.n	80101e0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80101a6:	e013      	b.n	80101d0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80101a8:	f107 030a 	add.w	r3, r7, #10
 80101ac:	4619      	mov	r1, r3
 80101ae:	6978      	ldr	r0, [r7, #20]
 80101b0:	f000 f81b 	bl	80101ea <USBD_GetNextDesc>
 80101b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	785b      	ldrb	r3, [r3, #1]
 80101ba:	2b05      	cmp	r3, #5
 80101bc:	d108      	bne.n	80101d0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	789b      	ldrb	r3, [r3, #2]
 80101c6:	78fa      	ldrb	r2, [r7, #3]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d008      	beq.n	80101de <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80101cc:	2300      	movs	r3, #0
 80101ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	885b      	ldrh	r3, [r3, #2]
 80101d4:	b29a      	uxth	r2, r3
 80101d6:	897b      	ldrh	r3, [r7, #10]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d8e5      	bhi.n	80101a8 <USBD_GetEpDesc+0x2e>
 80101dc:	e000      	b.n	80101e0 <USBD_GetEpDesc+0x66>
          break;
 80101de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80101e0:	693b      	ldr	r3, [r7, #16]
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3718      	adds	r7, #24
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80101ea:	b480      	push	{r7}
 80101ec:	b085      	sub	sp, #20
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
 80101f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	881b      	ldrh	r3, [r3, #0]
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	7812      	ldrb	r2, [r2, #0]
 8010200:	4413      	add	r3, r2
 8010202:	b29a      	uxth	r2, r3
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	461a      	mov	r2, r3
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4413      	add	r3, r2
 8010212:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010214:	68fb      	ldr	r3, [r7, #12]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3714      	adds	r7, #20
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr

08010222 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010222:	b480      	push	{r7}
 8010224:	b087      	sub	sp, #28
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	3301      	adds	r3, #1
 8010238:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010240:	8a3b      	ldrh	r3, [r7, #16]
 8010242:	021b      	lsls	r3, r3, #8
 8010244:	b21a      	sxth	r2, r3
 8010246:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801024a:	4313      	orrs	r3, r2
 801024c:	b21b      	sxth	r3, r3
 801024e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010250:	89fb      	ldrh	r3, [r7, #14]
}
 8010252:	4618      	mov	r0, r3
 8010254:	371c      	adds	r7, #28
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr
	...

08010260 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801026a:	2300      	movs	r3, #0
 801026c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010276:	2b40      	cmp	r3, #64	@ 0x40
 8010278:	d005      	beq.n	8010286 <USBD_StdDevReq+0x26>
 801027a:	2b40      	cmp	r3, #64	@ 0x40
 801027c:	d857      	bhi.n	801032e <USBD_StdDevReq+0xce>
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00f      	beq.n	80102a2 <USBD_StdDevReq+0x42>
 8010282:	2b20      	cmp	r3, #32
 8010284:	d153      	bne.n	801032e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	32ae      	adds	r2, #174	@ 0xae
 8010290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	6839      	ldr	r1, [r7, #0]
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	4798      	blx	r3
 801029c:	4603      	mov	r3, r0
 801029e:	73fb      	strb	r3, [r7, #15]
      break;
 80102a0:	e04a      	b.n	8010338 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	785b      	ldrb	r3, [r3, #1]
 80102a6:	2b09      	cmp	r3, #9
 80102a8:	d83b      	bhi.n	8010322 <USBD_StdDevReq+0xc2>
 80102aa:	a201      	add	r2, pc, #4	@ (adr r2, 80102b0 <USBD_StdDevReq+0x50>)
 80102ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102b0:	08010305 	.word	0x08010305
 80102b4:	08010319 	.word	0x08010319
 80102b8:	08010323 	.word	0x08010323
 80102bc:	0801030f 	.word	0x0801030f
 80102c0:	08010323 	.word	0x08010323
 80102c4:	080102e3 	.word	0x080102e3
 80102c8:	080102d9 	.word	0x080102d9
 80102cc:	08010323 	.word	0x08010323
 80102d0:	080102fb 	.word	0x080102fb
 80102d4:	080102ed 	.word	0x080102ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80102d8:	6839      	ldr	r1, [r7, #0]
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f000 fa3c 	bl	8010758 <USBD_GetDescriptor>
          break;
 80102e0:	e024      	b.n	801032c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80102e2:	6839      	ldr	r1, [r7, #0]
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 fbcb 	bl	8010a80 <USBD_SetAddress>
          break;
 80102ea:	e01f      	b.n	801032c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80102ec:	6839      	ldr	r1, [r7, #0]
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f000 fc0a 	bl	8010b08 <USBD_SetConfig>
 80102f4:	4603      	mov	r3, r0
 80102f6:	73fb      	strb	r3, [r7, #15]
          break;
 80102f8:	e018      	b.n	801032c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80102fa:	6839      	ldr	r1, [r7, #0]
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 fcad 	bl	8010c5c <USBD_GetConfig>
          break;
 8010302:	e013      	b.n	801032c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010304:	6839      	ldr	r1, [r7, #0]
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 fcde 	bl	8010cc8 <USBD_GetStatus>
          break;
 801030c:	e00e      	b.n	801032c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801030e:	6839      	ldr	r1, [r7, #0]
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 fd0d 	bl	8010d30 <USBD_SetFeature>
          break;
 8010316:	e009      	b.n	801032c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010318:	6839      	ldr	r1, [r7, #0]
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 fd31 	bl	8010d82 <USBD_ClrFeature>
          break;
 8010320:	e004      	b.n	801032c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010322:	6839      	ldr	r1, [r7, #0]
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 fd88 	bl	8010e3a <USBD_CtlError>
          break;
 801032a:	bf00      	nop
      }
      break;
 801032c:	e004      	b.n	8010338 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801032e:	6839      	ldr	r1, [r7, #0]
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 fd82 	bl	8010e3a <USBD_CtlError>
      break;
 8010336:	bf00      	nop
  }

  return ret;
 8010338:	7bfb      	ldrb	r3, [r7, #15]
}
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop

08010344 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801034e:	2300      	movs	r3, #0
 8010350:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801035a:	2b40      	cmp	r3, #64	@ 0x40
 801035c:	d005      	beq.n	801036a <USBD_StdItfReq+0x26>
 801035e:	2b40      	cmp	r3, #64	@ 0x40
 8010360:	d852      	bhi.n	8010408 <USBD_StdItfReq+0xc4>
 8010362:	2b00      	cmp	r3, #0
 8010364:	d001      	beq.n	801036a <USBD_StdItfReq+0x26>
 8010366:	2b20      	cmp	r3, #32
 8010368:	d14e      	bne.n	8010408 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010370:	b2db      	uxtb	r3, r3
 8010372:	3b01      	subs	r3, #1
 8010374:	2b02      	cmp	r3, #2
 8010376:	d840      	bhi.n	80103fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	889b      	ldrh	r3, [r3, #4]
 801037c:	b2db      	uxtb	r3, r3
 801037e:	2b01      	cmp	r3, #1
 8010380:	d836      	bhi.n	80103f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	889b      	ldrh	r3, [r3, #4]
 8010386:	b2db      	uxtb	r3, r3
 8010388:	4619      	mov	r1, r3
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f7ff fedb 	bl	8010146 <USBD_CoreFindIF>
 8010390:	4603      	mov	r3, r0
 8010392:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010394:	7bbb      	ldrb	r3, [r7, #14]
 8010396:	2bff      	cmp	r3, #255	@ 0xff
 8010398:	d01d      	beq.n	80103d6 <USBD_StdItfReq+0x92>
 801039a:	7bbb      	ldrb	r3, [r7, #14]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d11a      	bne.n	80103d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80103a0:	7bba      	ldrb	r2, [r7, #14]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	32ae      	adds	r2, #174	@ 0xae
 80103a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103aa:	689b      	ldr	r3, [r3, #8]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d00f      	beq.n	80103d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80103b0:	7bba      	ldrb	r2, [r7, #14]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80103b8:	7bba      	ldrb	r2, [r7, #14]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	32ae      	adds	r2, #174	@ 0xae
 80103be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	6839      	ldr	r1, [r7, #0]
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	4798      	blx	r3
 80103ca:	4603      	mov	r3, r0
 80103cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80103ce:	e004      	b.n	80103da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80103d0:	2303      	movs	r3, #3
 80103d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80103d4:	e001      	b.n	80103da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80103d6:	2303      	movs	r3, #3
 80103d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	88db      	ldrh	r3, [r3, #6]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d110      	bne.n	8010404 <USBD_StdItfReq+0xc0>
 80103e2:	7bfb      	ldrb	r3, [r7, #15]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d10d      	bne.n	8010404 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f000 fdf1 	bl	8010fd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80103ee:	e009      	b.n	8010404 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80103f0:	6839      	ldr	r1, [r7, #0]
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 fd21 	bl	8010e3a <USBD_CtlError>
          break;
 80103f8:	e004      	b.n	8010404 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80103fa:	6839      	ldr	r1, [r7, #0]
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f000 fd1c 	bl	8010e3a <USBD_CtlError>
          break;
 8010402:	e000      	b.n	8010406 <USBD_StdItfReq+0xc2>
          break;
 8010404:	bf00      	nop
      }
      break;
 8010406:	e004      	b.n	8010412 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010408:	6839      	ldr	r1, [r7, #0]
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f000 fd15 	bl	8010e3a <USBD_CtlError>
      break;
 8010410:	bf00      	nop
  }

  return ret;
 8010412:	7bfb      	ldrb	r3, [r7, #15]
}
 8010414:	4618      	mov	r0, r3
 8010416:	3710      	adds	r7, #16
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010426:	2300      	movs	r3, #0
 8010428:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	889b      	ldrh	r3, [r3, #4]
 801042e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010438:	2b40      	cmp	r3, #64	@ 0x40
 801043a:	d007      	beq.n	801044c <USBD_StdEPReq+0x30>
 801043c:	2b40      	cmp	r3, #64	@ 0x40
 801043e:	f200 817f 	bhi.w	8010740 <USBD_StdEPReq+0x324>
 8010442:	2b00      	cmp	r3, #0
 8010444:	d02a      	beq.n	801049c <USBD_StdEPReq+0x80>
 8010446:	2b20      	cmp	r3, #32
 8010448:	f040 817a 	bne.w	8010740 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801044c:	7bbb      	ldrb	r3, [r7, #14]
 801044e:	4619      	mov	r1, r3
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff fe85 	bl	8010160 <USBD_CoreFindEP>
 8010456:	4603      	mov	r3, r0
 8010458:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801045a:	7b7b      	ldrb	r3, [r7, #13]
 801045c:	2bff      	cmp	r3, #255	@ 0xff
 801045e:	f000 8174 	beq.w	801074a <USBD_StdEPReq+0x32e>
 8010462:	7b7b      	ldrb	r3, [r7, #13]
 8010464:	2b00      	cmp	r3, #0
 8010466:	f040 8170 	bne.w	801074a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801046a:	7b7a      	ldrb	r2, [r7, #13]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010472:	7b7a      	ldrb	r2, [r7, #13]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	32ae      	adds	r2, #174	@ 0xae
 8010478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	2b00      	cmp	r3, #0
 8010480:	f000 8163 	beq.w	801074a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010484:	7b7a      	ldrb	r2, [r7, #13]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	32ae      	adds	r2, #174	@ 0xae
 801048a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	6839      	ldr	r1, [r7, #0]
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	4798      	blx	r3
 8010496:	4603      	mov	r3, r0
 8010498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801049a:	e156      	b.n	801074a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	785b      	ldrb	r3, [r3, #1]
 80104a0:	2b03      	cmp	r3, #3
 80104a2:	d008      	beq.n	80104b6 <USBD_StdEPReq+0x9a>
 80104a4:	2b03      	cmp	r3, #3
 80104a6:	f300 8145 	bgt.w	8010734 <USBD_StdEPReq+0x318>
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	f000 809b 	beq.w	80105e6 <USBD_StdEPReq+0x1ca>
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d03c      	beq.n	801052e <USBD_StdEPReq+0x112>
 80104b4:	e13e      	b.n	8010734 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104bc:	b2db      	uxtb	r3, r3
 80104be:	2b02      	cmp	r3, #2
 80104c0:	d002      	beq.n	80104c8 <USBD_StdEPReq+0xac>
 80104c2:	2b03      	cmp	r3, #3
 80104c4:	d016      	beq.n	80104f4 <USBD_StdEPReq+0xd8>
 80104c6:	e02c      	b.n	8010522 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80104c8:	7bbb      	ldrb	r3, [r7, #14]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00d      	beq.n	80104ea <USBD_StdEPReq+0xce>
 80104ce:	7bbb      	ldrb	r3, [r7, #14]
 80104d0:	2b80      	cmp	r3, #128	@ 0x80
 80104d2:	d00a      	beq.n	80104ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80104d4:	7bbb      	ldrb	r3, [r7, #14]
 80104d6:	4619      	mov	r1, r3
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f001 fdad 	bl	8012038 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80104de:	2180      	movs	r1, #128	@ 0x80
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f001 fda9 	bl	8012038 <USBD_LL_StallEP>
 80104e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80104e8:	e020      	b.n	801052c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80104ea:	6839      	ldr	r1, [r7, #0]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 fca4 	bl	8010e3a <USBD_CtlError>
              break;
 80104f2:	e01b      	b.n	801052c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	885b      	ldrh	r3, [r3, #2]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d10e      	bne.n	801051a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80104fc:	7bbb      	ldrb	r3, [r7, #14]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00b      	beq.n	801051a <USBD_StdEPReq+0xfe>
 8010502:	7bbb      	ldrb	r3, [r7, #14]
 8010504:	2b80      	cmp	r3, #128	@ 0x80
 8010506:	d008      	beq.n	801051a <USBD_StdEPReq+0xfe>
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	88db      	ldrh	r3, [r3, #6]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d104      	bne.n	801051a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010510:	7bbb      	ldrb	r3, [r7, #14]
 8010512:	4619      	mov	r1, r3
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f001 fd8f 	bl	8012038 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f000 fd58 	bl	8010fd0 <USBD_CtlSendStatus>

              break;
 8010520:	e004      	b.n	801052c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010522:	6839      	ldr	r1, [r7, #0]
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f000 fc88 	bl	8010e3a <USBD_CtlError>
              break;
 801052a:	bf00      	nop
          }
          break;
 801052c:	e107      	b.n	801073e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010534:	b2db      	uxtb	r3, r3
 8010536:	2b02      	cmp	r3, #2
 8010538:	d002      	beq.n	8010540 <USBD_StdEPReq+0x124>
 801053a:	2b03      	cmp	r3, #3
 801053c:	d016      	beq.n	801056c <USBD_StdEPReq+0x150>
 801053e:	e04b      	b.n	80105d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010540:	7bbb      	ldrb	r3, [r7, #14]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00d      	beq.n	8010562 <USBD_StdEPReq+0x146>
 8010546:	7bbb      	ldrb	r3, [r7, #14]
 8010548:	2b80      	cmp	r3, #128	@ 0x80
 801054a:	d00a      	beq.n	8010562 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801054c:	7bbb      	ldrb	r3, [r7, #14]
 801054e:	4619      	mov	r1, r3
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f001 fd71 	bl	8012038 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010556:	2180      	movs	r1, #128	@ 0x80
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f001 fd6d 	bl	8012038 <USBD_LL_StallEP>
 801055e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010560:	e040      	b.n	80105e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010562:	6839      	ldr	r1, [r7, #0]
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 fc68 	bl	8010e3a <USBD_CtlError>
              break;
 801056a:	e03b      	b.n	80105e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	885b      	ldrh	r3, [r3, #2]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d136      	bne.n	80105e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010574:	7bbb      	ldrb	r3, [r7, #14]
 8010576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801057a:	2b00      	cmp	r3, #0
 801057c:	d004      	beq.n	8010588 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801057e:	7bbb      	ldrb	r3, [r7, #14]
 8010580:	4619      	mov	r1, r3
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f001 fd77 	bl	8012076 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 fd21 	bl	8010fd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801058e:	7bbb      	ldrb	r3, [r7, #14]
 8010590:	4619      	mov	r1, r3
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f7ff fde4 	bl	8010160 <USBD_CoreFindEP>
 8010598:	4603      	mov	r3, r0
 801059a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801059c:	7b7b      	ldrb	r3, [r7, #13]
 801059e:	2bff      	cmp	r3, #255	@ 0xff
 80105a0:	d01f      	beq.n	80105e2 <USBD_StdEPReq+0x1c6>
 80105a2:	7b7b      	ldrb	r3, [r7, #13]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d11c      	bne.n	80105e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80105a8:	7b7a      	ldrb	r2, [r7, #13]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80105b0:	7b7a      	ldrb	r2, [r7, #13]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	32ae      	adds	r2, #174	@ 0xae
 80105b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105ba:	689b      	ldr	r3, [r3, #8]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d010      	beq.n	80105e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80105c0:	7b7a      	ldrb	r2, [r7, #13]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	32ae      	adds	r2, #174	@ 0xae
 80105c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105ca:	689b      	ldr	r3, [r3, #8]
 80105cc:	6839      	ldr	r1, [r7, #0]
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	4798      	blx	r3
 80105d2:	4603      	mov	r3, r0
 80105d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80105d6:	e004      	b.n	80105e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80105d8:	6839      	ldr	r1, [r7, #0]
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f000 fc2d 	bl	8010e3a <USBD_CtlError>
              break;
 80105e0:	e000      	b.n	80105e4 <USBD_StdEPReq+0x1c8>
              break;
 80105e2:	bf00      	nop
          }
          break;
 80105e4:	e0ab      	b.n	801073e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	d002      	beq.n	80105f8 <USBD_StdEPReq+0x1dc>
 80105f2:	2b03      	cmp	r3, #3
 80105f4:	d032      	beq.n	801065c <USBD_StdEPReq+0x240>
 80105f6:	e097      	b.n	8010728 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80105f8:	7bbb      	ldrb	r3, [r7, #14]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d007      	beq.n	801060e <USBD_StdEPReq+0x1f2>
 80105fe:	7bbb      	ldrb	r3, [r7, #14]
 8010600:	2b80      	cmp	r3, #128	@ 0x80
 8010602:	d004      	beq.n	801060e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010604:	6839      	ldr	r1, [r7, #0]
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f000 fc17 	bl	8010e3a <USBD_CtlError>
                break;
 801060c:	e091      	b.n	8010732 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801060e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010612:	2b00      	cmp	r3, #0
 8010614:	da0b      	bge.n	801062e <USBD_StdEPReq+0x212>
 8010616:	7bbb      	ldrb	r3, [r7, #14]
 8010618:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801061c:	4613      	mov	r3, r2
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	4413      	add	r3, r2
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	3310      	adds	r3, #16
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	4413      	add	r3, r2
 801062a:	3304      	adds	r3, #4
 801062c:	e00b      	b.n	8010646 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801062e:	7bbb      	ldrb	r3, [r7, #14]
 8010630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010634:	4613      	mov	r3, r2
 8010636:	009b      	lsls	r3, r3, #2
 8010638:	4413      	add	r3, r2
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	4413      	add	r3, r2
 8010644:	3304      	adds	r3, #4
 8010646:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	2200      	movs	r2, #0
 801064c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	2202      	movs	r2, #2
 8010652:	4619      	mov	r1, r3
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 fc61 	bl	8010f1c <USBD_CtlSendData>
              break;
 801065a:	e06a      	b.n	8010732 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801065c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010660:	2b00      	cmp	r3, #0
 8010662:	da11      	bge.n	8010688 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010664:	7bbb      	ldrb	r3, [r7, #14]
 8010666:	f003 020f 	and.w	r2, r3, #15
 801066a:	6879      	ldr	r1, [r7, #4]
 801066c:	4613      	mov	r3, r2
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	4413      	add	r3, r2
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	440b      	add	r3, r1
 8010676:	3324      	adds	r3, #36	@ 0x24
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d117      	bne.n	80106ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801067e:	6839      	ldr	r1, [r7, #0]
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 fbda 	bl	8010e3a <USBD_CtlError>
                  break;
 8010686:	e054      	b.n	8010732 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010688:	7bbb      	ldrb	r3, [r7, #14]
 801068a:	f003 020f 	and.w	r2, r3, #15
 801068e:	6879      	ldr	r1, [r7, #4]
 8010690:	4613      	mov	r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	4413      	add	r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	440b      	add	r3, r1
 801069a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801069e:	881b      	ldrh	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d104      	bne.n	80106ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80106a4:	6839      	ldr	r1, [r7, #0]
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f000 fbc7 	bl	8010e3a <USBD_CtlError>
                  break;
 80106ac:	e041      	b.n	8010732 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80106ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	da0b      	bge.n	80106ce <USBD_StdEPReq+0x2b2>
 80106b6:	7bbb      	ldrb	r3, [r7, #14]
 80106b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80106bc:	4613      	mov	r3, r2
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	4413      	add	r3, r2
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	3310      	adds	r3, #16
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	4413      	add	r3, r2
 80106ca:	3304      	adds	r3, #4
 80106cc:	e00b      	b.n	80106e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80106ce:	7bbb      	ldrb	r3, [r7, #14]
 80106d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80106d4:	4613      	mov	r3, r2
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	4413      	add	r3, r2
 80106da:	009b      	lsls	r3, r3, #2
 80106dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80106e0:	687a      	ldr	r2, [r7, #4]
 80106e2:	4413      	add	r3, r2
 80106e4:	3304      	adds	r3, #4
 80106e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80106e8:	7bbb      	ldrb	r3, [r7, #14]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d002      	beq.n	80106f4 <USBD_StdEPReq+0x2d8>
 80106ee:	7bbb      	ldrb	r3, [r7, #14]
 80106f0:	2b80      	cmp	r3, #128	@ 0x80
 80106f2:	d103      	bne.n	80106fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	2200      	movs	r2, #0
 80106f8:	601a      	str	r2, [r3, #0]
 80106fa:	e00e      	b.n	801071a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80106fc:	7bbb      	ldrb	r3, [r7, #14]
 80106fe:	4619      	mov	r1, r3
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f001 fcd7 	bl	80120b4 <USBD_LL_IsStallEP>
 8010706:	4603      	mov	r3, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	d003      	beq.n	8010714 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	2201      	movs	r2, #1
 8010710:	601a      	str	r2, [r3, #0]
 8010712:	e002      	b.n	801071a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	2200      	movs	r2, #0
 8010718:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	2202      	movs	r2, #2
 801071e:	4619      	mov	r1, r3
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 fbfb 	bl	8010f1c <USBD_CtlSendData>
              break;
 8010726:	e004      	b.n	8010732 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010728:	6839      	ldr	r1, [r7, #0]
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 fb85 	bl	8010e3a <USBD_CtlError>
              break;
 8010730:	bf00      	nop
          }
          break;
 8010732:	e004      	b.n	801073e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010734:	6839      	ldr	r1, [r7, #0]
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f000 fb7f 	bl	8010e3a <USBD_CtlError>
          break;
 801073c:	bf00      	nop
      }
      break;
 801073e:	e005      	b.n	801074c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010740:	6839      	ldr	r1, [r7, #0]
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 fb79 	bl	8010e3a <USBD_CtlError>
      break;
 8010748:	e000      	b.n	801074c <USBD_StdEPReq+0x330>
      break;
 801074a:	bf00      	nop
  }

  return ret;
 801074c:	7bfb      	ldrb	r3, [r7, #15]
}
 801074e:	4618      	mov	r0, r3
 8010750:	3710      	adds	r7, #16
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
	...

08010758 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010762:	2300      	movs	r3, #0
 8010764:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010766:	2300      	movs	r3, #0
 8010768:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801076a:	2300      	movs	r3, #0
 801076c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	885b      	ldrh	r3, [r3, #2]
 8010772:	0a1b      	lsrs	r3, r3, #8
 8010774:	b29b      	uxth	r3, r3
 8010776:	3b01      	subs	r3, #1
 8010778:	2b0e      	cmp	r3, #14
 801077a:	f200 8152 	bhi.w	8010a22 <USBD_GetDescriptor+0x2ca>
 801077e:	a201      	add	r2, pc, #4	@ (adr r2, 8010784 <USBD_GetDescriptor+0x2c>)
 8010780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010784:	080107f5 	.word	0x080107f5
 8010788:	0801080d 	.word	0x0801080d
 801078c:	0801084d 	.word	0x0801084d
 8010790:	08010a23 	.word	0x08010a23
 8010794:	08010a23 	.word	0x08010a23
 8010798:	080109c3 	.word	0x080109c3
 801079c:	080109ef 	.word	0x080109ef
 80107a0:	08010a23 	.word	0x08010a23
 80107a4:	08010a23 	.word	0x08010a23
 80107a8:	08010a23 	.word	0x08010a23
 80107ac:	08010a23 	.word	0x08010a23
 80107b0:	08010a23 	.word	0x08010a23
 80107b4:	08010a23 	.word	0x08010a23
 80107b8:	08010a23 	.word	0x08010a23
 80107bc:	080107c1 	.word	0x080107c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107c6:	69db      	ldr	r3, [r3, #28]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d00b      	beq.n	80107e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107d2:	69db      	ldr	r3, [r3, #28]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	7c12      	ldrb	r2, [r2, #16]
 80107d8:	f107 0108 	add.w	r1, r7, #8
 80107dc:	4610      	mov	r0, r2
 80107de:	4798      	blx	r3
 80107e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80107e2:	e126      	b.n	8010a32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80107e4:	6839      	ldr	r1, [r7, #0]
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 fb27 	bl	8010e3a <USBD_CtlError>
        err++;
 80107ec:	7afb      	ldrb	r3, [r7, #11]
 80107ee:	3301      	adds	r3, #1
 80107f0:	72fb      	strb	r3, [r7, #11]
      break;
 80107f2:	e11e      	b.n	8010a32 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	687a      	ldr	r2, [r7, #4]
 80107fe:	7c12      	ldrb	r2, [r2, #16]
 8010800:	f107 0108 	add.w	r1, r7, #8
 8010804:	4610      	mov	r0, r2
 8010806:	4798      	blx	r3
 8010808:	60f8      	str	r0, [r7, #12]
      break;
 801080a:	e112      	b.n	8010a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	7c1b      	ldrb	r3, [r3, #16]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d10d      	bne.n	8010830 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801081a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801081c:	f107 0208 	add.w	r2, r7, #8
 8010820:	4610      	mov	r0, r2
 8010822:	4798      	blx	r3
 8010824:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	3301      	adds	r3, #1
 801082a:	2202      	movs	r2, #2
 801082c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801082e:	e100      	b.n	8010a32 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010838:	f107 0208 	add.w	r2, r7, #8
 801083c:	4610      	mov	r0, r2
 801083e:	4798      	blx	r3
 8010840:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	3301      	adds	r3, #1
 8010846:	2202      	movs	r2, #2
 8010848:	701a      	strb	r2, [r3, #0]
      break;
 801084a:	e0f2      	b.n	8010a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	885b      	ldrh	r3, [r3, #2]
 8010850:	b2db      	uxtb	r3, r3
 8010852:	2b05      	cmp	r3, #5
 8010854:	f200 80ac 	bhi.w	80109b0 <USBD_GetDescriptor+0x258>
 8010858:	a201      	add	r2, pc, #4	@ (adr r2, 8010860 <USBD_GetDescriptor+0x108>)
 801085a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801085e:	bf00      	nop
 8010860:	08010879 	.word	0x08010879
 8010864:	080108ad 	.word	0x080108ad
 8010868:	080108e1 	.word	0x080108e1
 801086c:	08010915 	.word	0x08010915
 8010870:	08010949 	.word	0x08010949
 8010874:	0801097d 	.word	0x0801097d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d00b      	beq.n	801089c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	7c12      	ldrb	r2, [r2, #16]
 8010890:	f107 0108 	add.w	r1, r7, #8
 8010894:	4610      	mov	r0, r2
 8010896:	4798      	blx	r3
 8010898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801089a:	e091      	b.n	80109c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801089c:	6839      	ldr	r1, [r7, #0]
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f000 facb 	bl	8010e3a <USBD_CtlError>
            err++;
 80108a4:	7afb      	ldrb	r3, [r7, #11]
 80108a6:	3301      	adds	r3, #1
 80108a8:	72fb      	strb	r3, [r7, #11]
          break;
 80108aa:	e089      	b.n	80109c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00b      	beq.n	80108d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108be:	689b      	ldr	r3, [r3, #8]
 80108c0:	687a      	ldr	r2, [r7, #4]
 80108c2:	7c12      	ldrb	r2, [r2, #16]
 80108c4:	f107 0108 	add.w	r1, r7, #8
 80108c8:	4610      	mov	r0, r2
 80108ca:	4798      	blx	r3
 80108cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80108ce:	e077      	b.n	80109c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80108d0:	6839      	ldr	r1, [r7, #0]
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f000 fab1 	bl	8010e3a <USBD_CtlError>
            err++;
 80108d8:	7afb      	ldrb	r3, [r7, #11]
 80108da:	3301      	adds	r3, #1
 80108dc:	72fb      	strb	r3, [r7, #11]
          break;
 80108de:	e06f      	b.n	80109c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d00b      	beq.n	8010904 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108f2:	68db      	ldr	r3, [r3, #12]
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	7c12      	ldrb	r2, [r2, #16]
 80108f8:	f107 0108 	add.w	r1, r7, #8
 80108fc:	4610      	mov	r0, r2
 80108fe:	4798      	blx	r3
 8010900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010902:	e05d      	b.n	80109c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010904:	6839      	ldr	r1, [r7, #0]
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 fa97 	bl	8010e3a <USBD_CtlError>
            err++;
 801090c:	7afb      	ldrb	r3, [r7, #11]
 801090e:	3301      	adds	r3, #1
 8010910:	72fb      	strb	r3, [r7, #11]
          break;
 8010912:	e055      	b.n	80109c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801091a:	691b      	ldr	r3, [r3, #16]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00b      	beq.n	8010938 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010926:	691b      	ldr	r3, [r3, #16]
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	7c12      	ldrb	r2, [r2, #16]
 801092c:	f107 0108 	add.w	r1, r7, #8
 8010930:	4610      	mov	r0, r2
 8010932:	4798      	blx	r3
 8010934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010936:	e043      	b.n	80109c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010938:	6839      	ldr	r1, [r7, #0]
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 fa7d 	bl	8010e3a <USBD_CtlError>
            err++;
 8010940:	7afb      	ldrb	r3, [r7, #11]
 8010942:	3301      	adds	r3, #1
 8010944:	72fb      	strb	r3, [r7, #11]
          break;
 8010946:	e03b      	b.n	80109c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801094e:	695b      	ldr	r3, [r3, #20]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d00b      	beq.n	801096c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801095a:	695b      	ldr	r3, [r3, #20]
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	7c12      	ldrb	r2, [r2, #16]
 8010960:	f107 0108 	add.w	r1, r7, #8
 8010964:	4610      	mov	r0, r2
 8010966:	4798      	blx	r3
 8010968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801096a:	e029      	b.n	80109c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801096c:	6839      	ldr	r1, [r7, #0]
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 fa63 	bl	8010e3a <USBD_CtlError>
            err++;
 8010974:	7afb      	ldrb	r3, [r7, #11]
 8010976:	3301      	adds	r3, #1
 8010978:	72fb      	strb	r3, [r7, #11]
          break;
 801097a:	e021      	b.n	80109c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010982:	699b      	ldr	r3, [r3, #24]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d00b      	beq.n	80109a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801098e:	699b      	ldr	r3, [r3, #24]
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	7c12      	ldrb	r2, [r2, #16]
 8010994:	f107 0108 	add.w	r1, r7, #8
 8010998:	4610      	mov	r0, r2
 801099a:	4798      	blx	r3
 801099c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801099e:	e00f      	b.n	80109c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80109a0:	6839      	ldr	r1, [r7, #0]
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 fa49 	bl	8010e3a <USBD_CtlError>
            err++;
 80109a8:	7afb      	ldrb	r3, [r7, #11]
 80109aa:	3301      	adds	r3, #1
 80109ac:	72fb      	strb	r3, [r7, #11]
          break;
 80109ae:	e007      	b.n	80109c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80109b0:	6839      	ldr	r1, [r7, #0]
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f000 fa41 	bl	8010e3a <USBD_CtlError>
          err++;
 80109b8:	7afb      	ldrb	r3, [r7, #11]
 80109ba:	3301      	adds	r3, #1
 80109bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80109be:	bf00      	nop
      }
      break;
 80109c0:	e037      	b.n	8010a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	7c1b      	ldrb	r3, [r3, #16]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d109      	bne.n	80109de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80109d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109d2:	f107 0208 	add.w	r2, r7, #8
 80109d6:	4610      	mov	r0, r2
 80109d8:	4798      	blx	r3
 80109da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80109dc:	e029      	b.n	8010a32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80109de:	6839      	ldr	r1, [r7, #0]
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 fa2a 	bl	8010e3a <USBD_CtlError>
        err++;
 80109e6:	7afb      	ldrb	r3, [r7, #11]
 80109e8:	3301      	adds	r3, #1
 80109ea:	72fb      	strb	r3, [r7, #11]
      break;
 80109ec:	e021      	b.n	8010a32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	7c1b      	ldrb	r3, [r3, #16]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d10d      	bne.n	8010a12 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80109fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109fe:	f107 0208 	add.w	r2, r7, #8
 8010a02:	4610      	mov	r0, r2
 8010a04:	4798      	blx	r3
 8010a06:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	2207      	movs	r2, #7
 8010a0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010a10:	e00f      	b.n	8010a32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010a12:	6839      	ldr	r1, [r7, #0]
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 fa10 	bl	8010e3a <USBD_CtlError>
        err++;
 8010a1a:	7afb      	ldrb	r3, [r7, #11]
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	72fb      	strb	r3, [r7, #11]
      break;
 8010a20:	e007      	b.n	8010a32 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010a22:	6839      	ldr	r1, [r7, #0]
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 fa08 	bl	8010e3a <USBD_CtlError>
      err++;
 8010a2a:	7afb      	ldrb	r3, [r7, #11]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8010a30:	bf00      	nop
  }

  if (err != 0U)
 8010a32:	7afb      	ldrb	r3, [r7, #11]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d11e      	bne.n	8010a76 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	88db      	ldrh	r3, [r3, #6]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d016      	beq.n	8010a6e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010a40:	893b      	ldrh	r3, [r7, #8]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00e      	beq.n	8010a64 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	88da      	ldrh	r2, [r3, #6]
 8010a4a:	893b      	ldrh	r3, [r7, #8]
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	bf28      	it	cs
 8010a50:	4613      	movcs	r3, r2
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010a56:	893b      	ldrh	r3, [r7, #8]
 8010a58:	461a      	mov	r2, r3
 8010a5a:	68f9      	ldr	r1, [r7, #12]
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f000 fa5d 	bl	8010f1c <USBD_CtlSendData>
 8010a62:	e009      	b.n	8010a78 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010a64:	6839      	ldr	r1, [r7, #0]
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f000 f9e7 	bl	8010e3a <USBD_CtlError>
 8010a6c:	e004      	b.n	8010a78 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 faae 	bl	8010fd0 <USBD_CtlSendStatus>
 8010a74:	e000      	b.n	8010a78 <USBD_GetDescriptor+0x320>
    return;
 8010a76:	bf00      	nop
  }
}
 8010a78:	3710      	adds	r7, #16
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop

08010a80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	889b      	ldrh	r3, [r3, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d131      	bne.n	8010af6 <USBD_SetAddress+0x76>
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	88db      	ldrh	r3, [r3, #6]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d12d      	bne.n	8010af6 <USBD_SetAddress+0x76>
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	885b      	ldrh	r3, [r3, #2]
 8010a9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010aa0:	d829      	bhi.n	8010af6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	885b      	ldrh	r3, [r3, #2]
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010aac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b03      	cmp	r3, #3
 8010ab8:	d104      	bne.n	8010ac4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010aba:	6839      	ldr	r1, [r7, #0]
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f000 f9bc 	bl	8010e3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ac2:	e01d      	b.n	8010b00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	7bfa      	ldrb	r2, [r7, #15]
 8010ac8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010acc:	7bfb      	ldrb	r3, [r7, #15]
 8010ace:	4619      	mov	r1, r3
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f001 fb1b 	bl	801210c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 fa7a 	bl	8010fd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010adc:	7bfb      	ldrb	r3, [r7, #15]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d004      	beq.n	8010aec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2202      	movs	r2, #2
 8010ae6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010aea:	e009      	b.n	8010b00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2201      	movs	r2, #1
 8010af0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010af4:	e004      	b.n	8010b00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010af6:	6839      	ldr	r1, [r7, #0]
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f000 f99e 	bl	8010e3a <USBD_CtlError>
  }
}
 8010afe:	bf00      	nop
 8010b00:	bf00      	nop
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b12:	2300      	movs	r3, #0
 8010b14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	885b      	ldrh	r3, [r3, #2]
 8010b1a:	b2da      	uxtb	r2, r3
 8010b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010b1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010b20:	4b4d      	ldr	r3, [pc, #308]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	d905      	bls.n	8010b34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010b28:	6839      	ldr	r1, [r7, #0]
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 f985 	bl	8010e3a <USBD_CtlError>
    return USBD_FAIL;
 8010b30:	2303      	movs	r3, #3
 8010b32:	e08c      	b.n	8010c4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	2b02      	cmp	r3, #2
 8010b3e:	d002      	beq.n	8010b46 <USBD_SetConfig+0x3e>
 8010b40:	2b03      	cmp	r3, #3
 8010b42:	d029      	beq.n	8010b98 <USBD_SetConfig+0x90>
 8010b44:	e075      	b.n	8010c32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010b46:	4b44      	ldr	r3, [pc, #272]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d020      	beq.n	8010b90 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010b4e:	4b42      	ldr	r3, [pc, #264]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	461a      	mov	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010b58:	4b3f      	ldr	r3, [pc, #252]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f7fe ffb9 	bl	800fad6 <USBD_SetClassConfig>
 8010b64:	4603      	mov	r3, r0
 8010b66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010b68:	7bfb      	ldrb	r3, [r7, #15]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d008      	beq.n	8010b80 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010b6e:	6839      	ldr	r1, [r7, #0]
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f000 f962 	bl	8010e3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2202      	movs	r2, #2
 8010b7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010b7e:	e065      	b.n	8010c4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f000 fa25 	bl	8010fd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2203      	movs	r2, #3
 8010b8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010b8e:	e05d      	b.n	8010c4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f000 fa1d 	bl	8010fd0 <USBD_CtlSendStatus>
      break;
 8010b96:	e059      	b.n	8010c4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010b98:	4b2f      	ldr	r3, [pc, #188]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d112      	bne.n	8010bc6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2202      	movs	r2, #2
 8010ba4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	461a      	mov	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010bb2:	4b29      	ldr	r3, [pc, #164]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7fe ffa8 	bl	800fb0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 fa06 	bl	8010fd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010bc4:	e042      	b.n	8010c4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010bc6:	4b24      	ldr	r3, [pc, #144]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	461a      	mov	r2, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d02a      	beq.n	8010c2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	b2db      	uxtb	r3, r3
 8010bda:	4619      	mov	r1, r3
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f7fe ff96 	bl	800fb0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010be2:	4b1d      	ldr	r3, [pc, #116]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010be4:	781b      	ldrb	r3, [r3, #0]
 8010be6:	461a      	mov	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010bec:	4b1a      	ldr	r3, [pc, #104]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f7fe ff6f 	bl	800fad6 <USBD_SetClassConfig>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010bfc:	7bfb      	ldrb	r3, [r7, #15]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d00f      	beq.n	8010c22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010c02:	6839      	ldr	r1, [r7, #0]
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f000 f918 	bl	8010e3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	4619      	mov	r1, r3
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7fe ff7b 	bl	800fb0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2202      	movs	r2, #2
 8010c1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010c20:	e014      	b.n	8010c4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 f9d4 	bl	8010fd0 <USBD_CtlSendStatus>
      break;
 8010c28:	e010      	b.n	8010c4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 f9d0 	bl	8010fd0 <USBD_CtlSendStatus>
      break;
 8010c30:	e00c      	b.n	8010c4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010c32:	6839      	ldr	r1, [r7, #0]
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f000 f900 	bl	8010e3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010c3a:	4b07      	ldr	r3, [pc, #28]	@ (8010c58 <USBD_SetConfig+0x150>)
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7fe ff64 	bl	800fb0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010c46:	2303      	movs	r3, #3
 8010c48:	73fb      	strb	r3, [r7, #15]
      break;
 8010c4a:	bf00      	nop
  }

  return ret;
 8010c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3710      	adds	r7, #16
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	2400072c 	.word	0x2400072c

08010c5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	88db      	ldrh	r3, [r3, #6]
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d004      	beq.n	8010c78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010c6e:	6839      	ldr	r1, [r7, #0]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f000 f8e2 	bl	8010e3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010c76:	e023      	b.n	8010cc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	2b02      	cmp	r3, #2
 8010c82:	dc02      	bgt.n	8010c8a <USBD_GetConfig+0x2e>
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	dc03      	bgt.n	8010c90 <USBD_GetConfig+0x34>
 8010c88:	e015      	b.n	8010cb6 <USBD_GetConfig+0x5a>
 8010c8a:	2b03      	cmp	r3, #3
 8010c8c:	d00b      	beq.n	8010ca6 <USBD_GetConfig+0x4a>
 8010c8e:	e012      	b.n	8010cb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	3308      	adds	r3, #8
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 f93c 	bl	8010f1c <USBD_CtlSendData>
        break;
 8010ca4:	e00c      	b.n	8010cc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	3304      	adds	r3, #4
 8010caa:	2201      	movs	r2, #1
 8010cac:	4619      	mov	r1, r3
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f000 f934 	bl	8010f1c <USBD_CtlSendData>
        break;
 8010cb4:	e004      	b.n	8010cc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010cb6:	6839      	ldr	r1, [r7, #0]
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f000 f8be 	bl	8010e3a <USBD_CtlError>
        break;
 8010cbe:	bf00      	nop
}
 8010cc0:	bf00      	nop
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	2b02      	cmp	r3, #2
 8010cde:	d81e      	bhi.n	8010d1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	88db      	ldrh	r3, [r3, #6]
 8010ce4:	2b02      	cmp	r3, #2
 8010ce6:	d004      	beq.n	8010cf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010ce8:	6839      	ldr	r1, [r7, #0]
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f000 f8a5 	bl	8010e3a <USBD_CtlError>
        break;
 8010cf0:	e01a      	b.n	8010d28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d005      	beq.n	8010d0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	f043 0202 	orr.w	r2, r3, #2
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	330c      	adds	r3, #12
 8010d12:	2202      	movs	r2, #2
 8010d14:	4619      	mov	r1, r3
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f000 f900 	bl	8010f1c <USBD_CtlSendData>
      break;
 8010d1c:	e004      	b.n	8010d28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010d1e:	6839      	ldr	r1, [r7, #0]
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f000 f88a 	bl	8010e3a <USBD_CtlError>
      break;
 8010d26:	bf00      	nop
  }
}
 8010d28:	bf00      	nop
 8010d2a:	3708      	adds	r7, #8
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	885b      	ldrh	r3, [r3, #2]
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	d107      	bne.n	8010d52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2201      	movs	r2, #1
 8010d46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 f940 	bl	8010fd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010d50:	e013      	b.n	8010d7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	885b      	ldrh	r3, [r3, #2]
 8010d56:	2b02      	cmp	r3, #2
 8010d58:	d10b      	bne.n	8010d72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	889b      	ldrh	r3, [r3, #4]
 8010d5e:	0a1b      	lsrs	r3, r3, #8
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	b2da      	uxtb	r2, r3
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 f930 	bl	8010fd0 <USBD_CtlSendStatus>
}
 8010d70:	e003      	b.n	8010d7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010d72:	6839      	ldr	r1, [r7, #0]
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 f860 	bl	8010e3a <USBD_CtlError>
}
 8010d7a:	bf00      	nop
 8010d7c:	3708      	adds	r7, #8
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b082      	sub	sp, #8
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
 8010d8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	3b01      	subs	r3, #1
 8010d96:	2b02      	cmp	r3, #2
 8010d98:	d80b      	bhi.n	8010db2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	885b      	ldrh	r3, [r3, #2]
 8010d9e:	2b01      	cmp	r3, #1
 8010da0:	d10c      	bne.n	8010dbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2200      	movs	r2, #0
 8010da6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f000 f910 	bl	8010fd0 <USBD_CtlSendStatus>
      }
      break;
 8010db0:	e004      	b.n	8010dbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010db2:	6839      	ldr	r1, [r7, #0]
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 f840 	bl	8010e3a <USBD_CtlError>
      break;
 8010dba:	e000      	b.n	8010dbe <USBD_ClrFeature+0x3c>
      break;
 8010dbc:	bf00      	nop
  }
}
 8010dbe:	bf00      	nop
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010dc6:	b580      	push	{r7, lr}
 8010dc8:	b084      	sub	sp, #16
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]
 8010dce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	781a      	ldrb	r2, [r3, #0]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	3301      	adds	r3, #1
 8010de0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	781a      	ldrb	r2, [r3, #0]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	3301      	adds	r3, #1
 8010dee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f7ff fa16 	bl	8010222 <SWAPBYTE>
 8010df6:	4603      	mov	r3, r0
 8010df8:	461a      	mov	r2, r3
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	3301      	adds	r3, #1
 8010e02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	3301      	adds	r3, #1
 8010e08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010e0a:	68f8      	ldr	r0, [r7, #12]
 8010e0c:	f7ff fa09 	bl	8010222 <SWAPBYTE>
 8010e10:	4603      	mov	r3, r0
 8010e12:	461a      	mov	r2, r3
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	3301      	adds	r3, #1
 8010e1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	3301      	adds	r3, #1
 8010e22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f7ff f9fc 	bl	8010222 <SWAPBYTE>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	80da      	strh	r2, [r3, #6]
}
 8010e32:	bf00      	nop
 8010e34:	3710      	adds	r7, #16
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b082      	sub	sp, #8
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
 8010e42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e44:	2180      	movs	r1, #128	@ 0x80
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f001 f8f6 	bl	8012038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010e4c:	2100      	movs	r1, #0
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f001 f8f2 	bl	8012038 <USBD_LL_StallEP>
}
 8010e54:	bf00      	nop
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b086      	sub	sp, #24
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d036      	beq.n	8010ee0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010e76:	6938      	ldr	r0, [r7, #16]
 8010e78:	f000 f836 	bl	8010ee8 <USBD_GetLen>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	3301      	adds	r3, #1
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	005b      	lsls	r3, r3, #1
 8010e84:	b29a      	uxth	r2, r3
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
 8010e8c:	68ba      	ldr	r2, [r7, #8]
 8010e8e:	4413      	add	r3, r2
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	7812      	ldrb	r2, [r2, #0]
 8010e94:	701a      	strb	r2, [r3, #0]
  idx++;
 8010e96:	7dfb      	ldrb	r3, [r7, #23]
 8010e98:	3301      	adds	r3, #1
 8010e9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010e9c:	7dfb      	ldrb	r3, [r7, #23]
 8010e9e:	68ba      	ldr	r2, [r7, #8]
 8010ea0:	4413      	add	r3, r2
 8010ea2:	2203      	movs	r2, #3
 8010ea4:	701a      	strb	r2, [r3, #0]
  idx++;
 8010ea6:	7dfb      	ldrb	r3, [r7, #23]
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010eac:	e013      	b.n	8010ed6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010eae:	7dfb      	ldrb	r3, [r7, #23]
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	693a      	ldr	r2, [r7, #16]
 8010eb6:	7812      	ldrb	r2, [r2, #0]
 8010eb8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	613b      	str	r3, [r7, #16]
    idx++;
 8010ec0:	7dfb      	ldrb	r3, [r7, #23]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010ec6:	7dfb      	ldrb	r3, [r7, #23]
 8010ec8:	68ba      	ldr	r2, [r7, #8]
 8010eca:	4413      	add	r3, r2
 8010ecc:	2200      	movs	r2, #0
 8010ece:	701a      	strb	r2, [r3, #0]
    idx++;
 8010ed0:	7dfb      	ldrb	r3, [r7, #23]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d1e7      	bne.n	8010eae <USBD_GetString+0x52>
 8010ede:	e000      	b.n	8010ee2 <USBD_GetString+0x86>
    return;
 8010ee0:	bf00      	nop
  }
}
 8010ee2:	3718      	adds	r7, #24
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010ef8:	e005      	b.n	8010f06 <USBD_GetLen+0x1e>
  {
    len++;
 8010efa:	7bfb      	ldrb	r3, [r7, #15]
 8010efc:	3301      	adds	r3, #1
 8010efe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	3301      	adds	r3, #1
 8010f04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d1f5      	bne.n	8010efa <USBD_GetLen+0x12>
  }

  return len;
 8010f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3714      	adds	r7, #20
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr

08010f1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	60f8      	str	r0, [r7, #12]
 8010f24:	60b9      	str	r1, [r7, #8]
 8010f26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	2202      	movs	r2, #2
 8010f2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	687a      	ldr	r2, [r7, #4]
 8010f34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	68ba      	ldr	r2, [r7, #8]
 8010f40:	2100      	movs	r1, #0
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f001 f901 	bl	801214a <USBD_LL_Transmit>

  return USBD_OK;
 8010f48:	2300      	movs	r3, #0
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3710      	adds	r7, #16
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}

08010f52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b084      	sub	sp, #16
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	60f8      	str	r0, [r7, #12]
 8010f5a:	60b9      	str	r1, [r7, #8]
 8010f5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	68ba      	ldr	r2, [r7, #8]
 8010f62:	2100      	movs	r1, #0
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f001 f8f0 	bl	801214a <USBD_LL_Transmit>

  return USBD_OK;
 8010f6a:	2300      	movs	r3, #0
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3710      	adds	r7, #16
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}

08010f74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2203      	movs	r2, #3
 8010f84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	68ba      	ldr	r2, [r7, #8]
 8010f9c:	2100      	movs	r1, #0
 8010f9e:	68f8      	ldr	r0, [r7, #12]
 8010fa0:	f001 f8f4 	bl	801218c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3710      	adds	r7, #16
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b084      	sub	sp, #16
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	60f8      	str	r0, [r7, #12]
 8010fb6:	60b9      	str	r1, [r7, #8]
 8010fb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	68ba      	ldr	r2, [r7, #8]
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f001 f8e3 	bl	801218c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010fc6:	2300      	movs	r3, #0
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3710      	adds	r7, #16
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2204      	movs	r2, #4
 8010fdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f001 f8af 	bl	801214a <USBD_LL_Transmit>

  return USBD_OK;
 8010fec:	2300      	movs	r3, #0
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3708      	adds	r7, #8
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}

08010ff6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b082      	sub	sp, #8
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2205      	movs	r2, #5
 8011002:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011006:	2300      	movs	r3, #0
 8011008:	2200      	movs	r2, #0
 801100a:	2100      	movs	r1, #0
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f001 f8bd 	bl	801218c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011012:	2300      	movs	r3, #0
}
 8011014:	4618      	mov	r0, r3
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <ina238_Init>:
 * @brief  INA238初始化
 * @param  hi2c: I2C句柄
 * @param  error: 误差纠正
 */
void ina238_Init(I2C_HandleTypeDef *hi2c, int8_t error)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b088      	sub	sp, #32
 8011020:	af04      	add	r7, sp, #16
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	460b      	mov	r3, r1
 8011026:	70fb      	strb	r3, [r7, #3]
	uint8_t pData[2];
	pData[0] = 0x00;
 8011028:	2300      	movs	r3, #0
 801102a:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x00;
 801102c:	2300      	movs	r3, #0
 801102e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100); // 量程选择为163.84mv
 8011030:	2364      	movs	r3, #100	@ 0x64
 8011032:	9302      	str	r3, [sp, #8]
 8011034:	2302      	movs	r3, #2
 8011036:	9301      	str	r3, [sp, #4]
 8011038:	f107 030c 	add.w	r3, r7, #12
 801103c:	9300      	str	r3, [sp, #0]
 801103e:	2301      	movs	r3, #1
 8011040:	2200      	movs	r2, #0
 8011042:	2181      	movs	r1, #129	@ 0x81
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f7f5 f987 	bl	8006358 <HAL_I2C_Mem_Write>
	pData[0] = 0xf4;
 801104a:	23f4      	movs	r3, #244	@ 0xf4
 801104c:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x93;
 801104e:	2393      	movs	r3, #147	@ 0x93
 8011050:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100); // 转换时间设置为9.6ms
 8011052:	2364      	movs	r3, #100	@ 0x64
 8011054:	9302      	str	r3, [sp, #8]
 8011056:	2302      	movs	r3, #2
 8011058:	9301      	str	r3, [sp, #4]
 801105a:	f107 030c 	add.w	r3, r7, #12
 801105e:	9300      	str	r3, [sp, #0]
 8011060:	2301      	movs	r3, #1
 8011062:	2201      	movs	r2, #1
 8011064:	2181      	movs	r1, #129	@ 0x81
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f7f5 f976 	bl	8006358 <HAL_I2C_Mem_Write>
	pData[0] = 0x0f;
 801106c:	230f      	movs	r3, #15
 801106e:	733b      	strb	r3, [r7, #12]
	pData[1] = 0xa0 + error;
 8011070:	78fb      	ldrb	r3, [r7, #3]
 8011072:	3b60      	subs	r3, #96	@ 0x60
 8011074:	b2db      	uxtb	r3, r3
 8011076:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100); // 设置最大电流为8A，采样电阻为20mΩ
 8011078:	2364      	movs	r3, #100	@ 0x64
 801107a:	9302      	str	r3, [sp, #8]
 801107c:	2302      	movs	r3, #2
 801107e:	9301      	str	r3, [sp, #4]
 8011080:	f107 030c 	add.w	r3, r7, #12
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	2301      	movs	r3, #1
 8011088:	2202      	movs	r2, #2
 801108a:	2181      	movs	r1, #129	@ 0x81
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f7f5 f963 	bl	8006358 <HAL_I2C_Mem_Write>
}
 8011092:	bf00      	nop
 8011094:	3710      	adds	r7, #16
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
	...

0801109c <OLED_WR_Byte>:
		OLED_WR_Byte(0xA0, OLED_CMD);
	}
}

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	4603      	mov	r3, r0
 80110a4:	460a      	mov	r2, r1
 80110a6:	71fb      	strb	r3, [r7, #7]
 80110a8:	4613      	mov	r3, r2
 80110aa:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 80110ac:	1dfb      	adds	r3, r7, #7
 80110ae:	60fb      	str	r3, [r7, #12]
	if (cmd)
 80110b0:	79bb      	ldrb	r3, [r7, #6]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d005      	beq.n	80110c2 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 80110b6:	2201      	movs	r2, #1
 80110b8:	2140      	movs	r1, #64	@ 0x40
 80110ba:	4811      	ldr	r0, [pc, #68]	@ (8011100 <OLED_WR_Byte+0x64>)
 80110bc:	f7f5 f888 	bl	80061d0 <HAL_GPIO_WritePin>
 80110c0:	e004      	b.n	80110cc <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 80110c2:	2200      	movs	r2, #0
 80110c4:	2140      	movs	r1, #64	@ 0x40
 80110c6:	480e      	ldr	r0, [pc, #56]	@ (8011100 <OLED_WR_Byte+0x64>)
 80110c8:	f7f5 f882 	bl	80061d0 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 80110cc:	2200      	movs	r2, #0
 80110ce:	2102      	movs	r1, #2
 80110d0:	480c      	ldr	r0, [pc, #48]	@ (8011104 <OLED_WR_Byte+0x68>)
 80110d2:	f7f5 f87d 	bl	80061d0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 80110d6:	23c8      	movs	r3, #200	@ 0xc8
 80110d8:	2201      	movs	r2, #1
 80110da:	68f9      	ldr	r1, [r7, #12]
 80110dc:	480a      	ldr	r0, [pc, #40]	@ (8011108 <OLED_WR_Byte+0x6c>)
 80110de:	f7fa fe81 	bl	800bde4 <HAL_SPI_Transmit>

	OLED_CS_Set();
 80110e2:	2201      	movs	r2, #1
 80110e4:	2102      	movs	r1, #2
 80110e6:	4807      	ldr	r0, [pc, #28]	@ (8011104 <OLED_WR_Byte+0x68>)
 80110e8:	f7f5 f872 	bl	80061d0 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 80110ec:	2201      	movs	r2, #1
 80110ee:	2140      	movs	r1, #64	@ 0x40
 80110f0:	4803      	ldr	r0, [pc, #12]	@ (8011100 <OLED_WR_Byte+0x64>)
 80110f2:	f7f5 f86d 	bl	80061d0 <HAL_GPIO_WritePin>
}
 80110f6:	bf00      	nop
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	58022000 	.word	0x58022000
 8011104:	58020400 	.word	0x58020400
 8011108:	24000530 	.word	0x24000530

0801110c <OLED_Refresh>:
	OLED_WR_Byte(0xAF, OLED_CMD); // 关闭屏幕
}

// 更新显存到OLED
void OLED_Refresh(void)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8011112:	2300      	movs	r3, #0
 8011114:	71fb      	strb	r3, [r7, #7]
 8011116:	e026      	b.n	8011166 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 8011118:	79fb      	ldrb	r3, [r7, #7]
 801111a:	3b50      	subs	r3, #80	@ 0x50
 801111c:	b2db      	uxtb	r3, r3
 801111e:	2100      	movs	r1, #0
 8011120:	4618      	mov	r0, r3
 8011122:	f7ff ffbb 	bl	801109c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 8011126:	2100      	movs	r1, #0
 8011128:	2000      	movs	r0, #0
 801112a:	f7ff ffb7 	bl	801109c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 801112e:	2100      	movs	r1, #0
 8011130:	2010      	movs	r0, #16
 8011132:	f7ff ffb3 	bl	801109c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8011136:	2300      	movs	r3, #0
 8011138:	71bb      	strb	r3, [r7, #6]
 801113a:	e00d      	b.n	8011158 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 801113c:	79ba      	ldrb	r2, [r7, #6]
 801113e:	79fb      	ldrb	r3, [r7, #7]
 8011140:	490d      	ldr	r1, [pc, #52]	@ (8011178 <OLED_Refresh+0x6c>)
 8011142:	00d2      	lsls	r2, r2, #3
 8011144:	440a      	add	r2, r1
 8011146:	4413      	add	r3, r2
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	2101      	movs	r1, #1
 801114c:	4618      	mov	r0, r3
 801114e:	f7ff ffa5 	bl	801109c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8011152:	79bb      	ldrb	r3, [r7, #6]
 8011154:	3301      	adds	r3, #1
 8011156:	71bb      	strb	r3, [r7, #6]
 8011158:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801115c:	2b00      	cmp	r3, #0
 801115e:	daed      	bge.n	801113c <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 8011160:	79fb      	ldrb	r3, [r7, #7]
 8011162:	3301      	adds	r3, #1
 8011164:	71fb      	strb	r3, [r7, #7]
 8011166:	79fb      	ldrb	r3, [r7, #7]
 8011168:	2b07      	cmp	r3, #7
 801116a:	d9d5      	bls.n	8011118 <OLED_Refresh+0xc>
	}
}
 801116c:	bf00      	nop
 801116e:	bf00      	nop
 8011170:	3708      	adds	r7, #8
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	24000730 	.word	0x24000730

0801117c <OLED_Clear>:
// 清屏函数
void OLED_Clear(void)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8011182:	2300      	movs	r3, #0
 8011184:	71fb      	strb	r3, [r7, #7]
 8011186:	e014      	b.n	80111b2 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 8011188:	2300      	movs	r3, #0
 801118a:	71bb      	strb	r3, [r7, #6]
 801118c:	e00a      	b.n	80111a4 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 801118e:	79ba      	ldrb	r2, [r7, #6]
 8011190:	79fb      	ldrb	r3, [r7, #7]
 8011192:	490c      	ldr	r1, [pc, #48]	@ (80111c4 <OLED_Clear+0x48>)
 8011194:	00d2      	lsls	r2, r2, #3
 8011196:	440a      	add	r2, r1
 8011198:	4413      	add	r3, r2
 801119a:	2200      	movs	r2, #0
 801119c:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 801119e:	79bb      	ldrb	r3, [r7, #6]
 80111a0:	3301      	adds	r3, #1
 80111a2:	71bb      	strb	r3, [r7, #6]
 80111a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	daf0      	bge.n	801118e <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 80111ac:	79fb      	ldrb	r3, [r7, #7]
 80111ae:	3301      	adds	r3, #1
 80111b0:	71fb      	strb	r3, [r7, #7]
 80111b2:	79fb      	ldrb	r3, [r7, #7]
 80111b4:	2b07      	cmp	r3, #7
 80111b6:	d9e7      	bls.n	8011188 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 80111b8:	f7ff ffa8 	bl	801110c <OLED_Refresh>
}
 80111bc:	bf00      	nop
 80111be:	3708      	adds	r7, #8
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	24000730 	.word	0x24000730

080111c8 <OLED_Init>:
	OLED_ShowString(2, 2, str, 12);
	OLED_Refresh();
}
// OLED的初始化
void OLED_Init(void)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 80111cc:	2200      	movs	r2, #0
 80111ce:	2120      	movs	r1, #32
 80111d0:	483f      	ldr	r0, [pc, #252]	@ (80112d0 <OLED_Init+0x108>)
 80111d2:	f7f4 fffd 	bl	80061d0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80111d6:	20c8      	movs	r0, #200	@ 0xc8
 80111d8:	f7f0 fd98 	bl	8001d0c <HAL_Delay>
	OLED_RES_Set();
 80111dc:	2201      	movs	r2, #1
 80111de:	2120      	movs	r1, #32
 80111e0:	483b      	ldr	r0, [pc, #236]	@ (80112d0 <OLED_Init+0x108>)
 80111e2:	f7f4 fff5 	bl	80061d0 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 80111e6:	2100      	movs	r1, #0
 80111e8:	20ae      	movs	r0, #174	@ 0xae
 80111ea:	f7ff ff57 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 80111ee:	2100      	movs	r1, #0
 80111f0:	2000      	movs	r0, #0
 80111f2:	f7ff ff53 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 80111f6:	2100      	movs	r1, #0
 80111f8:	2010      	movs	r0, #16
 80111fa:	f7ff ff4f 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80111fe:	2100      	movs	r1, #0
 8011200:	2040      	movs	r0, #64	@ 0x40
 8011202:	f7ff ff4b 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8011206:	2100      	movs	r1, #0
 8011208:	2081      	movs	r0, #129	@ 0x81
 801120a:	f7ff ff47 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 801120e:	2100      	movs	r1, #0
 8011210:	20cf      	movs	r0, #207	@ 0xcf
 8011212:	f7ff ff43 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8011216:	2100      	movs	r1, #0
 8011218:	20a1      	movs	r0, #161	@ 0xa1
 801121a:	f7ff ff3f 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 801121e:	2100      	movs	r1, #0
 8011220:	20c8      	movs	r0, #200	@ 0xc8
 8011222:	f7ff ff3b 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8011226:	2100      	movs	r1, #0
 8011228:	20a6      	movs	r0, #166	@ 0xa6
 801122a:	f7ff ff37 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 801122e:	2100      	movs	r1, #0
 8011230:	20a8      	movs	r0, #168	@ 0xa8
 8011232:	f7ff ff33 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8011236:	2100      	movs	r1, #0
 8011238:	203f      	movs	r0, #63	@ 0x3f
 801123a:	f7ff ff2f 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 801123e:	2100      	movs	r1, #0
 8011240:	20d3      	movs	r0, #211	@ 0xd3
 8011242:	f7ff ff2b 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8011246:	2100      	movs	r1, #0
 8011248:	2000      	movs	r0, #0
 801124a:	f7ff ff27 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 801124e:	2100      	movs	r1, #0
 8011250:	20d5      	movs	r0, #213	@ 0xd5
 8011252:	f7ff ff23 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8011256:	2100      	movs	r1, #0
 8011258:	2080      	movs	r0, #128	@ 0x80
 801125a:	f7ff ff1f 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 801125e:	2100      	movs	r1, #0
 8011260:	20d9      	movs	r0, #217	@ 0xd9
 8011262:	f7ff ff1b 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8011266:	2100      	movs	r1, #0
 8011268:	20f1      	movs	r0, #241	@ 0xf1
 801126a:	f7ff ff17 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 801126e:	2100      	movs	r1, #0
 8011270:	20da      	movs	r0, #218	@ 0xda
 8011272:	f7ff ff13 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8011276:	2100      	movs	r1, #0
 8011278:	2012      	movs	r0, #18
 801127a:	f7ff ff0f 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 801127e:	2100      	movs	r1, #0
 8011280:	20db      	movs	r0, #219	@ 0xdb
 8011282:	f7ff ff0b 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 8011286:	2100      	movs	r1, #0
 8011288:	2040      	movs	r0, #64	@ 0x40
 801128a:	f7ff ff07 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 801128e:	2100      	movs	r1, #0
 8011290:	2020      	movs	r0, #32
 8011292:	f7ff ff03 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 8011296:	2100      	movs	r1, #0
 8011298:	2002      	movs	r0, #2
 801129a:	f7ff feff 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 801129e:	2100      	movs	r1, #0
 80112a0:	208d      	movs	r0, #141	@ 0x8d
 80112a2:	f7ff fefb 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 80112a6:	2100      	movs	r1, #0
 80112a8:	2014      	movs	r0, #20
 80112aa:	f7ff fef7 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 80112ae:	2100      	movs	r1, #0
 80112b0:	20a4      	movs	r0, #164	@ 0xa4
 80112b2:	f7ff fef3 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 80112b6:	2100      	movs	r1, #0
 80112b8:	20a6      	movs	r0, #166	@ 0xa6
 80112ba:	f7ff feef 	bl	801109c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 80112be:	2100      	movs	r1, #0
 80112c0:	20af      	movs	r0, #175	@ 0xaf
 80112c2:	f7ff feeb 	bl	801109c <OLED_WR_Byte>
	OLED_Clear();
 80112c6:	f7ff ff59 	bl	801117c <OLED_Clear>
}
 80112ca:	bf00      	nop
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	58020800 	.word	0x58020800

080112d4 <pll_Init>:
 * @param config: 配置指针
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b085      	sub	sp, #20
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	ed87 0a01 	vstr	s0, [r7, #4]
 80112e2:	4613      	mov	r3, r2
 80112e4:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f04f 0200 	mov.w	r2, #0
 80112ec:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f04f 0200 	mov.w	r2, #0
 80112f4:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	f04f 0200 	mov.w	r2, #0
 80112fc:	609a      	str	r2, [r3, #8]

    signal->sogi_a_1 = 0.f;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f04f 0200 	mov.w	r2, #0
 8011304:	611a      	str	r2, [r3, #16]
    signal->sogi_a_2 = 0.f;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	f04f 0200 	mov.w	r2, #0
 801130c:	615a      	str	r2, [r3, #20]
    signal->sogi_b_1 = 0.f;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f04f 0200 	mov.w	r2, #0
 8011314:	61da      	str	r2, [r3, #28]
    signal->sogi_b_2 = 0.f;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f04f 0200 	mov.w	r2, #0
 801131c:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	f04f 0200 	mov.w	r2, #0
 8011324:	635a      	str	r2, [r3, #52]	@ 0x34

    config->omiga = 2 * PI * f; // f典型值50
 8011326:	edd7 7a01 	vldr	s15, [r7, #4]
 801132a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011490 <pll_Init+0x1bc>
 801132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 8011338:	887b      	ldrh	r3, [r7, #2]
 801133a:	ee07 3a90 	vmov	s15, r3
 801133e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	4a50      	ldr	r2, [pc, #320]	@ (8011494 <pll_Init+0x1c0>)
 8011354:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	f04f 0200 	mov.w	r2, #0
 801135c:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	edd3 7a00 	vldr	s15, [r3]
 8011364:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011368:	ee27 7a87 	vmul.f32	s14, s15, s14
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	edd3 7a01 	vldr	s15, [r3, #4]
 8011372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011382:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	edd3 7a00 	vldr	s15, [r3]
 801138c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	edd3 7a01 	vldr	s15, [r3, #4]
 8011396:	ee67 7a27 	vmul.f32	s15, s14, s15
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	ed93 7a00 	vldr	s14, [r3]
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80113ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	edd3 7a00 	vldr	s15, [r3]
 80113b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80113c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80113dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113e0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80113e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80113e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80113f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80113fc:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8011400:	ee77 6a67 	vsub.f32	s13, s14, s15
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011414:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8011418:	ee37 7a87 	vadd.f32	s14, s15, s14
 801141c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011436:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801143a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801144a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801144e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8011452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	4a0d      	ldr	r2, [pc, #52]	@ (8011498 <pll_Init+0x1c4>)
 8011464:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	4a0c      	ldr	r2, [pc, #48]	@ (801149c <pll_Init+0x1c8>)
 801146a:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	f04f 0200 	mov.w	r2, #0
 8011472:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f04f 0200 	mov.w	r2, #0
 801147a:	641a      	str	r2, [r3, #64]	@ 0x40
    signal->pid_out = 0.f;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f04f 0200 	mov.w	r2, #0
 8011482:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8011484:	bf00      	nop
 8011486:	3714      	adds	r7, #20
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr
 8011490:	40c90fdb 	.word	0x40c90fdb
 8011494:	3fb4fdf4 	.word	0x3fb4fdf4
 8011498:	428d78c3 	.word	0x428d78c3
 801149c:	46758fb9 	.word	0x46758fb9

080114a0 <pll_Control>:
 * @param signal_In: 信号指针
 * @param config: 配置指针
 * @param signal_Target: 目标信号指针
 */
void pll_Control(pll_Signal *signal_In, pll_Config *config, pll_Signal *signal_Target)
{
 80114a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114a4:	ed2d 8b02 	vpush	{d8}
 80114a8:	b090      	sub	sp, #64	@ 0x40
 80114aa:	af00      	add	r7, sp, #0
 80114ac:	60f8      	str	r0, [r7, #12]
 80114ae:	60b9      	str	r1, [r7, #8]
 80114b0:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_In);
 80114b2:	68f8      	ldr	r0, [r7, #12]
 80114b4:	f000 f932 	bl	801171c <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_In->sogi_a_0, signal_In->sogi_b_0 / 382 * 3, &signal_In->park_d, &signal_In->park_q, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	68de      	ldr	r6, [r3, #12]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	ed93 7a06 	vldr	s14, [r3, #24]
 80114c2:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8011660 <pll_Control+0x1c0>
 80114c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80114ca:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80114ce:	ee27 8a87 	vmul.f32	s16, s15, s14
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80114e4:	eeb0 0a67 	vmov.f32	s0, s15
 80114e8:	f000 fec8 	bl	801227c <arm_sin_f32>
 80114ec:	eef0 8a40 	vmov.f32	s17, s0
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80114f6:	eeb0 0a67 	vmov.f32	s0, s15
 80114fa:	f000 ff05 	bl	8012308 <arm_cos_f32>
 80114fe:	eef0 7a40 	vmov.f32	s15, s0
 8011502:	627e      	str	r6, [r7, #36]	@ 0x24
 8011504:	ed87 8a08 	vstr	s16, [r7, #32]
 8011508:	61fd      	str	r5, [r7, #28]
 801150a:	61bc      	str	r4, [r7, #24]
 801150c:	edc7 8a05 	vstr	s17, [r7, #20]
 8011510:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8011514:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8011518:	edd7 7a04 	vldr	s15, [r7, #16]
 801151c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011520:	edd7 6a08 	vldr	s13, [r7, #32]
 8011524:	edd7 7a05 	vldr	s15, [r7, #20]
 8011528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801152c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8011536:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801153a:	eeb1 7a67 	vneg.f32	s14, s15
 801153e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011546:	edd7 6a08 	vldr	s13, [r7, #32]
 801154a:	edd7 7a04 	vldr	s15, [r7, #16]
 801154e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	edc3 7a00 	vstr	s15, [r3]
  }
 801155c:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal_In, config);
 801155e:	68b9      	ldr	r1, [r7, #8]
 8011560:	68f8      	ldr	r0, [r7, #12]
 8011562:	f000 f87f 	bl	8011664 <pll_Pid>
    // 更新theta
    signal_In->theta += (signal_In->pid_out + config->omiga) * config->Ts;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	edd3 7a00 	vldr	s15, [r3]
 8011578:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	edd3 7a01 	vldr	s15, [r3, #4]
 8011582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011586:	ee77 7a27 	vadd.f32	s15, s14, s15
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal_In->theta = (float)fmod(signal_In->theta, 2 * PI);
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8011596:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801159a:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 8011658 <pll_Control+0x1b8>
 801159e:	eeb0 0b47 	vmov.f64	d0, d7
 80115a2:	f003 fcb5 	bl	8014f10 <fmod>
 80115a6:	eeb0 7b40 	vmov.f64	d7, d0
 80115aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    // 反park变换
    arm_inv_park_f32(signal_In->park_d, signal_In->park_q, &signal_In->park_inv_a, &signal_In->park_inv_b, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	f103 052c 	add.w	r5, r3, #44	@ 0x2c
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80115d0:	eeb0 0a67 	vmov.f32	s0, s15
 80115d4:	f000 fe52 	bl	801227c <arm_sin_f32>
 80115d8:	eeb0 8a40 	vmov.f32	s16, s0
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80115e2:	eeb0 0a67 	vmov.f32	s0, s15
 80115e6:	f000 fe8f 	bl	8012308 <arm_cos_f32>
 80115ea:	eef0 7a40 	vmov.f32	s15, s0
 80115ee:	f8c7 803c 	str.w	r8, [r7, #60]	@ 0x3c
 80115f2:	63be      	str	r6, [r7, #56]	@ 0x38
 80115f4:	637d      	str	r5, [r7, #52]	@ 0x34
 80115f6:	633c      	str	r4, [r7, #48]	@ 0x30
 80115f8:	ed87 8a0b 	vstr	s16, [r7, #44]	@ 0x2c
 80115fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 8011600:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8011604:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011608:	ee27 7a27 	vmul.f32	s14, s14, s15
 801160c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8011610:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011618:	ee77 7a67 	vsub.f32	s15, s14, s15
 801161c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801161e:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 8011622:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8011626:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801162a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801162e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8011632:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801163a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801163e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011640:	edc3 7a00 	vstr	s15, [r3]
  }
 8011644:	bf00      	nop
}
 8011646:	bf00      	nop
 8011648:	3740      	adds	r7, #64	@ 0x40
 801164a:	46bd      	mov	sp, r7
 801164c:	ecbd 8b02 	vpop	{d8}
 8011650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011654:	f3af 8000 	nop.w
 8011658:	60000000 	.word	0x60000000
 801165c:	401921fb 	.word	0x401921fb
 8011660:	43bf0000 	.word	0x43bf0000

08011664 <pll_Pid>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	edd3 7a03 	vldr	s15, [r3, #12]
 801167a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    signal->pid_out = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	edd3 6a04 	vldr	s13, [r3, #16]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801169c:	ee76 7a67 	vsub.f32	s15, s12, s15
 80116a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	edd3 6a05 	vldr	s13, [r3, #20]
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80116b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80116c8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801170c <pll_Pid+0xa8>
 80116cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80116d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d4:	dd03      	ble.n	80116de <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	4a0d      	ldr	r2, [pc, #52]	@ (8011710 <pll_Pid+0xac>)
 80116da:	639a      	str	r2, [r3, #56]	@ 0x38
 80116dc:	e00c      	b.n	80116f8 <pll_Pid+0x94>
    else if (signal->pid_out < -50 * PI)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80116e4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8011714 <pll_Pid+0xb0>
 80116e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80116ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116f0:	d502      	bpl.n	80116f8 <pll_Pid+0x94>
        signal->pid_out = -50 * PI;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4a08      	ldr	r2, [pc, #32]	@ (8011718 <pll_Pid+0xb4>)
 80116f6:	639a      	str	r2, [r3, #56]	@ 0x38

    signal->pid_err[1] = signal->pid_err[0];
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8011700:	bf00      	nop
 8011702:	370c      	adds	r7, #12
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr
 801170c:	431d1463 	.word	0x431d1463
 8011710:	431d1463 	.word	0x431d1463
 8011714:	c31d1463 	.word	0xc31d1463
 8011718:	c31d1463 	.word	0xc31d1463

0801171c <pll_Sogi>:
 * @brief Sogi变换
 *
 * @param signal: 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 801171c:	b480      	push	{r7}
 801171e:	b083      	sub	sp, #12
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
    signal->sogi_a_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_a_1 + signal->a2 * signal->sogi_a_2;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	edd3 7a00 	vldr	s15, [r3]
 8011730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011744:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	edd3 7a04 	vldr	s15, [r3, #16]
 8011754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011758:	ee37 7a27 	vadd.f32	s14, s14, s15
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	edd3 7a05 	vldr	s15, [r3, #20]
 8011768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_b_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_b_1 + signal->a2 * signal->sogi_b_2;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	edd3 7a00 	vldr	s15, [r3]
 8011782:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 801178c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	edd3 7a01 	vldr	s15, [r3, #4]
 8011796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801179a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80117aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80117be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80117d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	685a      	ldr	r2, [r3, #4]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	605a      	str	r2, [r3, #4]
    signal->sogi_a_2 = signal->sogi_a_1;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	691a      	ldr	r2, [r3, #16]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	615a      	str	r2, [r3, #20]
    signal->sogi_a_1 = signal->sogi_a_0;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	68da      	ldr	r2, [r3, #12]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	611a      	str	r2, [r3, #16]
    signal->sogi_b_2 = signal->sogi_b_1;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	69da      	ldr	r2, [r3, #28]
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	621a      	str	r2, [r3, #32]
    signal->sogi_b_1 = signal->sogi_b_0;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	699a      	ldr	r2, [r3, #24]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	61da      	str	r2, [r3, #28]
}
 8011810:	bf00      	nop
 8011812:	370c      	adds	r7, #12
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr

0801181c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011820:	2200      	movs	r2, #0
 8011822:	4913      	ldr	r1, [pc, #76]	@ (8011870 <MX_USB_DEVICE_Init+0x54>)
 8011824:	4813      	ldr	r0, [pc, #76]	@ (8011874 <MX_USB_DEVICE_Init+0x58>)
 8011826:	f7fe f8d9 	bl	800f9dc <USBD_Init>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	d001      	beq.n	8011834 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011830:	f7ef fcfc 	bl	800122c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011834:	4910      	ldr	r1, [pc, #64]	@ (8011878 <MX_USB_DEVICE_Init+0x5c>)
 8011836:	480f      	ldr	r0, [pc, #60]	@ (8011874 <MX_USB_DEVICE_Init+0x58>)
 8011838:	f7fe f900 	bl	800fa3c <USBD_RegisterClass>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d001      	beq.n	8011846 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011842:	f7ef fcf3 	bl	800122c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011846:	490d      	ldr	r1, [pc, #52]	@ (801187c <MX_USB_DEVICE_Init+0x60>)
 8011848:	480a      	ldr	r0, [pc, #40]	@ (8011874 <MX_USB_DEVICE_Init+0x58>)
 801184a:	f7fd fff7 	bl	800f83c <USBD_CDC_RegisterInterface>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d001      	beq.n	8011858 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011854:	f7ef fcea 	bl	800122c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011858:	4806      	ldr	r0, [pc, #24]	@ (8011874 <MX_USB_DEVICE_Init+0x58>)
 801185a:	f7fe f925 	bl	800faa8 <USBD_Start>
 801185e:	4603      	mov	r3, r0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d001      	beq.n	8011868 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011864:	f7ef fce2 	bl	800122c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011868:	f7f6 fc78 	bl	800815c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801186c:	bf00      	nop
 801186e:	bd80      	pop	{r7, pc}
 8011870:	240000b4 	.word	0x240000b4
 8011874:	24000bb0 	.word	0x24000bb0
 8011878:	24000020 	.word	0x24000020
 801187c:	240000a0 	.word	0x240000a0

08011880 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011884:	2200      	movs	r2, #0
 8011886:	4905      	ldr	r1, [pc, #20]	@ (801189c <CDC_Init_FS+0x1c>)
 8011888:	4805      	ldr	r0, [pc, #20]	@ (80118a0 <CDC_Init_FS+0x20>)
 801188a:	f7fd fff1 	bl	800f870 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801188e:	4905      	ldr	r1, [pc, #20]	@ (80118a4 <CDC_Init_FS+0x24>)
 8011890:	4803      	ldr	r0, [pc, #12]	@ (80118a0 <CDC_Init_FS+0x20>)
 8011892:	f7fe f80f 	bl	800f8b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011896:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011898:	4618      	mov	r0, r3
 801189a:	bd80      	pop	{r7, pc}
 801189c:	2400168c 	.word	0x2400168c
 80118a0:	24000bb0 	.word	0x24000bb0
 80118a4:	24000e8c 	.word	0x24000e8c

080118a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80118a8:	b480      	push	{r7}
 80118aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80118ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	4603      	mov	r3, r0
 80118c0:	6039      	str	r1, [r7, #0]
 80118c2:	71fb      	strb	r3, [r7, #7]
 80118c4:	4613      	mov	r3, r2
 80118c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80118c8:	79fb      	ldrb	r3, [r7, #7]
 80118ca:	2b23      	cmp	r3, #35	@ 0x23
 80118cc:	d84a      	bhi.n	8011964 <CDC_Control_FS+0xac>
 80118ce:	a201      	add	r2, pc, #4	@ (adr r2, 80118d4 <CDC_Control_FS+0x1c>)
 80118d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118d4:	08011965 	.word	0x08011965
 80118d8:	08011965 	.word	0x08011965
 80118dc:	08011965 	.word	0x08011965
 80118e0:	08011965 	.word	0x08011965
 80118e4:	08011965 	.word	0x08011965
 80118e8:	08011965 	.word	0x08011965
 80118ec:	08011965 	.word	0x08011965
 80118f0:	08011965 	.word	0x08011965
 80118f4:	08011965 	.word	0x08011965
 80118f8:	08011965 	.word	0x08011965
 80118fc:	08011965 	.word	0x08011965
 8011900:	08011965 	.word	0x08011965
 8011904:	08011965 	.word	0x08011965
 8011908:	08011965 	.word	0x08011965
 801190c:	08011965 	.word	0x08011965
 8011910:	08011965 	.word	0x08011965
 8011914:	08011965 	.word	0x08011965
 8011918:	08011965 	.word	0x08011965
 801191c:	08011965 	.word	0x08011965
 8011920:	08011965 	.word	0x08011965
 8011924:	08011965 	.word	0x08011965
 8011928:	08011965 	.word	0x08011965
 801192c:	08011965 	.word	0x08011965
 8011930:	08011965 	.word	0x08011965
 8011934:	08011965 	.word	0x08011965
 8011938:	08011965 	.word	0x08011965
 801193c:	08011965 	.word	0x08011965
 8011940:	08011965 	.word	0x08011965
 8011944:	08011965 	.word	0x08011965
 8011948:	08011965 	.word	0x08011965
 801194c:	08011965 	.word	0x08011965
 8011950:	08011965 	.word	0x08011965
 8011954:	08011965 	.word	0x08011965
 8011958:	08011965 	.word	0x08011965
 801195c:	08011965 	.word	0x08011965
 8011960:	08011965 	.word	0x08011965
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011964:	bf00      	nop
  }

  return (USBD_OK);
 8011966:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011968:	4618      	mov	r0, r3
 801196a:	370c      	adds	r7, #12
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr

08011974 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801197e:	6879      	ldr	r1, [r7, #4]
 8011980:	4805      	ldr	r0, [pc, #20]	@ (8011998 <CDC_Receive_FS+0x24>)
 8011982:	f7fd ff97 	bl	800f8b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011986:	4804      	ldr	r0, [pc, #16]	@ (8011998 <CDC_Receive_FS+0x24>)
 8011988:	f7fd fff2 	bl	800f970 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801198c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801198e:	4618      	mov	r0, r3
 8011990:	3708      	adds	r7, #8
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	24000bb0 	.word	0x24000bb0

0801199c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b084      	sub	sp, #16
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	460b      	mov	r3, r1
 80119a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80119a8:	2300      	movs	r3, #0
 80119aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80119ac:	4b0d      	ldr	r3, [pc, #52]	@ (80119e4 <CDC_Transmit_FS+0x48>)
 80119ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80119b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d001      	beq.n	80119c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80119be:	2301      	movs	r3, #1
 80119c0:	e00b      	b.n	80119da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80119c2:	887b      	ldrh	r3, [r7, #2]
 80119c4:	461a      	mov	r2, r3
 80119c6:	6879      	ldr	r1, [r7, #4]
 80119c8:	4806      	ldr	r0, [pc, #24]	@ (80119e4 <CDC_Transmit_FS+0x48>)
 80119ca:	f7fd ff51 	bl	800f870 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80119ce:	4805      	ldr	r0, [pc, #20]	@ (80119e4 <CDC_Transmit_FS+0x48>)
 80119d0:	f7fd ff8e 	bl	800f8f0 <USBD_CDC_TransmitPacket>
 80119d4:	4603      	mov	r3, r0
 80119d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80119d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3710      	adds	r7, #16
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
 80119e2:	bf00      	nop
 80119e4:	24000bb0 	.word	0x24000bb0

080119e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80119e8:	b480      	push	{r7}
 80119ea:	b087      	sub	sp, #28
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	60f8      	str	r0, [r7, #12]
 80119f0:	60b9      	str	r1, [r7, #8]
 80119f2:	4613      	mov	r3, r2
 80119f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80119f6:	2300      	movs	r3, #0
 80119f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80119fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	371c      	adds	r7, #28
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr
	...

08011a0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	4603      	mov	r3, r0
 8011a14:	6039      	str	r1, [r7, #0]
 8011a16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	2212      	movs	r2, #18
 8011a1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011a1e:	4b03      	ldr	r3, [pc, #12]	@ (8011a2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	370c      	adds	r7, #12
 8011a24:	46bd      	mov	sp, r7
 8011a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2a:	4770      	bx	lr
 8011a2c:	240000d4 	.word	0x240000d4

08011a30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a30:	b480      	push	{r7}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	4603      	mov	r3, r0
 8011a38:	6039      	str	r1, [r7, #0]
 8011a3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	2204      	movs	r2, #4
 8011a40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011a42:	4b03      	ldr	r3, [pc, #12]	@ (8011a50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	370c      	adds	r7, #12
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr
 8011a50:	240000e8 	.word	0x240000e8

08011a54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	6039      	str	r1, [r7, #0]
 8011a5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a60:	79fb      	ldrb	r3, [r7, #7]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d105      	bne.n	8011a72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011a66:	683a      	ldr	r2, [r7, #0]
 8011a68:	4907      	ldr	r1, [pc, #28]	@ (8011a88 <USBD_FS_ProductStrDescriptor+0x34>)
 8011a6a:	4808      	ldr	r0, [pc, #32]	@ (8011a8c <USBD_FS_ProductStrDescriptor+0x38>)
 8011a6c:	f7ff f9f6 	bl	8010e5c <USBD_GetString>
 8011a70:	e004      	b.n	8011a7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011a72:	683a      	ldr	r2, [r7, #0]
 8011a74:	4904      	ldr	r1, [pc, #16]	@ (8011a88 <USBD_FS_ProductStrDescriptor+0x34>)
 8011a76:	4805      	ldr	r0, [pc, #20]	@ (8011a8c <USBD_FS_ProductStrDescriptor+0x38>)
 8011a78:	f7ff f9f0 	bl	8010e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a7c:	4b02      	ldr	r3, [pc, #8]	@ (8011a88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3708      	adds	r7, #8
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	24001e8c 	.word	0x24001e8c
 8011a8c:	08015200 	.word	0x08015200

08011a90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	4603      	mov	r3, r0
 8011a98:	6039      	str	r1, [r7, #0]
 8011a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011a9c:	683a      	ldr	r2, [r7, #0]
 8011a9e:	4904      	ldr	r1, [pc, #16]	@ (8011ab0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011aa0:	4804      	ldr	r0, [pc, #16]	@ (8011ab4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011aa2:	f7ff f9db 	bl	8010e5c <USBD_GetString>
  return USBD_StrDesc;
 8011aa6:	4b02      	ldr	r3, [pc, #8]	@ (8011ab0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	3708      	adds	r7, #8
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	24001e8c 	.word	0x24001e8c
 8011ab4:	08015218 	.word	0x08015218

08011ab8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	4603      	mov	r3, r0
 8011ac0:	6039      	str	r1, [r7, #0]
 8011ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	221a      	movs	r2, #26
 8011ac8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011aca:	f000 f843 	bl	8011b54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011ace:	4b02      	ldr	r3, [pc, #8]	@ (8011ad8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3708      	adds	r7, #8
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}
 8011ad8:	240000ec 	.word	0x240000ec

08011adc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	6039      	str	r1, [r7, #0]
 8011ae6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011ae8:	79fb      	ldrb	r3, [r7, #7]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d105      	bne.n	8011afa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011aee:	683a      	ldr	r2, [r7, #0]
 8011af0:	4907      	ldr	r1, [pc, #28]	@ (8011b10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011af2:	4808      	ldr	r0, [pc, #32]	@ (8011b14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011af4:	f7ff f9b2 	bl	8010e5c <USBD_GetString>
 8011af8:	e004      	b.n	8011b04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011afa:	683a      	ldr	r2, [r7, #0]
 8011afc:	4904      	ldr	r1, [pc, #16]	@ (8011b10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011afe:	4805      	ldr	r0, [pc, #20]	@ (8011b14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011b00:	f7ff f9ac 	bl	8010e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b04:	4b02      	ldr	r3, [pc, #8]	@ (8011b10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	24001e8c 	.word	0x24001e8c
 8011b14:	0801522c 	.word	0x0801522c

08011b18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	4603      	mov	r3, r0
 8011b20:	6039      	str	r1, [r7, #0]
 8011b22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011b24:	79fb      	ldrb	r3, [r7, #7]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d105      	bne.n	8011b36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011b2a:	683a      	ldr	r2, [r7, #0]
 8011b2c:	4907      	ldr	r1, [pc, #28]	@ (8011b4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011b2e:	4808      	ldr	r0, [pc, #32]	@ (8011b50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011b30:	f7ff f994 	bl	8010e5c <USBD_GetString>
 8011b34:	e004      	b.n	8011b40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011b36:	683a      	ldr	r2, [r7, #0]
 8011b38:	4904      	ldr	r1, [pc, #16]	@ (8011b4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011b3a:	4805      	ldr	r0, [pc, #20]	@ (8011b50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011b3c:	f7ff f98e 	bl	8010e5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b40:	4b02      	ldr	r3, [pc, #8]	@ (8011b4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3708      	adds	r7, #8
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	24001e8c 	.word	0x24001e8c
 8011b50:	08015238 	.word	0x08015238

08011b54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b084      	sub	sp, #16
 8011b58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8011b5a:	68fa      	ldr	r2, [r7, #12]
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	4413      	add	r3, r2
 8011b60:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d009      	beq.n	8011b7c <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011b68:	2208      	movs	r2, #8
 8011b6a:	4906      	ldr	r1, [pc, #24]	@ (8011b84 <Get_SerialNum+0x30>)
 8011b6c:	68f8      	ldr	r0, [r7, #12]
 8011b6e:	f000 f80d 	bl	8011b8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011b72:	2204      	movs	r2, #4
 8011b74:	4904      	ldr	r1, [pc, #16]	@ (8011b88 <Get_SerialNum+0x34>)
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 f808 	bl	8011b8c <IntToUnicode>
  }
}
 8011b7c:	bf00      	nop
 8011b7e:	3710      	adds	r7, #16
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	240000ee 	.word	0x240000ee
 8011b88:	240000fe 	.word	0x240000fe

08011b8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b087      	sub	sp, #28
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	60f8      	str	r0, [r7, #12]
 8011b94:	60b9      	str	r1, [r7, #8]
 8011b96:	4613      	mov	r3, r2
 8011b98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	75fb      	strb	r3, [r7, #23]
 8011ba2:	e027      	b.n	8011bf4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	0f1b      	lsrs	r3, r3, #28
 8011ba8:	2b09      	cmp	r3, #9
 8011baa:	d80b      	bhi.n	8011bc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	0f1b      	lsrs	r3, r3, #28
 8011bb0:	b2da      	uxtb	r2, r3
 8011bb2:	7dfb      	ldrb	r3, [r7, #23]
 8011bb4:	005b      	lsls	r3, r3, #1
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	440b      	add	r3, r1
 8011bbc:	3230      	adds	r2, #48	@ 0x30
 8011bbe:	b2d2      	uxtb	r2, r2
 8011bc0:	701a      	strb	r2, [r3, #0]
 8011bc2:	e00a      	b.n	8011bda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	0f1b      	lsrs	r3, r3, #28
 8011bc8:	b2da      	uxtb	r2, r3
 8011bca:	7dfb      	ldrb	r3, [r7, #23]
 8011bcc:	005b      	lsls	r3, r3, #1
 8011bce:	4619      	mov	r1, r3
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	440b      	add	r3, r1
 8011bd4:	3237      	adds	r2, #55	@ 0x37
 8011bd6:	b2d2      	uxtb	r2, r2
 8011bd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	011b      	lsls	r3, r3, #4
 8011bde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011be0:	7dfb      	ldrb	r3, [r7, #23]
 8011be2:	005b      	lsls	r3, r3, #1
 8011be4:	3301      	adds	r3, #1
 8011be6:	68ba      	ldr	r2, [r7, #8]
 8011be8:	4413      	add	r3, r2
 8011bea:	2200      	movs	r2, #0
 8011bec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011bee:	7dfb      	ldrb	r3, [r7, #23]
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	75fb      	strb	r3, [r7, #23]
 8011bf4:	7dfa      	ldrb	r2, [r7, #23]
 8011bf6:	79fb      	ldrb	r3, [r7, #7]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d3d3      	bcc.n	8011ba4 <IntToUnicode+0x18>
  }
}
 8011bfc:	bf00      	nop
 8011bfe:	bf00      	nop
 8011c00:	371c      	adds	r7, #28
 8011c02:	46bd      	mov	sp, r7
 8011c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c08:	4770      	bx	lr
	...

08011c0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b0ba      	sub	sp, #232	@ 0xe8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011c18:	2200      	movs	r2, #0
 8011c1a:	601a      	str	r2, [r3, #0]
 8011c1c:	605a      	str	r2, [r3, #4]
 8011c1e:	609a      	str	r2, [r3, #8]
 8011c20:	60da      	str	r2, [r3, #12]
 8011c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011c24:	f107 0310 	add.w	r3, r7, #16
 8011c28:	22c0      	movs	r2, #192	@ 0xc0
 8011c2a:	2100      	movs	r1, #0
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f001 f9c8 	bl	8012fc2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4a2c      	ldr	r2, [pc, #176]	@ (8011ce8 <HAL_PCD_MspInit+0xdc>)
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	d151      	bne.n	8011ce0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011c3c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011c40:	f04f 0300 	mov.w	r3, #0
 8011c44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011c48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011c50:	f107 0310 	add.w	r3, r7, #16
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7f7 faa3 	bl	80091a0 <HAL_RCCEx_PeriphCLKConfig>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d001      	beq.n	8011c64 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011c60:	f7ef fae4 	bl	800122c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011c64:	f7f6 fa7a 	bl	800815c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c68:	4b20      	ldr	r3, [pc, #128]	@ (8011cec <HAL_PCD_MspInit+0xe0>)
 8011c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8011cec <HAL_PCD_MspInit+0xe0>)
 8011c70:	f043 0301 	orr.w	r3, r3, #1
 8011c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011c78:	4b1c      	ldr	r3, [pc, #112]	@ (8011cec <HAL_PCD_MspInit+0xe0>)
 8011c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011c7e:	f003 0301 	and.w	r3, r3, #1
 8011c82:	60fb      	str	r3, [r7, #12]
 8011c84:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011c86:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c8e:	2302      	movs	r3, #2
 8011c90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c94:	2300      	movs	r3, #0
 8011c96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011ca0:	230a      	movs	r3, #10
 8011ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ca6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011caa:	4619      	mov	r1, r3
 8011cac:	4810      	ldr	r0, [pc, #64]	@ (8011cf0 <HAL_PCD_MspInit+0xe4>)
 8011cae:	f7f4 f8df 	bl	8005e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8011cec <HAL_PCD_MspInit+0xe0>)
 8011cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8011cec <HAL_PCD_MspInit+0xe0>)
 8011cba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011cbe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8011cec <HAL_PCD_MspInit+0xe0>)
 8011cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011ccc:	60bb      	str	r3, [r7, #8]
 8011cce:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	2100      	movs	r1, #0
 8011cd4:	2065      	movs	r0, #101	@ 0x65
 8011cd6:	f7f1 fd09 	bl	80036ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011cda:	2065      	movs	r0, #101	@ 0x65
 8011cdc:	f7f1 fd20 	bl	8003720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011ce0:	bf00      	nop
 8011ce2:	37e8      	adds	r7, #232	@ 0xe8
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	40080000 	.word	0x40080000
 8011cec:	58024400 	.word	0x58024400
 8011cf0:	58020000 	.word	0x58020000

08011cf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011d08:	4619      	mov	r1, r3
 8011d0a:	4610      	mov	r0, r2
 8011d0c:	f7fd ff19 	bl	800fb42 <USBD_LL_SetupStage>
}
 8011d10:	bf00      	nop
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	460b      	mov	r3, r1
 8011d22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011d2a:	78fa      	ldrb	r2, [r7, #3]
 8011d2c:	6879      	ldr	r1, [r7, #4]
 8011d2e:	4613      	mov	r3, r2
 8011d30:	00db      	lsls	r3, r3, #3
 8011d32:	4413      	add	r3, r2
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	440b      	add	r3, r1
 8011d38:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8011d3c:	681a      	ldr	r2, [r3, #0]
 8011d3e:	78fb      	ldrb	r3, [r7, #3]
 8011d40:	4619      	mov	r1, r3
 8011d42:	f7fd ff53 	bl	800fbec <USBD_LL_DataOutStage>
}
 8011d46:	bf00      	nop
 8011d48:	3708      	adds	r7, #8
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}

08011d4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b082      	sub	sp, #8
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
 8011d56:	460b      	mov	r3, r1
 8011d58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011d60:	78fa      	ldrb	r2, [r7, #3]
 8011d62:	6879      	ldr	r1, [r7, #4]
 8011d64:	4613      	mov	r3, r2
 8011d66:	00db      	lsls	r3, r3, #3
 8011d68:	4413      	add	r3, r2
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	440b      	add	r3, r1
 8011d6e:	3348      	adds	r3, #72	@ 0x48
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	78fb      	ldrb	r3, [r7, #3]
 8011d74:	4619      	mov	r1, r3
 8011d76:	f7fd ffec 	bl	800fd52 <USBD_LL_DataInStage>
}
 8011d7a:	bf00      	nop
 8011d7c:	3708      	adds	r7, #8
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}

08011d82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b082      	sub	sp, #8
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fe f926 	bl	800ffe2 <USBD_LL_SOF>
}
 8011d96:	bf00      	nop
 8011d98:	3708      	adds	r7, #8
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}

08011d9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b084      	sub	sp, #16
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011da6:	2301      	movs	r3, #1
 8011da8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	691b      	ldr	r3, [r3, #16]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d102      	bne.n	8011db8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011db2:	2300      	movs	r3, #0
 8011db4:	73fb      	strb	r3, [r7, #15]
 8011db6:	e008      	b.n	8011dca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	691b      	ldr	r3, [r3, #16]
 8011dbc:	2b02      	cmp	r3, #2
 8011dbe:	d102      	bne.n	8011dc6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	73fb      	strb	r3, [r7, #15]
 8011dc4:	e001      	b.n	8011dca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011dc6:	f7ef fa31 	bl	800122c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011dd0:	7bfa      	ldrb	r2, [r7, #15]
 8011dd2:	4611      	mov	r1, r2
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7fe f8c0 	bl	800ff5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7fe f868 	bl	800feb6 <USBD_LL_Reset>
}
 8011de6:	bf00      	nop
 8011de8:	3710      	adds	r7, #16
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
	...

08011df0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b082      	sub	sp, #8
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7fe f8bb 	bl	800ff7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	687a      	ldr	r2, [r7, #4]
 8011e10:	6812      	ldr	r2, [r2, #0]
 8011e12:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011e16:	f043 0301 	orr.w	r3, r3, #1
 8011e1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6a1b      	ldr	r3, [r3, #32]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d005      	beq.n	8011e30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011e24:	4b04      	ldr	r3, [pc, #16]	@ (8011e38 <HAL_PCD_SuspendCallback+0x48>)
 8011e26:	691b      	ldr	r3, [r3, #16]
 8011e28:	4a03      	ldr	r2, [pc, #12]	@ (8011e38 <HAL_PCD_SuspendCallback+0x48>)
 8011e2a:	f043 0306 	orr.w	r3, r3, #6
 8011e2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011e30:	bf00      	nop
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	e000ed00 	.word	0xe000ed00

08011e3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fe f8b1 	bl	800ffb2 <USBD_LL_Resume>
}
 8011e50:	bf00      	nop
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	460b      	mov	r3, r1
 8011e62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011e6a:	78fa      	ldrb	r2, [r7, #3]
 8011e6c:	4611      	mov	r1, r2
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f7fe f909 	bl	8010086 <USBD_LL_IsoOUTIncomplete>
}
 8011e74:	bf00      	nop
 8011e76:	3708      	adds	r7, #8
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	460b      	mov	r3, r1
 8011e86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011e8e:	78fa      	ldrb	r2, [r7, #3]
 8011e90:	4611      	mov	r1, r2
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fe f8c5 	bl	8010022 <USBD_LL_IsoINIncomplete>
}
 8011e98:	bf00      	nop
 8011e9a:	3708      	adds	r7, #8
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}

08011ea0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7fe f91b 	bl	80100ea <USBD_LL_DevConnected>
}
 8011eb4:	bf00      	nop
 8011eb6:	3708      	adds	r7, #8
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fe f918 	bl	8010100 <USBD_LL_DevDisconnected>
}
 8011ed0:	bf00      	nop
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d13e      	bne.n	8011f66 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011ee8:	4a21      	ldr	r2, [pc, #132]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011ef4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011efa:	4a1e      	ldr	r2, [pc, #120]	@ (8011f74 <USBD_LL_Init+0x9c>)
 8011efc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011efe:	4b1c      	ldr	r3, [pc, #112]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f00:	2209      	movs	r2, #9
 8011f02:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011f04:	4b1a      	ldr	r3, [pc, #104]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f06:	2202      	movs	r2, #2
 8011f08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011f0a:	4b19      	ldr	r3, [pc, #100]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011f10:	4b17      	ldr	r3, [pc, #92]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f12:	2202      	movs	r2, #2
 8011f14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011f16:	4b16      	ldr	r3, [pc, #88]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f18:	2200      	movs	r2, #0
 8011f1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011f1c:	4b14      	ldr	r3, [pc, #80]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f1e:	2200      	movs	r2, #0
 8011f20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011f22:	4b13      	ldr	r3, [pc, #76]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f24:	2200      	movs	r2, #0
 8011f26:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011f28:	4b11      	ldr	r3, [pc, #68]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011f2e:	4b10      	ldr	r3, [pc, #64]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f30:	2200      	movs	r2, #0
 8011f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011f34:	4b0e      	ldr	r3, [pc, #56]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f36:	2200      	movs	r2, #0
 8011f38:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011f3a:	480d      	ldr	r0, [pc, #52]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f3c:	f7f4 fe1b 	bl	8006b76 <HAL_PCD_Init>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d001      	beq.n	8011f4a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011f46:	f7ef f971 	bl	800122c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011f4a:	2180      	movs	r1, #128	@ 0x80
 8011f4c:	4808      	ldr	r0, [pc, #32]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f4e:	f7f6 f88a 	bl	8008066 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011f52:	2240      	movs	r2, #64	@ 0x40
 8011f54:	2100      	movs	r1, #0
 8011f56:	4806      	ldr	r0, [pc, #24]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f58:	f7f6 f83e 	bl	8007fd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011f5c:	2280      	movs	r2, #128	@ 0x80
 8011f5e:	2101      	movs	r1, #1
 8011f60:	4803      	ldr	r0, [pc, #12]	@ (8011f70 <USBD_LL_Init+0x98>)
 8011f62:	f7f6 f839 	bl	8007fd8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011f66:	2300      	movs	r3, #0
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3708      	adds	r7, #8
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}
 8011f70:	2400208c 	.word	0x2400208c
 8011f74:	40080000 	.word	0x40080000

08011f78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f80:	2300      	movs	r3, #0
 8011f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f84:	2300      	movs	r3, #0
 8011f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7f4 ff15 	bl	8006dbe <HAL_PCD_Start>
 8011f94:	4603      	mov	r3, r0
 8011f96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f98:	7bfb      	ldrb	r3, [r7, #15]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f000 f942 	bl	8012224 <USBD_Get_USB_Status>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3710      	adds	r7, #16
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}

08011fae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011fae:	b580      	push	{r7, lr}
 8011fb0:	b084      	sub	sp, #16
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	6078      	str	r0, [r7, #4]
 8011fb6:	4608      	mov	r0, r1
 8011fb8:	4611      	mov	r1, r2
 8011fba:	461a      	mov	r2, r3
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	70fb      	strb	r3, [r7, #3]
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	70bb      	strb	r3, [r7, #2]
 8011fc4:	4613      	mov	r3, r2
 8011fc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011fd6:	78bb      	ldrb	r3, [r7, #2]
 8011fd8:	883a      	ldrh	r2, [r7, #0]
 8011fda:	78f9      	ldrb	r1, [r7, #3]
 8011fdc:	f7f5 fc15 	bl	800780a <HAL_PCD_EP_Open>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fe4:	7bfb      	ldrb	r3, [r7, #15]
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f000 f91c 	bl	8012224 <USBD_Get_USB_Status>
 8011fec:	4603      	mov	r3, r0
 8011fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3710      	adds	r7, #16
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}

08011ffa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ffa:	b580      	push	{r7, lr}
 8011ffc:	b084      	sub	sp, #16
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	6078      	str	r0, [r7, #4]
 8012002:	460b      	mov	r3, r1
 8012004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012006:	2300      	movs	r3, #0
 8012008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801200a:	2300      	movs	r3, #0
 801200c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012014:	78fa      	ldrb	r2, [r7, #3]
 8012016:	4611      	mov	r1, r2
 8012018:	4618      	mov	r0, r3
 801201a:	f7f5 fc5e 	bl	80078da <HAL_PCD_EP_Close>
 801201e:	4603      	mov	r3, r0
 8012020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012022:	7bfb      	ldrb	r3, [r7, #15]
 8012024:	4618      	mov	r0, r3
 8012026:	f000 f8fd 	bl	8012224 <USBD_Get_USB_Status>
 801202a:	4603      	mov	r3, r0
 801202c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801202e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012030:	4618      	mov	r0, r3
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b084      	sub	sp, #16
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	460b      	mov	r3, r1
 8012042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012044:	2300      	movs	r3, #0
 8012046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012048:	2300      	movs	r3, #0
 801204a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012052:	78fa      	ldrb	r2, [r7, #3]
 8012054:	4611      	mov	r1, r2
 8012056:	4618      	mov	r0, r3
 8012058:	f7f5 fd18 	bl	8007a8c <HAL_PCD_EP_SetStall>
 801205c:	4603      	mov	r3, r0
 801205e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012060:	7bfb      	ldrb	r3, [r7, #15]
 8012062:	4618      	mov	r0, r3
 8012064:	f000 f8de 	bl	8012224 <USBD_Get_USB_Status>
 8012068:	4603      	mov	r3, r0
 801206a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801206c:	7bbb      	ldrb	r3, [r7, #14]
}
 801206e:	4618      	mov	r0, r3
 8012070:	3710      	adds	r7, #16
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}

08012076 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012076:	b580      	push	{r7, lr}
 8012078:	b084      	sub	sp, #16
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
 801207e:	460b      	mov	r3, r1
 8012080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012082:	2300      	movs	r3, #0
 8012084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012086:	2300      	movs	r3, #0
 8012088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012090:	78fa      	ldrb	r2, [r7, #3]
 8012092:	4611      	mov	r1, r2
 8012094:	4618      	mov	r0, r3
 8012096:	f7f5 fd5d 	bl	8007b54 <HAL_PCD_EP_ClrStall>
 801209a:	4603      	mov	r3, r0
 801209c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801209e:	7bfb      	ldrb	r3, [r7, #15]
 80120a0:	4618      	mov	r0, r3
 80120a2:	f000 f8bf 	bl	8012224 <USBD_Get_USB_Status>
 80120a6:	4603      	mov	r3, r0
 80120a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3710      	adds	r7, #16
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120b4:	b480      	push	{r7}
 80120b6:	b085      	sub	sp, #20
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	460b      	mov	r3, r1
 80120be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80120c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80120c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	da0b      	bge.n	80120e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80120d0:	78fb      	ldrb	r3, [r7, #3]
 80120d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80120d6:	68f9      	ldr	r1, [r7, #12]
 80120d8:	4613      	mov	r3, r2
 80120da:	00db      	lsls	r3, r3, #3
 80120dc:	4413      	add	r3, r2
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	440b      	add	r3, r1
 80120e2:	333e      	adds	r3, #62	@ 0x3e
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	e00b      	b.n	8012100 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80120e8:	78fb      	ldrb	r3, [r7, #3]
 80120ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80120ee:	68f9      	ldr	r1, [r7, #12]
 80120f0:	4613      	mov	r3, r2
 80120f2:	00db      	lsls	r3, r3, #3
 80120f4:	4413      	add	r3, r2
 80120f6:	009b      	lsls	r3, r3, #2
 80120f8:	440b      	add	r3, r1
 80120fa:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 80120fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012100:	4618      	mov	r0, r3
 8012102:	3714      	adds	r7, #20
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr

0801210c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	460b      	mov	r3, r1
 8012116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012118:	2300      	movs	r3, #0
 801211a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801211c:	2300      	movs	r3, #0
 801211e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012126:	78fa      	ldrb	r2, [r7, #3]
 8012128:	4611      	mov	r1, r2
 801212a:	4618      	mov	r0, r3
 801212c:	f7f5 fb48 	bl	80077c0 <HAL_PCD_SetAddress>
 8012130:	4603      	mov	r3, r0
 8012132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012134:	7bfb      	ldrb	r3, [r7, #15]
 8012136:	4618      	mov	r0, r3
 8012138:	f000 f874 	bl	8012224 <USBD_Get_USB_Status>
 801213c:	4603      	mov	r3, r0
 801213e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012140:	7bbb      	ldrb	r3, [r7, #14]
}
 8012142:	4618      	mov	r0, r3
 8012144:	3710      	adds	r7, #16
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}

0801214a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801214a:	b580      	push	{r7, lr}
 801214c:	b086      	sub	sp, #24
 801214e:	af00      	add	r7, sp, #0
 8012150:	60f8      	str	r0, [r7, #12]
 8012152:	607a      	str	r2, [r7, #4]
 8012154:	603b      	str	r3, [r7, #0]
 8012156:	460b      	mov	r3, r1
 8012158:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801215a:	2300      	movs	r3, #0
 801215c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801215e:	2300      	movs	r3, #0
 8012160:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012168:	7af9      	ldrb	r1, [r7, #11]
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	f7f5 fc52 	bl	8007a16 <HAL_PCD_EP_Transmit>
 8012172:	4603      	mov	r3, r0
 8012174:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012176:	7dfb      	ldrb	r3, [r7, #23]
 8012178:	4618      	mov	r0, r3
 801217a:	f000 f853 	bl	8012224 <USBD_Get_USB_Status>
 801217e:	4603      	mov	r3, r0
 8012180:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012182:	7dbb      	ldrb	r3, [r7, #22]
}
 8012184:	4618      	mov	r0, r3
 8012186:	3718      	adds	r7, #24
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b086      	sub	sp, #24
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	607a      	str	r2, [r7, #4]
 8012196:	603b      	str	r3, [r7, #0]
 8012198:	460b      	mov	r3, r1
 801219a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801219c:	2300      	movs	r3, #0
 801219e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121a0:	2300      	movs	r3, #0
 80121a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80121aa:	7af9      	ldrb	r1, [r7, #11]
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	687a      	ldr	r2, [r7, #4]
 80121b0:	f7f5 fbdd 	bl	800796e <HAL_PCD_EP_Receive>
 80121b4:	4603      	mov	r3, r0
 80121b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121b8:	7dfb      	ldrb	r3, [r7, #23]
 80121ba:	4618      	mov	r0, r3
 80121bc:	f000 f832 	bl	8012224 <USBD_Get_USB_Status>
 80121c0:	4603      	mov	r3, r0
 80121c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80121c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3718      	adds	r7, #24
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}

080121ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80121ce:	b580      	push	{r7, lr}
 80121d0:	b082      	sub	sp, #8
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	6078      	str	r0, [r7, #4]
 80121d6:	460b      	mov	r3, r1
 80121d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121e0:	78fa      	ldrb	r2, [r7, #3]
 80121e2:	4611      	mov	r1, r2
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7f5 fbfe 	bl	80079e6 <HAL_PCD_EP_GetRxCount>
 80121ea:	4603      	mov	r3, r0
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b083      	sub	sp, #12
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80121fc:	4b03      	ldr	r3, [pc, #12]	@ (801220c <USBD_static_malloc+0x18>)
}
 80121fe:	4618      	mov	r0, r3
 8012200:	370c      	adds	r7, #12
 8012202:	46bd      	mov	sp, r7
 8012204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012208:	4770      	bx	lr
 801220a:	bf00      	nop
 801220c:	24002598 	.word	0x24002598

08012210 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012218:	bf00      	nop
 801221a:	370c      	adds	r7, #12
 801221c:	46bd      	mov	sp, r7
 801221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012222:	4770      	bx	lr

08012224 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012224:	b480      	push	{r7}
 8012226:	b085      	sub	sp, #20
 8012228:	af00      	add	r7, sp, #0
 801222a:	4603      	mov	r3, r0
 801222c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801222e:	2300      	movs	r3, #0
 8012230:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012232:	79fb      	ldrb	r3, [r7, #7]
 8012234:	2b03      	cmp	r3, #3
 8012236:	d817      	bhi.n	8012268 <USBD_Get_USB_Status+0x44>
 8012238:	a201      	add	r2, pc, #4	@ (adr r2, 8012240 <USBD_Get_USB_Status+0x1c>)
 801223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801223e:	bf00      	nop
 8012240:	08012251 	.word	0x08012251
 8012244:	08012257 	.word	0x08012257
 8012248:	0801225d 	.word	0x0801225d
 801224c:	08012263 	.word	0x08012263
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012250:	2300      	movs	r3, #0
 8012252:	73fb      	strb	r3, [r7, #15]
    break;
 8012254:	e00b      	b.n	801226e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012256:	2303      	movs	r3, #3
 8012258:	73fb      	strb	r3, [r7, #15]
    break;
 801225a:	e008      	b.n	801226e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801225c:	2301      	movs	r3, #1
 801225e:	73fb      	strb	r3, [r7, #15]
    break;
 8012260:	e005      	b.n	801226e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012262:	2303      	movs	r3, #3
 8012264:	73fb      	strb	r3, [r7, #15]
    break;
 8012266:	e002      	b.n	801226e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012268:	2303      	movs	r3, #3
 801226a:	73fb      	strb	r3, [r7, #15]
    break;
 801226c:	bf00      	nop
  }
  return usb_status;
 801226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012270:	4618      	mov	r0, r3
 8012272:	3714      	adds	r7, #20
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr

0801227c <arm_sin_f32>:
 801227c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80122fc <arm_sin_f32+0x80>
 8012280:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012284:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012288:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012290:	d504      	bpl.n	801229c <arm_sin_f32+0x20>
 8012292:	ee17 3a90 	vmov	r3, s15
 8012296:	3b01      	subs	r3, #1
 8012298:	ee07 3a90 	vmov	s15, r3
 801229c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122a0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012300 <arm_sin_f32+0x84>
 80122a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80122a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80122ac:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80122b0:	ee17 3a10 	vmov	r3, s14
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122ba:	d21a      	bcs.n	80122f2 <arm_sin_f32+0x76>
 80122bc:	ee07 3a10 	vmov	s14, r3
 80122c0:	1c59      	adds	r1, r3, #1
 80122c2:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80122c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80122ca:	4a0e      	ldr	r2, [pc, #56]	@ (8012304 <arm_sin_f32+0x88>)
 80122cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80122d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80122d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80122d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80122dc:	edd3 6a00 	vldr	s13, [r3]
 80122e0:	ed92 7a00 	vldr	s14, [r2]
 80122e4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80122e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 80122f0:	4770      	bx	lr
 80122f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80122f6:	2101      	movs	r1, #1
 80122f8:	2300      	movs	r3, #0
 80122fa:	e7e6      	b.n	80122ca <arm_sin_f32+0x4e>
 80122fc:	3e22f983 	.word	0x3e22f983
 8012300:	44000000 	.word	0x44000000
 8012304:	08015260 	.word	0x08015260

08012308 <arm_cos_f32>:
 8012308:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8012390 <arm_cos_f32+0x88>
 801230c:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8012310:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012314:	ee30 0a07 	vadd.f32	s0, s0, s14
 8012318:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801231c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012324:	d504      	bpl.n	8012330 <arm_cos_f32+0x28>
 8012326:	ee17 3a90 	vmov	r3, s15
 801232a:	3b01      	subs	r3, #1
 801232c:	ee07 3a90 	vmov	s15, r3
 8012330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012334:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012394 <arm_cos_f32+0x8c>
 8012338:	ee70 7a67 	vsub.f32	s15, s0, s15
 801233c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012340:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8012344:	ee17 3a10 	vmov	r3, s14
 8012348:	b29b      	uxth	r3, r3
 801234a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801234e:	d21a      	bcs.n	8012386 <arm_cos_f32+0x7e>
 8012350:	ee07 3a10 	vmov	s14, r3
 8012354:	1c59      	adds	r1, r3, #1
 8012356:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801235a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801235e:	4a0e      	ldr	r2, [pc, #56]	@ (8012398 <arm_cos_f32+0x90>)
 8012360:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012364:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012368:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801236c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012370:	edd3 6a00 	vldr	s13, [r3]
 8012374:	ed92 7a00 	vldr	s14, [r2]
 8012378:	ee20 0a26 	vmul.f32	s0, s0, s13
 801237c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012380:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012384:	4770      	bx	lr
 8012386:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801238a:	2101      	movs	r1, #1
 801238c:	2300      	movs	r3, #0
 801238e:	e7e6      	b.n	801235e <arm_cos_f32+0x56>
 8012390:	3e22f983 	.word	0x3e22f983
 8012394:	44000000 	.word	0x44000000
 8012398:	08015260 	.word	0x08015260

0801239c <malloc>:
 801239c:	4b02      	ldr	r3, [pc, #8]	@ (80123a8 <malloc+0xc>)
 801239e:	4601      	mov	r1, r0
 80123a0:	6818      	ldr	r0, [r3, #0]
 80123a2:	f000 b825 	b.w	80123f0 <_malloc_r>
 80123a6:	bf00      	nop
 80123a8:	24000114 	.word	0x24000114

080123ac <sbrk_aligned>:
 80123ac:	b570      	push	{r4, r5, r6, lr}
 80123ae:	4e0f      	ldr	r6, [pc, #60]	@ (80123ec <sbrk_aligned+0x40>)
 80123b0:	460c      	mov	r4, r1
 80123b2:	6831      	ldr	r1, [r6, #0]
 80123b4:	4605      	mov	r5, r0
 80123b6:	b911      	cbnz	r1, 80123be <sbrk_aligned+0x12>
 80123b8:	f000 fe44 	bl	8013044 <_sbrk_r>
 80123bc:	6030      	str	r0, [r6, #0]
 80123be:	4621      	mov	r1, r4
 80123c0:	4628      	mov	r0, r5
 80123c2:	f000 fe3f 	bl	8013044 <_sbrk_r>
 80123c6:	1c43      	adds	r3, r0, #1
 80123c8:	d103      	bne.n	80123d2 <sbrk_aligned+0x26>
 80123ca:	f04f 34ff 	mov.w	r4, #4294967295
 80123ce:	4620      	mov	r0, r4
 80123d0:	bd70      	pop	{r4, r5, r6, pc}
 80123d2:	1cc4      	adds	r4, r0, #3
 80123d4:	f024 0403 	bic.w	r4, r4, #3
 80123d8:	42a0      	cmp	r0, r4
 80123da:	d0f8      	beq.n	80123ce <sbrk_aligned+0x22>
 80123dc:	1a21      	subs	r1, r4, r0
 80123de:	4628      	mov	r0, r5
 80123e0:	f000 fe30 	bl	8013044 <_sbrk_r>
 80123e4:	3001      	adds	r0, #1
 80123e6:	d1f2      	bne.n	80123ce <sbrk_aligned+0x22>
 80123e8:	e7ef      	b.n	80123ca <sbrk_aligned+0x1e>
 80123ea:	bf00      	nop
 80123ec:	240027b8 	.word	0x240027b8

080123f0 <_malloc_r>:
 80123f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123f4:	1ccd      	adds	r5, r1, #3
 80123f6:	f025 0503 	bic.w	r5, r5, #3
 80123fa:	3508      	adds	r5, #8
 80123fc:	2d0c      	cmp	r5, #12
 80123fe:	bf38      	it	cc
 8012400:	250c      	movcc	r5, #12
 8012402:	2d00      	cmp	r5, #0
 8012404:	4606      	mov	r6, r0
 8012406:	db01      	blt.n	801240c <_malloc_r+0x1c>
 8012408:	42a9      	cmp	r1, r5
 801240a:	d904      	bls.n	8012416 <_malloc_r+0x26>
 801240c:	230c      	movs	r3, #12
 801240e:	6033      	str	r3, [r6, #0]
 8012410:	2000      	movs	r0, #0
 8012412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012416:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80124ec <_malloc_r+0xfc>
 801241a:	f000 f869 	bl	80124f0 <__malloc_lock>
 801241e:	f8d8 3000 	ldr.w	r3, [r8]
 8012422:	461c      	mov	r4, r3
 8012424:	bb44      	cbnz	r4, 8012478 <_malloc_r+0x88>
 8012426:	4629      	mov	r1, r5
 8012428:	4630      	mov	r0, r6
 801242a:	f7ff ffbf 	bl	80123ac <sbrk_aligned>
 801242e:	1c43      	adds	r3, r0, #1
 8012430:	4604      	mov	r4, r0
 8012432:	d158      	bne.n	80124e6 <_malloc_r+0xf6>
 8012434:	f8d8 4000 	ldr.w	r4, [r8]
 8012438:	4627      	mov	r7, r4
 801243a:	2f00      	cmp	r7, #0
 801243c:	d143      	bne.n	80124c6 <_malloc_r+0xd6>
 801243e:	2c00      	cmp	r4, #0
 8012440:	d04b      	beq.n	80124da <_malloc_r+0xea>
 8012442:	6823      	ldr	r3, [r4, #0]
 8012444:	4639      	mov	r1, r7
 8012446:	4630      	mov	r0, r6
 8012448:	eb04 0903 	add.w	r9, r4, r3
 801244c:	f000 fdfa 	bl	8013044 <_sbrk_r>
 8012450:	4581      	cmp	r9, r0
 8012452:	d142      	bne.n	80124da <_malloc_r+0xea>
 8012454:	6821      	ldr	r1, [r4, #0]
 8012456:	1a6d      	subs	r5, r5, r1
 8012458:	4629      	mov	r1, r5
 801245a:	4630      	mov	r0, r6
 801245c:	f7ff ffa6 	bl	80123ac <sbrk_aligned>
 8012460:	3001      	adds	r0, #1
 8012462:	d03a      	beq.n	80124da <_malloc_r+0xea>
 8012464:	6823      	ldr	r3, [r4, #0]
 8012466:	442b      	add	r3, r5
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	f8d8 3000 	ldr.w	r3, [r8]
 801246e:	685a      	ldr	r2, [r3, #4]
 8012470:	bb62      	cbnz	r2, 80124cc <_malloc_r+0xdc>
 8012472:	f8c8 7000 	str.w	r7, [r8]
 8012476:	e00f      	b.n	8012498 <_malloc_r+0xa8>
 8012478:	6822      	ldr	r2, [r4, #0]
 801247a:	1b52      	subs	r2, r2, r5
 801247c:	d420      	bmi.n	80124c0 <_malloc_r+0xd0>
 801247e:	2a0b      	cmp	r2, #11
 8012480:	d917      	bls.n	80124b2 <_malloc_r+0xc2>
 8012482:	1961      	adds	r1, r4, r5
 8012484:	42a3      	cmp	r3, r4
 8012486:	6025      	str	r5, [r4, #0]
 8012488:	bf18      	it	ne
 801248a:	6059      	strne	r1, [r3, #4]
 801248c:	6863      	ldr	r3, [r4, #4]
 801248e:	bf08      	it	eq
 8012490:	f8c8 1000 	streq.w	r1, [r8]
 8012494:	5162      	str	r2, [r4, r5]
 8012496:	604b      	str	r3, [r1, #4]
 8012498:	4630      	mov	r0, r6
 801249a:	f000 f82f 	bl	80124fc <__malloc_unlock>
 801249e:	f104 000b 	add.w	r0, r4, #11
 80124a2:	1d23      	adds	r3, r4, #4
 80124a4:	f020 0007 	bic.w	r0, r0, #7
 80124a8:	1ac2      	subs	r2, r0, r3
 80124aa:	bf1c      	itt	ne
 80124ac:	1a1b      	subne	r3, r3, r0
 80124ae:	50a3      	strne	r3, [r4, r2]
 80124b0:	e7af      	b.n	8012412 <_malloc_r+0x22>
 80124b2:	6862      	ldr	r2, [r4, #4]
 80124b4:	42a3      	cmp	r3, r4
 80124b6:	bf0c      	ite	eq
 80124b8:	f8c8 2000 	streq.w	r2, [r8]
 80124bc:	605a      	strne	r2, [r3, #4]
 80124be:	e7eb      	b.n	8012498 <_malloc_r+0xa8>
 80124c0:	4623      	mov	r3, r4
 80124c2:	6864      	ldr	r4, [r4, #4]
 80124c4:	e7ae      	b.n	8012424 <_malloc_r+0x34>
 80124c6:	463c      	mov	r4, r7
 80124c8:	687f      	ldr	r7, [r7, #4]
 80124ca:	e7b6      	b.n	801243a <_malloc_r+0x4a>
 80124cc:	461a      	mov	r2, r3
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	42a3      	cmp	r3, r4
 80124d2:	d1fb      	bne.n	80124cc <_malloc_r+0xdc>
 80124d4:	2300      	movs	r3, #0
 80124d6:	6053      	str	r3, [r2, #4]
 80124d8:	e7de      	b.n	8012498 <_malloc_r+0xa8>
 80124da:	230c      	movs	r3, #12
 80124dc:	6033      	str	r3, [r6, #0]
 80124de:	4630      	mov	r0, r6
 80124e0:	f000 f80c 	bl	80124fc <__malloc_unlock>
 80124e4:	e794      	b.n	8012410 <_malloc_r+0x20>
 80124e6:	6005      	str	r5, [r0, #0]
 80124e8:	e7d6      	b.n	8012498 <_malloc_r+0xa8>
 80124ea:	bf00      	nop
 80124ec:	240027bc 	.word	0x240027bc

080124f0 <__malloc_lock>:
 80124f0:	4801      	ldr	r0, [pc, #4]	@ (80124f8 <__malloc_lock+0x8>)
 80124f2:	f000 bdf4 	b.w	80130de <__retarget_lock_acquire_recursive>
 80124f6:	bf00      	nop
 80124f8:	24002900 	.word	0x24002900

080124fc <__malloc_unlock>:
 80124fc:	4801      	ldr	r0, [pc, #4]	@ (8012504 <__malloc_unlock+0x8>)
 80124fe:	f000 bdef 	b.w	80130e0 <__retarget_lock_release_recursive>
 8012502:	bf00      	nop
 8012504:	24002900 	.word	0x24002900

08012508 <__cvt>:
 8012508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801250a:	ed2d 8b02 	vpush	{d8}
 801250e:	eeb0 8b40 	vmov.f64	d8, d0
 8012512:	b085      	sub	sp, #20
 8012514:	4617      	mov	r7, r2
 8012516:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012518:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801251a:	ee18 2a90 	vmov	r2, s17
 801251e:	f025 0520 	bic.w	r5, r5, #32
 8012522:	2a00      	cmp	r2, #0
 8012524:	bfb6      	itet	lt
 8012526:	222d      	movlt	r2, #45	@ 0x2d
 8012528:	2200      	movge	r2, #0
 801252a:	eeb1 8b40 	vneglt.f64	d8, d0
 801252e:	2d46      	cmp	r5, #70	@ 0x46
 8012530:	460c      	mov	r4, r1
 8012532:	701a      	strb	r2, [r3, #0]
 8012534:	d004      	beq.n	8012540 <__cvt+0x38>
 8012536:	2d45      	cmp	r5, #69	@ 0x45
 8012538:	d100      	bne.n	801253c <__cvt+0x34>
 801253a:	3401      	adds	r4, #1
 801253c:	2102      	movs	r1, #2
 801253e:	e000      	b.n	8012542 <__cvt+0x3a>
 8012540:	2103      	movs	r1, #3
 8012542:	ab03      	add	r3, sp, #12
 8012544:	9301      	str	r3, [sp, #4]
 8012546:	ab02      	add	r3, sp, #8
 8012548:	9300      	str	r3, [sp, #0]
 801254a:	4622      	mov	r2, r4
 801254c:	4633      	mov	r3, r6
 801254e:	eeb0 0b48 	vmov.f64	d0, d8
 8012552:	f000 fe51 	bl	80131f8 <_dtoa_r>
 8012556:	2d47      	cmp	r5, #71	@ 0x47
 8012558:	d114      	bne.n	8012584 <__cvt+0x7c>
 801255a:	07fb      	lsls	r3, r7, #31
 801255c:	d50a      	bpl.n	8012574 <__cvt+0x6c>
 801255e:	1902      	adds	r2, r0, r4
 8012560:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012568:	bf08      	it	eq
 801256a:	9203      	streq	r2, [sp, #12]
 801256c:	2130      	movs	r1, #48	@ 0x30
 801256e:	9b03      	ldr	r3, [sp, #12]
 8012570:	4293      	cmp	r3, r2
 8012572:	d319      	bcc.n	80125a8 <__cvt+0xa0>
 8012574:	9b03      	ldr	r3, [sp, #12]
 8012576:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012578:	1a1b      	subs	r3, r3, r0
 801257a:	6013      	str	r3, [r2, #0]
 801257c:	b005      	add	sp, #20
 801257e:	ecbd 8b02 	vpop	{d8}
 8012582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012584:	2d46      	cmp	r5, #70	@ 0x46
 8012586:	eb00 0204 	add.w	r2, r0, r4
 801258a:	d1e9      	bne.n	8012560 <__cvt+0x58>
 801258c:	7803      	ldrb	r3, [r0, #0]
 801258e:	2b30      	cmp	r3, #48	@ 0x30
 8012590:	d107      	bne.n	80125a2 <__cvt+0x9a>
 8012592:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259a:	bf1c      	itt	ne
 801259c:	f1c4 0401 	rsbne	r4, r4, #1
 80125a0:	6034      	strne	r4, [r6, #0]
 80125a2:	6833      	ldr	r3, [r6, #0]
 80125a4:	441a      	add	r2, r3
 80125a6:	e7db      	b.n	8012560 <__cvt+0x58>
 80125a8:	1c5c      	adds	r4, r3, #1
 80125aa:	9403      	str	r4, [sp, #12]
 80125ac:	7019      	strb	r1, [r3, #0]
 80125ae:	e7de      	b.n	801256e <__cvt+0x66>

080125b0 <__exponent>:
 80125b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125b2:	2900      	cmp	r1, #0
 80125b4:	bfba      	itte	lt
 80125b6:	4249      	neglt	r1, r1
 80125b8:	232d      	movlt	r3, #45	@ 0x2d
 80125ba:	232b      	movge	r3, #43	@ 0x2b
 80125bc:	2909      	cmp	r1, #9
 80125be:	7002      	strb	r2, [r0, #0]
 80125c0:	7043      	strb	r3, [r0, #1]
 80125c2:	dd29      	ble.n	8012618 <__exponent+0x68>
 80125c4:	f10d 0307 	add.w	r3, sp, #7
 80125c8:	461d      	mov	r5, r3
 80125ca:	270a      	movs	r7, #10
 80125cc:	461a      	mov	r2, r3
 80125ce:	fbb1 f6f7 	udiv	r6, r1, r7
 80125d2:	fb07 1416 	mls	r4, r7, r6, r1
 80125d6:	3430      	adds	r4, #48	@ 0x30
 80125d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80125dc:	460c      	mov	r4, r1
 80125de:	2c63      	cmp	r4, #99	@ 0x63
 80125e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80125e4:	4631      	mov	r1, r6
 80125e6:	dcf1      	bgt.n	80125cc <__exponent+0x1c>
 80125e8:	3130      	adds	r1, #48	@ 0x30
 80125ea:	1e94      	subs	r4, r2, #2
 80125ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80125f0:	1c41      	adds	r1, r0, #1
 80125f2:	4623      	mov	r3, r4
 80125f4:	42ab      	cmp	r3, r5
 80125f6:	d30a      	bcc.n	801260e <__exponent+0x5e>
 80125f8:	f10d 0309 	add.w	r3, sp, #9
 80125fc:	1a9b      	subs	r3, r3, r2
 80125fe:	42ac      	cmp	r4, r5
 8012600:	bf88      	it	hi
 8012602:	2300      	movhi	r3, #0
 8012604:	3302      	adds	r3, #2
 8012606:	4403      	add	r3, r0
 8012608:	1a18      	subs	r0, r3, r0
 801260a:	b003      	add	sp, #12
 801260c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801260e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012612:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012616:	e7ed      	b.n	80125f4 <__exponent+0x44>
 8012618:	2330      	movs	r3, #48	@ 0x30
 801261a:	3130      	adds	r1, #48	@ 0x30
 801261c:	7083      	strb	r3, [r0, #2]
 801261e:	70c1      	strb	r1, [r0, #3]
 8012620:	1d03      	adds	r3, r0, #4
 8012622:	e7f1      	b.n	8012608 <__exponent+0x58>
 8012624:	0000      	movs	r0, r0
	...

08012628 <_printf_float>:
 8012628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801262c:	b08d      	sub	sp, #52	@ 0x34
 801262e:	460c      	mov	r4, r1
 8012630:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012634:	4616      	mov	r6, r2
 8012636:	461f      	mov	r7, r3
 8012638:	4605      	mov	r5, r0
 801263a:	f000 fccb 	bl	8012fd4 <_localeconv_r>
 801263e:	f8d0 b000 	ldr.w	fp, [r0]
 8012642:	4658      	mov	r0, fp
 8012644:	f7ed fe9c 	bl	8000380 <strlen>
 8012648:	2300      	movs	r3, #0
 801264a:	930a      	str	r3, [sp, #40]	@ 0x28
 801264c:	f8d8 3000 	ldr.w	r3, [r8]
 8012650:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012654:	6822      	ldr	r2, [r4, #0]
 8012656:	9005      	str	r0, [sp, #20]
 8012658:	3307      	adds	r3, #7
 801265a:	f023 0307 	bic.w	r3, r3, #7
 801265e:	f103 0108 	add.w	r1, r3, #8
 8012662:	f8c8 1000 	str.w	r1, [r8]
 8012666:	ed93 0b00 	vldr	d0, [r3]
 801266a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80128c8 <_printf_float+0x2a0>
 801266e:	eeb0 7bc0 	vabs.f64	d7, d0
 8012672:	eeb4 7b46 	vcmp.f64	d7, d6
 8012676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801267e:	dd24      	ble.n	80126ca <_printf_float+0xa2>
 8012680:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012688:	d502      	bpl.n	8012690 <_printf_float+0x68>
 801268a:	232d      	movs	r3, #45	@ 0x2d
 801268c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012690:	498f      	ldr	r1, [pc, #572]	@ (80128d0 <_printf_float+0x2a8>)
 8012692:	4b90      	ldr	r3, [pc, #576]	@ (80128d4 <_printf_float+0x2ac>)
 8012694:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012698:	bf94      	ite	ls
 801269a:	4688      	movls	r8, r1
 801269c:	4698      	movhi	r8, r3
 801269e:	f022 0204 	bic.w	r2, r2, #4
 80126a2:	2303      	movs	r3, #3
 80126a4:	6123      	str	r3, [r4, #16]
 80126a6:	6022      	str	r2, [r4, #0]
 80126a8:	f04f 0a00 	mov.w	sl, #0
 80126ac:	9700      	str	r7, [sp, #0]
 80126ae:	4633      	mov	r3, r6
 80126b0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80126b2:	4621      	mov	r1, r4
 80126b4:	4628      	mov	r0, r5
 80126b6:	f000 f9d1 	bl	8012a5c <_printf_common>
 80126ba:	3001      	adds	r0, #1
 80126bc:	f040 8089 	bne.w	80127d2 <_printf_float+0x1aa>
 80126c0:	f04f 30ff 	mov.w	r0, #4294967295
 80126c4:	b00d      	add	sp, #52	@ 0x34
 80126c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ca:	eeb4 0b40 	vcmp.f64	d0, d0
 80126ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d2:	d709      	bvc.n	80126e8 <_printf_float+0xc0>
 80126d4:	ee10 3a90 	vmov	r3, s1
 80126d8:	2b00      	cmp	r3, #0
 80126da:	bfbc      	itt	lt
 80126dc:	232d      	movlt	r3, #45	@ 0x2d
 80126de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80126e2:	497d      	ldr	r1, [pc, #500]	@ (80128d8 <_printf_float+0x2b0>)
 80126e4:	4b7d      	ldr	r3, [pc, #500]	@ (80128dc <_printf_float+0x2b4>)
 80126e6:	e7d5      	b.n	8012694 <_printf_float+0x6c>
 80126e8:	6863      	ldr	r3, [r4, #4]
 80126ea:	1c59      	adds	r1, r3, #1
 80126ec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80126f0:	d139      	bne.n	8012766 <_printf_float+0x13e>
 80126f2:	2306      	movs	r3, #6
 80126f4:	6063      	str	r3, [r4, #4]
 80126f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80126fa:	2300      	movs	r3, #0
 80126fc:	6022      	str	r2, [r4, #0]
 80126fe:	9303      	str	r3, [sp, #12]
 8012700:	ab0a      	add	r3, sp, #40	@ 0x28
 8012702:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012706:	ab09      	add	r3, sp, #36	@ 0x24
 8012708:	9300      	str	r3, [sp, #0]
 801270a:	6861      	ldr	r1, [r4, #4]
 801270c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012710:	4628      	mov	r0, r5
 8012712:	f7ff fef9 	bl	8012508 <__cvt>
 8012716:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801271a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801271c:	4680      	mov	r8, r0
 801271e:	d129      	bne.n	8012774 <_printf_float+0x14c>
 8012720:	1cc8      	adds	r0, r1, #3
 8012722:	db02      	blt.n	801272a <_printf_float+0x102>
 8012724:	6863      	ldr	r3, [r4, #4]
 8012726:	4299      	cmp	r1, r3
 8012728:	dd41      	ble.n	80127ae <_printf_float+0x186>
 801272a:	f1a9 0902 	sub.w	r9, r9, #2
 801272e:	fa5f f989 	uxtb.w	r9, r9
 8012732:	3901      	subs	r1, #1
 8012734:	464a      	mov	r2, r9
 8012736:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801273a:	9109      	str	r1, [sp, #36]	@ 0x24
 801273c:	f7ff ff38 	bl	80125b0 <__exponent>
 8012740:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012742:	1813      	adds	r3, r2, r0
 8012744:	2a01      	cmp	r2, #1
 8012746:	4682      	mov	sl, r0
 8012748:	6123      	str	r3, [r4, #16]
 801274a:	dc02      	bgt.n	8012752 <_printf_float+0x12a>
 801274c:	6822      	ldr	r2, [r4, #0]
 801274e:	07d2      	lsls	r2, r2, #31
 8012750:	d501      	bpl.n	8012756 <_printf_float+0x12e>
 8012752:	3301      	adds	r3, #1
 8012754:	6123      	str	r3, [r4, #16]
 8012756:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801275a:	2b00      	cmp	r3, #0
 801275c:	d0a6      	beq.n	80126ac <_printf_float+0x84>
 801275e:	232d      	movs	r3, #45	@ 0x2d
 8012760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012764:	e7a2      	b.n	80126ac <_printf_float+0x84>
 8012766:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801276a:	d1c4      	bne.n	80126f6 <_printf_float+0xce>
 801276c:	2b00      	cmp	r3, #0
 801276e:	d1c2      	bne.n	80126f6 <_printf_float+0xce>
 8012770:	2301      	movs	r3, #1
 8012772:	e7bf      	b.n	80126f4 <_printf_float+0xcc>
 8012774:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012778:	d9db      	bls.n	8012732 <_printf_float+0x10a>
 801277a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801277e:	d118      	bne.n	80127b2 <_printf_float+0x18a>
 8012780:	2900      	cmp	r1, #0
 8012782:	6863      	ldr	r3, [r4, #4]
 8012784:	dd0b      	ble.n	801279e <_printf_float+0x176>
 8012786:	6121      	str	r1, [r4, #16]
 8012788:	b913      	cbnz	r3, 8012790 <_printf_float+0x168>
 801278a:	6822      	ldr	r2, [r4, #0]
 801278c:	07d0      	lsls	r0, r2, #31
 801278e:	d502      	bpl.n	8012796 <_printf_float+0x16e>
 8012790:	3301      	adds	r3, #1
 8012792:	440b      	add	r3, r1
 8012794:	6123      	str	r3, [r4, #16]
 8012796:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012798:	f04f 0a00 	mov.w	sl, #0
 801279c:	e7db      	b.n	8012756 <_printf_float+0x12e>
 801279e:	b913      	cbnz	r3, 80127a6 <_printf_float+0x17e>
 80127a0:	6822      	ldr	r2, [r4, #0]
 80127a2:	07d2      	lsls	r2, r2, #31
 80127a4:	d501      	bpl.n	80127aa <_printf_float+0x182>
 80127a6:	3302      	adds	r3, #2
 80127a8:	e7f4      	b.n	8012794 <_printf_float+0x16c>
 80127aa:	2301      	movs	r3, #1
 80127ac:	e7f2      	b.n	8012794 <_printf_float+0x16c>
 80127ae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80127b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127b4:	4299      	cmp	r1, r3
 80127b6:	db05      	blt.n	80127c4 <_printf_float+0x19c>
 80127b8:	6823      	ldr	r3, [r4, #0]
 80127ba:	6121      	str	r1, [r4, #16]
 80127bc:	07d8      	lsls	r0, r3, #31
 80127be:	d5ea      	bpl.n	8012796 <_printf_float+0x16e>
 80127c0:	1c4b      	adds	r3, r1, #1
 80127c2:	e7e7      	b.n	8012794 <_printf_float+0x16c>
 80127c4:	2900      	cmp	r1, #0
 80127c6:	bfd4      	ite	le
 80127c8:	f1c1 0202 	rsble	r2, r1, #2
 80127cc:	2201      	movgt	r2, #1
 80127ce:	4413      	add	r3, r2
 80127d0:	e7e0      	b.n	8012794 <_printf_float+0x16c>
 80127d2:	6823      	ldr	r3, [r4, #0]
 80127d4:	055a      	lsls	r2, r3, #21
 80127d6:	d407      	bmi.n	80127e8 <_printf_float+0x1c0>
 80127d8:	6923      	ldr	r3, [r4, #16]
 80127da:	4642      	mov	r2, r8
 80127dc:	4631      	mov	r1, r6
 80127de:	4628      	mov	r0, r5
 80127e0:	47b8      	blx	r7
 80127e2:	3001      	adds	r0, #1
 80127e4:	d12a      	bne.n	801283c <_printf_float+0x214>
 80127e6:	e76b      	b.n	80126c0 <_printf_float+0x98>
 80127e8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80127ec:	f240 80e0 	bls.w	80129b0 <_printf_float+0x388>
 80127f0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80127f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80127f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fc:	d133      	bne.n	8012866 <_printf_float+0x23e>
 80127fe:	4a38      	ldr	r2, [pc, #224]	@ (80128e0 <_printf_float+0x2b8>)
 8012800:	2301      	movs	r3, #1
 8012802:	4631      	mov	r1, r6
 8012804:	4628      	mov	r0, r5
 8012806:	47b8      	blx	r7
 8012808:	3001      	adds	r0, #1
 801280a:	f43f af59 	beq.w	80126c0 <_printf_float+0x98>
 801280e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012812:	4543      	cmp	r3, r8
 8012814:	db02      	blt.n	801281c <_printf_float+0x1f4>
 8012816:	6823      	ldr	r3, [r4, #0]
 8012818:	07d8      	lsls	r0, r3, #31
 801281a:	d50f      	bpl.n	801283c <_printf_float+0x214>
 801281c:	9b05      	ldr	r3, [sp, #20]
 801281e:	465a      	mov	r2, fp
 8012820:	4631      	mov	r1, r6
 8012822:	4628      	mov	r0, r5
 8012824:	47b8      	blx	r7
 8012826:	3001      	adds	r0, #1
 8012828:	f43f af4a 	beq.w	80126c0 <_printf_float+0x98>
 801282c:	f04f 0900 	mov.w	r9, #0
 8012830:	f108 38ff 	add.w	r8, r8, #4294967295
 8012834:	f104 0a1a 	add.w	sl, r4, #26
 8012838:	45c8      	cmp	r8, r9
 801283a:	dc09      	bgt.n	8012850 <_printf_float+0x228>
 801283c:	6823      	ldr	r3, [r4, #0]
 801283e:	079b      	lsls	r3, r3, #30
 8012840:	f100 8107 	bmi.w	8012a52 <_printf_float+0x42a>
 8012844:	68e0      	ldr	r0, [r4, #12]
 8012846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012848:	4298      	cmp	r0, r3
 801284a:	bfb8      	it	lt
 801284c:	4618      	movlt	r0, r3
 801284e:	e739      	b.n	80126c4 <_printf_float+0x9c>
 8012850:	2301      	movs	r3, #1
 8012852:	4652      	mov	r2, sl
 8012854:	4631      	mov	r1, r6
 8012856:	4628      	mov	r0, r5
 8012858:	47b8      	blx	r7
 801285a:	3001      	adds	r0, #1
 801285c:	f43f af30 	beq.w	80126c0 <_printf_float+0x98>
 8012860:	f109 0901 	add.w	r9, r9, #1
 8012864:	e7e8      	b.n	8012838 <_printf_float+0x210>
 8012866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012868:	2b00      	cmp	r3, #0
 801286a:	dc3b      	bgt.n	80128e4 <_printf_float+0x2bc>
 801286c:	4a1c      	ldr	r2, [pc, #112]	@ (80128e0 <_printf_float+0x2b8>)
 801286e:	2301      	movs	r3, #1
 8012870:	4631      	mov	r1, r6
 8012872:	4628      	mov	r0, r5
 8012874:	47b8      	blx	r7
 8012876:	3001      	adds	r0, #1
 8012878:	f43f af22 	beq.w	80126c0 <_printf_float+0x98>
 801287c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012880:	ea59 0303 	orrs.w	r3, r9, r3
 8012884:	d102      	bne.n	801288c <_printf_float+0x264>
 8012886:	6823      	ldr	r3, [r4, #0]
 8012888:	07d9      	lsls	r1, r3, #31
 801288a:	d5d7      	bpl.n	801283c <_printf_float+0x214>
 801288c:	9b05      	ldr	r3, [sp, #20]
 801288e:	465a      	mov	r2, fp
 8012890:	4631      	mov	r1, r6
 8012892:	4628      	mov	r0, r5
 8012894:	47b8      	blx	r7
 8012896:	3001      	adds	r0, #1
 8012898:	f43f af12 	beq.w	80126c0 <_printf_float+0x98>
 801289c:	f04f 0a00 	mov.w	sl, #0
 80128a0:	f104 0b1a 	add.w	fp, r4, #26
 80128a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128a6:	425b      	negs	r3, r3
 80128a8:	4553      	cmp	r3, sl
 80128aa:	dc01      	bgt.n	80128b0 <_printf_float+0x288>
 80128ac:	464b      	mov	r3, r9
 80128ae:	e794      	b.n	80127da <_printf_float+0x1b2>
 80128b0:	2301      	movs	r3, #1
 80128b2:	465a      	mov	r2, fp
 80128b4:	4631      	mov	r1, r6
 80128b6:	4628      	mov	r0, r5
 80128b8:	47b8      	blx	r7
 80128ba:	3001      	adds	r0, #1
 80128bc:	f43f af00 	beq.w	80126c0 <_printf_float+0x98>
 80128c0:	f10a 0a01 	add.w	sl, sl, #1
 80128c4:	e7ee      	b.n	80128a4 <_printf_float+0x27c>
 80128c6:	bf00      	nop
 80128c8:	ffffffff 	.word	0xffffffff
 80128cc:	7fefffff 	.word	0x7fefffff
 80128d0:	08015a64 	.word	0x08015a64
 80128d4:	08015a68 	.word	0x08015a68
 80128d8:	08015a6c 	.word	0x08015a6c
 80128dc:	08015a70 	.word	0x08015a70
 80128e0:	08015a74 	.word	0x08015a74
 80128e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80128e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80128ea:	4553      	cmp	r3, sl
 80128ec:	bfa8      	it	ge
 80128ee:	4653      	movge	r3, sl
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	4699      	mov	r9, r3
 80128f4:	dc37      	bgt.n	8012966 <_printf_float+0x33e>
 80128f6:	2300      	movs	r3, #0
 80128f8:	9307      	str	r3, [sp, #28]
 80128fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80128fe:	f104 021a 	add.w	r2, r4, #26
 8012902:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012904:	9907      	ldr	r1, [sp, #28]
 8012906:	9306      	str	r3, [sp, #24]
 8012908:	eba3 0309 	sub.w	r3, r3, r9
 801290c:	428b      	cmp	r3, r1
 801290e:	dc31      	bgt.n	8012974 <_printf_float+0x34c>
 8012910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012912:	459a      	cmp	sl, r3
 8012914:	dc3b      	bgt.n	801298e <_printf_float+0x366>
 8012916:	6823      	ldr	r3, [r4, #0]
 8012918:	07da      	lsls	r2, r3, #31
 801291a:	d438      	bmi.n	801298e <_printf_float+0x366>
 801291c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801291e:	ebaa 0903 	sub.w	r9, sl, r3
 8012922:	9b06      	ldr	r3, [sp, #24]
 8012924:	ebaa 0303 	sub.w	r3, sl, r3
 8012928:	4599      	cmp	r9, r3
 801292a:	bfa8      	it	ge
 801292c:	4699      	movge	r9, r3
 801292e:	f1b9 0f00 	cmp.w	r9, #0
 8012932:	dc34      	bgt.n	801299e <_printf_float+0x376>
 8012934:	f04f 0800 	mov.w	r8, #0
 8012938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801293c:	f104 0b1a 	add.w	fp, r4, #26
 8012940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012942:	ebaa 0303 	sub.w	r3, sl, r3
 8012946:	eba3 0309 	sub.w	r3, r3, r9
 801294a:	4543      	cmp	r3, r8
 801294c:	f77f af76 	ble.w	801283c <_printf_float+0x214>
 8012950:	2301      	movs	r3, #1
 8012952:	465a      	mov	r2, fp
 8012954:	4631      	mov	r1, r6
 8012956:	4628      	mov	r0, r5
 8012958:	47b8      	blx	r7
 801295a:	3001      	adds	r0, #1
 801295c:	f43f aeb0 	beq.w	80126c0 <_printf_float+0x98>
 8012960:	f108 0801 	add.w	r8, r8, #1
 8012964:	e7ec      	b.n	8012940 <_printf_float+0x318>
 8012966:	4642      	mov	r2, r8
 8012968:	4631      	mov	r1, r6
 801296a:	4628      	mov	r0, r5
 801296c:	47b8      	blx	r7
 801296e:	3001      	adds	r0, #1
 8012970:	d1c1      	bne.n	80128f6 <_printf_float+0x2ce>
 8012972:	e6a5      	b.n	80126c0 <_printf_float+0x98>
 8012974:	2301      	movs	r3, #1
 8012976:	4631      	mov	r1, r6
 8012978:	4628      	mov	r0, r5
 801297a:	9206      	str	r2, [sp, #24]
 801297c:	47b8      	blx	r7
 801297e:	3001      	adds	r0, #1
 8012980:	f43f ae9e 	beq.w	80126c0 <_printf_float+0x98>
 8012984:	9b07      	ldr	r3, [sp, #28]
 8012986:	9a06      	ldr	r2, [sp, #24]
 8012988:	3301      	adds	r3, #1
 801298a:	9307      	str	r3, [sp, #28]
 801298c:	e7b9      	b.n	8012902 <_printf_float+0x2da>
 801298e:	9b05      	ldr	r3, [sp, #20]
 8012990:	465a      	mov	r2, fp
 8012992:	4631      	mov	r1, r6
 8012994:	4628      	mov	r0, r5
 8012996:	47b8      	blx	r7
 8012998:	3001      	adds	r0, #1
 801299a:	d1bf      	bne.n	801291c <_printf_float+0x2f4>
 801299c:	e690      	b.n	80126c0 <_printf_float+0x98>
 801299e:	9a06      	ldr	r2, [sp, #24]
 80129a0:	464b      	mov	r3, r9
 80129a2:	4442      	add	r2, r8
 80129a4:	4631      	mov	r1, r6
 80129a6:	4628      	mov	r0, r5
 80129a8:	47b8      	blx	r7
 80129aa:	3001      	adds	r0, #1
 80129ac:	d1c2      	bne.n	8012934 <_printf_float+0x30c>
 80129ae:	e687      	b.n	80126c0 <_printf_float+0x98>
 80129b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80129b4:	f1b9 0f01 	cmp.w	r9, #1
 80129b8:	dc01      	bgt.n	80129be <_printf_float+0x396>
 80129ba:	07db      	lsls	r3, r3, #31
 80129bc:	d536      	bpl.n	8012a2c <_printf_float+0x404>
 80129be:	2301      	movs	r3, #1
 80129c0:	4642      	mov	r2, r8
 80129c2:	4631      	mov	r1, r6
 80129c4:	4628      	mov	r0, r5
 80129c6:	47b8      	blx	r7
 80129c8:	3001      	adds	r0, #1
 80129ca:	f43f ae79 	beq.w	80126c0 <_printf_float+0x98>
 80129ce:	9b05      	ldr	r3, [sp, #20]
 80129d0:	465a      	mov	r2, fp
 80129d2:	4631      	mov	r1, r6
 80129d4:	4628      	mov	r0, r5
 80129d6:	47b8      	blx	r7
 80129d8:	3001      	adds	r0, #1
 80129da:	f43f ae71 	beq.w	80126c0 <_printf_float+0x98>
 80129de:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80129e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80129e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80129ee:	d018      	beq.n	8012a22 <_printf_float+0x3fa>
 80129f0:	464b      	mov	r3, r9
 80129f2:	f108 0201 	add.w	r2, r8, #1
 80129f6:	4631      	mov	r1, r6
 80129f8:	4628      	mov	r0, r5
 80129fa:	47b8      	blx	r7
 80129fc:	3001      	adds	r0, #1
 80129fe:	d10c      	bne.n	8012a1a <_printf_float+0x3f2>
 8012a00:	e65e      	b.n	80126c0 <_printf_float+0x98>
 8012a02:	2301      	movs	r3, #1
 8012a04:	465a      	mov	r2, fp
 8012a06:	4631      	mov	r1, r6
 8012a08:	4628      	mov	r0, r5
 8012a0a:	47b8      	blx	r7
 8012a0c:	3001      	adds	r0, #1
 8012a0e:	f43f ae57 	beq.w	80126c0 <_printf_float+0x98>
 8012a12:	f108 0801 	add.w	r8, r8, #1
 8012a16:	45c8      	cmp	r8, r9
 8012a18:	dbf3      	blt.n	8012a02 <_printf_float+0x3da>
 8012a1a:	4653      	mov	r3, sl
 8012a1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012a20:	e6dc      	b.n	80127dc <_printf_float+0x1b4>
 8012a22:	f04f 0800 	mov.w	r8, #0
 8012a26:	f104 0b1a 	add.w	fp, r4, #26
 8012a2a:	e7f4      	b.n	8012a16 <_printf_float+0x3ee>
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	4642      	mov	r2, r8
 8012a30:	e7e1      	b.n	80129f6 <_printf_float+0x3ce>
 8012a32:	2301      	movs	r3, #1
 8012a34:	464a      	mov	r2, r9
 8012a36:	4631      	mov	r1, r6
 8012a38:	4628      	mov	r0, r5
 8012a3a:	47b8      	blx	r7
 8012a3c:	3001      	adds	r0, #1
 8012a3e:	f43f ae3f 	beq.w	80126c0 <_printf_float+0x98>
 8012a42:	f108 0801 	add.w	r8, r8, #1
 8012a46:	68e3      	ldr	r3, [r4, #12]
 8012a48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012a4a:	1a5b      	subs	r3, r3, r1
 8012a4c:	4543      	cmp	r3, r8
 8012a4e:	dcf0      	bgt.n	8012a32 <_printf_float+0x40a>
 8012a50:	e6f8      	b.n	8012844 <_printf_float+0x21c>
 8012a52:	f04f 0800 	mov.w	r8, #0
 8012a56:	f104 0919 	add.w	r9, r4, #25
 8012a5a:	e7f4      	b.n	8012a46 <_printf_float+0x41e>

08012a5c <_printf_common>:
 8012a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a60:	4616      	mov	r6, r2
 8012a62:	4698      	mov	r8, r3
 8012a64:	688a      	ldr	r2, [r1, #8]
 8012a66:	690b      	ldr	r3, [r1, #16]
 8012a68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012a6c:	4293      	cmp	r3, r2
 8012a6e:	bfb8      	it	lt
 8012a70:	4613      	movlt	r3, r2
 8012a72:	6033      	str	r3, [r6, #0]
 8012a74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012a78:	4607      	mov	r7, r0
 8012a7a:	460c      	mov	r4, r1
 8012a7c:	b10a      	cbz	r2, 8012a82 <_printf_common+0x26>
 8012a7e:	3301      	adds	r3, #1
 8012a80:	6033      	str	r3, [r6, #0]
 8012a82:	6823      	ldr	r3, [r4, #0]
 8012a84:	0699      	lsls	r1, r3, #26
 8012a86:	bf42      	ittt	mi
 8012a88:	6833      	ldrmi	r3, [r6, #0]
 8012a8a:	3302      	addmi	r3, #2
 8012a8c:	6033      	strmi	r3, [r6, #0]
 8012a8e:	6825      	ldr	r5, [r4, #0]
 8012a90:	f015 0506 	ands.w	r5, r5, #6
 8012a94:	d106      	bne.n	8012aa4 <_printf_common+0x48>
 8012a96:	f104 0a19 	add.w	sl, r4, #25
 8012a9a:	68e3      	ldr	r3, [r4, #12]
 8012a9c:	6832      	ldr	r2, [r6, #0]
 8012a9e:	1a9b      	subs	r3, r3, r2
 8012aa0:	42ab      	cmp	r3, r5
 8012aa2:	dc26      	bgt.n	8012af2 <_printf_common+0x96>
 8012aa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012aa8:	6822      	ldr	r2, [r4, #0]
 8012aaa:	3b00      	subs	r3, #0
 8012aac:	bf18      	it	ne
 8012aae:	2301      	movne	r3, #1
 8012ab0:	0692      	lsls	r2, r2, #26
 8012ab2:	d42b      	bmi.n	8012b0c <_printf_common+0xb0>
 8012ab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012ab8:	4641      	mov	r1, r8
 8012aba:	4638      	mov	r0, r7
 8012abc:	47c8      	blx	r9
 8012abe:	3001      	adds	r0, #1
 8012ac0:	d01e      	beq.n	8012b00 <_printf_common+0xa4>
 8012ac2:	6823      	ldr	r3, [r4, #0]
 8012ac4:	6922      	ldr	r2, [r4, #16]
 8012ac6:	f003 0306 	and.w	r3, r3, #6
 8012aca:	2b04      	cmp	r3, #4
 8012acc:	bf02      	ittt	eq
 8012ace:	68e5      	ldreq	r5, [r4, #12]
 8012ad0:	6833      	ldreq	r3, [r6, #0]
 8012ad2:	1aed      	subeq	r5, r5, r3
 8012ad4:	68a3      	ldr	r3, [r4, #8]
 8012ad6:	bf0c      	ite	eq
 8012ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012adc:	2500      	movne	r5, #0
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	bfc4      	itt	gt
 8012ae2:	1a9b      	subgt	r3, r3, r2
 8012ae4:	18ed      	addgt	r5, r5, r3
 8012ae6:	2600      	movs	r6, #0
 8012ae8:	341a      	adds	r4, #26
 8012aea:	42b5      	cmp	r5, r6
 8012aec:	d11a      	bne.n	8012b24 <_printf_common+0xc8>
 8012aee:	2000      	movs	r0, #0
 8012af0:	e008      	b.n	8012b04 <_printf_common+0xa8>
 8012af2:	2301      	movs	r3, #1
 8012af4:	4652      	mov	r2, sl
 8012af6:	4641      	mov	r1, r8
 8012af8:	4638      	mov	r0, r7
 8012afa:	47c8      	blx	r9
 8012afc:	3001      	adds	r0, #1
 8012afe:	d103      	bne.n	8012b08 <_printf_common+0xac>
 8012b00:	f04f 30ff 	mov.w	r0, #4294967295
 8012b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b08:	3501      	adds	r5, #1
 8012b0a:	e7c6      	b.n	8012a9a <_printf_common+0x3e>
 8012b0c:	18e1      	adds	r1, r4, r3
 8012b0e:	1c5a      	adds	r2, r3, #1
 8012b10:	2030      	movs	r0, #48	@ 0x30
 8012b12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012b16:	4422      	add	r2, r4
 8012b18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012b20:	3302      	adds	r3, #2
 8012b22:	e7c7      	b.n	8012ab4 <_printf_common+0x58>
 8012b24:	2301      	movs	r3, #1
 8012b26:	4622      	mov	r2, r4
 8012b28:	4641      	mov	r1, r8
 8012b2a:	4638      	mov	r0, r7
 8012b2c:	47c8      	blx	r9
 8012b2e:	3001      	adds	r0, #1
 8012b30:	d0e6      	beq.n	8012b00 <_printf_common+0xa4>
 8012b32:	3601      	adds	r6, #1
 8012b34:	e7d9      	b.n	8012aea <_printf_common+0x8e>
	...

08012b38 <_printf_i>:
 8012b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b3c:	7e0f      	ldrb	r7, [r1, #24]
 8012b3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012b40:	2f78      	cmp	r7, #120	@ 0x78
 8012b42:	4691      	mov	r9, r2
 8012b44:	4680      	mov	r8, r0
 8012b46:	460c      	mov	r4, r1
 8012b48:	469a      	mov	sl, r3
 8012b4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012b4e:	d807      	bhi.n	8012b60 <_printf_i+0x28>
 8012b50:	2f62      	cmp	r7, #98	@ 0x62
 8012b52:	d80a      	bhi.n	8012b6a <_printf_i+0x32>
 8012b54:	2f00      	cmp	r7, #0
 8012b56:	f000 80d2 	beq.w	8012cfe <_printf_i+0x1c6>
 8012b5a:	2f58      	cmp	r7, #88	@ 0x58
 8012b5c:	f000 80b9 	beq.w	8012cd2 <_printf_i+0x19a>
 8012b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012b68:	e03a      	b.n	8012be0 <_printf_i+0xa8>
 8012b6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012b6e:	2b15      	cmp	r3, #21
 8012b70:	d8f6      	bhi.n	8012b60 <_printf_i+0x28>
 8012b72:	a101      	add	r1, pc, #4	@ (adr r1, 8012b78 <_printf_i+0x40>)
 8012b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b78:	08012bd1 	.word	0x08012bd1
 8012b7c:	08012be5 	.word	0x08012be5
 8012b80:	08012b61 	.word	0x08012b61
 8012b84:	08012b61 	.word	0x08012b61
 8012b88:	08012b61 	.word	0x08012b61
 8012b8c:	08012b61 	.word	0x08012b61
 8012b90:	08012be5 	.word	0x08012be5
 8012b94:	08012b61 	.word	0x08012b61
 8012b98:	08012b61 	.word	0x08012b61
 8012b9c:	08012b61 	.word	0x08012b61
 8012ba0:	08012b61 	.word	0x08012b61
 8012ba4:	08012ce5 	.word	0x08012ce5
 8012ba8:	08012c0f 	.word	0x08012c0f
 8012bac:	08012c9f 	.word	0x08012c9f
 8012bb0:	08012b61 	.word	0x08012b61
 8012bb4:	08012b61 	.word	0x08012b61
 8012bb8:	08012d07 	.word	0x08012d07
 8012bbc:	08012b61 	.word	0x08012b61
 8012bc0:	08012c0f 	.word	0x08012c0f
 8012bc4:	08012b61 	.word	0x08012b61
 8012bc8:	08012b61 	.word	0x08012b61
 8012bcc:	08012ca7 	.word	0x08012ca7
 8012bd0:	6833      	ldr	r3, [r6, #0]
 8012bd2:	1d1a      	adds	r2, r3, #4
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	6032      	str	r2, [r6, #0]
 8012bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012bdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012be0:	2301      	movs	r3, #1
 8012be2:	e09d      	b.n	8012d20 <_printf_i+0x1e8>
 8012be4:	6833      	ldr	r3, [r6, #0]
 8012be6:	6820      	ldr	r0, [r4, #0]
 8012be8:	1d19      	adds	r1, r3, #4
 8012bea:	6031      	str	r1, [r6, #0]
 8012bec:	0606      	lsls	r6, r0, #24
 8012bee:	d501      	bpl.n	8012bf4 <_printf_i+0xbc>
 8012bf0:	681d      	ldr	r5, [r3, #0]
 8012bf2:	e003      	b.n	8012bfc <_printf_i+0xc4>
 8012bf4:	0645      	lsls	r5, r0, #25
 8012bf6:	d5fb      	bpl.n	8012bf0 <_printf_i+0xb8>
 8012bf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012bfc:	2d00      	cmp	r5, #0
 8012bfe:	da03      	bge.n	8012c08 <_printf_i+0xd0>
 8012c00:	232d      	movs	r3, #45	@ 0x2d
 8012c02:	426d      	negs	r5, r5
 8012c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c08:	4859      	ldr	r0, [pc, #356]	@ (8012d70 <_printf_i+0x238>)
 8012c0a:	230a      	movs	r3, #10
 8012c0c:	e011      	b.n	8012c32 <_printf_i+0xfa>
 8012c0e:	6821      	ldr	r1, [r4, #0]
 8012c10:	6833      	ldr	r3, [r6, #0]
 8012c12:	0608      	lsls	r0, r1, #24
 8012c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8012c18:	d402      	bmi.n	8012c20 <_printf_i+0xe8>
 8012c1a:	0649      	lsls	r1, r1, #25
 8012c1c:	bf48      	it	mi
 8012c1e:	b2ad      	uxthmi	r5, r5
 8012c20:	2f6f      	cmp	r7, #111	@ 0x6f
 8012c22:	4853      	ldr	r0, [pc, #332]	@ (8012d70 <_printf_i+0x238>)
 8012c24:	6033      	str	r3, [r6, #0]
 8012c26:	bf14      	ite	ne
 8012c28:	230a      	movne	r3, #10
 8012c2a:	2308      	moveq	r3, #8
 8012c2c:	2100      	movs	r1, #0
 8012c2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012c32:	6866      	ldr	r6, [r4, #4]
 8012c34:	60a6      	str	r6, [r4, #8]
 8012c36:	2e00      	cmp	r6, #0
 8012c38:	bfa2      	ittt	ge
 8012c3a:	6821      	ldrge	r1, [r4, #0]
 8012c3c:	f021 0104 	bicge.w	r1, r1, #4
 8012c40:	6021      	strge	r1, [r4, #0]
 8012c42:	b90d      	cbnz	r5, 8012c48 <_printf_i+0x110>
 8012c44:	2e00      	cmp	r6, #0
 8012c46:	d04b      	beq.n	8012ce0 <_printf_i+0x1a8>
 8012c48:	4616      	mov	r6, r2
 8012c4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8012c4e:	fb03 5711 	mls	r7, r3, r1, r5
 8012c52:	5dc7      	ldrb	r7, [r0, r7]
 8012c54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012c58:	462f      	mov	r7, r5
 8012c5a:	42bb      	cmp	r3, r7
 8012c5c:	460d      	mov	r5, r1
 8012c5e:	d9f4      	bls.n	8012c4a <_printf_i+0x112>
 8012c60:	2b08      	cmp	r3, #8
 8012c62:	d10b      	bne.n	8012c7c <_printf_i+0x144>
 8012c64:	6823      	ldr	r3, [r4, #0]
 8012c66:	07df      	lsls	r7, r3, #31
 8012c68:	d508      	bpl.n	8012c7c <_printf_i+0x144>
 8012c6a:	6923      	ldr	r3, [r4, #16]
 8012c6c:	6861      	ldr	r1, [r4, #4]
 8012c6e:	4299      	cmp	r1, r3
 8012c70:	bfde      	ittt	le
 8012c72:	2330      	movle	r3, #48	@ 0x30
 8012c74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012c78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012c7c:	1b92      	subs	r2, r2, r6
 8012c7e:	6122      	str	r2, [r4, #16]
 8012c80:	f8cd a000 	str.w	sl, [sp]
 8012c84:	464b      	mov	r3, r9
 8012c86:	aa03      	add	r2, sp, #12
 8012c88:	4621      	mov	r1, r4
 8012c8a:	4640      	mov	r0, r8
 8012c8c:	f7ff fee6 	bl	8012a5c <_printf_common>
 8012c90:	3001      	adds	r0, #1
 8012c92:	d14a      	bne.n	8012d2a <_printf_i+0x1f2>
 8012c94:	f04f 30ff 	mov.w	r0, #4294967295
 8012c98:	b004      	add	sp, #16
 8012c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c9e:	6823      	ldr	r3, [r4, #0]
 8012ca0:	f043 0320 	orr.w	r3, r3, #32
 8012ca4:	6023      	str	r3, [r4, #0]
 8012ca6:	4833      	ldr	r0, [pc, #204]	@ (8012d74 <_printf_i+0x23c>)
 8012ca8:	2778      	movs	r7, #120	@ 0x78
 8012caa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012cae:	6823      	ldr	r3, [r4, #0]
 8012cb0:	6831      	ldr	r1, [r6, #0]
 8012cb2:	061f      	lsls	r7, r3, #24
 8012cb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8012cb8:	d402      	bmi.n	8012cc0 <_printf_i+0x188>
 8012cba:	065f      	lsls	r7, r3, #25
 8012cbc:	bf48      	it	mi
 8012cbe:	b2ad      	uxthmi	r5, r5
 8012cc0:	6031      	str	r1, [r6, #0]
 8012cc2:	07d9      	lsls	r1, r3, #31
 8012cc4:	bf44      	itt	mi
 8012cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8012cca:	6023      	strmi	r3, [r4, #0]
 8012ccc:	b11d      	cbz	r5, 8012cd6 <_printf_i+0x19e>
 8012cce:	2310      	movs	r3, #16
 8012cd0:	e7ac      	b.n	8012c2c <_printf_i+0xf4>
 8012cd2:	4827      	ldr	r0, [pc, #156]	@ (8012d70 <_printf_i+0x238>)
 8012cd4:	e7e9      	b.n	8012caa <_printf_i+0x172>
 8012cd6:	6823      	ldr	r3, [r4, #0]
 8012cd8:	f023 0320 	bic.w	r3, r3, #32
 8012cdc:	6023      	str	r3, [r4, #0]
 8012cde:	e7f6      	b.n	8012cce <_printf_i+0x196>
 8012ce0:	4616      	mov	r6, r2
 8012ce2:	e7bd      	b.n	8012c60 <_printf_i+0x128>
 8012ce4:	6833      	ldr	r3, [r6, #0]
 8012ce6:	6825      	ldr	r5, [r4, #0]
 8012ce8:	6961      	ldr	r1, [r4, #20]
 8012cea:	1d18      	adds	r0, r3, #4
 8012cec:	6030      	str	r0, [r6, #0]
 8012cee:	062e      	lsls	r6, r5, #24
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	d501      	bpl.n	8012cf8 <_printf_i+0x1c0>
 8012cf4:	6019      	str	r1, [r3, #0]
 8012cf6:	e002      	b.n	8012cfe <_printf_i+0x1c6>
 8012cf8:	0668      	lsls	r0, r5, #25
 8012cfa:	d5fb      	bpl.n	8012cf4 <_printf_i+0x1bc>
 8012cfc:	8019      	strh	r1, [r3, #0]
 8012cfe:	2300      	movs	r3, #0
 8012d00:	6123      	str	r3, [r4, #16]
 8012d02:	4616      	mov	r6, r2
 8012d04:	e7bc      	b.n	8012c80 <_printf_i+0x148>
 8012d06:	6833      	ldr	r3, [r6, #0]
 8012d08:	1d1a      	adds	r2, r3, #4
 8012d0a:	6032      	str	r2, [r6, #0]
 8012d0c:	681e      	ldr	r6, [r3, #0]
 8012d0e:	6862      	ldr	r2, [r4, #4]
 8012d10:	2100      	movs	r1, #0
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7ed fae4 	bl	80002e0 <memchr>
 8012d18:	b108      	cbz	r0, 8012d1e <_printf_i+0x1e6>
 8012d1a:	1b80      	subs	r0, r0, r6
 8012d1c:	6060      	str	r0, [r4, #4]
 8012d1e:	6863      	ldr	r3, [r4, #4]
 8012d20:	6123      	str	r3, [r4, #16]
 8012d22:	2300      	movs	r3, #0
 8012d24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d28:	e7aa      	b.n	8012c80 <_printf_i+0x148>
 8012d2a:	6923      	ldr	r3, [r4, #16]
 8012d2c:	4632      	mov	r2, r6
 8012d2e:	4649      	mov	r1, r9
 8012d30:	4640      	mov	r0, r8
 8012d32:	47d0      	blx	sl
 8012d34:	3001      	adds	r0, #1
 8012d36:	d0ad      	beq.n	8012c94 <_printf_i+0x15c>
 8012d38:	6823      	ldr	r3, [r4, #0]
 8012d3a:	079b      	lsls	r3, r3, #30
 8012d3c:	d413      	bmi.n	8012d66 <_printf_i+0x22e>
 8012d3e:	68e0      	ldr	r0, [r4, #12]
 8012d40:	9b03      	ldr	r3, [sp, #12]
 8012d42:	4298      	cmp	r0, r3
 8012d44:	bfb8      	it	lt
 8012d46:	4618      	movlt	r0, r3
 8012d48:	e7a6      	b.n	8012c98 <_printf_i+0x160>
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	4632      	mov	r2, r6
 8012d4e:	4649      	mov	r1, r9
 8012d50:	4640      	mov	r0, r8
 8012d52:	47d0      	blx	sl
 8012d54:	3001      	adds	r0, #1
 8012d56:	d09d      	beq.n	8012c94 <_printf_i+0x15c>
 8012d58:	3501      	adds	r5, #1
 8012d5a:	68e3      	ldr	r3, [r4, #12]
 8012d5c:	9903      	ldr	r1, [sp, #12]
 8012d5e:	1a5b      	subs	r3, r3, r1
 8012d60:	42ab      	cmp	r3, r5
 8012d62:	dcf2      	bgt.n	8012d4a <_printf_i+0x212>
 8012d64:	e7eb      	b.n	8012d3e <_printf_i+0x206>
 8012d66:	2500      	movs	r5, #0
 8012d68:	f104 0619 	add.w	r6, r4, #25
 8012d6c:	e7f5      	b.n	8012d5a <_printf_i+0x222>
 8012d6e:	bf00      	nop
 8012d70:	08015a76 	.word	0x08015a76
 8012d74:	08015a87 	.word	0x08015a87

08012d78 <std>:
 8012d78:	2300      	movs	r3, #0
 8012d7a:	b510      	push	{r4, lr}
 8012d7c:	4604      	mov	r4, r0
 8012d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8012d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d86:	6083      	str	r3, [r0, #8]
 8012d88:	8181      	strh	r1, [r0, #12]
 8012d8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8012d8c:	81c2      	strh	r2, [r0, #14]
 8012d8e:	6183      	str	r3, [r0, #24]
 8012d90:	4619      	mov	r1, r3
 8012d92:	2208      	movs	r2, #8
 8012d94:	305c      	adds	r0, #92	@ 0x5c
 8012d96:	f000 f914 	bl	8012fc2 <memset>
 8012d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8012dd0 <std+0x58>)
 8012d9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8012d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8012dd4 <std+0x5c>)
 8012da0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012da2:	4b0d      	ldr	r3, [pc, #52]	@ (8012dd8 <std+0x60>)
 8012da4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012da6:	4b0d      	ldr	r3, [pc, #52]	@ (8012ddc <std+0x64>)
 8012da8:	6323      	str	r3, [r4, #48]	@ 0x30
 8012daa:	4b0d      	ldr	r3, [pc, #52]	@ (8012de0 <std+0x68>)
 8012dac:	6224      	str	r4, [r4, #32]
 8012dae:	429c      	cmp	r4, r3
 8012db0:	d006      	beq.n	8012dc0 <std+0x48>
 8012db2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012db6:	4294      	cmp	r4, r2
 8012db8:	d002      	beq.n	8012dc0 <std+0x48>
 8012dba:	33d0      	adds	r3, #208	@ 0xd0
 8012dbc:	429c      	cmp	r4, r3
 8012dbe:	d105      	bne.n	8012dcc <std+0x54>
 8012dc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dc8:	f000 b988 	b.w	80130dc <__retarget_lock_init_recursive>
 8012dcc:	bd10      	pop	{r4, pc}
 8012dce:	bf00      	nop
 8012dd0:	08012f3d 	.word	0x08012f3d
 8012dd4:	08012f5f 	.word	0x08012f5f
 8012dd8:	08012f97 	.word	0x08012f97
 8012ddc:	08012fbb 	.word	0x08012fbb
 8012de0:	240027c0 	.word	0x240027c0

08012de4 <stdio_exit_handler>:
 8012de4:	4a02      	ldr	r2, [pc, #8]	@ (8012df0 <stdio_exit_handler+0xc>)
 8012de6:	4903      	ldr	r1, [pc, #12]	@ (8012df4 <stdio_exit_handler+0x10>)
 8012de8:	4803      	ldr	r0, [pc, #12]	@ (8012df8 <stdio_exit_handler+0x14>)
 8012dea:	f000 b869 	b.w	8012ec0 <_fwalk_sglue>
 8012dee:	bf00      	nop
 8012df0:	24000108 	.word	0x24000108
 8012df4:	080147f5 	.word	0x080147f5
 8012df8:	24000118 	.word	0x24000118

08012dfc <cleanup_stdio>:
 8012dfc:	6841      	ldr	r1, [r0, #4]
 8012dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8012e30 <cleanup_stdio+0x34>)
 8012e00:	4299      	cmp	r1, r3
 8012e02:	b510      	push	{r4, lr}
 8012e04:	4604      	mov	r4, r0
 8012e06:	d001      	beq.n	8012e0c <cleanup_stdio+0x10>
 8012e08:	f001 fcf4 	bl	80147f4 <_fflush_r>
 8012e0c:	68a1      	ldr	r1, [r4, #8]
 8012e0e:	4b09      	ldr	r3, [pc, #36]	@ (8012e34 <cleanup_stdio+0x38>)
 8012e10:	4299      	cmp	r1, r3
 8012e12:	d002      	beq.n	8012e1a <cleanup_stdio+0x1e>
 8012e14:	4620      	mov	r0, r4
 8012e16:	f001 fced 	bl	80147f4 <_fflush_r>
 8012e1a:	68e1      	ldr	r1, [r4, #12]
 8012e1c:	4b06      	ldr	r3, [pc, #24]	@ (8012e38 <cleanup_stdio+0x3c>)
 8012e1e:	4299      	cmp	r1, r3
 8012e20:	d004      	beq.n	8012e2c <cleanup_stdio+0x30>
 8012e22:	4620      	mov	r0, r4
 8012e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e28:	f001 bce4 	b.w	80147f4 <_fflush_r>
 8012e2c:	bd10      	pop	{r4, pc}
 8012e2e:	bf00      	nop
 8012e30:	240027c0 	.word	0x240027c0
 8012e34:	24002828 	.word	0x24002828
 8012e38:	24002890 	.word	0x24002890

08012e3c <global_stdio_init.part.0>:
 8012e3c:	b510      	push	{r4, lr}
 8012e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8012e6c <global_stdio_init.part.0+0x30>)
 8012e40:	4c0b      	ldr	r4, [pc, #44]	@ (8012e70 <global_stdio_init.part.0+0x34>)
 8012e42:	4a0c      	ldr	r2, [pc, #48]	@ (8012e74 <global_stdio_init.part.0+0x38>)
 8012e44:	601a      	str	r2, [r3, #0]
 8012e46:	4620      	mov	r0, r4
 8012e48:	2200      	movs	r2, #0
 8012e4a:	2104      	movs	r1, #4
 8012e4c:	f7ff ff94 	bl	8012d78 <std>
 8012e50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012e54:	2201      	movs	r2, #1
 8012e56:	2109      	movs	r1, #9
 8012e58:	f7ff ff8e 	bl	8012d78 <std>
 8012e5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012e60:	2202      	movs	r2, #2
 8012e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e66:	2112      	movs	r1, #18
 8012e68:	f7ff bf86 	b.w	8012d78 <std>
 8012e6c:	240028f8 	.word	0x240028f8
 8012e70:	240027c0 	.word	0x240027c0
 8012e74:	08012de5 	.word	0x08012de5

08012e78 <__sfp_lock_acquire>:
 8012e78:	4801      	ldr	r0, [pc, #4]	@ (8012e80 <__sfp_lock_acquire+0x8>)
 8012e7a:	f000 b930 	b.w	80130de <__retarget_lock_acquire_recursive>
 8012e7e:	bf00      	nop
 8012e80:	24002901 	.word	0x24002901

08012e84 <__sfp_lock_release>:
 8012e84:	4801      	ldr	r0, [pc, #4]	@ (8012e8c <__sfp_lock_release+0x8>)
 8012e86:	f000 b92b 	b.w	80130e0 <__retarget_lock_release_recursive>
 8012e8a:	bf00      	nop
 8012e8c:	24002901 	.word	0x24002901

08012e90 <__sinit>:
 8012e90:	b510      	push	{r4, lr}
 8012e92:	4604      	mov	r4, r0
 8012e94:	f7ff fff0 	bl	8012e78 <__sfp_lock_acquire>
 8012e98:	6a23      	ldr	r3, [r4, #32]
 8012e9a:	b11b      	cbz	r3, 8012ea4 <__sinit+0x14>
 8012e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ea0:	f7ff bff0 	b.w	8012e84 <__sfp_lock_release>
 8012ea4:	4b04      	ldr	r3, [pc, #16]	@ (8012eb8 <__sinit+0x28>)
 8012ea6:	6223      	str	r3, [r4, #32]
 8012ea8:	4b04      	ldr	r3, [pc, #16]	@ (8012ebc <__sinit+0x2c>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d1f5      	bne.n	8012e9c <__sinit+0xc>
 8012eb0:	f7ff ffc4 	bl	8012e3c <global_stdio_init.part.0>
 8012eb4:	e7f2      	b.n	8012e9c <__sinit+0xc>
 8012eb6:	bf00      	nop
 8012eb8:	08012dfd 	.word	0x08012dfd
 8012ebc:	240028f8 	.word	0x240028f8

08012ec0 <_fwalk_sglue>:
 8012ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ec4:	4607      	mov	r7, r0
 8012ec6:	4688      	mov	r8, r1
 8012ec8:	4614      	mov	r4, r2
 8012eca:	2600      	movs	r6, #0
 8012ecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ed0:	f1b9 0901 	subs.w	r9, r9, #1
 8012ed4:	d505      	bpl.n	8012ee2 <_fwalk_sglue+0x22>
 8012ed6:	6824      	ldr	r4, [r4, #0]
 8012ed8:	2c00      	cmp	r4, #0
 8012eda:	d1f7      	bne.n	8012ecc <_fwalk_sglue+0xc>
 8012edc:	4630      	mov	r0, r6
 8012ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ee2:	89ab      	ldrh	r3, [r5, #12]
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d907      	bls.n	8012ef8 <_fwalk_sglue+0x38>
 8012ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012eec:	3301      	adds	r3, #1
 8012eee:	d003      	beq.n	8012ef8 <_fwalk_sglue+0x38>
 8012ef0:	4629      	mov	r1, r5
 8012ef2:	4638      	mov	r0, r7
 8012ef4:	47c0      	blx	r8
 8012ef6:	4306      	orrs	r6, r0
 8012ef8:	3568      	adds	r5, #104	@ 0x68
 8012efa:	e7e9      	b.n	8012ed0 <_fwalk_sglue+0x10>

08012efc <siprintf>:
 8012efc:	b40e      	push	{r1, r2, r3}
 8012efe:	b500      	push	{lr}
 8012f00:	b09c      	sub	sp, #112	@ 0x70
 8012f02:	ab1d      	add	r3, sp, #116	@ 0x74
 8012f04:	9002      	str	r0, [sp, #8]
 8012f06:	9006      	str	r0, [sp, #24]
 8012f08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012f0c:	4809      	ldr	r0, [pc, #36]	@ (8012f34 <siprintf+0x38>)
 8012f0e:	9107      	str	r1, [sp, #28]
 8012f10:	9104      	str	r1, [sp, #16]
 8012f12:	4909      	ldr	r1, [pc, #36]	@ (8012f38 <siprintf+0x3c>)
 8012f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f18:	9105      	str	r1, [sp, #20]
 8012f1a:	6800      	ldr	r0, [r0, #0]
 8012f1c:	9301      	str	r3, [sp, #4]
 8012f1e:	a902      	add	r1, sp, #8
 8012f20:	f001 fae8 	bl	80144f4 <_svfiprintf_r>
 8012f24:	9b02      	ldr	r3, [sp, #8]
 8012f26:	2200      	movs	r2, #0
 8012f28:	701a      	strb	r2, [r3, #0]
 8012f2a:	b01c      	add	sp, #112	@ 0x70
 8012f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f30:	b003      	add	sp, #12
 8012f32:	4770      	bx	lr
 8012f34:	24000114 	.word	0x24000114
 8012f38:	ffff0208 	.word	0xffff0208

08012f3c <__sread>:
 8012f3c:	b510      	push	{r4, lr}
 8012f3e:	460c      	mov	r4, r1
 8012f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f44:	f000 f86c 	bl	8013020 <_read_r>
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	bfab      	itete	ge
 8012f4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8012f50:	181b      	addge	r3, r3, r0
 8012f52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012f56:	bfac      	ite	ge
 8012f58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012f5a:	81a3      	strhlt	r3, [r4, #12]
 8012f5c:	bd10      	pop	{r4, pc}

08012f5e <__swrite>:
 8012f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f62:	461f      	mov	r7, r3
 8012f64:	898b      	ldrh	r3, [r1, #12]
 8012f66:	05db      	lsls	r3, r3, #23
 8012f68:	4605      	mov	r5, r0
 8012f6a:	460c      	mov	r4, r1
 8012f6c:	4616      	mov	r6, r2
 8012f6e:	d505      	bpl.n	8012f7c <__swrite+0x1e>
 8012f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f74:	2302      	movs	r3, #2
 8012f76:	2200      	movs	r2, #0
 8012f78:	f000 f840 	bl	8012ffc <_lseek_r>
 8012f7c:	89a3      	ldrh	r3, [r4, #12]
 8012f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012f86:	81a3      	strh	r3, [r4, #12]
 8012f88:	4632      	mov	r2, r6
 8012f8a:	463b      	mov	r3, r7
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f92:	f000 b867 	b.w	8013064 <_write_r>

08012f96 <__sseek>:
 8012f96:	b510      	push	{r4, lr}
 8012f98:	460c      	mov	r4, r1
 8012f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f9e:	f000 f82d 	bl	8012ffc <_lseek_r>
 8012fa2:	1c43      	adds	r3, r0, #1
 8012fa4:	89a3      	ldrh	r3, [r4, #12]
 8012fa6:	bf15      	itete	ne
 8012fa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012faa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012fae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012fb2:	81a3      	strheq	r3, [r4, #12]
 8012fb4:	bf18      	it	ne
 8012fb6:	81a3      	strhne	r3, [r4, #12]
 8012fb8:	bd10      	pop	{r4, pc}

08012fba <__sclose>:
 8012fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fbe:	f000 b80d 	b.w	8012fdc <_close_r>

08012fc2 <memset>:
 8012fc2:	4402      	add	r2, r0
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	4293      	cmp	r3, r2
 8012fc8:	d100      	bne.n	8012fcc <memset+0xa>
 8012fca:	4770      	bx	lr
 8012fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8012fd0:	e7f9      	b.n	8012fc6 <memset+0x4>
	...

08012fd4 <_localeconv_r>:
 8012fd4:	4800      	ldr	r0, [pc, #0]	@ (8012fd8 <_localeconv_r+0x4>)
 8012fd6:	4770      	bx	lr
 8012fd8:	24000254 	.word	0x24000254

08012fdc <_close_r>:
 8012fdc:	b538      	push	{r3, r4, r5, lr}
 8012fde:	4d06      	ldr	r5, [pc, #24]	@ (8012ff8 <_close_r+0x1c>)
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	4608      	mov	r0, r1
 8012fe6:	602b      	str	r3, [r5, #0]
 8012fe8:	f7ee fb98 	bl	800171c <_close>
 8012fec:	1c43      	adds	r3, r0, #1
 8012fee:	d102      	bne.n	8012ff6 <_close_r+0x1a>
 8012ff0:	682b      	ldr	r3, [r5, #0]
 8012ff2:	b103      	cbz	r3, 8012ff6 <_close_r+0x1a>
 8012ff4:	6023      	str	r3, [r4, #0]
 8012ff6:	bd38      	pop	{r3, r4, r5, pc}
 8012ff8:	240028fc 	.word	0x240028fc

08012ffc <_lseek_r>:
 8012ffc:	b538      	push	{r3, r4, r5, lr}
 8012ffe:	4d07      	ldr	r5, [pc, #28]	@ (801301c <_lseek_r+0x20>)
 8013000:	4604      	mov	r4, r0
 8013002:	4608      	mov	r0, r1
 8013004:	4611      	mov	r1, r2
 8013006:	2200      	movs	r2, #0
 8013008:	602a      	str	r2, [r5, #0]
 801300a:	461a      	mov	r2, r3
 801300c:	f7ee fbad 	bl	800176a <_lseek>
 8013010:	1c43      	adds	r3, r0, #1
 8013012:	d102      	bne.n	801301a <_lseek_r+0x1e>
 8013014:	682b      	ldr	r3, [r5, #0]
 8013016:	b103      	cbz	r3, 801301a <_lseek_r+0x1e>
 8013018:	6023      	str	r3, [r4, #0]
 801301a:	bd38      	pop	{r3, r4, r5, pc}
 801301c:	240028fc 	.word	0x240028fc

08013020 <_read_r>:
 8013020:	b538      	push	{r3, r4, r5, lr}
 8013022:	4d07      	ldr	r5, [pc, #28]	@ (8013040 <_read_r+0x20>)
 8013024:	4604      	mov	r4, r0
 8013026:	4608      	mov	r0, r1
 8013028:	4611      	mov	r1, r2
 801302a:	2200      	movs	r2, #0
 801302c:	602a      	str	r2, [r5, #0]
 801302e:	461a      	mov	r2, r3
 8013030:	f7ee fb3b 	bl	80016aa <_read>
 8013034:	1c43      	adds	r3, r0, #1
 8013036:	d102      	bne.n	801303e <_read_r+0x1e>
 8013038:	682b      	ldr	r3, [r5, #0]
 801303a:	b103      	cbz	r3, 801303e <_read_r+0x1e>
 801303c:	6023      	str	r3, [r4, #0]
 801303e:	bd38      	pop	{r3, r4, r5, pc}
 8013040:	240028fc 	.word	0x240028fc

08013044 <_sbrk_r>:
 8013044:	b538      	push	{r3, r4, r5, lr}
 8013046:	4d06      	ldr	r5, [pc, #24]	@ (8013060 <_sbrk_r+0x1c>)
 8013048:	2300      	movs	r3, #0
 801304a:	4604      	mov	r4, r0
 801304c:	4608      	mov	r0, r1
 801304e:	602b      	str	r3, [r5, #0]
 8013050:	f7ee fb98 	bl	8001784 <_sbrk>
 8013054:	1c43      	adds	r3, r0, #1
 8013056:	d102      	bne.n	801305e <_sbrk_r+0x1a>
 8013058:	682b      	ldr	r3, [r5, #0]
 801305a:	b103      	cbz	r3, 801305e <_sbrk_r+0x1a>
 801305c:	6023      	str	r3, [r4, #0]
 801305e:	bd38      	pop	{r3, r4, r5, pc}
 8013060:	240028fc 	.word	0x240028fc

08013064 <_write_r>:
 8013064:	b538      	push	{r3, r4, r5, lr}
 8013066:	4d07      	ldr	r5, [pc, #28]	@ (8013084 <_write_r+0x20>)
 8013068:	4604      	mov	r4, r0
 801306a:	4608      	mov	r0, r1
 801306c:	4611      	mov	r1, r2
 801306e:	2200      	movs	r2, #0
 8013070:	602a      	str	r2, [r5, #0]
 8013072:	461a      	mov	r2, r3
 8013074:	f7ee fb36 	bl	80016e4 <_write>
 8013078:	1c43      	adds	r3, r0, #1
 801307a:	d102      	bne.n	8013082 <_write_r+0x1e>
 801307c:	682b      	ldr	r3, [r5, #0]
 801307e:	b103      	cbz	r3, 8013082 <_write_r+0x1e>
 8013080:	6023      	str	r3, [r4, #0]
 8013082:	bd38      	pop	{r3, r4, r5, pc}
 8013084:	240028fc 	.word	0x240028fc

08013088 <__errno>:
 8013088:	4b01      	ldr	r3, [pc, #4]	@ (8013090 <__errno+0x8>)
 801308a:	6818      	ldr	r0, [r3, #0]
 801308c:	4770      	bx	lr
 801308e:	bf00      	nop
 8013090:	24000114 	.word	0x24000114

08013094 <__libc_init_array>:
 8013094:	b570      	push	{r4, r5, r6, lr}
 8013096:	4d0d      	ldr	r5, [pc, #52]	@ (80130cc <__libc_init_array+0x38>)
 8013098:	4c0d      	ldr	r4, [pc, #52]	@ (80130d0 <__libc_init_array+0x3c>)
 801309a:	1b64      	subs	r4, r4, r5
 801309c:	10a4      	asrs	r4, r4, #2
 801309e:	2600      	movs	r6, #0
 80130a0:	42a6      	cmp	r6, r4
 80130a2:	d109      	bne.n	80130b8 <__libc_init_array+0x24>
 80130a4:	4d0b      	ldr	r5, [pc, #44]	@ (80130d4 <__libc_init_array+0x40>)
 80130a6:	4c0c      	ldr	r4, [pc, #48]	@ (80130d8 <__libc_init_array+0x44>)
 80130a8:	f002 f862 	bl	8015170 <_init>
 80130ac:	1b64      	subs	r4, r4, r5
 80130ae:	10a4      	asrs	r4, r4, #2
 80130b0:	2600      	movs	r6, #0
 80130b2:	42a6      	cmp	r6, r4
 80130b4:	d105      	bne.n	80130c2 <__libc_init_array+0x2e>
 80130b6:	bd70      	pop	{r4, r5, r6, pc}
 80130b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80130bc:	4798      	blx	r3
 80130be:	3601      	adds	r6, #1
 80130c0:	e7ee      	b.n	80130a0 <__libc_init_array+0xc>
 80130c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80130c6:	4798      	blx	r3
 80130c8:	3601      	adds	r6, #1
 80130ca:	e7f2      	b.n	80130b2 <__libc_init_array+0x1e>
 80130cc:	08015df0 	.word	0x08015df0
 80130d0:	08015df0 	.word	0x08015df0
 80130d4:	08015df0 	.word	0x08015df0
 80130d8:	08015df4 	.word	0x08015df4

080130dc <__retarget_lock_init_recursive>:
 80130dc:	4770      	bx	lr

080130de <__retarget_lock_acquire_recursive>:
 80130de:	4770      	bx	lr

080130e0 <__retarget_lock_release_recursive>:
 80130e0:	4770      	bx	lr

080130e2 <quorem>:
 80130e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130e6:	6903      	ldr	r3, [r0, #16]
 80130e8:	690c      	ldr	r4, [r1, #16]
 80130ea:	42a3      	cmp	r3, r4
 80130ec:	4607      	mov	r7, r0
 80130ee:	db7e      	blt.n	80131ee <quorem+0x10c>
 80130f0:	3c01      	subs	r4, #1
 80130f2:	f101 0814 	add.w	r8, r1, #20
 80130f6:	00a3      	lsls	r3, r4, #2
 80130f8:	f100 0514 	add.w	r5, r0, #20
 80130fc:	9300      	str	r3, [sp, #0]
 80130fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013102:	9301      	str	r3, [sp, #4]
 8013104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801310c:	3301      	adds	r3, #1
 801310e:	429a      	cmp	r2, r3
 8013110:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013114:	fbb2 f6f3 	udiv	r6, r2, r3
 8013118:	d32e      	bcc.n	8013178 <quorem+0x96>
 801311a:	f04f 0a00 	mov.w	sl, #0
 801311e:	46c4      	mov	ip, r8
 8013120:	46ae      	mov	lr, r5
 8013122:	46d3      	mov	fp, sl
 8013124:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013128:	b298      	uxth	r0, r3
 801312a:	fb06 a000 	mla	r0, r6, r0, sl
 801312e:	0c02      	lsrs	r2, r0, #16
 8013130:	0c1b      	lsrs	r3, r3, #16
 8013132:	fb06 2303 	mla	r3, r6, r3, r2
 8013136:	f8de 2000 	ldr.w	r2, [lr]
 801313a:	b280      	uxth	r0, r0
 801313c:	b292      	uxth	r2, r2
 801313e:	1a12      	subs	r2, r2, r0
 8013140:	445a      	add	r2, fp
 8013142:	f8de 0000 	ldr.w	r0, [lr]
 8013146:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801314a:	b29b      	uxth	r3, r3
 801314c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013150:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013154:	b292      	uxth	r2, r2
 8013156:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801315a:	45e1      	cmp	r9, ip
 801315c:	f84e 2b04 	str.w	r2, [lr], #4
 8013160:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013164:	d2de      	bcs.n	8013124 <quorem+0x42>
 8013166:	9b00      	ldr	r3, [sp, #0]
 8013168:	58eb      	ldr	r3, [r5, r3]
 801316a:	b92b      	cbnz	r3, 8013178 <quorem+0x96>
 801316c:	9b01      	ldr	r3, [sp, #4]
 801316e:	3b04      	subs	r3, #4
 8013170:	429d      	cmp	r5, r3
 8013172:	461a      	mov	r2, r3
 8013174:	d32f      	bcc.n	80131d6 <quorem+0xf4>
 8013176:	613c      	str	r4, [r7, #16]
 8013178:	4638      	mov	r0, r7
 801317a:	f001 f857 	bl	801422c <__mcmp>
 801317e:	2800      	cmp	r0, #0
 8013180:	db25      	blt.n	80131ce <quorem+0xec>
 8013182:	4629      	mov	r1, r5
 8013184:	2000      	movs	r0, #0
 8013186:	f858 2b04 	ldr.w	r2, [r8], #4
 801318a:	f8d1 c000 	ldr.w	ip, [r1]
 801318e:	fa1f fe82 	uxth.w	lr, r2
 8013192:	fa1f f38c 	uxth.w	r3, ip
 8013196:	eba3 030e 	sub.w	r3, r3, lr
 801319a:	4403      	add	r3, r0
 801319c:	0c12      	lsrs	r2, r2, #16
 801319e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80131a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131ac:	45c1      	cmp	r9, r8
 80131ae:	f841 3b04 	str.w	r3, [r1], #4
 80131b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80131b6:	d2e6      	bcs.n	8013186 <quorem+0xa4>
 80131b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80131bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80131c0:	b922      	cbnz	r2, 80131cc <quorem+0xea>
 80131c2:	3b04      	subs	r3, #4
 80131c4:	429d      	cmp	r5, r3
 80131c6:	461a      	mov	r2, r3
 80131c8:	d30b      	bcc.n	80131e2 <quorem+0x100>
 80131ca:	613c      	str	r4, [r7, #16]
 80131cc:	3601      	adds	r6, #1
 80131ce:	4630      	mov	r0, r6
 80131d0:	b003      	add	sp, #12
 80131d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d6:	6812      	ldr	r2, [r2, #0]
 80131d8:	3b04      	subs	r3, #4
 80131da:	2a00      	cmp	r2, #0
 80131dc:	d1cb      	bne.n	8013176 <quorem+0x94>
 80131de:	3c01      	subs	r4, #1
 80131e0:	e7c6      	b.n	8013170 <quorem+0x8e>
 80131e2:	6812      	ldr	r2, [r2, #0]
 80131e4:	3b04      	subs	r3, #4
 80131e6:	2a00      	cmp	r2, #0
 80131e8:	d1ef      	bne.n	80131ca <quorem+0xe8>
 80131ea:	3c01      	subs	r4, #1
 80131ec:	e7ea      	b.n	80131c4 <quorem+0xe2>
 80131ee:	2000      	movs	r0, #0
 80131f0:	e7ee      	b.n	80131d0 <quorem+0xee>
 80131f2:	0000      	movs	r0, r0
 80131f4:	0000      	movs	r0, r0
	...

080131f8 <_dtoa_r>:
 80131f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131fc:	ed2d 8b02 	vpush	{d8}
 8013200:	69c7      	ldr	r7, [r0, #28]
 8013202:	b091      	sub	sp, #68	@ 0x44
 8013204:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013208:	ec55 4b10 	vmov	r4, r5, d0
 801320c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801320e:	9107      	str	r1, [sp, #28]
 8013210:	4681      	mov	r9, r0
 8013212:	9209      	str	r2, [sp, #36]	@ 0x24
 8013214:	930d      	str	r3, [sp, #52]	@ 0x34
 8013216:	b97f      	cbnz	r7, 8013238 <_dtoa_r+0x40>
 8013218:	2010      	movs	r0, #16
 801321a:	f7ff f8bf 	bl	801239c <malloc>
 801321e:	4602      	mov	r2, r0
 8013220:	f8c9 001c 	str.w	r0, [r9, #28]
 8013224:	b920      	cbnz	r0, 8013230 <_dtoa_r+0x38>
 8013226:	4ba0      	ldr	r3, [pc, #640]	@ (80134a8 <_dtoa_r+0x2b0>)
 8013228:	21ef      	movs	r1, #239	@ 0xef
 801322a:	48a0      	ldr	r0, [pc, #640]	@ (80134ac <_dtoa_r+0x2b4>)
 801322c:	f001 fb32 	bl	8014894 <__assert_func>
 8013230:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013234:	6007      	str	r7, [r0, #0]
 8013236:	60c7      	str	r7, [r0, #12]
 8013238:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801323c:	6819      	ldr	r1, [r3, #0]
 801323e:	b159      	cbz	r1, 8013258 <_dtoa_r+0x60>
 8013240:	685a      	ldr	r2, [r3, #4]
 8013242:	604a      	str	r2, [r1, #4]
 8013244:	2301      	movs	r3, #1
 8013246:	4093      	lsls	r3, r2
 8013248:	608b      	str	r3, [r1, #8]
 801324a:	4648      	mov	r0, r9
 801324c:	f000 fdb4 	bl	8013db8 <_Bfree>
 8013250:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013254:	2200      	movs	r2, #0
 8013256:	601a      	str	r2, [r3, #0]
 8013258:	1e2b      	subs	r3, r5, #0
 801325a:	bfbb      	ittet	lt
 801325c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013260:	9303      	strlt	r3, [sp, #12]
 8013262:	2300      	movge	r3, #0
 8013264:	2201      	movlt	r2, #1
 8013266:	bfac      	ite	ge
 8013268:	6033      	strge	r3, [r6, #0]
 801326a:	6032      	strlt	r2, [r6, #0]
 801326c:	4b90      	ldr	r3, [pc, #576]	@ (80134b0 <_dtoa_r+0x2b8>)
 801326e:	9e03      	ldr	r6, [sp, #12]
 8013270:	43b3      	bics	r3, r6
 8013272:	d110      	bne.n	8013296 <_dtoa_r+0x9e>
 8013274:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013276:	f242 730f 	movw	r3, #9999	@ 0x270f
 801327a:	6013      	str	r3, [r2, #0]
 801327c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013280:	4323      	orrs	r3, r4
 8013282:	f000 84de 	beq.w	8013c42 <_dtoa_r+0xa4a>
 8013286:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013288:	4f8a      	ldr	r7, [pc, #552]	@ (80134b4 <_dtoa_r+0x2bc>)
 801328a:	2b00      	cmp	r3, #0
 801328c:	f000 84e0 	beq.w	8013c50 <_dtoa_r+0xa58>
 8013290:	1cfb      	adds	r3, r7, #3
 8013292:	f000 bcdb 	b.w	8013c4c <_dtoa_r+0xa54>
 8013296:	ed9d 8b02 	vldr	d8, [sp, #8]
 801329a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a2:	d10a      	bne.n	80132ba <_dtoa_r+0xc2>
 80132a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80132a6:	2301      	movs	r3, #1
 80132a8:	6013      	str	r3, [r2, #0]
 80132aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80132ac:	b113      	cbz	r3, 80132b4 <_dtoa_r+0xbc>
 80132ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80132b0:	4b81      	ldr	r3, [pc, #516]	@ (80134b8 <_dtoa_r+0x2c0>)
 80132b2:	6013      	str	r3, [r2, #0]
 80132b4:	4f81      	ldr	r7, [pc, #516]	@ (80134bc <_dtoa_r+0x2c4>)
 80132b6:	f000 bccb 	b.w	8013c50 <_dtoa_r+0xa58>
 80132ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80132bc:	a90f      	add	r1, sp, #60	@ 0x3c
 80132be:	4648      	mov	r0, r9
 80132c0:	eeb0 0b48 	vmov.f64	d0, d8
 80132c4:	f001 f862 	bl	801438c <__d2b>
 80132c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80132cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80132ce:	9001      	str	r0, [sp, #4]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d045      	beq.n	8013360 <_dtoa_r+0x168>
 80132d4:	eeb0 7b48 	vmov.f64	d7, d8
 80132d8:	ee18 1a90 	vmov	r1, s17
 80132dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80132e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80132e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80132e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80132ec:	2500      	movs	r5, #0
 80132ee:	ee07 1a90 	vmov	s15, r1
 80132f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80132f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013490 <_dtoa_r+0x298>
 80132fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80132fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013498 <_dtoa_r+0x2a0>
 8013302:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013306:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80134a0 <_dtoa_r+0x2a8>
 801330a:	ee07 3a90 	vmov	s15, r3
 801330e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013312:	eeb0 7b46 	vmov.f64	d7, d6
 8013316:	eea4 7b05 	vfma.f64	d7, d4, d5
 801331a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801331e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013326:	ee16 8a90 	vmov	r8, s13
 801332a:	d508      	bpl.n	801333e <_dtoa_r+0x146>
 801332c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013330:	eeb4 6b47 	vcmp.f64	d6, d7
 8013334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013338:	bf18      	it	ne
 801333a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801333e:	f1b8 0f16 	cmp.w	r8, #22
 8013342:	d82b      	bhi.n	801339c <_dtoa_r+0x1a4>
 8013344:	495e      	ldr	r1, [pc, #376]	@ (80134c0 <_dtoa_r+0x2c8>)
 8013346:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801334a:	ed91 7b00 	vldr	d7, [r1]
 801334e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013356:	d501      	bpl.n	801335c <_dtoa_r+0x164>
 8013358:	f108 38ff 	add.w	r8, r8, #4294967295
 801335c:	2100      	movs	r1, #0
 801335e:	e01e      	b.n	801339e <_dtoa_r+0x1a6>
 8013360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013362:	4413      	add	r3, r2
 8013364:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013368:	2920      	cmp	r1, #32
 801336a:	bfc1      	itttt	gt
 801336c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013370:	408e      	lslgt	r6, r1
 8013372:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8013376:	fa24 f101 	lsrgt.w	r1, r4, r1
 801337a:	bfd6      	itet	le
 801337c:	f1c1 0120 	rsble	r1, r1, #32
 8013380:	4331      	orrgt	r1, r6
 8013382:	fa04 f101 	lslle.w	r1, r4, r1
 8013386:	ee07 1a90 	vmov	s15, r1
 801338a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801338e:	3b01      	subs	r3, #1
 8013390:	ee17 1a90 	vmov	r1, s15
 8013394:	2501      	movs	r5, #1
 8013396:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801339a:	e7a8      	b.n	80132ee <_dtoa_r+0xf6>
 801339c:	2101      	movs	r1, #1
 801339e:	1ad2      	subs	r2, r2, r3
 80133a0:	1e53      	subs	r3, r2, #1
 80133a2:	9306      	str	r3, [sp, #24]
 80133a4:	bf45      	ittet	mi
 80133a6:	f1c2 0301 	rsbmi	r3, r2, #1
 80133aa:	9305      	strmi	r3, [sp, #20]
 80133ac:	2300      	movpl	r3, #0
 80133ae:	2300      	movmi	r3, #0
 80133b0:	bf4c      	ite	mi
 80133b2:	9306      	strmi	r3, [sp, #24]
 80133b4:	9305      	strpl	r3, [sp, #20]
 80133b6:	f1b8 0f00 	cmp.w	r8, #0
 80133ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80133bc:	db18      	blt.n	80133f0 <_dtoa_r+0x1f8>
 80133be:	9b06      	ldr	r3, [sp, #24]
 80133c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80133c4:	4443      	add	r3, r8
 80133c6:	9306      	str	r3, [sp, #24]
 80133c8:	2300      	movs	r3, #0
 80133ca:	9a07      	ldr	r2, [sp, #28]
 80133cc:	2a09      	cmp	r2, #9
 80133ce:	d849      	bhi.n	8013464 <_dtoa_r+0x26c>
 80133d0:	2a05      	cmp	r2, #5
 80133d2:	bfc4      	itt	gt
 80133d4:	3a04      	subgt	r2, #4
 80133d6:	9207      	strgt	r2, [sp, #28]
 80133d8:	9a07      	ldr	r2, [sp, #28]
 80133da:	f1a2 0202 	sub.w	r2, r2, #2
 80133de:	bfcc      	ite	gt
 80133e0:	2400      	movgt	r4, #0
 80133e2:	2401      	movle	r4, #1
 80133e4:	2a03      	cmp	r2, #3
 80133e6:	d848      	bhi.n	801347a <_dtoa_r+0x282>
 80133e8:	e8df f002 	tbb	[pc, r2]
 80133ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80133f0:	9b05      	ldr	r3, [sp, #20]
 80133f2:	2200      	movs	r2, #0
 80133f4:	eba3 0308 	sub.w	r3, r3, r8
 80133f8:	9305      	str	r3, [sp, #20]
 80133fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80133fc:	f1c8 0300 	rsb	r3, r8, #0
 8013400:	e7e3      	b.n	80133ca <_dtoa_r+0x1d2>
 8013402:	2200      	movs	r2, #0
 8013404:	9208      	str	r2, [sp, #32]
 8013406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013408:	2a00      	cmp	r2, #0
 801340a:	dc39      	bgt.n	8013480 <_dtoa_r+0x288>
 801340c:	f04f 0b01 	mov.w	fp, #1
 8013410:	46da      	mov	sl, fp
 8013412:	465a      	mov	r2, fp
 8013414:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013418:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801341c:	2100      	movs	r1, #0
 801341e:	2004      	movs	r0, #4
 8013420:	f100 0614 	add.w	r6, r0, #20
 8013424:	4296      	cmp	r6, r2
 8013426:	d930      	bls.n	801348a <_dtoa_r+0x292>
 8013428:	6079      	str	r1, [r7, #4]
 801342a:	4648      	mov	r0, r9
 801342c:	9304      	str	r3, [sp, #16]
 801342e:	f000 fc83 	bl	8013d38 <_Balloc>
 8013432:	9b04      	ldr	r3, [sp, #16]
 8013434:	4607      	mov	r7, r0
 8013436:	2800      	cmp	r0, #0
 8013438:	d146      	bne.n	80134c8 <_dtoa_r+0x2d0>
 801343a:	4b22      	ldr	r3, [pc, #136]	@ (80134c4 <_dtoa_r+0x2cc>)
 801343c:	4602      	mov	r2, r0
 801343e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013442:	e6f2      	b.n	801322a <_dtoa_r+0x32>
 8013444:	2201      	movs	r2, #1
 8013446:	e7dd      	b.n	8013404 <_dtoa_r+0x20c>
 8013448:	2200      	movs	r2, #0
 801344a:	9208      	str	r2, [sp, #32]
 801344c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801344e:	eb08 0b02 	add.w	fp, r8, r2
 8013452:	f10b 0a01 	add.w	sl, fp, #1
 8013456:	4652      	mov	r2, sl
 8013458:	2a01      	cmp	r2, #1
 801345a:	bfb8      	it	lt
 801345c:	2201      	movlt	r2, #1
 801345e:	e7db      	b.n	8013418 <_dtoa_r+0x220>
 8013460:	2201      	movs	r2, #1
 8013462:	e7f2      	b.n	801344a <_dtoa_r+0x252>
 8013464:	2401      	movs	r4, #1
 8013466:	2200      	movs	r2, #0
 8013468:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801346c:	f04f 3bff 	mov.w	fp, #4294967295
 8013470:	2100      	movs	r1, #0
 8013472:	46da      	mov	sl, fp
 8013474:	2212      	movs	r2, #18
 8013476:	9109      	str	r1, [sp, #36]	@ 0x24
 8013478:	e7ce      	b.n	8013418 <_dtoa_r+0x220>
 801347a:	2201      	movs	r2, #1
 801347c:	9208      	str	r2, [sp, #32]
 801347e:	e7f5      	b.n	801346c <_dtoa_r+0x274>
 8013480:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8013484:	46da      	mov	sl, fp
 8013486:	465a      	mov	r2, fp
 8013488:	e7c6      	b.n	8013418 <_dtoa_r+0x220>
 801348a:	3101      	adds	r1, #1
 801348c:	0040      	lsls	r0, r0, #1
 801348e:	e7c7      	b.n	8013420 <_dtoa_r+0x228>
 8013490:	636f4361 	.word	0x636f4361
 8013494:	3fd287a7 	.word	0x3fd287a7
 8013498:	8b60c8b3 	.word	0x8b60c8b3
 801349c:	3fc68a28 	.word	0x3fc68a28
 80134a0:	509f79fb 	.word	0x509f79fb
 80134a4:	3fd34413 	.word	0x3fd34413
 80134a8:	08015aa5 	.word	0x08015aa5
 80134ac:	08015abc 	.word	0x08015abc
 80134b0:	7ff00000 	.word	0x7ff00000
 80134b4:	08015aa1 	.word	0x08015aa1
 80134b8:	08015a75 	.word	0x08015a75
 80134bc:	08015a74 	.word	0x08015a74
 80134c0:	08015bb8 	.word	0x08015bb8
 80134c4:	08015b14 	.word	0x08015b14
 80134c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80134cc:	f1ba 0f0e 	cmp.w	sl, #14
 80134d0:	6010      	str	r0, [r2, #0]
 80134d2:	d86f      	bhi.n	80135b4 <_dtoa_r+0x3bc>
 80134d4:	2c00      	cmp	r4, #0
 80134d6:	d06d      	beq.n	80135b4 <_dtoa_r+0x3bc>
 80134d8:	f1b8 0f00 	cmp.w	r8, #0
 80134dc:	f340 80c2 	ble.w	8013664 <_dtoa_r+0x46c>
 80134e0:	4aca      	ldr	r2, [pc, #808]	@ (801380c <_dtoa_r+0x614>)
 80134e2:	f008 010f 	and.w	r1, r8, #15
 80134e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80134ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80134ee:	ed92 7b00 	vldr	d7, [r2]
 80134f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80134f6:	f000 80a9 	beq.w	801364c <_dtoa_r+0x454>
 80134fa:	4ac5      	ldr	r2, [pc, #788]	@ (8013810 <_dtoa_r+0x618>)
 80134fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8013500:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013504:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013508:	f001 010f 	and.w	r1, r1, #15
 801350c:	2203      	movs	r2, #3
 801350e:	48c0      	ldr	r0, [pc, #768]	@ (8013810 <_dtoa_r+0x618>)
 8013510:	2900      	cmp	r1, #0
 8013512:	f040 809d 	bne.w	8013650 <_dtoa_r+0x458>
 8013516:	ed9d 6b02 	vldr	d6, [sp, #8]
 801351a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801351e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013522:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013524:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013528:	2900      	cmp	r1, #0
 801352a:	f000 80c1 	beq.w	80136b0 <_dtoa_r+0x4b8>
 801352e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013532:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353a:	f140 80b9 	bpl.w	80136b0 <_dtoa_r+0x4b8>
 801353e:	f1ba 0f00 	cmp.w	sl, #0
 8013542:	f000 80b5 	beq.w	80136b0 <_dtoa_r+0x4b8>
 8013546:	f1bb 0f00 	cmp.w	fp, #0
 801354a:	dd31      	ble.n	80135b0 <_dtoa_r+0x3b8>
 801354c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013550:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013554:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013558:	f108 31ff 	add.w	r1, r8, #4294967295
 801355c:	9104      	str	r1, [sp, #16]
 801355e:	3201      	adds	r2, #1
 8013560:	465c      	mov	r4, fp
 8013562:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013566:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801356a:	ee07 2a90 	vmov	s15, r2
 801356e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013572:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013576:	ee15 2a90 	vmov	r2, s11
 801357a:	ec51 0b15 	vmov	r0, r1, d5
 801357e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8013582:	2c00      	cmp	r4, #0
 8013584:	f040 8098 	bne.w	80136b8 <_dtoa_r+0x4c0>
 8013588:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801358c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013590:	ec41 0b17 	vmov	d7, r0, r1
 8013594:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359c:	f300 8261 	bgt.w	8013a62 <_dtoa_r+0x86a>
 80135a0:	eeb1 7b47 	vneg.f64	d7, d7
 80135a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80135a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ac:	f100 80f5 	bmi.w	801379a <_dtoa_r+0x5a2>
 80135b0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80135b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80135b6:	2a00      	cmp	r2, #0
 80135b8:	f2c0 812c 	blt.w	8013814 <_dtoa_r+0x61c>
 80135bc:	f1b8 0f0e 	cmp.w	r8, #14
 80135c0:	f300 8128 	bgt.w	8013814 <_dtoa_r+0x61c>
 80135c4:	4b91      	ldr	r3, [pc, #580]	@ (801380c <_dtoa_r+0x614>)
 80135c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80135ca:	ed93 6b00 	vldr	d6, [r3]
 80135ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	da03      	bge.n	80135dc <_dtoa_r+0x3e4>
 80135d4:	f1ba 0f00 	cmp.w	sl, #0
 80135d8:	f340 80d2 	ble.w	8013780 <_dtoa_r+0x588>
 80135dc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80135e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80135e4:	463e      	mov	r6, r7
 80135e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80135ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80135ee:	ee15 3a10 	vmov	r3, s10
 80135f2:	3330      	adds	r3, #48	@ 0x30
 80135f4:	f806 3b01 	strb.w	r3, [r6], #1
 80135f8:	1bf3      	subs	r3, r6, r7
 80135fa:	459a      	cmp	sl, r3
 80135fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013600:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013604:	f040 80f8 	bne.w	80137f8 <_dtoa_r+0x600>
 8013608:	ee37 7b07 	vadd.f64	d7, d7, d7
 801360c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013614:	f300 80dd 	bgt.w	80137d2 <_dtoa_r+0x5da>
 8013618:	eeb4 7b46 	vcmp.f64	d7, d6
 801361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013620:	d104      	bne.n	801362c <_dtoa_r+0x434>
 8013622:	ee15 3a10 	vmov	r3, s10
 8013626:	07db      	lsls	r3, r3, #31
 8013628:	f100 80d3 	bmi.w	80137d2 <_dtoa_r+0x5da>
 801362c:	9901      	ldr	r1, [sp, #4]
 801362e:	4648      	mov	r0, r9
 8013630:	f000 fbc2 	bl	8013db8 <_Bfree>
 8013634:	2300      	movs	r3, #0
 8013636:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013638:	7033      	strb	r3, [r6, #0]
 801363a:	f108 0301 	add.w	r3, r8, #1
 801363e:	6013      	str	r3, [r2, #0]
 8013640:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013642:	2b00      	cmp	r3, #0
 8013644:	f000 8304 	beq.w	8013c50 <_dtoa_r+0xa58>
 8013648:	601e      	str	r6, [r3, #0]
 801364a:	e301      	b.n	8013c50 <_dtoa_r+0xa58>
 801364c:	2202      	movs	r2, #2
 801364e:	e75e      	b.n	801350e <_dtoa_r+0x316>
 8013650:	07cc      	lsls	r4, r1, #31
 8013652:	d504      	bpl.n	801365e <_dtoa_r+0x466>
 8013654:	ed90 6b00 	vldr	d6, [r0]
 8013658:	3201      	adds	r2, #1
 801365a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801365e:	1049      	asrs	r1, r1, #1
 8013660:	3008      	adds	r0, #8
 8013662:	e755      	b.n	8013510 <_dtoa_r+0x318>
 8013664:	d022      	beq.n	80136ac <_dtoa_r+0x4b4>
 8013666:	f1c8 0100 	rsb	r1, r8, #0
 801366a:	4a68      	ldr	r2, [pc, #416]	@ (801380c <_dtoa_r+0x614>)
 801366c:	f001 000f 	and.w	r0, r1, #15
 8013670:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013674:	ed92 7b00 	vldr	d7, [r2]
 8013678:	ee28 7b07 	vmul.f64	d7, d8, d7
 801367c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013680:	4863      	ldr	r0, [pc, #396]	@ (8013810 <_dtoa_r+0x618>)
 8013682:	1109      	asrs	r1, r1, #4
 8013684:	2400      	movs	r4, #0
 8013686:	2202      	movs	r2, #2
 8013688:	b929      	cbnz	r1, 8013696 <_dtoa_r+0x49e>
 801368a:	2c00      	cmp	r4, #0
 801368c:	f43f af49 	beq.w	8013522 <_dtoa_r+0x32a>
 8013690:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013694:	e745      	b.n	8013522 <_dtoa_r+0x32a>
 8013696:	07ce      	lsls	r6, r1, #31
 8013698:	d505      	bpl.n	80136a6 <_dtoa_r+0x4ae>
 801369a:	ed90 6b00 	vldr	d6, [r0]
 801369e:	3201      	adds	r2, #1
 80136a0:	2401      	movs	r4, #1
 80136a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80136a6:	1049      	asrs	r1, r1, #1
 80136a8:	3008      	adds	r0, #8
 80136aa:	e7ed      	b.n	8013688 <_dtoa_r+0x490>
 80136ac:	2202      	movs	r2, #2
 80136ae:	e738      	b.n	8013522 <_dtoa_r+0x32a>
 80136b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80136b4:	4654      	mov	r4, sl
 80136b6:	e754      	b.n	8013562 <_dtoa_r+0x36a>
 80136b8:	4a54      	ldr	r2, [pc, #336]	@ (801380c <_dtoa_r+0x614>)
 80136ba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80136be:	ed12 4b02 	vldr	d4, [r2, #-8]
 80136c2:	9a08      	ldr	r2, [sp, #32]
 80136c4:	ec41 0b17 	vmov	d7, r0, r1
 80136c8:	443c      	add	r4, r7
 80136ca:	b34a      	cbz	r2, 8013720 <_dtoa_r+0x528>
 80136cc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80136d0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80136d4:	463e      	mov	r6, r7
 80136d6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80136da:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80136de:	ee35 7b47 	vsub.f64	d7, d5, d7
 80136e2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80136e6:	ee14 2a90 	vmov	r2, s9
 80136ea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80136ee:	3230      	adds	r2, #48	@ 0x30
 80136f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80136f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80136f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136fc:	f806 2b01 	strb.w	r2, [r6], #1
 8013700:	d438      	bmi.n	8013774 <_dtoa_r+0x57c>
 8013702:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013706:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801370a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801370e:	d462      	bmi.n	80137d6 <_dtoa_r+0x5de>
 8013710:	42a6      	cmp	r6, r4
 8013712:	f43f af4d 	beq.w	80135b0 <_dtoa_r+0x3b8>
 8013716:	ee27 7b03 	vmul.f64	d7, d7, d3
 801371a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801371e:	e7e0      	b.n	80136e2 <_dtoa_r+0x4ea>
 8013720:	4621      	mov	r1, r4
 8013722:	463e      	mov	r6, r7
 8013724:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013728:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801372c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013730:	ee14 2a90 	vmov	r2, s9
 8013734:	3230      	adds	r2, #48	@ 0x30
 8013736:	f806 2b01 	strb.w	r2, [r6], #1
 801373a:	42a6      	cmp	r6, r4
 801373c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013740:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013744:	d119      	bne.n	801377a <_dtoa_r+0x582>
 8013746:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801374a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801374e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013756:	dc3e      	bgt.n	80137d6 <_dtoa_r+0x5de>
 8013758:	ee35 5b47 	vsub.f64	d5, d5, d7
 801375c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013764:	f57f af24 	bpl.w	80135b0 <_dtoa_r+0x3b8>
 8013768:	460e      	mov	r6, r1
 801376a:	3901      	subs	r1, #1
 801376c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013770:	2b30      	cmp	r3, #48	@ 0x30
 8013772:	d0f9      	beq.n	8013768 <_dtoa_r+0x570>
 8013774:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013778:	e758      	b.n	801362c <_dtoa_r+0x434>
 801377a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801377e:	e7d5      	b.n	801372c <_dtoa_r+0x534>
 8013780:	d10b      	bne.n	801379a <_dtoa_r+0x5a2>
 8013782:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013786:	ee26 6b07 	vmul.f64	d6, d6, d7
 801378a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801378e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013796:	f2c0 8161 	blt.w	8013a5c <_dtoa_r+0x864>
 801379a:	2400      	movs	r4, #0
 801379c:	4625      	mov	r5, r4
 801379e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137a0:	43db      	mvns	r3, r3
 80137a2:	9304      	str	r3, [sp, #16]
 80137a4:	463e      	mov	r6, r7
 80137a6:	f04f 0800 	mov.w	r8, #0
 80137aa:	4621      	mov	r1, r4
 80137ac:	4648      	mov	r0, r9
 80137ae:	f000 fb03 	bl	8013db8 <_Bfree>
 80137b2:	2d00      	cmp	r5, #0
 80137b4:	d0de      	beq.n	8013774 <_dtoa_r+0x57c>
 80137b6:	f1b8 0f00 	cmp.w	r8, #0
 80137ba:	d005      	beq.n	80137c8 <_dtoa_r+0x5d0>
 80137bc:	45a8      	cmp	r8, r5
 80137be:	d003      	beq.n	80137c8 <_dtoa_r+0x5d0>
 80137c0:	4641      	mov	r1, r8
 80137c2:	4648      	mov	r0, r9
 80137c4:	f000 faf8 	bl	8013db8 <_Bfree>
 80137c8:	4629      	mov	r1, r5
 80137ca:	4648      	mov	r0, r9
 80137cc:	f000 faf4 	bl	8013db8 <_Bfree>
 80137d0:	e7d0      	b.n	8013774 <_dtoa_r+0x57c>
 80137d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80137d6:	4633      	mov	r3, r6
 80137d8:	461e      	mov	r6, r3
 80137da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137de:	2a39      	cmp	r2, #57	@ 0x39
 80137e0:	d106      	bne.n	80137f0 <_dtoa_r+0x5f8>
 80137e2:	429f      	cmp	r7, r3
 80137e4:	d1f8      	bne.n	80137d8 <_dtoa_r+0x5e0>
 80137e6:	9a04      	ldr	r2, [sp, #16]
 80137e8:	3201      	adds	r2, #1
 80137ea:	9204      	str	r2, [sp, #16]
 80137ec:	2230      	movs	r2, #48	@ 0x30
 80137ee:	703a      	strb	r2, [r7, #0]
 80137f0:	781a      	ldrb	r2, [r3, #0]
 80137f2:	3201      	adds	r2, #1
 80137f4:	701a      	strb	r2, [r3, #0]
 80137f6:	e7bd      	b.n	8013774 <_dtoa_r+0x57c>
 80137f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80137fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013804:	f47f aeef 	bne.w	80135e6 <_dtoa_r+0x3ee>
 8013808:	e710      	b.n	801362c <_dtoa_r+0x434>
 801380a:	bf00      	nop
 801380c:	08015bb8 	.word	0x08015bb8
 8013810:	08015b90 	.word	0x08015b90
 8013814:	9908      	ldr	r1, [sp, #32]
 8013816:	2900      	cmp	r1, #0
 8013818:	f000 80e3 	beq.w	80139e2 <_dtoa_r+0x7ea>
 801381c:	9907      	ldr	r1, [sp, #28]
 801381e:	2901      	cmp	r1, #1
 8013820:	f300 80c8 	bgt.w	80139b4 <_dtoa_r+0x7bc>
 8013824:	2d00      	cmp	r5, #0
 8013826:	f000 80c1 	beq.w	80139ac <_dtoa_r+0x7b4>
 801382a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801382e:	9e05      	ldr	r6, [sp, #20]
 8013830:	461c      	mov	r4, r3
 8013832:	9304      	str	r3, [sp, #16]
 8013834:	9b05      	ldr	r3, [sp, #20]
 8013836:	4413      	add	r3, r2
 8013838:	9305      	str	r3, [sp, #20]
 801383a:	9b06      	ldr	r3, [sp, #24]
 801383c:	2101      	movs	r1, #1
 801383e:	4413      	add	r3, r2
 8013840:	4648      	mov	r0, r9
 8013842:	9306      	str	r3, [sp, #24]
 8013844:	f000 fb6c 	bl	8013f20 <__i2b>
 8013848:	9b04      	ldr	r3, [sp, #16]
 801384a:	4605      	mov	r5, r0
 801384c:	b166      	cbz	r6, 8013868 <_dtoa_r+0x670>
 801384e:	9a06      	ldr	r2, [sp, #24]
 8013850:	2a00      	cmp	r2, #0
 8013852:	dd09      	ble.n	8013868 <_dtoa_r+0x670>
 8013854:	42b2      	cmp	r2, r6
 8013856:	9905      	ldr	r1, [sp, #20]
 8013858:	bfa8      	it	ge
 801385a:	4632      	movge	r2, r6
 801385c:	1a89      	subs	r1, r1, r2
 801385e:	9105      	str	r1, [sp, #20]
 8013860:	9906      	ldr	r1, [sp, #24]
 8013862:	1ab6      	subs	r6, r6, r2
 8013864:	1a8a      	subs	r2, r1, r2
 8013866:	9206      	str	r2, [sp, #24]
 8013868:	b1fb      	cbz	r3, 80138aa <_dtoa_r+0x6b2>
 801386a:	9a08      	ldr	r2, [sp, #32]
 801386c:	2a00      	cmp	r2, #0
 801386e:	f000 80bc 	beq.w	80139ea <_dtoa_r+0x7f2>
 8013872:	b19c      	cbz	r4, 801389c <_dtoa_r+0x6a4>
 8013874:	4629      	mov	r1, r5
 8013876:	4622      	mov	r2, r4
 8013878:	4648      	mov	r0, r9
 801387a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801387c:	f000 fc10 	bl	80140a0 <__pow5mult>
 8013880:	9a01      	ldr	r2, [sp, #4]
 8013882:	4601      	mov	r1, r0
 8013884:	4605      	mov	r5, r0
 8013886:	4648      	mov	r0, r9
 8013888:	f000 fb60 	bl	8013f4c <__multiply>
 801388c:	9901      	ldr	r1, [sp, #4]
 801388e:	9004      	str	r0, [sp, #16]
 8013890:	4648      	mov	r0, r9
 8013892:	f000 fa91 	bl	8013db8 <_Bfree>
 8013896:	9a04      	ldr	r2, [sp, #16]
 8013898:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801389a:	9201      	str	r2, [sp, #4]
 801389c:	1b1a      	subs	r2, r3, r4
 801389e:	d004      	beq.n	80138aa <_dtoa_r+0x6b2>
 80138a0:	9901      	ldr	r1, [sp, #4]
 80138a2:	4648      	mov	r0, r9
 80138a4:	f000 fbfc 	bl	80140a0 <__pow5mult>
 80138a8:	9001      	str	r0, [sp, #4]
 80138aa:	2101      	movs	r1, #1
 80138ac:	4648      	mov	r0, r9
 80138ae:	f000 fb37 	bl	8013f20 <__i2b>
 80138b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138b4:	4604      	mov	r4, r0
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	f000 81d0 	beq.w	8013c5c <_dtoa_r+0xa64>
 80138bc:	461a      	mov	r2, r3
 80138be:	4601      	mov	r1, r0
 80138c0:	4648      	mov	r0, r9
 80138c2:	f000 fbed 	bl	80140a0 <__pow5mult>
 80138c6:	9b07      	ldr	r3, [sp, #28]
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	4604      	mov	r4, r0
 80138cc:	f300 8095 	bgt.w	80139fa <_dtoa_r+0x802>
 80138d0:	9b02      	ldr	r3, [sp, #8]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f040 808b 	bne.w	80139ee <_dtoa_r+0x7f6>
 80138d8:	9b03      	ldr	r3, [sp, #12]
 80138da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80138de:	2a00      	cmp	r2, #0
 80138e0:	f040 8087 	bne.w	80139f2 <_dtoa_r+0x7fa>
 80138e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80138e8:	0d12      	lsrs	r2, r2, #20
 80138ea:	0512      	lsls	r2, r2, #20
 80138ec:	2a00      	cmp	r2, #0
 80138ee:	f000 8082 	beq.w	80139f6 <_dtoa_r+0x7fe>
 80138f2:	9b05      	ldr	r3, [sp, #20]
 80138f4:	3301      	adds	r3, #1
 80138f6:	9305      	str	r3, [sp, #20]
 80138f8:	9b06      	ldr	r3, [sp, #24]
 80138fa:	3301      	adds	r3, #1
 80138fc:	9306      	str	r3, [sp, #24]
 80138fe:	2301      	movs	r3, #1
 8013900:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013904:	2b00      	cmp	r3, #0
 8013906:	f000 81af 	beq.w	8013c68 <_dtoa_r+0xa70>
 801390a:	6922      	ldr	r2, [r4, #16]
 801390c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013910:	6910      	ldr	r0, [r2, #16]
 8013912:	f000 fab9 	bl	8013e88 <__hi0bits>
 8013916:	f1c0 0020 	rsb	r0, r0, #32
 801391a:	9b06      	ldr	r3, [sp, #24]
 801391c:	4418      	add	r0, r3
 801391e:	f010 001f 	ands.w	r0, r0, #31
 8013922:	d076      	beq.n	8013a12 <_dtoa_r+0x81a>
 8013924:	f1c0 0220 	rsb	r2, r0, #32
 8013928:	2a04      	cmp	r2, #4
 801392a:	dd69      	ble.n	8013a00 <_dtoa_r+0x808>
 801392c:	9b05      	ldr	r3, [sp, #20]
 801392e:	f1c0 001c 	rsb	r0, r0, #28
 8013932:	4403      	add	r3, r0
 8013934:	9305      	str	r3, [sp, #20]
 8013936:	9b06      	ldr	r3, [sp, #24]
 8013938:	4406      	add	r6, r0
 801393a:	4403      	add	r3, r0
 801393c:	9306      	str	r3, [sp, #24]
 801393e:	9b05      	ldr	r3, [sp, #20]
 8013940:	2b00      	cmp	r3, #0
 8013942:	dd05      	ble.n	8013950 <_dtoa_r+0x758>
 8013944:	9901      	ldr	r1, [sp, #4]
 8013946:	461a      	mov	r2, r3
 8013948:	4648      	mov	r0, r9
 801394a:	f000 fc03 	bl	8014154 <__lshift>
 801394e:	9001      	str	r0, [sp, #4]
 8013950:	9b06      	ldr	r3, [sp, #24]
 8013952:	2b00      	cmp	r3, #0
 8013954:	dd05      	ble.n	8013962 <_dtoa_r+0x76a>
 8013956:	4621      	mov	r1, r4
 8013958:	461a      	mov	r2, r3
 801395a:	4648      	mov	r0, r9
 801395c:	f000 fbfa 	bl	8014154 <__lshift>
 8013960:	4604      	mov	r4, r0
 8013962:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013964:	2b00      	cmp	r3, #0
 8013966:	d056      	beq.n	8013a16 <_dtoa_r+0x81e>
 8013968:	9801      	ldr	r0, [sp, #4]
 801396a:	4621      	mov	r1, r4
 801396c:	f000 fc5e 	bl	801422c <__mcmp>
 8013970:	2800      	cmp	r0, #0
 8013972:	da50      	bge.n	8013a16 <_dtoa_r+0x81e>
 8013974:	f108 33ff 	add.w	r3, r8, #4294967295
 8013978:	9304      	str	r3, [sp, #16]
 801397a:	9901      	ldr	r1, [sp, #4]
 801397c:	2300      	movs	r3, #0
 801397e:	220a      	movs	r2, #10
 8013980:	4648      	mov	r0, r9
 8013982:	f000 fa3b 	bl	8013dfc <__multadd>
 8013986:	9b08      	ldr	r3, [sp, #32]
 8013988:	9001      	str	r0, [sp, #4]
 801398a:	2b00      	cmp	r3, #0
 801398c:	f000 816e 	beq.w	8013c6c <_dtoa_r+0xa74>
 8013990:	4629      	mov	r1, r5
 8013992:	2300      	movs	r3, #0
 8013994:	220a      	movs	r2, #10
 8013996:	4648      	mov	r0, r9
 8013998:	f000 fa30 	bl	8013dfc <__multadd>
 801399c:	f1bb 0f00 	cmp.w	fp, #0
 80139a0:	4605      	mov	r5, r0
 80139a2:	dc64      	bgt.n	8013a6e <_dtoa_r+0x876>
 80139a4:	9b07      	ldr	r3, [sp, #28]
 80139a6:	2b02      	cmp	r3, #2
 80139a8:	dc3e      	bgt.n	8013a28 <_dtoa_r+0x830>
 80139aa:	e060      	b.n	8013a6e <_dtoa_r+0x876>
 80139ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80139ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80139b2:	e73c      	b.n	801382e <_dtoa_r+0x636>
 80139b4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80139b8:	42a3      	cmp	r3, r4
 80139ba:	bfbf      	itttt	lt
 80139bc:	1ae2      	sublt	r2, r4, r3
 80139be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80139c0:	189b      	addlt	r3, r3, r2
 80139c2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80139c4:	bfae      	itee	ge
 80139c6:	1b1c      	subge	r4, r3, r4
 80139c8:	4623      	movlt	r3, r4
 80139ca:	2400      	movlt	r4, #0
 80139cc:	f1ba 0f00 	cmp.w	sl, #0
 80139d0:	bfb5      	itete	lt
 80139d2:	9a05      	ldrlt	r2, [sp, #20]
 80139d4:	9e05      	ldrge	r6, [sp, #20]
 80139d6:	eba2 060a 	sublt.w	r6, r2, sl
 80139da:	4652      	movge	r2, sl
 80139dc:	bfb8      	it	lt
 80139de:	2200      	movlt	r2, #0
 80139e0:	e727      	b.n	8013832 <_dtoa_r+0x63a>
 80139e2:	9e05      	ldr	r6, [sp, #20]
 80139e4:	9d08      	ldr	r5, [sp, #32]
 80139e6:	461c      	mov	r4, r3
 80139e8:	e730      	b.n	801384c <_dtoa_r+0x654>
 80139ea:	461a      	mov	r2, r3
 80139ec:	e758      	b.n	80138a0 <_dtoa_r+0x6a8>
 80139ee:	2300      	movs	r3, #0
 80139f0:	e786      	b.n	8013900 <_dtoa_r+0x708>
 80139f2:	9b02      	ldr	r3, [sp, #8]
 80139f4:	e784      	b.n	8013900 <_dtoa_r+0x708>
 80139f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80139f8:	e783      	b.n	8013902 <_dtoa_r+0x70a>
 80139fa:	2300      	movs	r3, #0
 80139fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80139fe:	e784      	b.n	801390a <_dtoa_r+0x712>
 8013a00:	d09d      	beq.n	801393e <_dtoa_r+0x746>
 8013a02:	9b05      	ldr	r3, [sp, #20]
 8013a04:	321c      	adds	r2, #28
 8013a06:	4413      	add	r3, r2
 8013a08:	9305      	str	r3, [sp, #20]
 8013a0a:	9b06      	ldr	r3, [sp, #24]
 8013a0c:	4416      	add	r6, r2
 8013a0e:	4413      	add	r3, r2
 8013a10:	e794      	b.n	801393c <_dtoa_r+0x744>
 8013a12:	4602      	mov	r2, r0
 8013a14:	e7f5      	b.n	8013a02 <_dtoa_r+0x80a>
 8013a16:	f1ba 0f00 	cmp.w	sl, #0
 8013a1a:	f8cd 8010 	str.w	r8, [sp, #16]
 8013a1e:	46d3      	mov	fp, sl
 8013a20:	dc21      	bgt.n	8013a66 <_dtoa_r+0x86e>
 8013a22:	9b07      	ldr	r3, [sp, #28]
 8013a24:	2b02      	cmp	r3, #2
 8013a26:	dd1e      	ble.n	8013a66 <_dtoa_r+0x86e>
 8013a28:	f1bb 0f00 	cmp.w	fp, #0
 8013a2c:	f47f aeb7 	bne.w	801379e <_dtoa_r+0x5a6>
 8013a30:	4621      	mov	r1, r4
 8013a32:	465b      	mov	r3, fp
 8013a34:	2205      	movs	r2, #5
 8013a36:	4648      	mov	r0, r9
 8013a38:	f000 f9e0 	bl	8013dfc <__multadd>
 8013a3c:	4601      	mov	r1, r0
 8013a3e:	4604      	mov	r4, r0
 8013a40:	9801      	ldr	r0, [sp, #4]
 8013a42:	f000 fbf3 	bl	801422c <__mcmp>
 8013a46:	2800      	cmp	r0, #0
 8013a48:	f77f aea9 	ble.w	801379e <_dtoa_r+0x5a6>
 8013a4c:	463e      	mov	r6, r7
 8013a4e:	2331      	movs	r3, #49	@ 0x31
 8013a50:	f806 3b01 	strb.w	r3, [r6], #1
 8013a54:	9b04      	ldr	r3, [sp, #16]
 8013a56:	3301      	adds	r3, #1
 8013a58:	9304      	str	r3, [sp, #16]
 8013a5a:	e6a4      	b.n	80137a6 <_dtoa_r+0x5ae>
 8013a5c:	f8cd 8010 	str.w	r8, [sp, #16]
 8013a60:	4654      	mov	r4, sl
 8013a62:	4625      	mov	r5, r4
 8013a64:	e7f2      	b.n	8013a4c <_dtoa_r+0x854>
 8013a66:	9b08      	ldr	r3, [sp, #32]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f000 8103 	beq.w	8013c74 <_dtoa_r+0xa7c>
 8013a6e:	2e00      	cmp	r6, #0
 8013a70:	dd05      	ble.n	8013a7e <_dtoa_r+0x886>
 8013a72:	4629      	mov	r1, r5
 8013a74:	4632      	mov	r2, r6
 8013a76:	4648      	mov	r0, r9
 8013a78:	f000 fb6c 	bl	8014154 <__lshift>
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d058      	beq.n	8013b36 <_dtoa_r+0x93e>
 8013a84:	6869      	ldr	r1, [r5, #4]
 8013a86:	4648      	mov	r0, r9
 8013a88:	f000 f956 	bl	8013d38 <_Balloc>
 8013a8c:	4606      	mov	r6, r0
 8013a8e:	b928      	cbnz	r0, 8013a9c <_dtoa_r+0x8a4>
 8013a90:	4b82      	ldr	r3, [pc, #520]	@ (8013c9c <_dtoa_r+0xaa4>)
 8013a92:	4602      	mov	r2, r0
 8013a94:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013a98:	f7ff bbc7 	b.w	801322a <_dtoa_r+0x32>
 8013a9c:	692a      	ldr	r2, [r5, #16]
 8013a9e:	3202      	adds	r2, #2
 8013aa0:	0092      	lsls	r2, r2, #2
 8013aa2:	f105 010c 	add.w	r1, r5, #12
 8013aa6:	300c      	adds	r0, #12
 8013aa8:	f000 fee6 	bl	8014878 <memcpy>
 8013aac:	2201      	movs	r2, #1
 8013aae:	4631      	mov	r1, r6
 8013ab0:	4648      	mov	r0, r9
 8013ab2:	f000 fb4f 	bl	8014154 <__lshift>
 8013ab6:	1c7b      	adds	r3, r7, #1
 8013ab8:	9305      	str	r3, [sp, #20]
 8013aba:	eb07 030b 	add.w	r3, r7, fp
 8013abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ac0:	9b02      	ldr	r3, [sp, #8]
 8013ac2:	f003 0301 	and.w	r3, r3, #1
 8013ac6:	46a8      	mov	r8, r5
 8013ac8:	9308      	str	r3, [sp, #32]
 8013aca:	4605      	mov	r5, r0
 8013acc:	9b05      	ldr	r3, [sp, #20]
 8013ace:	9801      	ldr	r0, [sp, #4]
 8013ad0:	4621      	mov	r1, r4
 8013ad2:	f103 3bff 	add.w	fp, r3, #4294967295
 8013ad6:	f7ff fb04 	bl	80130e2 <quorem>
 8013ada:	4641      	mov	r1, r8
 8013adc:	9002      	str	r0, [sp, #8]
 8013ade:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013ae2:	9801      	ldr	r0, [sp, #4]
 8013ae4:	f000 fba2 	bl	801422c <__mcmp>
 8013ae8:	462a      	mov	r2, r5
 8013aea:	9006      	str	r0, [sp, #24]
 8013aec:	4621      	mov	r1, r4
 8013aee:	4648      	mov	r0, r9
 8013af0:	f000 fbb8 	bl	8014264 <__mdiff>
 8013af4:	68c2      	ldr	r2, [r0, #12]
 8013af6:	4606      	mov	r6, r0
 8013af8:	b9fa      	cbnz	r2, 8013b3a <_dtoa_r+0x942>
 8013afa:	4601      	mov	r1, r0
 8013afc:	9801      	ldr	r0, [sp, #4]
 8013afe:	f000 fb95 	bl	801422c <__mcmp>
 8013b02:	4602      	mov	r2, r0
 8013b04:	4631      	mov	r1, r6
 8013b06:	4648      	mov	r0, r9
 8013b08:	920a      	str	r2, [sp, #40]	@ 0x28
 8013b0a:	f000 f955 	bl	8013db8 <_Bfree>
 8013b0e:	9b07      	ldr	r3, [sp, #28]
 8013b10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013b12:	9e05      	ldr	r6, [sp, #20]
 8013b14:	ea43 0102 	orr.w	r1, r3, r2
 8013b18:	9b08      	ldr	r3, [sp, #32]
 8013b1a:	4319      	orrs	r1, r3
 8013b1c:	d10f      	bne.n	8013b3e <_dtoa_r+0x946>
 8013b1e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013b22:	d028      	beq.n	8013b76 <_dtoa_r+0x97e>
 8013b24:	9b06      	ldr	r3, [sp, #24]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	dd02      	ble.n	8013b30 <_dtoa_r+0x938>
 8013b2a:	9b02      	ldr	r3, [sp, #8]
 8013b2c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013b30:	f88b a000 	strb.w	sl, [fp]
 8013b34:	e639      	b.n	80137aa <_dtoa_r+0x5b2>
 8013b36:	4628      	mov	r0, r5
 8013b38:	e7bd      	b.n	8013ab6 <_dtoa_r+0x8be>
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	e7e2      	b.n	8013b04 <_dtoa_r+0x90c>
 8013b3e:	9b06      	ldr	r3, [sp, #24]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	db04      	blt.n	8013b4e <_dtoa_r+0x956>
 8013b44:	9907      	ldr	r1, [sp, #28]
 8013b46:	430b      	orrs	r3, r1
 8013b48:	9908      	ldr	r1, [sp, #32]
 8013b4a:	430b      	orrs	r3, r1
 8013b4c:	d120      	bne.n	8013b90 <_dtoa_r+0x998>
 8013b4e:	2a00      	cmp	r2, #0
 8013b50:	ddee      	ble.n	8013b30 <_dtoa_r+0x938>
 8013b52:	9901      	ldr	r1, [sp, #4]
 8013b54:	2201      	movs	r2, #1
 8013b56:	4648      	mov	r0, r9
 8013b58:	f000 fafc 	bl	8014154 <__lshift>
 8013b5c:	4621      	mov	r1, r4
 8013b5e:	9001      	str	r0, [sp, #4]
 8013b60:	f000 fb64 	bl	801422c <__mcmp>
 8013b64:	2800      	cmp	r0, #0
 8013b66:	dc03      	bgt.n	8013b70 <_dtoa_r+0x978>
 8013b68:	d1e2      	bne.n	8013b30 <_dtoa_r+0x938>
 8013b6a:	f01a 0f01 	tst.w	sl, #1
 8013b6e:	d0df      	beq.n	8013b30 <_dtoa_r+0x938>
 8013b70:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013b74:	d1d9      	bne.n	8013b2a <_dtoa_r+0x932>
 8013b76:	2339      	movs	r3, #57	@ 0x39
 8013b78:	f88b 3000 	strb.w	r3, [fp]
 8013b7c:	4633      	mov	r3, r6
 8013b7e:	461e      	mov	r6, r3
 8013b80:	3b01      	subs	r3, #1
 8013b82:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013b86:	2a39      	cmp	r2, #57	@ 0x39
 8013b88:	d053      	beq.n	8013c32 <_dtoa_r+0xa3a>
 8013b8a:	3201      	adds	r2, #1
 8013b8c:	701a      	strb	r2, [r3, #0]
 8013b8e:	e60c      	b.n	80137aa <_dtoa_r+0x5b2>
 8013b90:	2a00      	cmp	r2, #0
 8013b92:	dd07      	ble.n	8013ba4 <_dtoa_r+0x9ac>
 8013b94:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013b98:	d0ed      	beq.n	8013b76 <_dtoa_r+0x97e>
 8013b9a:	f10a 0301 	add.w	r3, sl, #1
 8013b9e:	f88b 3000 	strb.w	r3, [fp]
 8013ba2:	e602      	b.n	80137aa <_dtoa_r+0x5b2>
 8013ba4:	9b05      	ldr	r3, [sp, #20]
 8013ba6:	9a05      	ldr	r2, [sp, #20]
 8013ba8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d029      	beq.n	8013c06 <_dtoa_r+0xa0e>
 8013bb2:	9901      	ldr	r1, [sp, #4]
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	220a      	movs	r2, #10
 8013bb8:	4648      	mov	r0, r9
 8013bba:	f000 f91f 	bl	8013dfc <__multadd>
 8013bbe:	45a8      	cmp	r8, r5
 8013bc0:	9001      	str	r0, [sp, #4]
 8013bc2:	f04f 0300 	mov.w	r3, #0
 8013bc6:	f04f 020a 	mov.w	r2, #10
 8013bca:	4641      	mov	r1, r8
 8013bcc:	4648      	mov	r0, r9
 8013bce:	d107      	bne.n	8013be0 <_dtoa_r+0x9e8>
 8013bd0:	f000 f914 	bl	8013dfc <__multadd>
 8013bd4:	4680      	mov	r8, r0
 8013bd6:	4605      	mov	r5, r0
 8013bd8:	9b05      	ldr	r3, [sp, #20]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	9305      	str	r3, [sp, #20]
 8013bde:	e775      	b.n	8013acc <_dtoa_r+0x8d4>
 8013be0:	f000 f90c 	bl	8013dfc <__multadd>
 8013be4:	4629      	mov	r1, r5
 8013be6:	4680      	mov	r8, r0
 8013be8:	2300      	movs	r3, #0
 8013bea:	220a      	movs	r2, #10
 8013bec:	4648      	mov	r0, r9
 8013bee:	f000 f905 	bl	8013dfc <__multadd>
 8013bf2:	4605      	mov	r5, r0
 8013bf4:	e7f0      	b.n	8013bd8 <_dtoa_r+0x9e0>
 8013bf6:	f1bb 0f00 	cmp.w	fp, #0
 8013bfa:	bfcc      	ite	gt
 8013bfc:	465e      	movgt	r6, fp
 8013bfe:	2601      	movle	r6, #1
 8013c00:	443e      	add	r6, r7
 8013c02:	f04f 0800 	mov.w	r8, #0
 8013c06:	9901      	ldr	r1, [sp, #4]
 8013c08:	2201      	movs	r2, #1
 8013c0a:	4648      	mov	r0, r9
 8013c0c:	f000 faa2 	bl	8014154 <__lshift>
 8013c10:	4621      	mov	r1, r4
 8013c12:	9001      	str	r0, [sp, #4]
 8013c14:	f000 fb0a 	bl	801422c <__mcmp>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	dcaf      	bgt.n	8013b7c <_dtoa_r+0x984>
 8013c1c:	d102      	bne.n	8013c24 <_dtoa_r+0xa2c>
 8013c1e:	f01a 0f01 	tst.w	sl, #1
 8013c22:	d1ab      	bne.n	8013b7c <_dtoa_r+0x984>
 8013c24:	4633      	mov	r3, r6
 8013c26:	461e      	mov	r6, r3
 8013c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c2c:	2a30      	cmp	r2, #48	@ 0x30
 8013c2e:	d0fa      	beq.n	8013c26 <_dtoa_r+0xa2e>
 8013c30:	e5bb      	b.n	80137aa <_dtoa_r+0x5b2>
 8013c32:	429f      	cmp	r7, r3
 8013c34:	d1a3      	bne.n	8013b7e <_dtoa_r+0x986>
 8013c36:	9b04      	ldr	r3, [sp, #16]
 8013c38:	3301      	adds	r3, #1
 8013c3a:	9304      	str	r3, [sp, #16]
 8013c3c:	2331      	movs	r3, #49	@ 0x31
 8013c3e:	703b      	strb	r3, [r7, #0]
 8013c40:	e5b3      	b.n	80137aa <_dtoa_r+0x5b2>
 8013c42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013c44:	4f16      	ldr	r7, [pc, #88]	@ (8013ca0 <_dtoa_r+0xaa8>)
 8013c46:	b11b      	cbz	r3, 8013c50 <_dtoa_r+0xa58>
 8013c48:	f107 0308 	add.w	r3, r7, #8
 8013c4c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013c4e:	6013      	str	r3, [r2, #0]
 8013c50:	4638      	mov	r0, r7
 8013c52:	b011      	add	sp, #68	@ 0x44
 8013c54:	ecbd 8b02 	vpop	{d8}
 8013c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c5c:	9b07      	ldr	r3, [sp, #28]
 8013c5e:	2b01      	cmp	r3, #1
 8013c60:	f77f ae36 	ble.w	80138d0 <_dtoa_r+0x6d8>
 8013c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013c68:	2001      	movs	r0, #1
 8013c6a:	e656      	b.n	801391a <_dtoa_r+0x722>
 8013c6c:	f1bb 0f00 	cmp.w	fp, #0
 8013c70:	f77f aed7 	ble.w	8013a22 <_dtoa_r+0x82a>
 8013c74:	463e      	mov	r6, r7
 8013c76:	9801      	ldr	r0, [sp, #4]
 8013c78:	4621      	mov	r1, r4
 8013c7a:	f7ff fa32 	bl	80130e2 <quorem>
 8013c7e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013c82:	f806 ab01 	strb.w	sl, [r6], #1
 8013c86:	1bf2      	subs	r2, r6, r7
 8013c88:	4593      	cmp	fp, r2
 8013c8a:	ddb4      	ble.n	8013bf6 <_dtoa_r+0x9fe>
 8013c8c:	9901      	ldr	r1, [sp, #4]
 8013c8e:	2300      	movs	r3, #0
 8013c90:	220a      	movs	r2, #10
 8013c92:	4648      	mov	r0, r9
 8013c94:	f000 f8b2 	bl	8013dfc <__multadd>
 8013c98:	9001      	str	r0, [sp, #4]
 8013c9a:	e7ec      	b.n	8013c76 <_dtoa_r+0xa7e>
 8013c9c:	08015b14 	.word	0x08015b14
 8013ca0:	08015a98 	.word	0x08015a98

08013ca4 <_free_r>:
 8013ca4:	b538      	push	{r3, r4, r5, lr}
 8013ca6:	4605      	mov	r5, r0
 8013ca8:	2900      	cmp	r1, #0
 8013caa:	d041      	beq.n	8013d30 <_free_r+0x8c>
 8013cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cb0:	1f0c      	subs	r4, r1, #4
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	bfb8      	it	lt
 8013cb6:	18e4      	addlt	r4, r4, r3
 8013cb8:	f7fe fc1a 	bl	80124f0 <__malloc_lock>
 8013cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8013d34 <_free_r+0x90>)
 8013cbe:	6813      	ldr	r3, [r2, #0]
 8013cc0:	b933      	cbnz	r3, 8013cd0 <_free_r+0x2c>
 8013cc2:	6063      	str	r3, [r4, #4]
 8013cc4:	6014      	str	r4, [r2, #0]
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ccc:	f7fe bc16 	b.w	80124fc <__malloc_unlock>
 8013cd0:	42a3      	cmp	r3, r4
 8013cd2:	d908      	bls.n	8013ce6 <_free_r+0x42>
 8013cd4:	6820      	ldr	r0, [r4, #0]
 8013cd6:	1821      	adds	r1, r4, r0
 8013cd8:	428b      	cmp	r3, r1
 8013cda:	bf01      	itttt	eq
 8013cdc:	6819      	ldreq	r1, [r3, #0]
 8013cde:	685b      	ldreq	r3, [r3, #4]
 8013ce0:	1809      	addeq	r1, r1, r0
 8013ce2:	6021      	streq	r1, [r4, #0]
 8013ce4:	e7ed      	b.n	8013cc2 <_free_r+0x1e>
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	b10b      	cbz	r3, 8013cf0 <_free_r+0x4c>
 8013cec:	42a3      	cmp	r3, r4
 8013cee:	d9fa      	bls.n	8013ce6 <_free_r+0x42>
 8013cf0:	6811      	ldr	r1, [r2, #0]
 8013cf2:	1850      	adds	r0, r2, r1
 8013cf4:	42a0      	cmp	r0, r4
 8013cf6:	d10b      	bne.n	8013d10 <_free_r+0x6c>
 8013cf8:	6820      	ldr	r0, [r4, #0]
 8013cfa:	4401      	add	r1, r0
 8013cfc:	1850      	adds	r0, r2, r1
 8013cfe:	4283      	cmp	r3, r0
 8013d00:	6011      	str	r1, [r2, #0]
 8013d02:	d1e0      	bne.n	8013cc6 <_free_r+0x22>
 8013d04:	6818      	ldr	r0, [r3, #0]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	6053      	str	r3, [r2, #4]
 8013d0a:	4408      	add	r0, r1
 8013d0c:	6010      	str	r0, [r2, #0]
 8013d0e:	e7da      	b.n	8013cc6 <_free_r+0x22>
 8013d10:	d902      	bls.n	8013d18 <_free_r+0x74>
 8013d12:	230c      	movs	r3, #12
 8013d14:	602b      	str	r3, [r5, #0]
 8013d16:	e7d6      	b.n	8013cc6 <_free_r+0x22>
 8013d18:	6820      	ldr	r0, [r4, #0]
 8013d1a:	1821      	adds	r1, r4, r0
 8013d1c:	428b      	cmp	r3, r1
 8013d1e:	bf04      	itt	eq
 8013d20:	6819      	ldreq	r1, [r3, #0]
 8013d22:	685b      	ldreq	r3, [r3, #4]
 8013d24:	6063      	str	r3, [r4, #4]
 8013d26:	bf04      	itt	eq
 8013d28:	1809      	addeq	r1, r1, r0
 8013d2a:	6021      	streq	r1, [r4, #0]
 8013d2c:	6054      	str	r4, [r2, #4]
 8013d2e:	e7ca      	b.n	8013cc6 <_free_r+0x22>
 8013d30:	bd38      	pop	{r3, r4, r5, pc}
 8013d32:	bf00      	nop
 8013d34:	240027bc 	.word	0x240027bc

08013d38 <_Balloc>:
 8013d38:	b570      	push	{r4, r5, r6, lr}
 8013d3a:	69c6      	ldr	r6, [r0, #28]
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	460d      	mov	r5, r1
 8013d40:	b976      	cbnz	r6, 8013d60 <_Balloc+0x28>
 8013d42:	2010      	movs	r0, #16
 8013d44:	f7fe fb2a 	bl	801239c <malloc>
 8013d48:	4602      	mov	r2, r0
 8013d4a:	61e0      	str	r0, [r4, #28]
 8013d4c:	b920      	cbnz	r0, 8013d58 <_Balloc+0x20>
 8013d4e:	4b18      	ldr	r3, [pc, #96]	@ (8013db0 <_Balloc+0x78>)
 8013d50:	4818      	ldr	r0, [pc, #96]	@ (8013db4 <_Balloc+0x7c>)
 8013d52:	216b      	movs	r1, #107	@ 0x6b
 8013d54:	f000 fd9e 	bl	8014894 <__assert_func>
 8013d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d5c:	6006      	str	r6, [r0, #0]
 8013d5e:	60c6      	str	r6, [r0, #12]
 8013d60:	69e6      	ldr	r6, [r4, #28]
 8013d62:	68f3      	ldr	r3, [r6, #12]
 8013d64:	b183      	cbz	r3, 8013d88 <_Balloc+0x50>
 8013d66:	69e3      	ldr	r3, [r4, #28]
 8013d68:	68db      	ldr	r3, [r3, #12]
 8013d6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d6e:	b9b8      	cbnz	r0, 8013da0 <_Balloc+0x68>
 8013d70:	2101      	movs	r1, #1
 8013d72:	fa01 f605 	lsl.w	r6, r1, r5
 8013d76:	1d72      	adds	r2, r6, #5
 8013d78:	0092      	lsls	r2, r2, #2
 8013d7a:	4620      	mov	r0, r4
 8013d7c:	f000 fda8 	bl	80148d0 <_calloc_r>
 8013d80:	b160      	cbz	r0, 8013d9c <_Balloc+0x64>
 8013d82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013d86:	e00e      	b.n	8013da6 <_Balloc+0x6e>
 8013d88:	2221      	movs	r2, #33	@ 0x21
 8013d8a:	2104      	movs	r1, #4
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	f000 fd9f 	bl	80148d0 <_calloc_r>
 8013d92:	69e3      	ldr	r3, [r4, #28]
 8013d94:	60f0      	str	r0, [r6, #12]
 8013d96:	68db      	ldr	r3, [r3, #12]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d1e4      	bne.n	8013d66 <_Balloc+0x2e>
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	bd70      	pop	{r4, r5, r6, pc}
 8013da0:	6802      	ldr	r2, [r0, #0]
 8013da2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013da6:	2300      	movs	r3, #0
 8013da8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013dac:	e7f7      	b.n	8013d9e <_Balloc+0x66>
 8013dae:	bf00      	nop
 8013db0:	08015aa5 	.word	0x08015aa5
 8013db4:	08015b25 	.word	0x08015b25

08013db8 <_Bfree>:
 8013db8:	b570      	push	{r4, r5, r6, lr}
 8013dba:	69c6      	ldr	r6, [r0, #28]
 8013dbc:	4605      	mov	r5, r0
 8013dbe:	460c      	mov	r4, r1
 8013dc0:	b976      	cbnz	r6, 8013de0 <_Bfree+0x28>
 8013dc2:	2010      	movs	r0, #16
 8013dc4:	f7fe faea 	bl	801239c <malloc>
 8013dc8:	4602      	mov	r2, r0
 8013dca:	61e8      	str	r0, [r5, #28]
 8013dcc:	b920      	cbnz	r0, 8013dd8 <_Bfree+0x20>
 8013dce:	4b09      	ldr	r3, [pc, #36]	@ (8013df4 <_Bfree+0x3c>)
 8013dd0:	4809      	ldr	r0, [pc, #36]	@ (8013df8 <_Bfree+0x40>)
 8013dd2:	218f      	movs	r1, #143	@ 0x8f
 8013dd4:	f000 fd5e 	bl	8014894 <__assert_func>
 8013dd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ddc:	6006      	str	r6, [r0, #0]
 8013dde:	60c6      	str	r6, [r0, #12]
 8013de0:	b13c      	cbz	r4, 8013df2 <_Bfree+0x3a>
 8013de2:	69eb      	ldr	r3, [r5, #28]
 8013de4:	6862      	ldr	r2, [r4, #4]
 8013de6:	68db      	ldr	r3, [r3, #12]
 8013de8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013dec:	6021      	str	r1, [r4, #0]
 8013dee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013df2:	bd70      	pop	{r4, r5, r6, pc}
 8013df4:	08015aa5 	.word	0x08015aa5
 8013df8:	08015b25 	.word	0x08015b25

08013dfc <__multadd>:
 8013dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e00:	690d      	ldr	r5, [r1, #16]
 8013e02:	4607      	mov	r7, r0
 8013e04:	460c      	mov	r4, r1
 8013e06:	461e      	mov	r6, r3
 8013e08:	f101 0c14 	add.w	ip, r1, #20
 8013e0c:	2000      	movs	r0, #0
 8013e0e:	f8dc 3000 	ldr.w	r3, [ip]
 8013e12:	b299      	uxth	r1, r3
 8013e14:	fb02 6101 	mla	r1, r2, r1, r6
 8013e18:	0c1e      	lsrs	r6, r3, #16
 8013e1a:	0c0b      	lsrs	r3, r1, #16
 8013e1c:	fb02 3306 	mla	r3, r2, r6, r3
 8013e20:	b289      	uxth	r1, r1
 8013e22:	3001      	adds	r0, #1
 8013e24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013e28:	4285      	cmp	r5, r0
 8013e2a:	f84c 1b04 	str.w	r1, [ip], #4
 8013e2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013e32:	dcec      	bgt.n	8013e0e <__multadd+0x12>
 8013e34:	b30e      	cbz	r6, 8013e7a <__multadd+0x7e>
 8013e36:	68a3      	ldr	r3, [r4, #8]
 8013e38:	42ab      	cmp	r3, r5
 8013e3a:	dc19      	bgt.n	8013e70 <__multadd+0x74>
 8013e3c:	6861      	ldr	r1, [r4, #4]
 8013e3e:	4638      	mov	r0, r7
 8013e40:	3101      	adds	r1, #1
 8013e42:	f7ff ff79 	bl	8013d38 <_Balloc>
 8013e46:	4680      	mov	r8, r0
 8013e48:	b928      	cbnz	r0, 8013e56 <__multadd+0x5a>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8013e80 <__multadd+0x84>)
 8013e4e:	480d      	ldr	r0, [pc, #52]	@ (8013e84 <__multadd+0x88>)
 8013e50:	21ba      	movs	r1, #186	@ 0xba
 8013e52:	f000 fd1f 	bl	8014894 <__assert_func>
 8013e56:	6922      	ldr	r2, [r4, #16]
 8013e58:	3202      	adds	r2, #2
 8013e5a:	f104 010c 	add.w	r1, r4, #12
 8013e5e:	0092      	lsls	r2, r2, #2
 8013e60:	300c      	adds	r0, #12
 8013e62:	f000 fd09 	bl	8014878 <memcpy>
 8013e66:	4621      	mov	r1, r4
 8013e68:	4638      	mov	r0, r7
 8013e6a:	f7ff ffa5 	bl	8013db8 <_Bfree>
 8013e6e:	4644      	mov	r4, r8
 8013e70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e74:	3501      	adds	r5, #1
 8013e76:	615e      	str	r6, [r3, #20]
 8013e78:	6125      	str	r5, [r4, #16]
 8013e7a:	4620      	mov	r0, r4
 8013e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e80:	08015b14 	.word	0x08015b14
 8013e84:	08015b25 	.word	0x08015b25

08013e88 <__hi0bits>:
 8013e88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	bf36      	itet	cc
 8013e90:	0403      	lslcc	r3, r0, #16
 8013e92:	2000      	movcs	r0, #0
 8013e94:	2010      	movcc	r0, #16
 8013e96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013e9a:	bf3c      	itt	cc
 8013e9c:	021b      	lslcc	r3, r3, #8
 8013e9e:	3008      	addcc	r0, #8
 8013ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013ea4:	bf3c      	itt	cc
 8013ea6:	011b      	lslcc	r3, r3, #4
 8013ea8:	3004      	addcc	r0, #4
 8013eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013eae:	bf3c      	itt	cc
 8013eb0:	009b      	lslcc	r3, r3, #2
 8013eb2:	3002      	addcc	r0, #2
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	db05      	blt.n	8013ec4 <__hi0bits+0x3c>
 8013eb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013ebc:	f100 0001 	add.w	r0, r0, #1
 8013ec0:	bf08      	it	eq
 8013ec2:	2020      	moveq	r0, #32
 8013ec4:	4770      	bx	lr

08013ec6 <__lo0bits>:
 8013ec6:	6803      	ldr	r3, [r0, #0]
 8013ec8:	4602      	mov	r2, r0
 8013eca:	f013 0007 	ands.w	r0, r3, #7
 8013ece:	d00b      	beq.n	8013ee8 <__lo0bits+0x22>
 8013ed0:	07d9      	lsls	r1, r3, #31
 8013ed2:	d421      	bmi.n	8013f18 <__lo0bits+0x52>
 8013ed4:	0798      	lsls	r0, r3, #30
 8013ed6:	bf49      	itett	mi
 8013ed8:	085b      	lsrmi	r3, r3, #1
 8013eda:	089b      	lsrpl	r3, r3, #2
 8013edc:	2001      	movmi	r0, #1
 8013ede:	6013      	strmi	r3, [r2, #0]
 8013ee0:	bf5c      	itt	pl
 8013ee2:	6013      	strpl	r3, [r2, #0]
 8013ee4:	2002      	movpl	r0, #2
 8013ee6:	4770      	bx	lr
 8013ee8:	b299      	uxth	r1, r3
 8013eea:	b909      	cbnz	r1, 8013ef0 <__lo0bits+0x2a>
 8013eec:	0c1b      	lsrs	r3, r3, #16
 8013eee:	2010      	movs	r0, #16
 8013ef0:	b2d9      	uxtb	r1, r3
 8013ef2:	b909      	cbnz	r1, 8013ef8 <__lo0bits+0x32>
 8013ef4:	3008      	adds	r0, #8
 8013ef6:	0a1b      	lsrs	r3, r3, #8
 8013ef8:	0719      	lsls	r1, r3, #28
 8013efa:	bf04      	itt	eq
 8013efc:	091b      	lsreq	r3, r3, #4
 8013efe:	3004      	addeq	r0, #4
 8013f00:	0799      	lsls	r1, r3, #30
 8013f02:	bf04      	itt	eq
 8013f04:	089b      	lsreq	r3, r3, #2
 8013f06:	3002      	addeq	r0, #2
 8013f08:	07d9      	lsls	r1, r3, #31
 8013f0a:	d403      	bmi.n	8013f14 <__lo0bits+0x4e>
 8013f0c:	085b      	lsrs	r3, r3, #1
 8013f0e:	f100 0001 	add.w	r0, r0, #1
 8013f12:	d003      	beq.n	8013f1c <__lo0bits+0x56>
 8013f14:	6013      	str	r3, [r2, #0]
 8013f16:	4770      	bx	lr
 8013f18:	2000      	movs	r0, #0
 8013f1a:	4770      	bx	lr
 8013f1c:	2020      	movs	r0, #32
 8013f1e:	4770      	bx	lr

08013f20 <__i2b>:
 8013f20:	b510      	push	{r4, lr}
 8013f22:	460c      	mov	r4, r1
 8013f24:	2101      	movs	r1, #1
 8013f26:	f7ff ff07 	bl	8013d38 <_Balloc>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	b928      	cbnz	r0, 8013f3a <__i2b+0x1a>
 8013f2e:	4b05      	ldr	r3, [pc, #20]	@ (8013f44 <__i2b+0x24>)
 8013f30:	4805      	ldr	r0, [pc, #20]	@ (8013f48 <__i2b+0x28>)
 8013f32:	f240 1145 	movw	r1, #325	@ 0x145
 8013f36:	f000 fcad 	bl	8014894 <__assert_func>
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	6144      	str	r4, [r0, #20]
 8013f3e:	6103      	str	r3, [r0, #16]
 8013f40:	bd10      	pop	{r4, pc}
 8013f42:	bf00      	nop
 8013f44:	08015b14 	.word	0x08015b14
 8013f48:	08015b25 	.word	0x08015b25

08013f4c <__multiply>:
 8013f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f50:	4614      	mov	r4, r2
 8013f52:	690a      	ldr	r2, [r1, #16]
 8013f54:	6923      	ldr	r3, [r4, #16]
 8013f56:	429a      	cmp	r2, r3
 8013f58:	bfa8      	it	ge
 8013f5a:	4623      	movge	r3, r4
 8013f5c:	460f      	mov	r7, r1
 8013f5e:	bfa4      	itt	ge
 8013f60:	460c      	movge	r4, r1
 8013f62:	461f      	movge	r7, r3
 8013f64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013f68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013f6c:	68a3      	ldr	r3, [r4, #8]
 8013f6e:	6861      	ldr	r1, [r4, #4]
 8013f70:	eb0a 0609 	add.w	r6, sl, r9
 8013f74:	42b3      	cmp	r3, r6
 8013f76:	b085      	sub	sp, #20
 8013f78:	bfb8      	it	lt
 8013f7a:	3101      	addlt	r1, #1
 8013f7c:	f7ff fedc 	bl	8013d38 <_Balloc>
 8013f80:	b930      	cbnz	r0, 8013f90 <__multiply+0x44>
 8013f82:	4602      	mov	r2, r0
 8013f84:	4b44      	ldr	r3, [pc, #272]	@ (8014098 <__multiply+0x14c>)
 8013f86:	4845      	ldr	r0, [pc, #276]	@ (801409c <__multiply+0x150>)
 8013f88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013f8c:	f000 fc82 	bl	8014894 <__assert_func>
 8013f90:	f100 0514 	add.w	r5, r0, #20
 8013f94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013f98:	462b      	mov	r3, r5
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	4543      	cmp	r3, r8
 8013f9e:	d321      	bcc.n	8013fe4 <__multiply+0x98>
 8013fa0:	f107 0114 	add.w	r1, r7, #20
 8013fa4:	f104 0214 	add.w	r2, r4, #20
 8013fa8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013fac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013fb0:	9302      	str	r3, [sp, #8]
 8013fb2:	1b13      	subs	r3, r2, r4
 8013fb4:	3b15      	subs	r3, #21
 8013fb6:	f023 0303 	bic.w	r3, r3, #3
 8013fba:	3304      	adds	r3, #4
 8013fbc:	f104 0715 	add.w	r7, r4, #21
 8013fc0:	42ba      	cmp	r2, r7
 8013fc2:	bf38      	it	cc
 8013fc4:	2304      	movcc	r3, #4
 8013fc6:	9301      	str	r3, [sp, #4]
 8013fc8:	9b02      	ldr	r3, [sp, #8]
 8013fca:	9103      	str	r1, [sp, #12]
 8013fcc:	428b      	cmp	r3, r1
 8013fce:	d80c      	bhi.n	8013fea <__multiply+0x9e>
 8013fd0:	2e00      	cmp	r6, #0
 8013fd2:	dd03      	ble.n	8013fdc <__multiply+0x90>
 8013fd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d05b      	beq.n	8014094 <__multiply+0x148>
 8013fdc:	6106      	str	r6, [r0, #16]
 8013fde:	b005      	add	sp, #20
 8013fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe4:	f843 2b04 	str.w	r2, [r3], #4
 8013fe8:	e7d8      	b.n	8013f9c <__multiply+0x50>
 8013fea:	f8b1 a000 	ldrh.w	sl, [r1]
 8013fee:	f1ba 0f00 	cmp.w	sl, #0
 8013ff2:	d024      	beq.n	801403e <__multiply+0xf2>
 8013ff4:	f104 0e14 	add.w	lr, r4, #20
 8013ff8:	46a9      	mov	r9, r5
 8013ffa:	f04f 0c00 	mov.w	ip, #0
 8013ffe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014002:	f8d9 3000 	ldr.w	r3, [r9]
 8014006:	fa1f fb87 	uxth.w	fp, r7
 801400a:	b29b      	uxth	r3, r3
 801400c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014010:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014014:	f8d9 7000 	ldr.w	r7, [r9]
 8014018:	4463      	add	r3, ip
 801401a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801401e:	fb0a c70b 	mla	r7, sl, fp, ip
 8014022:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014026:	b29b      	uxth	r3, r3
 8014028:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801402c:	4572      	cmp	r2, lr
 801402e:	f849 3b04 	str.w	r3, [r9], #4
 8014032:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014036:	d8e2      	bhi.n	8013ffe <__multiply+0xb2>
 8014038:	9b01      	ldr	r3, [sp, #4]
 801403a:	f845 c003 	str.w	ip, [r5, r3]
 801403e:	9b03      	ldr	r3, [sp, #12]
 8014040:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014044:	3104      	adds	r1, #4
 8014046:	f1b9 0f00 	cmp.w	r9, #0
 801404a:	d021      	beq.n	8014090 <__multiply+0x144>
 801404c:	682b      	ldr	r3, [r5, #0]
 801404e:	f104 0c14 	add.w	ip, r4, #20
 8014052:	46ae      	mov	lr, r5
 8014054:	f04f 0a00 	mov.w	sl, #0
 8014058:	f8bc b000 	ldrh.w	fp, [ip]
 801405c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014060:	fb09 770b 	mla	r7, r9, fp, r7
 8014064:	4457      	add	r7, sl
 8014066:	b29b      	uxth	r3, r3
 8014068:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801406c:	f84e 3b04 	str.w	r3, [lr], #4
 8014070:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014074:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014078:	f8be 3000 	ldrh.w	r3, [lr]
 801407c:	fb09 330a 	mla	r3, r9, sl, r3
 8014080:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014084:	4562      	cmp	r2, ip
 8014086:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801408a:	d8e5      	bhi.n	8014058 <__multiply+0x10c>
 801408c:	9f01      	ldr	r7, [sp, #4]
 801408e:	51eb      	str	r3, [r5, r7]
 8014090:	3504      	adds	r5, #4
 8014092:	e799      	b.n	8013fc8 <__multiply+0x7c>
 8014094:	3e01      	subs	r6, #1
 8014096:	e79b      	b.n	8013fd0 <__multiply+0x84>
 8014098:	08015b14 	.word	0x08015b14
 801409c:	08015b25 	.word	0x08015b25

080140a0 <__pow5mult>:
 80140a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140a4:	4615      	mov	r5, r2
 80140a6:	f012 0203 	ands.w	r2, r2, #3
 80140aa:	4607      	mov	r7, r0
 80140ac:	460e      	mov	r6, r1
 80140ae:	d007      	beq.n	80140c0 <__pow5mult+0x20>
 80140b0:	4c25      	ldr	r4, [pc, #148]	@ (8014148 <__pow5mult+0xa8>)
 80140b2:	3a01      	subs	r2, #1
 80140b4:	2300      	movs	r3, #0
 80140b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80140ba:	f7ff fe9f 	bl	8013dfc <__multadd>
 80140be:	4606      	mov	r6, r0
 80140c0:	10ad      	asrs	r5, r5, #2
 80140c2:	d03d      	beq.n	8014140 <__pow5mult+0xa0>
 80140c4:	69fc      	ldr	r4, [r7, #28]
 80140c6:	b97c      	cbnz	r4, 80140e8 <__pow5mult+0x48>
 80140c8:	2010      	movs	r0, #16
 80140ca:	f7fe f967 	bl	801239c <malloc>
 80140ce:	4602      	mov	r2, r0
 80140d0:	61f8      	str	r0, [r7, #28]
 80140d2:	b928      	cbnz	r0, 80140e0 <__pow5mult+0x40>
 80140d4:	4b1d      	ldr	r3, [pc, #116]	@ (801414c <__pow5mult+0xac>)
 80140d6:	481e      	ldr	r0, [pc, #120]	@ (8014150 <__pow5mult+0xb0>)
 80140d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80140dc:	f000 fbda 	bl	8014894 <__assert_func>
 80140e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80140e4:	6004      	str	r4, [r0, #0]
 80140e6:	60c4      	str	r4, [r0, #12]
 80140e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80140ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80140f0:	b94c      	cbnz	r4, 8014106 <__pow5mult+0x66>
 80140f2:	f240 2171 	movw	r1, #625	@ 0x271
 80140f6:	4638      	mov	r0, r7
 80140f8:	f7ff ff12 	bl	8013f20 <__i2b>
 80140fc:	2300      	movs	r3, #0
 80140fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8014102:	4604      	mov	r4, r0
 8014104:	6003      	str	r3, [r0, #0]
 8014106:	f04f 0900 	mov.w	r9, #0
 801410a:	07eb      	lsls	r3, r5, #31
 801410c:	d50a      	bpl.n	8014124 <__pow5mult+0x84>
 801410e:	4631      	mov	r1, r6
 8014110:	4622      	mov	r2, r4
 8014112:	4638      	mov	r0, r7
 8014114:	f7ff ff1a 	bl	8013f4c <__multiply>
 8014118:	4631      	mov	r1, r6
 801411a:	4680      	mov	r8, r0
 801411c:	4638      	mov	r0, r7
 801411e:	f7ff fe4b 	bl	8013db8 <_Bfree>
 8014122:	4646      	mov	r6, r8
 8014124:	106d      	asrs	r5, r5, #1
 8014126:	d00b      	beq.n	8014140 <__pow5mult+0xa0>
 8014128:	6820      	ldr	r0, [r4, #0]
 801412a:	b938      	cbnz	r0, 801413c <__pow5mult+0x9c>
 801412c:	4622      	mov	r2, r4
 801412e:	4621      	mov	r1, r4
 8014130:	4638      	mov	r0, r7
 8014132:	f7ff ff0b 	bl	8013f4c <__multiply>
 8014136:	6020      	str	r0, [r4, #0]
 8014138:	f8c0 9000 	str.w	r9, [r0]
 801413c:	4604      	mov	r4, r0
 801413e:	e7e4      	b.n	801410a <__pow5mult+0x6a>
 8014140:	4630      	mov	r0, r6
 8014142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014146:	bf00      	nop
 8014148:	08015b80 	.word	0x08015b80
 801414c:	08015aa5 	.word	0x08015aa5
 8014150:	08015b25 	.word	0x08015b25

08014154 <__lshift>:
 8014154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014158:	460c      	mov	r4, r1
 801415a:	6849      	ldr	r1, [r1, #4]
 801415c:	6923      	ldr	r3, [r4, #16]
 801415e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014162:	68a3      	ldr	r3, [r4, #8]
 8014164:	4607      	mov	r7, r0
 8014166:	4691      	mov	r9, r2
 8014168:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801416c:	f108 0601 	add.w	r6, r8, #1
 8014170:	42b3      	cmp	r3, r6
 8014172:	db0b      	blt.n	801418c <__lshift+0x38>
 8014174:	4638      	mov	r0, r7
 8014176:	f7ff fddf 	bl	8013d38 <_Balloc>
 801417a:	4605      	mov	r5, r0
 801417c:	b948      	cbnz	r0, 8014192 <__lshift+0x3e>
 801417e:	4602      	mov	r2, r0
 8014180:	4b28      	ldr	r3, [pc, #160]	@ (8014224 <__lshift+0xd0>)
 8014182:	4829      	ldr	r0, [pc, #164]	@ (8014228 <__lshift+0xd4>)
 8014184:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014188:	f000 fb84 	bl	8014894 <__assert_func>
 801418c:	3101      	adds	r1, #1
 801418e:	005b      	lsls	r3, r3, #1
 8014190:	e7ee      	b.n	8014170 <__lshift+0x1c>
 8014192:	2300      	movs	r3, #0
 8014194:	f100 0114 	add.w	r1, r0, #20
 8014198:	f100 0210 	add.w	r2, r0, #16
 801419c:	4618      	mov	r0, r3
 801419e:	4553      	cmp	r3, sl
 80141a0:	db33      	blt.n	801420a <__lshift+0xb6>
 80141a2:	6920      	ldr	r0, [r4, #16]
 80141a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80141a8:	f104 0314 	add.w	r3, r4, #20
 80141ac:	f019 091f 	ands.w	r9, r9, #31
 80141b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80141b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80141b8:	d02b      	beq.n	8014212 <__lshift+0xbe>
 80141ba:	f1c9 0e20 	rsb	lr, r9, #32
 80141be:	468a      	mov	sl, r1
 80141c0:	2200      	movs	r2, #0
 80141c2:	6818      	ldr	r0, [r3, #0]
 80141c4:	fa00 f009 	lsl.w	r0, r0, r9
 80141c8:	4310      	orrs	r0, r2
 80141ca:	f84a 0b04 	str.w	r0, [sl], #4
 80141ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80141d2:	459c      	cmp	ip, r3
 80141d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80141d8:	d8f3      	bhi.n	80141c2 <__lshift+0x6e>
 80141da:	ebac 0304 	sub.w	r3, ip, r4
 80141de:	3b15      	subs	r3, #21
 80141e0:	f023 0303 	bic.w	r3, r3, #3
 80141e4:	3304      	adds	r3, #4
 80141e6:	f104 0015 	add.w	r0, r4, #21
 80141ea:	4584      	cmp	ip, r0
 80141ec:	bf38      	it	cc
 80141ee:	2304      	movcc	r3, #4
 80141f0:	50ca      	str	r2, [r1, r3]
 80141f2:	b10a      	cbz	r2, 80141f8 <__lshift+0xa4>
 80141f4:	f108 0602 	add.w	r6, r8, #2
 80141f8:	3e01      	subs	r6, #1
 80141fa:	4638      	mov	r0, r7
 80141fc:	612e      	str	r6, [r5, #16]
 80141fe:	4621      	mov	r1, r4
 8014200:	f7ff fdda 	bl	8013db8 <_Bfree>
 8014204:	4628      	mov	r0, r5
 8014206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801420a:	f842 0f04 	str.w	r0, [r2, #4]!
 801420e:	3301      	adds	r3, #1
 8014210:	e7c5      	b.n	801419e <__lshift+0x4a>
 8014212:	3904      	subs	r1, #4
 8014214:	f853 2b04 	ldr.w	r2, [r3], #4
 8014218:	f841 2f04 	str.w	r2, [r1, #4]!
 801421c:	459c      	cmp	ip, r3
 801421e:	d8f9      	bhi.n	8014214 <__lshift+0xc0>
 8014220:	e7ea      	b.n	80141f8 <__lshift+0xa4>
 8014222:	bf00      	nop
 8014224:	08015b14 	.word	0x08015b14
 8014228:	08015b25 	.word	0x08015b25

0801422c <__mcmp>:
 801422c:	690a      	ldr	r2, [r1, #16]
 801422e:	4603      	mov	r3, r0
 8014230:	6900      	ldr	r0, [r0, #16]
 8014232:	1a80      	subs	r0, r0, r2
 8014234:	b530      	push	{r4, r5, lr}
 8014236:	d10e      	bne.n	8014256 <__mcmp+0x2a>
 8014238:	3314      	adds	r3, #20
 801423a:	3114      	adds	r1, #20
 801423c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014240:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014244:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014248:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801424c:	4295      	cmp	r5, r2
 801424e:	d003      	beq.n	8014258 <__mcmp+0x2c>
 8014250:	d205      	bcs.n	801425e <__mcmp+0x32>
 8014252:	f04f 30ff 	mov.w	r0, #4294967295
 8014256:	bd30      	pop	{r4, r5, pc}
 8014258:	42a3      	cmp	r3, r4
 801425a:	d3f3      	bcc.n	8014244 <__mcmp+0x18>
 801425c:	e7fb      	b.n	8014256 <__mcmp+0x2a>
 801425e:	2001      	movs	r0, #1
 8014260:	e7f9      	b.n	8014256 <__mcmp+0x2a>
	...

08014264 <__mdiff>:
 8014264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014268:	4689      	mov	r9, r1
 801426a:	4606      	mov	r6, r0
 801426c:	4611      	mov	r1, r2
 801426e:	4648      	mov	r0, r9
 8014270:	4614      	mov	r4, r2
 8014272:	f7ff ffdb 	bl	801422c <__mcmp>
 8014276:	1e05      	subs	r5, r0, #0
 8014278:	d112      	bne.n	80142a0 <__mdiff+0x3c>
 801427a:	4629      	mov	r1, r5
 801427c:	4630      	mov	r0, r6
 801427e:	f7ff fd5b 	bl	8013d38 <_Balloc>
 8014282:	4602      	mov	r2, r0
 8014284:	b928      	cbnz	r0, 8014292 <__mdiff+0x2e>
 8014286:	4b3f      	ldr	r3, [pc, #252]	@ (8014384 <__mdiff+0x120>)
 8014288:	f240 2137 	movw	r1, #567	@ 0x237
 801428c:	483e      	ldr	r0, [pc, #248]	@ (8014388 <__mdiff+0x124>)
 801428e:	f000 fb01 	bl	8014894 <__assert_func>
 8014292:	2301      	movs	r3, #1
 8014294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014298:	4610      	mov	r0, r2
 801429a:	b003      	add	sp, #12
 801429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a0:	bfbc      	itt	lt
 80142a2:	464b      	movlt	r3, r9
 80142a4:	46a1      	movlt	r9, r4
 80142a6:	4630      	mov	r0, r6
 80142a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80142ac:	bfba      	itte	lt
 80142ae:	461c      	movlt	r4, r3
 80142b0:	2501      	movlt	r5, #1
 80142b2:	2500      	movge	r5, #0
 80142b4:	f7ff fd40 	bl	8013d38 <_Balloc>
 80142b8:	4602      	mov	r2, r0
 80142ba:	b918      	cbnz	r0, 80142c4 <__mdiff+0x60>
 80142bc:	4b31      	ldr	r3, [pc, #196]	@ (8014384 <__mdiff+0x120>)
 80142be:	f240 2145 	movw	r1, #581	@ 0x245
 80142c2:	e7e3      	b.n	801428c <__mdiff+0x28>
 80142c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80142c8:	6926      	ldr	r6, [r4, #16]
 80142ca:	60c5      	str	r5, [r0, #12]
 80142cc:	f109 0310 	add.w	r3, r9, #16
 80142d0:	f109 0514 	add.w	r5, r9, #20
 80142d4:	f104 0e14 	add.w	lr, r4, #20
 80142d8:	f100 0b14 	add.w	fp, r0, #20
 80142dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80142e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80142e4:	9301      	str	r3, [sp, #4]
 80142e6:	46d9      	mov	r9, fp
 80142e8:	f04f 0c00 	mov.w	ip, #0
 80142ec:	9b01      	ldr	r3, [sp, #4]
 80142ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80142f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80142f6:	9301      	str	r3, [sp, #4]
 80142f8:	fa1f f38a 	uxth.w	r3, sl
 80142fc:	4619      	mov	r1, r3
 80142fe:	b283      	uxth	r3, r0
 8014300:	1acb      	subs	r3, r1, r3
 8014302:	0c00      	lsrs	r0, r0, #16
 8014304:	4463      	add	r3, ip
 8014306:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801430a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801430e:	b29b      	uxth	r3, r3
 8014310:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014314:	4576      	cmp	r6, lr
 8014316:	f849 3b04 	str.w	r3, [r9], #4
 801431a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801431e:	d8e5      	bhi.n	80142ec <__mdiff+0x88>
 8014320:	1b33      	subs	r3, r6, r4
 8014322:	3b15      	subs	r3, #21
 8014324:	f023 0303 	bic.w	r3, r3, #3
 8014328:	3415      	adds	r4, #21
 801432a:	3304      	adds	r3, #4
 801432c:	42a6      	cmp	r6, r4
 801432e:	bf38      	it	cc
 8014330:	2304      	movcc	r3, #4
 8014332:	441d      	add	r5, r3
 8014334:	445b      	add	r3, fp
 8014336:	461e      	mov	r6, r3
 8014338:	462c      	mov	r4, r5
 801433a:	4544      	cmp	r4, r8
 801433c:	d30e      	bcc.n	801435c <__mdiff+0xf8>
 801433e:	f108 0103 	add.w	r1, r8, #3
 8014342:	1b49      	subs	r1, r1, r5
 8014344:	f021 0103 	bic.w	r1, r1, #3
 8014348:	3d03      	subs	r5, #3
 801434a:	45a8      	cmp	r8, r5
 801434c:	bf38      	it	cc
 801434e:	2100      	movcc	r1, #0
 8014350:	440b      	add	r3, r1
 8014352:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014356:	b191      	cbz	r1, 801437e <__mdiff+0x11a>
 8014358:	6117      	str	r7, [r2, #16]
 801435a:	e79d      	b.n	8014298 <__mdiff+0x34>
 801435c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014360:	46e6      	mov	lr, ip
 8014362:	0c08      	lsrs	r0, r1, #16
 8014364:	fa1c fc81 	uxtah	ip, ip, r1
 8014368:	4471      	add	r1, lr
 801436a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801436e:	b289      	uxth	r1, r1
 8014370:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014374:	f846 1b04 	str.w	r1, [r6], #4
 8014378:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801437c:	e7dd      	b.n	801433a <__mdiff+0xd6>
 801437e:	3f01      	subs	r7, #1
 8014380:	e7e7      	b.n	8014352 <__mdiff+0xee>
 8014382:	bf00      	nop
 8014384:	08015b14 	.word	0x08015b14
 8014388:	08015b25 	.word	0x08015b25

0801438c <__d2b>:
 801438c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014390:	460f      	mov	r7, r1
 8014392:	2101      	movs	r1, #1
 8014394:	ec59 8b10 	vmov	r8, r9, d0
 8014398:	4616      	mov	r6, r2
 801439a:	f7ff fccd 	bl	8013d38 <_Balloc>
 801439e:	4604      	mov	r4, r0
 80143a0:	b930      	cbnz	r0, 80143b0 <__d2b+0x24>
 80143a2:	4602      	mov	r2, r0
 80143a4:	4b23      	ldr	r3, [pc, #140]	@ (8014434 <__d2b+0xa8>)
 80143a6:	4824      	ldr	r0, [pc, #144]	@ (8014438 <__d2b+0xac>)
 80143a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80143ac:	f000 fa72 	bl	8014894 <__assert_func>
 80143b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80143b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80143b8:	b10d      	cbz	r5, 80143be <__d2b+0x32>
 80143ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80143be:	9301      	str	r3, [sp, #4]
 80143c0:	f1b8 0300 	subs.w	r3, r8, #0
 80143c4:	d023      	beq.n	801440e <__d2b+0x82>
 80143c6:	4668      	mov	r0, sp
 80143c8:	9300      	str	r3, [sp, #0]
 80143ca:	f7ff fd7c 	bl	8013ec6 <__lo0bits>
 80143ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80143d2:	b1d0      	cbz	r0, 801440a <__d2b+0x7e>
 80143d4:	f1c0 0320 	rsb	r3, r0, #32
 80143d8:	fa02 f303 	lsl.w	r3, r2, r3
 80143dc:	430b      	orrs	r3, r1
 80143de:	40c2      	lsrs	r2, r0
 80143e0:	6163      	str	r3, [r4, #20]
 80143e2:	9201      	str	r2, [sp, #4]
 80143e4:	9b01      	ldr	r3, [sp, #4]
 80143e6:	61a3      	str	r3, [r4, #24]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	bf0c      	ite	eq
 80143ec:	2201      	moveq	r2, #1
 80143ee:	2202      	movne	r2, #2
 80143f0:	6122      	str	r2, [r4, #16]
 80143f2:	b1a5      	cbz	r5, 801441e <__d2b+0x92>
 80143f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80143f8:	4405      	add	r5, r0
 80143fa:	603d      	str	r5, [r7, #0]
 80143fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014400:	6030      	str	r0, [r6, #0]
 8014402:	4620      	mov	r0, r4
 8014404:	b003      	add	sp, #12
 8014406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801440a:	6161      	str	r1, [r4, #20]
 801440c:	e7ea      	b.n	80143e4 <__d2b+0x58>
 801440e:	a801      	add	r0, sp, #4
 8014410:	f7ff fd59 	bl	8013ec6 <__lo0bits>
 8014414:	9b01      	ldr	r3, [sp, #4]
 8014416:	6163      	str	r3, [r4, #20]
 8014418:	3020      	adds	r0, #32
 801441a:	2201      	movs	r2, #1
 801441c:	e7e8      	b.n	80143f0 <__d2b+0x64>
 801441e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014422:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014426:	6038      	str	r0, [r7, #0]
 8014428:	6918      	ldr	r0, [r3, #16]
 801442a:	f7ff fd2d 	bl	8013e88 <__hi0bits>
 801442e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014432:	e7e5      	b.n	8014400 <__d2b+0x74>
 8014434:	08015b14 	.word	0x08015b14
 8014438:	08015b25 	.word	0x08015b25

0801443c <__ssputs_r>:
 801443c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014440:	688e      	ldr	r6, [r1, #8]
 8014442:	461f      	mov	r7, r3
 8014444:	42be      	cmp	r6, r7
 8014446:	680b      	ldr	r3, [r1, #0]
 8014448:	4682      	mov	sl, r0
 801444a:	460c      	mov	r4, r1
 801444c:	4690      	mov	r8, r2
 801444e:	d82d      	bhi.n	80144ac <__ssputs_r+0x70>
 8014450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014454:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014458:	d026      	beq.n	80144a8 <__ssputs_r+0x6c>
 801445a:	6965      	ldr	r5, [r4, #20]
 801445c:	6909      	ldr	r1, [r1, #16]
 801445e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014462:	eba3 0901 	sub.w	r9, r3, r1
 8014466:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801446a:	1c7b      	adds	r3, r7, #1
 801446c:	444b      	add	r3, r9
 801446e:	106d      	asrs	r5, r5, #1
 8014470:	429d      	cmp	r5, r3
 8014472:	bf38      	it	cc
 8014474:	461d      	movcc	r5, r3
 8014476:	0553      	lsls	r3, r2, #21
 8014478:	d527      	bpl.n	80144ca <__ssputs_r+0x8e>
 801447a:	4629      	mov	r1, r5
 801447c:	f7fd ffb8 	bl	80123f0 <_malloc_r>
 8014480:	4606      	mov	r6, r0
 8014482:	b360      	cbz	r0, 80144de <__ssputs_r+0xa2>
 8014484:	6921      	ldr	r1, [r4, #16]
 8014486:	464a      	mov	r2, r9
 8014488:	f000 f9f6 	bl	8014878 <memcpy>
 801448c:	89a3      	ldrh	r3, [r4, #12]
 801448e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014496:	81a3      	strh	r3, [r4, #12]
 8014498:	6126      	str	r6, [r4, #16]
 801449a:	6165      	str	r5, [r4, #20]
 801449c:	444e      	add	r6, r9
 801449e:	eba5 0509 	sub.w	r5, r5, r9
 80144a2:	6026      	str	r6, [r4, #0]
 80144a4:	60a5      	str	r5, [r4, #8]
 80144a6:	463e      	mov	r6, r7
 80144a8:	42be      	cmp	r6, r7
 80144aa:	d900      	bls.n	80144ae <__ssputs_r+0x72>
 80144ac:	463e      	mov	r6, r7
 80144ae:	6820      	ldr	r0, [r4, #0]
 80144b0:	4632      	mov	r2, r6
 80144b2:	4641      	mov	r1, r8
 80144b4:	f000 f9c6 	bl	8014844 <memmove>
 80144b8:	68a3      	ldr	r3, [r4, #8]
 80144ba:	1b9b      	subs	r3, r3, r6
 80144bc:	60a3      	str	r3, [r4, #8]
 80144be:	6823      	ldr	r3, [r4, #0]
 80144c0:	4433      	add	r3, r6
 80144c2:	6023      	str	r3, [r4, #0]
 80144c4:	2000      	movs	r0, #0
 80144c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144ca:	462a      	mov	r2, r5
 80144cc:	f000 fa26 	bl	801491c <_realloc_r>
 80144d0:	4606      	mov	r6, r0
 80144d2:	2800      	cmp	r0, #0
 80144d4:	d1e0      	bne.n	8014498 <__ssputs_r+0x5c>
 80144d6:	6921      	ldr	r1, [r4, #16]
 80144d8:	4650      	mov	r0, sl
 80144da:	f7ff fbe3 	bl	8013ca4 <_free_r>
 80144de:	230c      	movs	r3, #12
 80144e0:	f8ca 3000 	str.w	r3, [sl]
 80144e4:	89a3      	ldrh	r3, [r4, #12]
 80144e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144ea:	81a3      	strh	r3, [r4, #12]
 80144ec:	f04f 30ff 	mov.w	r0, #4294967295
 80144f0:	e7e9      	b.n	80144c6 <__ssputs_r+0x8a>
	...

080144f4 <_svfiprintf_r>:
 80144f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144f8:	4698      	mov	r8, r3
 80144fa:	898b      	ldrh	r3, [r1, #12]
 80144fc:	061b      	lsls	r3, r3, #24
 80144fe:	b09d      	sub	sp, #116	@ 0x74
 8014500:	4607      	mov	r7, r0
 8014502:	460d      	mov	r5, r1
 8014504:	4614      	mov	r4, r2
 8014506:	d510      	bpl.n	801452a <_svfiprintf_r+0x36>
 8014508:	690b      	ldr	r3, [r1, #16]
 801450a:	b973      	cbnz	r3, 801452a <_svfiprintf_r+0x36>
 801450c:	2140      	movs	r1, #64	@ 0x40
 801450e:	f7fd ff6f 	bl	80123f0 <_malloc_r>
 8014512:	6028      	str	r0, [r5, #0]
 8014514:	6128      	str	r0, [r5, #16]
 8014516:	b930      	cbnz	r0, 8014526 <_svfiprintf_r+0x32>
 8014518:	230c      	movs	r3, #12
 801451a:	603b      	str	r3, [r7, #0]
 801451c:	f04f 30ff 	mov.w	r0, #4294967295
 8014520:	b01d      	add	sp, #116	@ 0x74
 8014522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014526:	2340      	movs	r3, #64	@ 0x40
 8014528:	616b      	str	r3, [r5, #20]
 801452a:	2300      	movs	r3, #0
 801452c:	9309      	str	r3, [sp, #36]	@ 0x24
 801452e:	2320      	movs	r3, #32
 8014530:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014534:	f8cd 800c 	str.w	r8, [sp, #12]
 8014538:	2330      	movs	r3, #48	@ 0x30
 801453a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80146d8 <_svfiprintf_r+0x1e4>
 801453e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014542:	f04f 0901 	mov.w	r9, #1
 8014546:	4623      	mov	r3, r4
 8014548:	469a      	mov	sl, r3
 801454a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801454e:	b10a      	cbz	r2, 8014554 <_svfiprintf_r+0x60>
 8014550:	2a25      	cmp	r2, #37	@ 0x25
 8014552:	d1f9      	bne.n	8014548 <_svfiprintf_r+0x54>
 8014554:	ebba 0b04 	subs.w	fp, sl, r4
 8014558:	d00b      	beq.n	8014572 <_svfiprintf_r+0x7e>
 801455a:	465b      	mov	r3, fp
 801455c:	4622      	mov	r2, r4
 801455e:	4629      	mov	r1, r5
 8014560:	4638      	mov	r0, r7
 8014562:	f7ff ff6b 	bl	801443c <__ssputs_r>
 8014566:	3001      	adds	r0, #1
 8014568:	f000 80a7 	beq.w	80146ba <_svfiprintf_r+0x1c6>
 801456c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801456e:	445a      	add	r2, fp
 8014570:	9209      	str	r2, [sp, #36]	@ 0x24
 8014572:	f89a 3000 	ldrb.w	r3, [sl]
 8014576:	2b00      	cmp	r3, #0
 8014578:	f000 809f 	beq.w	80146ba <_svfiprintf_r+0x1c6>
 801457c:	2300      	movs	r3, #0
 801457e:	f04f 32ff 	mov.w	r2, #4294967295
 8014582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014586:	f10a 0a01 	add.w	sl, sl, #1
 801458a:	9304      	str	r3, [sp, #16]
 801458c:	9307      	str	r3, [sp, #28]
 801458e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014592:	931a      	str	r3, [sp, #104]	@ 0x68
 8014594:	4654      	mov	r4, sl
 8014596:	2205      	movs	r2, #5
 8014598:	f814 1b01 	ldrb.w	r1, [r4], #1
 801459c:	484e      	ldr	r0, [pc, #312]	@ (80146d8 <_svfiprintf_r+0x1e4>)
 801459e:	f7eb fe9f 	bl	80002e0 <memchr>
 80145a2:	9a04      	ldr	r2, [sp, #16]
 80145a4:	b9d8      	cbnz	r0, 80145de <_svfiprintf_r+0xea>
 80145a6:	06d0      	lsls	r0, r2, #27
 80145a8:	bf44      	itt	mi
 80145aa:	2320      	movmi	r3, #32
 80145ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145b0:	0711      	lsls	r1, r2, #28
 80145b2:	bf44      	itt	mi
 80145b4:	232b      	movmi	r3, #43	@ 0x2b
 80145b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145ba:	f89a 3000 	ldrb.w	r3, [sl]
 80145be:	2b2a      	cmp	r3, #42	@ 0x2a
 80145c0:	d015      	beq.n	80145ee <_svfiprintf_r+0xfa>
 80145c2:	9a07      	ldr	r2, [sp, #28]
 80145c4:	4654      	mov	r4, sl
 80145c6:	2000      	movs	r0, #0
 80145c8:	f04f 0c0a 	mov.w	ip, #10
 80145cc:	4621      	mov	r1, r4
 80145ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145d2:	3b30      	subs	r3, #48	@ 0x30
 80145d4:	2b09      	cmp	r3, #9
 80145d6:	d94b      	bls.n	8014670 <_svfiprintf_r+0x17c>
 80145d8:	b1b0      	cbz	r0, 8014608 <_svfiprintf_r+0x114>
 80145da:	9207      	str	r2, [sp, #28]
 80145dc:	e014      	b.n	8014608 <_svfiprintf_r+0x114>
 80145de:	eba0 0308 	sub.w	r3, r0, r8
 80145e2:	fa09 f303 	lsl.w	r3, r9, r3
 80145e6:	4313      	orrs	r3, r2
 80145e8:	9304      	str	r3, [sp, #16]
 80145ea:	46a2      	mov	sl, r4
 80145ec:	e7d2      	b.n	8014594 <_svfiprintf_r+0xa0>
 80145ee:	9b03      	ldr	r3, [sp, #12]
 80145f0:	1d19      	adds	r1, r3, #4
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	9103      	str	r1, [sp, #12]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	bfbb      	ittet	lt
 80145fa:	425b      	neglt	r3, r3
 80145fc:	f042 0202 	orrlt.w	r2, r2, #2
 8014600:	9307      	strge	r3, [sp, #28]
 8014602:	9307      	strlt	r3, [sp, #28]
 8014604:	bfb8      	it	lt
 8014606:	9204      	strlt	r2, [sp, #16]
 8014608:	7823      	ldrb	r3, [r4, #0]
 801460a:	2b2e      	cmp	r3, #46	@ 0x2e
 801460c:	d10a      	bne.n	8014624 <_svfiprintf_r+0x130>
 801460e:	7863      	ldrb	r3, [r4, #1]
 8014610:	2b2a      	cmp	r3, #42	@ 0x2a
 8014612:	d132      	bne.n	801467a <_svfiprintf_r+0x186>
 8014614:	9b03      	ldr	r3, [sp, #12]
 8014616:	1d1a      	adds	r2, r3, #4
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	9203      	str	r2, [sp, #12]
 801461c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014620:	3402      	adds	r4, #2
 8014622:	9305      	str	r3, [sp, #20]
 8014624:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80146e8 <_svfiprintf_r+0x1f4>
 8014628:	7821      	ldrb	r1, [r4, #0]
 801462a:	2203      	movs	r2, #3
 801462c:	4650      	mov	r0, sl
 801462e:	f7eb fe57 	bl	80002e0 <memchr>
 8014632:	b138      	cbz	r0, 8014644 <_svfiprintf_r+0x150>
 8014634:	9b04      	ldr	r3, [sp, #16]
 8014636:	eba0 000a 	sub.w	r0, r0, sl
 801463a:	2240      	movs	r2, #64	@ 0x40
 801463c:	4082      	lsls	r2, r0
 801463e:	4313      	orrs	r3, r2
 8014640:	3401      	adds	r4, #1
 8014642:	9304      	str	r3, [sp, #16]
 8014644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014648:	4824      	ldr	r0, [pc, #144]	@ (80146dc <_svfiprintf_r+0x1e8>)
 801464a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801464e:	2206      	movs	r2, #6
 8014650:	f7eb fe46 	bl	80002e0 <memchr>
 8014654:	2800      	cmp	r0, #0
 8014656:	d036      	beq.n	80146c6 <_svfiprintf_r+0x1d2>
 8014658:	4b21      	ldr	r3, [pc, #132]	@ (80146e0 <_svfiprintf_r+0x1ec>)
 801465a:	bb1b      	cbnz	r3, 80146a4 <_svfiprintf_r+0x1b0>
 801465c:	9b03      	ldr	r3, [sp, #12]
 801465e:	3307      	adds	r3, #7
 8014660:	f023 0307 	bic.w	r3, r3, #7
 8014664:	3308      	adds	r3, #8
 8014666:	9303      	str	r3, [sp, #12]
 8014668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801466a:	4433      	add	r3, r6
 801466c:	9309      	str	r3, [sp, #36]	@ 0x24
 801466e:	e76a      	b.n	8014546 <_svfiprintf_r+0x52>
 8014670:	fb0c 3202 	mla	r2, ip, r2, r3
 8014674:	460c      	mov	r4, r1
 8014676:	2001      	movs	r0, #1
 8014678:	e7a8      	b.n	80145cc <_svfiprintf_r+0xd8>
 801467a:	2300      	movs	r3, #0
 801467c:	3401      	adds	r4, #1
 801467e:	9305      	str	r3, [sp, #20]
 8014680:	4619      	mov	r1, r3
 8014682:	f04f 0c0a 	mov.w	ip, #10
 8014686:	4620      	mov	r0, r4
 8014688:	f810 2b01 	ldrb.w	r2, [r0], #1
 801468c:	3a30      	subs	r2, #48	@ 0x30
 801468e:	2a09      	cmp	r2, #9
 8014690:	d903      	bls.n	801469a <_svfiprintf_r+0x1a6>
 8014692:	2b00      	cmp	r3, #0
 8014694:	d0c6      	beq.n	8014624 <_svfiprintf_r+0x130>
 8014696:	9105      	str	r1, [sp, #20]
 8014698:	e7c4      	b.n	8014624 <_svfiprintf_r+0x130>
 801469a:	fb0c 2101 	mla	r1, ip, r1, r2
 801469e:	4604      	mov	r4, r0
 80146a0:	2301      	movs	r3, #1
 80146a2:	e7f0      	b.n	8014686 <_svfiprintf_r+0x192>
 80146a4:	ab03      	add	r3, sp, #12
 80146a6:	9300      	str	r3, [sp, #0]
 80146a8:	462a      	mov	r2, r5
 80146aa:	4b0e      	ldr	r3, [pc, #56]	@ (80146e4 <_svfiprintf_r+0x1f0>)
 80146ac:	a904      	add	r1, sp, #16
 80146ae:	4638      	mov	r0, r7
 80146b0:	f7fd ffba 	bl	8012628 <_printf_float>
 80146b4:	1c42      	adds	r2, r0, #1
 80146b6:	4606      	mov	r6, r0
 80146b8:	d1d6      	bne.n	8014668 <_svfiprintf_r+0x174>
 80146ba:	89ab      	ldrh	r3, [r5, #12]
 80146bc:	065b      	lsls	r3, r3, #25
 80146be:	f53f af2d 	bmi.w	801451c <_svfiprintf_r+0x28>
 80146c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80146c4:	e72c      	b.n	8014520 <_svfiprintf_r+0x2c>
 80146c6:	ab03      	add	r3, sp, #12
 80146c8:	9300      	str	r3, [sp, #0]
 80146ca:	462a      	mov	r2, r5
 80146cc:	4b05      	ldr	r3, [pc, #20]	@ (80146e4 <_svfiprintf_r+0x1f0>)
 80146ce:	a904      	add	r1, sp, #16
 80146d0:	4638      	mov	r0, r7
 80146d2:	f7fe fa31 	bl	8012b38 <_printf_i>
 80146d6:	e7ed      	b.n	80146b4 <_svfiprintf_r+0x1c0>
 80146d8:	08015c80 	.word	0x08015c80
 80146dc:	08015c8a 	.word	0x08015c8a
 80146e0:	08012629 	.word	0x08012629
 80146e4:	0801443d 	.word	0x0801443d
 80146e8:	08015c86 	.word	0x08015c86

080146ec <__sflush_r>:
 80146ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80146f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146f4:	0716      	lsls	r6, r2, #28
 80146f6:	4605      	mov	r5, r0
 80146f8:	460c      	mov	r4, r1
 80146fa:	d454      	bmi.n	80147a6 <__sflush_r+0xba>
 80146fc:	684b      	ldr	r3, [r1, #4]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	dc02      	bgt.n	8014708 <__sflush_r+0x1c>
 8014702:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014704:	2b00      	cmp	r3, #0
 8014706:	dd48      	ble.n	801479a <__sflush_r+0xae>
 8014708:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801470a:	2e00      	cmp	r6, #0
 801470c:	d045      	beq.n	801479a <__sflush_r+0xae>
 801470e:	2300      	movs	r3, #0
 8014710:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014714:	682f      	ldr	r7, [r5, #0]
 8014716:	6a21      	ldr	r1, [r4, #32]
 8014718:	602b      	str	r3, [r5, #0]
 801471a:	d030      	beq.n	801477e <__sflush_r+0x92>
 801471c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801471e:	89a3      	ldrh	r3, [r4, #12]
 8014720:	0759      	lsls	r1, r3, #29
 8014722:	d505      	bpl.n	8014730 <__sflush_r+0x44>
 8014724:	6863      	ldr	r3, [r4, #4]
 8014726:	1ad2      	subs	r2, r2, r3
 8014728:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801472a:	b10b      	cbz	r3, 8014730 <__sflush_r+0x44>
 801472c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801472e:	1ad2      	subs	r2, r2, r3
 8014730:	2300      	movs	r3, #0
 8014732:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014734:	6a21      	ldr	r1, [r4, #32]
 8014736:	4628      	mov	r0, r5
 8014738:	47b0      	blx	r6
 801473a:	1c43      	adds	r3, r0, #1
 801473c:	89a3      	ldrh	r3, [r4, #12]
 801473e:	d106      	bne.n	801474e <__sflush_r+0x62>
 8014740:	6829      	ldr	r1, [r5, #0]
 8014742:	291d      	cmp	r1, #29
 8014744:	d82b      	bhi.n	801479e <__sflush_r+0xb2>
 8014746:	4a2a      	ldr	r2, [pc, #168]	@ (80147f0 <__sflush_r+0x104>)
 8014748:	410a      	asrs	r2, r1
 801474a:	07d6      	lsls	r6, r2, #31
 801474c:	d427      	bmi.n	801479e <__sflush_r+0xb2>
 801474e:	2200      	movs	r2, #0
 8014750:	6062      	str	r2, [r4, #4]
 8014752:	04d9      	lsls	r1, r3, #19
 8014754:	6922      	ldr	r2, [r4, #16]
 8014756:	6022      	str	r2, [r4, #0]
 8014758:	d504      	bpl.n	8014764 <__sflush_r+0x78>
 801475a:	1c42      	adds	r2, r0, #1
 801475c:	d101      	bne.n	8014762 <__sflush_r+0x76>
 801475e:	682b      	ldr	r3, [r5, #0]
 8014760:	b903      	cbnz	r3, 8014764 <__sflush_r+0x78>
 8014762:	6560      	str	r0, [r4, #84]	@ 0x54
 8014764:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014766:	602f      	str	r7, [r5, #0]
 8014768:	b1b9      	cbz	r1, 801479a <__sflush_r+0xae>
 801476a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801476e:	4299      	cmp	r1, r3
 8014770:	d002      	beq.n	8014778 <__sflush_r+0x8c>
 8014772:	4628      	mov	r0, r5
 8014774:	f7ff fa96 	bl	8013ca4 <_free_r>
 8014778:	2300      	movs	r3, #0
 801477a:	6363      	str	r3, [r4, #52]	@ 0x34
 801477c:	e00d      	b.n	801479a <__sflush_r+0xae>
 801477e:	2301      	movs	r3, #1
 8014780:	4628      	mov	r0, r5
 8014782:	47b0      	blx	r6
 8014784:	4602      	mov	r2, r0
 8014786:	1c50      	adds	r0, r2, #1
 8014788:	d1c9      	bne.n	801471e <__sflush_r+0x32>
 801478a:	682b      	ldr	r3, [r5, #0]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d0c6      	beq.n	801471e <__sflush_r+0x32>
 8014790:	2b1d      	cmp	r3, #29
 8014792:	d001      	beq.n	8014798 <__sflush_r+0xac>
 8014794:	2b16      	cmp	r3, #22
 8014796:	d11e      	bne.n	80147d6 <__sflush_r+0xea>
 8014798:	602f      	str	r7, [r5, #0]
 801479a:	2000      	movs	r0, #0
 801479c:	e022      	b.n	80147e4 <__sflush_r+0xf8>
 801479e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147a2:	b21b      	sxth	r3, r3
 80147a4:	e01b      	b.n	80147de <__sflush_r+0xf2>
 80147a6:	690f      	ldr	r7, [r1, #16]
 80147a8:	2f00      	cmp	r7, #0
 80147aa:	d0f6      	beq.n	801479a <__sflush_r+0xae>
 80147ac:	0793      	lsls	r3, r2, #30
 80147ae:	680e      	ldr	r6, [r1, #0]
 80147b0:	bf08      	it	eq
 80147b2:	694b      	ldreq	r3, [r1, #20]
 80147b4:	600f      	str	r7, [r1, #0]
 80147b6:	bf18      	it	ne
 80147b8:	2300      	movne	r3, #0
 80147ba:	eba6 0807 	sub.w	r8, r6, r7
 80147be:	608b      	str	r3, [r1, #8]
 80147c0:	f1b8 0f00 	cmp.w	r8, #0
 80147c4:	dde9      	ble.n	801479a <__sflush_r+0xae>
 80147c6:	6a21      	ldr	r1, [r4, #32]
 80147c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80147ca:	4643      	mov	r3, r8
 80147cc:	463a      	mov	r2, r7
 80147ce:	4628      	mov	r0, r5
 80147d0:	47b0      	blx	r6
 80147d2:	2800      	cmp	r0, #0
 80147d4:	dc08      	bgt.n	80147e8 <__sflush_r+0xfc>
 80147d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147de:	81a3      	strh	r3, [r4, #12]
 80147e0:	f04f 30ff 	mov.w	r0, #4294967295
 80147e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147e8:	4407      	add	r7, r0
 80147ea:	eba8 0800 	sub.w	r8, r8, r0
 80147ee:	e7e7      	b.n	80147c0 <__sflush_r+0xd4>
 80147f0:	dfbffffe 	.word	0xdfbffffe

080147f4 <_fflush_r>:
 80147f4:	b538      	push	{r3, r4, r5, lr}
 80147f6:	690b      	ldr	r3, [r1, #16]
 80147f8:	4605      	mov	r5, r0
 80147fa:	460c      	mov	r4, r1
 80147fc:	b913      	cbnz	r3, 8014804 <_fflush_r+0x10>
 80147fe:	2500      	movs	r5, #0
 8014800:	4628      	mov	r0, r5
 8014802:	bd38      	pop	{r3, r4, r5, pc}
 8014804:	b118      	cbz	r0, 801480e <_fflush_r+0x1a>
 8014806:	6a03      	ldr	r3, [r0, #32]
 8014808:	b90b      	cbnz	r3, 801480e <_fflush_r+0x1a>
 801480a:	f7fe fb41 	bl	8012e90 <__sinit>
 801480e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d0f3      	beq.n	80147fe <_fflush_r+0xa>
 8014816:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014818:	07d0      	lsls	r0, r2, #31
 801481a:	d404      	bmi.n	8014826 <_fflush_r+0x32>
 801481c:	0599      	lsls	r1, r3, #22
 801481e:	d402      	bmi.n	8014826 <_fflush_r+0x32>
 8014820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014822:	f7fe fc5c 	bl	80130de <__retarget_lock_acquire_recursive>
 8014826:	4628      	mov	r0, r5
 8014828:	4621      	mov	r1, r4
 801482a:	f7ff ff5f 	bl	80146ec <__sflush_r>
 801482e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014830:	07da      	lsls	r2, r3, #31
 8014832:	4605      	mov	r5, r0
 8014834:	d4e4      	bmi.n	8014800 <_fflush_r+0xc>
 8014836:	89a3      	ldrh	r3, [r4, #12]
 8014838:	059b      	lsls	r3, r3, #22
 801483a:	d4e1      	bmi.n	8014800 <_fflush_r+0xc>
 801483c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801483e:	f7fe fc4f 	bl	80130e0 <__retarget_lock_release_recursive>
 8014842:	e7dd      	b.n	8014800 <_fflush_r+0xc>

08014844 <memmove>:
 8014844:	4288      	cmp	r0, r1
 8014846:	b510      	push	{r4, lr}
 8014848:	eb01 0402 	add.w	r4, r1, r2
 801484c:	d902      	bls.n	8014854 <memmove+0x10>
 801484e:	4284      	cmp	r4, r0
 8014850:	4623      	mov	r3, r4
 8014852:	d807      	bhi.n	8014864 <memmove+0x20>
 8014854:	1e43      	subs	r3, r0, #1
 8014856:	42a1      	cmp	r1, r4
 8014858:	d008      	beq.n	801486c <memmove+0x28>
 801485a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801485e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014862:	e7f8      	b.n	8014856 <memmove+0x12>
 8014864:	4402      	add	r2, r0
 8014866:	4601      	mov	r1, r0
 8014868:	428a      	cmp	r2, r1
 801486a:	d100      	bne.n	801486e <memmove+0x2a>
 801486c:	bd10      	pop	{r4, pc}
 801486e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014876:	e7f7      	b.n	8014868 <memmove+0x24>

08014878 <memcpy>:
 8014878:	440a      	add	r2, r1
 801487a:	4291      	cmp	r1, r2
 801487c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014880:	d100      	bne.n	8014884 <memcpy+0xc>
 8014882:	4770      	bx	lr
 8014884:	b510      	push	{r4, lr}
 8014886:	f811 4b01 	ldrb.w	r4, [r1], #1
 801488a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801488e:	4291      	cmp	r1, r2
 8014890:	d1f9      	bne.n	8014886 <memcpy+0xe>
 8014892:	bd10      	pop	{r4, pc}

08014894 <__assert_func>:
 8014894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014896:	4614      	mov	r4, r2
 8014898:	461a      	mov	r2, r3
 801489a:	4b09      	ldr	r3, [pc, #36]	@ (80148c0 <__assert_func+0x2c>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	4605      	mov	r5, r0
 80148a0:	68d8      	ldr	r0, [r3, #12]
 80148a2:	b954      	cbnz	r4, 80148ba <__assert_func+0x26>
 80148a4:	4b07      	ldr	r3, [pc, #28]	@ (80148c4 <__assert_func+0x30>)
 80148a6:	461c      	mov	r4, r3
 80148a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80148ac:	9100      	str	r1, [sp, #0]
 80148ae:	462b      	mov	r3, r5
 80148b0:	4905      	ldr	r1, [pc, #20]	@ (80148c8 <__assert_func+0x34>)
 80148b2:	f000 f86f 	bl	8014994 <fiprintf>
 80148b6:	f000 f87f 	bl	80149b8 <abort>
 80148ba:	4b04      	ldr	r3, [pc, #16]	@ (80148cc <__assert_func+0x38>)
 80148bc:	e7f4      	b.n	80148a8 <__assert_func+0x14>
 80148be:	bf00      	nop
 80148c0:	24000114 	.word	0x24000114
 80148c4:	08015cd6 	.word	0x08015cd6
 80148c8:	08015ca8 	.word	0x08015ca8
 80148cc:	08015c9b 	.word	0x08015c9b

080148d0 <_calloc_r>:
 80148d0:	b570      	push	{r4, r5, r6, lr}
 80148d2:	fba1 5402 	umull	r5, r4, r1, r2
 80148d6:	b93c      	cbnz	r4, 80148e8 <_calloc_r+0x18>
 80148d8:	4629      	mov	r1, r5
 80148da:	f7fd fd89 	bl	80123f0 <_malloc_r>
 80148de:	4606      	mov	r6, r0
 80148e0:	b928      	cbnz	r0, 80148ee <_calloc_r+0x1e>
 80148e2:	2600      	movs	r6, #0
 80148e4:	4630      	mov	r0, r6
 80148e6:	bd70      	pop	{r4, r5, r6, pc}
 80148e8:	220c      	movs	r2, #12
 80148ea:	6002      	str	r2, [r0, #0]
 80148ec:	e7f9      	b.n	80148e2 <_calloc_r+0x12>
 80148ee:	462a      	mov	r2, r5
 80148f0:	4621      	mov	r1, r4
 80148f2:	f7fe fb66 	bl	8012fc2 <memset>
 80148f6:	e7f5      	b.n	80148e4 <_calloc_r+0x14>

080148f8 <__ascii_mbtowc>:
 80148f8:	b082      	sub	sp, #8
 80148fa:	b901      	cbnz	r1, 80148fe <__ascii_mbtowc+0x6>
 80148fc:	a901      	add	r1, sp, #4
 80148fe:	b142      	cbz	r2, 8014912 <__ascii_mbtowc+0x1a>
 8014900:	b14b      	cbz	r3, 8014916 <__ascii_mbtowc+0x1e>
 8014902:	7813      	ldrb	r3, [r2, #0]
 8014904:	600b      	str	r3, [r1, #0]
 8014906:	7812      	ldrb	r2, [r2, #0]
 8014908:	1e10      	subs	r0, r2, #0
 801490a:	bf18      	it	ne
 801490c:	2001      	movne	r0, #1
 801490e:	b002      	add	sp, #8
 8014910:	4770      	bx	lr
 8014912:	4610      	mov	r0, r2
 8014914:	e7fb      	b.n	801490e <__ascii_mbtowc+0x16>
 8014916:	f06f 0001 	mvn.w	r0, #1
 801491a:	e7f8      	b.n	801490e <__ascii_mbtowc+0x16>

0801491c <_realloc_r>:
 801491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014920:	4680      	mov	r8, r0
 8014922:	4615      	mov	r5, r2
 8014924:	460c      	mov	r4, r1
 8014926:	b921      	cbnz	r1, 8014932 <_realloc_r+0x16>
 8014928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801492c:	4611      	mov	r1, r2
 801492e:	f7fd bd5f 	b.w	80123f0 <_malloc_r>
 8014932:	b92a      	cbnz	r2, 8014940 <_realloc_r+0x24>
 8014934:	f7ff f9b6 	bl	8013ca4 <_free_r>
 8014938:	2400      	movs	r4, #0
 801493a:	4620      	mov	r0, r4
 801493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014940:	f000 f841 	bl	80149c6 <_malloc_usable_size_r>
 8014944:	4285      	cmp	r5, r0
 8014946:	4606      	mov	r6, r0
 8014948:	d802      	bhi.n	8014950 <_realloc_r+0x34>
 801494a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801494e:	d8f4      	bhi.n	801493a <_realloc_r+0x1e>
 8014950:	4629      	mov	r1, r5
 8014952:	4640      	mov	r0, r8
 8014954:	f7fd fd4c 	bl	80123f0 <_malloc_r>
 8014958:	4607      	mov	r7, r0
 801495a:	2800      	cmp	r0, #0
 801495c:	d0ec      	beq.n	8014938 <_realloc_r+0x1c>
 801495e:	42b5      	cmp	r5, r6
 8014960:	462a      	mov	r2, r5
 8014962:	4621      	mov	r1, r4
 8014964:	bf28      	it	cs
 8014966:	4632      	movcs	r2, r6
 8014968:	f7ff ff86 	bl	8014878 <memcpy>
 801496c:	4621      	mov	r1, r4
 801496e:	4640      	mov	r0, r8
 8014970:	f7ff f998 	bl	8013ca4 <_free_r>
 8014974:	463c      	mov	r4, r7
 8014976:	e7e0      	b.n	801493a <_realloc_r+0x1e>

08014978 <__ascii_wctomb>:
 8014978:	4603      	mov	r3, r0
 801497a:	4608      	mov	r0, r1
 801497c:	b141      	cbz	r1, 8014990 <__ascii_wctomb+0x18>
 801497e:	2aff      	cmp	r2, #255	@ 0xff
 8014980:	d904      	bls.n	801498c <__ascii_wctomb+0x14>
 8014982:	228a      	movs	r2, #138	@ 0x8a
 8014984:	601a      	str	r2, [r3, #0]
 8014986:	f04f 30ff 	mov.w	r0, #4294967295
 801498a:	4770      	bx	lr
 801498c:	700a      	strb	r2, [r1, #0]
 801498e:	2001      	movs	r0, #1
 8014990:	4770      	bx	lr
	...

08014994 <fiprintf>:
 8014994:	b40e      	push	{r1, r2, r3}
 8014996:	b503      	push	{r0, r1, lr}
 8014998:	4601      	mov	r1, r0
 801499a:	ab03      	add	r3, sp, #12
 801499c:	4805      	ldr	r0, [pc, #20]	@ (80149b4 <fiprintf+0x20>)
 801499e:	f853 2b04 	ldr.w	r2, [r3], #4
 80149a2:	6800      	ldr	r0, [r0, #0]
 80149a4:	9301      	str	r3, [sp, #4]
 80149a6:	f000 f83f 	bl	8014a28 <_vfiprintf_r>
 80149aa:	b002      	add	sp, #8
 80149ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80149b0:	b003      	add	sp, #12
 80149b2:	4770      	bx	lr
 80149b4:	24000114 	.word	0x24000114

080149b8 <abort>:
 80149b8:	b508      	push	{r3, lr}
 80149ba:	2006      	movs	r0, #6
 80149bc:	f000 fa08 	bl	8014dd0 <raise>
 80149c0:	2001      	movs	r0, #1
 80149c2:	f7ec fe67 	bl	8001694 <_exit>

080149c6 <_malloc_usable_size_r>:
 80149c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149ca:	1f18      	subs	r0, r3, #4
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	bfbc      	itt	lt
 80149d0:	580b      	ldrlt	r3, [r1, r0]
 80149d2:	18c0      	addlt	r0, r0, r3
 80149d4:	4770      	bx	lr

080149d6 <__sfputc_r>:
 80149d6:	6893      	ldr	r3, [r2, #8]
 80149d8:	3b01      	subs	r3, #1
 80149da:	2b00      	cmp	r3, #0
 80149dc:	b410      	push	{r4}
 80149de:	6093      	str	r3, [r2, #8]
 80149e0:	da08      	bge.n	80149f4 <__sfputc_r+0x1e>
 80149e2:	6994      	ldr	r4, [r2, #24]
 80149e4:	42a3      	cmp	r3, r4
 80149e6:	db01      	blt.n	80149ec <__sfputc_r+0x16>
 80149e8:	290a      	cmp	r1, #10
 80149ea:	d103      	bne.n	80149f4 <__sfputc_r+0x1e>
 80149ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149f0:	f000 b932 	b.w	8014c58 <__swbuf_r>
 80149f4:	6813      	ldr	r3, [r2, #0]
 80149f6:	1c58      	adds	r0, r3, #1
 80149f8:	6010      	str	r0, [r2, #0]
 80149fa:	7019      	strb	r1, [r3, #0]
 80149fc:	4608      	mov	r0, r1
 80149fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a02:	4770      	bx	lr

08014a04 <__sfputs_r>:
 8014a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a06:	4606      	mov	r6, r0
 8014a08:	460f      	mov	r7, r1
 8014a0a:	4614      	mov	r4, r2
 8014a0c:	18d5      	adds	r5, r2, r3
 8014a0e:	42ac      	cmp	r4, r5
 8014a10:	d101      	bne.n	8014a16 <__sfputs_r+0x12>
 8014a12:	2000      	movs	r0, #0
 8014a14:	e007      	b.n	8014a26 <__sfputs_r+0x22>
 8014a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a1a:	463a      	mov	r2, r7
 8014a1c:	4630      	mov	r0, r6
 8014a1e:	f7ff ffda 	bl	80149d6 <__sfputc_r>
 8014a22:	1c43      	adds	r3, r0, #1
 8014a24:	d1f3      	bne.n	8014a0e <__sfputs_r+0xa>
 8014a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014a28 <_vfiprintf_r>:
 8014a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a2c:	460d      	mov	r5, r1
 8014a2e:	b09d      	sub	sp, #116	@ 0x74
 8014a30:	4614      	mov	r4, r2
 8014a32:	4698      	mov	r8, r3
 8014a34:	4606      	mov	r6, r0
 8014a36:	b118      	cbz	r0, 8014a40 <_vfiprintf_r+0x18>
 8014a38:	6a03      	ldr	r3, [r0, #32]
 8014a3a:	b90b      	cbnz	r3, 8014a40 <_vfiprintf_r+0x18>
 8014a3c:	f7fe fa28 	bl	8012e90 <__sinit>
 8014a40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a42:	07d9      	lsls	r1, r3, #31
 8014a44:	d405      	bmi.n	8014a52 <_vfiprintf_r+0x2a>
 8014a46:	89ab      	ldrh	r3, [r5, #12]
 8014a48:	059a      	lsls	r2, r3, #22
 8014a4a:	d402      	bmi.n	8014a52 <_vfiprintf_r+0x2a>
 8014a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a4e:	f7fe fb46 	bl	80130de <__retarget_lock_acquire_recursive>
 8014a52:	89ab      	ldrh	r3, [r5, #12]
 8014a54:	071b      	lsls	r3, r3, #28
 8014a56:	d501      	bpl.n	8014a5c <_vfiprintf_r+0x34>
 8014a58:	692b      	ldr	r3, [r5, #16]
 8014a5a:	b99b      	cbnz	r3, 8014a84 <_vfiprintf_r+0x5c>
 8014a5c:	4629      	mov	r1, r5
 8014a5e:	4630      	mov	r0, r6
 8014a60:	f000 f938 	bl	8014cd4 <__swsetup_r>
 8014a64:	b170      	cbz	r0, 8014a84 <_vfiprintf_r+0x5c>
 8014a66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a68:	07dc      	lsls	r4, r3, #31
 8014a6a:	d504      	bpl.n	8014a76 <_vfiprintf_r+0x4e>
 8014a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a70:	b01d      	add	sp, #116	@ 0x74
 8014a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a76:	89ab      	ldrh	r3, [r5, #12]
 8014a78:	0598      	lsls	r0, r3, #22
 8014a7a:	d4f7      	bmi.n	8014a6c <_vfiprintf_r+0x44>
 8014a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a7e:	f7fe fb2f 	bl	80130e0 <__retarget_lock_release_recursive>
 8014a82:	e7f3      	b.n	8014a6c <_vfiprintf_r+0x44>
 8014a84:	2300      	movs	r3, #0
 8014a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a88:	2320      	movs	r3, #32
 8014a8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a92:	2330      	movs	r3, #48	@ 0x30
 8014a94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014c44 <_vfiprintf_r+0x21c>
 8014a98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014a9c:	f04f 0901 	mov.w	r9, #1
 8014aa0:	4623      	mov	r3, r4
 8014aa2:	469a      	mov	sl, r3
 8014aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014aa8:	b10a      	cbz	r2, 8014aae <_vfiprintf_r+0x86>
 8014aaa:	2a25      	cmp	r2, #37	@ 0x25
 8014aac:	d1f9      	bne.n	8014aa2 <_vfiprintf_r+0x7a>
 8014aae:	ebba 0b04 	subs.w	fp, sl, r4
 8014ab2:	d00b      	beq.n	8014acc <_vfiprintf_r+0xa4>
 8014ab4:	465b      	mov	r3, fp
 8014ab6:	4622      	mov	r2, r4
 8014ab8:	4629      	mov	r1, r5
 8014aba:	4630      	mov	r0, r6
 8014abc:	f7ff ffa2 	bl	8014a04 <__sfputs_r>
 8014ac0:	3001      	adds	r0, #1
 8014ac2:	f000 80a7 	beq.w	8014c14 <_vfiprintf_r+0x1ec>
 8014ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ac8:	445a      	add	r2, fp
 8014aca:	9209      	str	r2, [sp, #36]	@ 0x24
 8014acc:	f89a 3000 	ldrb.w	r3, [sl]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	f000 809f 	beq.w	8014c14 <_vfiprintf_r+0x1ec>
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8014adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ae0:	f10a 0a01 	add.w	sl, sl, #1
 8014ae4:	9304      	str	r3, [sp, #16]
 8014ae6:	9307      	str	r3, [sp, #28]
 8014ae8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014aec:	931a      	str	r3, [sp, #104]	@ 0x68
 8014aee:	4654      	mov	r4, sl
 8014af0:	2205      	movs	r2, #5
 8014af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014af6:	4853      	ldr	r0, [pc, #332]	@ (8014c44 <_vfiprintf_r+0x21c>)
 8014af8:	f7eb fbf2 	bl	80002e0 <memchr>
 8014afc:	9a04      	ldr	r2, [sp, #16]
 8014afe:	b9d8      	cbnz	r0, 8014b38 <_vfiprintf_r+0x110>
 8014b00:	06d1      	lsls	r1, r2, #27
 8014b02:	bf44      	itt	mi
 8014b04:	2320      	movmi	r3, #32
 8014b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b0a:	0713      	lsls	r3, r2, #28
 8014b0c:	bf44      	itt	mi
 8014b0e:	232b      	movmi	r3, #43	@ 0x2b
 8014b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b14:	f89a 3000 	ldrb.w	r3, [sl]
 8014b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b1a:	d015      	beq.n	8014b48 <_vfiprintf_r+0x120>
 8014b1c:	9a07      	ldr	r2, [sp, #28]
 8014b1e:	4654      	mov	r4, sl
 8014b20:	2000      	movs	r0, #0
 8014b22:	f04f 0c0a 	mov.w	ip, #10
 8014b26:	4621      	mov	r1, r4
 8014b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b2c:	3b30      	subs	r3, #48	@ 0x30
 8014b2e:	2b09      	cmp	r3, #9
 8014b30:	d94b      	bls.n	8014bca <_vfiprintf_r+0x1a2>
 8014b32:	b1b0      	cbz	r0, 8014b62 <_vfiprintf_r+0x13a>
 8014b34:	9207      	str	r2, [sp, #28]
 8014b36:	e014      	b.n	8014b62 <_vfiprintf_r+0x13a>
 8014b38:	eba0 0308 	sub.w	r3, r0, r8
 8014b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8014b40:	4313      	orrs	r3, r2
 8014b42:	9304      	str	r3, [sp, #16]
 8014b44:	46a2      	mov	sl, r4
 8014b46:	e7d2      	b.n	8014aee <_vfiprintf_r+0xc6>
 8014b48:	9b03      	ldr	r3, [sp, #12]
 8014b4a:	1d19      	adds	r1, r3, #4
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	9103      	str	r1, [sp, #12]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	bfbb      	ittet	lt
 8014b54:	425b      	neglt	r3, r3
 8014b56:	f042 0202 	orrlt.w	r2, r2, #2
 8014b5a:	9307      	strge	r3, [sp, #28]
 8014b5c:	9307      	strlt	r3, [sp, #28]
 8014b5e:	bfb8      	it	lt
 8014b60:	9204      	strlt	r2, [sp, #16]
 8014b62:	7823      	ldrb	r3, [r4, #0]
 8014b64:	2b2e      	cmp	r3, #46	@ 0x2e
 8014b66:	d10a      	bne.n	8014b7e <_vfiprintf_r+0x156>
 8014b68:	7863      	ldrb	r3, [r4, #1]
 8014b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b6c:	d132      	bne.n	8014bd4 <_vfiprintf_r+0x1ac>
 8014b6e:	9b03      	ldr	r3, [sp, #12]
 8014b70:	1d1a      	adds	r2, r3, #4
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	9203      	str	r2, [sp, #12]
 8014b76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014b7a:	3402      	adds	r4, #2
 8014b7c:	9305      	str	r3, [sp, #20]
 8014b7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014c54 <_vfiprintf_r+0x22c>
 8014b82:	7821      	ldrb	r1, [r4, #0]
 8014b84:	2203      	movs	r2, #3
 8014b86:	4650      	mov	r0, sl
 8014b88:	f7eb fbaa 	bl	80002e0 <memchr>
 8014b8c:	b138      	cbz	r0, 8014b9e <_vfiprintf_r+0x176>
 8014b8e:	9b04      	ldr	r3, [sp, #16]
 8014b90:	eba0 000a 	sub.w	r0, r0, sl
 8014b94:	2240      	movs	r2, #64	@ 0x40
 8014b96:	4082      	lsls	r2, r0
 8014b98:	4313      	orrs	r3, r2
 8014b9a:	3401      	adds	r4, #1
 8014b9c:	9304      	str	r3, [sp, #16]
 8014b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ba2:	4829      	ldr	r0, [pc, #164]	@ (8014c48 <_vfiprintf_r+0x220>)
 8014ba4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014ba8:	2206      	movs	r2, #6
 8014baa:	f7eb fb99 	bl	80002e0 <memchr>
 8014bae:	2800      	cmp	r0, #0
 8014bb0:	d03f      	beq.n	8014c32 <_vfiprintf_r+0x20a>
 8014bb2:	4b26      	ldr	r3, [pc, #152]	@ (8014c4c <_vfiprintf_r+0x224>)
 8014bb4:	bb1b      	cbnz	r3, 8014bfe <_vfiprintf_r+0x1d6>
 8014bb6:	9b03      	ldr	r3, [sp, #12]
 8014bb8:	3307      	adds	r3, #7
 8014bba:	f023 0307 	bic.w	r3, r3, #7
 8014bbe:	3308      	adds	r3, #8
 8014bc0:	9303      	str	r3, [sp, #12]
 8014bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bc4:	443b      	add	r3, r7
 8014bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014bc8:	e76a      	b.n	8014aa0 <_vfiprintf_r+0x78>
 8014bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8014bce:	460c      	mov	r4, r1
 8014bd0:	2001      	movs	r0, #1
 8014bd2:	e7a8      	b.n	8014b26 <_vfiprintf_r+0xfe>
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	3401      	adds	r4, #1
 8014bd8:	9305      	str	r3, [sp, #20]
 8014bda:	4619      	mov	r1, r3
 8014bdc:	f04f 0c0a 	mov.w	ip, #10
 8014be0:	4620      	mov	r0, r4
 8014be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014be6:	3a30      	subs	r2, #48	@ 0x30
 8014be8:	2a09      	cmp	r2, #9
 8014bea:	d903      	bls.n	8014bf4 <_vfiprintf_r+0x1cc>
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d0c6      	beq.n	8014b7e <_vfiprintf_r+0x156>
 8014bf0:	9105      	str	r1, [sp, #20]
 8014bf2:	e7c4      	b.n	8014b7e <_vfiprintf_r+0x156>
 8014bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014bf8:	4604      	mov	r4, r0
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	e7f0      	b.n	8014be0 <_vfiprintf_r+0x1b8>
 8014bfe:	ab03      	add	r3, sp, #12
 8014c00:	9300      	str	r3, [sp, #0]
 8014c02:	462a      	mov	r2, r5
 8014c04:	4b12      	ldr	r3, [pc, #72]	@ (8014c50 <_vfiprintf_r+0x228>)
 8014c06:	a904      	add	r1, sp, #16
 8014c08:	4630      	mov	r0, r6
 8014c0a:	f7fd fd0d 	bl	8012628 <_printf_float>
 8014c0e:	4607      	mov	r7, r0
 8014c10:	1c78      	adds	r0, r7, #1
 8014c12:	d1d6      	bne.n	8014bc2 <_vfiprintf_r+0x19a>
 8014c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c16:	07d9      	lsls	r1, r3, #31
 8014c18:	d405      	bmi.n	8014c26 <_vfiprintf_r+0x1fe>
 8014c1a:	89ab      	ldrh	r3, [r5, #12]
 8014c1c:	059a      	lsls	r2, r3, #22
 8014c1e:	d402      	bmi.n	8014c26 <_vfiprintf_r+0x1fe>
 8014c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c22:	f7fe fa5d 	bl	80130e0 <__retarget_lock_release_recursive>
 8014c26:	89ab      	ldrh	r3, [r5, #12]
 8014c28:	065b      	lsls	r3, r3, #25
 8014c2a:	f53f af1f 	bmi.w	8014a6c <_vfiprintf_r+0x44>
 8014c2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c30:	e71e      	b.n	8014a70 <_vfiprintf_r+0x48>
 8014c32:	ab03      	add	r3, sp, #12
 8014c34:	9300      	str	r3, [sp, #0]
 8014c36:	462a      	mov	r2, r5
 8014c38:	4b05      	ldr	r3, [pc, #20]	@ (8014c50 <_vfiprintf_r+0x228>)
 8014c3a:	a904      	add	r1, sp, #16
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	f7fd ff7b 	bl	8012b38 <_printf_i>
 8014c42:	e7e4      	b.n	8014c0e <_vfiprintf_r+0x1e6>
 8014c44:	08015c80 	.word	0x08015c80
 8014c48:	08015c8a 	.word	0x08015c8a
 8014c4c:	08012629 	.word	0x08012629
 8014c50:	08014a05 	.word	0x08014a05
 8014c54:	08015c86 	.word	0x08015c86

08014c58 <__swbuf_r>:
 8014c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c5a:	460e      	mov	r6, r1
 8014c5c:	4614      	mov	r4, r2
 8014c5e:	4605      	mov	r5, r0
 8014c60:	b118      	cbz	r0, 8014c6a <__swbuf_r+0x12>
 8014c62:	6a03      	ldr	r3, [r0, #32]
 8014c64:	b90b      	cbnz	r3, 8014c6a <__swbuf_r+0x12>
 8014c66:	f7fe f913 	bl	8012e90 <__sinit>
 8014c6a:	69a3      	ldr	r3, [r4, #24]
 8014c6c:	60a3      	str	r3, [r4, #8]
 8014c6e:	89a3      	ldrh	r3, [r4, #12]
 8014c70:	071a      	lsls	r2, r3, #28
 8014c72:	d501      	bpl.n	8014c78 <__swbuf_r+0x20>
 8014c74:	6923      	ldr	r3, [r4, #16]
 8014c76:	b943      	cbnz	r3, 8014c8a <__swbuf_r+0x32>
 8014c78:	4621      	mov	r1, r4
 8014c7a:	4628      	mov	r0, r5
 8014c7c:	f000 f82a 	bl	8014cd4 <__swsetup_r>
 8014c80:	b118      	cbz	r0, 8014c8a <__swbuf_r+0x32>
 8014c82:	f04f 37ff 	mov.w	r7, #4294967295
 8014c86:	4638      	mov	r0, r7
 8014c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c8a:	6823      	ldr	r3, [r4, #0]
 8014c8c:	6922      	ldr	r2, [r4, #16]
 8014c8e:	1a98      	subs	r0, r3, r2
 8014c90:	6963      	ldr	r3, [r4, #20]
 8014c92:	b2f6      	uxtb	r6, r6
 8014c94:	4283      	cmp	r3, r0
 8014c96:	4637      	mov	r7, r6
 8014c98:	dc05      	bgt.n	8014ca6 <__swbuf_r+0x4e>
 8014c9a:	4621      	mov	r1, r4
 8014c9c:	4628      	mov	r0, r5
 8014c9e:	f7ff fda9 	bl	80147f4 <_fflush_r>
 8014ca2:	2800      	cmp	r0, #0
 8014ca4:	d1ed      	bne.n	8014c82 <__swbuf_r+0x2a>
 8014ca6:	68a3      	ldr	r3, [r4, #8]
 8014ca8:	3b01      	subs	r3, #1
 8014caa:	60a3      	str	r3, [r4, #8]
 8014cac:	6823      	ldr	r3, [r4, #0]
 8014cae:	1c5a      	adds	r2, r3, #1
 8014cb0:	6022      	str	r2, [r4, #0]
 8014cb2:	701e      	strb	r6, [r3, #0]
 8014cb4:	6962      	ldr	r2, [r4, #20]
 8014cb6:	1c43      	adds	r3, r0, #1
 8014cb8:	429a      	cmp	r2, r3
 8014cba:	d004      	beq.n	8014cc6 <__swbuf_r+0x6e>
 8014cbc:	89a3      	ldrh	r3, [r4, #12]
 8014cbe:	07db      	lsls	r3, r3, #31
 8014cc0:	d5e1      	bpl.n	8014c86 <__swbuf_r+0x2e>
 8014cc2:	2e0a      	cmp	r6, #10
 8014cc4:	d1df      	bne.n	8014c86 <__swbuf_r+0x2e>
 8014cc6:	4621      	mov	r1, r4
 8014cc8:	4628      	mov	r0, r5
 8014cca:	f7ff fd93 	bl	80147f4 <_fflush_r>
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	d0d9      	beq.n	8014c86 <__swbuf_r+0x2e>
 8014cd2:	e7d6      	b.n	8014c82 <__swbuf_r+0x2a>

08014cd4 <__swsetup_r>:
 8014cd4:	b538      	push	{r3, r4, r5, lr}
 8014cd6:	4b29      	ldr	r3, [pc, #164]	@ (8014d7c <__swsetup_r+0xa8>)
 8014cd8:	4605      	mov	r5, r0
 8014cda:	6818      	ldr	r0, [r3, #0]
 8014cdc:	460c      	mov	r4, r1
 8014cde:	b118      	cbz	r0, 8014ce8 <__swsetup_r+0x14>
 8014ce0:	6a03      	ldr	r3, [r0, #32]
 8014ce2:	b90b      	cbnz	r3, 8014ce8 <__swsetup_r+0x14>
 8014ce4:	f7fe f8d4 	bl	8012e90 <__sinit>
 8014ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cec:	0719      	lsls	r1, r3, #28
 8014cee:	d422      	bmi.n	8014d36 <__swsetup_r+0x62>
 8014cf0:	06da      	lsls	r2, r3, #27
 8014cf2:	d407      	bmi.n	8014d04 <__swsetup_r+0x30>
 8014cf4:	2209      	movs	r2, #9
 8014cf6:	602a      	str	r2, [r5, #0]
 8014cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cfc:	81a3      	strh	r3, [r4, #12]
 8014cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8014d02:	e033      	b.n	8014d6c <__swsetup_r+0x98>
 8014d04:	0758      	lsls	r0, r3, #29
 8014d06:	d512      	bpl.n	8014d2e <__swsetup_r+0x5a>
 8014d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d0a:	b141      	cbz	r1, 8014d1e <__swsetup_r+0x4a>
 8014d0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d10:	4299      	cmp	r1, r3
 8014d12:	d002      	beq.n	8014d1a <__swsetup_r+0x46>
 8014d14:	4628      	mov	r0, r5
 8014d16:	f7fe ffc5 	bl	8013ca4 <_free_r>
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d1e:	89a3      	ldrh	r3, [r4, #12]
 8014d20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014d24:	81a3      	strh	r3, [r4, #12]
 8014d26:	2300      	movs	r3, #0
 8014d28:	6063      	str	r3, [r4, #4]
 8014d2a:	6923      	ldr	r3, [r4, #16]
 8014d2c:	6023      	str	r3, [r4, #0]
 8014d2e:	89a3      	ldrh	r3, [r4, #12]
 8014d30:	f043 0308 	orr.w	r3, r3, #8
 8014d34:	81a3      	strh	r3, [r4, #12]
 8014d36:	6923      	ldr	r3, [r4, #16]
 8014d38:	b94b      	cbnz	r3, 8014d4e <__swsetup_r+0x7a>
 8014d3a:	89a3      	ldrh	r3, [r4, #12]
 8014d3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d44:	d003      	beq.n	8014d4e <__swsetup_r+0x7a>
 8014d46:	4621      	mov	r1, r4
 8014d48:	4628      	mov	r0, r5
 8014d4a:	f000 f883 	bl	8014e54 <__smakebuf_r>
 8014d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d52:	f013 0201 	ands.w	r2, r3, #1
 8014d56:	d00a      	beq.n	8014d6e <__swsetup_r+0x9a>
 8014d58:	2200      	movs	r2, #0
 8014d5a:	60a2      	str	r2, [r4, #8]
 8014d5c:	6962      	ldr	r2, [r4, #20]
 8014d5e:	4252      	negs	r2, r2
 8014d60:	61a2      	str	r2, [r4, #24]
 8014d62:	6922      	ldr	r2, [r4, #16]
 8014d64:	b942      	cbnz	r2, 8014d78 <__swsetup_r+0xa4>
 8014d66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014d6a:	d1c5      	bne.n	8014cf8 <__swsetup_r+0x24>
 8014d6c:	bd38      	pop	{r3, r4, r5, pc}
 8014d6e:	0799      	lsls	r1, r3, #30
 8014d70:	bf58      	it	pl
 8014d72:	6962      	ldrpl	r2, [r4, #20]
 8014d74:	60a2      	str	r2, [r4, #8]
 8014d76:	e7f4      	b.n	8014d62 <__swsetup_r+0x8e>
 8014d78:	2000      	movs	r0, #0
 8014d7a:	e7f7      	b.n	8014d6c <__swsetup_r+0x98>
 8014d7c:	24000114 	.word	0x24000114

08014d80 <_raise_r>:
 8014d80:	291f      	cmp	r1, #31
 8014d82:	b538      	push	{r3, r4, r5, lr}
 8014d84:	4605      	mov	r5, r0
 8014d86:	460c      	mov	r4, r1
 8014d88:	d904      	bls.n	8014d94 <_raise_r+0x14>
 8014d8a:	2316      	movs	r3, #22
 8014d8c:	6003      	str	r3, [r0, #0]
 8014d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8014d92:	bd38      	pop	{r3, r4, r5, pc}
 8014d94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014d96:	b112      	cbz	r2, 8014d9e <_raise_r+0x1e>
 8014d98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d9c:	b94b      	cbnz	r3, 8014db2 <_raise_r+0x32>
 8014d9e:	4628      	mov	r0, r5
 8014da0:	f000 f830 	bl	8014e04 <_getpid_r>
 8014da4:	4622      	mov	r2, r4
 8014da6:	4601      	mov	r1, r0
 8014da8:	4628      	mov	r0, r5
 8014daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014dae:	f000 b817 	b.w	8014de0 <_kill_r>
 8014db2:	2b01      	cmp	r3, #1
 8014db4:	d00a      	beq.n	8014dcc <_raise_r+0x4c>
 8014db6:	1c59      	adds	r1, r3, #1
 8014db8:	d103      	bne.n	8014dc2 <_raise_r+0x42>
 8014dba:	2316      	movs	r3, #22
 8014dbc:	6003      	str	r3, [r0, #0]
 8014dbe:	2001      	movs	r0, #1
 8014dc0:	e7e7      	b.n	8014d92 <_raise_r+0x12>
 8014dc2:	2100      	movs	r1, #0
 8014dc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014dc8:	4620      	mov	r0, r4
 8014dca:	4798      	blx	r3
 8014dcc:	2000      	movs	r0, #0
 8014dce:	e7e0      	b.n	8014d92 <_raise_r+0x12>

08014dd0 <raise>:
 8014dd0:	4b02      	ldr	r3, [pc, #8]	@ (8014ddc <raise+0xc>)
 8014dd2:	4601      	mov	r1, r0
 8014dd4:	6818      	ldr	r0, [r3, #0]
 8014dd6:	f7ff bfd3 	b.w	8014d80 <_raise_r>
 8014dda:	bf00      	nop
 8014ddc:	24000114 	.word	0x24000114

08014de0 <_kill_r>:
 8014de0:	b538      	push	{r3, r4, r5, lr}
 8014de2:	4d07      	ldr	r5, [pc, #28]	@ (8014e00 <_kill_r+0x20>)
 8014de4:	2300      	movs	r3, #0
 8014de6:	4604      	mov	r4, r0
 8014de8:	4608      	mov	r0, r1
 8014dea:	4611      	mov	r1, r2
 8014dec:	602b      	str	r3, [r5, #0]
 8014dee:	f7ec fc41 	bl	8001674 <_kill>
 8014df2:	1c43      	adds	r3, r0, #1
 8014df4:	d102      	bne.n	8014dfc <_kill_r+0x1c>
 8014df6:	682b      	ldr	r3, [r5, #0]
 8014df8:	b103      	cbz	r3, 8014dfc <_kill_r+0x1c>
 8014dfa:	6023      	str	r3, [r4, #0]
 8014dfc:	bd38      	pop	{r3, r4, r5, pc}
 8014dfe:	bf00      	nop
 8014e00:	240028fc 	.word	0x240028fc

08014e04 <_getpid_r>:
 8014e04:	f7ec bc2e 	b.w	8001664 <_getpid>

08014e08 <__swhatbuf_r>:
 8014e08:	b570      	push	{r4, r5, r6, lr}
 8014e0a:	460c      	mov	r4, r1
 8014e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e10:	2900      	cmp	r1, #0
 8014e12:	b096      	sub	sp, #88	@ 0x58
 8014e14:	4615      	mov	r5, r2
 8014e16:	461e      	mov	r6, r3
 8014e18:	da0d      	bge.n	8014e36 <__swhatbuf_r+0x2e>
 8014e1a:	89a3      	ldrh	r3, [r4, #12]
 8014e1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014e20:	f04f 0100 	mov.w	r1, #0
 8014e24:	bf14      	ite	ne
 8014e26:	2340      	movne	r3, #64	@ 0x40
 8014e28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014e2c:	2000      	movs	r0, #0
 8014e2e:	6031      	str	r1, [r6, #0]
 8014e30:	602b      	str	r3, [r5, #0]
 8014e32:	b016      	add	sp, #88	@ 0x58
 8014e34:	bd70      	pop	{r4, r5, r6, pc}
 8014e36:	466a      	mov	r2, sp
 8014e38:	f000 f848 	bl	8014ecc <_fstat_r>
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	dbec      	blt.n	8014e1a <__swhatbuf_r+0x12>
 8014e40:	9901      	ldr	r1, [sp, #4]
 8014e42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014e46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014e4a:	4259      	negs	r1, r3
 8014e4c:	4159      	adcs	r1, r3
 8014e4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e52:	e7eb      	b.n	8014e2c <__swhatbuf_r+0x24>

08014e54 <__smakebuf_r>:
 8014e54:	898b      	ldrh	r3, [r1, #12]
 8014e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e58:	079d      	lsls	r5, r3, #30
 8014e5a:	4606      	mov	r6, r0
 8014e5c:	460c      	mov	r4, r1
 8014e5e:	d507      	bpl.n	8014e70 <__smakebuf_r+0x1c>
 8014e60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e64:	6023      	str	r3, [r4, #0]
 8014e66:	6123      	str	r3, [r4, #16]
 8014e68:	2301      	movs	r3, #1
 8014e6a:	6163      	str	r3, [r4, #20]
 8014e6c:	b003      	add	sp, #12
 8014e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e70:	ab01      	add	r3, sp, #4
 8014e72:	466a      	mov	r2, sp
 8014e74:	f7ff ffc8 	bl	8014e08 <__swhatbuf_r>
 8014e78:	9f00      	ldr	r7, [sp, #0]
 8014e7a:	4605      	mov	r5, r0
 8014e7c:	4639      	mov	r1, r7
 8014e7e:	4630      	mov	r0, r6
 8014e80:	f7fd fab6 	bl	80123f0 <_malloc_r>
 8014e84:	b948      	cbnz	r0, 8014e9a <__smakebuf_r+0x46>
 8014e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e8a:	059a      	lsls	r2, r3, #22
 8014e8c:	d4ee      	bmi.n	8014e6c <__smakebuf_r+0x18>
 8014e8e:	f023 0303 	bic.w	r3, r3, #3
 8014e92:	f043 0302 	orr.w	r3, r3, #2
 8014e96:	81a3      	strh	r3, [r4, #12]
 8014e98:	e7e2      	b.n	8014e60 <__smakebuf_r+0xc>
 8014e9a:	89a3      	ldrh	r3, [r4, #12]
 8014e9c:	6020      	str	r0, [r4, #0]
 8014e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ea2:	81a3      	strh	r3, [r4, #12]
 8014ea4:	9b01      	ldr	r3, [sp, #4]
 8014ea6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014eaa:	b15b      	cbz	r3, 8014ec4 <__smakebuf_r+0x70>
 8014eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014eb0:	4630      	mov	r0, r6
 8014eb2:	f000 f81d 	bl	8014ef0 <_isatty_r>
 8014eb6:	b128      	cbz	r0, 8014ec4 <__smakebuf_r+0x70>
 8014eb8:	89a3      	ldrh	r3, [r4, #12]
 8014eba:	f023 0303 	bic.w	r3, r3, #3
 8014ebe:	f043 0301 	orr.w	r3, r3, #1
 8014ec2:	81a3      	strh	r3, [r4, #12]
 8014ec4:	89a3      	ldrh	r3, [r4, #12]
 8014ec6:	431d      	orrs	r5, r3
 8014ec8:	81a5      	strh	r5, [r4, #12]
 8014eca:	e7cf      	b.n	8014e6c <__smakebuf_r+0x18>

08014ecc <_fstat_r>:
 8014ecc:	b538      	push	{r3, r4, r5, lr}
 8014ece:	4d07      	ldr	r5, [pc, #28]	@ (8014eec <_fstat_r+0x20>)
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	4604      	mov	r4, r0
 8014ed4:	4608      	mov	r0, r1
 8014ed6:	4611      	mov	r1, r2
 8014ed8:	602b      	str	r3, [r5, #0]
 8014eda:	f7ec fc2b 	bl	8001734 <_fstat>
 8014ede:	1c43      	adds	r3, r0, #1
 8014ee0:	d102      	bne.n	8014ee8 <_fstat_r+0x1c>
 8014ee2:	682b      	ldr	r3, [r5, #0]
 8014ee4:	b103      	cbz	r3, 8014ee8 <_fstat_r+0x1c>
 8014ee6:	6023      	str	r3, [r4, #0]
 8014ee8:	bd38      	pop	{r3, r4, r5, pc}
 8014eea:	bf00      	nop
 8014eec:	240028fc 	.word	0x240028fc

08014ef0 <_isatty_r>:
 8014ef0:	b538      	push	{r3, r4, r5, lr}
 8014ef2:	4d06      	ldr	r5, [pc, #24]	@ (8014f0c <_isatty_r+0x1c>)
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	4604      	mov	r4, r0
 8014ef8:	4608      	mov	r0, r1
 8014efa:	602b      	str	r3, [r5, #0]
 8014efc:	f7ec fc2a 	bl	8001754 <_isatty>
 8014f00:	1c43      	adds	r3, r0, #1
 8014f02:	d102      	bne.n	8014f0a <_isatty_r+0x1a>
 8014f04:	682b      	ldr	r3, [r5, #0]
 8014f06:	b103      	cbz	r3, 8014f0a <_isatty_r+0x1a>
 8014f08:	6023      	str	r3, [r4, #0]
 8014f0a:	bd38      	pop	{r3, r4, r5, pc}
 8014f0c:	240028fc 	.word	0x240028fc

08014f10 <fmod>:
 8014f10:	b508      	push	{r3, lr}
 8014f12:	ed2d 8b04 	vpush	{d8-d9}
 8014f16:	eeb0 9b40 	vmov.f64	d9, d0
 8014f1a:	eeb0 8b41 	vmov.f64	d8, d1
 8014f1e:	f000 f81b 	bl	8014f58 <__ieee754_fmod>
 8014f22:	eeb4 9b48 	vcmp.f64	d9, d8
 8014f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f2a:	d60c      	bvs.n	8014f46 <fmod+0x36>
 8014f2c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014f50 <fmod+0x40>
 8014f30:	eeb4 8b49 	vcmp.f64	d8, d9
 8014f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f38:	d105      	bne.n	8014f46 <fmod+0x36>
 8014f3a:	f7fe f8a5 	bl	8013088 <__errno>
 8014f3e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014f42:	2321      	movs	r3, #33	@ 0x21
 8014f44:	6003      	str	r3, [r0, #0]
 8014f46:	ecbd 8b04 	vpop	{d8-d9}
 8014f4a:	bd08      	pop	{r3, pc}
 8014f4c:	f3af 8000 	nop.w
	...

08014f58 <__ieee754_fmod>:
 8014f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014f5c:	ed8d 1b00 	vstr	d1, [sp]
 8014f60:	e9dd 6500 	ldrd	r6, r5, [sp]
 8014f64:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8014f68:	ea56 0307 	orrs.w	r3, r6, r7
 8014f6c:	46b6      	mov	lr, r6
 8014f6e:	d00d      	beq.n	8014f8c <__ieee754_fmod+0x34>
 8014f70:	ee10 ca90 	vmov	ip, s1
 8014f74:	4b78      	ldr	r3, [pc, #480]	@ (8015158 <__ieee754_fmod+0x200>)
 8014f76:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8014f7a:	4598      	cmp	r8, r3
 8014f7c:	d806      	bhi.n	8014f8c <__ieee754_fmod+0x34>
 8014f7e:	4273      	negs	r3, r6
 8014f80:	4a76      	ldr	r2, [pc, #472]	@ (801515c <__ieee754_fmod+0x204>)
 8014f82:	4333      	orrs	r3, r6
 8014f84:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8014f88:	4293      	cmp	r3, r2
 8014f8a:	d908      	bls.n	8014f9e <__ieee754_fmod+0x46>
 8014f8c:	ed9d 7b00 	vldr	d7, [sp]
 8014f90:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014f94:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014f98:	b003      	add	sp, #12
 8014f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f9e:	ee10 9a10 	vmov	r9, s0
 8014fa2:	45b8      	cmp	r8, r7
 8014fa4:	4649      	mov	r1, r9
 8014fa6:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8014faa:	dc09      	bgt.n	8014fc0 <__ieee754_fmod+0x68>
 8014fac:	dbf4      	blt.n	8014f98 <__ieee754_fmod+0x40>
 8014fae:	454e      	cmp	r6, r9
 8014fb0:	d8f2      	bhi.n	8014f98 <__ieee754_fmod+0x40>
 8014fb2:	d105      	bne.n	8014fc0 <__ieee754_fmod+0x68>
 8014fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8015160 <__ieee754_fmod+0x208>)
 8014fb6:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8014fba:	ed93 0b00 	vldr	d0, [r3]
 8014fbe:	e7eb      	b.n	8014f98 <__ieee754_fmod+0x40>
 8014fc0:	4a66      	ldr	r2, [pc, #408]	@ (801515c <__ieee754_fmod+0x204>)
 8014fc2:	ea1c 0f02 	tst.w	ip, r2
 8014fc6:	d14a      	bne.n	801505e <__ieee754_fmod+0x106>
 8014fc8:	f1b8 0f00 	cmp.w	r8, #0
 8014fcc:	d13f      	bne.n	801504e <__ieee754_fmod+0xf6>
 8014fce:	4865      	ldr	r0, [pc, #404]	@ (8015164 <__ieee754_fmod+0x20c>)
 8014fd0:	464b      	mov	r3, r9
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	dc38      	bgt.n	8015048 <__ieee754_fmod+0xf0>
 8014fd6:	4215      	tst	r5, r2
 8014fd8:	d150      	bne.n	801507c <__ieee754_fmod+0x124>
 8014fda:	2f00      	cmp	r7, #0
 8014fdc:	d147      	bne.n	801506e <__ieee754_fmod+0x116>
 8014fde:	4a61      	ldr	r2, [pc, #388]	@ (8015164 <__ieee754_fmod+0x20c>)
 8014fe0:	4633      	mov	r3, r6
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	dc40      	bgt.n	8015068 <__ieee754_fmod+0x110>
 8014fe6:	4b60      	ldr	r3, [pc, #384]	@ (8015168 <__ieee754_fmod+0x210>)
 8014fe8:	4298      	cmp	r0, r3
 8014fea:	db4b      	blt.n	8015084 <__ieee754_fmod+0x12c>
 8014fec:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8014ff0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014ff4:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8015168 <__ieee754_fmod+0x210>
 8014ff8:	4562      	cmp	r2, ip
 8014ffa:	db58      	blt.n	80150ae <__ieee754_fmod+0x156>
 8014ffc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015000:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8015004:	1a80      	subs	r0, r0, r2
 8015006:	1b5e      	subs	r6, r3, r5
 8015008:	eba1 070e 	sub.w	r7, r1, lr
 801500c:	2800      	cmp	r0, #0
 801500e:	d164      	bne.n	80150da <__ieee754_fmod+0x182>
 8015010:	4571      	cmp	r1, lr
 8015012:	bf38      	it	cc
 8015014:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8015018:	2e00      	cmp	r6, #0
 801501a:	bfa4      	itt	ge
 801501c:	4639      	movge	r1, r7
 801501e:	4633      	movge	r3, r6
 8015020:	ea53 0001 	orrs.w	r0, r3, r1
 8015024:	d0c6      	beq.n	8014fb4 <__ieee754_fmod+0x5c>
 8015026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801502a:	db6b      	blt.n	8015104 <__ieee754_fmod+0x1ac>
 801502c:	484e      	ldr	r0, [pc, #312]	@ (8015168 <__ieee754_fmod+0x210>)
 801502e:	4282      	cmp	r2, r0
 8015030:	db6e      	blt.n	8015110 <__ieee754_fmod+0x1b8>
 8015032:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015036:	4323      	orrs	r3, r4
 8015038:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801503c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015040:	460c      	mov	r4, r1
 8015042:	ec45 4b10 	vmov	d0, r4, r5
 8015046:	e7a7      	b.n	8014f98 <__ieee754_fmod+0x40>
 8015048:	3801      	subs	r0, #1
 801504a:	005b      	lsls	r3, r3, #1
 801504c:	e7c1      	b.n	8014fd2 <__ieee754_fmod+0x7a>
 801504e:	4846      	ldr	r0, [pc, #280]	@ (8015168 <__ieee754_fmod+0x210>)
 8015050:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8015054:	2b00      	cmp	r3, #0
 8015056:	ddbe      	ble.n	8014fd6 <__ieee754_fmod+0x7e>
 8015058:	3801      	subs	r0, #1
 801505a:	005b      	lsls	r3, r3, #1
 801505c:	e7fa      	b.n	8015054 <__ieee754_fmod+0xfc>
 801505e:	ea4f 5028 	mov.w	r0, r8, asr #20
 8015062:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8015066:	e7b6      	b.n	8014fd6 <__ieee754_fmod+0x7e>
 8015068:	3a01      	subs	r2, #1
 801506a:	005b      	lsls	r3, r3, #1
 801506c:	e7b9      	b.n	8014fe2 <__ieee754_fmod+0x8a>
 801506e:	4a3e      	ldr	r2, [pc, #248]	@ (8015168 <__ieee754_fmod+0x210>)
 8015070:	02fb      	lsls	r3, r7, #11
 8015072:	2b00      	cmp	r3, #0
 8015074:	ddb7      	ble.n	8014fe6 <__ieee754_fmod+0x8e>
 8015076:	3a01      	subs	r2, #1
 8015078:	005b      	lsls	r3, r3, #1
 801507a:	e7fa      	b.n	8015072 <__ieee754_fmod+0x11a>
 801507c:	153a      	asrs	r2, r7, #20
 801507e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015082:	e7b0      	b.n	8014fe6 <__ieee754_fmod+0x8e>
 8015084:	eba3 0c00 	sub.w	ip, r3, r0
 8015088:	f1bc 0f1f 	cmp.w	ip, #31
 801508c:	dc09      	bgt.n	80150a2 <__ieee754_fmod+0x14a>
 801508e:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8015092:	fa08 f10c 	lsl.w	r1, r8, ip
 8015096:	fa29 f303 	lsr.w	r3, r9, r3
 801509a:	430b      	orrs	r3, r1
 801509c:	fa09 f10c 	lsl.w	r1, r9, ip
 80150a0:	e7a8      	b.n	8014ff4 <__ieee754_fmod+0x9c>
 80150a2:	4b32      	ldr	r3, [pc, #200]	@ (801516c <__ieee754_fmod+0x214>)
 80150a4:	1a1b      	subs	r3, r3, r0
 80150a6:	fa09 f303 	lsl.w	r3, r9, r3
 80150aa:	2100      	movs	r1, #0
 80150ac:	e7a2      	b.n	8014ff4 <__ieee754_fmod+0x9c>
 80150ae:	ebac 0c02 	sub.w	ip, ip, r2
 80150b2:	f1bc 0f1f 	cmp.w	ip, #31
 80150b6:	dc09      	bgt.n	80150cc <__ieee754_fmod+0x174>
 80150b8:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 80150bc:	fa07 f70c 	lsl.w	r7, r7, ip
 80150c0:	fa26 f505 	lsr.w	r5, r6, r5
 80150c4:	433d      	orrs	r5, r7
 80150c6:	fa06 fe0c 	lsl.w	lr, r6, ip
 80150ca:	e79b      	b.n	8015004 <__ieee754_fmod+0xac>
 80150cc:	4d27      	ldr	r5, [pc, #156]	@ (801516c <__ieee754_fmod+0x214>)
 80150ce:	1aad      	subs	r5, r5, r2
 80150d0:	fa06 f505 	lsl.w	r5, r6, r5
 80150d4:	f04f 0e00 	mov.w	lr, #0
 80150d8:	e794      	b.n	8015004 <__ieee754_fmod+0xac>
 80150da:	4571      	cmp	r1, lr
 80150dc:	bf38      	it	cc
 80150de:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80150e2:	2e00      	cmp	r6, #0
 80150e4:	da05      	bge.n	80150f2 <__ieee754_fmod+0x19a>
 80150e6:	0fce      	lsrs	r6, r1, #31
 80150e8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80150ec:	0049      	lsls	r1, r1, #1
 80150ee:	3801      	subs	r0, #1
 80150f0:	e789      	b.n	8015006 <__ieee754_fmod+0xae>
 80150f2:	ea56 0307 	orrs.w	r3, r6, r7
 80150f6:	f43f af5d 	beq.w	8014fb4 <__ieee754_fmod+0x5c>
 80150fa:	0ffb      	lsrs	r3, r7, #31
 80150fc:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015100:	0079      	lsls	r1, r7, #1
 8015102:	e7f4      	b.n	80150ee <__ieee754_fmod+0x196>
 8015104:	0fc8      	lsrs	r0, r1, #31
 8015106:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801510a:	0049      	lsls	r1, r1, #1
 801510c:	3a01      	subs	r2, #1
 801510e:	e78a      	b.n	8015026 <__ieee754_fmod+0xce>
 8015110:	1a80      	subs	r0, r0, r2
 8015112:	2814      	cmp	r0, #20
 8015114:	dc0c      	bgt.n	8015130 <__ieee754_fmod+0x1d8>
 8015116:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801511a:	fa03 f202 	lsl.w	r2, r3, r2
 801511e:	40c1      	lsrs	r1, r0
 8015120:	430a      	orrs	r2, r1
 8015122:	4103      	asrs	r3, r0
 8015124:	ea43 0104 	orr.w	r1, r3, r4
 8015128:	4610      	mov	r0, r2
 801512a:	ec41 0b10 	vmov	d0, r0, r1
 801512e:	e733      	b.n	8014f98 <__ieee754_fmod+0x40>
 8015130:	281f      	cmp	r0, #31
 8015132:	dc07      	bgt.n	8015144 <__ieee754_fmod+0x1ec>
 8015134:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015138:	40c1      	lsrs	r1, r0
 801513a:	fa03 f202 	lsl.w	r2, r3, r2
 801513e:	430a      	orrs	r2, r1
 8015140:	4623      	mov	r3, r4
 8015142:	e7ef      	b.n	8015124 <__ieee754_fmod+0x1cc>
 8015144:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8015148:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801514c:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8015150:	32e2      	adds	r2, #226	@ 0xe2
 8015152:	fa43 f202 	asr.w	r2, r3, r2
 8015156:	e7f3      	b.n	8015140 <__ieee754_fmod+0x1e8>
 8015158:	7fefffff 	.word	0x7fefffff
 801515c:	7ff00000 	.word	0x7ff00000
 8015160:	08015dd8 	.word	0x08015dd8
 8015164:	fffffbed 	.word	0xfffffbed
 8015168:	fffffc02 	.word	0xfffffc02
 801516c:	fffffbe2 	.word	0xfffffbe2

08015170 <_init>:
 8015170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015172:	bf00      	nop
 8015174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015176:	bc08      	pop	{r3}
 8015178:	469e      	mov	lr, r3
 801517a:	4770      	bx	lr

0801517c <_fini>:
 801517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801517e:	bf00      	nop
 8015180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015182:	bc08      	pop	{r3}
 8015184:	469e      	mov	lr, r3
 8015186:	4770      	bx	lr
