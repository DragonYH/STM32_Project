
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015264  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002480  08015508  08015508  00016508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017988  08017988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017990  08017990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017994  08017994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  08017998  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000266c  240002d0  08017c68  000192d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400293c  08017c68  0001993c  2**0
                  ALLOC
  9 ._D3_Area     00000000  38000000  38000000  0001a010  2**0
                  CONTENTS
 10 ._DTCM_Area   00000010  20000000  20000000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  0001a010  2**0
                  CONTENTS, READONLY
 12 .debug_line   00033dbf  00000000  00000000  0001a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000081  00000000  00000000  0004ddfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00032c24  00000000  00000000  0004de7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006a67  00000000  00000000  00080aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002290  00000000  00000000  00087510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017db81  00000000  00000000  000897a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001a2d  00000000  00000000  00207321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00040273  00000000  00000000  00208d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  00248fc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a010  00000000  00000000  0024907c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  0025308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00253280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080154ec 	.word	0x080154ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	080154ec 	.word	0x080154ec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f011 f8f6 	bl	8011584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003be:	f013 f813 	bl	80133e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f010 fb61 	bl	8010a88 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80003cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80003d0:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 80003d4:	08017998 	.word	0x08017998
  ldr r2, =_sbss
 80003d8:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 80003dc:	2400293c 	.word	0x2400293c

080003e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC3_IRQHandler>
	...

080003e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ea:	2003      	movs	r0, #3
 80003ec:	f001 f9cd 	bl	800178a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80003f0:	f006 faa2 	bl	8006938 <HAL_RCC_GetSysClockFreq>
 80003f4:	4602      	mov	r2, r0
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <HAL_Init+0x68>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	0a1b      	lsrs	r3, r3, #8
 80003fc:	f003 030f 	and.w	r3, r3, #15
 8000400:	4913      	ldr	r1, [pc, #76]	@ (8000450 <HAL_Init+0x6c>)
 8000402:	5ccb      	ldrb	r3, [r1, r3]
 8000404:	f003 031f 	and.w	r3, r3, #31
 8000408:	fa22 f303 	lsr.w	r3, r2, r3
 800040c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_Init+0x68>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 030f 	and.w	r3, r3, #15
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <HAL_Init+0x6c>)
 8000418:	5cd3      	ldrb	r3, [r2, r3]
 800041a:	f003 031f 	and.w	r3, r3, #31
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	fa22 f303 	lsr.w	r3, r2, r3
 8000424:	4a0b      	ldr	r2, [pc, #44]	@ (8000454 <HAL_Init+0x70>)
 8000426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000428:	4a0b      	ldr	r2, [pc, #44]	@ (8000458 <HAL_Init+0x74>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800042e:	200f      	movs	r0, #15
 8000430:	f010 ffd2 	bl	80113d8 <HAL_InitTick>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800043a:	2301      	movs	r3, #1
 800043c:	e002      	b.n	8000444 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800043e:	f010 ffb1 	bl	80113a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	58024400 	.word	0x58024400
 8000450:	08016df4 	.word	0x08016df4
 8000454:	2400009c 	.word	0x2400009c
 8000458:	24000098 	.word	0x24000098

0800045c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_IncTick+0x20>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <HAL_IncTick+0x24>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4413      	add	r3, r2
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <HAL_IncTick+0x24>)
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	24000004 	.word	0x24000004
 8000480:	240002ec 	.word	0x240002ec

08000484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  return uwTick;
 8000488:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <HAL_GetTick+0x14>)
 800048a:	681b      	ldr	r3, [r3, #0]
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	240002ec 	.word	0x240002ec

0800049c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004a4:	f7ff ffee 	bl	8000484 <HAL_GetTick>
 80004a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b4:	d005      	beq.n	80004c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b6:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <HAL_Delay+0x44>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	4413      	add	r3, r2
 80004c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c2:	bf00      	nop
 80004c4:	f7ff ffde 	bl	8000484 <HAL_GetTick>
 80004c8:	4602      	mov	r2, r0
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d8f7      	bhi.n	80004c4 <HAL_Delay+0x28>
  {
  }
}
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000004 	.word	0x24000004

080004e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80004e8:	4b03      	ldr	r3, [pc, #12]	@ (80004f8 <HAL_GetREVID+0x14>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	0c1b      	lsrs	r3, r3, #16
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	5c001000 	.word	0x5c001000

080004fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	609a      	str	r2, [r3, #8]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	431a      	orrs	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000564:	b480      	push	{r7}
 8000566:	b087      	sub	sp, #28
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3360      	adds	r3, #96	@ 0x60
 8000576:	461a      	mov	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	430b      	orrs	r3, r1
 8000592:	431a      	orrs	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000598:	bf00      	nop
 800059a:	371c      	adds	r7, #28
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	f003 031f 	and.w	r3, r3, #31
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	431a      	orrs	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	611a      	str	r2, [r3, #16]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b087      	sub	sp, #28
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3360      	adds	r3, #96	@ 0x60
 80005e6:	461a      	mov	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	431a      	orrs	r2, r3
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	601a      	str	r2, [r3, #0]
  }
}
 8000600:	bf00      	nop
 8000602:	371c      	adds	r7, #28
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3330      	adds	r3, #48	@ 0x30
 800061c:	461a      	mov	r2, r3
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	f003 030c 	and.w	r3, r3, #12
 8000628:	4413      	add	r3, r2
 800062a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	f003 031f 	and.w	r3, r3, #31
 8000636:	211f      	movs	r1, #31
 8000638:	fa01 f303 	lsl.w	r3, r1, r3
 800063c:	43db      	mvns	r3, r3
 800063e:	401a      	ands	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0e9b      	lsrs	r3, r3, #26
 8000644:	f003 011f 	and.w	r1, r3, #31
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	f003 031f 	and.w	r3, r3, #31
 800064e:	fa01 f303 	lsl.w	r3, r1, r3
 8000652:	431a      	orrs	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000658:	bf00      	nop
 800065a:	371c      	adds	r7, #28
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3314      	adds	r3, #20
 8000674:	461a      	mov	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	0e5b      	lsrs	r3, r3, #25
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	4413      	add	r3, r2
 8000682:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	0d1b      	lsrs	r3, r3, #20
 800068c:	f003 031f 	and.w	r3, r3, #31
 8000690:	2107      	movs	r1, #7
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	401a      	ands	r2, r3
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	0d1b      	lsrs	r3, r3, #20
 800069e:	f003 031f 	and.w	r3, r3, #31
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	431a      	orrs	r2, r3
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80006ae:	bf00      	nop
 80006b0:	371c      	adds	r7, #28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80006d4:	43db      	mvns	r3, r3
 80006d6:	401a      	ands	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f003 0318 	and.w	r3, r3, #24
 80006de:	4908      	ldr	r1, [pc, #32]	@ (8000700 <LL_ADC_SetChannelSingleDiff+0x44>)
 80006e0:	40d9      	lsrs	r1, r3
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	400b      	ands	r3, r1
 80006e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80006ea:	431a      	orrs	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	000fffff 	.word	0x000fffff

08000704 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689a      	ldr	r2, [r3, #8]
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000712:	4013      	ands	r3, r2
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	6093      	str	r3, [r2, #8]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	5fffffc0 	.word	0x5fffffc0

08000728 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800073c:	d101      	bne.n	8000742 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800073e:	2301      	movs	r3, #1
 8000740:	e000      	b.n	8000744 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <LL_ADC_EnableInternalRegulator+0x24>)
 800075e:	4013      	ands	r3, r2
 8000760:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	6fffffc0 	.word	0x6fffffc0

08000778 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800078c:	d101      	bne.n	8000792 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800078e:	2301      	movs	r3, #1
 8000790:	e000      	b.n	8000794 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d101      	bne.n	80007b8 <LL_ADC_IsEnabled+0x18>
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <LL_ADC_IsEnabled+0x1a>
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d101      	bne.n	80007de <LL_ADC_REG_IsConversionOngoing+0x18>
 80007da:	2301      	movs	r3, #1
 80007dc:	e000      	b.n	80007e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80007de:	2300      	movs	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f003 0308 	and.w	r3, r3, #8
 80007fc:	2b08      	cmp	r3, #8
 80007fe:	d101      	bne.n	8000804 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000800:	2301      	movs	r3, #1
 8000802:	e000      	b.n	8000806 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b089      	sub	sp, #36	@ 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800081c:	2300      	movs	r3, #0
 800081e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e18f      	b.n	8000b4e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000838:	2b00      	cmp	r3, #0
 800083a:	d109      	bne.n	8000850 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f00f fccd 	bl	80101dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2200      	movs	r2, #0
 8000846:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff67 	bl	8000728 <LL_ADC_IsDeepPowerDownEnabled>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d004      	beq.n	800086a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff4d 	bl	8000704 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff82 	bl	8000778 <LL_ADC_IsInternalRegulatorEnabled>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d114      	bne.n	80008a4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff66 	bl	8000750 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000884:	4b87      	ldr	r3, [pc, #540]	@ (8000aa4 <HAL_ADC_Init+0x290>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	099b      	lsrs	r3, r3, #6
 800088a:	4a87      	ldr	r2, [pc, #540]	@ (8000aa8 <HAL_ADC_Init+0x294>)
 800088c:	fba2 2303 	umull	r2, r3, r2, r3
 8000890:	099b      	lsrs	r3, r3, #6
 8000892:	3301      	adds	r3, #1
 8000894:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000896:	e002      	b.n	800089e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	3b01      	subs	r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f9      	bne.n	8000898 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff65 	bl	8000778 <LL_ADC_IsInternalRegulatorEnabled>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d10d      	bne.n	80008d0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008b8:	f043 0210 	orr.w	r2, r3, #16
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c4:	f043 0201 	orr.w	r2, r3, #1
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff76 	bl	80007c6 <LL_ADC_REG_IsConversionOngoing>
 80008da:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	f040 8129 	bne.w	8000b3c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	f040 8125 	bne.w	8000b3c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008f6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80008fa:	f043 0202 	orr.w	r2, r3, #2
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff4a 	bl	80007a0 <LL_ADC_IsEnabled>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d136      	bne.n	8000980 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a65      	ldr	r2, [pc, #404]	@ (8000aac <HAL_ADC_Init+0x298>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d004      	beq.n	8000926 <HAL_ADC_Init+0x112>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a63      	ldr	r2, [pc, #396]	@ (8000ab0 <HAL_ADC_Init+0x29c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d10e      	bne.n	8000944 <HAL_ADC_Init+0x130>
 8000926:	4861      	ldr	r0, [pc, #388]	@ (8000aac <HAL_ADC_Init+0x298>)
 8000928:	f7ff ff3a 	bl	80007a0 <LL_ADC_IsEnabled>
 800092c:	4604      	mov	r4, r0
 800092e:	4860      	ldr	r0, [pc, #384]	@ (8000ab0 <HAL_ADC_Init+0x29c>)
 8000930:	f7ff ff36 	bl	80007a0 <LL_ADC_IsEnabled>
 8000934:	4603      	mov	r3, r0
 8000936:	4323      	orrs	r3, r4
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf0c      	ite	eq
 800093c:	2301      	moveq	r3, #1
 800093e:	2300      	movne	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	e008      	b.n	8000956 <HAL_ADC_Init+0x142>
 8000944:	485b      	ldr	r0, [pc, #364]	@ (8000ab4 <HAL_ADC_Init+0x2a0>)
 8000946:	f7ff ff2b 	bl	80007a0 <LL_ADC_IsEnabled>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	bf0c      	ite	eq
 8000950:	2301      	moveq	r3, #1
 8000952:	2300      	movne	r3, #0
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d012      	beq.n	8000980 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a53      	ldr	r2, [pc, #332]	@ (8000aac <HAL_ADC_Init+0x298>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d004      	beq.n	800096e <HAL_ADC_Init+0x15a>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a51      	ldr	r2, [pc, #324]	@ (8000ab0 <HAL_ADC_Init+0x29c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d101      	bne.n	8000972 <HAL_ADC_Init+0x15e>
 800096e:	4a52      	ldr	r2, [pc, #328]	@ (8000ab8 <HAL_ADC_Init+0x2a4>)
 8000970:	e000      	b.n	8000974 <HAL_ADC_Init+0x160>
 8000972:	4a52      	ldr	r2, [pc, #328]	@ (8000abc <HAL_ADC_Init+0x2a8>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	4619      	mov	r1, r3
 800097a:	4610      	mov	r0, r2
 800097c:	f7ff fdbe 	bl	80004fc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000980:	f7ff fdb0 	bl	80004e4 <HAL_GetREVID>
 8000984:	4603      	mov	r3, r0
 8000986:	f241 0203 	movw	r2, #4099	@ 0x1003
 800098a:	4293      	cmp	r3, r2
 800098c:	d914      	bls.n	80009b8 <HAL_ADC_Init+0x1a4>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b10      	cmp	r3, #16
 8000994:	d110      	bne.n	80009b8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	7d5b      	ldrb	r3, [r3, #21]
 800099a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009a0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80009a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7f1b      	ldrb	r3, [r3, #28]
 80009ac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80009ae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009b0:	f043 030c 	orr.w	r3, r3, #12
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	e00d      	b.n	80009d4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7d5b      	ldrb	r3, [r3, #21]
 80009bc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009c2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80009c8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7f1b      	ldrb	r3, [r3, #28]
 80009ce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80009d0:	4313      	orrs	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7f1b      	ldrb	r3, [r3, #28]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d106      	bne.n	80009ea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a1b      	ldr	r3, [r3, #32]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	045b      	lsls	r3, r3, #17
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d009      	beq.n	8000a06 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <HAL_ADC_Init+0x2ac>)
 8000a0e:	4013      	ands	r3, r2
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	6812      	ldr	r2, [r2, #0]
 8000a14:	69b9      	ldr	r1, [r7, #24]
 8000a16:	430b      	orrs	r3, r1
 8000a18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fed1 	bl	80007c6 <LL_ADC_REG_IsConversionOngoing>
 8000a24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fede 	bl	80007ec <LL_ADC_INJ_IsConversionOngoing>
 8000a30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d15f      	bne.n	8000af8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d15c      	bne.n	8000af8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7d1b      	ldrb	r3, [r3, #20]
 8000a42:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	68da      	ldr	r2, [r3, #12]
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <HAL_ADC_Init+0x2b0>)
 8000a54:	4013      	ands	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	6812      	ldr	r2, [r2, #0]
 8000a5a:	69b9      	ldr	r1, [r7, #24]
 8000a5c:	430b      	orrs	r3, r1
 8000a5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d130      	bne.n	8000acc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a6e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	691a      	ldr	r2, [r3, #16]
 8000a76:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <HAL_ADC_Init+0x2b4>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000a7e:	3a01      	subs	r2, #1
 8000a80:	0411      	lsls	r1, r2, #16
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000a86:	4311      	orrs	r1, r2
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000a8c:	4311      	orrs	r1, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000a92:	430a      	orrs	r2, r1
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0201 	orr.w	r2, r2, #1
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	e01c      	b.n	8000adc <HAL_ADC_Init+0x2c8>
 8000aa2:	bf00      	nop
 8000aa4:	24000098 	.word	0x24000098
 8000aa8:	053e2d63 	.word	0x053e2d63
 8000aac:	40022000 	.word	0x40022000
 8000ab0:	40022100 	.word	0x40022100
 8000ab4:	58026000 	.word	0x58026000
 8000ab8:	40022300 	.word	0x40022300
 8000abc:	58026300 	.word	0x58026300
 8000ac0:	fff0c003 	.word	0xfff0c003
 8000ac4:	ffffbffc 	.word	0xffffbffc
 8000ac8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	691a      	ldr	r2, [r3, #16]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 0201 	bic.w	r2, r2, #1
 8000ada:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 fb8c 	bl	8001210 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d10c      	bne.n	8000b1a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f023 010f 	bic.w	r1, r3, #15
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b18:	e007      	b.n	8000b2a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f022 020f 	bic.w	r2, r2, #15
 8000b28:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b2e:	f023 0303 	bic.w	r3, r3, #3
 8000b32:	f043 0201 	orr.w	r2, r3, #1
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b3a:	e007      	b.n	8000b4c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b40:	f043 0210 	orr.w	r2, r3, #16
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000b4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	@ 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	bf00      	nop

08000b58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b0a1      	sub	sp, #132	@ 0x84
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	4a65      	ldr	r2, [pc, #404]	@ (8000d08 <HAL_ADC_ConfigChannel+0x1b0>)
 8000b72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d101      	bne.n	8000b82 <HAL_ADC_ConfigChannel+0x2a>
 8000b7e:	2302      	movs	r3, #2
 8000b80:	e32e      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x688>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fe19 	bl	80007c6 <LL_ADC_REG_IsConversionOngoing>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8313 	bne.w	80011c2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db2c      	blt.n	8000bfe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d108      	bne.n	8000bc2 <HAL_ADC_ConfigChannel+0x6a>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	0e9b      	lsrs	r3, r3, #26
 8000bb6:	f003 031f 	and.w	r3, r3, #31
 8000bba:	2201      	movs	r2, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	e016      	b.n	8000bf0 <HAL_ADC_ConfigChannel+0x98>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000bca:	fa93 f3a3 	rbit	r3, r3
 8000bce:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000bd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8000bda:	2320      	movs	r3, #32
 8000bdc:	e003      	b.n	8000be6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8000bde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000be0:	fab3 f383 	clz	r3, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	2201      	movs	r2, #1
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	69d1      	ldr	r1, [r2, #28]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	6859      	ldr	r1, [r3, #4]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f7ff fcfe 	bl	800060c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fdd6 	bl	80007c6 <LL_ADC_REG_IsConversionOngoing>
 8000c1a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fde3 	bl	80007ec <LL_ADC_INJ_IsConversionOngoing>
 8000c26:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 80b8 	bne.w	8000da0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 80b4 	bne.w	8000da0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	461a      	mov	r2, r3
 8000c46:	f7ff fd0d 	bl	8000664 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000c4a:	4b30      	ldr	r3, [pc, #192]	@ (8000d0c <HAL_ADC_ConfigChannel+0x1b4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8000c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000c56:	d10b      	bne.n	8000c70 <HAL_ADC_ConfigChannel+0x118>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	695a      	ldr	r2, [r3, #20]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	e01d      	b.n	8000cac <HAL_ADC_ConfigChannel+0x154>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10b      	bne.n	8000c96 <HAL_ADC_ConfigChannel+0x13e>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	695a      	ldr	r2, [r3, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	089b      	lsrs	r3, r3, #2
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	e00a      	b.n	8000cac <HAL_ADC_ConfigChannel+0x154>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d02c      	beq.n	8000d10 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	6919      	ldr	r1, [r3, #16]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cc4:	f7ff fc4e 	bl	8000564 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	6919      	ldr	r1, [r3, #16]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	7e5b      	ldrb	r3, [r3, #25]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d102      	bne.n	8000cde <HAL_ADC_ConfigChannel+0x186>
 8000cd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000cdc:	e000      	b.n	8000ce0 <HAL_ADC_ConfigChannel+0x188>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	f7ff fc78 	bl	80005d6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	6919      	ldr	r1, [r3, #16]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	7e1b      	ldrb	r3, [r3, #24]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d102      	bne.n	8000cfc <HAL_ADC_ConfigChannel+0x1a4>
 8000cf6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cfa:	e000      	b.n	8000cfe <HAL_ADC_ConfigChannel+0x1a6>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	f7ff fc50 	bl	80005a4 <LL_ADC_SetDataRightShift>
 8000d04:	e04c      	b.n	8000da0 <HAL_ADC_ConfigChannel+0x248>
 8000d06:	bf00      	nop
 8000d08:	47ff0000 	.word	0x47ff0000
 8000d0c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	069b      	lsls	r3, r3, #26
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d107      	bne.n	8000d34 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000d32:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000d3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	069b      	lsls	r3, r3, #26
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d107      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000d56:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	069b      	lsls	r3, r3, #26
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d107      	bne.n	8000d7c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000d7a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000d82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	069b      	lsls	r3, r3, #26
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d107      	bne.n	8000da0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000d9e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fcfb 	bl	80007a0 <LL_ADC_IsEnabled>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f040 8211 	bne.w	80011d4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6818      	ldr	r0, [r3, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f7ff fc7c 	bl	80006bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	4aa1      	ldr	r2, [pc, #644]	@ (8001050 <HAL_ADC_ConfigChannel+0x4f8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	f040 812e 	bne.w	800102c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10b      	bne.n	8000df8 <HAL_ADC_ConfigChannel+0x2a0>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	0e9b      	lsrs	r3, r3, #26
 8000de6:	3301      	adds	r3, #1
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	bf94      	ite	ls
 8000df0:	2301      	movls	r3, #1
 8000df2:	2300      	movhi	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	e019      	b.n	8000e2c <HAL_ADC_ConfigChannel+0x2d4>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8000e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8000e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8000e10:	2320      	movs	r3, #32
 8000e12:	e003      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8000e14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e16:	fab3 f383 	clz	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	2b09      	cmp	r3, #9
 8000e24:	bf94      	ite	ls
 8000e26:	2301      	movls	r3, #1
 8000e28:	2300      	movhi	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d079      	beq.n	8000f24 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d107      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x2f4>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0e9b      	lsrs	r3, r3, #26
 8000e42:	3301      	adds	r3, #1
 8000e44:	069b      	lsls	r3, r3, #26
 8000e46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000e4a:	e015      	b.n	8000e78 <HAL_ADC_ConfigChannel+0x320>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e54:	fa93 f3a3 	rbit	r3, r3
 8000e58:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8000e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8000e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8000e64:	2320      	movs	r3, #32
 8000e66:	e003      	b.n	8000e70 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8000e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e6a:	fab3 f383 	clz	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	069b      	lsls	r3, r3, #26
 8000e74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d109      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x340>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	0e9b      	lsrs	r3, r3, #26
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	2101      	movs	r1, #1
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	e017      	b.n	8000ec8 <HAL_ADC_ConfigChannel+0x370>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8000ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ea8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8000eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	e003      	b.n	8000ebc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8000eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	ea42 0103 	orr.w	r1, r2, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10a      	bne.n	8000eee <HAL_ADC_ConfigChannel+0x396>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	0e9b      	lsrs	r3, r3, #26
 8000ede:	3301      	adds	r3, #1
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	051b      	lsls	r3, r3, #20
 8000eec:	e018      	b.n	8000f20 <HAL_ADC_ConfigChannel+0x3c8>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8000efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8000f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8000f06:	2320      	movs	r3, #32
 8000f08:	e003      	b.n	8000f12 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8000f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f0c:	fab3 f383 	clz	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	3301      	adds	r3, #1
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f20:	430b      	orrs	r3, r1
 8000f22:	e07e      	b.n	8001022 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d107      	bne.n	8000f40 <HAL_ADC_ConfigChannel+0x3e8>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	0e9b      	lsrs	r3, r3, #26
 8000f36:	3301      	adds	r3, #1
 8000f38:	069b      	lsls	r3, r3, #26
 8000f3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000f3e:	e015      	b.n	8000f6c <HAL_ADC_ConfigChannel+0x414>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8000f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8000f58:	2320      	movs	r3, #32
 8000f5a:	e003      	b.n	8000f64 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8000f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f5e:	fab3 f383 	clz	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	3301      	adds	r3, #1
 8000f66:	069b      	lsls	r3, r3, #26
 8000f68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d109      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x434>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	0e9b      	lsrs	r3, r3, #26
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f003 031f 	and.w	r3, r3, #31
 8000f84:	2101      	movs	r1, #1
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	e017      	b.n	8000fbc <HAL_ADC_ConfigChannel+0x464>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa93 f3a3 	rbit	r3, r3
 8000f98:	61bb      	str	r3, [r7, #24]
  return result;
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8000fa4:	2320      	movs	r3, #32
 8000fa6:	e003      	b.n	8000fb0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	fab3 f383 	clz	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	f003 031f 	and.w	r3, r3, #31
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	ea42 0103 	orr.w	r1, r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10d      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x490>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	0e9b      	lsrs	r3, r3, #26
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	3b1e      	subs	r3, #30
 8000fe0:	051b      	lsls	r3, r3, #20
 8000fe2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fe6:	e01b      	b.n	8001020 <HAL_ADC_ConfigChannel+0x4c8>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	60fb      	str	r3, [r7, #12]
  return result;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001000:	2320      	movs	r3, #32
 8001002:	e003      	b.n	800100c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fab3 f383 	clz	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3301      	adds	r3, #1
 800100e:	f003 021f 	and.w	r2, r3, #31
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	3b1e      	subs	r3, #30
 800101a:	051b      	lsls	r3, r3, #20
 800101c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001020:	430b      	orrs	r3, r1
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	6892      	ldr	r2, [r2, #8]
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fb1c 	bl	8000664 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f280 80cf 	bge.w	80011d4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a06      	ldr	r2, [pc, #24]	@ (8001054 <HAL_ADC_ConfigChannel+0x4fc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d004      	beq.n	800104a <HAL_ADC_ConfigChannel+0x4f2>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_ADC_ConfigChannel+0x500>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10a      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x508>
 800104a:	4b04      	ldr	r3, [pc, #16]	@ (800105c <HAL_ADC_ConfigChannel+0x504>)
 800104c:	e009      	b.n	8001062 <HAL_ADC_ConfigChannel+0x50a>
 800104e:	bf00      	nop
 8001050:	47ff0000 	.word	0x47ff0000
 8001054:	40022000 	.word	0x40022000
 8001058:	40022100 	.word	0x40022100
 800105c:	40022300 	.word	0x40022300
 8001060:	4b61      	ldr	r3, [pc, #388]	@ (80011e8 <HAL_ADC_ConfigChannel+0x690>)
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa70 	bl	8000548 <LL_ADC_GetCommonPathInternalCh>
 8001068:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a5f      	ldr	r2, [pc, #380]	@ (80011ec <HAL_ADC_ConfigChannel+0x694>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d004      	beq.n	800107e <HAL_ADC_ConfigChannel+0x526>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a5d      	ldr	r2, [pc, #372]	@ (80011f0 <HAL_ADC_ConfigChannel+0x698>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10e      	bne.n	800109c <HAL_ADC_ConfigChannel+0x544>
 800107e:	485b      	ldr	r0, [pc, #364]	@ (80011ec <HAL_ADC_ConfigChannel+0x694>)
 8001080:	f7ff fb8e 	bl	80007a0 <LL_ADC_IsEnabled>
 8001084:	4604      	mov	r4, r0
 8001086:	485a      	ldr	r0, [pc, #360]	@ (80011f0 <HAL_ADC_ConfigChannel+0x698>)
 8001088:	f7ff fb8a 	bl	80007a0 <LL_ADC_IsEnabled>
 800108c:	4603      	mov	r3, r0
 800108e:	4323      	orrs	r3, r4
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf0c      	ite	eq
 8001094:	2301      	moveq	r3, #1
 8001096:	2300      	movne	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	e008      	b.n	80010ae <HAL_ADC_ConfigChannel+0x556>
 800109c:	4855      	ldr	r0, [pc, #340]	@ (80011f4 <HAL_ADC_ConfigChannel+0x69c>)
 800109e:	f7ff fb7f 	bl	80007a0 <LL_ADC_IsEnabled>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf0c      	ite	eq
 80010a8:	2301      	moveq	r3, #1
 80010aa:	2300      	movne	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d07d      	beq.n	80011ae <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a50      	ldr	r2, [pc, #320]	@ (80011f8 <HAL_ADC_ConfigChannel+0x6a0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d130      	bne.n	800111e <HAL_ADC_ConfigChannel+0x5c6>
 80010bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d12b      	bne.n	800111e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a4a      	ldr	r2, [pc, #296]	@ (80011f4 <HAL_ADC_ConfigChannel+0x69c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	f040 8081 	bne.w	80011d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a45      	ldr	r2, [pc, #276]	@ (80011ec <HAL_ADC_ConfigChannel+0x694>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d004      	beq.n	80010e6 <HAL_ADC_ConfigChannel+0x58e>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a43      	ldr	r2, [pc, #268]	@ (80011f0 <HAL_ADC_ConfigChannel+0x698>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x592>
 80010e6:	4a45      	ldr	r2, [pc, #276]	@ (80011fc <HAL_ADC_ConfigChannel+0x6a4>)
 80010e8:	e000      	b.n	80010ec <HAL_ADC_ConfigChannel+0x594>
 80010ea:	4a3f      	ldr	r2, [pc, #252]	@ (80011e8 <HAL_ADC_ConfigChannel+0x690>)
 80010ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f7ff fa14 	bl	8000522 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010fa:	4b41      	ldr	r3, [pc, #260]	@ (8001200 <HAL_ADC_ConfigChannel+0x6a8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	099b      	lsrs	r3, r3, #6
 8001100:	4a40      	ldr	r2, [pc, #256]	@ (8001204 <HAL_ADC_ConfigChannel+0x6ac>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	099b      	lsrs	r3, r3, #6
 8001108:	3301      	adds	r3, #1
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800110e:	e002      	b.n	8001116 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	3b01      	subs	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f9      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800111c:	e05a      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a39      	ldr	r2, [pc, #228]	@ (8001208 <HAL_ADC_ConfigChannel+0x6b0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d11e      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x60e>
 8001128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800112a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d119      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a2f      	ldr	r2, [pc, #188]	@ (80011f4 <HAL_ADC_ConfigChannel+0x69c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d14b      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a2a      	ldr	r2, [pc, #168]	@ (80011ec <HAL_ADC_ConfigChannel+0x694>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d004      	beq.n	8001150 <HAL_ADC_ConfigChannel+0x5f8>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a29      	ldr	r2, [pc, #164]	@ (80011f0 <HAL_ADC_ConfigChannel+0x698>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d101      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x5fc>
 8001150:	4a2a      	ldr	r2, [pc, #168]	@ (80011fc <HAL_ADC_ConfigChannel+0x6a4>)
 8001152:	e000      	b.n	8001156 <HAL_ADC_ConfigChannel+0x5fe>
 8001154:	4a24      	ldr	r2, [pc, #144]	@ (80011e8 <HAL_ADC_ConfigChannel+0x690>)
 8001156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001158:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800115c:	4619      	mov	r1, r3
 800115e:	4610      	mov	r0, r2
 8001160:	f7ff f9df 	bl	8000522 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001164:	e036      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a28      	ldr	r2, [pc, #160]	@ (800120c <HAL_ADC_ConfigChannel+0x6b4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d131      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x67c>
 8001170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12c      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1d      	ldr	r2, [pc, #116]	@ (80011f4 <HAL_ADC_ConfigChannel+0x69c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d127      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a18      	ldr	r2, [pc, #96]	@ (80011ec <HAL_ADC_ConfigChannel+0x694>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d004      	beq.n	8001198 <HAL_ADC_ConfigChannel+0x640>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a17      	ldr	r2, [pc, #92]	@ (80011f0 <HAL_ADC_ConfigChannel+0x698>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d101      	bne.n	800119c <HAL_ADC_ConfigChannel+0x644>
 8001198:	4a18      	ldr	r2, [pc, #96]	@ (80011fc <HAL_ADC_ConfigChannel+0x6a4>)
 800119a:	e000      	b.n	800119e <HAL_ADC_ConfigChannel+0x646>
 800119c:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <HAL_ADC_ConfigChannel+0x690>)
 800119e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011a4:	4619      	mov	r1, r3
 80011a6:	4610      	mov	r0, r2
 80011a8:	f7ff f9bb 	bl	8000522 <LL_ADC_SetCommonPathInternalCh>
 80011ac:	e012      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011b2:	f043 0220 	orr.w	r2, r3, #32
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80011c0:	e008      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c6:	f043 0220 	orr.w	r2, r3, #32
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80011dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3784      	adds	r7, #132	@ 0x84
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	58026300 	.word	0x58026300
 80011ec:	40022000 	.word	0x40022000
 80011f0:	40022100 	.word	0x40022100
 80011f4:	58026000 	.word	0x58026000
 80011f8:	cb840000 	.word	0xcb840000
 80011fc:	40022300 	.word	0x40022300
 8001200:	24000098 	.word	0x24000098
 8001204:	053e2d63 	.word	0x053e2d63
 8001208:	c7520000 	.word	0xc7520000
 800120c:	cfb80000 	.word	0xcfb80000

08001210 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a7a      	ldr	r2, [pc, #488]	@ (8001408 <ADC_ConfigureBoostMode+0x1f8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d004      	beq.n	800122c <ADC_ConfigureBoostMode+0x1c>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a79      	ldr	r2, [pc, #484]	@ (800140c <ADC_ConfigureBoostMode+0x1fc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d109      	bne.n	8001240 <ADC_ConfigureBoostMode+0x30>
 800122c:	4b78      	ldr	r3, [pc, #480]	@ (8001410 <ADC_ConfigureBoostMode+0x200>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf14      	ite	ne
 8001238:	2301      	movne	r3, #1
 800123a:	2300      	moveq	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	e008      	b.n	8001252 <ADC_ConfigureBoostMode+0x42>
 8001240:	4b74      	ldr	r3, [pc, #464]	@ (8001414 <ADC_ConfigureBoostMode+0x204>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d01c      	beq.n	8001290 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001256:	f005 fce9 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 800125a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001264:	d010      	beq.n	8001288 <ADC_ConfigureBoostMode+0x78>
 8001266:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800126a:	d873      	bhi.n	8001354 <ADC_ConfigureBoostMode+0x144>
 800126c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001270:	d002      	beq.n	8001278 <ADC_ConfigureBoostMode+0x68>
 8001272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001276:	d16d      	bne.n	8001354 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	0c1b      	lsrs	r3, r3, #16
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	60fb      	str	r3, [r7, #12]
        break;
 8001286:	e068      	b.n	800135a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	60fb      	str	r3, [r7, #12]
        break;
 800128e:	e064      	b.n	800135a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001290:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001294:	f04f 0100 	mov.w	r1, #0
 8001298:	f006 ff5a 	bl	8008150 <HAL_RCCEx_GetPeriphCLKFreq>
 800129c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80012a6:	d051      	beq.n	800134c <ADC_ConfigureBoostMode+0x13c>
 80012a8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80012ac:	d854      	bhi.n	8001358 <ADC_ConfigureBoostMode+0x148>
 80012ae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80012b2:	d047      	beq.n	8001344 <ADC_ConfigureBoostMode+0x134>
 80012b4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80012b8:	d84e      	bhi.n	8001358 <ADC_ConfigureBoostMode+0x148>
 80012ba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80012be:	d03d      	beq.n	800133c <ADC_ConfigureBoostMode+0x12c>
 80012c0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80012c4:	d848      	bhi.n	8001358 <ADC_ConfigureBoostMode+0x148>
 80012c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80012ca:	d033      	beq.n	8001334 <ADC_ConfigureBoostMode+0x124>
 80012cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80012d0:	d842      	bhi.n	8001358 <ADC_ConfigureBoostMode+0x148>
 80012d2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80012d6:	d029      	beq.n	800132c <ADC_ConfigureBoostMode+0x11c>
 80012d8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80012dc:	d83c      	bhi.n	8001358 <ADC_ConfigureBoostMode+0x148>
 80012de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80012e2:	d01a      	beq.n	800131a <ADC_ConfigureBoostMode+0x10a>
 80012e4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80012e8:	d836      	bhi.n	8001358 <ADC_ConfigureBoostMode+0x148>
 80012ea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80012ee:	d014      	beq.n	800131a <ADC_ConfigureBoostMode+0x10a>
 80012f0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80012f4:	d830      	bhi.n	8001358 <ADC_ConfigureBoostMode+0x148>
 80012f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80012fa:	d00e      	beq.n	800131a <ADC_ConfigureBoostMode+0x10a>
 80012fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001300:	d82a      	bhi.n	8001358 <ADC_ConfigureBoostMode+0x148>
 8001302:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001306:	d008      	beq.n	800131a <ADC_ConfigureBoostMode+0x10a>
 8001308:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800130c:	d824      	bhi.n	8001358 <ADC_ConfigureBoostMode+0x148>
 800130e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001312:	d002      	beq.n	800131a <ADC_ConfigureBoostMode+0x10a>
 8001314:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001318:	d11e      	bne.n	8001358 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	0c9b      	lsrs	r3, r3, #18
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	60fb      	str	r3, [r7, #12]
        break;
 800132a:	e016      	b.n	800135a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	60fb      	str	r3, [r7, #12]
        break;
 8001332:	e012      	b.n	800135a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	60fb      	str	r3, [r7, #12]
        break;
 800133a:	e00e      	b.n	800135a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	099b      	lsrs	r3, r3, #6
 8001340:	60fb      	str	r3, [r7, #12]
        break;
 8001342:	e00a      	b.n	800135a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	09db      	lsrs	r3, r3, #7
 8001348:	60fb      	str	r3, [r7, #12]
        break;
 800134a:	e006      	b.n	800135a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	60fb      	str	r3, [r7, #12]
        break;
 8001352:	e002      	b.n	800135a <ADC_ConfigureBoostMode+0x14a>
        break;
 8001354:	bf00      	nop
 8001356:	e000      	b.n	800135a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8001358:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800135a:	f7ff f8c3 	bl	80004e4 <HAL_GetREVID>
 800135e:	4603      	mov	r3, r0
 8001360:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001364:	4293      	cmp	r3, r2
 8001366:	d815      	bhi.n	8001394 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4a2b      	ldr	r2, [pc, #172]	@ (8001418 <ADC_ConfigureBoostMode+0x208>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d908      	bls.n	8001382 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800137e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001380:	e03e      	b.n	8001400 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001390:	609a      	str	r2, [r3, #8]
}
 8001392:	e035      	b.n	8001400 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	085b      	lsrs	r3, r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4a1f      	ldr	r2, [pc, #124]	@ (800141c <ADC_ConfigureBoostMode+0x20c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d808      	bhi.n	80013b4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80013b0:	609a      	str	r2, [r3, #8]
}
 80013b2:	e025      	b.n	8001400 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001420 <ADC_ConfigureBoostMode+0x210>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d80a      	bhi.n	80013d2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013ce:	609a      	str	r2, [r3, #8]
}
 80013d0:	e016      	b.n	8001400 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4a13      	ldr	r2, [pc, #76]	@ (8001424 <ADC_ConfigureBoostMode+0x214>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d80a      	bhi.n	80013f0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013ec:	609a      	str	r2, [r3, #8]
}
 80013ee:	e007      	b.n	8001400 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80013fe:	609a      	str	r2, [r3, #8]
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40022000 	.word	0x40022000
 800140c:	40022100 	.word	0x40022100
 8001410:	40022300 	.word	0x40022300
 8001414:	58026300 	.word	0x58026300
 8001418:	01312d00 	.word	0x01312d00
 800141c:	005f5e10 	.word	0x005f5e10
 8001420:	00bebc20 	.word	0x00bebc20
 8001424:	017d7840 	.word	0x017d7840

08001428 <LL_ADC_IsEnabled>:
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <LL_ADC_IsEnabled+0x18>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <LL_ADC_IsEnabled+0x1a>
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_ADC_REG_IsConversionOngoing>:
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	2b04      	cmp	r3, #4
 8001460:	d101      	bne.n	8001466 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b09f      	sub	sp, #124	@ 0x7c
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800148e:	2302      	movs	r3, #2
 8001490:	e0be      	b.n	8001610 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800149e:	2300      	movs	r3, #0
 80014a0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001618 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d102      	bne.n	80014b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80014ac:	4b5b      	ldr	r3, [pc, #364]	@ (800161c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	e001      	b.n	80014b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10b      	bne.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c0:	f043 0220 	orr.w	r2, r3, #32
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e09d      	b.n	8001610 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffb9 	bl	800144e <LL_ADC_REG_IsConversionOngoing>
 80014dc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ffb3 	bl	800144e <LL_ADC_REG_IsConversionOngoing>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d17f      	bne.n	80015ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80014ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d17c      	bne.n	80015ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a47      	ldr	r2, [pc, #284]	@ (8001618 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d004      	beq.n	8001508 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a46      	ldr	r2, [pc, #280]	@ (800161c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d101      	bne.n	800150c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001508:	4b45      	ldr	r3, [pc, #276]	@ (8001620 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800150a:	e000      	b.n	800150e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800150c:	4b45      	ldr	r3, [pc, #276]	@ (8001624 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800150e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d039      	beq.n	800158c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	431a      	orrs	r2, r3
 8001526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001528:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a3a      	ldr	r2, [pc, #232]	@ (8001618 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d004      	beq.n	800153e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a38      	ldr	r2, [pc, #224]	@ (800161c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10e      	bne.n	800155c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800153e:	4836      	ldr	r0, [pc, #216]	@ (8001618 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001540:	f7ff ff72 	bl	8001428 <LL_ADC_IsEnabled>
 8001544:	4604      	mov	r4, r0
 8001546:	4835      	ldr	r0, [pc, #212]	@ (800161c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001548:	f7ff ff6e 	bl	8001428 <LL_ADC_IsEnabled>
 800154c:	4603      	mov	r3, r0
 800154e:	4323      	orrs	r3, r4
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	e008      	b.n	800156e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800155c:	4832      	ldr	r0, [pc, #200]	@ (8001628 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800155e:	f7ff ff63 	bl	8001428 <LL_ADC_IsEnabled>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf0c      	ite	eq
 8001568:	2301      	moveq	r3, #1
 800156a:	2300      	movne	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d047      	beq.n	8001602 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001578:	4013      	ands	r3, r2
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	6811      	ldr	r1, [r2, #0]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	6892      	ldr	r2, [r2, #8]
 8001582:	430a      	orrs	r2, r1
 8001584:	431a      	orrs	r2, r3
 8001586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001588:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800158a:	e03a      	b.n	8001602 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800158c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001596:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1e      	ldr	r2, [pc, #120]	@ (8001618 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d004      	beq.n	80015ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d10e      	bne.n	80015ca <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80015ac:	481a      	ldr	r0, [pc, #104]	@ (8001618 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80015ae:	f7ff ff3b 	bl	8001428 <LL_ADC_IsEnabled>
 80015b2:	4604      	mov	r4, r0
 80015b4:	4819      	ldr	r0, [pc, #100]	@ (800161c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80015b6:	f7ff ff37 	bl	8001428 <LL_ADC_IsEnabled>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4323      	orrs	r3, r4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf0c      	ite	eq
 80015c2:	2301      	moveq	r3, #1
 80015c4:	2300      	movne	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	e008      	b.n	80015dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80015ca:	4817      	ldr	r0, [pc, #92]	@ (8001628 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80015cc:	f7ff ff2c 	bl	8001428 <LL_ADC_IsEnabled>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf0c      	ite	eq
 80015d6:	2301      	moveq	r3, #1
 80015d8:	2300      	movne	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d010      	beq.n	8001602 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80015e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80015ec:	e009      	b.n	8001602 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f2:	f043 0220 	orr.w	r2, r3, #32
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001600:	e000      	b.n	8001604 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001602:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800160c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001610:	4618      	mov	r0, r3
 8001612:	377c      	adds	r7, #124	@ 0x7c
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	40022000 	.word	0x40022000
 800161c:	40022100 	.word	0x40022100
 8001620:	40022300 	.word	0x40022300
 8001624:	58026300 	.word	0x58026300
 8001628:	58026000 	.word	0x58026000
 800162c:	fffff0e0 	.word	0xfffff0e0

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <__NVIC_SetPriorityGrouping+0x40>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 800165a:	4313      	orrs	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <__NVIC_SetPriorityGrouping+0x40>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	05fa0000 	.word	0x05fa0000

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	@ (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	@ (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	@ (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	@ 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ff4c 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ae:	f7ff ff63 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	68b9      	ldr	r1, [r7, #8]
 80017b8:	6978      	ldr	r0, [r7, #20]
 80017ba:	f7ff ffb3 	bl	8001724 <NVIC_EncodePriority>
 80017be:	4602      	mov	r2, r0
 80017c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff82 	bl	80016d0 <__NVIC_SetPriority>
}
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff56 	bl	8001694 <__NVIC_EnableIRQ>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80017f4:	f3bf 8f5f 	dmb	sy
}
 80017f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <HAL_MPU_Disable+0x28>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <HAL_MPU_Disable+0x28>)
 8001800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001804:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001806:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_MPU_Disable+0x2c>)
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00
 800181c:	e000ed90 	.word	0xe000ed90

08001820 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001828:	4a0b      	ldr	r2, [pc, #44]	@ (8001858 <HAL_MPU_Enable+0x38>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_MPU_Enable+0x3c>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	4a09      	ldr	r2, [pc, #36]	@ (800185c <HAL_MPU_Enable+0x3c>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800183e:	f3bf 8f4f 	dsb	sy
}
 8001842:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001844:	f3bf 8f6f 	isb	sy
}
 8001848:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed90 	.word	0xe000ed90
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	785a      	ldrb	r2, [r3, #1]
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_MPU_ConfigRegion+0x7c>)
 800186e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_MPU_ConfigRegion+0x7c>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	4a19      	ldr	r2, [pc, #100]	@ (80018dc <HAL_MPU_ConfigRegion+0x7c>)
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800187c:	4a17      	ldr	r2, [pc, #92]	@ (80018dc <HAL_MPU_ConfigRegion+0x7c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7b1b      	ldrb	r3, [r3, #12]
 8001888:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7adb      	ldrb	r3, [r3, #11]
 800188e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001890:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7a9b      	ldrb	r3, [r3, #10]
 8001896:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001898:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7b5b      	ldrb	r3, [r3, #13]
 800189e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7b9b      	ldrb	r3, [r3, #14]
 80018a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7bdb      	ldrb	r3, [r3, #15]
 80018ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7a5b      	ldrb	r3, [r3, #9]
 80018b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7a1b      	ldrb	r3, [r3, #8]
 80018be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018cc:	6113      	str	r3, [r2, #16]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed90 	.word	0xe000ed90

080018e0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e014      	b.n	800191c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	791b      	ldrb	r3, [r3, #4]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f00e fd66 	bl	80103d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e046      	b.n	80019c6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	795b      	ldrb	r3, [r3, #5]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_DAC_Start+0x20>
 8001940:	2302      	movs	r3, #2
 8001942:	e040      	b.n	80019c6 <HAL_DAC_Start+0xa2>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2202      	movs	r2, #2
 800194e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	2201      	movs	r2, #1
 800195e:	409a      	lsls	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10f      	bne.n	800198e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001978:	2b02      	cmp	r3, #2
 800197a:	d11d      	bne.n	80019b8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	e014      	b.n	80019b8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2102      	movs	r1, #2
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d107      	bne.n	80019b8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0202 	orr.w	r2, r2, #2
 80019b6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d01d      	beq.n	8001a30 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d018      	beq.n	8001a30 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2204      	movs	r2, #4
 8001a02:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a28:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f851 	bl	8001ad2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01d      	beq.n	8001a76 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d018      	beq.n	8001a76 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2204      	movs	r2, #4
 8001a48:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f043 0202 	orr.w	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f97b 	bl	8001d6c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b087      	sub	sp, #28
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e015      	b.n	8001ac6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	3308      	adds	r3, #8
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	e004      	b.n	8001abc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3314      	adds	r3, #20
 8001aba:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	@ 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_DAC_ConfigChannel+0x1e>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e12a      	b.n	8001d60 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	795b      	ldrb	r3, [r3, #5]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_DAC_ConfigChannel+0x2e>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e124      	b.n	8001d60 <HAL_DAC_ConfigChannel+0x278>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d17a      	bne.n	8001c20 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b2a:	f7fe fcab 	bl	8000484 <HAL_GetTick>
 8001b2e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d13d      	bne.n	8001bb2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b36:	e018      	b.n	8001b6a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b38:	f7fe fca4 	bl	8000484 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d911      	bls.n	8001b6a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b4c:	4b86      	ldr	r3, [pc, #536]	@ (8001d68 <HAL_DAC_ConfigChannel+0x280>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00a      	beq.n	8001b6a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	f043 0208 	orr.w	r2, r3, #8
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2203      	movs	r2, #3
 8001b64:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0fa      	b.n	8001d60 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b70:	4b7d      	ldr	r3, [pc, #500]	@ (8001d68 <HAL_DAC_ConfigChannel+0x280>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1df      	bne.n	8001b38 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	6992      	ldr	r2, [r2, #24]
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b82:	e020      	b.n	8001bc6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b84:	f7fe fc7e 	bl	8000484 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d90f      	bls.n	8001bb2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da0a      	bge.n	8001bb2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f043 0208 	orr.w	r2, r3, #8
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2203      	movs	r2, #3
 8001bac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0d6      	b.n	8001d60 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	dbe3      	blt.n	8001b84 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	6992      	ldr	r2, [r2, #24]
 8001bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	ea02 0103 	and.w	r1, r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	69da      	ldr	r2, [r3, #28]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	21ff      	movs	r1, #255	@ 0xff
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	ea02 0103 	and.w	r1, r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d11d      	bne.n	8001c64 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c2e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	221f      	movs	r2, #31
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c6a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2207      	movs	r2, #7
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d102      	bne.n	8001c8e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c8c:	e00f      	b.n	8001cae <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d102      	bne.n	8001c9c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001c96:	2301      	movs	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9a:	e008      	b.n	8001cae <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca8:	e001      	b.n	8001cae <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6819      	ldr	r1, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43da      	mvns	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6819      	ldr	r1, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	22c0      	movs	r2, #192	@ 0xc0
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20008000 	.word	0x20008000

08001d6c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7fe fb7c 	bl	8000484 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e316      	b.n	80023c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a66      	ldr	r2, [pc, #408]	@ (8001f38 <HAL_DMA_Init+0x1b8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d04a      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a65      	ldr	r2, [pc, #404]	@ (8001f3c <HAL_DMA_Init+0x1bc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d045      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a63      	ldr	r2, [pc, #396]	@ (8001f40 <HAL_DMA_Init+0x1c0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d040      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a62      	ldr	r2, [pc, #392]	@ (8001f44 <HAL_DMA_Init+0x1c4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d03b      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a60      	ldr	r2, [pc, #384]	@ (8001f48 <HAL_DMA_Init+0x1c8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d036      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a5f      	ldr	r2, [pc, #380]	@ (8001f4c <HAL_DMA_Init+0x1cc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d031      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f50 <HAL_DMA_Init+0x1d0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d02c      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f54 <HAL_DMA_Init+0x1d4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d027      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a5a      	ldr	r2, [pc, #360]	@ (8001f58 <HAL_DMA_Init+0x1d8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d022      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a59      	ldr	r2, [pc, #356]	@ (8001f5c <HAL_DMA_Init+0x1dc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d01d      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a57      	ldr	r2, [pc, #348]	@ (8001f60 <HAL_DMA_Init+0x1e0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d018      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a56      	ldr	r2, [pc, #344]	@ (8001f64 <HAL_DMA_Init+0x1e4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d013      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a54      	ldr	r2, [pc, #336]	@ (8001f68 <HAL_DMA_Init+0x1e8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00e      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a53      	ldr	r2, [pc, #332]	@ (8001f6c <HAL_DMA_Init+0x1ec>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d009      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a51      	ldr	r2, [pc, #324]	@ (8001f70 <HAL_DMA_Init+0x1f0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d004      	beq.n	8001e38 <HAL_DMA_Init+0xb8>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a50      	ldr	r2, [pc, #320]	@ (8001f74 <HAL_DMA_Init+0x1f4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_DMA_Init+0xbc>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_DMA_Init+0xbe>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 813b 	beq.w	80020ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a37      	ldr	r2, [pc, #220]	@ (8001f38 <HAL_DMA_Init+0x1b8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d04a      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a36      	ldr	r2, [pc, #216]	@ (8001f3c <HAL_DMA_Init+0x1bc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d045      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a34      	ldr	r2, [pc, #208]	@ (8001f40 <HAL_DMA_Init+0x1c0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d040      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a33      	ldr	r2, [pc, #204]	@ (8001f44 <HAL_DMA_Init+0x1c4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d03b      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a31      	ldr	r2, [pc, #196]	@ (8001f48 <HAL_DMA_Init+0x1c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d036      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a30      	ldr	r2, [pc, #192]	@ (8001f4c <HAL_DMA_Init+0x1cc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d031      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2e      	ldr	r2, [pc, #184]	@ (8001f50 <HAL_DMA_Init+0x1d0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d02c      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f54 <HAL_DMA_Init+0x1d4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d027      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f58 <HAL_DMA_Init+0x1d8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d022      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f5c <HAL_DMA_Init+0x1dc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d01d      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a28      	ldr	r2, [pc, #160]	@ (8001f60 <HAL_DMA_Init+0x1e0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d018      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a27      	ldr	r2, [pc, #156]	@ (8001f64 <HAL_DMA_Init+0x1e4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a25      	ldr	r2, [pc, #148]	@ (8001f68 <HAL_DMA_Init+0x1e8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00e      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a24      	ldr	r2, [pc, #144]	@ (8001f6c <HAL_DMA_Init+0x1ec>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a22      	ldr	r2, [pc, #136]	@ (8001f70 <HAL_DMA_Init+0x1f0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_DMA_Init+0x174>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a21      	ldr	r2, [pc, #132]	@ (8001f74 <HAL_DMA_Init+0x1f4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d108      	bne.n	8001f06 <HAL_DMA_Init+0x186>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e007      	b.n	8001f16 <HAL_DMA_Init+0x196>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f16:	e02f      	b.n	8001f78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f18:	f7fe fab4 	bl	8000484 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d928      	bls.n	8001f78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e246      	b.n	80023c6 <HAL_DMA_Init+0x646>
 8001f38:	40020010 	.word	0x40020010
 8001f3c:	40020028 	.word	0x40020028
 8001f40:	40020040 	.word	0x40020040
 8001f44:	40020058 	.word	0x40020058
 8001f48:	40020070 	.word	0x40020070
 8001f4c:	40020088 	.word	0x40020088
 8001f50:	400200a0 	.word	0x400200a0
 8001f54:	400200b8 	.word	0x400200b8
 8001f58:	40020410 	.word	0x40020410
 8001f5c:	40020428 	.word	0x40020428
 8001f60:	40020440 	.word	0x40020440
 8001f64:	40020458 	.word	0x40020458
 8001f68:	40020470 	.word	0x40020470
 8001f6c:	40020488 	.word	0x40020488
 8001f70:	400204a0 	.word	0x400204a0
 8001f74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1c8      	bne.n	8001f18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4b83      	ldr	r3, [pc, #524]	@ (80021a0 <HAL_DMA_Init+0x420>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d107      	bne.n	8001fdc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001fdc:	4b71      	ldr	r3, [pc, #452]	@ (80021a4 <HAL_DMA_Init+0x424>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b71      	ldr	r3, [pc, #452]	@ (80021a8 <HAL_DMA_Init+0x428>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fe8:	d328      	bcc.n	800203c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b28      	cmp	r3, #40	@ 0x28
 8001ff0:	d903      	bls.n	8001ffa <HAL_DMA_Init+0x27a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ff8:	d917      	bls.n	800202a <HAL_DMA_Init+0x2aa>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b3e      	cmp	r3, #62	@ 0x3e
 8002000:	d903      	bls.n	800200a <HAL_DMA_Init+0x28a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b42      	cmp	r3, #66	@ 0x42
 8002008:	d90f      	bls.n	800202a <HAL_DMA_Init+0x2aa>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b46      	cmp	r3, #70	@ 0x46
 8002010:	d903      	bls.n	800201a <HAL_DMA_Init+0x29a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b48      	cmp	r3, #72	@ 0x48
 8002018:	d907      	bls.n	800202a <HAL_DMA_Init+0x2aa>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002020:	d905      	bls.n	800202e <HAL_DMA_Init+0x2ae>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b52      	cmp	r3, #82	@ 0x52
 8002028:	d801      	bhi.n	800202e <HAL_DMA_Init+0x2ae>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_DMA_Init+0x2b0>
 800202e:	2300      	movs	r3, #0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800203a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f023 0307 	bic.w	r3, r3, #7
 8002052:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	2b04      	cmp	r3, #4
 8002064:	d117      	bne.n	8002096 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00e      	beq.n	8002096 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f001 f9b9 	bl	80033f0 <DMA_CheckFifoParam>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2240      	movs	r2, #64	@ 0x40
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e197      	b.n	80023c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f001 f8f4 	bl	800328c <DMA_CalcBaseAndBitshift>
 80020a4:	4603      	mov	r3, r0
 80020a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	223f      	movs	r2, #63	@ 0x3f
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	e0cd      	b.n	8002256 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a3b      	ldr	r2, [pc, #236]	@ (80021ac <HAL_DMA_Init+0x42c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d022      	beq.n	800210a <HAL_DMA_Init+0x38a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a39      	ldr	r2, [pc, #228]	@ (80021b0 <HAL_DMA_Init+0x430>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01d      	beq.n	800210a <HAL_DMA_Init+0x38a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a38      	ldr	r2, [pc, #224]	@ (80021b4 <HAL_DMA_Init+0x434>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d018      	beq.n	800210a <HAL_DMA_Init+0x38a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a36      	ldr	r2, [pc, #216]	@ (80021b8 <HAL_DMA_Init+0x438>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_DMA_Init+0x38a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a35      	ldr	r2, [pc, #212]	@ (80021bc <HAL_DMA_Init+0x43c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00e      	beq.n	800210a <HAL_DMA_Init+0x38a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a33      	ldr	r2, [pc, #204]	@ (80021c0 <HAL_DMA_Init+0x440>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d009      	beq.n	800210a <HAL_DMA_Init+0x38a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a32      	ldr	r2, [pc, #200]	@ (80021c4 <HAL_DMA_Init+0x444>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d004      	beq.n	800210a <HAL_DMA_Init+0x38a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a30      	ldr	r2, [pc, #192]	@ (80021c8 <HAL_DMA_Init+0x448>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_DMA_Init+0x38e>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_DMA_Init+0x390>
 800210e:	2300      	movs	r3, #0
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8097 	beq.w	8002244 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a24      	ldr	r2, [pc, #144]	@ (80021ac <HAL_DMA_Init+0x42c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d021      	beq.n	8002164 <HAL_DMA_Init+0x3e4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a22      	ldr	r2, [pc, #136]	@ (80021b0 <HAL_DMA_Init+0x430>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01c      	beq.n	8002164 <HAL_DMA_Init+0x3e4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a21      	ldr	r2, [pc, #132]	@ (80021b4 <HAL_DMA_Init+0x434>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d017      	beq.n	8002164 <HAL_DMA_Init+0x3e4>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <HAL_DMA_Init+0x438>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d012      	beq.n	8002164 <HAL_DMA_Init+0x3e4>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1e      	ldr	r2, [pc, #120]	@ (80021bc <HAL_DMA_Init+0x43c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00d      	beq.n	8002164 <HAL_DMA_Init+0x3e4>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1c      	ldr	r2, [pc, #112]	@ (80021c0 <HAL_DMA_Init+0x440>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d008      	beq.n	8002164 <HAL_DMA_Init+0x3e4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1b      	ldr	r2, [pc, #108]	@ (80021c4 <HAL_DMA_Init+0x444>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <HAL_DMA_Init+0x3e4>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a19      	ldr	r2, [pc, #100]	@ (80021c8 <HAL_DMA_Init+0x448>)
 8002162:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <HAL_DMA_Init+0x44c>)
 8002180:	4013      	ands	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b40      	cmp	r3, #64	@ 0x40
 800218a:	d021      	beq.n	80021d0 <HAL_DMA_Init+0x450>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b80      	cmp	r3, #128	@ 0x80
 8002192:	d102      	bne.n	800219a <HAL_DMA_Init+0x41a>
 8002194:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002198:	e01b      	b.n	80021d2 <HAL_DMA_Init+0x452>
 800219a:	2300      	movs	r3, #0
 800219c:	e019      	b.n	80021d2 <HAL_DMA_Init+0x452>
 800219e:	bf00      	nop
 80021a0:	fe10803f 	.word	0xfe10803f
 80021a4:	5c001000 	.word	0x5c001000
 80021a8:	ffff0000 	.word	0xffff0000
 80021ac:	58025408 	.word	0x58025408
 80021b0:	5802541c 	.word	0x5802541c
 80021b4:	58025430 	.word	0x58025430
 80021b8:	58025444 	.word	0x58025444
 80021bc:	58025458 	.word	0x58025458
 80021c0:	5802546c 	.word	0x5802546c
 80021c4:	58025480 	.word	0x58025480
 80021c8:	58025494 	.word	0x58025494
 80021cc:	fffe000f 	.word	0xfffe000f
 80021d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68d2      	ldr	r2, [r2, #12]
 80021d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002200:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b6e      	ldr	r3, [pc, #440]	@ (80023d0 <HAL_DMA_Init+0x650>)
 8002218:	4413      	add	r3, r2
 800221a:	4a6e      	ldr	r2, [pc, #440]	@ (80023d4 <HAL_DMA_Init+0x654>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	009a      	lsls	r2, r3, #2
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f001 f82f 	bl	800328c <DMA_CalcBaseAndBitshift>
 800222e:	4603      	mov	r3, r0
 8002230:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2201      	movs	r2, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	e008      	b.n	8002256 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2240      	movs	r2, #64	@ 0x40
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2203      	movs	r2, #3
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0b7      	b.n	80023c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a5f      	ldr	r2, [pc, #380]	@ (80023d8 <HAL_DMA_Init+0x658>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d072      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a5d      	ldr	r2, [pc, #372]	@ (80023dc <HAL_DMA_Init+0x65c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d06d      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5c      	ldr	r2, [pc, #368]	@ (80023e0 <HAL_DMA_Init+0x660>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d068      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a5a      	ldr	r2, [pc, #360]	@ (80023e4 <HAL_DMA_Init+0x664>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d063      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a59      	ldr	r2, [pc, #356]	@ (80023e8 <HAL_DMA_Init+0x668>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d05e      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a57      	ldr	r2, [pc, #348]	@ (80023ec <HAL_DMA_Init+0x66c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d059      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a56      	ldr	r2, [pc, #344]	@ (80023f0 <HAL_DMA_Init+0x670>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d054      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a54      	ldr	r2, [pc, #336]	@ (80023f4 <HAL_DMA_Init+0x674>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d04f      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a53      	ldr	r2, [pc, #332]	@ (80023f8 <HAL_DMA_Init+0x678>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d04a      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a51      	ldr	r2, [pc, #324]	@ (80023fc <HAL_DMA_Init+0x67c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d045      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a50      	ldr	r2, [pc, #320]	@ (8002400 <HAL_DMA_Init+0x680>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d040      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002404 <HAL_DMA_Init+0x684>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d03b      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002408 <HAL_DMA_Init+0x688>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d036      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a4b      	ldr	r2, [pc, #300]	@ (800240c <HAL_DMA_Init+0x68c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d031      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002410 <HAL_DMA_Init+0x690>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d02c      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a48      	ldr	r2, [pc, #288]	@ (8002414 <HAL_DMA_Init+0x694>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d027      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a47      	ldr	r2, [pc, #284]	@ (8002418 <HAL_DMA_Init+0x698>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d022      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a45      	ldr	r2, [pc, #276]	@ (800241c <HAL_DMA_Init+0x69c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01d      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a44      	ldr	r2, [pc, #272]	@ (8002420 <HAL_DMA_Init+0x6a0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d018      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a42      	ldr	r2, [pc, #264]	@ (8002424 <HAL_DMA_Init+0x6a4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a41      	ldr	r2, [pc, #260]	@ (8002428 <HAL_DMA_Init+0x6a8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00e      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a3f      	ldr	r2, [pc, #252]	@ (800242c <HAL_DMA_Init+0x6ac>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a3e      	ldr	r2, [pc, #248]	@ (8002430 <HAL_DMA_Init+0x6b0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_DMA_Init+0x5c6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a3c      	ldr	r2, [pc, #240]	@ (8002434 <HAL_DMA_Init+0x6b4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_DMA_Init+0x5ca>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_DMA_Init+0x5cc>
 800234a:	2300      	movs	r3, #0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d032      	beq.n	80023b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f001 f8c9 	bl	80034e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b80      	cmp	r3, #128	@ 0x80
 800235c:	d102      	bne.n	8002364 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002378:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d010      	beq.n	80023a4 <HAL_DMA_Init+0x624>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b08      	cmp	r3, #8
 8002388:	d80c      	bhi.n	80023a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f001 f946 	bl	800361c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	e008      	b.n	80023b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	a7fdabf8 	.word	0xa7fdabf8
 80023d4:	cccccccd 	.word	0xcccccccd
 80023d8:	40020010 	.word	0x40020010
 80023dc:	40020028 	.word	0x40020028
 80023e0:	40020040 	.word	0x40020040
 80023e4:	40020058 	.word	0x40020058
 80023e8:	40020070 	.word	0x40020070
 80023ec:	40020088 	.word	0x40020088
 80023f0:	400200a0 	.word	0x400200a0
 80023f4:	400200b8 	.word	0x400200b8
 80023f8:	40020410 	.word	0x40020410
 80023fc:	40020428 	.word	0x40020428
 8002400:	40020440 	.word	0x40020440
 8002404:	40020458 	.word	0x40020458
 8002408:	40020470 	.word	0x40020470
 800240c:	40020488 	.word	0x40020488
 8002410:	400204a0 	.word	0x400204a0
 8002414:	400204b8 	.word	0x400204b8
 8002418:	58025408 	.word	0x58025408
 800241c:	5802541c 	.word	0x5802541c
 8002420:	58025430 	.word	0x58025430
 8002424:	58025444 	.word	0x58025444
 8002428:	58025458 	.word	0x58025458
 800242c:	5802546c 	.word	0x5802546c
 8002430:	58025480 	.word	0x58025480
 8002434:	58025494 	.word	0x58025494

08002438 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	@ 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002444:	4b67      	ldr	r3, [pc, #412]	@ (80025e4 <HAL_DMA_IRQHandler+0x1ac>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a67      	ldr	r2, [pc, #412]	@ (80025e8 <HAL_DMA_IRQHandler+0x1b0>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0a9b      	lsrs	r3, r3, #10
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002456:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a5f      	ldr	r2, [pc, #380]	@ (80025ec <HAL_DMA_IRQHandler+0x1b4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d04a      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a5d      	ldr	r2, [pc, #372]	@ (80025f0 <HAL_DMA_IRQHandler+0x1b8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d045      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a5c      	ldr	r2, [pc, #368]	@ (80025f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d040      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a5a      	ldr	r2, [pc, #360]	@ (80025f8 <HAL_DMA_IRQHandler+0x1c0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d03b      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a59      	ldr	r2, [pc, #356]	@ (80025fc <HAL_DMA_IRQHandler+0x1c4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d036      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a57      	ldr	r2, [pc, #348]	@ (8002600 <HAL_DMA_IRQHandler+0x1c8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d031      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a56      	ldr	r2, [pc, #344]	@ (8002604 <HAL_DMA_IRQHandler+0x1cc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d02c      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a54      	ldr	r2, [pc, #336]	@ (8002608 <HAL_DMA_IRQHandler+0x1d0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d027      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a53      	ldr	r2, [pc, #332]	@ (800260c <HAL_DMA_IRQHandler+0x1d4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a51      	ldr	r2, [pc, #324]	@ (8002610 <HAL_DMA_IRQHandler+0x1d8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01d      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a50      	ldr	r2, [pc, #320]	@ (8002614 <HAL_DMA_IRQHandler+0x1dc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d018      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002618 <HAL_DMA_IRQHandler+0x1e0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a4d      	ldr	r2, [pc, #308]	@ (800261c <HAL_DMA_IRQHandler+0x1e4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00e      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002620 <HAL_DMA_IRQHandler+0x1e8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002624 <HAL_DMA_IRQHandler+0x1ec>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d004      	beq.n	800250a <HAL_DMA_IRQHandler+0xd2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a48      	ldr	r2, [pc, #288]	@ (8002628 <HAL_DMA_IRQHandler+0x1f0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_DMA_IRQHandler+0xd6>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_DMA_IRQHandler+0xd8>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 842b 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2208      	movs	r2, #8
 8002520:	409a      	lsls	r2, r3
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80a2 	beq.w	8002670 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a2e      	ldr	r2, [pc, #184]	@ (80025ec <HAL_DMA_IRQHandler+0x1b4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d04a      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2d      	ldr	r2, [pc, #180]	@ (80025f0 <HAL_DMA_IRQHandler+0x1b8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d045      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a2b      	ldr	r2, [pc, #172]	@ (80025f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d040      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a2a      	ldr	r2, [pc, #168]	@ (80025f8 <HAL_DMA_IRQHandler+0x1c0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d03b      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a28      	ldr	r2, [pc, #160]	@ (80025fc <HAL_DMA_IRQHandler+0x1c4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d036      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a27      	ldr	r2, [pc, #156]	@ (8002600 <HAL_DMA_IRQHandler+0x1c8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d031      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a25      	ldr	r2, [pc, #148]	@ (8002604 <HAL_DMA_IRQHandler+0x1cc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02c      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a24      	ldr	r2, [pc, #144]	@ (8002608 <HAL_DMA_IRQHandler+0x1d0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d027      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a22      	ldr	r2, [pc, #136]	@ (800260c <HAL_DMA_IRQHandler+0x1d4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d022      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a21      	ldr	r2, [pc, #132]	@ (8002610 <HAL_DMA_IRQHandler+0x1d8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d01d      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1f      	ldr	r2, [pc, #124]	@ (8002614 <HAL_DMA_IRQHandler+0x1dc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d018      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1e      	ldr	r2, [pc, #120]	@ (8002618 <HAL_DMA_IRQHandler+0x1e0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <HAL_DMA_IRQHandler+0x1e4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00e      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <HAL_DMA_IRQHandler+0x1e8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a19      	ldr	r2, [pc, #100]	@ (8002624 <HAL_DMA_IRQHandler+0x1ec>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <HAL_DMA_IRQHandler+0x194>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a18      	ldr	r2, [pc, #96]	@ (8002628 <HAL_DMA_IRQHandler+0x1f0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d12f      	bne.n	800262c <HAL_DMA_IRQHandler+0x1f4>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf14      	ite	ne
 80025da:	2301      	movne	r3, #1
 80025dc:	2300      	moveq	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	e02e      	b.n	8002640 <HAL_DMA_IRQHandler+0x208>
 80025e2:	bf00      	nop
 80025e4:	24000098 	.word	0x24000098
 80025e8:	1b4e81b5 	.word	0x1b4e81b5
 80025ec:	40020010 	.word	0x40020010
 80025f0:	40020028 	.word	0x40020028
 80025f4:	40020040 	.word	0x40020040
 80025f8:	40020058 	.word	0x40020058
 80025fc:	40020070 	.word	0x40020070
 8002600:	40020088 	.word	0x40020088
 8002604:	400200a0 	.word	0x400200a0
 8002608:	400200b8 	.word	0x400200b8
 800260c:	40020410 	.word	0x40020410
 8002610:	40020428 	.word	0x40020428
 8002614:	40020440 	.word	0x40020440
 8002618:	40020458 	.word	0x40020458
 800261c:	40020470 	.word	0x40020470
 8002620:	40020488 	.word	0x40020488
 8002624:	400204a0 	.word	0x400204a0
 8002628:	400204b8 	.word	0x400204b8
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf14      	ite	ne
 800263a:	2301      	movne	r3, #1
 800263c:	2300      	moveq	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0204 	bic.w	r2, r2, #4
 8002652:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2208      	movs	r2, #8
 800265e:	409a      	lsls	r2, r3
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d06e      	beq.n	8002764 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a69      	ldr	r2, [pc, #420]	@ (8002830 <HAL_DMA_IRQHandler+0x3f8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d04a      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a67      	ldr	r2, [pc, #412]	@ (8002834 <HAL_DMA_IRQHandler+0x3fc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d045      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a66      	ldr	r2, [pc, #408]	@ (8002838 <HAL_DMA_IRQHandler+0x400>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d040      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a64      	ldr	r2, [pc, #400]	@ (800283c <HAL_DMA_IRQHandler+0x404>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d03b      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a63      	ldr	r2, [pc, #396]	@ (8002840 <HAL_DMA_IRQHandler+0x408>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d036      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a61      	ldr	r2, [pc, #388]	@ (8002844 <HAL_DMA_IRQHandler+0x40c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d031      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a60      	ldr	r2, [pc, #384]	@ (8002848 <HAL_DMA_IRQHandler+0x410>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d02c      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a5e      	ldr	r2, [pc, #376]	@ (800284c <HAL_DMA_IRQHandler+0x414>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d027      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a5d      	ldr	r2, [pc, #372]	@ (8002850 <HAL_DMA_IRQHandler+0x418>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a5b      	ldr	r2, [pc, #364]	@ (8002854 <HAL_DMA_IRQHandler+0x41c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01d      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002858 <HAL_DMA_IRQHandler+0x420>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d018      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a58      	ldr	r2, [pc, #352]	@ (800285c <HAL_DMA_IRQHandler+0x424>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a57      	ldr	r2, [pc, #348]	@ (8002860 <HAL_DMA_IRQHandler+0x428>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00e      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a55      	ldr	r2, [pc, #340]	@ (8002864 <HAL_DMA_IRQHandler+0x42c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a54      	ldr	r2, [pc, #336]	@ (8002868 <HAL_DMA_IRQHandler+0x430>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d004      	beq.n	8002726 <HAL_DMA_IRQHandler+0x2ee>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a52      	ldr	r2, [pc, #328]	@ (800286c <HAL_DMA_IRQHandler+0x434>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10a      	bne.n	800273c <HAL_DMA_IRQHandler+0x304>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e003      	b.n	8002744 <HAL_DMA_IRQHandler+0x30c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2201      	movs	r2, #1
 8002752:	409a      	lsls	r2, r3
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275c:	f043 0202 	orr.w	r2, r3, #2
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2204      	movs	r2, #4
 800276e:	409a      	lsls	r2, r3
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 808f 	beq.w	8002898 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2c      	ldr	r2, [pc, #176]	@ (8002830 <HAL_DMA_IRQHandler+0x3f8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04a      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2a      	ldr	r2, [pc, #168]	@ (8002834 <HAL_DMA_IRQHandler+0x3fc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d045      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a29      	ldr	r2, [pc, #164]	@ (8002838 <HAL_DMA_IRQHandler+0x400>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d040      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a27      	ldr	r2, [pc, #156]	@ (800283c <HAL_DMA_IRQHandler+0x404>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d03b      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a26      	ldr	r2, [pc, #152]	@ (8002840 <HAL_DMA_IRQHandler+0x408>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d036      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a24      	ldr	r2, [pc, #144]	@ (8002844 <HAL_DMA_IRQHandler+0x40c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a23      	ldr	r2, [pc, #140]	@ (8002848 <HAL_DMA_IRQHandler+0x410>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d02c      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a21      	ldr	r2, [pc, #132]	@ (800284c <HAL_DMA_IRQHandler+0x414>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d027      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a20      	ldr	r2, [pc, #128]	@ (8002850 <HAL_DMA_IRQHandler+0x418>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002854 <HAL_DMA_IRQHandler+0x41c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002858 <HAL_DMA_IRQHandler+0x420>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d018      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1b      	ldr	r2, [pc, #108]	@ (800285c <HAL_DMA_IRQHandler+0x424>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002860 <HAL_DMA_IRQHandler+0x428>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a18      	ldr	r2, [pc, #96]	@ (8002864 <HAL_DMA_IRQHandler+0x42c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <HAL_DMA_IRQHandler+0x430>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <HAL_DMA_IRQHandler+0x3e2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a15      	ldr	r2, [pc, #84]	@ (800286c <HAL_DMA_IRQHandler+0x434>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d12a      	bne.n	8002870 <HAL_DMA_IRQHandler+0x438>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf14      	ite	ne
 8002828:	2301      	movne	r3, #1
 800282a:	2300      	moveq	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	e023      	b.n	8002878 <HAL_DMA_IRQHandler+0x440>
 8002830:	40020010 	.word	0x40020010
 8002834:	40020028 	.word	0x40020028
 8002838:	40020040 	.word	0x40020040
 800283c:	40020058 	.word	0x40020058
 8002840:	40020070 	.word	0x40020070
 8002844:	40020088 	.word	0x40020088
 8002848:	400200a0 	.word	0x400200a0
 800284c:	400200b8 	.word	0x400200b8
 8002850:	40020410 	.word	0x40020410
 8002854:	40020428 	.word	0x40020428
 8002858:	40020440 	.word	0x40020440
 800285c:	40020458 	.word	0x40020458
 8002860:	40020470 	.word	0x40020470
 8002864:	40020488 	.word	0x40020488
 8002868:	400204a0 	.word	0x400204a0
 800286c:	400204b8 	.word	0x400204b8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00d      	beq.n	8002898 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	2204      	movs	r2, #4
 8002886:	409a      	lsls	r2, r3
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	2210      	movs	r2, #16
 80028a2:	409a      	lsls	r2, r3
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80a6 	beq.w	80029fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a85      	ldr	r2, [pc, #532]	@ (8002ac8 <HAL_DMA_IRQHandler+0x690>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d04a      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a83      	ldr	r2, [pc, #524]	@ (8002acc <HAL_DMA_IRQHandler+0x694>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d045      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a82      	ldr	r2, [pc, #520]	@ (8002ad0 <HAL_DMA_IRQHandler+0x698>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d040      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a80      	ldr	r2, [pc, #512]	@ (8002ad4 <HAL_DMA_IRQHandler+0x69c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d03b      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7f      	ldr	r2, [pc, #508]	@ (8002ad8 <HAL_DMA_IRQHandler+0x6a0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d036      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a7d      	ldr	r2, [pc, #500]	@ (8002adc <HAL_DMA_IRQHandler+0x6a4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d031      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae0 <HAL_DMA_IRQHandler+0x6a8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d02c      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a7a      	ldr	r2, [pc, #488]	@ (8002ae4 <HAL_DMA_IRQHandler+0x6ac>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d027      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a79      	ldr	r2, [pc, #484]	@ (8002ae8 <HAL_DMA_IRQHandler+0x6b0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a77      	ldr	r2, [pc, #476]	@ (8002aec <HAL_DMA_IRQHandler+0x6b4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01d      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a76      	ldr	r2, [pc, #472]	@ (8002af0 <HAL_DMA_IRQHandler+0x6b8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d018      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a74      	ldr	r2, [pc, #464]	@ (8002af4 <HAL_DMA_IRQHandler+0x6bc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a73      	ldr	r2, [pc, #460]	@ (8002af8 <HAL_DMA_IRQHandler+0x6c0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00e      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a71      	ldr	r2, [pc, #452]	@ (8002afc <HAL_DMA_IRQHandler+0x6c4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a70      	ldr	r2, [pc, #448]	@ (8002b00 <HAL_DMA_IRQHandler+0x6c8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_DMA_IRQHandler+0x516>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6e      	ldr	r2, [pc, #440]	@ (8002b04 <HAL_DMA_IRQHandler+0x6cc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10a      	bne.n	8002964 <HAL_DMA_IRQHandler+0x52c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e009      	b.n	8002978 <HAL_DMA_IRQHandler+0x540>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d03e      	beq.n	80029fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2210      	movs	r2, #16
 8002986:	409a      	lsls	r2, r3
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d018      	beq.n	80029cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d108      	bne.n	80029ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d024      	beq.n	80029fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
 80029b8:	e01f      	b.n	80029fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01b      	beq.n	80029fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
 80029ca:	e016      	b.n	80029fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d107      	bne.n	80029ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0208 	bic.w	r2, r2, #8
 80029e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2220      	movs	r2, #32
 8002a04:	409a      	lsls	r2, r3
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8110 	beq.w	8002c30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac8 <HAL_DMA_IRQHandler+0x690>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d04a      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2b      	ldr	r2, [pc, #172]	@ (8002acc <HAL_DMA_IRQHandler+0x694>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d045      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a29      	ldr	r2, [pc, #164]	@ (8002ad0 <HAL_DMA_IRQHandler+0x698>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d040      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a28      	ldr	r2, [pc, #160]	@ (8002ad4 <HAL_DMA_IRQHandler+0x69c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d03b      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a26      	ldr	r2, [pc, #152]	@ (8002ad8 <HAL_DMA_IRQHandler+0x6a0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d036      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a25      	ldr	r2, [pc, #148]	@ (8002adc <HAL_DMA_IRQHandler+0x6a4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d031      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a23      	ldr	r2, [pc, #140]	@ (8002ae0 <HAL_DMA_IRQHandler+0x6a8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d02c      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a22      	ldr	r2, [pc, #136]	@ (8002ae4 <HAL_DMA_IRQHandler+0x6ac>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d027      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a20      	ldr	r2, [pc, #128]	@ (8002ae8 <HAL_DMA_IRQHandler+0x6b0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d022      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002aec <HAL_DMA_IRQHandler+0x6b4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d01d      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1d      	ldr	r2, [pc, #116]	@ (8002af0 <HAL_DMA_IRQHandler+0x6b8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d018      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1c      	ldr	r2, [pc, #112]	@ (8002af4 <HAL_DMA_IRQHandler+0x6bc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002af8 <HAL_DMA_IRQHandler+0x6c0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00e      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a19      	ldr	r2, [pc, #100]	@ (8002afc <HAL_DMA_IRQHandler+0x6c4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d009      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a17      	ldr	r2, [pc, #92]	@ (8002b00 <HAL_DMA_IRQHandler+0x6c8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x678>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a16      	ldr	r2, [pc, #88]	@ (8002b04 <HAL_DMA_IRQHandler+0x6cc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d12b      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x6d0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	e02a      	b.n	8002b1c <HAL_DMA_IRQHandler+0x6e4>
 8002ac6:	bf00      	nop
 8002ac8:	40020010 	.word	0x40020010
 8002acc:	40020028 	.word	0x40020028
 8002ad0:	40020040 	.word	0x40020040
 8002ad4:	40020058 	.word	0x40020058
 8002ad8:	40020070 	.word	0x40020070
 8002adc:	40020088 	.word	0x40020088
 8002ae0:	400200a0 	.word	0x400200a0
 8002ae4:	400200b8 	.word	0x400200b8
 8002ae8:	40020410 	.word	0x40020410
 8002aec:	40020428 	.word	0x40020428
 8002af0:	40020440 	.word	0x40020440
 8002af4:	40020458 	.word	0x40020458
 8002af8:	40020470 	.word	0x40020470
 8002afc:	40020488 	.word	0x40020488
 8002b00:	400204a0 	.word	0x400204a0
 8002b04:	400204b8 	.word	0x400204b8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8087 	beq.w	8002c30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d139      	bne.n	8002bb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0216 	bic.w	r2, r2, #22
 8002b4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <HAL_DMA_IRQHandler+0x736>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0208 	bic.w	r2, r2, #8
 8002b7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	223f      	movs	r2, #63	@ 0x3f
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 834a 	beq.w	800323c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
          }
          return;
 8002bb0:	e344      	b.n	800323c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d018      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d02c      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
 8002bde:	e027      	b.n	8002c30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d023      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
 8002bf0:	e01e      	b.n	8002c30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0210 	bic.w	r2, r2, #16
 8002c0e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8306 	beq.w	8003246 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8088 	beq.w	8002d58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a7a      	ldr	r2, [pc, #488]	@ (8002e40 <HAL_DMA_IRQHandler+0xa08>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d04a      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a79      	ldr	r2, [pc, #484]	@ (8002e44 <HAL_DMA_IRQHandler+0xa0c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d045      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a77      	ldr	r2, [pc, #476]	@ (8002e48 <HAL_DMA_IRQHandler+0xa10>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d040      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a76      	ldr	r2, [pc, #472]	@ (8002e4c <HAL_DMA_IRQHandler+0xa14>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d03b      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a74      	ldr	r2, [pc, #464]	@ (8002e50 <HAL_DMA_IRQHandler+0xa18>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d036      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a73      	ldr	r2, [pc, #460]	@ (8002e54 <HAL_DMA_IRQHandler+0xa1c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d031      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a71      	ldr	r2, [pc, #452]	@ (8002e58 <HAL_DMA_IRQHandler+0xa20>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02c      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a70      	ldr	r2, [pc, #448]	@ (8002e5c <HAL_DMA_IRQHandler+0xa24>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d027      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6e      	ldr	r2, [pc, #440]	@ (8002e60 <HAL_DMA_IRQHandler+0xa28>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6d      	ldr	r2, [pc, #436]	@ (8002e64 <HAL_DMA_IRQHandler+0xa2c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8002e68 <HAL_DMA_IRQHandler+0xa30>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6a      	ldr	r2, [pc, #424]	@ (8002e6c <HAL_DMA_IRQHandler+0xa34>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a68      	ldr	r2, [pc, #416]	@ (8002e70 <HAL_DMA_IRQHandler+0xa38>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a67      	ldr	r2, [pc, #412]	@ (8002e74 <HAL_DMA_IRQHandler+0xa3c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a65      	ldr	r2, [pc, #404]	@ (8002e78 <HAL_DMA_IRQHandler+0xa40>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x8b8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a64      	ldr	r2, [pc, #400]	@ (8002e7c <HAL_DMA_IRQHandler+0xa44>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d108      	bne.n	8002d02 <HAL_DMA_IRQHandler+0x8ca>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e007      	b.n	8002d12 <HAL_DMA_IRQHandler+0x8da>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3301      	adds	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d307      	bcc.n	8002d2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f2      	bne.n	8002d12 <HAL_DMA_IRQHandler+0x8da>
 8002d2c:	e000      	b.n	8002d30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002d2e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2203      	movs	r2, #3
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002d46:	e003      	b.n	8002d50 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8272 	beq.w	8003246 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
 8002d6a:	e26c      	b.n	8003246 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a43      	ldr	r2, [pc, #268]	@ (8002e80 <HAL_DMA_IRQHandler+0xa48>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d022      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x984>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a42      	ldr	r2, [pc, #264]	@ (8002e84 <HAL_DMA_IRQHandler+0xa4c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d01d      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x984>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a40      	ldr	r2, [pc, #256]	@ (8002e88 <HAL_DMA_IRQHandler+0xa50>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d018      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x984>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e8c <HAL_DMA_IRQHandler+0xa54>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d013      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x984>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3d      	ldr	r2, [pc, #244]	@ (8002e90 <HAL_DMA_IRQHandler+0xa58>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00e      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x984>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a3c      	ldr	r2, [pc, #240]	@ (8002e94 <HAL_DMA_IRQHandler+0xa5c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x984>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a3a      	ldr	r2, [pc, #232]	@ (8002e98 <HAL_DMA_IRQHandler+0xa60>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x984>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a39      	ldr	r2, [pc, #228]	@ (8002e9c <HAL_DMA_IRQHandler+0xa64>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x988>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_DMA_IRQHandler+0x98a>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 823f 	beq.w	8003246 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2204      	movs	r2, #4
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80cd 	beq.w	8002f80 <HAL_DMA_IRQHandler+0xb48>
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80c7 	beq.w	8002f80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d049      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8210 	beq.w	8003240 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e28:	e20a      	b.n	8003240 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8206 	beq.w	8003240 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e3c:	e200      	b.n	8003240 <HAL_DMA_IRQHandler+0xe08>
 8002e3e:	bf00      	nop
 8002e40:	40020010 	.word	0x40020010
 8002e44:	40020028 	.word	0x40020028
 8002e48:	40020040 	.word	0x40020040
 8002e4c:	40020058 	.word	0x40020058
 8002e50:	40020070 	.word	0x40020070
 8002e54:	40020088 	.word	0x40020088
 8002e58:	400200a0 	.word	0x400200a0
 8002e5c:	400200b8 	.word	0x400200b8
 8002e60:	40020410 	.word	0x40020410
 8002e64:	40020428 	.word	0x40020428
 8002e68:	40020440 	.word	0x40020440
 8002e6c:	40020458 	.word	0x40020458
 8002e70:	40020470 	.word	0x40020470
 8002e74:	40020488 	.word	0x40020488
 8002e78:	400204a0 	.word	0x400204a0
 8002e7c:	400204b8 	.word	0x400204b8
 8002e80:	58025408 	.word	0x58025408
 8002e84:	5802541c 	.word	0x5802541c
 8002e88:	58025430 	.word	0x58025430
 8002e8c:	58025444 	.word	0x58025444
 8002e90:	58025458 	.word	0x58025458
 8002e94:	5802546c 	.word	0x5802546c
 8002e98:	58025480 	.word	0x58025480
 8002e9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d160      	bne.n	8002f6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7f      	ldr	r2, [pc, #508]	@ (80030ac <HAL_DMA_IRQHandler+0xc74>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d04a      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a7d      	ldr	r2, [pc, #500]	@ (80030b0 <HAL_DMA_IRQHandler+0xc78>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d045      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7c      	ldr	r2, [pc, #496]	@ (80030b4 <HAL_DMA_IRQHandler+0xc7c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d040      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a7a      	ldr	r2, [pc, #488]	@ (80030b8 <HAL_DMA_IRQHandler+0xc80>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d03b      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a79      	ldr	r2, [pc, #484]	@ (80030bc <HAL_DMA_IRQHandler+0xc84>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d036      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a77      	ldr	r2, [pc, #476]	@ (80030c0 <HAL_DMA_IRQHandler+0xc88>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d031      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a76      	ldr	r2, [pc, #472]	@ (80030c4 <HAL_DMA_IRQHandler+0xc8c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d02c      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a74      	ldr	r2, [pc, #464]	@ (80030c8 <HAL_DMA_IRQHandler+0xc90>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d027      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a73      	ldr	r2, [pc, #460]	@ (80030cc <HAL_DMA_IRQHandler+0xc94>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d022      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a71      	ldr	r2, [pc, #452]	@ (80030d0 <HAL_DMA_IRQHandler+0xc98>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01d      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a70      	ldr	r2, [pc, #448]	@ (80030d4 <HAL_DMA_IRQHandler+0xc9c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d018      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80030d8 <HAL_DMA_IRQHandler+0xca0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6d      	ldr	r2, [pc, #436]	@ (80030dc <HAL_DMA_IRQHandler+0xca4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00e      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6b      	ldr	r2, [pc, #428]	@ (80030e0 <HAL_DMA_IRQHandler+0xca8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d009      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6a      	ldr	r2, [pc, #424]	@ (80030e4 <HAL_DMA_IRQHandler+0xcac>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xb12>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a68      	ldr	r2, [pc, #416]	@ (80030e8 <HAL_DMA_IRQHandler+0xcb0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d108      	bne.n	8002f5c <HAL_DMA_IRQHandler+0xb24>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0208 	bic.w	r2, r2, #8
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e007      	b.n	8002f6c <HAL_DMA_IRQHandler+0xb34>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8165 	beq.w	8003240 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f7e:	e15f      	b.n	8003240 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2202      	movs	r2, #2
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80c5 	beq.w	8003120 <HAL_DMA_IRQHandler+0xce8>
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80bf 	beq.w	8003120 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2202      	movs	r2, #2
 8002fac:	409a      	lsls	r2, r3
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 813a 	beq.w	8003244 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fd8:	e134      	b.n	8003244 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8130 	beq.w	8003244 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fec:	e12a      	b.n	8003244 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f040 8089 	bne.w	800310c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80030ac <HAL_DMA_IRQHandler+0xc74>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d04a      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a29      	ldr	r2, [pc, #164]	@ (80030b0 <HAL_DMA_IRQHandler+0xc78>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d045      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <HAL_DMA_IRQHandler+0xc7c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d040      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a26      	ldr	r2, [pc, #152]	@ (80030b8 <HAL_DMA_IRQHandler+0xc80>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d03b      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a25      	ldr	r2, [pc, #148]	@ (80030bc <HAL_DMA_IRQHandler+0xc84>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d036      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a23      	ldr	r2, [pc, #140]	@ (80030c0 <HAL_DMA_IRQHandler+0xc88>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d031      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <HAL_DMA_IRQHandler+0xc8c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d02c      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a20      	ldr	r2, [pc, #128]	@ (80030c8 <HAL_DMA_IRQHandler+0xc90>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d027      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1f      	ldr	r2, [pc, #124]	@ (80030cc <HAL_DMA_IRQHandler+0xc94>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1d      	ldr	r2, [pc, #116]	@ (80030d0 <HAL_DMA_IRQHandler+0xc98>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01d      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1c      	ldr	r2, [pc, #112]	@ (80030d4 <HAL_DMA_IRQHandler+0xc9c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d018      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1a      	ldr	r2, [pc, #104]	@ (80030d8 <HAL_DMA_IRQHandler+0xca0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_DMA_IRQHandler+0xca4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <HAL_DMA_IRQHandler+0xca8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a16      	ldr	r2, [pc, #88]	@ (80030e4 <HAL_DMA_IRQHandler+0xcac>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_DMA_IRQHandler+0xc62>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a14      	ldr	r2, [pc, #80]	@ (80030e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d128      	bne.n	80030ec <HAL_DMA_IRQHandler+0xcb4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0214 	bic.w	r2, r2, #20
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e027      	b.n	80030fc <HAL_DMA_IRQHandler+0xcc4>
 80030ac:	40020010 	.word	0x40020010
 80030b0:	40020028 	.word	0x40020028
 80030b4:	40020040 	.word	0x40020040
 80030b8:	40020058 	.word	0x40020058
 80030bc:	40020070 	.word	0x40020070
 80030c0:	40020088 	.word	0x40020088
 80030c4:	400200a0 	.word	0x400200a0
 80030c8:	400200b8 	.word	0x400200b8
 80030cc:	40020410 	.word	0x40020410
 80030d0:	40020428 	.word	0x40020428
 80030d4:	40020440 	.word	0x40020440
 80030d8:	40020458 	.word	0x40020458
 80030dc:	40020470 	.word	0x40020470
 80030e0:	40020488 	.word	0x40020488
 80030e4:	400204a0 	.word	0x400204a0
 80030e8:	400204b8 	.word	0x400204b8
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 020a 	bic.w	r2, r2, #10
 80030fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8097 	beq.w	8003244 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800311e:	e091      	b.n	8003244 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	2208      	movs	r2, #8
 800312a:	409a      	lsls	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8088 	beq.w	8003246 <HAL_DMA_IRQHandler+0xe0e>
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8082 	beq.w	8003246 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a41      	ldr	r2, [pc, #260]	@ (800324c <HAL_DMA_IRQHandler+0xe14>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d04a      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a3f      	ldr	r2, [pc, #252]	@ (8003250 <HAL_DMA_IRQHandler+0xe18>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d045      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a3e      	ldr	r2, [pc, #248]	@ (8003254 <HAL_DMA_IRQHandler+0xe1c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d040      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a3c      	ldr	r2, [pc, #240]	@ (8003258 <HAL_DMA_IRQHandler+0xe20>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d03b      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a3b      	ldr	r2, [pc, #236]	@ (800325c <HAL_DMA_IRQHandler+0xe24>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d036      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a39      	ldr	r2, [pc, #228]	@ (8003260 <HAL_DMA_IRQHandler+0xe28>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d031      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a38      	ldr	r2, [pc, #224]	@ (8003264 <HAL_DMA_IRQHandler+0xe2c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d02c      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a36      	ldr	r2, [pc, #216]	@ (8003268 <HAL_DMA_IRQHandler+0xe30>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d027      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a35      	ldr	r2, [pc, #212]	@ (800326c <HAL_DMA_IRQHandler+0xe34>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a33      	ldr	r2, [pc, #204]	@ (8003270 <HAL_DMA_IRQHandler+0xe38>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01d      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a32      	ldr	r2, [pc, #200]	@ (8003274 <HAL_DMA_IRQHandler+0xe3c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d018      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a30      	ldr	r2, [pc, #192]	@ (8003278 <HAL_DMA_IRQHandler+0xe40>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2f      	ldr	r2, [pc, #188]	@ (800327c <HAL_DMA_IRQHandler+0xe44>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00e      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003280 <HAL_DMA_IRQHandler+0xe48>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003284 <HAL_DMA_IRQHandler+0xe4c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdaa>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003288 <HAL_DMA_IRQHandler+0xe50>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d108      	bne.n	80031f4 <HAL_DMA_IRQHandler+0xdbc>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 021c 	bic.w	r2, r2, #28
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e007      	b.n	8003204 <HAL_DMA_IRQHandler+0xdcc>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 020e 	bic.w	r2, r2, #14
 8003202:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	2201      	movs	r2, #1
 800320e:	409a      	lsls	r2, r3
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
 800323a:	e004      	b.n	8003246 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800323c:	bf00      	nop
 800323e:	e002      	b.n	8003246 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003240:	bf00      	nop
 8003242:	e000      	b.n	8003246 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003244:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003246:	3728      	adds	r7, #40	@ 0x28
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40020010 	.word	0x40020010
 8003250:	40020028 	.word	0x40020028
 8003254:	40020040 	.word	0x40020040
 8003258:	40020058 	.word	0x40020058
 800325c:	40020070 	.word	0x40020070
 8003260:	40020088 	.word	0x40020088
 8003264:	400200a0 	.word	0x400200a0
 8003268:	400200b8 	.word	0x400200b8
 800326c:	40020410 	.word	0x40020410
 8003270:	40020428 	.word	0x40020428
 8003274:	40020440 	.word	0x40020440
 8003278:	40020458 	.word	0x40020458
 800327c:	40020470 	.word	0x40020470
 8003280:	40020488 	.word	0x40020488
 8003284:	400204a0 	.word	0x400204a0
 8003288:	400204b8 	.word	0x400204b8

0800328c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a42      	ldr	r2, [pc, #264]	@ (80033a4 <DMA_CalcBaseAndBitshift+0x118>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d04a      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a41      	ldr	r2, [pc, #260]	@ (80033a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d045      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a3f      	ldr	r2, [pc, #252]	@ (80033ac <DMA_CalcBaseAndBitshift+0x120>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d040      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a3e      	ldr	r2, [pc, #248]	@ (80033b0 <DMA_CalcBaseAndBitshift+0x124>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d03b      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a3c      	ldr	r2, [pc, #240]	@ (80033b4 <DMA_CalcBaseAndBitshift+0x128>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d036      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a3b      	ldr	r2, [pc, #236]	@ (80033b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d031      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a39      	ldr	r2, [pc, #228]	@ (80033bc <DMA_CalcBaseAndBitshift+0x130>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d02c      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a38      	ldr	r2, [pc, #224]	@ (80033c0 <DMA_CalcBaseAndBitshift+0x134>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d027      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a36      	ldr	r2, [pc, #216]	@ (80033c4 <DMA_CalcBaseAndBitshift+0x138>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d022      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a35      	ldr	r2, [pc, #212]	@ (80033c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d01d      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a33      	ldr	r2, [pc, #204]	@ (80033cc <DMA_CalcBaseAndBitshift+0x140>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d018      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a32      	ldr	r2, [pc, #200]	@ (80033d0 <DMA_CalcBaseAndBitshift+0x144>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d013      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a30      	ldr	r2, [pc, #192]	@ (80033d4 <DMA_CalcBaseAndBitshift+0x148>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00e      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2f      	ldr	r2, [pc, #188]	@ (80033d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d009      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a2d      	ldr	r2, [pc, #180]	@ (80033dc <DMA_CalcBaseAndBitshift+0x150>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <DMA_CalcBaseAndBitshift+0xa8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a2c      	ldr	r2, [pc, #176]	@ (80033e0 <DMA_CalcBaseAndBitshift+0x154>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d101      	bne.n	8003338 <DMA_CalcBaseAndBitshift+0xac>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <DMA_CalcBaseAndBitshift+0xae>
 8003338:	2300      	movs	r3, #0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d024      	beq.n	8003388 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3b10      	subs	r3, #16
 8003346:	4a27      	ldr	r2, [pc, #156]	@ (80033e4 <DMA_CalcBaseAndBitshift+0x158>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	4a24      	ldr	r2, [pc, #144]	@ (80033e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003358:	5cd3      	ldrb	r3, [r2, r3]
 800335a:	461a      	mov	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d908      	bls.n	8003378 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	4b1f      	ldr	r3, [pc, #124]	@ (80033ec <DMA_CalcBaseAndBitshift+0x160>)
 800336e:	4013      	ands	r3, r2
 8003370:	1d1a      	adds	r2, r3, #4
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	659a      	str	r2, [r3, #88]	@ 0x58
 8003376:	e00d      	b.n	8003394 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ec <DMA_CalcBaseAndBitshift+0x160>)
 8003380:	4013      	ands	r3, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6593      	str	r3, [r2, #88]	@ 0x58
 8003386:	e005      	b.n	8003394 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40020010 	.word	0x40020010
 80033a8:	40020028 	.word	0x40020028
 80033ac:	40020040 	.word	0x40020040
 80033b0:	40020058 	.word	0x40020058
 80033b4:	40020070 	.word	0x40020070
 80033b8:	40020088 	.word	0x40020088
 80033bc:	400200a0 	.word	0x400200a0
 80033c0:	400200b8 	.word	0x400200b8
 80033c4:	40020410 	.word	0x40020410
 80033c8:	40020428 	.word	0x40020428
 80033cc:	40020440 	.word	0x40020440
 80033d0:	40020458 	.word	0x40020458
 80033d4:	40020470 	.word	0x40020470
 80033d8:	40020488 	.word	0x40020488
 80033dc:	400204a0 	.word	0x400204a0
 80033e0:	400204b8 	.word	0x400204b8
 80033e4:	aaaaaaab 	.word	0xaaaaaaab
 80033e8:	0801562c 	.word	0x0801562c
 80033ec:	fffffc00 	.word	0xfffffc00

080033f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d120      	bne.n	8003446 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	2b03      	cmp	r3, #3
 800340a:	d858      	bhi.n	80034be <DMA_CheckFifoParam+0xce>
 800340c:	a201      	add	r2, pc, #4	@ (adr r2, 8003414 <DMA_CheckFifoParam+0x24>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003425 	.word	0x08003425
 8003418:	08003437 	.word	0x08003437
 800341c:	08003425 	.word	0x08003425
 8003420:	080034bf 	.word	0x080034bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d048      	beq.n	80034c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003434:	e045      	b.n	80034c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800343e:	d142      	bne.n	80034c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003444:	e03f      	b.n	80034c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344e:	d123      	bne.n	8003498 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003454:	2b03      	cmp	r3, #3
 8003456:	d838      	bhi.n	80034ca <DMA_CheckFifoParam+0xda>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <DMA_CheckFifoParam+0x70>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003471 	.word	0x08003471
 8003464:	08003477 	.word	0x08003477
 8003468:	08003471 	.word	0x08003471
 800346c:	08003489 	.word	0x08003489
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
        break;
 8003474:	e030      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d025      	beq.n	80034ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003486:	e022      	b.n	80034ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003490:	d11f      	bne.n	80034d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003496:	e01c      	b.n	80034d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	2b02      	cmp	r3, #2
 800349e:	d902      	bls.n	80034a6 <DMA_CheckFifoParam+0xb6>
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d003      	beq.n	80034ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80034a4:	e018      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
        break;
 80034aa:	e015      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00e      	beq.n	80034d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
    break;
 80034bc:	e00b      	b.n	80034d6 <DMA_CheckFifoParam+0xe6>
        break;
 80034be:	bf00      	nop
 80034c0:	e00a      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
        break;
 80034c2:	bf00      	nop
 80034c4:	e008      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
        break;
 80034c6:	bf00      	nop
 80034c8:	e006      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
        break;
 80034ca:	bf00      	nop
 80034cc:	e004      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
        break;
 80034ce:	bf00      	nop
 80034d0:	e002      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
        break;
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <DMA_CheckFifoParam+0xe8>
    break;
 80034d6:	bf00      	nop
    }
  }

  return status;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop

080034e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a38      	ldr	r2, [pc, #224]	@ (80035dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d022      	beq.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a36      	ldr	r2, [pc, #216]	@ (80035e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01d      	beq.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a35      	ldr	r2, [pc, #212]	@ (80035e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d018      	beq.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a33      	ldr	r2, [pc, #204]	@ (80035e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a32      	ldr	r2, [pc, #200]	@ (80035ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00e      	beq.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a30      	ldr	r2, [pc, #192]	@ (80035f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d009      	beq.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2f      	ldr	r2, [pc, #188]	@ (80035f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d004      	beq.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a2d      	ldr	r2, [pc, #180]	@ (80035f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800354a:	2300      	movs	r3, #0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01a      	beq.n	8003586 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	3b08      	subs	r3, #8
 8003558:	4a28      	ldr	r2, [pc, #160]	@ (80035fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4b26      	ldr	r3, [pc, #152]	@ (8003600 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	461a      	mov	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a24      	ldr	r2, [pc, #144]	@ (8003604 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003574:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003584:	e024      	b.n	80035d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3b10      	subs	r3, #16
 800358e:	4a1e      	ldr	r2, [pc, #120]	@ (8003608 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4a1c      	ldr	r2, [pc, #112]	@ (800360c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d806      	bhi.n	80035ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003610 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d902      	bls.n	80035ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3308      	adds	r3, #8
 80035ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	461a      	mov	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80035c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2201      	movs	r2, #1
 80035ca:	409a      	lsls	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	58025408 	.word	0x58025408
 80035e0:	5802541c 	.word	0x5802541c
 80035e4:	58025430 	.word	0x58025430
 80035e8:	58025444 	.word	0x58025444
 80035ec:	58025458 	.word	0x58025458
 80035f0:	5802546c 	.word	0x5802546c
 80035f4:	58025480 	.word	0x58025480
 80035f8:	58025494 	.word	0x58025494
 80035fc:	cccccccd 	.word	0xcccccccd
 8003600:	16009600 	.word	0x16009600
 8003604:	58025880 	.word	0x58025880
 8003608:	aaaaaaab 	.word	0xaaaaaaab
 800360c:	400204b8 	.word	0x400204b8
 8003610:	4002040f 	.word	0x4002040f
 8003614:	10008200 	.word	0x10008200
 8003618:	40020880 	.word	0x40020880

0800361c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d04a      	beq.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d847      	bhi.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a25      	ldr	r2, [pc, #148]	@ (80036d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d022      	beq.n	8003688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a24      	ldr	r2, [pc, #144]	@ (80036d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d01d      	beq.n	8003688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	@ (80036dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d018      	beq.n	8003688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a21      	ldr	r2, [pc, #132]	@ (80036e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1f      	ldr	r2, [pc, #124]	@ (80036e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00e      	beq.n	8003688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d009      	beq.n	8003688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1c      	ldr	r2, [pc, #112]	@ (80036ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d101      	bne.n	800368c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800368c:	2300      	movs	r3, #0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4b17      	ldr	r3, [pc, #92]	@ (80036f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a15      	ldr	r2, [pc, #84]	@ (80036f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80036a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80036a6:	e009      	b.n	80036bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4b14      	ldr	r3, [pc, #80]	@ (80036fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	461a      	mov	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a11      	ldr	r2, [pc, #68]	@ (8003700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80036ba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3b01      	subs	r3, #1
 80036c0:	2201      	movs	r2, #1
 80036c2:	409a      	lsls	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	58025408 	.word	0x58025408
 80036d8:	5802541c 	.word	0x5802541c
 80036dc:	58025430 	.word	0x58025430
 80036e0:	58025444 	.word	0x58025444
 80036e4:	58025458 	.word	0x58025458
 80036e8:	5802546c 	.word	0x5802546c
 80036ec:	58025480 	.word	0x58025480
 80036f0:	58025494 	.word	0x58025494
 80036f4:	1600963f 	.word	0x1600963f
 80036f8:	58025940 	.word	0x58025940
 80036fc:	1000823f 	.word	0x1000823f
 8003700:	40020940 	.word	0x40020940

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	@ 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003712:	4b89      	ldr	r3, [pc, #548]	@ (8003938 <HAL_GPIO_Init+0x234>)
 8003714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003716:	e194      	b.n	8003a42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2101      	movs	r1, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8186 	beq.w	8003a3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d005      	beq.n	8003748 <HAL_GPIO_Init+0x44>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d130      	bne.n	80037aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	2203      	movs	r2, #3
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800377e:	2201      	movs	r2, #1
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 0201 	and.w	r2, r3, #1
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d017      	beq.n	80037e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d123      	bne.n	800383a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	08da      	lsrs	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3208      	adds	r2, #8
 80037fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	220f      	movs	r2, #15
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	08da      	lsrs	r2, r3, #3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3208      	adds	r2, #8
 8003834:	69b9      	ldr	r1, [r7, #24]
 8003836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	2203      	movs	r2, #3
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0203 	and.w	r2, r3, #3
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80e0 	beq.w	8003a3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387c:	4b2f      	ldr	r3, [pc, #188]	@ (800393c <HAL_GPIO_Init+0x238>)
 800387e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003882:	4a2e      	ldr	r2, [pc, #184]	@ (800393c <HAL_GPIO_Init+0x238>)
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800388c:	4b2b      	ldr	r3, [pc, #172]	@ (800393c <HAL_GPIO_Init+0x238>)
 800388e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800389a:	4a29      	ldr	r2, [pc, #164]	@ (8003940 <HAL_GPIO_Init+0x23c>)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	3302      	adds	r3, #2
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	220f      	movs	r2, #15
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a20      	ldr	r2, [pc, #128]	@ (8003944 <HAL_GPIO_Init+0x240>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d052      	beq.n	800396c <HAL_GPIO_Init+0x268>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003948 <HAL_GPIO_Init+0x244>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d031      	beq.n	8003932 <HAL_GPIO_Init+0x22e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1e      	ldr	r2, [pc, #120]	@ (800394c <HAL_GPIO_Init+0x248>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d02b      	beq.n	800392e <HAL_GPIO_Init+0x22a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003950 <HAL_GPIO_Init+0x24c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d025      	beq.n	800392a <HAL_GPIO_Init+0x226>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003954 <HAL_GPIO_Init+0x250>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01f      	beq.n	8003926 <HAL_GPIO_Init+0x222>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003958 <HAL_GPIO_Init+0x254>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d019      	beq.n	8003922 <HAL_GPIO_Init+0x21e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1a      	ldr	r2, [pc, #104]	@ (800395c <HAL_GPIO_Init+0x258>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_GPIO_Init+0x21a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a19      	ldr	r2, [pc, #100]	@ (8003960 <HAL_GPIO_Init+0x25c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00d      	beq.n	800391a <HAL_GPIO_Init+0x216>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a18      	ldr	r2, [pc, #96]	@ (8003964 <HAL_GPIO_Init+0x260>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <HAL_GPIO_Init+0x212>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a17      	ldr	r2, [pc, #92]	@ (8003968 <HAL_GPIO_Init+0x264>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_GPIO_Init+0x20e>
 800390e:	2309      	movs	r3, #9
 8003910:	e02d      	b.n	800396e <HAL_GPIO_Init+0x26a>
 8003912:	230a      	movs	r3, #10
 8003914:	e02b      	b.n	800396e <HAL_GPIO_Init+0x26a>
 8003916:	2308      	movs	r3, #8
 8003918:	e029      	b.n	800396e <HAL_GPIO_Init+0x26a>
 800391a:	2307      	movs	r3, #7
 800391c:	e027      	b.n	800396e <HAL_GPIO_Init+0x26a>
 800391e:	2306      	movs	r3, #6
 8003920:	e025      	b.n	800396e <HAL_GPIO_Init+0x26a>
 8003922:	2305      	movs	r3, #5
 8003924:	e023      	b.n	800396e <HAL_GPIO_Init+0x26a>
 8003926:	2304      	movs	r3, #4
 8003928:	e021      	b.n	800396e <HAL_GPIO_Init+0x26a>
 800392a:	2303      	movs	r3, #3
 800392c:	e01f      	b.n	800396e <HAL_GPIO_Init+0x26a>
 800392e:	2302      	movs	r3, #2
 8003930:	e01d      	b.n	800396e <HAL_GPIO_Init+0x26a>
 8003932:	2301      	movs	r3, #1
 8003934:	e01b      	b.n	800396e <HAL_GPIO_Init+0x26a>
 8003936:	bf00      	nop
 8003938:	58000080 	.word	0x58000080
 800393c:	58024400 	.word	0x58024400
 8003940:	58000400 	.word	0x58000400
 8003944:	58020000 	.word	0x58020000
 8003948:	58020400 	.word	0x58020400
 800394c:	58020800 	.word	0x58020800
 8003950:	58020c00 	.word	0x58020c00
 8003954:	58021000 	.word	0x58021000
 8003958:	58021400 	.word	0x58021400
 800395c:	58021800 	.word	0x58021800
 8003960:	58021c00 	.word	0x58021c00
 8003964:	58022000 	.word	0x58022000
 8003968:	58022400 	.word	0x58022400
 800396c:	2300      	movs	r3, #0
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	f002 0203 	and.w	r2, r2, #3
 8003974:	0092      	lsls	r2, r2, #2
 8003976:	4093      	lsls	r3, r2
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800397e:	4938      	ldr	r1, [pc, #224]	@ (8003a60 <HAL_GPIO_Init+0x35c>)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800398c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f47f ae63 	bne.w	8003718 <HAL_GPIO_Init+0x14>
  }
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	3724      	adds	r7, #36	@ 0x24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	58000400 	.word	0x58000400

08003a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
 8003a70:	4613      	mov	r3, r2
 8003a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a74:	787b      	ldrb	r3, [r7, #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a80:	e003      	b.n	8003a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	041a      	lsls	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	619a      	str	r2, [r3, #24]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aa8:	887a      	ldrh	r2, [r7, #2]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	041a      	lsls	r2, r3, #16
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	43d9      	mvns	r1, r3
 8003ab4:	887b      	ldrh	r3, [r7, #2]
 8003ab6:	400b      	ands	r3, r1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	619a      	str	r2, [r3, #24]
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ae4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f00d f9cb 	bl	8010e8c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e08b      	b.n	8003c2a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f00c fdea 	bl	8010700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	@ 0x24
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d107      	bne.n	8003b7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	e006      	b.n	8003b88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d108      	bne.n	8003ba2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	e007      	b.n	8003bb2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c34 <HAL_I2C_Init+0x134>)
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69d9      	ldr	r1, [r3, #28]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	02008000 	.word	0x02008000

08003c38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	813b      	strh	r3, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	f040 80f9 	bne.w	8003e52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_I2C_Mem_Write+0x34>
 8003c66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c72:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0ed      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_I2C_Mem_Write+0x4e>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0e6      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c8e:	f7fc fbf9 	bl	8000484 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2319      	movs	r3, #25
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fac3 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0d1      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2221      	movs	r2, #33	@ 0x21
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2240      	movs	r2, #64	@ 0x40
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cd8:	88f8      	ldrh	r0, [r7, #6]
 8003cda:	893a      	ldrh	r2, [r7, #8]
 8003cdc:	8979      	ldrh	r1, [r7, #10]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f9d3 	bl	8004094 <I2C_RequestMemoryWrite>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0a9      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2bff      	cmp	r3, #255	@ 0xff
 8003d08:	d90e      	bls.n	8003d28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	22ff      	movs	r2, #255	@ 0xff
 8003d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	8979      	ldrh	r1, [r7, #10]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fc47 	bl	80045b4 <I2C_TransferConfig>
 8003d26:	e00f      	b.n	8003d48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	8979      	ldrh	r1, [r7, #10]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fc36 	bl	80045b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fac6 	bl	80042de <I2C_WaitOnTXISFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e07b      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d034      	beq.n	8003e00 <HAL_I2C_Mem_Write+0x1c8>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d130      	bne.n	8003e00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da4:	2200      	movs	r2, #0
 8003da6:	2180      	movs	r1, #128	@ 0x80
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fa3f 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e04d      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2bff      	cmp	r3, #255	@ 0xff
 8003dc0:	d90e      	bls.n	8003de0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	22ff      	movs	r2, #255	@ 0xff
 8003dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	8979      	ldrh	r1, [r7, #10]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fbeb 	bl	80045b4 <I2C_TransferConfig>
 8003dde:	e00f      	b.n	8003e00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	8979      	ldrh	r1, [r7, #10]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fbda 	bl	80045b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d19e      	bne.n	8003d48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 faac 	bl	800436c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e01a      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2220      	movs	r2, #32
 8003e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <HAL_I2C_Mem_Write+0x224>)
 8003e32:	400b      	ands	r3, r1
 8003e34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	fe00e800 	.word	0xfe00e800

08003e60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	817b      	strh	r3, [r7, #10]
 8003e72:	460b      	mov	r3, r1
 8003e74:	813b      	strh	r3, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	f040 80fd 	bne.w	8004082 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_I2C_Mem_Read+0x34>
 8003e8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e9a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0f1      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_I2C_Mem_Read+0x4e>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e0ea      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eb6:	f7fc fae5 	bl	8000484 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2319      	movs	r3, #25
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f9af 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0d5      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2222      	movs	r2, #34	@ 0x22
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2240      	movs	r2, #64	@ 0x40
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a3a      	ldr	r2, [r7, #32]
 8003ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f00:	88f8      	ldrh	r0, [r7, #6]
 8003f02:	893a      	ldrh	r2, [r7, #8]
 8003f04:	8979      	ldrh	r1, [r7, #10]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	4603      	mov	r3, r0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f913 	bl	800413c <I2C_RequestMemoryRead>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0ad      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2bff      	cmp	r3, #255	@ 0xff
 8003f30:	d90e      	bls.n	8003f50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	22ff      	movs	r2, #255	@ 0xff
 8003f36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	8979      	ldrh	r1, [r7, #10]
 8003f40:	4b52      	ldr	r3, [pc, #328]	@ (800408c <HAL_I2C_Mem_Read+0x22c>)
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fb33 	bl	80045b4 <I2C_TransferConfig>
 8003f4e:	e00f      	b.n	8003f70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	8979      	ldrh	r1, [r7, #10]
 8003f62:	4b4a      	ldr	r3, [pc, #296]	@ (800408c <HAL_I2C_Mem_Read+0x22c>)
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fb22 	bl	80045b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f76:	2200      	movs	r2, #0
 8003f78:	2104      	movs	r1, #4
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f956 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07c      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d034      	beq.n	8004030 <HAL_I2C_Mem_Read+0x1d0>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d130      	bne.n	8004030 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2180      	movs	r1, #128	@ 0x80
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f927 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e04d      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2bff      	cmp	r3, #255	@ 0xff
 8003ff0:	d90e      	bls.n	8004010 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	22ff      	movs	r2, #255	@ 0xff
 8003ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	8979      	ldrh	r1, [r7, #10]
 8004000:	2300      	movs	r3, #0
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fad3 	bl	80045b4 <I2C_TransferConfig>
 800400e:	e00f      	b.n	8004030 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401e:	b2da      	uxtb	r2, r3
 8004020:	8979      	ldrh	r1, [r7, #10]
 8004022:	2300      	movs	r3, #0
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fac2 	bl	80045b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d19a      	bne.n	8003f70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f994 	bl	800436c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e01a      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2220      	movs	r2, #32
 8004054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_I2C_Mem_Read+0x230>)
 8004062:	400b      	ands	r3, r1
 8004064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e000      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004082:	2302      	movs	r3, #2
  }
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	80002400 	.word	0x80002400
 8004090:	fe00e800 	.word	0xfe00e800

08004094 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	4608      	mov	r0, r1
 800409e:	4611      	mov	r1, r2
 80040a0:	461a      	mov	r2, r3
 80040a2:	4603      	mov	r3, r0
 80040a4:	817b      	strh	r3, [r7, #10]
 80040a6:	460b      	mov	r3, r1
 80040a8:	813b      	strh	r3, [r7, #8]
 80040aa:	4613      	mov	r3, r2
 80040ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	8979      	ldrh	r1, [r7, #10]
 80040b4:	4b20      	ldr	r3, [pc, #128]	@ (8004138 <I2C_RequestMemoryWrite+0xa4>)
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fa79 	bl	80045b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f909 	bl	80042de <I2C_WaitOnTXISFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e02c      	b.n	8004130 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d105      	bne.n	80040e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040dc:	893b      	ldrh	r3, [r7, #8]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80040e6:	e015      	b.n	8004114 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040e8:	893b      	ldrh	r3, [r7, #8]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f8ef 	bl	80042de <I2C_WaitOnTXISFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e012      	b.n	8004130 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800410a:	893b      	ldrh	r3, [r7, #8]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2200      	movs	r2, #0
 800411c:	2180      	movs	r1, #128	@ 0x80
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f884 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	80002000 	.word	0x80002000

0800413c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	4608      	mov	r0, r1
 8004146:	4611      	mov	r1, r2
 8004148:	461a      	mov	r2, r3
 800414a:	4603      	mov	r3, r0
 800414c:	817b      	strh	r3, [r7, #10]
 800414e:	460b      	mov	r3, r1
 8004150:	813b      	strh	r3, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	8979      	ldrh	r1, [r7, #10]
 800415c:	4b20      	ldr	r3, [pc, #128]	@ (80041e0 <I2C_RequestMemoryRead+0xa4>)
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2300      	movs	r3, #0
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fa26 	bl	80045b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	69b9      	ldr	r1, [r7, #24]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f8b6 	bl	80042de <I2C_WaitOnTXISFlagUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e02c      	b.n	80041d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004182:	893b      	ldrh	r3, [r7, #8]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	629a      	str	r2, [r3, #40]	@ 0x28
 800418c:	e015      	b.n	80041ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800418e:	893b      	ldrh	r3, [r7, #8]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	b29b      	uxth	r3, r3
 8004194:	b2da      	uxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	69b9      	ldr	r1, [r7, #24]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f89c 	bl	80042de <I2C_WaitOnTXISFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e012      	b.n	80041d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041b0:	893b      	ldrh	r3, [r7, #8]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2200      	movs	r2, #0
 80041c2:	2140      	movs	r1, #64	@ 0x40
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f831 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	80002000 	.word	0x80002000

080041e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d103      	bne.n	8004202 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2200      	movs	r2, #0
 8004200:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d007      	beq.n	8004220 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	619a      	str	r2, [r3, #24]
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800423c:	e03b      	b.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f8d6 	bl	80043f4 <I2C_IsErrorOccurred>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e041      	b.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d02d      	beq.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fc f913 	bl	8000484 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <I2C_WaitOnFlagUntilTimeout+0x44>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d122      	bne.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	429a      	cmp	r2, r3
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	429a      	cmp	r2, r3
 800428c:	d113      	bne.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f043 0220 	orr.w	r2, r3, #32
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00f      	b.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4013      	ands	r3, r2
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	bf0c      	ite	eq
 80042c6:	2301      	moveq	r3, #1
 80042c8:	2300      	movne	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d0b4      	beq.n	800423e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042ea:	e033      	b.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f87f 	bl	80043f4 <I2C_IsErrorOccurred>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e031      	b.n	8004364 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d025      	beq.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fc f8bc 	bl	8000484 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11a      	bne.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d013      	beq.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e007      	b.n	8004364 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b02      	cmp	r3, #2
 8004360:	d1c4      	bne.n	80042ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004378:	e02f      	b.n	80043da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f838 	bl	80043f4 <I2C_IsErrorOccurred>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e02d      	b.n	80043ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fc f879 	bl	8000484 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d11a      	bne.n	80043da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d013      	beq.n	80043da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e007      	b.n	80043ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d1c8      	bne.n	800437a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	@ 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b00      	cmp	r3, #0
 800441e:	d068      	beq.n	80044f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2210      	movs	r2, #16
 8004426:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004428:	e049      	b.n	80044be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d045      	beq.n	80044be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004432:	f7fc f827 	bl	8000484 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	429a      	cmp	r2, r3
 8004440:	d302      	bcc.n	8004448 <I2C_IsErrorOccurred+0x54>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d13a      	bne.n	80044be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004452:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800445a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800446a:	d121      	bne.n	80044b0 <I2C_IsErrorOccurred+0xbc>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004472:	d01d      	beq.n	80044b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2b20      	cmp	r3, #32
 8004478:	d01a      	beq.n	80044b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004488:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800448a:	f7fb fffb 	bl	8000484 <HAL_GetTick>
 800448e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004490:	e00e      	b.n	80044b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004492:	f7fb fff7 	bl	8000484 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b19      	cmp	r3, #25
 800449e:	d907      	bls.n	80044b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f043 0320 	orr.w	r3, r3, #32
 80044a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044ae:	e006      	b.n	80044be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d1e9      	bne.n	8004492 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d003      	beq.n	80044d4 <I2C_IsErrorOccurred+0xe0>
 80044cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0aa      	beq.n	800442a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d103      	bne.n	80044e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2220      	movs	r2, #32
 80044e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	f043 0304 	orr.w	r3, r3, #4
 80044ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00b      	beq.n	800451c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004514:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00b      	beq.n	800453e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f043 0308 	orr.w	r3, r3, #8
 800452c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004536:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00b      	beq.n	8004560 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	f043 0302 	orr.w	r3, r3, #2
 800454e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004558:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01c      	beq.n	80045a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff fe3b 	bl	80041e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <I2C_IsErrorOccurred+0x1bc>)
 800457a:	400b      	ands	r3, r1
 800457c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3728      	adds	r7, #40	@ 0x28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	fe00e800 	.word	0xfe00e800

080045b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	460b      	mov	r3, r1
 80045c0:	817b      	strh	r3, [r7, #10]
 80045c2:	4613      	mov	r3, r2
 80045c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045c6:	897b      	ldrh	r3, [r7, #10]
 80045c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045cc:	7a7b      	ldrb	r3, [r7, #9]
 80045ce:	041b      	lsls	r3, r3, #16
 80045d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	4313      	orrs	r3, r2
 80045de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	0d5b      	lsrs	r3, r3, #21
 80045ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80045f2:	4b08      	ldr	r3, [pc, #32]	@ (8004614 <I2C_TransferConfig+0x60>)
 80045f4:	430b      	orrs	r3, r1
 80045f6:	43db      	mvns	r3, r3
 80045f8:	ea02 0103 	and.w	r1, r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	03ff63ff 	.word	0x03ff63ff

08004618 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b20      	cmp	r3, #32
 800462c:	d138      	bne.n	80046a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004638:	2302      	movs	r3, #2
 800463a:	e032      	b.n	80046a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2224      	movs	r2, #36	@ 0x24
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800466a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6819      	ldr	r1, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d139      	bne.n	8004738 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e033      	b.n	800473a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2224      	movs	r2, #36	@ 0x24
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004700:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af02      	add	r7, sp, #8
 800474c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0fe      	b.n	8004956 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d106      	bne.n	8004772 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f00d faff 	bl	8011d70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2203      	movs	r2, #3
 8004776:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f007 fb39 	bl	800bdf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	7c1a      	ldrb	r2, [r3, #16]
 800478c:	f88d 2000 	strb.w	r2, [sp]
 8004790:	3304      	adds	r3, #4
 8004792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004794:	f007 fa0a 	bl	800bbac <USB_CoreInit>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0d5      	b.n	8004956 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2100      	movs	r1, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f007 fb31 	bl	800be18 <USB_SetCurrentMode>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0c6      	b.n	8004956 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	73fb      	strb	r3, [r7, #15]
 80047cc:	e04a      	b.n	8004864 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	3315      	adds	r3, #21
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047e2:	7bfa      	ldrb	r2, [r7, #15]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	3314      	adds	r3, #20
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047f6:	7bfa      	ldrb	r2, [r7, #15]
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	b298      	uxth	r0, r3
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	332e      	adds	r3, #46	@ 0x2e
 800480a:	4602      	mov	r2, r0
 800480c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800480e:	7bfa      	ldrb	r2, [r7, #15]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	3318      	adds	r3, #24
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004822:	7bfa      	ldrb	r2, [r7, #15]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	331c      	adds	r3, #28
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004836:	7bfa      	ldrb	r2, [r7, #15]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	3320      	adds	r3, #32
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800484a:	7bfa      	ldrb	r2, [r7, #15]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	3324      	adds	r3, #36	@ 0x24
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	3301      	adds	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	791b      	ldrb	r3, [r3, #4]
 8004868:	7bfa      	ldrb	r2, [r7, #15]
 800486a:	429a      	cmp	r2, r3
 800486c:	d3af      	bcc.n	80047ce <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
 8004872:	e044      	b.n	80048fe <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004874:	7bfa      	ldrb	r2, [r7, #15]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800488a:	7bfa      	ldrb	r2, [r7, #15]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800489c:	7bfa      	ldrb	r2, [r7, #15]
 800489e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048a0:	7bfa      	ldrb	r2, [r7, #15]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048cc:	7bfa      	ldrb	r2, [r7, #15]
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	440b      	add	r3, r1
 80048da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048e2:	7bfa      	ldrb	r2, [r7, #15]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	3301      	adds	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	791b      	ldrb	r3, [r3, #4]
 8004902:	7bfa      	ldrb	r2, [r7, #15]
 8004904:	429a      	cmp	r2, r3
 8004906:	d3b5      	bcc.n	8004874 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	7c1a      	ldrb	r2, [r3, #16]
 8004910:	f88d 2000 	strb.w	r2, [sp]
 8004914:	3304      	adds	r3, #4
 8004916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004918:	f007 faca 	bl	800beb0 <USB_DevInit>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e013      	b.n	8004956 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	7b1b      	ldrb	r3, [r3, #12]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d102      	bne.n	800494a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 f96d 	bl	8005c24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f008 fb09 	bl	800cf66 <USB_DevDisconnect>

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_PCD_Start+0x1c>
 8004976:	2302      	movs	r3, #2
 8004978:	e022      	b.n	80049c0 <HAL_PCD_Start+0x62>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004992:	2b01      	cmp	r3, #1
 8004994:	d105      	bne.n	80049a2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f007 fa14 	bl	800bdd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f008 fab7 	bl	800cf24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80049c8:	b590      	push	{r4, r7, lr}
 80049ca:	b08d      	sub	sp, #52	@ 0x34
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f008 fb75 	bl	800d0ce <USB_GetMode>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 84b9 	bne.w	800535e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f008 fad9 	bl	800cfa8 <USB_ReadInterrupts>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 84af 	beq.w	800535c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f008 fac6 	bl	800cfa8 <USB_ReadInterrupts>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d107      	bne.n	8004a36 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f002 0202 	and.w	r2, r2, #2
 8004a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f008 fab4 	bl	800cfa8 <USB_ReadInterrupts>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d161      	bne.n	8004b0e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699a      	ldr	r2, [r3, #24]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0210 	bic.w	r2, r2, #16
 8004a58:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	3304      	adds	r3, #4
 8004a78:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	0c5b      	lsrs	r3, r3, #17
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d124      	bne.n	8004ad0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d035      	beq.n	8004afe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6a38      	ldr	r0, [r7, #32]
 8004aa6:	f008 f8eb 	bl	800cc80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ab6:	441a      	add	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ac8:	441a      	add	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	615a      	str	r2, [r3, #20]
 8004ace:	e016      	b.n	8004afe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	0c5b      	lsrs	r3, r3, #17
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d110      	bne.n	8004afe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6a38      	ldr	r0, [r7, #32]
 8004ae8:	f008 f8ca 	bl	800cc80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004af8:	441a      	add	r2, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699a      	ldr	r2, [r3, #24]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0210 	orr.w	r2, r2, #16
 8004b0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f008 fa48 	bl	800cfa8 <USB_ReadInterrupts>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b22:	f040 80a7 	bne.w	8004c74 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f008 fa4d 	bl	800cfce <USB_ReadDevAllOutEpInterrupt>
 8004b34:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004b36:	e099      	b.n	8004c6c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 808e 	beq.w	8004c60 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f008 fa71 	bl	800d036 <USB_ReadDevOutEPInterrupt>
 8004b54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00c      	beq.n	8004b7a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2301      	movs	r3, #1
 8004b70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004b72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fecf 	bl	8005918 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00c      	beq.n	8004b9e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b90:	461a      	mov	r2, r3
 8004b92:	2308      	movs	r3, #8
 8004b94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 ffa5 	bl	8005ae8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2310      	movs	r3, #16
 8004bb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d030      	beq.n	8004c26 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bcc:	2b80      	cmp	r3, #128	@ 0x80
 8004bce:	d109      	bne.n	8004be4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004be2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	78db      	ldrb	r3, [r3, #3]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d108      	bne.n	8004c14 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f00d f9d4 	bl	8011fbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c20:	461a      	mov	r2, r3
 8004c22:	2302      	movs	r3, #2
 8004c24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2320      	movs	r3, #32
 8004c40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c5e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	3301      	adds	r3, #1
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	085b      	lsrs	r3, r3, #1
 8004c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f47f af62 	bne.w	8004b38 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f008 f995 	bl	800cfa8 <USB_ReadInterrupts>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c88:	f040 80db 	bne.w	8004e42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f008 f9b6 	bl	800d002 <USB_ReadDevAllInEpInterrupt>
 8004c96:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004c9c:	e0cd      	b.n	8004e3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80c2 	beq.w	8004e2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f008 f9dc 	bl	800d072 <USB_ReadDevInEPInterrupt>
 8004cba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d057      	beq.n	8004d76 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	2201      	movs	r2, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69f9      	ldr	r1, [r7, #28]
 8004ce2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	799b      	ldrb	r3, [r3, #6]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d132      	bne.n	8004d6a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d08:	4613      	mov	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	3320      	adds	r3, #32
 8004d14:	6819      	ldr	r1, [r3, #0]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4403      	add	r3, r0
 8004d24:	331c      	adds	r3, #28
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4419      	add	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4403      	add	r3, r0
 8004d38:	3320      	adds	r3, #32
 8004d3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d113      	bne.n	8004d6a <HAL_PCD_IRQHandler+0x3a2>
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d46:	4613      	mov	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3324      	adds	r3, #36	@ 0x24
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d62:	461a      	mov	r2, r3
 8004d64:	2101      	movs	r1, #1
 8004d66:	f008 f9e5 	bl	800d134 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f00d f89e 	bl	8011eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2308      	movs	r3, #8
 8004d90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da8:	461a      	mov	r2, r3
 8004daa:	2310      	movs	r3, #16
 8004dac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2340      	movs	r3, #64	@ 0x40
 8004dc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d023      	beq.n	8004e1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dd6:	6a38      	ldr	r0, [r7, #32]
 8004dd8:	f007 f9c8 	bl	800c16c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dde:	4613      	mov	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	3310      	adds	r3, #16
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	4413      	add	r3, r2
 8004dec:	3304      	adds	r3, #4
 8004dee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	78db      	ldrb	r3, [r3, #3]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d108      	bne.n	8004e0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f00d f8eb 	bl	8011fe0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e16:	461a      	mov	r2, r3
 8004e18:	2302      	movs	r3, #2
 8004e1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004e26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fce8 	bl	80057fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	3301      	adds	r3, #1
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f47f af2e 	bne.w	8004c9e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f008 f8ae 	bl	800cfa8 <USB_ReadInterrupts>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e56:	d122      	bne.n	8004e9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e66:	f023 0301 	bic.w	r3, r3, #1
 8004e6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d108      	bne.n	8004e88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e7e:	2100      	movs	r1, #0
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fef3 	bl	8005c6c <HAL_PCDEx_LPM_Callback>
 8004e86:	e002      	b.n	8004e8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f00d f889 	bl	8011fa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f008 f880 	bl	800cfa8 <USB_ReadInterrupts>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eb2:	d112      	bne.n	8004eda <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d102      	bne.n	8004eca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f00d f845 	bl	8011f54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695a      	ldr	r2, [r3, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f008 f862 	bl	800cfa8 <USB_ReadInterrupts>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eee:	d121      	bne.n	8004f34 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004efe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d111      	bne.n	8004f2e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	f003 020f 	and.w	r2, r3, #15
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004f24:	2101      	movs	r1, #1
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fea0 	bl	8005c6c <HAL_PCDEx_LPM_Callback>
 8004f2c:	e002      	b.n	8004f34 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f00d f810 	bl	8011f54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f008 f835 	bl	800cfa8 <USB_ReadInterrupts>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f48:	f040 80b7 	bne.w	80050ba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2110      	movs	r1, #16
 8004f66:	4618      	mov	r0, r3
 8004f68:	f007 f900 	bl	800c16c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f70:	e046      	b.n	8005000 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fa0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fa4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fb8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fd4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ff4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ff8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	791b      	ldrb	r3, [r3, #4]
 8005004:	461a      	mov	r2, r3
 8005006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005008:	4293      	cmp	r3, r2
 800500a:	d3b2      	bcc.n	8004f72 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800501a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800501e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	7bdb      	ldrb	r3, [r3, #15]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d016      	beq.n	8005056 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005038:	f043 030b 	orr.w	r3, r3, #11
 800503c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800504e:	f043 030b 	orr.w	r3, r3, #11
 8005052:	6453      	str	r3, [r2, #68]	@ 0x44
 8005054:	e015      	b.n	8005082 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505c:	695a      	ldr	r2, [r3, #20]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005064:	4619      	mov	r1, r3
 8005066:	f242 032b 	movw	r3, #8235	@ 0x202b
 800506a:	4313      	orrs	r3, r2
 800506c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800507c:	f043 030b 	orr.w	r3, r3, #11
 8005080:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005090:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005094:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050a4:	461a      	mov	r2, r3
 80050a6:	f008 f845 	bl	800d134 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80050b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f007 ff72 	bl	800cfa8 <USB_ReadInterrupts>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ce:	d123      	bne.n	8005118 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f008 f809 	bl	800d0ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f007 f8bd 	bl	800c25e <USB_GetDevSpeed>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681c      	ldr	r4, [r3, #0]
 80050f0:	f001 fd9c 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 80050f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050fa:	461a      	mov	r2, r3
 80050fc:	4620      	mov	r0, r4
 80050fe:	f006 fdc7 	bl	800bc90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f00c fefd 	bl	8011f02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005116:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f007 ff43 	bl	800cfa8 <USB_ReadInterrupts>
 8005122:	4603      	mov	r3, r0
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b08      	cmp	r3, #8
 800512a:	d10a      	bne.n	8005142 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f00c feda 	bl	8011ee6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f002 0208 	and.w	r2, r2, #8
 8005140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f007 ff2e 	bl	800cfa8 <USB_ReadInterrupts>
 800514c:	4603      	mov	r3, r0
 800514e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005152:	2b80      	cmp	r3, #128	@ 0x80
 8005154:	d123      	bne.n	800519e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005162:	2301      	movs	r3, #1
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
 8005166:	e014      	b.n	8005192 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516c:	4613      	mov	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	b2db      	uxtb	r3, r3
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fb08 	bl	800579c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	3301      	adds	r3, #1
 8005190:	627b      	str	r3, [r7, #36]	@ 0x24
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	791b      	ldrb	r3, [r3, #4]
 8005196:	461a      	mov	r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	4293      	cmp	r3, r2
 800519c:	d3e4      	bcc.n	8005168 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f007 ff00 	bl	800cfa8 <USB_ReadInterrupts>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051b2:	d13c      	bne.n	800522e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051b4:	2301      	movs	r3, #1
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b8:	e02b      	b.n	8005212 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ce:	4613      	mov	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	440b      	add	r3, r1
 80051d8:	3318      	adds	r3, #24
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d115      	bne.n	800520c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80051e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	da12      	bge.n	800520c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3317      	adds	r3, #23
 80051f6:	2201      	movs	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005202:	b2db      	uxtb	r3, r3
 8005204:	4619      	mov	r1, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fac8 	bl	800579c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	3301      	adds	r3, #1
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	791b      	ldrb	r3, [r3, #4]
 8005216:	461a      	mov	r2, r3
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	4293      	cmp	r3, r2
 800521c:	d3cd      	bcc.n	80051ba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800522c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f007 feb8 	bl	800cfa8 <USB_ReadInterrupts>
 8005238:	4603      	mov	r3, r0
 800523a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800523e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005242:	d156      	bne.n	80052f2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005244:	2301      	movs	r3, #1
 8005246:	627b      	str	r3, [r7, #36]	@ 0x24
 8005248:	e045      	b.n	80052d6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800525e:	4613      	mov	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d12e      	bne.n	80052d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005272:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005274:	2b00      	cmp	r3, #0
 8005276:	da2b      	bge.n	80052d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005284:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005288:	429a      	cmp	r2, r3
 800528a:	d121      	bne.n	80052d0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800529e:	2201      	movs	r2, #1
 80052a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052cc:	6053      	str	r3, [r2, #4]
            break;
 80052ce:	e008      	b.n	80052e2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	3301      	adds	r3, #1
 80052d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	791b      	ldrb	r3, [r3, #4]
 80052da:	461a      	mov	r2, r3
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	4293      	cmp	r3, r2
 80052e0:	d3b3      	bcc.n	800524a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80052f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f007 fe56 	bl	800cfa8 <USB_ReadInterrupts>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005306:	d10a      	bne.n	800531e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f00c fe7b 	bl	8012004 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800531c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f007 fe40 	bl	800cfa8 <USB_ReadInterrupts>
 8005328:	4603      	mov	r3, r0
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b04      	cmp	r3, #4
 8005330:	d115      	bne.n	800535e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f00c fe6b 	bl	8012020 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6859      	ldr	r1, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	e000      	b.n	800535e <HAL_PCD_IRQHandler+0x996>
      return;
 800535c:	bf00      	nop
    }
  }
}
 800535e:	3734      	adds	r7, #52	@ 0x34
 8005360:	46bd      	mov	sp, r7
 8005362:	bd90      	pop	{r4, r7, pc}

08005364 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_PCD_SetAddress+0x1a>
 800537a:	2302      	movs	r3, #2
 800537c:	e012      	b.n	80053a4 <HAL_PCD_SetAddress+0x40>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	4611      	mov	r1, r2
 8005394:	4618      	mov	r0, r3
 8005396:	f007 fd9f 	bl	800ced8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	4608      	mov	r0, r1
 80053b6:	4611      	mov	r1, r2
 80053b8:	461a      	mov	r2, r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	70fb      	strb	r3, [r7, #3]
 80053be:	460b      	mov	r3, r1
 80053c0:	803b      	strh	r3, [r7, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da0f      	bge.n	80053f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	f003 020f 	and.w	r2, r3, #15
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	3310      	adds	r3, #16
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4413      	add	r3, r2
 80053e6:	3304      	adds	r3, #4
 80053e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	705a      	strb	r2, [r3, #1]
 80053f0:	e00f      	b.n	8005412 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	f003 020f 	and.w	r2, r3, #15
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4413      	add	r3, r2
 8005408:	3304      	adds	r3, #4
 800540a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	b2da      	uxtb	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800541e:	883a      	ldrh	r2, [r7, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	78ba      	ldrb	r2, [r7, #2]
 8005428:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	785b      	ldrb	r3, [r3, #1]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800543c:	78bb      	ldrb	r3, [r7, #2]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d102      	bne.n	8005448 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_PCD_EP_Open+0xaa>
 8005452:	2302      	movs	r3, #2
 8005454:	e00e      	b.n	8005474 <HAL_PCD_EP_Open+0xc8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	4618      	mov	r0, r3
 8005466:	f006 ff1f 	bl	800c2a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005472:	7afb      	ldrb	r3, [r7, #11]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800548c:	2b00      	cmp	r3, #0
 800548e:	da0f      	bge.n	80054b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	f003 020f 	and.w	r2, r3, #15
 8005496:	4613      	mov	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	3310      	adds	r3, #16
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4413      	add	r3, r2
 80054a4:	3304      	adds	r3, #4
 80054a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	705a      	strb	r2, [r3, #1]
 80054ae:	e00f      	b.n	80054d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 020f 	and.w	r2, r3, #15
 80054b6:	4613      	mov	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	3304      	adds	r3, #4
 80054c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_PCD_EP_Close+0x6e>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e00e      	b.n	8005508 <HAL_PCD_EP_Close+0x8c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68f9      	ldr	r1, [r7, #12]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f006 ff5d 	bl	800c3b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	460b      	mov	r3, r1
 800551e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005520:	7afb      	ldrb	r3, [r7, #11]
 8005522:	f003 020f 	and.w	r2, r3, #15
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	3304      	adds	r3, #4
 8005538:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2200      	movs	r2, #0
 8005550:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005552:	7afb      	ldrb	r3, [r7, #11]
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	b2da      	uxtb	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	799b      	ldrb	r3, [r3, #6]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d102      	bne.n	800556c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	799b      	ldrb	r3, [r3, #6]
 8005574:	461a      	mov	r2, r3
 8005576:	6979      	ldr	r1, [r7, #20]
 8005578:	f006 fffa 	bl	800c570 <USB_EPStartXfer>

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	f003 020f 	and.w	r2, r3, #15
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80055a8:	681b      	ldr	r3, [r3, #0]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	460b      	mov	r3, r1
 80055c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055c6:	7afb      	ldrb	r3, [r7, #11]
 80055c8:	f003 020f 	and.w	r2, r3, #15
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	3310      	adds	r3, #16
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	3304      	adds	r3, #4
 80055dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2200      	movs	r2, #0
 80055ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2201      	movs	r2, #1
 80055f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055f6:	7afb      	ldrb	r3, [r7, #11]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	799b      	ldrb	r3, [r3, #6]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d102      	bne.n	8005610 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	799b      	ldrb	r3, [r3, #6]
 8005618:	461a      	mov	r2, r3
 800561a:	6979      	ldr	r1, [r7, #20]
 800561c:	f006 ffa8 	bl	800c570 <USB_EPStartXfer>

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	7912      	ldrb	r2, [r2, #4]
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e04f      	b.n	80056e8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800564c:	2b00      	cmp	r3, #0
 800564e:	da0f      	bge.n	8005670 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	f003 020f 	and.w	r2, r3, #15
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	3310      	adds	r3, #16
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	3304      	adds	r3, #4
 8005666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2201      	movs	r2, #1
 800566c:	705a      	strb	r2, [r3, #1]
 800566e:	e00d      	b.n	800568c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	4413      	add	r3, r2
 8005682:	3304      	adds	r3, #4
 8005684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_PCD_EP_SetStall+0x82>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e01d      	b.n	80056e8 <HAL_PCD_EP_SetStall+0xbe>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68f9      	ldr	r1, [r7, #12]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f007 fb38 	bl	800cd30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	7999      	ldrb	r1, [r3, #6]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056d8:	461a      	mov	r2, r3
 80056da:	f007 fd2b 	bl	800d134 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	7912      	ldrb	r2, [r2, #4]
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e042      	b.n	8005794 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800570e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005712:	2b00      	cmp	r3, #0
 8005714:	da0f      	bge.n	8005736 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	f003 020f 	and.w	r2, r3, #15
 800571c:	4613      	mov	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	3310      	adds	r3, #16
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	4413      	add	r3, r2
 800572a:	3304      	adds	r3, #4
 800572c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	705a      	strb	r2, [r3, #1]
 8005734:	e00f      	b.n	8005756 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	f003 020f 	and.w	r2, r3, #15
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	3304      	adds	r3, #4
 800574e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	b2da      	uxtb	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_PCD_EP_ClrStall+0x86>
 8005772:	2302      	movs	r3, #2
 8005774:	e00e      	b.n	8005794 <HAL_PCD_EP_ClrStall+0xa4>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	4618      	mov	r0, r3
 8005786:	f007 fb41 	bl	800ce0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80057a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	da0c      	bge.n	80057ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	f003 020f 	and.w	r2, r3, #15
 80057b6:	4613      	mov	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	3310      	adds	r3, #16
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4413      	add	r3, r2
 80057c4:	3304      	adds	r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e00c      	b.n	80057e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	f003 020f 	and.w	r2, r3, #15
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	4413      	add	r3, r2
 80057e0:	3304      	adds	r3, #4
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68f9      	ldr	r1, [r7, #12]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f007 f960 	bl	800cab0 <USB_EPStopXfer>
 80057f0:	4603      	mov	r3, r0
 80057f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80057f4:	7afb      	ldrb	r3, [r7, #11]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b08a      	sub	sp, #40	@ 0x28
 8005802:	af02      	add	r7, sp, #8
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	3310      	adds	r3, #16
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4413      	add	r3, r2
 8005822:	3304      	adds	r3, #4
 8005824:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	695a      	ldr	r2, [r3, #20]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	429a      	cmp	r2, r3
 8005830:	d901      	bls.n	8005836 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06b      	b.n	800590e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	429a      	cmp	r2, r3
 800584a:	d902      	bls.n	8005852 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	3303      	adds	r3, #3
 8005856:	089b      	lsrs	r3, r3, #2
 8005858:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800585a:	e02a      	b.n	80058b2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	429a      	cmp	r2, r3
 8005870:	d902      	bls.n	8005878 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3303      	adds	r3, #3
 800587c:	089b      	lsrs	r3, r3, #2
 800587e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68d9      	ldr	r1, [r3, #12]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	4603      	mov	r3, r0
 8005894:	6978      	ldr	r0, [r7, #20]
 8005896:	f007 f9b5 	bl	800cc04 <USB_WritePacket>

    ep->xfer_buff  += len;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	441a      	add	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	441a      	add	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d809      	bhi.n	80058dc <PCD_WriteEmptyTxFifo+0xde>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	695a      	ldr	r2, [r3, #20]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d203      	bcs.n	80058dc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1bf      	bne.n	800585c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d811      	bhi.n	800590c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	2201      	movs	r2, #1
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	43db      	mvns	r3, r3
 8005902:	6939      	ldr	r1, [r7, #16]
 8005904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005908:	4013      	ands	r3, r2
 800590a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	333c      	adds	r3, #60	@ 0x3c
 8005930:	3304      	adds	r3, #4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	799b      	ldrb	r3, [r3, #6]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d17b      	bne.n	8005a46 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d015      	beq.n	8005984 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	4a61      	ldr	r2, [pc, #388]	@ (8005ae0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	f240 80b9 	bls.w	8005ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80b3 	beq.w	8005ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597a:	461a      	mov	r2, r3
 800597c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005980:	6093      	str	r3, [r2, #8]
 8005982:	e0a7      	b.n	8005ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599a:	461a      	mov	r2, r3
 800599c:	2320      	movs	r3, #32
 800599e:	6093      	str	r3, [r2, #8]
 80059a0:	e098      	b.n	8005ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f040 8093 	bne.w	8005ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4a4b      	ldr	r2, [pc, #300]	@ (8005ae0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d90f      	bls.n	80059d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059cc:	461a      	mov	r2, r3
 80059ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059d2:	6093      	str	r3, [r2, #8]
 80059d4:	e07e      	b.n	8005ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	0159      	lsls	r1, r3, #5
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	440b      	add	r3, r1
 80059f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a02:	1ad2      	subs	r2, r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d114      	bne.n	8005a38 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a20:	461a      	mov	r2, r3
 8005a22:	2101      	movs	r1, #1
 8005a24:	f007 fb86 	bl	800d134 <USB_EP0_OutStart>
 8005a28:	e006      	b.n	8005a38 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	441a      	add	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f00c fa1c 	bl	8011e7c <HAL_PCD_DataOutStageCallback>
 8005a44:	e046      	b.n	8005ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	4a26      	ldr	r2, [pc, #152]	@ (8005ae4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d124      	bne.n	8005a98 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a64:	461a      	mov	r2, r3
 8005a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a6a:	6093      	str	r3, [r2, #8]
 8005a6c:	e032      	b.n	8005ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a84:	461a      	mov	r2, r3
 8005a86:	2320      	movs	r3, #32
 8005a88:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f00c f9f3 	bl	8011e7c <HAL_PCD_DataOutStageCallback>
 8005a96:	e01d      	b.n	8005ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d114      	bne.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d108      	bne.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	f007 fb36 	bl	800d134 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f00c f9d4 	bl	8011e7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	4f54300a 	.word	0x4f54300a
 8005ae4:	4f54310a 	.word	0x4f54310a

08005ae8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	333c      	adds	r3, #60	@ 0x3c
 8005b00:	3304      	adds	r3, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a15      	ldr	r2, [pc, #84]	@ (8005b70 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d90e      	bls.n	8005b3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b34:	461a      	mov	r2, r3
 8005b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f00c f98b 	bl	8011e58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4a0a      	ldr	r2, [pc, #40]	@ (8005b70 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d90c      	bls.n	8005b64 <PCD_EP_OutSetupPacket_int+0x7c>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	799b      	ldrb	r3, [r3, #6]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d108      	bne.n	8005b64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2101      	movs	r1, #1
 8005b60:	f007 fae8 	bl	800d134 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	4f54300a 	.word	0x4f54300a

08005b74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	70fb      	strb	r3, [r7, #3]
 8005b80:	4613      	mov	r3, r2
 8005b82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d107      	bne.n	8005ba2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b92:	883b      	ldrh	r3, [r7, #0]
 8005b94:	0419      	lsls	r1, r3, #16
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ba0:	e028      	b.n	8005bf4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	0c1b      	lsrs	r3, r3, #16
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	e00d      	b.n	8005bd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	3340      	adds	r3, #64	@ 0x40
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4413      	add	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	73fb      	strb	r3, [r7, #15]
 8005bd2:	7bfa      	ldrb	r2, [r7, #15]
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d3ec      	bcc.n	8005bb6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005bdc:	883b      	ldrh	r3, [r7, #0]
 8005bde:	0418      	lsls	r0, r3, #16
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	4302      	orrs	r2, r0
 8005bec:	3340      	adds	r3, #64	@ 0x40
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	887a      	ldrh	r2, [r7, #2]
 8005c14:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c52:	4b05      	ldr	r3, [pc, #20]	@ (8005c68 <HAL_PCDEx_ActivateLPM+0x44>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	10000003 	.word	0x10000003

08005c6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c8c:	4b19      	ldr	r3, [pc, #100]	@ (8005cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d00a      	beq.n	8005cae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c98:	4b16      	ldr	r3, [pc, #88]	@ (8005cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d001      	beq.n	8005caa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e01f      	b.n	8005cea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e01d      	b.n	8005cea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005cae:	4b11      	ldr	r3, [pc, #68]	@ (8005cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f023 0207 	bic.w	r2, r3, #7
 8005cb6:	490f      	ldr	r1, [pc, #60]	@ (8005cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cbe:	f7fa fbe1 	bl	8000484 <HAL_GetTick>
 8005cc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cc4:	e009      	b.n	8005cda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cc6:	f7fa fbdd 	bl	8000484 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cd4:	d901      	bls.n	8005cda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e007      	b.n	8005cea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cda:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce6:	d1ee      	bne.n	8005cc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	58024800 	.word	0x58024800

08005cf8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005cfc:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4a04      	ldr	r2, [pc, #16]	@ (8005d14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d06:	60d3      	str	r3, [r2, #12]
}
 8005d08:	bf00      	nop
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	58024800 	.word	0x58024800

08005d18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08c      	sub	sp, #48	@ 0x30
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f000 bc48 	b.w	80065bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8088 	beq.w	8005e4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d3a:	4b99      	ldr	r3, [pc, #612]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d44:	4b96      	ldr	r3, [pc, #600]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4c:	2b10      	cmp	r3, #16
 8005d4e:	d007      	beq.n	8005d60 <HAL_RCC_OscConfig+0x48>
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	2b18      	cmp	r3, #24
 8005d54:	d111      	bne.n	8005d7a <HAL_RCC_OscConfig+0x62>
 8005d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d10c      	bne.n	8005d7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d60:	4b8f      	ldr	r3, [pc, #572]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d06d      	beq.n	8005e48 <HAL_RCC_OscConfig+0x130>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d169      	bne.n	8005e48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f000 bc21 	b.w	80065bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d82:	d106      	bne.n	8005d92 <HAL_RCC_OscConfig+0x7a>
 8005d84:	4b86      	ldr	r3, [pc, #536]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a85      	ldr	r2, [pc, #532]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	e02e      	b.n	8005df0 <HAL_RCC_OscConfig+0xd8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x9c>
 8005d9a:	4b81      	ldr	r3, [pc, #516]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a80      	ldr	r2, [pc, #512]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	4b7e      	ldr	r3, [pc, #504]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a7d      	ldr	r2, [pc, #500]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005dac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e01d      	b.n	8005df0 <HAL_RCC_OscConfig+0xd8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0xc0>
 8005dbe:	4b78      	ldr	r3, [pc, #480]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a77      	ldr	r2, [pc, #476]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	4b75      	ldr	r3, [pc, #468]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a74      	ldr	r2, [pc, #464]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e00b      	b.n	8005df0 <HAL_RCC_OscConfig+0xd8>
 8005dd8:	4b71      	ldr	r3, [pc, #452]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a70      	ldr	r2, [pc, #448]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	4b6e      	ldr	r3, [pc, #440]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a6d      	ldr	r2, [pc, #436]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d013      	beq.n	8005e20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df8:	f7fa fb44 	bl	8000484 <HAL_GetTick>
 8005dfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e00:	f7fa fb40 	bl	8000484 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b64      	cmp	r3, #100	@ 0x64
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e3d4      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e12:	4b63      	ldr	r3, [pc, #396]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0xe8>
 8005e1e:	e014      	b.n	8005e4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e20:	f7fa fb30 	bl	8000484 <HAL_GetTick>
 8005e24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fa fb2c 	bl	8000484 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b64      	cmp	r3, #100	@ 0x64
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e3c0      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e3a:	4b59      	ldr	r3, [pc, #356]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0x110>
 8005e46:	e000      	b.n	8005e4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 80ca 	beq.w	8005fec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e58:	4b51      	ldr	r3, [pc, #324]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e62:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e66:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_RCC_OscConfig+0x166>
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	2b18      	cmp	r3, #24
 8005e72:	d156      	bne.n	8005f22 <HAL_RCC_OscConfig+0x20a>
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d151      	bne.n	8005f22 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e7e:	4b48      	ldr	r3, [pc, #288]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_RCC_OscConfig+0x17e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e392      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e96:	4b42      	ldr	r3, [pc, #264]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 0219 	bic.w	r2, r3, #25
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	493f      	ldr	r1, [pc, #252]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea8:	f7fa faec 	bl	8000484 <HAL_GetTick>
 8005eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb0:	f7fa fae8 	bl	8000484 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e37c      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ec2:	4b37      	ldr	r3, [pc, #220]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ece:	f7fa fb09 	bl	80004e4 <HAL_GetREVID>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d817      	bhi.n	8005f0c <HAL_RCC_OscConfig+0x1f4>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b40      	cmp	r3, #64	@ 0x40
 8005ee2:	d108      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x1de>
 8005ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005eec:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ef2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef4:	e07a      	b.n	8005fec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	031b      	lsls	r3, r3, #12
 8005f04:	4926      	ldr	r1, [pc, #152]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f0a:	e06f      	b.n	8005fec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f0c:	4b24      	ldr	r3, [pc, #144]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	061b      	lsls	r3, r3, #24
 8005f1a:	4921      	ldr	r1, [pc, #132]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f20:	e064      	b.n	8005fec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d047      	beq.n	8005fba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 0219 	bic.w	r2, r3, #25
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	491a      	ldr	r1, [pc, #104]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3c:	f7fa faa2 	bl	8000484 <HAL_GetTick>
 8005f40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f44:	f7fa fa9e 	bl	8000484 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e332      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f56:	4b12      	ldr	r3, [pc, #72]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0f0      	beq.n	8005f44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f62:	f7fa fabf 	bl	80004e4 <HAL_GetREVID>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d819      	bhi.n	8005fa4 <HAL_RCC_OscConfig+0x28c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b40      	cmp	r3, #64	@ 0x40
 8005f76:	d108      	bne.n	8005f8a <HAL_RCC_OscConfig+0x272>
 8005f78:	4b09      	ldr	r3, [pc, #36]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f80:	4a07      	ldr	r2, [pc, #28]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f86:	6053      	str	r3, [r2, #4]
 8005f88:	e030      	b.n	8005fec <HAL_RCC_OscConfig+0x2d4>
 8005f8a:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	031b      	lsls	r3, r3, #12
 8005f98:	4901      	ldr	r1, [pc, #4]	@ (8005fa0 <HAL_RCC_OscConfig+0x288>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	604b      	str	r3, [r1, #4]
 8005f9e:	e025      	b.n	8005fec <HAL_RCC_OscConfig+0x2d4>
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	4b9a      	ldr	r3, [pc, #616]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	061b      	lsls	r3, r3, #24
 8005fb2:	4997      	ldr	r1, [pc, #604]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	604b      	str	r3, [r1, #4]
 8005fb8:	e018      	b.n	8005fec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fba:	4b95      	ldr	r3, [pc, #596]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a94      	ldr	r2, [pc, #592]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc6:	f7fa fa5d 	bl	8000484 <HAL_GetTick>
 8005fca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fce:	f7fa fa59 	bl	8000484 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e2ed      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fe0:	4b8b      	ldr	r3, [pc, #556]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f0      	bne.n	8005fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80a9 	beq.w	800614c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ffa:	4b85      	ldr	r3, [pc, #532]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006002:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006004:	4b82      	ldr	r3, [pc, #520]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006008:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d007      	beq.n	8006020 <HAL_RCC_OscConfig+0x308>
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b18      	cmp	r3, #24
 8006014:	d13a      	bne.n	800608c <HAL_RCC_OscConfig+0x374>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d135      	bne.n	800608c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006020:	4b7b      	ldr	r3, [pc, #492]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_RCC_OscConfig+0x320>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	2b80      	cmp	r3, #128	@ 0x80
 8006032:	d001      	beq.n	8006038 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e2c1      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006038:	f7fa fa54 	bl	80004e4 <HAL_GetREVID>
 800603c:	4603      	mov	r3, r0
 800603e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006042:	4293      	cmp	r3, r2
 8006044:	d817      	bhi.n	8006076 <HAL_RCC_OscConfig+0x35e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	2b20      	cmp	r3, #32
 800604c:	d108      	bne.n	8006060 <HAL_RCC_OscConfig+0x348>
 800604e:	4b70      	ldr	r3, [pc, #448]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006056:	4a6e      	ldr	r2, [pc, #440]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006058:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800605c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800605e:	e075      	b.n	800614c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006060:	4b6b      	ldr	r3, [pc, #428]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	069b      	lsls	r3, r3, #26
 800606e:	4968      	ldr	r1, [pc, #416]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006070:	4313      	orrs	r3, r2
 8006072:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006074:	e06a      	b.n	800614c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006076:	4b66      	ldr	r3, [pc, #408]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	061b      	lsls	r3, r3, #24
 8006084:	4962      	ldr	r1, [pc, #392]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006086:	4313      	orrs	r3, r2
 8006088:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800608a:	e05f      	b.n	800614c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d042      	beq.n	800611a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006094:	4b5e      	ldr	r3, [pc, #376]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a5d      	ldr	r2, [pc, #372]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 800609a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800609e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fa f9f0 	bl	8000484 <HAL_GetTick>
 80060a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80060a8:	f7fa f9ec 	bl	8000484 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e280      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060ba:	4b55      	ldr	r3, [pc, #340]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060c6:	f7fa fa0d 	bl	80004e4 <HAL_GetREVID>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d817      	bhi.n	8006104 <HAL_RCC_OscConfig+0x3ec>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d108      	bne.n	80060ee <HAL_RCC_OscConfig+0x3d6>
 80060dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80060e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 80060e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060ea:	6053      	str	r3, [r2, #4]
 80060ec:	e02e      	b.n	800614c <HAL_RCC_OscConfig+0x434>
 80060ee:	4b48      	ldr	r3, [pc, #288]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	069b      	lsls	r3, r3, #26
 80060fc:	4944      	ldr	r1, [pc, #272]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	604b      	str	r3, [r1, #4]
 8006102:	e023      	b.n	800614c <HAL_RCC_OscConfig+0x434>
 8006104:	4b42      	ldr	r3, [pc, #264]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	493f      	ldr	r1, [pc, #252]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006114:	4313      	orrs	r3, r2
 8006116:	60cb      	str	r3, [r1, #12]
 8006118:	e018      	b.n	800614c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800611a:	4b3d      	ldr	r3, [pc, #244]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a3c      	ldr	r2, [pc, #240]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006126:	f7fa f9ad 	bl	8000484 <HAL_GetTick>
 800612a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800612e:	f7fa f9a9 	bl	8000484 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e23d      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006140:	4b33      	ldr	r3, [pc, #204]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1f0      	bne.n	800612e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d036      	beq.n	80061c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d019      	beq.n	8006194 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006160:	4b2b      	ldr	r3, [pc, #172]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006164:	4a2a      	ldr	r2, [pc, #168]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006166:	f043 0301 	orr.w	r3, r3, #1
 800616a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800616c:	f7fa f98a 	bl	8000484 <HAL_GetTick>
 8006170:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006174:	f7fa f986 	bl	8000484 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e21a      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006186:	4b22      	ldr	r3, [pc, #136]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0f0      	beq.n	8006174 <HAL_RCC_OscConfig+0x45c>
 8006192:	e018      	b.n	80061c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006194:	4b1e      	ldr	r3, [pc, #120]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006198:	4a1d      	ldr	r2, [pc, #116]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 800619a:	f023 0301 	bic.w	r3, r3, #1
 800619e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a0:	f7fa f970 	bl	8000484 <HAL_GetTick>
 80061a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a8:	f7fa f96c 	bl	8000484 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e200      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061ba:	4b15      	ldr	r3, [pc, #84]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 80061bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d039      	beq.n	8006246 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01c      	beq.n	8006214 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061da:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a0c      	ldr	r2, [pc, #48]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 80061e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80061e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061e6:	f7fa f94d 	bl	8000484 <HAL_GetTick>
 80061ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061ee:	f7fa f949 	bl	8000484 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e1dd      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006200:	4b03      	ldr	r3, [pc, #12]	@ (8006210 <HAL_RCC_OscConfig+0x4f8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <HAL_RCC_OscConfig+0x4d6>
 800620c:	e01b      	b.n	8006246 <HAL_RCC_OscConfig+0x52e>
 800620e:	bf00      	nop
 8006210:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006214:	4b9b      	ldr	r3, [pc, #620]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a9a      	ldr	r2, [pc, #616]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 800621a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800621e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006220:	f7fa f930 	bl	8000484 <HAL_GetTick>
 8006224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006228:	f7fa f92c 	bl	8000484 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e1c0      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800623a:	4b92      	ldr	r3, [pc, #584]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f0      	bne.n	8006228 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0304 	and.w	r3, r3, #4
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 8081 	beq.w	8006356 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006254:	4b8c      	ldr	r3, [pc, #560]	@ (8006488 <HAL_RCC_OscConfig+0x770>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a8b      	ldr	r2, [pc, #556]	@ (8006488 <HAL_RCC_OscConfig+0x770>)
 800625a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800625e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006260:	f7fa f910 	bl	8000484 <HAL_GetTick>
 8006264:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006268:	f7fa f90c 	bl	8000484 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	@ 0x64
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e1a0      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800627a:	4b83      	ldr	r3, [pc, #524]	@ (8006488 <HAL_RCC_OscConfig+0x770>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f0      	beq.n	8006268 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d106      	bne.n	800629c <HAL_RCC_OscConfig+0x584>
 800628e:	4b7d      	ldr	r3, [pc, #500]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006292:	4a7c      	ldr	r2, [pc, #496]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	6713      	str	r3, [r2, #112]	@ 0x70
 800629a:	e02d      	b.n	80062f8 <HAL_RCC_OscConfig+0x5e0>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10c      	bne.n	80062be <HAL_RCC_OscConfig+0x5a6>
 80062a4:	4b77      	ldr	r3, [pc, #476]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a8:	4a76      	ldr	r2, [pc, #472]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b0:	4b74      	ldr	r3, [pc, #464]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b4:	4a73      	ldr	r2, [pc, #460]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062b6:	f023 0304 	bic.w	r3, r3, #4
 80062ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80062bc:	e01c      	b.n	80062f8 <HAL_RCC_OscConfig+0x5e0>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCC_OscConfig+0x5c8>
 80062c6:	4b6f      	ldr	r3, [pc, #444]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ca:	4a6e      	ldr	r2, [pc, #440]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062cc:	f043 0304 	orr.w	r3, r3, #4
 80062d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d6:	4a6b      	ldr	r2, [pc, #428]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80062de:	e00b      	b.n	80062f8 <HAL_RCC_OscConfig+0x5e0>
 80062e0:	4b68      	ldr	r3, [pc, #416]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e4:	4a67      	ldr	r2, [pc, #412]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ec:	4b65      	ldr	r3, [pc, #404]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f0:	4a64      	ldr	r2, [pc, #400]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80062f2:	f023 0304 	bic.w	r3, r3, #4
 80062f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d015      	beq.n	800632c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006300:	f7fa f8c0 	bl	8000484 <HAL_GetTick>
 8006304:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006306:	e00a      	b.n	800631e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006308:	f7fa f8bc 	bl	8000484 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e14e      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800631e:	4b59      	ldr	r3, [pc, #356]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0ee      	beq.n	8006308 <HAL_RCC_OscConfig+0x5f0>
 800632a:	e014      	b.n	8006356 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632c:	f7fa f8aa 	bl	8000484 <HAL_GetTick>
 8006330:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006332:	e00a      	b.n	800634a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006334:	f7fa f8a6 	bl	8000484 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e138      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800634a:	4b4e      	ldr	r3, [pc, #312]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1ee      	bne.n	8006334 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 812d 	beq.w	80065ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006360:	4b48      	ldr	r3, [pc, #288]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006368:	2b18      	cmp	r3, #24
 800636a:	f000 80bd 	beq.w	80064e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	2b02      	cmp	r3, #2
 8006374:	f040 809e 	bne.w	80064b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006378:	4b42      	ldr	r3, [pc, #264]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a41      	ldr	r2, [pc, #260]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 800637e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fa f87e 	bl	8000484 <HAL_GetTick>
 8006388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638c:	f7fa f87a 	bl	8000484 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e10e      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800639e:	4b39      	ldr	r3, [pc, #228]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063aa:	4b36      	ldr	r3, [pc, #216]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80063ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063ae:	4b37      	ldr	r3, [pc, #220]	@ (800648c <HAL_RCC_OscConfig+0x774>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063ba:	0112      	lsls	r2, r2, #4
 80063bc:	430a      	orrs	r2, r1
 80063be:	4931      	ldr	r1, [pc, #196]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c8:	3b01      	subs	r3, #1
 80063ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d2:	3b01      	subs	r3, #1
 80063d4:	025b      	lsls	r3, r3, #9
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	3b01      	subs	r3, #1
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ec:	3b01      	subs	r3, #1
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063f4:	4923      	ldr	r1, [pc, #140]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80063fa:	4b22      	ldr	r3, [pc, #136]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	4a21      	ldr	r2, [pc, #132]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006406:	4b1f      	ldr	r3, [pc, #124]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800640a:	4b21      	ldr	r3, [pc, #132]	@ (8006490 <HAL_RCC_OscConfig+0x778>)
 800640c:	4013      	ands	r3, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006412:	00d2      	lsls	r2, r2, #3
 8006414:	491b      	ldr	r1, [pc, #108]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006416:	4313      	orrs	r3, r2
 8006418:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800641a:	4b1a      	ldr	r3, [pc, #104]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	f023 020c 	bic.w	r2, r3, #12
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	4917      	ldr	r1, [pc, #92]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006428:	4313      	orrs	r3, r2
 800642a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800642c:	4b15      	ldr	r3, [pc, #84]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	f023 0202 	bic.w	r2, r3, #2
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006438:	4912      	ldr	r1, [pc, #72]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 800643a:	4313      	orrs	r3, r2
 800643c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800643e:	4b11      	ldr	r3, [pc, #68]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	4a10      	ldr	r2, [pc, #64]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006448:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800644a:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 800644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644e:	4a0d      	ldr	r2, [pc, #52]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006456:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645a:	4a0a      	ldr	r2, [pc, #40]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 800645c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006460:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006462:	4b08      	ldr	r3, [pc, #32]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006466:	4a07      	ldr	r2, [pc, #28]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800646e:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a04      	ldr	r2, [pc, #16]	@ (8006484 <HAL_RCC_OscConfig+0x76c>)
 8006474:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647a:	f7fa f803 	bl	8000484 <HAL_GetTick>
 800647e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006480:	e011      	b.n	80064a6 <HAL_RCC_OscConfig+0x78e>
 8006482:	bf00      	nop
 8006484:	58024400 	.word	0x58024400
 8006488:	58024800 	.word	0x58024800
 800648c:	fffffc0c 	.word	0xfffffc0c
 8006490:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006494:	f7f9 fff6 	bl	8000484 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e08a      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064a6:	4b47      	ldr	r3, [pc, #284]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCC_OscConfig+0x77c>
 80064b2:	e082      	b.n	80065ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064b4:	4b43      	ldr	r3, [pc, #268]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a42      	ldr	r2, [pc, #264]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 80064ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c0:	f7f9 ffe0 	bl	8000484 <HAL_GetTick>
 80064c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c8:	f7f9 ffdc 	bl	8000484 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e070      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064da:	4b3a      	ldr	r3, [pc, #232]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1f0      	bne.n	80064c8 <HAL_RCC_OscConfig+0x7b0>
 80064e6:	e068      	b.n	80065ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064e8:	4b36      	ldr	r3, [pc, #216]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 80064ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064ee:	4b35      	ldr	r3, [pc, #212]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d031      	beq.n	8006560 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f003 0203 	and.w	r2, r3, #3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006506:	429a      	cmp	r2, r3
 8006508:	d12a      	bne.n	8006560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	091b      	lsrs	r3, r3, #4
 800650e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006516:	429a      	cmp	r2, r3
 8006518:	d122      	bne.n	8006560 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006524:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006526:	429a      	cmp	r2, r3
 8006528:	d11a      	bne.n	8006560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	0a5b      	lsrs	r3, r3, #9
 800652e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006536:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006538:	429a      	cmp	r2, r3
 800653a:	d111      	bne.n	8006560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	0c1b      	lsrs	r3, r3, #16
 8006540:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006548:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800654a:	429a      	cmp	r2, r3
 800654c:	d108      	bne.n	8006560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	0e1b      	lsrs	r3, r3, #24
 8006552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800655c:	429a      	cmp	r2, r3
 800655e:	d001      	beq.n	8006564 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e02b      	b.n	80065bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006564:	4b17      	ldr	r3, [pc, #92]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 8006566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006568:	08db      	lsrs	r3, r3, #3
 800656a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800656e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	429a      	cmp	r2, r3
 8006578:	d01f      	beq.n	80065ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800657a:	4b12      	ldr	r3, [pc, #72]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	4a11      	ldr	r2, [pc, #68]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006586:	f7f9 ff7d 	bl	8000484 <HAL_GetTick>
 800658a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800658c:	bf00      	nop
 800658e:	f7f9 ff79 	bl	8000484 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	4293      	cmp	r3, r2
 8006598:	d0f9      	beq.n	800658e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800659a:	4b0a      	ldr	r3, [pc, #40]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 800659c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800659e:	4b0a      	ldr	r3, [pc, #40]	@ (80065c8 <HAL_RCC_OscConfig+0x8b0>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065a6:	00d2      	lsls	r2, r2, #3
 80065a8:	4906      	ldr	r1, [pc, #24]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80065ae:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	4a04      	ldr	r2, [pc, #16]	@ (80065c4 <HAL_RCC_OscConfig+0x8ac>)
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3730      	adds	r7, #48	@ 0x30
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	58024400 	.word	0x58024400
 80065c8:	ffff0007 	.word	0xffff0007

080065cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e19c      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065e0:	4b8a      	ldr	r3, [pc, #552]	@ (800680c <HAL_RCC_ClockConfig+0x240>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d910      	bls.n	8006610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ee:	4b87      	ldr	r3, [pc, #540]	@ (800680c <HAL_RCC_ClockConfig+0x240>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f023 020f 	bic.w	r2, r3, #15
 80065f6:	4985      	ldr	r1, [pc, #532]	@ (800680c <HAL_RCC_ClockConfig+0x240>)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fe:	4b83      	ldr	r3, [pc, #524]	@ (800680c <HAL_RCC_ClockConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d001      	beq.n	8006610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e184      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	4b7b      	ldr	r3, [pc, #492]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006628:	429a      	cmp	r2, r3
 800662a:	d908      	bls.n	800663e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800662c:	4b78      	ldr	r3, [pc, #480]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	4975      	ldr	r1, [pc, #468]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800663a:	4313      	orrs	r3, r2
 800663c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d010      	beq.n	800666c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	4b70      	ldr	r3, [pc, #448]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006656:	429a      	cmp	r2, r3
 8006658:	d908      	bls.n	800666c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800665a:	4b6d      	ldr	r3, [pc, #436]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	496a      	ldr	r1, [pc, #424]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006668:	4313      	orrs	r3, r2
 800666a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	d010      	beq.n	800669a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	699a      	ldr	r2, [r3, #24]
 800667c:	4b64      	ldr	r3, [pc, #400]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006684:	429a      	cmp	r2, r3
 8006686:	d908      	bls.n	800669a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006688:	4b61      	ldr	r3, [pc, #388]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	495e      	ldr	r1, [pc, #376]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006696:	4313      	orrs	r3, r2
 8006698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d010      	beq.n	80066c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69da      	ldr	r2, [r3, #28]
 80066aa:	4b59      	ldr	r3, [pc, #356]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d908      	bls.n	80066c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066b6:	4b56      	ldr	r3, [pc, #344]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	4953      	ldr	r1, [pc, #332]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d010      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d908      	bls.n	80066f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e4:	4b4a      	ldr	r3, [pc, #296]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f023 020f 	bic.w	r2, r3, #15
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4947      	ldr	r1, [pc, #284]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d055      	beq.n	80067ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006702:	4b43      	ldr	r3, [pc, #268]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	4940      	ldr	r1, [pc, #256]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006710:	4313      	orrs	r3, r2
 8006712:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d107      	bne.n	800672c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800671c:	4b3c      	ldr	r3, [pc, #240]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d121      	bne.n	800676c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0f6      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d107      	bne.n	8006744 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006734:	4b36      	ldr	r3, [pc, #216]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d115      	bne.n	800676c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0ea      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d107      	bne.n	800675c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800674c:	4b30      	ldr	r3, [pc, #192]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d109      	bne.n	800676c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0de      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800675c:	4b2c      	ldr	r3, [pc, #176]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0d6      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800676c:	4b28      	ldr	r3, [pc, #160]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f023 0207 	bic.w	r2, r3, #7
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	4925      	ldr	r1, [pc, #148]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800677a:	4313      	orrs	r3, r2
 800677c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800677e:	f7f9 fe81 	bl	8000484 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006784:	e00a      	b.n	800679c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006786:	f7f9 fe7d 	bl	8000484 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006794:	4293      	cmp	r3, r2
 8006796:	d901      	bls.n	800679c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e0be      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679c:	4b1c      	ldr	r3, [pc, #112]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d1eb      	bne.n	8006786 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d010      	beq.n	80067dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	4b14      	ldr	r3, [pc, #80]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d208      	bcs.n	80067dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ca:	4b11      	ldr	r3, [pc, #68]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f023 020f 	bic.w	r2, r3, #15
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	490e      	ldr	r1, [pc, #56]	@ (8006810 <HAL_RCC_ClockConfig+0x244>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067dc:	4b0b      	ldr	r3, [pc, #44]	@ (800680c <HAL_RCC_ClockConfig+0x240>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d214      	bcs.n	8006814 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ea:	4b08      	ldr	r3, [pc, #32]	@ (800680c <HAL_RCC_ClockConfig+0x240>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f023 020f 	bic.w	r2, r3, #15
 80067f2:	4906      	ldr	r1, [pc, #24]	@ (800680c <HAL_RCC_ClockConfig+0x240>)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fa:	4b04      	ldr	r3, [pc, #16]	@ (800680c <HAL_RCC_ClockConfig+0x240>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d005      	beq.n	8006814 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e086      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
 800680c:	52002000 	.word	0x52002000
 8006810:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d010      	beq.n	8006842 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	4b3f      	ldr	r3, [pc, #252]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800682c:	429a      	cmp	r2, r3
 800682e:	d208      	bcs.n	8006842 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006830:	4b3c      	ldr	r3, [pc, #240]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	4939      	ldr	r1, [pc, #228]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 800683e:	4313      	orrs	r3, r2
 8006840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d010      	beq.n	8006870 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	4b34      	ldr	r3, [pc, #208]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800685a:	429a      	cmp	r2, r3
 800685c:	d208      	bcs.n	8006870 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800685e:	4b31      	ldr	r3, [pc, #196]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	492e      	ldr	r1, [pc, #184]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 800686c:	4313      	orrs	r3, r2
 800686e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d010      	beq.n	800689e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	4b28      	ldr	r3, [pc, #160]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006888:	429a      	cmp	r2, r3
 800688a:	d208      	bcs.n	800689e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800688c:	4b25      	ldr	r3, [pc, #148]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	4922      	ldr	r1, [pc, #136]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 800689a:	4313      	orrs	r3, r2
 800689c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d010      	beq.n	80068cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69da      	ldr	r2, [r3, #28]
 80068ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d208      	bcs.n	80068cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	4917      	ldr	r1, [pc, #92]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068cc:	f000 f834 	bl	8006938 <HAL_RCC_GetSysClockFreq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4b14      	ldr	r3, [pc, #80]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	0a1b      	lsrs	r3, r3, #8
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	4912      	ldr	r1, [pc, #72]	@ (8006928 <HAL_RCC_ClockConfig+0x35c>)
 80068de:	5ccb      	ldrb	r3, [r1, r3]
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
 80068e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006924 <HAL_RCC_ClockConfig+0x358>)
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006928 <HAL_RCC_ClockConfig+0x35c>)
 80068f4:	5cd3      	ldrb	r3, [r2, r3]
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006900:	4a0a      	ldr	r2, [pc, #40]	@ (800692c <HAL_RCC_ClockConfig+0x360>)
 8006902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006904:	4a0a      	ldr	r2, [pc, #40]	@ (8006930 <HAL_RCC_ClockConfig+0x364>)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800690a:	4b0a      	ldr	r3, [pc, #40]	@ (8006934 <HAL_RCC_ClockConfig+0x368>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f00a fd62 	bl	80113d8 <HAL_InitTick>
 8006914:	4603      	mov	r3, r0
 8006916:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	58024400 	.word	0x58024400
 8006928:	08016df4 	.word	0x08016df4
 800692c:	2400009c 	.word	0x2400009c
 8006930:	24000098 	.word	0x24000098
 8006934:	24000000 	.word	0x24000000

08006938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006938:	b480      	push	{r7}
 800693a:	b089      	sub	sp, #36	@ 0x24
 800693c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800693e:	4bb3      	ldr	r3, [pc, #716]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006946:	2b18      	cmp	r3, #24
 8006948:	f200 8155 	bhi.w	8006bf6 <HAL_RCC_GetSysClockFreq+0x2be>
 800694c:	a201      	add	r2, pc, #4	@ (adr r2, 8006954 <HAL_RCC_GetSysClockFreq+0x1c>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	080069b9 	.word	0x080069b9
 8006958:	08006bf7 	.word	0x08006bf7
 800695c:	08006bf7 	.word	0x08006bf7
 8006960:	08006bf7 	.word	0x08006bf7
 8006964:	08006bf7 	.word	0x08006bf7
 8006968:	08006bf7 	.word	0x08006bf7
 800696c:	08006bf7 	.word	0x08006bf7
 8006970:	08006bf7 	.word	0x08006bf7
 8006974:	080069df 	.word	0x080069df
 8006978:	08006bf7 	.word	0x08006bf7
 800697c:	08006bf7 	.word	0x08006bf7
 8006980:	08006bf7 	.word	0x08006bf7
 8006984:	08006bf7 	.word	0x08006bf7
 8006988:	08006bf7 	.word	0x08006bf7
 800698c:	08006bf7 	.word	0x08006bf7
 8006990:	08006bf7 	.word	0x08006bf7
 8006994:	080069e5 	.word	0x080069e5
 8006998:	08006bf7 	.word	0x08006bf7
 800699c:	08006bf7 	.word	0x08006bf7
 80069a0:	08006bf7 	.word	0x08006bf7
 80069a4:	08006bf7 	.word	0x08006bf7
 80069a8:	08006bf7 	.word	0x08006bf7
 80069ac:	08006bf7 	.word	0x08006bf7
 80069b0:	08006bf7 	.word	0x08006bf7
 80069b4:	080069eb 	.word	0x080069eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069b8:	4b94      	ldr	r3, [pc, #592]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069c4:	4b91      	ldr	r3, [pc, #580]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	08db      	lsrs	r3, r3, #3
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	4a90      	ldr	r2, [pc, #576]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
 80069d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80069d6:	e111      	b.n	8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069d8:	4b8d      	ldr	r3, [pc, #564]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069da:	61bb      	str	r3, [r7, #24]
      break;
 80069dc:	e10e      	b.n	8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069de:	4b8d      	ldr	r3, [pc, #564]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069e0:	61bb      	str	r3, [r7, #24]
      break;
 80069e2:	e10b      	b.n	8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80069e4:	4b8c      	ldr	r3, [pc, #560]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069e6:	61bb      	str	r3, [r7, #24]
      break;
 80069e8:	e108      	b.n	8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069ea:	4b88      	ldr	r3, [pc, #544]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80069f4:	4b85      	ldr	r3, [pc, #532]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f8:	091b      	lsrs	r3, r3, #4
 80069fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a00:	4b82      	ldr	r3, [pc, #520]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a0a:	4b80      	ldr	r3, [pc, #512]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a0e:	08db      	lsrs	r3, r3, #3
 8006a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80e1 	beq.w	8006bf0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	f000 8083 	beq.w	8006b3c <HAL_RCC_GetSysClockFreq+0x204>
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	f200 80a1 	bhi.w	8006b80 <HAL_RCC_GetSysClockFreq+0x248>
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_RCC_GetSysClockFreq+0x114>
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d056      	beq.n	8006af8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a4a:	e099      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d02d      	beq.n	8006ab4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a58:	4b6c      	ldr	r3, [pc, #432]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	08db      	lsrs	r3, r3, #3
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	4a6b      	ldr	r2, [pc, #428]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
 8006a68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	ee07 3a90 	vmov	s15, r3
 8006a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a82:	4b62      	ldr	r3, [pc, #392]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a96:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006ab2:	e087      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac6:	4b51      	ldr	r3, [pc, #324]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ada:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006af6:	e065      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b0a:	4b40      	ldr	r3, [pc, #256]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b3a:	e043      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b7e:	e021      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b92:	4b1e      	ldr	r3, [pc, #120]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ba6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006bc4:	4b11      	ldr	r3, [pc, #68]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	0a5b      	lsrs	r3, r3, #9
 8006bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bce:	3301      	adds	r3, #1
 8006bd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be8:	ee17 3a90 	vmov	r3, s15
 8006bec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006bee:	e005      	b.n	8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61bb      	str	r3, [r7, #24]
      break;
 8006bf4:	e002      	b.n	8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006bf6:	4b07      	ldr	r3, [pc, #28]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006bf8:	61bb      	str	r3, [r7, #24]
      break;
 8006bfa:	bf00      	nop
  }

  return sysclockfreq;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3724      	adds	r7, #36	@ 0x24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	58024400 	.word	0x58024400
 8006c10:	03d09000 	.word	0x03d09000
 8006c14:	003d0900 	.word	0x003d0900
 8006c18:	017d7840 	.word	0x017d7840
 8006c1c:	46000000 	.word	0x46000000
 8006c20:	4c742400 	.word	0x4c742400
 8006c24:	4a742400 	.word	0x4a742400
 8006c28:	4bbebc20 	.word	0x4bbebc20

08006c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c32:	f7ff fe81 	bl	8006938 <HAL_RCC_GetSysClockFreq>
 8006c36:	4602      	mov	r2, r0
 8006c38:	4b10      	ldr	r3, [pc, #64]	@ (8006c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	0a1b      	lsrs	r3, r3, #8
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	490f      	ldr	r1, [pc, #60]	@ (8006c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c44:	5ccb      	ldrb	r3, [r1, r3]
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c50:	4b0a      	ldr	r3, [pc, #40]	@ (8006c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	4a09      	ldr	r2, [pc, #36]	@ (8006c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c5a:	5cd3      	ldrb	r3, [r2, r3]
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	fa22 f303 	lsr.w	r3, r2, r3
 8006c66:	4a07      	ldr	r2, [pc, #28]	@ (8006c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c6a:	4a07      	ldr	r2, [pc, #28]	@ (8006c88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c70:	4b04      	ldr	r3, [pc, #16]	@ (8006c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c72:	681b      	ldr	r3, [r3, #0]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	58024400 	.word	0x58024400
 8006c80:	08016df4 	.word	0x08016df4
 8006c84:	2400009c 	.word	0x2400009c
 8006c88:	24000098 	.word	0x24000098

08006c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c90:	f7ff ffcc 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 8006c94:	4602      	mov	r2, r0
 8006c96:	4b06      	ldr	r3, [pc, #24]	@ (8006cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	091b      	lsrs	r3, r3, #4
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	4904      	ldr	r1, [pc, #16]	@ (8006cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ca2:	5ccb      	ldrb	r3, [r1, r3]
 8006ca4:	f003 031f 	and.w	r3, r3, #31
 8006ca8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	08016df4 	.word	0x08016df4

08006cb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	223f      	movs	r2, #63	@ 0x3f
 8006cc6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d34 <HAL_RCC_GetClockConfig+0x7c>)
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f003 0207 	and.w	r2, r3, #7
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006cd4:	4b17      	ldr	r3, [pc, #92]	@ (8006d34 <HAL_RCC_GetClockConfig+0x7c>)
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006ce0:	4b14      	ldr	r3, [pc, #80]	@ (8006d34 <HAL_RCC_GetClockConfig+0x7c>)
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	f003 020f 	and.w	r2, r3, #15
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006cec:	4b11      	ldr	r3, [pc, #68]	@ (8006d34 <HAL_RCC_GetClockConfig+0x7c>)
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d34 <HAL_RCC_GetClockConfig+0x7c>)
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006d04:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <HAL_RCC_GetClockConfig+0x7c>)
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006d10:	4b08      	ldr	r3, [pc, #32]	@ (8006d34 <HAL_RCC_GetClockConfig+0x7c>)
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <HAL_RCC_GetClockConfig+0x80>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	601a      	str	r2, [r3, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	58024400 	.word	0x58024400
 8006d38:	52002000 	.word	0x52002000

08006d3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d40:	b0ca      	sub	sp, #296	@ 0x128
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006d60:	2500      	movs	r5, #0
 8006d62:	ea54 0305 	orrs.w	r3, r4, r5
 8006d66:	d049      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d72:	d02f      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d78:	d828      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d7e:	d01a      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d84:	d822      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d8e:	d007      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d90:	e01c      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d92:	4bb8      	ldr	r3, [pc, #736]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	4ab7      	ldr	r2, [pc, #732]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d9e:	e01a      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da4:	3308      	adds	r3, #8
 8006da6:	2102      	movs	r1, #2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f002 fb61 	bl	8009470 <RCCEx_PLL2_Config>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006db4:	e00f      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dba:	3328      	adds	r3, #40	@ 0x28
 8006dbc:	2102      	movs	r1, #2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f002 fc08 	bl	80095d4 <RCCEx_PLL3_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dca:	e004      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dd2:	e000      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006dde:	4ba5      	ldr	r3, [pc, #660]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dec:	4aa1      	ldr	r2, [pc, #644]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dee:	430b      	orrs	r3, r1
 8006df0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006df2:	e003      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006e08:	f04f 0900 	mov.w	r9, #0
 8006e0c:	ea58 0309 	orrs.w	r3, r8, r9
 8006e10:	d047      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d82a      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e39 	.word	0x08006e39
 8006e28:	08006e47 	.word	0x08006e47
 8006e2c:	08006e5d 	.word	0x08006e5d
 8006e30:	08006e7b 	.word	0x08006e7b
 8006e34:	08006e7b 	.word	0x08006e7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e38:	4b8e      	ldr	r3, [pc, #568]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	4a8d      	ldr	r2, [pc, #564]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e44:	e01a      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f002 fb0e 	bl	8009470 <RCCEx_PLL2_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e5a:	e00f      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e60:	3328      	adds	r3, #40	@ 0x28
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f002 fbb5 	bl	80095d4 <RCCEx_PLL3_Config>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e70:	e004      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e78:	e000      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e84:	4b7b      	ldr	r3, [pc, #492]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e88:	f023 0107 	bic.w	r1, r3, #7
 8006e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e92:	4a78      	ldr	r2, [pc, #480]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e98:	e003      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006eae:	f04f 0b00 	mov.w	fp, #0
 8006eb2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006eb6:	d04c      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ec2:	d030      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ec8:	d829      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006eca:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ecc:	d02d      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ece:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ed0:	d825      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ed2:	2b80      	cmp	r3, #128	@ 0x80
 8006ed4:	d018      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ed6:	2b80      	cmp	r3, #128	@ 0x80
 8006ed8:	d821      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006ede:	2b40      	cmp	r3, #64	@ 0x40
 8006ee0:	d007      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006ee2:	e01c      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee4:	4b63      	ldr	r3, [pc, #396]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee8:	4a62      	ldr	r2, [pc, #392]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ef0:	e01c      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f002 fab8 	bl	8009470 <RCCEx_PLL2_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f06:	e011      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0c:	3328      	adds	r3, #40	@ 0x28
 8006f0e:	2100      	movs	r1, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f002 fb5f 	bl	80095d4 <RCCEx_PLL3_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f1c:	e006      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f24:	e002      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f26:	bf00      	nop
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f34:	4b4f      	ldr	r3, [pc, #316]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f38:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f42:	4a4c      	ldr	r2, [pc, #304]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f44:	430b      	orrs	r3, r1
 8006f46:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f48:	e003      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006f5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006f62:	2300      	movs	r3, #0
 8006f64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006f68:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	d053      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f7e:	d035      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f84:	d82e      	bhi.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f8a:	d031      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f90:	d828      	bhi.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f96:	d01a      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f9c:	d822      	bhi.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006fa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fa6:	d007      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006fa8:	e01c      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006faa:	4b32      	ldr	r3, [pc, #200]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fae:	4a31      	ldr	r2, [pc, #196]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fb6:	e01c      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f002 fa55 	bl	8009470 <RCCEx_PLL2_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006fcc:	e011      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd2:	3328      	adds	r3, #40	@ 0x28
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f002 fafc 	bl	80095d4 <RCCEx_PLL3_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fe2:	e006      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fea:	e002      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800700a:	4a1a      	ldr	r2, [pc, #104]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800700c:	430b      	orrs	r3, r1
 800700e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007010:	e003      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007026:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800702a:	2300      	movs	r3, #0
 800702c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007030:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007034:	460b      	mov	r3, r1
 8007036:	4313      	orrs	r3, r2
 8007038:	d056      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007042:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007046:	d038      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007048:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800704c:	d831      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800704e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007052:	d034      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007054:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007058:	d82b      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800705a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800705e:	d01d      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007060:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007064:	d825      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d006      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800706a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800706e:	d00a      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007070:	e01f      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007072:	bf00      	nop
 8007074:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007078:	4ba2      	ldr	r3, [pc, #648]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707c:	4aa1      	ldr	r2, [pc, #644]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800707e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007082:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007084:	e01c      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	3308      	adds	r3, #8
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f002 f9ee 	bl	8009470 <RCCEx_PLL2_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800709a:	e011      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a0:	3328      	adds	r3, #40	@ 0x28
 80070a2:	2100      	movs	r1, #0
 80070a4:	4618      	mov	r0, r3
 80070a6:	f002 fa95 	bl	80095d4 <RCCEx_PLL3_Config>
 80070aa:	4603      	mov	r3, r0
 80070ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070b0:	e006      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070b8:	e002      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80070ba:	bf00      	nop
 80070bc:	e000      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80070be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10b      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070c8:	4b8e      	ldr	r3, [pc, #568]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80070d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070d8:	4a8a      	ldr	r2, [pc, #552]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070da:	430b      	orrs	r3, r1
 80070dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80070de:	e003      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80070f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070f8:	2300      	movs	r3, #0
 80070fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007102:	460b      	mov	r3, r1
 8007104:	4313      	orrs	r3, r2
 8007106:	d03a      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800710e:	2b30      	cmp	r3, #48	@ 0x30
 8007110:	d01f      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007112:	2b30      	cmp	r3, #48	@ 0x30
 8007114:	d819      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007116:	2b20      	cmp	r3, #32
 8007118:	d00c      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800711a:	2b20      	cmp	r3, #32
 800711c:	d815      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d019      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007122:	2b10      	cmp	r3, #16
 8007124:	d111      	bne.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007126:	4b77      	ldr	r3, [pc, #476]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	4a76      	ldr	r2, [pc, #472]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800712c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007132:	e011      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007138:	3308      	adds	r3, #8
 800713a:	2102      	movs	r1, #2
 800713c:	4618      	mov	r0, r3
 800713e:	f002 f997 	bl	8009470 <RCCEx_PLL2_Config>
 8007142:	4603      	mov	r3, r0
 8007144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007148:	e006      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007150:	e002      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007152:	bf00      	nop
 8007154:	e000      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007160:	4b68      	ldr	r3, [pc, #416]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007164:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716e:	4a65      	ldr	r2, [pc, #404]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007170:	430b      	orrs	r3, r1
 8007172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007174:	e003      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800717a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800718a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800718e:	2300      	movs	r3, #0
 8007190:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007194:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007198:	460b      	mov	r3, r1
 800719a:	4313      	orrs	r3, r2
 800719c:	d051      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071a8:	d035      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80071aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071ae:	d82e      	bhi.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071b4:	d031      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80071b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071ba:	d828      	bhi.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c0:	d01a      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80071c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c6:	d822      	bhi.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80071cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d0:	d007      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80071d2:	e01c      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d4:	4b4b      	ldr	r3, [pc, #300]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d8:	4a4a      	ldr	r2, [pc, #296]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071e0:	e01c      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e6:	3308      	adds	r3, #8
 80071e8:	2100      	movs	r1, #0
 80071ea:	4618      	mov	r0, r3
 80071ec:	f002 f940 	bl	8009470 <RCCEx_PLL2_Config>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071f6:	e011      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fc:	3328      	adds	r3, #40	@ 0x28
 80071fe:	2100      	movs	r1, #0
 8007200:	4618      	mov	r0, r3
 8007202:	f002 f9e7 	bl	80095d4 <RCCEx_PLL3_Config>
 8007206:	4603      	mov	r3, r0
 8007208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800720c:	e006      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007214:	e002      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007216:	bf00      	nop
 8007218:	e000      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800721a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800721c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007224:	4b37      	ldr	r3, [pc, #220]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007228:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007232:	4a34      	ldr	r2, [pc, #208]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007234:	430b      	orrs	r3, r1
 8007236:	6513      	str	r3, [r2, #80]	@ 0x50
 8007238:	e003      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800723e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800724e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007252:	2300      	movs	r3, #0
 8007254:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007258:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800725c:	460b      	mov	r3, r1
 800725e:	4313      	orrs	r3, r2
 8007260:	d056      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800726c:	d033      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800726e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007272:	d82c      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007274:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007278:	d02f      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800727a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800727e:	d826      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007280:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007284:	d02b      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007286:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800728a:	d820      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800728c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007290:	d012      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007296:	d81a      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007298:	2b00      	cmp	r3, #0
 800729a:	d022      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800729c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a0:	d115      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a6:	3308      	adds	r3, #8
 80072a8:	2101      	movs	r1, #1
 80072aa:	4618      	mov	r0, r3
 80072ac:	f002 f8e0 	bl	8009470 <RCCEx_PLL2_Config>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80072b6:	e015      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072bc:	3328      	adds	r3, #40	@ 0x28
 80072be:	2101      	movs	r1, #1
 80072c0:	4618      	mov	r0, r3
 80072c2:	f002 f987 	bl	80095d4 <RCCEx_PLL3_Config>
 80072c6:	4603      	mov	r3, r0
 80072c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80072cc:	e00a      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072d4:	e006      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072d6:	bf00      	nop
 80072d8:	e004      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072da:	bf00      	nop
 80072dc:	e002      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072de:	bf00      	nop
 80072e0:	e000      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10d      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072ec:	4b05      	ldr	r3, [pc, #20]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072fa:	4a02      	ldr	r2, [pc, #8]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072fc:	430b      	orrs	r3, r1
 80072fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007300:	e006      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007302:	bf00      	nop
 8007304:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800730c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800731c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007320:	2300      	movs	r3, #0
 8007322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007326:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800732a:	460b      	mov	r3, r1
 800732c:	4313      	orrs	r3, r2
 800732e:	d055      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800733c:	d033      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800733e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007342:	d82c      	bhi.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007348:	d02f      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800734a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734e:	d826      	bhi.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007350:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007354:	d02b      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007356:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800735a:	d820      	bhi.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800735c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007360:	d012      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007366:	d81a      	bhi.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d022      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800736c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007370:	d115      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007376:	3308      	adds	r3, #8
 8007378:	2101      	movs	r1, #1
 800737a:	4618      	mov	r0, r3
 800737c:	f002 f878 	bl	8009470 <RCCEx_PLL2_Config>
 8007380:	4603      	mov	r3, r0
 8007382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007386:	e015      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800738c:	3328      	adds	r3, #40	@ 0x28
 800738e:	2101      	movs	r1, #1
 8007390:	4618      	mov	r0, r3
 8007392:	f002 f91f 	bl	80095d4 <RCCEx_PLL3_Config>
 8007396:	4603      	mov	r3, r0
 8007398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800739c:	e00a      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073a4:	e006      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073a6:	bf00      	nop
 80073a8:	e004      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073aa:	bf00      	nop
 80073ac:	e002      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073ae:	bf00      	nop
 80073b0:	e000      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10b      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80073bc:	4ba3      	ldr	r3, [pc, #652]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80073c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073cc:	4a9f      	ldr	r2, [pc, #636]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ce:	430b      	orrs	r3, r1
 80073d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80073d2:	e003      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80073e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073ec:	2300      	movs	r3, #0
 80073ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073f6:	460b      	mov	r3, r1
 80073f8:	4313      	orrs	r3, r2
 80073fa:	d037      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007406:	d00e      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800740c:	d816      	bhi.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d018      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007416:	d111      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007418:	4b8c      	ldr	r3, [pc, #560]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800741a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741c:	4a8b      	ldr	r2, [pc, #556]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800741e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007424:	e00f      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742a:	3308      	adds	r3, #8
 800742c:	2101      	movs	r1, #1
 800742e:	4618      	mov	r0, r3
 8007430:	f002 f81e 	bl	8009470 <RCCEx_PLL2_Config>
 8007434:	4603      	mov	r3, r0
 8007436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800743a:	e004      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007442:	e000      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800744e:	4b7f      	ldr	r3, [pc, #508]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007452:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745c:	4a7b      	ldr	r2, [pc, #492]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800745e:	430b      	orrs	r3, r1
 8007460:	6513      	str	r3, [r2, #80]	@ 0x50
 8007462:	e003      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800747c:	2300      	movs	r3, #0
 800747e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007482:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007486:	460b      	mov	r3, r1
 8007488:	4313      	orrs	r3, r2
 800748a:	d039      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007492:	2b03      	cmp	r3, #3
 8007494:	d81c      	bhi.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007496:	a201      	add	r2, pc, #4	@ (adr r2, 800749c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074d9 	.word	0x080074d9
 80074a0:	080074ad 	.word	0x080074ad
 80074a4:	080074bb 	.word	0x080074bb
 80074a8:	080074d9 	.word	0x080074d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074ac:	4b67      	ldr	r3, [pc, #412]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	4a66      	ldr	r2, [pc, #408]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80074b8:	e00f      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074be:	3308      	adds	r3, #8
 80074c0:	2102      	movs	r1, #2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 ffd4 	bl	8009470 <RCCEx_PLL2_Config>
 80074c8:	4603      	mov	r3, r0
 80074ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80074ce:	e004      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074d6:	e000      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80074d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10a      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074e2:	4b5a      	ldr	r3, [pc, #360]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e6:	f023 0103 	bic.w	r1, r3, #3
 80074ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f0:	4a56      	ldr	r2, [pc, #344]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f2:	430b      	orrs	r3, r1
 80074f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074f6:	e003      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800750c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007510:	2300      	movs	r3, #0
 8007512:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007516:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800751a:	460b      	mov	r3, r1
 800751c:	4313      	orrs	r3, r2
 800751e:	f000 809f 	beq.w	8007660 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007522:	4b4b      	ldr	r3, [pc, #300]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a4a      	ldr	r2, [pc, #296]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800752c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800752e:	f7f8 ffa9 	bl	8000484 <HAL_GetTick>
 8007532:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007536:	e00b      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007538:	f7f8 ffa4 	bl	8000484 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b64      	cmp	r3, #100	@ 0x64
 8007546:	d903      	bls.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800754e:	e005      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007550:	4b3f      	ldr	r3, [pc, #252]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0ed      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800755c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007560:	2b00      	cmp	r3, #0
 8007562:	d179      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007564:	4b39      	ldr	r3, [pc, #228]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007566:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007570:	4053      	eors	r3, r2
 8007572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007576:	2b00      	cmp	r3, #0
 8007578:	d015      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800757a:	4b34      	ldr	r3, [pc, #208]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800757c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800757e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007582:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007586:	4b31      	ldr	r3, [pc, #196]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758a:	4a30      	ldr	r2, [pc, #192]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800758c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007590:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007592:	4b2e      	ldr	r3, [pc, #184]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	4a2d      	ldr	r2, [pc, #180]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800759c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800759e:	4a2b      	ldr	r2, [pc, #172]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80075a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80075a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075b2:	d118      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b4:	f7f8 ff66 	bl	8000484 <HAL_GetTick>
 80075b8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075bc:	e00d      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075be:	f7f8 ff61 	bl	8000484 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80075c8:	1ad2      	subs	r2, r2, r3
 80075ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d903      	bls.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80075d8:	e005      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075da:	4b1c      	ldr	r3, [pc, #112]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0eb      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80075e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d129      	bne.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075fe:	d10e      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007600:	4b12      	ldr	r3, [pc, #72]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007610:	091a      	lsrs	r2, r3, #4
 8007612:	4b10      	ldr	r3, [pc, #64]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007614:	4013      	ands	r3, r2
 8007616:	4a0d      	ldr	r2, [pc, #52]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007618:	430b      	orrs	r3, r1
 800761a:	6113      	str	r3, [r2, #16]
 800761c:	e005      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800761e:	4b0b      	ldr	r3, [pc, #44]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	4a0a      	ldr	r2, [pc, #40]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007624:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007628:	6113      	str	r3, [r2, #16]
 800762a:	4b08      	ldr	r3, [pc, #32]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800762c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800762e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007632:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800763a:	4a04      	ldr	r2, [pc, #16]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800763c:	430b      	orrs	r3, r1
 800763e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007640:	e00e      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800764a:	e009      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800764c:	58024400 	.word	0x58024400
 8007650:	58024800 	.word	0x58024800
 8007654:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800765c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f002 0301 	and.w	r3, r2, #1
 800766c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007670:	2300      	movs	r3, #0
 8007672:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007676:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800767a:	460b      	mov	r3, r1
 800767c:	4313      	orrs	r3, r2
 800767e:	f000 8089 	beq.w	8007794 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007686:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007688:	2b28      	cmp	r3, #40	@ 0x28
 800768a:	d86b      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800768c:	a201      	add	r2, pc, #4	@ (adr r2, 8007694 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	0800776d 	.word	0x0800776d
 8007698:	08007765 	.word	0x08007765
 800769c:	08007765 	.word	0x08007765
 80076a0:	08007765 	.word	0x08007765
 80076a4:	08007765 	.word	0x08007765
 80076a8:	08007765 	.word	0x08007765
 80076ac:	08007765 	.word	0x08007765
 80076b0:	08007765 	.word	0x08007765
 80076b4:	08007739 	.word	0x08007739
 80076b8:	08007765 	.word	0x08007765
 80076bc:	08007765 	.word	0x08007765
 80076c0:	08007765 	.word	0x08007765
 80076c4:	08007765 	.word	0x08007765
 80076c8:	08007765 	.word	0x08007765
 80076cc:	08007765 	.word	0x08007765
 80076d0:	08007765 	.word	0x08007765
 80076d4:	0800774f 	.word	0x0800774f
 80076d8:	08007765 	.word	0x08007765
 80076dc:	08007765 	.word	0x08007765
 80076e0:	08007765 	.word	0x08007765
 80076e4:	08007765 	.word	0x08007765
 80076e8:	08007765 	.word	0x08007765
 80076ec:	08007765 	.word	0x08007765
 80076f0:	08007765 	.word	0x08007765
 80076f4:	0800776d 	.word	0x0800776d
 80076f8:	08007765 	.word	0x08007765
 80076fc:	08007765 	.word	0x08007765
 8007700:	08007765 	.word	0x08007765
 8007704:	08007765 	.word	0x08007765
 8007708:	08007765 	.word	0x08007765
 800770c:	08007765 	.word	0x08007765
 8007710:	08007765 	.word	0x08007765
 8007714:	0800776d 	.word	0x0800776d
 8007718:	08007765 	.word	0x08007765
 800771c:	08007765 	.word	0x08007765
 8007720:	08007765 	.word	0x08007765
 8007724:	08007765 	.word	0x08007765
 8007728:	08007765 	.word	0x08007765
 800772c:	08007765 	.word	0x08007765
 8007730:	08007765 	.word	0x08007765
 8007734:	0800776d 	.word	0x0800776d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773c:	3308      	adds	r3, #8
 800773e:	2101      	movs	r1, #1
 8007740:	4618      	mov	r0, r3
 8007742:	f001 fe95 	bl	8009470 <RCCEx_PLL2_Config>
 8007746:	4603      	mov	r3, r0
 8007748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800774c:	e00f      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800774e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007752:	3328      	adds	r3, #40	@ 0x28
 8007754:	2101      	movs	r1, #1
 8007756:	4618      	mov	r0, r3
 8007758:	f001 ff3c 	bl	80095d4 <RCCEx_PLL3_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007762:	e004      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800776a:	e000      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800776c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800776e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10a      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007776:	4bbf      	ldr	r3, [pc, #764]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800777e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007782:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007784:	4abb      	ldr	r2, [pc, #748]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007786:	430b      	orrs	r3, r1
 8007788:	6553      	str	r3, [r2, #84]	@ 0x54
 800778a:	e003      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f002 0302 	and.w	r3, r2, #2
 80077a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077a4:	2300      	movs	r3, #0
 80077a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80077aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80077ae:	460b      	mov	r3, r1
 80077b0:	4313      	orrs	r3, r2
 80077b2:	d041      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077ba:	2b05      	cmp	r3, #5
 80077bc:	d824      	bhi.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80077be:	a201      	add	r2, pc, #4	@ (adr r2, 80077c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80077c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c4:	08007811 	.word	0x08007811
 80077c8:	080077dd 	.word	0x080077dd
 80077cc:	080077f3 	.word	0x080077f3
 80077d0:	08007811 	.word	0x08007811
 80077d4:	08007811 	.word	0x08007811
 80077d8:	08007811 	.word	0x08007811
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e0:	3308      	adds	r3, #8
 80077e2:	2101      	movs	r1, #1
 80077e4:	4618      	mov	r0, r3
 80077e6:	f001 fe43 	bl	8009470 <RCCEx_PLL2_Config>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077f0:	e00f      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f6:	3328      	adds	r3, #40	@ 0x28
 80077f8:	2101      	movs	r1, #1
 80077fa:	4618      	mov	r0, r3
 80077fc:	f001 feea 	bl	80095d4 <RCCEx_PLL3_Config>
 8007800:	4603      	mov	r3, r0
 8007802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007806:	e004      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800780e:	e000      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800781a:	4b96      	ldr	r3, [pc, #600]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800781c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781e:	f023 0107 	bic.w	r1, r3, #7
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007826:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007828:	4a92      	ldr	r2, [pc, #584]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800782a:	430b      	orrs	r3, r1
 800782c:	6553      	str	r3, [r2, #84]	@ 0x54
 800782e:	e003      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f002 0304 	and.w	r3, r2, #4
 8007844:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007848:	2300      	movs	r3, #0
 800784a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800784e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007852:	460b      	mov	r3, r1
 8007854:	4313      	orrs	r3, r2
 8007856:	d044      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007860:	2b05      	cmp	r3, #5
 8007862:	d825      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007864:	a201      	add	r2, pc, #4	@ (adr r2, 800786c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	080078b9 	.word	0x080078b9
 8007870:	08007885 	.word	0x08007885
 8007874:	0800789b 	.word	0x0800789b
 8007878:	080078b9 	.word	0x080078b9
 800787c:	080078b9 	.word	0x080078b9
 8007880:	080078b9 	.word	0x080078b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007888:	3308      	adds	r3, #8
 800788a:	2101      	movs	r1, #1
 800788c:	4618      	mov	r0, r3
 800788e:	f001 fdef 	bl	8009470 <RCCEx_PLL2_Config>
 8007892:	4603      	mov	r3, r0
 8007894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007898:	e00f      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	3328      	adds	r3, #40	@ 0x28
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 fe96 	bl	80095d4 <RCCEx_PLL3_Config>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80078ae:	e004      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078b6:	e000      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80078b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10b      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078c2:	4b6c      	ldr	r3, [pc, #432]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078c6:	f023 0107 	bic.w	r1, r3, #7
 80078ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078d2:	4a68      	ldr	r2, [pc, #416]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078d4:	430b      	orrs	r3, r1
 80078d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80078d8:	e003      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	f002 0320 	and.w	r3, r2, #32
 80078ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078f2:	2300      	movs	r3, #0
 80078f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80078fc:	460b      	mov	r3, r1
 80078fe:	4313      	orrs	r3, r2
 8007900:	d055      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800790e:	d033      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007914:	d82c      	bhi.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800791a:	d02f      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800791c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007920:	d826      	bhi.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007922:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007926:	d02b      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007928:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800792c:	d820      	bhi.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800792e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007932:	d012      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007938:	d81a      	bhi.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d022      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800793e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007942:	d115      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007948:	3308      	adds	r3, #8
 800794a:	2100      	movs	r1, #0
 800794c:	4618      	mov	r0, r3
 800794e:	f001 fd8f 	bl	8009470 <RCCEx_PLL2_Config>
 8007952:	4603      	mov	r3, r0
 8007954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007958:	e015      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795e:	3328      	adds	r3, #40	@ 0x28
 8007960:	2102      	movs	r1, #2
 8007962:	4618      	mov	r0, r3
 8007964:	f001 fe36 	bl	80095d4 <RCCEx_PLL3_Config>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800796e:	e00a      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007976:	e006      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007978:	bf00      	nop
 800797a:	e004      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800797c:	bf00      	nop
 800797e:	e002      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10b      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800798e:	4b39      	ldr	r3, [pc, #228]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007992:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800799e:	4a35      	ldr	r2, [pc, #212]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079a0:	430b      	orrs	r3, r1
 80079a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80079a4:	e003      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80079ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80079ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079be:	2300      	movs	r3, #0
 80079c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4313      	orrs	r3, r2
 80079cc:	d058      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80079ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079da:	d033      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80079dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079e0:	d82c      	bhi.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e6:	d02f      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80079e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ec:	d826      	bhi.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079f2:	d02b      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80079f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079f8:	d820      	bhi.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079fe:	d012      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a04:	d81a      	bhi.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d022      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a0e:	d115      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a14:	3308      	adds	r3, #8
 8007a16:	2100      	movs	r1, #0
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 fd29 	bl	8009470 <RCCEx_PLL2_Config>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a24:	e015      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2a:	3328      	adds	r3, #40	@ 0x28
 8007a2c:	2102      	movs	r1, #2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 fdd0 	bl	80095d4 <RCCEx_PLL3_Config>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a3a:	e00a      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a42:	e006      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a44:	bf00      	nop
 8007a46:	e004      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a48:	bf00      	nop
 8007a4a:	e002      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a4c:	bf00      	nop
 8007a4e:	e000      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10e      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a5a:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a5e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a6a:	4a02      	ldr	r2, [pc, #8]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a70:	e006      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a72:	bf00      	nop
 8007a74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a90:	2300      	movs	r3, #0
 8007a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a96:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	d055      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007aa8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007aac:	d033      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007aae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ab2:	d82c      	bhi.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ab8:	d02f      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007abe:	d826      	bhi.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ac0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ac4:	d02b      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007ac6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007aca:	d820      	bhi.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ad0:	d012      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007ad2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ad6:	d81a      	bhi.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d022      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae0:	d115      	bne.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	2100      	movs	r1, #0
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 fcc0 	bl	8009470 <RCCEx_PLL2_Config>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007af6:	e015      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afc:	3328      	adds	r3, #40	@ 0x28
 8007afe:	2102      	movs	r1, #2
 8007b00:	4618      	mov	r0, r3
 8007b02:	f001 fd67 	bl	80095d4 <RCCEx_PLL3_Config>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b0c:	e00a      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b14:	e006      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b16:	bf00      	nop
 8007b18:	e004      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b1a:	bf00      	nop
 8007b1c:	e002      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b1e:	bf00      	nop
 8007b20:	e000      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10b      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b2c:	4ba1      	ldr	r3, [pc, #644]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b30:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b3c:	4a9d      	ldr	r2, [pc, #628]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b3e:	430b      	orrs	r3, r1
 8007b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b42:	e003      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	f002 0308 	and.w	r3, r2, #8
 8007b58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b66:	460b      	mov	r3, r1
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	d01e      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b78:	d10c      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7e:	3328      	adds	r3, #40	@ 0x28
 8007b80:	2102      	movs	r1, #2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 fd26 	bl	80095d4 <RCCEx_PLL3_Config>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b94:	4b87      	ldr	r3, [pc, #540]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b98:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ba4:	4a83      	ldr	r2, [pc, #524]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f002 0310 	and.w	r3, r2, #16
 8007bb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bc0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	d01e      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bd6:	d10c      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bdc:	3328      	adds	r3, #40	@ 0x28
 8007bde:	2102      	movs	r1, #2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 fcf7 	bl	80095d4 <RCCEx_PLL3_Config>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bf2:	4b70      	ldr	r3, [pc, #448]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bf6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c02:	4a6c      	ldr	r2, [pc, #432]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c04:	430b      	orrs	r3, r1
 8007c06:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007c14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c1e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007c22:	460b      	mov	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	d03e      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c34:	d022      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007c36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c3a:	d81b      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c44:	d00b      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007c46:	e015      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	2100      	movs	r1, #0
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 fc0d 	bl	8009470 <RCCEx_PLL2_Config>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c5c:	e00f      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c62:	3328      	adds	r3, #40	@ 0x28
 8007c64:	2102      	movs	r1, #2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 fcb4 	bl	80095d4 <RCCEx_PLL3_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c72:	e004      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c7a:	e000      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c86:	4b4b      	ldr	r3, [pc, #300]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c8a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c96:	4a47      	ldr	r2, [pc, #284]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c9c:	e003      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007cb2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cb8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	d03b      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cce:	d01f      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007cd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cd4:	d818      	bhi.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cda:	d003      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007cdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ce0:	d007      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007ce2:	e011      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce4:	4b33      	ldr	r3, [pc, #204]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce8:	4a32      	ldr	r2, [pc, #200]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cf0:	e00f      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf6:	3328      	adds	r3, #40	@ 0x28
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 fc6a 	bl	80095d4 <RCCEx_PLL3_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d06:	e004      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d0e:	e000      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d1a:	4b26      	ldr	r3, [pc, #152]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d2a:	4a22      	ldr	r2, [pc, #136]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d2c:	430b      	orrs	r3, r1
 8007d2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d30:	e003      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007d46:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d48:	2300      	movs	r3, #0
 8007d4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d4c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d50:	460b      	mov	r3, r1
 8007d52:	4313      	orrs	r3, r2
 8007d54:	d034      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d64:	d007      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007d66:	e011      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d68:	4b12      	ldr	r3, [pc, #72]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6c:	4a11      	ldr	r2, [pc, #68]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d74:	e00e      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	2102      	movs	r1, #2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f001 fb76 	bl	8009470 <RCCEx_PLL2_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d8a:	e003      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10d      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d9c:	4b05      	ldr	r3, [pc, #20]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007daa:	4a02      	ldr	r2, [pc, #8]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dac:	430b      	orrs	r3, r1
 8007dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007db0:	e006      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007db2:	bf00      	nop
 8007db4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dce:	2300      	movs	r3, #0
 8007dd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dd2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	d00c      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de0:	3328      	adds	r3, #40	@ 0x28
 8007de2:	2102      	movs	r1, #2
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 fbf5 	bl	80095d4 <RCCEx_PLL3_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007e02:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e04:	2300      	movs	r3, #0
 8007e06:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	d038      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e1e:	d018      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e24:	d811      	bhi.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e2a:	d014      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e30:	d80b      	bhi.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d011      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e3a:	d106      	bne.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e3c:	4bc3      	ldr	r3, [pc, #780]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e40:	4ac2      	ldr	r2, [pc, #776]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e48:	e008      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e50:	e004      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e52:	bf00      	nop
 8007e54:	e002      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e56:	bf00      	nop
 8007e58:	e000      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10b      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e64:	4bb9      	ldr	r3, [pc, #740]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e68:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e74:	4ab5      	ldr	r2, [pc, #724]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e76:	430b      	orrs	r3, r1
 8007e78:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e7a:	e003      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e92:	2300      	movs	r3, #0
 8007e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	d009      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ea0:	4baa      	ldr	r3, [pc, #680]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ea4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eae:	4aa7      	ldr	r2, [pc, #668]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ec0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ec6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	d00a      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ed0:	4b9e      	ldr	r3, [pc, #632]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007edc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ee0:	4a9a      	ldr	r2, [pc, #616]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ef8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007efc:	460b      	mov	r3, r1
 8007efe:	4313      	orrs	r3, r2
 8007f00:	d009      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f02:	4b92      	ldr	r3, [pc, #584]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f06:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f10:	4a8e      	ldr	r2, [pc, #568]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f12:	430b      	orrs	r3, r1
 8007f14:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007f22:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f24:	2300      	movs	r3, #0
 8007f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	d00e      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f32:	4b86      	ldr	r3, [pc, #536]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	4a85      	ldr	r2, [pc, #532]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f3c:	6113      	str	r3, [r2, #16]
 8007f3e:	4b83      	ldr	r3, [pc, #524]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f40:	6919      	ldr	r1, [r3, #16]
 8007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007f4a:	4a80      	ldr	r2, [pc, #512]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f5e:	2300      	movs	r3, #0
 8007f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007f66:	460b      	mov	r3, r1
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	d009      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f6c:	4b77      	ldr	r3, [pc, #476]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f70:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7a:	4a74      	ldr	r2, [pc, #464]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f8e:	2300      	movs	r3, #0
 8007f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f96:	460b      	mov	r3, r1
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	d00a      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fac:	4a67      	ldr	r2, [pc, #412]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fae:	430b      	orrs	r3, r1
 8007fb0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	2100      	movs	r1, #0
 8007fbc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	d011      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f001 fa4a 	bl	8009470 <RCCEx_PLL2_Config>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	6239      	str	r1, [r7, #32]
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	627b      	str	r3, [r7, #36]	@ 0x24
 8008004:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008008:	460b      	mov	r3, r1
 800800a:	4313      	orrs	r3, r2
 800800c:	d011      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008012:	3308      	adds	r3, #8
 8008014:	2101      	movs	r1, #1
 8008016:	4618      	mov	r0, r3
 8008018:	f001 fa2a 	bl	8009470 <RCCEx_PLL2_Config>
 800801c:	4603      	mov	r3, r0
 800801e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	2100      	movs	r1, #0
 800803c:	61b9      	str	r1, [r7, #24]
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	61fb      	str	r3, [r7, #28]
 8008044:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008048:	460b      	mov	r3, r1
 800804a:	4313      	orrs	r3, r2
 800804c:	d011      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008052:	3308      	adds	r3, #8
 8008054:	2102      	movs	r1, #2
 8008056:	4618      	mov	r0, r3
 8008058:	f001 fa0a 	bl	8009470 <RCCEx_PLL2_Config>
 800805c:	4603      	mov	r3, r0
 800805e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	2100      	movs	r1, #0
 800807c:	6139      	str	r1, [r7, #16]
 800807e:	f003 0308 	and.w	r3, r3, #8
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008088:	460b      	mov	r3, r1
 800808a:	4313      	orrs	r3, r2
 800808c:	d011      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800808e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008092:	3328      	adds	r3, #40	@ 0x28
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f001 fa9c 	bl	80095d4 <RCCEx_PLL3_Config>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80080a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	2100      	movs	r1, #0
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80080c8:	460b      	mov	r3, r1
 80080ca:	4313      	orrs	r3, r2
 80080cc:	d011      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	3328      	adds	r3, #40	@ 0x28
 80080d4:	2101      	movs	r1, #1
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 fa7c 	bl	80095d4 <RCCEx_PLL3_Config>
 80080dc:	4603      	mov	r3, r0
 80080de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	2100      	movs	r1, #0
 80080fc:	6039      	str	r1, [r7, #0]
 80080fe:	f003 0320 	and.w	r3, r3, #32
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008108:	460b      	mov	r3, r1
 800810a:	4313      	orrs	r3, r2
 800810c:	d011      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008112:	3328      	adds	r3, #40	@ 0x28
 8008114:	2102      	movs	r1, #2
 8008116:	4618      	mov	r0, r3
 8008118:	f001 fa5c 	bl	80095d4 <RCCEx_PLL3_Config>
 800811c:	4603      	mov	r3, r0
 800811e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800812e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008132:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	e000      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
}
 8008140:	4618      	mov	r0, r3
 8008142:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008146:	46bd      	mov	sp, r7
 8008148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800814c:	58024400 	.word	0x58024400

08008150 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b090      	sub	sp, #64	@ 0x40
 8008154:	af00      	add	r7, sp, #0
 8008156:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800815a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800815e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008162:	430b      	orrs	r3, r1
 8008164:	f040 8094 	bne.w	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008168:	4b9e      	ldr	r3, [pc, #632]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800816a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	2b04      	cmp	r3, #4
 8008176:	f200 8087 	bhi.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800817a:	a201      	add	r2, pc, #4	@ (adr r2, 8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	08008195 	.word	0x08008195
 8008184:	080081bd 	.word	0x080081bd
 8008188:	080081e5 	.word	0x080081e5
 800818c:	08008281 	.word	0x08008281
 8008190:	0800820d 	.word	0x0800820d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008194:	4b93      	ldr	r3, [pc, #588]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800819c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081a0:	d108      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 f810 	bl	80091cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081b0:	f000 bd45 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081b8:	f000 bd41 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081bc:	4b89      	ldr	r3, [pc, #548]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081c8:	d108      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ca:	f107 0318 	add.w	r3, r7, #24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fd54 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d8:	f000 bd31 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081e0:	f000 bd2d 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081e4:	4b7f      	ldr	r3, [pc, #508]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081f0:	d108      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081f2:	f107 030c 	add.w	r3, r7, #12
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fe94 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008200:	f000 bd1d 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008208:	f000 bd19 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800820c:	4b75      	ldr	r3, [pc, #468]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800820e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008210:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008214:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008216:	4b73      	ldr	r3, [pc, #460]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0304 	and.w	r3, r3, #4
 800821e:	2b04      	cmp	r3, #4
 8008220:	d10c      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008224:	2b00      	cmp	r3, #0
 8008226:	d109      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008228:	4b6e      	ldr	r3, [pc, #440]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	08db      	lsrs	r3, r3, #3
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	4a6d      	ldr	r2, [pc, #436]	@ (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008234:	fa22 f303 	lsr.w	r3, r2, r3
 8008238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800823a:	e01f      	b.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800823c:	4b69      	ldr	r3, [pc, #420]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008248:	d106      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800824a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008250:	d102      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008252:	4b66      	ldr	r3, [pc, #408]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008256:	e011      	b.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008258:	4b62      	ldr	r3, [pc, #392]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008264:	d106      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800826c:	d102      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800826e:	4b60      	ldr	r3, [pc, #384]	@ (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008272:	e003      	b.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008278:	f000 bce1 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800827c:	f000 bcdf 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008280:	4b5c      	ldr	r3, [pc, #368]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008284:	f000 bcdb 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800828c:	f000 bcd7 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008294:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008298:	430b      	orrs	r3, r1
 800829a:	f040 80ad 	bne.w	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800829e:	4b51      	ldr	r3, [pc, #324]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80082a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80082a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ae:	d056      	beq.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b6:	f200 8090 	bhi.w	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80082be:	f000 8088 	beq.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80082c6:	f200 8088 	bhi.w	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	2b80      	cmp	r3, #128	@ 0x80
 80082ce:	d032      	beq.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	2b80      	cmp	r3, #128	@ 0x80
 80082d4:	f200 8081 	bhi.w	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80082de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e0:	2b40      	cmp	r3, #64	@ 0x40
 80082e2:	d014      	beq.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80082e4:	e079      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082e6:	4b3f      	ldr	r3, [pc, #252]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082f2:	d108      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 ff67 	bl	80091cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008302:	f000 bc9c 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800830a:	f000 bc98 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800830e:	4b35      	ldr	r3, [pc, #212]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800831a:	d108      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800831c:	f107 0318 	add.w	r3, r7, #24
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fcab 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800832a:	f000 bc88 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008332:	f000 bc84 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008336:	4b2b      	ldr	r3, [pc, #172]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800833e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008342:	d108      	bne.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008344:	f107 030c 	add.w	r3, r7, #12
 8008348:	4618      	mov	r0, r3
 800834a:	f000 fdeb 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008352:	f000 bc74 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008356:	2300      	movs	r3, #0
 8008358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800835a:	f000 bc70 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800835e:	4b21      	ldr	r3, [pc, #132]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008362:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008366:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008368:	4b1e      	ldr	r3, [pc, #120]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0304 	and.w	r3, r3, #4
 8008370:	2b04      	cmp	r3, #4
 8008372:	d10c      	bne.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008376:	2b00      	cmp	r3, #0
 8008378:	d109      	bne.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800837a:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	08db      	lsrs	r3, r3, #3
 8008380:	f003 0303 	and.w	r3, r3, #3
 8008384:	4a18      	ldr	r2, [pc, #96]	@ (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008386:	fa22 f303 	lsr.w	r3, r2, r3
 800838a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800838c:	e01f      	b.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800838e:	4b15      	ldr	r3, [pc, #84]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800839a:	d106      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800839c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800839e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083a2:	d102      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083a4:	4b11      	ldr	r3, [pc, #68]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80083a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083a8:	e011      	b.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083aa:	4b0e      	ldr	r3, [pc, #56]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083b6:	d106      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80083b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083be:	d102      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083c0:	4b0b      	ldr	r3, [pc, #44]	@ (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80083c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083c4:	e003      	b.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80083ca:	f000 bc38 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083ce:	f000 bc36 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083d2:	4b08      	ldr	r3, [pc, #32]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083d6:	f000 bc32 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083de:	f000 bc2e 	b.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083e2:	bf00      	nop
 80083e4:	58024400 	.word	0x58024400
 80083e8:	03d09000 	.word	0x03d09000
 80083ec:	003d0900 	.word	0x003d0900
 80083f0:	017d7840 	.word	0x017d7840
 80083f4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80083f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083fc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008400:	430b      	orrs	r3, r1
 8008402:	f040 809c 	bne.w	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008406:	4b9e      	ldr	r3, [pc, #632]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800840a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800840e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008412:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008416:	d054      	beq.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800841e:	f200 808b 	bhi.w	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008424:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008428:	f000 8083 	beq.w	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800842c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008432:	f200 8081 	bhi.w	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800843c:	d02f      	beq.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008444:	d878      	bhi.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	2b00      	cmp	r3, #0
 800844a:	d004      	beq.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008452:	d012      	beq.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008454:	e070      	b.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008456:	4b8a      	ldr	r3, [pc, #552]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800845e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008462:	d107      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008468:	4618      	mov	r0, r3
 800846a:	f000 feaf 	bl	80091cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800846e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008472:	e3e4      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008478:	e3e1      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800847a:	4b81      	ldr	r3, [pc, #516]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008486:	d107      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008488:	f107 0318 	add.w	r3, r7, #24
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fbf5 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008496:	e3d2      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800849c:	e3cf      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800849e:	4b78      	ldr	r3, [pc, #480]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084aa:	d107      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ac:	f107 030c 	add.w	r3, r7, #12
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fd37 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ba:	e3c0      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c0:	e3bd      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084c2:	4b6f      	ldr	r3, [pc, #444]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80084ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084cc:	4b6c      	ldr	r3, [pc, #432]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d10c      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80084d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d109      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084de:	4b68      	ldr	r3, [pc, #416]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	08db      	lsrs	r3, r3, #3
 80084e4:	f003 0303 	and.w	r3, r3, #3
 80084e8:	4a66      	ldr	r2, [pc, #408]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80084ea:	fa22 f303 	lsr.w	r3, r2, r3
 80084ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084f0:	e01e      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084f2:	4b63      	ldr	r3, [pc, #396]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084fe:	d106      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008506:	d102      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008508:	4b5f      	ldr	r3, [pc, #380]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800850a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800850c:	e010      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800850e:	4b5c      	ldr	r3, [pc, #368]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008516:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800851a:	d106      	bne.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800851c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800851e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008522:	d102      	bne.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008524:	4b59      	ldr	r3, [pc, #356]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008528:	e002      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800852e:	e386      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008530:	e385      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008532:	4b57      	ldr	r3, [pc, #348]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008536:	e382      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853c:	e37f      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800853e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008542:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008546:	430b      	orrs	r3, r1
 8008548:	f040 80a7 	bne.w	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800854c:	4b4c      	ldr	r3, [pc, #304]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800854e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008550:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008554:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008558:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800855c:	d055      	beq.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008564:	f200 8096 	bhi.w	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800856e:	f000 8084 	beq.w	800867a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008574:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008578:	f200 808c 	bhi.w	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008582:	d030      	beq.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800858a:	f200 8083 	bhi.w	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800859a:	d012      	beq.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800859c:	e07a      	b.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800859e:	4b38      	ldr	r3, [pc, #224]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085aa:	d107      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fe0b 	bl	80091cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ba:	e340      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c0:	e33d      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085c2:	4b2f      	ldr	r3, [pc, #188]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085ce:	d107      	bne.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085d0:	f107 0318 	add.w	r3, r7, #24
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fb51 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085de:	e32e      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e4:	e32b      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085e6:	4b26      	ldr	r3, [pc, #152]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085f2:	d107      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085f4:	f107 030c 	add.w	r3, r7, #12
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fc93 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008602:	e31c      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008608:	e319      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800860a:	4b1d      	ldr	r3, [pc, #116]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800860c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800860e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008612:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008614:	4b1a      	ldr	r3, [pc, #104]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b04      	cmp	r3, #4
 800861e:	d10c      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008622:	2b00      	cmp	r3, #0
 8008624:	d109      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008626:	4b16      	ldr	r3, [pc, #88]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	08db      	lsrs	r3, r3, #3
 800862c:	f003 0303 	and.w	r3, r3, #3
 8008630:	4a14      	ldr	r2, [pc, #80]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008632:	fa22 f303 	lsr.w	r3, r2, r3
 8008636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008638:	e01e      	b.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800863a:	4b11      	ldr	r3, [pc, #68]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008646:	d106      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800864e:	d102      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008650:	4b0d      	ldr	r3, [pc, #52]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008654:	e010      	b.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008656:	4b0a      	ldr	r3, [pc, #40]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800865e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008662:	d106      	bne.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800866a:	d102      	bne.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800866c:	4b07      	ldr	r3, [pc, #28]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008670:	e002      	b.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008676:	e2e2      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008678:	e2e1      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800867a:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800867c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867e:	e2de      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008680:	58024400 	.word	0x58024400
 8008684:	03d09000 	.word	0x03d09000
 8008688:	003d0900 	.word	0x003d0900
 800868c:	017d7840 	.word	0x017d7840
 8008690:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008698:	e2d1      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800869a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800869e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80086a2:	430b      	orrs	r3, r1
 80086a4:	f040 809c 	bne.w	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80086a8:	4b93      	ldr	r3, [pc, #588]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80086b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80086b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086b8:	d054      	beq.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80086ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086c0:	f200 808b 	bhi.w	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80086ca:	f000 8083 	beq.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80086ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80086d4:	f200 8081 	bhi.w	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086de:	d02f      	beq.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80086e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086e6:	d878      	bhi.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80086ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f4:	d012      	beq.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80086f6:	e070      	b.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086f8:	4b7f      	ldr	r3, [pc, #508]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008704:	d107      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fd5e 	bl	80091cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008714:	e293      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800871a:	e290      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800871c:	4b76      	ldr	r3, [pc, #472]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008728:	d107      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800872a:	f107 0318 	add.w	r3, r7, #24
 800872e:	4618      	mov	r0, r3
 8008730:	f000 faa4 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008738:	e281      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800873e:	e27e      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008740:	4b6d      	ldr	r3, [pc, #436]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800874c:	d107      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800874e:	f107 030c 	add.w	r3, r7, #12
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fbe6 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800875c:	e26f      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008762:	e26c      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008764:	4b64      	ldr	r3, [pc, #400]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008768:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800876c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800876e:	4b62      	ldr	r3, [pc, #392]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0304 	and.w	r3, r3, #4
 8008776:	2b04      	cmp	r3, #4
 8008778:	d10c      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800877a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877c:	2b00      	cmp	r3, #0
 800877e:	d109      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008780:	4b5d      	ldr	r3, [pc, #372]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	08db      	lsrs	r3, r3, #3
 8008786:	f003 0303 	and.w	r3, r3, #3
 800878a:	4a5c      	ldr	r2, [pc, #368]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800878c:	fa22 f303 	lsr.w	r3, r2, r3
 8008790:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008792:	e01e      	b.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008794:	4b58      	ldr	r3, [pc, #352]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800879c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a0:	d106      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80087a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087a8:	d102      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087aa:	4b55      	ldr	r3, [pc, #340]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ae:	e010      	b.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087b0:	4b51      	ldr	r3, [pc, #324]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087bc:	d106      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80087be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087c4:	d102      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80087c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ca:	e002      	b.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087d0:	e235      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087d2:	e234      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d8:	e231      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087de:	e22e      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80087e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80087e8:	430b      	orrs	r3, r1
 80087ea:	f040 808f 	bne.w	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80087ee:	4b42      	ldr	r3, [pc, #264]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80087f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80087f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087fe:	d06b      	beq.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008802:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008806:	d874      	bhi.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800880e:	d056      	beq.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008812:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008816:	d86c      	bhi.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800881e:	d03b      	beq.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008822:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008826:	d864      	bhi.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800882e:	d021      	beq.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008836:	d85c      	bhi.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	2b00      	cmp	r3, #0
 800883c:	d004      	beq.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008844:	d004      	beq.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008846:	e054      	b.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008848:	f7fe fa20 	bl	8006c8c <HAL_RCC_GetPCLK1Freq>
 800884c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800884e:	e1f6      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008850:	4b29      	ldr	r3, [pc, #164]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008858:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800885c:	d107      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800885e:	f107 0318 	add.w	r3, r7, #24
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fa0a 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800886c:	e1e7      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008872:	e1e4      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008874:	4b20      	ldr	r3, [pc, #128]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800887c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008880:	d107      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008882:	f107 030c 	add.w	r3, r7, #12
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fb4c 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008890:	e1d5      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008896:	e1d2      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008898:	4b17      	ldr	r3, [pc, #92]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d109      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088a4:	4b14      	ldr	r3, [pc, #80]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	08db      	lsrs	r3, r3, #3
 80088aa:	f003 0303 	and.w	r3, r3, #3
 80088ae:	4a13      	ldr	r2, [pc, #76]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80088b0:	fa22 f303 	lsr.w	r3, r2, r3
 80088b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088b6:	e1c2      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088bc:	e1bf      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80088be:	4b0e      	ldr	r3, [pc, #56]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ca:	d102      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80088cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d0:	e1b5      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d6:	e1b2      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088d8:	4b07      	ldr	r3, [pc, #28]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088e4:	d102      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80088e6:	4b07      	ldr	r3, [pc, #28]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80088e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ea:	e1a8      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f0:	e1a5      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f6:	e1a2      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088f8:	58024400 	.word	0x58024400
 80088fc:	03d09000 	.word	0x03d09000
 8008900:	003d0900 	.word	0x003d0900
 8008904:	017d7840 	.word	0x017d7840
 8008908:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800890c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008910:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008914:	430b      	orrs	r3, r1
 8008916:	d173      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008918:	4b9c      	ldr	r3, [pc, #624]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800891a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800891c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008920:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008924:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008928:	d02f      	beq.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800892a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008930:	d863      	bhi.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800893e:	d012      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008940:	e05b      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008942:	4b92      	ldr	r3, [pc, #584]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800894a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800894e:	d107      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008950:	f107 0318 	add.w	r3, r7, #24
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f991 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800895e:	e16e      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008964:	e16b      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008966:	4b89      	ldr	r3, [pc, #548]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800896e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008972:	d107      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008974:	f107 030c 	add.w	r3, r7, #12
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fad3 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008982:	e15c      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008988:	e159      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800898a:	4b80      	ldr	r3, [pc, #512]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800898c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800898e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008992:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008994:	4b7d      	ldr	r3, [pc, #500]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b04      	cmp	r3, #4
 800899e:	d10c      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80089a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089a6:	4b79      	ldr	r3, [pc, #484]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	08db      	lsrs	r3, r3, #3
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	4a77      	ldr	r2, [pc, #476]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80089b2:	fa22 f303 	lsr.w	r3, r2, r3
 80089b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089b8:	e01e      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089ba:	4b74      	ldr	r3, [pc, #464]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089c6:	d106      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80089c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ce:	d102      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089d0:	4b70      	ldr	r3, [pc, #448]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089d4:	e010      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089d6:	4b6d      	ldr	r3, [pc, #436]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089e2:	d106      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80089e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ea:	d102      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089ec:	4b6a      	ldr	r3, [pc, #424]	@ (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f0:	e002      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089f6:	e122      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089f8:	e121      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089fe:	e11e      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a04:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	d133      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008a0c:	4b5f      	ldr	r3, [pc, #380]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d004      	beq.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a22:	d012      	beq.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008a24:	e023      	b.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a26:	4b59      	ldr	r3, [pc, #356]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a32:	d107      	bne.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fbc7 	bl	80091cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a42:	e0fc      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a48:	e0f9      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a4a:	4b50      	ldr	r3, [pc, #320]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a56:	d107      	bne.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a58:	f107 0318 	add.w	r3, r7, #24
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 f90d 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a66:	e0ea      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a6c:	e0e7      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a72:	e0e4      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a78:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008a7c:	430b      	orrs	r3, r1
 8008a7e:	f040 808d 	bne.w	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008a82:	4b42      	ldr	r3, [pc, #264]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a86:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008a8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a92:	d06b      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a9a:	d874      	bhi.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aa2:	d056      	beq.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aaa:	d86c      	bhi.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ab2:	d03b      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008aba:	d864      	bhi.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac2:	d021      	beq.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aca:	d85c      	bhi.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d004      	beq.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ad8:	d004      	beq.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008ada:	e054      	b.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008adc:	f000 f8b8 	bl	8008c50 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ae0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ae2:	e0ac      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ae4:	4b29      	ldr	r3, [pc, #164]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008aec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008af0:	d107      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008af2:	f107 0318 	add.w	r3, r7, #24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f8c0 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b00:	e09d      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b06:	e09a      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b08:	4b20      	ldr	r3, [pc, #128]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b14:	d107      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b16:	f107 030c 	add.w	r3, r7, #12
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 fa02 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b24:	e08b      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2a:	e088      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b2c:	4b17      	ldr	r3, [pc, #92]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d109      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b38:	4b14      	ldr	r3, [pc, #80]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	08db      	lsrs	r3, r3, #3
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	4a13      	ldr	r2, [pc, #76]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008b44:	fa22 f303 	lsr.w	r3, r2, r3
 8008b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b4a:	e078      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b50:	e075      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b52:	4b0e      	ldr	r3, [pc, #56]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b5e:	d102      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008b60:	4b0c      	ldr	r3, [pc, #48]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b64:	e06b      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b6a:	e068      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b6c:	4b07      	ldr	r3, [pc, #28]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b78:	d102      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008b7a:	4b07      	ldr	r3, [pc, #28]	@ (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b7e:	e05e      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b84:	e05b      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b8a:	e058      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b8c:	58024400 	.word	0x58024400
 8008b90:	03d09000 	.word	0x03d09000
 8008b94:	003d0900 	.word	0x003d0900
 8008b98:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ba0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	d148      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ba8:	4b27      	ldr	r3, [pc, #156]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bb8:	d02a      	beq.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc0:	d838      	bhi.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d004      	beq.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bce:	d00d      	beq.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008bd0:	e030      	b.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bde:	d102      	bne.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008be0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be4:	e02b      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bea:	e028      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bec:	4b16      	ldr	r3, [pc, #88]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bf8:	d107      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fae4 	bl	80091cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c08:	e019      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0e:	e016      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c10:	4b0d      	ldr	r3, [pc, #52]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c1c:	d107      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c1e:	f107 0318 	add.w	r3, r7, #24
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 f82a 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c2c:	e007      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c32:	e004      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c38:	e001      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3740      	adds	r7, #64	@ 0x40
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	017d7840 	.word	0x017d7840

08008c50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c54:	f7fd ffea 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	4b06      	ldr	r3, [pc, #24]	@ (8008c74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	091b      	lsrs	r3, r3, #4
 8008c60:	f003 0307 	and.w	r3, r3, #7
 8008c64:	4904      	ldr	r1, [pc, #16]	@ (8008c78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c66:	5ccb      	ldrb	r3, [r1, r3]
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	58024400 	.word	0x58024400
 8008c78:	08016df4 	.word	0x08016df4

08008c7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b089      	sub	sp, #36	@ 0x24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c84:	4ba1      	ldr	r3, [pc, #644]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c88:	f003 0303 	and.w	r3, r3, #3
 8008c8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c8e:	4b9f      	ldr	r3, [pc, #636]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c92:	0b1b      	lsrs	r3, r3, #12
 8008c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c9a:	4b9c      	ldr	r3, [pc, #624]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9e:	091b      	lsrs	r3, r3, #4
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008ca6:	4b99      	ldr	r3, [pc, #612]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008caa:	08db      	lsrs	r3, r3, #3
 8008cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 8111 	beq.w	8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	f000 8083 	beq.w	8008dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	f200 80a1 	bhi.w	8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d056      	beq.n	8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ce6:	e099      	b.n	8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ce8:	4b88      	ldr	r3, [pc, #544]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0320 	and.w	r3, r3, #32
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d02d      	beq.n	8008d50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cf4:	4b85      	ldr	r3, [pc, #532]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	08db      	lsrs	r3, r3, #3
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	4a84      	ldr	r2, [pc, #528]	@ (8008f10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d00:	fa22 f303 	lsr.w	r3, r2, r3
 8008d04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	ee07 3a90 	vmov	s15, r3
 8008d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d4e:	e087      	b.n	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d62:	4b6a      	ldr	r3, [pc, #424]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d92:	e065      	b.n	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da6:	4b59      	ldr	r3, [pc, #356]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dd6:	e043      	b.n	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dea:	4b48      	ldr	r3, [pc, #288]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e1a:	e021      	b.n	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e2e:	4b37      	ldr	r3, [pc, #220]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e60:	4b2a      	ldr	r3, [pc, #168]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e64:	0a5b      	lsrs	r3, r3, #9
 8008e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e86:	ee17 2a90 	vmov	r2, s15
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	0c1b      	lsrs	r3, r3, #16
 8008e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e98:	ee07 3a90 	vmov	s15, r3
 8008e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eb4:	ee17 2a90 	vmov	r2, s15
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ebc:	4b13      	ldr	r3, [pc, #76]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec0:	0e1b      	lsrs	r3, r3, #24
 8008ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ee2:	ee17 2a90 	vmov	r2, s15
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008eea:	e008      	b.n	8008efe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	609a      	str	r2, [r3, #8]
}
 8008efe:	bf00      	nop
 8008f00:	3724      	adds	r7, #36	@ 0x24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	03d09000 	.word	0x03d09000
 8008f14:	46000000 	.word	0x46000000
 8008f18:	4c742400 	.word	0x4c742400
 8008f1c:	4a742400 	.word	0x4a742400
 8008f20:	4bbebc20 	.word	0x4bbebc20

08008f24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b089      	sub	sp, #36	@ 0x24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f2c:	4ba1      	ldr	r3, [pc, #644]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f30:	f003 0303 	and.w	r3, r3, #3
 8008f34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f36:	4b9f      	ldr	r3, [pc, #636]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3a:	0d1b      	lsrs	r3, r3, #20
 8008f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f42:	4b9c      	ldr	r3, [pc, #624]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f46:	0a1b      	lsrs	r3, r3, #8
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f4e:	4b99      	ldr	r3, [pc, #612]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f52:	08db      	lsrs	r3, r3, #3
 8008f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	fb02 f303 	mul.w	r3, r2, r3
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 8111 	beq.w	8009194 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	f000 8083 	beq.w	8009080 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	f200 80a1 	bhi.w	80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d003      	beq.n	8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d056      	beq.n	800903c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f8e:	e099      	b.n	80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f90:	4b88      	ldr	r3, [pc, #544]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d02d      	beq.n	8008ff8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f9c:	4b85      	ldr	r3, [pc, #532]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	08db      	lsrs	r3, r3, #3
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	4a84      	ldr	r2, [pc, #528]	@ (80091b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	ee07 3a90 	vmov	s15, r3
 8008fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc6:	4b7b      	ldr	r3, [pc, #492]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ff6:	e087      	b.n	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009002:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900a:	4b6a      	ldr	r3, [pc, #424]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800900c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901a:	ed97 6a03 	vldr	s12, [r7, #12]
 800901e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800902e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800903a:	e065      	b.n	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009046:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800904a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904e:	4b59      	ldr	r3, [pc, #356]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009062:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800907e:	e043      	b.n	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800908e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009092:	4b48      	ldr	r3, [pc, #288]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c2:	e021      	b.n	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d6:	4b37      	ldr	r3, [pc, #220]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009106:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009108:	4b2a      	ldr	r3, [pc, #168]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800910a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800910c:	0a5b      	lsrs	r3, r3, #9
 800910e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800911e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009122:	edd7 6a07 	vldr	s13, [r7, #28]
 8009126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800912a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800912e:	ee17 2a90 	vmov	r2, s15
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009136:	4b1f      	ldr	r3, [pc, #124]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913a:	0c1b      	lsrs	r3, r3, #16
 800913c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009140:	ee07 3a90 	vmov	s15, r3
 8009144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009148:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800914c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009150:	edd7 6a07 	vldr	s13, [r7, #28]
 8009154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800915c:	ee17 2a90 	vmov	r2, s15
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009164:	4b13      	ldr	r3, [pc, #76]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009168:	0e1b      	lsrs	r3, r3, #24
 800916a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009176:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800917a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800917e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800918a:	ee17 2a90 	vmov	r2, s15
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009192:	e008      	b.n	80091a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	609a      	str	r2, [r3, #8]
}
 80091a6:	bf00      	nop
 80091a8:	3724      	adds	r7, #36	@ 0x24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	58024400 	.word	0x58024400
 80091b8:	03d09000 	.word	0x03d09000
 80091bc:	46000000 	.word	0x46000000
 80091c0:	4c742400 	.word	0x4c742400
 80091c4:	4a742400 	.word	0x4a742400
 80091c8:	4bbebc20 	.word	0x4bbebc20

080091cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b089      	sub	sp, #36	@ 0x24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091d4:	4ba0      	ldr	r3, [pc, #640]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d8:	f003 0303 	and.w	r3, r3, #3
 80091dc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80091de:	4b9e      	ldr	r3, [pc, #632]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e2:	091b      	lsrs	r3, r3, #4
 80091e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091e8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80091ea:	4b9b      	ldr	r3, [pc, #620]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80091f4:	4b98      	ldr	r3, [pc, #608]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091f8:	08db      	lsrs	r3, r3, #3
 80091fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	fb02 f303 	mul.w	r3, r2, r3
 8009204:	ee07 3a90 	vmov	s15, r3
 8009208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 8111 	beq.w	800943a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	2b02      	cmp	r3, #2
 800921c:	f000 8083 	beq.w	8009326 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	2b02      	cmp	r3, #2
 8009224:	f200 80a1 	bhi.w	800936a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d056      	beq.n	80092e2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009234:	e099      	b.n	800936a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009236:	4b88      	ldr	r3, [pc, #544]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d02d      	beq.n	800929e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009242:	4b85      	ldr	r3, [pc, #532]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	08db      	lsrs	r3, r3, #3
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	4a83      	ldr	r2, [pc, #524]	@ (800945c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800926c:	4b7a      	ldr	r3, [pc, #488]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800926e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009274:	ee07 3a90 	vmov	s15, r3
 8009278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800927c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009280:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800928c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009298:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800929c:	e087      	b.n	80093ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	ee07 3a90 	vmov	s15, r3
 80092a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b0:	4b69      	ldr	r3, [pc, #420]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b8:	ee07 3a90 	vmov	s15, r3
 80092bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092e0:	e065      	b.n	80093ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	ee07 3a90 	vmov	s15, r3
 80092e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ec:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80092f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f4:	4b58      	ldr	r3, [pc, #352]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fc:	ee07 3a90 	vmov	s15, r3
 8009300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009304:	ed97 6a03 	vldr	s12, [r7, #12]
 8009308:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800930c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009314:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800931c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009320:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009324:	e043      	b.n	80093ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	ee07 3a90 	vmov	s15, r3
 800932c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009330:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800946c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009338:	4b47      	ldr	r3, [pc, #284]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800933a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800933c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009340:	ee07 3a90 	vmov	s15, r3
 8009344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009348:	ed97 6a03 	vldr	s12, [r7, #12]
 800934c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009358:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800935c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009364:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009368:	e021      	b.n	80093ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009374:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937c:	4b36      	ldr	r3, [pc, #216]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800937e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009384:	ee07 3a90 	vmov	s15, r3
 8009388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009390:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80093ae:	4b2a      	ldr	r3, [pc, #168]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b2:	0a5b      	lsrs	r3, r3, #9
 80093b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093b8:	ee07 3a90 	vmov	s15, r3
 80093bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80093cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093d4:	ee17 2a90 	vmov	r2, s15
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80093dc:	4b1e      	ldr	r3, [pc, #120]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e0:	0c1b      	lsrs	r3, r3, #16
 80093e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80093fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009402:	ee17 2a90 	vmov	r2, s15
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800940a:	4b13      	ldr	r3, [pc, #76]	@ (8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800940c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800940e:	0e1b      	lsrs	r3, r3, #24
 8009410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009414:	ee07 3a90 	vmov	s15, r3
 8009418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009420:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009424:	edd7 6a07 	vldr	s13, [r7, #28]
 8009428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800942c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009430:	ee17 2a90 	vmov	r2, s15
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009438:	e008      	b.n	800944c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	609a      	str	r2, [r3, #8]
}
 800944c:	bf00      	nop
 800944e:	3724      	adds	r7, #36	@ 0x24
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	58024400 	.word	0x58024400
 800945c:	03d09000 	.word	0x03d09000
 8009460:	46000000 	.word	0x46000000
 8009464:	4c742400 	.word	0x4c742400
 8009468:	4a742400 	.word	0x4a742400
 800946c:	4bbebc20 	.word	0x4bbebc20

08009470 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800947e:	4b53      	ldr	r3, [pc, #332]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	2b03      	cmp	r3, #3
 8009488:	d101      	bne.n	800948e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e099      	b.n	80095c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800948e:	4b4f      	ldr	r3, [pc, #316]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a4e      	ldr	r2, [pc, #312]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009494:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800949a:	f7f6 fff3 	bl	8000484 <HAL_GetTick>
 800949e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094a0:	e008      	b.n	80094b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80094a2:	f7f6 ffef 	bl	8000484 <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d901      	bls.n	80094b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e086      	b.n	80095c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094b4:	4b45      	ldr	r3, [pc, #276]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1f0      	bne.n	80094a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80094c0:	4b42      	ldr	r3, [pc, #264]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 80094c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	031b      	lsls	r3, r3, #12
 80094ce:	493f      	ldr	r1, [pc, #252]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	3b01      	subs	r3, #1
 80094da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	025b      	lsls	r3, r3, #9
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	431a      	orrs	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	041b      	lsls	r3, r3, #16
 80094f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80094f6:	431a      	orrs	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	061b      	lsls	r3, r3, #24
 8009500:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009504:	4931      	ldr	r1, [pc, #196]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009506:	4313      	orrs	r3, r2
 8009508:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800950a:	4b30      	ldr	r3, [pc, #192]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 800950c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	492d      	ldr	r1, [pc, #180]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009518:	4313      	orrs	r3, r2
 800951a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800951c:	4b2b      	ldr	r3, [pc, #172]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 800951e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009520:	f023 0220 	bic.w	r2, r3, #32
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	4928      	ldr	r1, [pc, #160]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 800952a:	4313      	orrs	r3, r2
 800952c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800952e:	4b27      	ldr	r3, [pc, #156]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009532:	4a26      	ldr	r2, [pc, #152]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009534:	f023 0310 	bic.w	r3, r3, #16
 8009538:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800953a:	4b24      	ldr	r3, [pc, #144]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 800953c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800953e:	4b24      	ldr	r3, [pc, #144]	@ (80095d0 <RCCEx_PLL2_Config+0x160>)
 8009540:	4013      	ands	r3, r2
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	69d2      	ldr	r2, [r2, #28]
 8009546:	00d2      	lsls	r2, r2, #3
 8009548:	4920      	ldr	r1, [pc, #128]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 800954a:	4313      	orrs	r3, r2
 800954c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800954e:	4b1f      	ldr	r3, [pc, #124]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009552:	4a1e      	ldr	r2, [pc, #120]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009554:	f043 0310 	orr.w	r3, r3, #16
 8009558:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d106      	bne.n	800956e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009560:	4b1a      	ldr	r3, [pc, #104]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009564:	4a19      	ldr	r2, [pc, #100]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009566:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800956a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800956c:	e00f      	b.n	800958e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d106      	bne.n	8009582 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009574:	4b15      	ldr	r3, [pc, #84]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	4a14      	ldr	r2, [pc, #80]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 800957a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800957e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009580:	e005      	b.n	800958e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009582:	4b12      	ldr	r3, [pc, #72]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009586:	4a11      	ldr	r2, [pc, #68]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009588:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800958c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800958e:	4b0f      	ldr	r3, [pc, #60]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a0e      	ldr	r2, [pc, #56]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 8009594:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800959a:	f7f6 ff73 	bl	8000484 <HAL_GetTick>
 800959e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095a0:	e008      	b.n	80095b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80095a2:	f7f6 ff6f 	bl	8000484 <HAL_GetTick>
 80095a6:	4602      	mov	r2, r0
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d901      	bls.n	80095b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e006      	b.n	80095c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095b4:	4b05      	ldr	r3, [pc, #20]	@ (80095cc <RCCEx_PLL2_Config+0x15c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d0f0      	beq.n	80095a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	58024400 	.word	0x58024400
 80095d0:	ffff0007 	.word	0xffff0007

080095d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095e2:	4b53      	ldr	r3, [pc, #332]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80095e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e6:	f003 0303 	and.w	r3, r3, #3
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d101      	bne.n	80095f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e099      	b.n	8009726 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80095f2:	4b4f      	ldr	r3, [pc, #316]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a4e      	ldr	r2, [pc, #312]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80095f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095fe:	f7f6 ff41 	bl	8000484 <HAL_GetTick>
 8009602:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009604:	e008      	b.n	8009618 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009606:	f7f6 ff3d 	bl	8000484 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	2b02      	cmp	r3, #2
 8009612:	d901      	bls.n	8009618 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e086      	b.n	8009726 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009618:	4b45      	ldr	r3, [pc, #276]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1f0      	bne.n	8009606 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009624:	4b42      	ldr	r3, [pc, #264]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 8009626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009628:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	051b      	lsls	r3, r3, #20
 8009632:	493f      	ldr	r1, [pc, #252]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 8009634:	4313      	orrs	r3, r2
 8009636:	628b      	str	r3, [r1, #40]	@ 0x28
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	3b01      	subs	r3, #1
 800963e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	3b01      	subs	r3, #1
 8009648:	025b      	lsls	r3, r3, #9
 800964a:	b29b      	uxth	r3, r3
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	3b01      	subs	r3, #1
 8009654:	041b      	lsls	r3, r3, #16
 8009656:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800965a:	431a      	orrs	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	3b01      	subs	r3, #1
 8009662:	061b      	lsls	r3, r3, #24
 8009664:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009668:	4931      	ldr	r1, [pc, #196]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 800966a:	4313      	orrs	r3, r2
 800966c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800966e:	4b30      	ldr	r3, [pc, #192]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 8009670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009672:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	492d      	ldr	r1, [pc, #180]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 800967c:	4313      	orrs	r3, r2
 800967e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009680:	4b2b      	ldr	r3, [pc, #172]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 8009682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009684:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	4928      	ldr	r1, [pc, #160]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 800968e:	4313      	orrs	r3, r2
 8009690:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009692:	4b27      	ldr	r3, [pc, #156]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 8009694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009696:	4a26      	ldr	r2, [pc, #152]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 8009698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800969c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800969e:	4b24      	ldr	r3, [pc, #144]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096a2:	4b24      	ldr	r3, [pc, #144]	@ (8009734 <RCCEx_PLL3_Config+0x160>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	69d2      	ldr	r2, [r2, #28]
 80096aa:	00d2      	lsls	r2, r2, #3
 80096ac:	4920      	ldr	r1, [pc, #128]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80096b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d106      	bne.n	80096d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80096c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c8:	4a19      	ldr	r2, [pc, #100]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80096ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096d0:	e00f      	b.n	80096f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d106      	bne.n	80096e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80096d8:	4b15      	ldr	r3, [pc, #84]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096dc:	4a14      	ldr	r2, [pc, #80]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80096e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096e4:	e005      	b.n	80096f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80096e6:	4b12      	ldr	r3, [pc, #72]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ea:	4a11      	ldr	r2, [pc, #68]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80096f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80096f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a0e      	ldr	r2, [pc, #56]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 80096f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096fe:	f7f6 fec1 	bl	8000484 <HAL_GetTick>
 8009702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009704:	e008      	b.n	8009718 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009706:	f7f6 febd 	bl	8000484 <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	2b02      	cmp	r3, #2
 8009712:	d901      	bls.n	8009718 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e006      	b.n	8009726 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009718:	4b05      	ldr	r3, [pc, #20]	@ (8009730 <RCCEx_PLL3_Config+0x15c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0f0      	beq.n	8009706 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	58024400 	.word	0x58024400
 8009734:	ffff0007 	.word	0xffff0007

08009738 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e10f      	b.n	800996a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a87      	ldr	r2, [pc, #540]	@ (8009974 <HAL_SPI_Init+0x23c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d00f      	beq.n	800977a <HAL_SPI_Init+0x42>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a86      	ldr	r2, [pc, #536]	@ (8009978 <HAL_SPI_Init+0x240>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d00a      	beq.n	800977a <HAL_SPI_Init+0x42>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a84      	ldr	r2, [pc, #528]	@ (800997c <HAL_SPI_Init+0x244>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d005      	beq.n	800977a <HAL_SPI_Init+0x42>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	2b0f      	cmp	r3, #15
 8009774:	d901      	bls.n	800977a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e0f7      	b.n	800996a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fe2e 	bl	800a3dc <SPI_GetPacketSize>
 8009780:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a7b      	ldr	r2, [pc, #492]	@ (8009974 <HAL_SPI_Init+0x23c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d00c      	beq.n	80097a6 <HAL_SPI_Init+0x6e>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a79      	ldr	r2, [pc, #484]	@ (8009978 <HAL_SPI_Init+0x240>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d007      	beq.n	80097a6 <HAL_SPI_Init+0x6e>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a78      	ldr	r2, [pc, #480]	@ (800997c <HAL_SPI_Init+0x244>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d002      	beq.n	80097a6 <HAL_SPI_Init+0x6e>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b08      	cmp	r3, #8
 80097a4:	d811      	bhi.n	80097ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80097aa:	4a72      	ldr	r2, [pc, #456]	@ (8009974 <HAL_SPI_Init+0x23c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d009      	beq.n	80097c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a70      	ldr	r2, [pc, #448]	@ (8009978 <HAL_SPI_Init+0x240>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d004      	beq.n	80097c4 <HAL_SPI_Init+0x8c>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a6f      	ldr	r2, [pc, #444]	@ (800997c <HAL_SPI_Init+0x244>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d104      	bne.n	80097ce <HAL_SPI_Init+0x96>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b10      	cmp	r3, #16
 80097c8:	d901      	bls.n	80097ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e0cd      	b.n	800996a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d106      	bne.n	80097e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f007 fd5c 	bl	80112a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2202      	movs	r2, #2
 80097ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 0201 	bic.w	r2, r2, #1
 80097fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800980a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009814:	d119      	bne.n	800984a <HAL_SPI_Init+0x112>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800981e:	d103      	bne.n	8009828 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009824:	2b00      	cmp	r3, #0
 8009826:	d008      	beq.n	800983a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10c      	bne.n	800984a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009838:	d107      	bne.n	800984a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009848:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00f      	beq.n	8009876 <HAL_SPI_Init+0x13e>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	2b06      	cmp	r3, #6
 800985c:	d90b      	bls.n	8009876 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	430a      	orrs	r2, r1
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	e007      	b.n	8009886 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009884:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	69da      	ldr	r2, [r3, #28]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988e:	431a      	orrs	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009898:	ea42 0103 	orr.w	r1, r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68da      	ldr	r2, [r3, #12]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	431a      	orrs	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	431a      	orrs	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	431a      	orrs	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	431a      	orrs	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	431a      	orrs	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	431a      	orrs	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098da:	431a      	orrs	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	431a      	orrs	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098e6:	ea42 0103 	orr.w	r1, r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	430a      	orrs	r2, r1
 80098f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d113      	bne.n	8009926 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009910:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009924:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 0201 	bic.w	r2, r2, #1
 8009934:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00a      	beq.n	8009958 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	430a      	orrs	r2, r1
 8009956:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	40013000 	.word	0x40013000
 8009978:	40003800 	.word	0x40003800
 800997c:	40003c00 	.word	0x40003c00

08009980 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af02      	add	r7, sp, #8
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	4613      	mov	r3, r2
 800998e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3320      	adds	r3, #32
 8009996:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009998:	f7f6 fd74 	bl	8000484 <HAL_GetTick>
 800999c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d001      	beq.n	80099ae <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80099aa:	2302      	movs	r3, #2
 80099ac:	e1d1      	b.n	8009d52 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <HAL_SPI_Transmit+0x3a>
 80099b4:	88fb      	ldrh	r3, [r7, #6]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e1c9      	b.n	8009d52 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d101      	bne.n	80099cc <HAL_SPI_Transmit+0x4c>
 80099c8:	2302      	movs	r3, #2
 80099ca:	e1c2      	b.n	8009d52 <HAL_SPI_Transmit+0x3d2>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2203      	movs	r2, #3
 80099d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	88fa      	ldrh	r2, [r7, #6]
 80099ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	88fa      	ldrh	r2, [r7, #6]
 80099f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009a24:	d108      	bne.n	8009a38 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	e009      	b.n	8009a4c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009a4a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	4b96      	ldr	r3, [pc, #600]	@ (8009cac <HAL_SPI_Transmit+0x32c>)
 8009a54:	4013      	ands	r3, r2
 8009a56:	88f9      	ldrh	r1, [r7, #6]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	6812      	ldr	r2, [r2, #0]
 8009a5c:	430b      	orrs	r3, r1
 8009a5e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0201 	orr.w	r2, r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a78:	d107      	bne.n	8009a8a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	2b0f      	cmp	r3, #15
 8009a90:	d947      	bls.n	8009b22 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009a92:	e03f      	b.n	8009b14 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d114      	bne.n	8009acc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ab2:	1d1a      	adds	r2, r3, #4
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009aca:	e023      	b.n	8009b14 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009acc:	f7f6 fcda 	bl	8000484 <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d803      	bhi.n	8009ae4 <HAL_SPI_Transmit+0x164>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae2:	d102      	bne.n	8009aea <HAL_SPI_Transmit+0x16a>
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d114      	bne.n	8009b14 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 fba8 	bl	800a240 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009af6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e11e      	b.n	8009d52 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1b9      	bne.n	8009a94 <HAL_SPI_Transmit+0x114>
 8009b20:	e0f1      	b.n	8009d06 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	2b07      	cmp	r3, #7
 8009b28:	f240 80e6 	bls.w	8009cf8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009b2c:	e05d      	b.n	8009bea <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d132      	bne.n	8009ba2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d918      	bls.n	8009b7a <HAL_SPI_Transmit+0x1fa>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d014      	beq.n	8009b7a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6812      	ldr	r2, [r2, #0]
 8009b5a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b60:	1d1a      	adds	r2, r3, #4
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	3b02      	subs	r3, #2
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b78:	e037      	b.n	8009bea <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b7e:	881a      	ldrh	r2, [r3, #0]
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b88:	1c9a      	adds	r2, r3, #2
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ba0:	e023      	b.n	8009bea <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ba2:	f7f6 fc6f 	bl	8000484 <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d803      	bhi.n	8009bba <HAL_SPI_Transmit+0x23a>
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb8:	d102      	bne.n	8009bc0 <HAL_SPI_Transmit+0x240>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d114      	bne.n	8009bea <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fb3d 	bl	800a240 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e0b3      	b.n	8009d52 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d19b      	bne.n	8009b2e <HAL_SPI_Transmit+0x1ae>
 8009bf6:	e086      	b.n	8009d06 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d154      	bne.n	8009cb0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d918      	bls.n	8009c44 <HAL_SPI_Transmit+0x2c4>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c16:	2b40      	cmp	r3, #64	@ 0x40
 8009c18:	d914      	bls.n	8009c44 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6812      	ldr	r2, [r2, #0]
 8009c24:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c2a:	1d1a      	adds	r2, r3, #4
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	3b04      	subs	r3, #4
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c42:	e059      	b.n	8009cf8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d917      	bls.n	8009c80 <HAL_SPI_Transmit+0x300>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d013      	beq.n	8009c80 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c5c:	881a      	ldrh	r2, [r3, #0]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c66:	1c9a      	adds	r2, r3, #2
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	3b02      	subs	r3, #2
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c7e:	e03b      	b.n	8009cf8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	3320      	adds	r3, #32
 8009c8a:	7812      	ldrb	r2, [r2, #0]
 8009c8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009caa:	e025      	b.n	8009cf8 <HAL_SPI_Transmit+0x378>
 8009cac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cb0:	f7f6 fbe8 	bl	8000484 <HAL_GetTick>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d803      	bhi.n	8009cc8 <HAL_SPI_Transmit+0x348>
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc6:	d102      	bne.n	8009cce <HAL_SPI_Transmit+0x34e>
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d114      	bne.n	8009cf8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 fab6 	bl	800a240 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e02c      	b.n	8009d52 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f47f af79 	bne.w	8009bf8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2108      	movs	r1, #8
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fb35 	bl	800a380 <SPI_WaitOnFlagUntilTimeout>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d007      	beq.n	8009d2c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d22:	f043 0220 	orr.w	r2, r3, #32
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fa87 	bl	800a240 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e000      	b.n	8009d52 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009d50:	2300      	movs	r3, #0
  }
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop

08009d5c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b088      	sub	sp, #32
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	603b      	str	r3, [r7, #0]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d70:	095b      	lsrs	r3, r3, #5
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	3301      	adds	r3, #1
 8009d76:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3330      	adds	r3, #48	@ 0x30
 8009d7e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d80:	f7f6 fb80 	bl	8000484 <HAL_GetTick>
 8009d84:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d001      	beq.n	8009d96 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8009d92:	2302      	movs	r3, #2
 8009d94:	e250      	b.n	800a238 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <HAL_SPI_Receive+0x46>
 8009d9c:	88fb      	ldrh	r3, [r7, #6]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e248      	b.n	800a238 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d101      	bne.n	8009db4 <HAL_SPI_Receive+0x58>
 8009db0:	2302      	movs	r3, #2
 8009db2:	e241      	b.n	800a238 <HAL_SPI_Receive+0x4dc>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2204      	movs	r2, #4
 8009dc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	88fa      	ldrh	r2, [r7, #6]
 8009dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	88fa      	ldrh	r2, [r7, #6]
 8009dde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009e0c:	d108      	bne.n	8009e20 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	e009      	b.n	8009e34 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009e32:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	4b95      	ldr	r3, [pc, #596]	@ (800a090 <HAL_SPI_Receive+0x334>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	88f9      	ldrh	r1, [r7, #6]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	6812      	ldr	r2, [r2, #0]
 8009e44:	430b      	orrs	r3, r1
 8009e46:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0201 	orr.w	r2, r2, #1
 8009e56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e60:	d107      	bne.n	8009e72 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	2b0f      	cmp	r3, #15
 8009e78:	d96c      	bls.n	8009f54 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009e7a:	e064      	b.n	8009f46 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d114      	bne.n	8009ebc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009e9c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ea2:	1d1a      	adds	r2, r3, #4
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009eba:	e044      	b.n	8009f46 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	8bfa      	ldrh	r2, [r7, #30]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d919      	bls.n	8009efe <HAL_SPI_Receive+0x1a2>
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d014      	beq.n	8009efe <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009edc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009ede:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ee4:	1d1a      	adds	r2, r3, #4
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009efc:	e023      	b.n	8009f46 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009efe:	f7f6 fac1 	bl	8000484 <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d803      	bhi.n	8009f16 <HAL_SPI_Receive+0x1ba>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f14:	d102      	bne.n	8009f1c <HAL_SPI_Receive+0x1c0>
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d114      	bne.n	8009f46 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 f98f 	bl	800a240 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e178      	b.n	800a238 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d194      	bne.n	8009e7c <HAL_SPI_Receive+0x120>
 8009f52:	e15e      	b.n	800a212 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	2b07      	cmp	r3, #7
 8009f5a:	f240 8153 	bls.w	800a204 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009f5e:	e08f      	b.n	800a080 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	f003 0301 	and.w	r3, r3, #1
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d114      	bne.n	8009fa0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f7a:	69ba      	ldr	r2, [r7, #24]
 8009f7c:	8812      	ldrh	r2, [r2, #0]
 8009f7e:	b292      	uxth	r2, r2
 8009f80:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f86:	1c9a      	adds	r2, r3, #2
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009f9e:	e06f      	b.n	800a080 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	8bfa      	ldrh	r2, [r7, #30]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d924      	bls.n	8009ff8 <HAL_SPI_Receive+0x29c>
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01f      	beq.n	8009ff8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fbc:	69ba      	ldr	r2, [r7, #24]
 8009fbe:	8812      	ldrh	r2, [r2, #0]
 8009fc0:	b292      	uxth	r2, r2
 8009fc2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fc8:	1c9a      	adds	r2, r3, #2
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	8812      	ldrh	r2, [r2, #0]
 8009fd6:	b292      	uxth	r2, r2
 8009fd8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fde:	1c9a      	adds	r2, r3, #2
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b02      	subs	r3, #2
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009ff6:	e043      	b.n	800a080 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	2b01      	cmp	r3, #1
 800a002:	d119      	bne.n	800a038 <HAL_SPI_Receive+0x2dc>
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d014      	beq.n	800a038 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a012:	69ba      	ldr	r2, [r7, #24]
 800a014:	8812      	ldrh	r2, [r2, #0]
 800a016:	b292      	uxth	r2, r2
 800a018:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a01e:	1c9a      	adds	r2, r3, #2
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	3b01      	subs	r3, #1
 800a02e:	b29a      	uxth	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a036:	e023      	b.n	800a080 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a038:	f7f6 fa24 	bl	8000484 <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	429a      	cmp	r2, r3
 800a046:	d803      	bhi.n	800a050 <HAL_SPI_Receive+0x2f4>
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	d102      	bne.n	800a056 <HAL_SPI_Receive+0x2fa>
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d114      	bne.n	800a080 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 f8f2 	bl	800a240 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a062:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a07c:	2303      	movs	r3, #3
 800a07e:	e0db      	b.n	800a238 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a086:	b29b      	uxth	r3, r3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f47f af69 	bne.w	8009f60 <HAL_SPI_Receive+0x204>
 800a08e:	e0c0      	b.n	800a212 <HAL_SPI_Receive+0x4b6>
 800a090:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d117      	bne.n	800a0da <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0b6:	7812      	ldrb	r2, [r2, #0]
 800a0b8:	b2d2      	uxtb	r2, r2
 800a0ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0c0:	1c5a      	adds	r2, r3, #1
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a0d8:	e094      	b.n	800a204 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	8bfa      	ldrh	r2, [r7, #30]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d946      	bls.n	800a176 <HAL_SPI_Receive+0x41a>
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d041      	beq.n	800a176 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0fe:	7812      	ldrb	r2, [r2, #0]
 800a100:	b2d2      	uxtb	r2, r2
 800a102:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a11a:	7812      	ldrb	r2, [r2, #0]
 800a11c:	b2d2      	uxtb	r2, r2
 800a11e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a124:	1c5a      	adds	r2, r3, #1
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a136:	7812      	ldrb	r2, [r2, #0]
 800a138:	b2d2      	uxtb	r2, r2
 800a13a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a140:	1c5a      	adds	r2, r3, #1
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a152:	7812      	ldrb	r2, [r2, #0]
 800a154:	b2d2      	uxtb	r2, r2
 800a156:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a168:	b29b      	uxth	r3, r3
 800a16a:	3b04      	subs	r3, #4
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a174:	e046      	b.n	800a204 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d81c      	bhi.n	800a1bc <HAL_SPI_Receive+0x460>
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d017      	beq.n	800a1bc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a198:	7812      	ldrb	r2, [r2, #0]
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a1ba:	e023      	b.n	800a204 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1bc:	f7f6 f962 	bl	8000484 <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d803      	bhi.n	800a1d4 <HAL_SPI_Receive+0x478>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d2:	d102      	bne.n	800a1da <HAL_SPI_Receive+0x47e>
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d114      	bne.n	800a204 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 f830 	bl	800a240 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	e019      	b.n	800a238 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f47f af41 	bne.w	800a094 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 f814 	bl	800a240 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a236:	2300      	movs	r3, #0
  }
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3720      	adds	r7, #32
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	699a      	ldr	r2, [r3, #24]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f042 0208 	orr.w	r2, r2, #8
 800a25e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	699a      	ldr	r2, [r3, #24]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f042 0210 	orr.w	r2, r2, #16
 800a26e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f022 0201 	bic.w	r2, r2, #1
 800a27e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6919      	ldr	r1, [r3, #16]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	4b3c      	ldr	r3, [pc, #240]	@ (800a37c <SPI_CloseTransfer+0x13c>)
 800a28c:	400b      	ands	r3, r1
 800a28e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689a      	ldr	r2, [r3, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a29e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d014      	beq.n	800a2d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00f      	beq.n	800a2d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	699a      	ldr	r2, [r3, #24]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f042 0220 	orr.w	r2, r2, #32
 800a2d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d014      	beq.n	800a30c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00f      	beq.n	800a30c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2f2:	f043 0204 	orr.w	r2, r3, #4
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	699a      	ldr	r2, [r3, #24]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a30a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00f      	beq.n	800a336 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a31c:	f043 0201 	orr.w	r2, r3, #1
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	699a      	ldr	r2, [r3, #24]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a334:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00f      	beq.n	800a360 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a346:	f043 0208 	orr.w	r2, r3, #8
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699a      	ldr	r2, [r3, #24]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a35e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a370:	bf00      	nop
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	fffffc90 	.word	0xfffffc90

0800a380 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	603b      	str	r3, [r7, #0]
 800a38c:	4613      	mov	r3, r2
 800a38e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a390:	e010      	b.n	800a3b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a392:	f7f6 f877 	bl	8000484 <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d803      	bhi.n	800a3aa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a8:	d102      	bne.n	800a3b0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e00f      	b.n	800a3d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	695a      	ldr	r2, [r3, #20]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	bf0c      	ite	eq
 800a3c4:	2301      	moveq	r3, #1
 800a3c6:	2300      	movne	r3, #0
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d0df      	beq.n	800a392 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3e8:	095b      	lsrs	r3, r3, #5
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	3307      	adds	r3, #7
 800a3fa:	08db      	lsrs	r3, r3, #3
 800a3fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	fb02 f303 	mul.w	r3, r2, r3
}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b082      	sub	sp, #8
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e049      	b.n	800a4b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d106      	bne.n	800a43e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f007 faa9 	bl	8011990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2202      	movs	r2, #2
 800a442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3304      	adds	r3, #4
 800a44e:	4619      	mov	r1, r3
 800a450:	4610      	mov	r0, r2
 800a452:	f000 fd59 	bl	800af08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d001      	beq.n	800a4d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e054      	b.n	800a582 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0201 	orr.w	r2, r2, #1
 800a4ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a26      	ldr	r2, [pc, #152]	@ (800a590 <HAL_TIM_Base_Start_IT+0xd0>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d022      	beq.n	800a540 <HAL_TIM_Base_Start_IT+0x80>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a502:	d01d      	beq.n	800a540 <HAL_TIM_Base_Start_IT+0x80>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a22      	ldr	r2, [pc, #136]	@ (800a594 <HAL_TIM_Base_Start_IT+0xd4>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d018      	beq.n	800a540 <HAL_TIM_Base_Start_IT+0x80>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a21      	ldr	r2, [pc, #132]	@ (800a598 <HAL_TIM_Base_Start_IT+0xd8>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d013      	beq.n	800a540 <HAL_TIM_Base_Start_IT+0x80>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a1f      	ldr	r2, [pc, #124]	@ (800a59c <HAL_TIM_Base_Start_IT+0xdc>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d00e      	beq.n	800a540 <HAL_TIM_Base_Start_IT+0x80>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a1e      	ldr	r2, [pc, #120]	@ (800a5a0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d009      	beq.n	800a540 <HAL_TIM_Base_Start_IT+0x80>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a1c      	ldr	r2, [pc, #112]	@ (800a5a4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d004      	beq.n	800a540 <HAL_TIM_Base_Start_IT+0x80>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d115      	bne.n	800a56c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689a      	ldr	r2, [r3, #8]
 800a546:	4b19      	ldr	r3, [pc, #100]	@ (800a5ac <HAL_TIM_Base_Start_IT+0xec>)
 800a548:	4013      	ands	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2b06      	cmp	r3, #6
 800a550:	d015      	beq.n	800a57e <HAL_TIM_Base_Start_IT+0xbe>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a558:	d011      	beq.n	800a57e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f042 0201 	orr.w	r2, r2, #1
 800a568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a56a:	e008      	b.n	800a57e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f042 0201 	orr.w	r2, r2, #1
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	e000      	b.n	800a580 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a57e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	40010000 	.word	0x40010000
 800a594:	40000400 	.word	0x40000400
 800a598:	40000800 	.word	0x40000800
 800a59c:	40000c00 	.word	0x40000c00
 800a5a0:	40010400 	.word	0x40010400
 800a5a4:	40001800 	.word	0x40001800
 800a5a8:	40014000 	.word	0x40014000
 800a5ac:	00010007 	.word	0x00010007

0800a5b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e049      	b.n	800a656 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f841 	bl	800a65e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2202      	movs	r2, #2
 800a5e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	f000 fc8a 	bl	800af08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
	...

0800a674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d109      	bne.n	800a698 <HAL_TIM_PWM_Start+0x24>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	bf14      	ite	ne
 800a690:	2301      	movne	r3, #1
 800a692:	2300      	moveq	r3, #0
 800a694:	b2db      	uxtb	r3, r3
 800a696:	e03c      	b.n	800a712 <HAL_TIM_PWM_Start+0x9e>
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d109      	bne.n	800a6b2 <HAL_TIM_PWM_Start+0x3e>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	bf14      	ite	ne
 800a6aa:	2301      	movne	r3, #1
 800a6ac:	2300      	moveq	r3, #0
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	e02f      	b.n	800a712 <HAL_TIM_PWM_Start+0x9e>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d109      	bne.n	800a6cc <HAL_TIM_PWM_Start+0x58>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	bf14      	ite	ne
 800a6c4:	2301      	movne	r3, #1
 800a6c6:	2300      	moveq	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	e022      	b.n	800a712 <HAL_TIM_PWM_Start+0x9e>
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	2b0c      	cmp	r3, #12
 800a6d0:	d109      	bne.n	800a6e6 <HAL_TIM_PWM_Start+0x72>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	bf14      	ite	ne
 800a6de:	2301      	movne	r3, #1
 800a6e0:	2300      	moveq	r3, #0
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	e015      	b.n	800a712 <HAL_TIM_PWM_Start+0x9e>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2b10      	cmp	r3, #16
 800a6ea:	d109      	bne.n	800a700 <HAL_TIM_PWM_Start+0x8c>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	bf14      	ite	ne
 800a6f8:	2301      	movne	r3, #1
 800a6fa:	2300      	moveq	r3, #0
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	e008      	b.n	800a712 <HAL_TIM_PWM_Start+0x9e>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b01      	cmp	r3, #1
 800a70a:	bf14      	ite	ne
 800a70c:	2301      	movne	r3, #1
 800a70e:	2300      	moveq	r3, #0
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e0a1      	b.n	800a85e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d104      	bne.n	800a72a <HAL_TIM_PWM_Start+0xb6>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2202      	movs	r2, #2
 800a724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a728:	e023      	b.n	800a772 <HAL_TIM_PWM_Start+0xfe>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b04      	cmp	r3, #4
 800a72e:	d104      	bne.n	800a73a <HAL_TIM_PWM_Start+0xc6>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a738:	e01b      	b.n	800a772 <HAL_TIM_PWM_Start+0xfe>
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	d104      	bne.n	800a74a <HAL_TIM_PWM_Start+0xd6>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2202      	movs	r2, #2
 800a744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a748:	e013      	b.n	800a772 <HAL_TIM_PWM_Start+0xfe>
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2b0c      	cmp	r3, #12
 800a74e:	d104      	bne.n	800a75a <HAL_TIM_PWM_Start+0xe6>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2202      	movs	r2, #2
 800a754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a758:	e00b      	b.n	800a772 <HAL_TIM_PWM_Start+0xfe>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b10      	cmp	r3, #16
 800a75e:	d104      	bne.n	800a76a <HAL_TIM_PWM_Start+0xf6>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a768:	e003      	b.n	800a772 <HAL_TIM_PWM_Start+0xfe>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2202      	movs	r2, #2
 800a76e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2201      	movs	r2, #1
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 ffde 	bl	800b73c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a38      	ldr	r2, [pc, #224]	@ (800a868 <HAL_TIM_PWM_Start+0x1f4>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d013      	beq.n	800a7b2 <HAL_TIM_PWM_Start+0x13e>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a37      	ldr	r2, [pc, #220]	@ (800a86c <HAL_TIM_PWM_Start+0x1f8>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d00e      	beq.n	800a7b2 <HAL_TIM_PWM_Start+0x13e>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a35      	ldr	r2, [pc, #212]	@ (800a870 <HAL_TIM_PWM_Start+0x1fc>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d009      	beq.n	800a7b2 <HAL_TIM_PWM_Start+0x13e>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a34      	ldr	r2, [pc, #208]	@ (800a874 <HAL_TIM_PWM_Start+0x200>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d004      	beq.n	800a7b2 <HAL_TIM_PWM_Start+0x13e>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a32      	ldr	r2, [pc, #200]	@ (800a878 <HAL_TIM_PWM_Start+0x204>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d101      	bne.n	800a7b6 <HAL_TIM_PWM_Start+0x142>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e000      	b.n	800a7b8 <HAL_TIM_PWM_Start+0x144>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d007      	beq.n	800a7cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a25      	ldr	r2, [pc, #148]	@ (800a868 <HAL_TIM_PWM_Start+0x1f4>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d022      	beq.n	800a81c <HAL_TIM_PWM_Start+0x1a8>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7de:	d01d      	beq.n	800a81c <HAL_TIM_PWM_Start+0x1a8>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a25      	ldr	r2, [pc, #148]	@ (800a87c <HAL_TIM_PWM_Start+0x208>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d018      	beq.n	800a81c <HAL_TIM_PWM_Start+0x1a8>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a24      	ldr	r2, [pc, #144]	@ (800a880 <HAL_TIM_PWM_Start+0x20c>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d013      	beq.n	800a81c <HAL_TIM_PWM_Start+0x1a8>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a22      	ldr	r2, [pc, #136]	@ (800a884 <HAL_TIM_PWM_Start+0x210>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d00e      	beq.n	800a81c <HAL_TIM_PWM_Start+0x1a8>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a1a      	ldr	r2, [pc, #104]	@ (800a86c <HAL_TIM_PWM_Start+0x1f8>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d009      	beq.n	800a81c <HAL_TIM_PWM_Start+0x1a8>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a1e      	ldr	r2, [pc, #120]	@ (800a888 <HAL_TIM_PWM_Start+0x214>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d004      	beq.n	800a81c <HAL_TIM_PWM_Start+0x1a8>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a16      	ldr	r2, [pc, #88]	@ (800a870 <HAL_TIM_PWM_Start+0x1fc>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d115      	bne.n	800a848 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	4b1a      	ldr	r3, [pc, #104]	@ (800a88c <HAL_TIM_PWM_Start+0x218>)
 800a824:	4013      	ands	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b06      	cmp	r3, #6
 800a82c:	d015      	beq.n	800a85a <HAL_TIM_PWM_Start+0x1e6>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a834:	d011      	beq.n	800a85a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f042 0201 	orr.w	r2, r2, #1
 800a844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a846:	e008      	b.n	800a85a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f042 0201 	orr.w	r2, r2, #1
 800a856:	601a      	str	r2, [r3, #0]
 800a858:	e000      	b.n	800a85c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a85a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	40010000 	.word	0x40010000
 800a86c:	40010400 	.word	0x40010400
 800a870:	40014000 	.word	0x40014000
 800a874:	40014400 	.word	0x40014400
 800a878:	40014800 	.word	0x40014800
 800a87c:	40000400 	.word	0x40000400
 800a880:	40000800 	.word	0x40000800
 800a884:	40000c00 	.word	0x40000c00
 800a888:	40001800 	.word	0x40001800
 800a88c:	00010007 	.word	0x00010007

0800a890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f003 0302 	and.w	r3, r3, #2
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d020      	beq.n	800a8f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f003 0302 	and.w	r3, r3, #2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d01b      	beq.n	800a8f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f06f 0202 	mvn.w	r2, #2
 800a8c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 faf6 	bl	800aecc <HAL_TIM_IC_CaptureCallback>
 800a8e0:	e005      	b.n	800a8ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fae8 	bl	800aeb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 faf9 	bl	800aee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	f003 0304 	and.w	r3, r3, #4
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d020      	beq.n	800a940 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b00      	cmp	r3, #0
 800a906:	d01b      	beq.n	800a940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f06f 0204 	mvn.w	r2, #4
 800a910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2202      	movs	r2, #2
 800a916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fad0 	bl	800aecc <HAL_TIM_IC_CaptureCallback>
 800a92c:	e005      	b.n	800a93a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fac2 	bl	800aeb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fad3 	bl	800aee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	f003 0308 	and.w	r3, r3, #8
 800a946:	2b00      	cmp	r3, #0
 800a948:	d020      	beq.n	800a98c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f003 0308 	and.w	r3, r3, #8
 800a950:	2b00      	cmp	r3, #0
 800a952:	d01b      	beq.n	800a98c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f06f 0208 	mvn.w	r2, #8
 800a95c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2204      	movs	r2, #4
 800a962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	f003 0303 	and.w	r3, r3, #3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 faaa 	bl	800aecc <HAL_TIM_IC_CaptureCallback>
 800a978:	e005      	b.n	800a986 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fa9c 	bl	800aeb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 faad 	bl	800aee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	f003 0310 	and.w	r3, r3, #16
 800a992:	2b00      	cmp	r3, #0
 800a994:	d020      	beq.n	800a9d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f003 0310 	and.w	r3, r3, #16
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d01b      	beq.n	800a9d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f06f 0210 	mvn.w	r2, #16
 800a9a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2208      	movs	r2, #8
 800a9ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fa84 	bl	800aecc <HAL_TIM_IC_CaptureCallback>
 800a9c4:	e005      	b.n	800a9d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fa76 	bl	800aeb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fa87 	bl	800aee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00c      	beq.n	800a9fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d007      	beq.n	800a9fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f06f 0201 	mvn.w	r2, #1
 800a9f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f006 fb5a 	bl	80110b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d104      	bne.n	800aa10 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00c      	beq.n	800aa2a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d007      	beq.n	800aa2a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aa22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 f887 	bl	800bb38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00c      	beq.n	800aa4e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d007      	beq.n	800aa4e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aa46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 f87f 	bl	800bb4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00c      	beq.n	800aa72 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d007      	beq.n	800aa72 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aa6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fa41 	bl	800aef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f003 0320 	and.w	r3, r3, #32
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00c      	beq.n	800aa96 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f003 0320 	and.w	r3, r3, #32
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d007      	beq.n	800aa96 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f06f 0220 	mvn.w	r2, #32
 800aa8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 f847 	bl	800bb24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa96:	bf00      	nop
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d101      	bne.n	800aabe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aaba:	2302      	movs	r3, #2
 800aabc:	e0ff      	b.n	800acbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b14      	cmp	r3, #20
 800aaca:	f200 80f0 	bhi.w	800acae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aace:	a201      	add	r2, pc, #4	@ (adr r2, 800aad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad4:	0800ab29 	.word	0x0800ab29
 800aad8:	0800acaf 	.word	0x0800acaf
 800aadc:	0800acaf 	.word	0x0800acaf
 800aae0:	0800acaf 	.word	0x0800acaf
 800aae4:	0800ab69 	.word	0x0800ab69
 800aae8:	0800acaf 	.word	0x0800acaf
 800aaec:	0800acaf 	.word	0x0800acaf
 800aaf0:	0800acaf 	.word	0x0800acaf
 800aaf4:	0800abab 	.word	0x0800abab
 800aaf8:	0800acaf 	.word	0x0800acaf
 800aafc:	0800acaf 	.word	0x0800acaf
 800ab00:	0800acaf 	.word	0x0800acaf
 800ab04:	0800abeb 	.word	0x0800abeb
 800ab08:	0800acaf 	.word	0x0800acaf
 800ab0c:	0800acaf 	.word	0x0800acaf
 800ab10:	0800acaf 	.word	0x0800acaf
 800ab14:	0800ac2d 	.word	0x0800ac2d
 800ab18:	0800acaf 	.word	0x0800acaf
 800ab1c:	0800acaf 	.word	0x0800acaf
 800ab20:	0800acaf 	.word	0x0800acaf
 800ab24:	0800ac6d 	.word	0x0800ac6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68b9      	ldr	r1, [r7, #8]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 fa90 	bl	800b054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	699a      	ldr	r2, [r3, #24]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0208 	orr.w	r2, r2, #8
 800ab42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699a      	ldr	r2, [r3, #24]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f022 0204 	bic.w	r2, r2, #4
 800ab52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6999      	ldr	r1, [r3, #24]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	691a      	ldr	r2, [r3, #16]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	619a      	str	r2, [r3, #24]
      break;
 800ab66:	e0a5      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68b9      	ldr	r1, [r7, #8]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fb00 	bl	800b174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	699a      	ldr	r2, [r3, #24]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	699a      	ldr	r2, [r3, #24]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6999      	ldr	r1, [r3, #24]
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	021a      	lsls	r2, r3, #8
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	430a      	orrs	r2, r1
 800aba6:	619a      	str	r2, [r3, #24]
      break;
 800aba8:	e084      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 fb69 	bl	800b288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	69da      	ldr	r2, [r3, #28]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f042 0208 	orr.w	r2, r2, #8
 800abc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69da      	ldr	r2, [r3, #28]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f022 0204 	bic.w	r2, r2, #4
 800abd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	69d9      	ldr	r1, [r3, #28]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	691a      	ldr	r2, [r3, #16]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	61da      	str	r2, [r3, #28]
      break;
 800abe8:	e064      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68b9      	ldr	r1, [r7, #8]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fbd1 	bl	800b398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	69da      	ldr	r2, [r3, #28]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69da      	ldr	r2, [r3, #28]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	69d9      	ldr	r1, [r3, #28]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	021a      	lsls	r2, r3, #8
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	61da      	str	r2, [r3, #28]
      break;
 800ac2a:	e043      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68b9      	ldr	r1, [r7, #8]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 fc1a 	bl	800b46c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f042 0208 	orr.w	r2, r2, #8
 800ac46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f022 0204 	bic.w	r2, r2, #4
 800ac56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	691a      	ldr	r2, [r3, #16]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ac6a:	e023      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68b9      	ldr	r1, [r7, #8]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 fc5e 	bl	800b534 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	021a      	lsls	r2, r3, #8
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	430a      	orrs	r2, r1
 800acaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800acac:	e002      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	75fb      	strb	r3, [r7, #23]
      break;
 800acb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop

0800acc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d101      	bne.n	800ace4 <HAL_TIM_ConfigClockSource+0x1c>
 800ace0:	2302      	movs	r3, #2
 800ace2:	e0dc      	b.n	800ae9e <HAL_TIM_ConfigClockSource+0x1d6>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2202      	movs	r2, #2
 800acf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	4b6a      	ldr	r3, [pc, #424]	@ (800aea8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ad00:	4013      	ands	r3, r2
 800ad02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a64      	ldr	r2, [pc, #400]	@ (800aeac <HAL_TIM_ConfigClockSource+0x1e4>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	f000 80a9 	beq.w	800ae72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad20:	4a62      	ldr	r2, [pc, #392]	@ (800aeac <HAL_TIM_ConfigClockSource+0x1e4>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	f200 80ae 	bhi.w	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad28:	4a61      	ldr	r2, [pc, #388]	@ (800aeb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	f000 80a1 	beq.w	800ae72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad30:	4a5f      	ldr	r2, [pc, #380]	@ (800aeb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	f200 80a6 	bhi.w	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad38:	4a5e      	ldr	r2, [pc, #376]	@ (800aeb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	f000 8099 	beq.w	800ae72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad40:	4a5c      	ldr	r2, [pc, #368]	@ (800aeb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	f200 809e 	bhi.w	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ad4c:	f000 8091 	beq.w	800ae72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ad54:	f200 8096 	bhi.w	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad5c:	f000 8089 	beq.w	800ae72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad64:	f200 808e 	bhi.w	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad6c:	d03e      	beq.n	800adec <HAL_TIM_ConfigClockSource+0x124>
 800ad6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad72:	f200 8087 	bhi.w	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad7a:	f000 8086 	beq.w	800ae8a <HAL_TIM_ConfigClockSource+0x1c2>
 800ad7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad82:	d87f      	bhi.n	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad84:	2b70      	cmp	r3, #112	@ 0x70
 800ad86:	d01a      	beq.n	800adbe <HAL_TIM_ConfigClockSource+0xf6>
 800ad88:	2b70      	cmp	r3, #112	@ 0x70
 800ad8a:	d87b      	bhi.n	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad8c:	2b60      	cmp	r3, #96	@ 0x60
 800ad8e:	d050      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x16a>
 800ad90:	2b60      	cmp	r3, #96	@ 0x60
 800ad92:	d877      	bhi.n	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad94:	2b50      	cmp	r3, #80	@ 0x50
 800ad96:	d03c      	beq.n	800ae12 <HAL_TIM_ConfigClockSource+0x14a>
 800ad98:	2b50      	cmp	r3, #80	@ 0x50
 800ad9a:	d873      	bhi.n	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad9c:	2b40      	cmp	r3, #64	@ 0x40
 800ad9e:	d058      	beq.n	800ae52 <HAL_TIM_ConfigClockSource+0x18a>
 800ada0:	2b40      	cmp	r3, #64	@ 0x40
 800ada2:	d86f      	bhi.n	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ada4:	2b30      	cmp	r3, #48	@ 0x30
 800ada6:	d064      	beq.n	800ae72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ada8:	2b30      	cmp	r3, #48	@ 0x30
 800adaa:	d86b      	bhi.n	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800adac:	2b20      	cmp	r3, #32
 800adae:	d060      	beq.n	800ae72 <HAL_TIM_ConfigClockSource+0x1aa>
 800adb0:	2b20      	cmp	r3, #32
 800adb2:	d867      	bhi.n	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d05c      	beq.n	800ae72 <HAL_TIM_ConfigClockSource+0x1aa>
 800adb8:	2b10      	cmp	r3, #16
 800adba:	d05a      	beq.n	800ae72 <HAL_TIM_ConfigClockSource+0x1aa>
 800adbc:	e062      	b.n	800ae84 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800adce:	f000 fc95 	bl	800b6fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ade0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	609a      	str	r2, [r3, #8]
      break;
 800adea:	e04f      	b.n	800ae8c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800adfc:	f000 fc7e 	bl	800b6fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689a      	ldr	r2, [r3, #8]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae0e:	609a      	str	r2, [r3, #8]
      break;
 800ae10:	e03c      	b.n	800ae8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f000 fbee 	bl	800b600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2150      	movs	r1, #80	@ 0x50
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 fc48 	bl	800b6c0 <TIM_ITRx_SetConfig>
      break;
 800ae30:	e02c      	b.n	800ae8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae3e:	461a      	mov	r2, r3
 800ae40:	f000 fc0d 	bl	800b65e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2160      	movs	r1, #96	@ 0x60
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 fc38 	bl	800b6c0 <TIM_ITRx_SetConfig>
      break;
 800ae50:	e01c      	b.n	800ae8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae5e:	461a      	mov	r2, r3
 800ae60:	f000 fbce 	bl	800b600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2140      	movs	r1, #64	@ 0x40
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 fc28 	bl	800b6c0 <TIM_ITRx_SetConfig>
      break;
 800ae70:	e00c      	b.n	800ae8c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	f000 fc1f 	bl	800b6c0 <TIM_ITRx_SetConfig>
      break;
 800ae82:	e003      	b.n	800ae8c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	73fb      	strb	r3, [r7, #15]
      break;
 800ae88:	e000      	b.n	800ae8c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ae8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	ffceff88 	.word	0xffceff88
 800aeac:	00100040 	.word	0x00100040
 800aeb0:	00100030 	.word	0x00100030
 800aeb4:	00100020 	.word	0x00100020

0800aeb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a46      	ldr	r2, [pc, #280]	@ (800b034 <TIM_Base_SetConfig+0x12c>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d013      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af26:	d00f      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a43      	ldr	r2, [pc, #268]	@ (800b038 <TIM_Base_SetConfig+0x130>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00b      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a42      	ldr	r2, [pc, #264]	@ (800b03c <TIM_Base_SetConfig+0x134>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d007      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a41      	ldr	r2, [pc, #260]	@ (800b040 <TIM_Base_SetConfig+0x138>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d003      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a40      	ldr	r2, [pc, #256]	@ (800b044 <TIM_Base_SetConfig+0x13c>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d108      	bne.n	800af5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a35      	ldr	r2, [pc, #212]	@ (800b034 <TIM_Base_SetConfig+0x12c>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d01f      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af68:	d01b      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a32      	ldr	r2, [pc, #200]	@ (800b038 <TIM_Base_SetConfig+0x130>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d017      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a31      	ldr	r2, [pc, #196]	@ (800b03c <TIM_Base_SetConfig+0x134>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d013      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a30      	ldr	r2, [pc, #192]	@ (800b040 <TIM_Base_SetConfig+0x138>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d00f      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a2f      	ldr	r2, [pc, #188]	@ (800b044 <TIM_Base_SetConfig+0x13c>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d00b      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a2e      	ldr	r2, [pc, #184]	@ (800b048 <TIM_Base_SetConfig+0x140>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d007      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a2d      	ldr	r2, [pc, #180]	@ (800b04c <TIM_Base_SetConfig+0x144>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d003      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a2c      	ldr	r2, [pc, #176]	@ (800b050 <TIM_Base_SetConfig+0x148>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d108      	bne.n	800afb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a16      	ldr	r2, [pc, #88]	@ (800b034 <TIM_Base_SetConfig+0x12c>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d00f      	beq.n	800b000 <TIM_Base_SetConfig+0xf8>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a18      	ldr	r2, [pc, #96]	@ (800b044 <TIM_Base_SetConfig+0x13c>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d00b      	beq.n	800b000 <TIM_Base_SetConfig+0xf8>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a17      	ldr	r2, [pc, #92]	@ (800b048 <TIM_Base_SetConfig+0x140>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d007      	beq.n	800b000 <TIM_Base_SetConfig+0xf8>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a16      	ldr	r2, [pc, #88]	@ (800b04c <TIM_Base_SetConfig+0x144>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d003      	beq.n	800b000 <TIM_Base_SetConfig+0xf8>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a15      	ldr	r2, [pc, #84]	@ (800b050 <TIM_Base_SetConfig+0x148>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d103      	bne.n	800b008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	691a      	ldr	r2, [r3, #16]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	f003 0301 	and.w	r3, r3, #1
 800b016:	2b01      	cmp	r3, #1
 800b018:	d105      	bne.n	800b026 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	f023 0201 	bic.w	r2, r3, #1
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	611a      	str	r2, [r3, #16]
  }
}
 800b026:	bf00      	nop
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	40010000 	.word	0x40010000
 800b038:	40000400 	.word	0x40000400
 800b03c:	40000800 	.word	0x40000800
 800b040:	40000c00 	.word	0x40000c00
 800b044:	40010400 	.word	0x40010400
 800b048:	40014000 	.word	0x40014000
 800b04c:	40014400 	.word	0x40014400
 800b050:	40014800 	.word	0x40014800

0800b054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b054:	b480      	push	{r7}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	f023 0201 	bic.w	r2, r3, #1
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	4b37      	ldr	r3, [pc, #220]	@ (800b15c <TIM_OC1_SetConfig+0x108>)
 800b080:	4013      	ands	r3, r2
 800b082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 0303 	bic.w	r3, r3, #3
 800b08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	4313      	orrs	r3, r2
 800b094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	f023 0302 	bic.w	r3, r3, #2
 800b09c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	697a      	ldr	r2, [r7, #20]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a2d      	ldr	r2, [pc, #180]	@ (800b160 <TIM_OC1_SetConfig+0x10c>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d00f      	beq.n	800b0d0 <TIM_OC1_SetConfig+0x7c>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a2c      	ldr	r2, [pc, #176]	@ (800b164 <TIM_OC1_SetConfig+0x110>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d00b      	beq.n	800b0d0 <TIM_OC1_SetConfig+0x7c>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a2b      	ldr	r2, [pc, #172]	@ (800b168 <TIM_OC1_SetConfig+0x114>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d007      	beq.n	800b0d0 <TIM_OC1_SetConfig+0x7c>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b16c <TIM_OC1_SetConfig+0x118>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d003      	beq.n	800b0d0 <TIM_OC1_SetConfig+0x7c>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a29      	ldr	r2, [pc, #164]	@ (800b170 <TIM_OC1_SetConfig+0x11c>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d10c      	bne.n	800b0ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f023 0308 	bic.w	r3, r3, #8
 800b0d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f023 0304 	bic.w	r3, r3, #4
 800b0e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a1c      	ldr	r2, [pc, #112]	@ (800b160 <TIM_OC1_SetConfig+0x10c>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00f      	beq.n	800b112 <TIM_OC1_SetConfig+0xbe>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b164 <TIM_OC1_SetConfig+0x110>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d00b      	beq.n	800b112 <TIM_OC1_SetConfig+0xbe>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b168 <TIM_OC1_SetConfig+0x114>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d007      	beq.n	800b112 <TIM_OC1_SetConfig+0xbe>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a19      	ldr	r2, [pc, #100]	@ (800b16c <TIM_OC1_SetConfig+0x118>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d003      	beq.n	800b112 <TIM_OC1_SetConfig+0xbe>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a18      	ldr	r2, [pc, #96]	@ (800b170 <TIM_OC1_SetConfig+0x11c>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d111      	bne.n	800b136 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	4313      	orrs	r3, r2
 800b134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	685a      	ldr	r2, [r3, #4]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	621a      	str	r2, [r3, #32]
}
 800b150:	bf00      	nop
 800b152:	371c      	adds	r7, #28
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	fffeff8f 	.word	0xfffeff8f
 800b160:	40010000 	.word	0x40010000
 800b164:	40010400 	.word	0x40010400
 800b168:	40014000 	.word	0x40014000
 800b16c:	40014400 	.word	0x40014400
 800b170:	40014800 	.word	0x40014800

0800b174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a1b      	ldr	r3, [r3, #32]
 800b188:	f023 0210 	bic.w	r2, r3, #16
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	4b34      	ldr	r3, [pc, #208]	@ (800b270 <TIM_OC2_SetConfig+0xfc>)
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	021b      	lsls	r3, r3, #8
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	f023 0320 	bic.w	r3, r3, #32
 800b1be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	011b      	lsls	r3, r3, #4
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a29      	ldr	r2, [pc, #164]	@ (800b274 <TIM_OC2_SetConfig+0x100>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d003      	beq.n	800b1dc <TIM_OC2_SetConfig+0x68>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a28      	ldr	r2, [pc, #160]	@ (800b278 <TIM_OC2_SetConfig+0x104>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d10d      	bne.n	800b1f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	011b      	lsls	r3, r3, #4
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a1e      	ldr	r2, [pc, #120]	@ (800b274 <TIM_OC2_SetConfig+0x100>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d00f      	beq.n	800b220 <TIM_OC2_SetConfig+0xac>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a1d      	ldr	r2, [pc, #116]	@ (800b278 <TIM_OC2_SetConfig+0x104>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d00b      	beq.n	800b220 <TIM_OC2_SetConfig+0xac>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a1c      	ldr	r2, [pc, #112]	@ (800b27c <TIM_OC2_SetConfig+0x108>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d007      	beq.n	800b220 <TIM_OC2_SetConfig+0xac>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a1b      	ldr	r2, [pc, #108]	@ (800b280 <TIM_OC2_SetConfig+0x10c>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d003      	beq.n	800b220 <TIM_OC2_SetConfig+0xac>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a1a      	ldr	r2, [pc, #104]	@ (800b284 <TIM_OC2_SetConfig+0x110>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d113      	bne.n	800b248 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b22e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	695b      	ldr	r3, [r3, #20]
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	4313      	orrs	r3, r2
 800b23a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	693a      	ldr	r2, [r7, #16]
 800b244:	4313      	orrs	r3, r2
 800b246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	621a      	str	r2, [r3, #32]
}
 800b262:	bf00      	nop
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	feff8fff 	.word	0xfeff8fff
 800b274:	40010000 	.word	0x40010000
 800b278:	40010400 	.word	0x40010400
 800b27c:	40014000 	.word	0x40014000
 800b280:	40014400 	.word	0x40014400
 800b284:	40014800 	.word	0x40014800

0800b288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b288:	b480      	push	{r7}
 800b28a:	b087      	sub	sp, #28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	4b33      	ldr	r3, [pc, #204]	@ (800b380 <TIM_OC3_SetConfig+0xf8>)
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f023 0303 	bic.w	r3, r3, #3
 800b2be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b2d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	021b      	lsls	r3, r3, #8
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a28      	ldr	r2, [pc, #160]	@ (800b384 <TIM_OC3_SetConfig+0xfc>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d003      	beq.n	800b2ee <TIM_OC3_SetConfig+0x66>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a27      	ldr	r2, [pc, #156]	@ (800b388 <TIM_OC3_SetConfig+0x100>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d10d      	bne.n	800b30a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b2f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	021b      	lsls	r3, r3, #8
 800b2fc:	697a      	ldr	r2, [r7, #20]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a1d      	ldr	r2, [pc, #116]	@ (800b384 <TIM_OC3_SetConfig+0xfc>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d00f      	beq.n	800b332 <TIM_OC3_SetConfig+0xaa>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a1c      	ldr	r2, [pc, #112]	@ (800b388 <TIM_OC3_SetConfig+0x100>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d00b      	beq.n	800b332 <TIM_OC3_SetConfig+0xaa>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a1b      	ldr	r2, [pc, #108]	@ (800b38c <TIM_OC3_SetConfig+0x104>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d007      	beq.n	800b332 <TIM_OC3_SetConfig+0xaa>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a1a      	ldr	r2, [pc, #104]	@ (800b390 <TIM_OC3_SetConfig+0x108>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d003      	beq.n	800b332 <TIM_OC3_SetConfig+0xaa>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a19      	ldr	r2, [pc, #100]	@ (800b394 <TIM_OC3_SetConfig+0x10c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d113      	bne.n	800b35a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	011b      	lsls	r3, r3, #4
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	011b      	lsls	r3, r3, #4
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	4313      	orrs	r3, r2
 800b358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	693a      	ldr	r2, [r7, #16]
 800b35e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	621a      	str	r2, [r3, #32]
}
 800b374:	bf00      	nop
 800b376:	371c      	adds	r7, #28
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	fffeff8f 	.word	0xfffeff8f
 800b384:	40010000 	.word	0x40010000
 800b388:	40010400 	.word	0x40010400
 800b38c:	40014000 	.word	0x40014000
 800b390:	40014400 	.word	0x40014400
 800b394:	40014800 	.word	0x40014800

0800b398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b398:	b480      	push	{r7}
 800b39a:	b087      	sub	sp, #28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	4b24      	ldr	r3, [pc, #144]	@ (800b454 <TIM_OC4_SetConfig+0xbc>)
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	021b      	lsls	r3, r3, #8
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b3e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	031b      	lsls	r3, r3, #12
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a19      	ldr	r2, [pc, #100]	@ (800b458 <TIM_OC4_SetConfig+0xc0>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d00f      	beq.n	800b418 <TIM_OC4_SetConfig+0x80>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a18      	ldr	r2, [pc, #96]	@ (800b45c <TIM_OC4_SetConfig+0xc4>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d00b      	beq.n	800b418 <TIM_OC4_SetConfig+0x80>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a17      	ldr	r2, [pc, #92]	@ (800b460 <TIM_OC4_SetConfig+0xc8>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d007      	beq.n	800b418 <TIM_OC4_SetConfig+0x80>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a16      	ldr	r2, [pc, #88]	@ (800b464 <TIM_OC4_SetConfig+0xcc>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d003      	beq.n	800b418 <TIM_OC4_SetConfig+0x80>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a15      	ldr	r2, [pc, #84]	@ (800b468 <TIM_OC4_SetConfig+0xd0>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d109      	bne.n	800b42c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b41e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	019b      	lsls	r3, r3, #6
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	4313      	orrs	r3, r2
 800b42a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	621a      	str	r2, [r3, #32]
}
 800b446:	bf00      	nop
 800b448:	371c      	adds	r7, #28
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	feff8fff 	.word	0xfeff8fff
 800b458:	40010000 	.word	0x40010000
 800b45c:	40010400 	.word	0x40010400
 800b460:	40014000 	.word	0x40014000
 800b464:	40014400 	.word	0x40014400
 800b468:	40014800 	.word	0x40014800

0800b46c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b087      	sub	sp, #28
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a1b      	ldr	r3, [r3, #32]
 800b480:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	4b21      	ldr	r3, [pc, #132]	@ (800b51c <TIM_OC5_SetConfig+0xb0>)
 800b498:	4013      	ands	r3, r2
 800b49a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b4ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	041b      	lsls	r3, r3, #16
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a18      	ldr	r2, [pc, #96]	@ (800b520 <TIM_OC5_SetConfig+0xb4>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d00f      	beq.n	800b4e2 <TIM_OC5_SetConfig+0x76>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a17      	ldr	r2, [pc, #92]	@ (800b524 <TIM_OC5_SetConfig+0xb8>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d00b      	beq.n	800b4e2 <TIM_OC5_SetConfig+0x76>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a16      	ldr	r2, [pc, #88]	@ (800b528 <TIM_OC5_SetConfig+0xbc>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d007      	beq.n	800b4e2 <TIM_OC5_SetConfig+0x76>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a15      	ldr	r2, [pc, #84]	@ (800b52c <TIM_OC5_SetConfig+0xc0>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d003      	beq.n	800b4e2 <TIM_OC5_SetConfig+0x76>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a14      	ldr	r2, [pc, #80]	@ (800b530 <TIM_OC5_SetConfig+0xc4>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d109      	bne.n	800b4f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	021b      	lsls	r3, r3, #8
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	621a      	str	r2, [r3, #32]
}
 800b510:	bf00      	nop
 800b512:	371c      	adds	r7, #28
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	fffeff8f 	.word	0xfffeff8f
 800b520:	40010000 	.word	0x40010000
 800b524:	40010400 	.word	0x40010400
 800b528:	40014000 	.word	0x40014000
 800b52c:	40014400 	.word	0x40014400
 800b530:	40014800 	.word	0x40014800

0800b534 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b534:	b480      	push	{r7}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a1b      	ldr	r3, [r3, #32]
 800b542:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a1b      	ldr	r3, [r3, #32]
 800b548:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	4b22      	ldr	r3, [pc, #136]	@ (800b5e8 <TIM_OC6_SetConfig+0xb4>)
 800b560:	4013      	ands	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	021b      	lsls	r3, r3, #8
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	051b      	lsls	r3, r3, #20
 800b57e:	693a      	ldr	r2, [r7, #16]
 800b580:	4313      	orrs	r3, r2
 800b582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a19      	ldr	r2, [pc, #100]	@ (800b5ec <TIM_OC6_SetConfig+0xb8>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d00f      	beq.n	800b5ac <TIM_OC6_SetConfig+0x78>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a18      	ldr	r2, [pc, #96]	@ (800b5f0 <TIM_OC6_SetConfig+0xbc>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d00b      	beq.n	800b5ac <TIM_OC6_SetConfig+0x78>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a17      	ldr	r2, [pc, #92]	@ (800b5f4 <TIM_OC6_SetConfig+0xc0>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d007      	beq.n	800b5ac <TIM_OC6_SetConfig+0x78>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a16      	ldr	r2, [pc, #88]	@ (800b5f8 <TIM_OC6_SetConfig+0xc4>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d003      	beq.n	800b5ac <TIM_OC6_SetConfig+0x78>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a15      	ldr	r2, [pc, #84]	@ (800b5fc <TIM_OC6_SetConfig+0xc8>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d109      	bne.n	800b5c0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	695b      	ldr	r3, [r3, #20]
 800b5b8:	029b      	lsls	r3, r3, #10
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	621a      	str	r2, [r3, #32]
}
 800b5da:	bf00      	nop
 800b5dc:	371c      	adds	r7, #28
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	feff8fff 	.word	0xfeff8fff
 800b5ec:	40010000 	.word	0x40010000
 800b5f0:	40010400 	.word	0x40010400
 800b5f4:	40014000 	.word	0x40014000
 800b5f8:	40014400 	.word	0x40014400
 800b5fc:	40014800 	.word	0x40014800

0800b600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6a1b      	ldr	r3, [r3, #32]
 800b616:	f023 0201 	bic.w	r2, r3, #1
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b62a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	011b      	lsls	r3, r3, #4
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	4313      	orrs	r3, r2
 800b634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f023 030a 	bic.w	r3, r3, #10
 800b63c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	4313      	orrs	r3, r2
 800b644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	621a      	str	r2, [r3, #32]
}
 800b652:	bf00      	nop
 800b654:	371c      	adds	r7, #28
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr

0800b65e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b65e:	b480      	push	{r7}
 800b660:	b087      	sub	sp, #28
 800b662:	af00      	add	r7, sp, #0
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6a1b      	ldr	r3, [r3, #32]
 800b674:	f023 0210 	bic.w	r2, r3, #16
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	699b      	ldr	r3, [r3, #24]
 800b680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	031b      	lsls	r3, r3, #12
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	4313      	orrs	r3, r2
 800b692:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b69a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	011b      	lsls	r3, r3, #4
 800b6a0:	697a      	ldr	r2, [r7, #20]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	621a      	str	r2, [r3, #32]
}
 800b6b2:	bf00      	nop
 800b6b4:	371c      	adds	r7, #28
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
	...

0800b6c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	4b09      	ldr	r3, [pc, #36]	@ (800b6f8 <TIM_ITRx_SetConfig+0x38>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	f043 0307 	orr.w	r3, r3, #7
 800b6e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	609a      	str	r2, [r3, #8]
}
 800b6ea:	bf00      	nop
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	ffcfff8f 	.word	0xffcfff8f

0800b6fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b087      	sub	sp, #28
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
 800b708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	021a      	lsls	r2, r3, #8
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	431a      	orrs	r2, r3
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	4313      	orrs	r3, r2
 800b724:	697a      	ldr	r2, [r7, #20]
 800b726:	4313      	orrs	r3, r2
 800b728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	609a      	str	r2, [r3, #8]
}
 800b730:	bf00      	nop
 800b732:	371c      	adds	r7, #28
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b087      	sub	sp, #28
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f003 031f 	and.w	r3, r3, #31
 800b74e:	2201      	movs	r2, #1
 800b750:	fa02 f303 	lsl.w	r3, r2, r3
 800b754:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6a1a      	ldr	r2, [r3, #32]
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	43db      	mvns	r3, r3
 800b75e:	401a      	ands	r2, r3
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6a1a      	ldr	r2, [r3, #32]
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	f003 031f 	and.w	r3, r3, #31
 800b76e:	6879      	ldr	r1, [r7, #4]
 800b770:	fa01 f303 	lsl.w	r3, r1, r3
 800b774:	431a      	orrs	r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	621a      	str	r2, [r3, #32]
}
 800b77a:	bf00      	nop
 800b77c:	371c      	adds	r7, #28
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
	...

0800b788 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d109      	bne.n	800b7ac <HAL_TIMEx_PWMN_Start+0x24>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	bf14      	ite	ne
 800b7a4:	2301      	movne	r3, #1
 800b7a6:	2300      	moveq	r3, #0
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	e022      	b.n	800b7f2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	2b04      	cmp	r3, #4
 800b7b0:	d109      	bne.n	800b7c6 <HAL_TIMEx_PWMN_Start+0x3e>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	bf14      	ite	ne
 800b7be:	2301      	movne	r3, #1
 800b7c0:	2300      	moveq	r3, #0
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	e015      	b.n	800b7f2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b08      	cmp	r3, #8
 800b7ca:	d109      	bne.n	800b7e0 <HAL_TIMEx_PWMN_Start+0x58>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	bf14      	ite	ne
 800b7d8:	2301      	movne	r3, #1
 800b7da:	2300      	moveq	r3, #0
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	e008      	b.n	800b7f2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	bf14      	ite	ne
 800b7ec:	2301      	movne	r3, #1
 800b7ee:	2300      	moveq	r3, #0
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e073      	b.n	800b8e2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d104      	bne.n	800b80a <HAL_TIMEx_PWMN_Start+0x82>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2202      	movs	r2, #2
 800b804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b808:	e013      	b.n	800b832 <HAL_TIMEx_PWMN_Start+0xaa>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b04      	cmp	r3, #4
 800b80e:	d104      	bne.n	800b81a <HAL_TIMEx_PWMN_Start+0x92>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2202      	movs	r2, #2
 800b814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b818:	e00b      	b.n	800b832 <HAL_TIMEx_PWMN_Start+0xaa>
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2b08      	cmp	r3, #8
 800b81e:	d104      	bne.n	800b82a <HAL_TIMEx_PWMN_Start+0xa2>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2202      	movs	r2, #2
 800b824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b828:	e003      	b.n	800b832 <HAL_TIMEx_PWMN_Start+0xaa>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2202      	movs	r2, #2
 800b82e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2204      	movs	r2, #4
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 f990 	bl	800bb60 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b84e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a25      	ldr	r2, [pc, #148]	@ (800b8ec <HAL_TIMEx_PWMN_Start+0x164>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d022      	beq.n	800b8a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b862:	d01d      	beq.n	800b8a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a21      	ldr	r2, [pc, #132]	@ (800b8f0 <HAL_TIMEx_PWMN_Start+0x168>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d018      	beq.n	800b8a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a20      	ldr	r2, [pc, #128]	@ (800b8f4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d013      	beq.n	800b8a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a1e      	ldr	r2, [pc, #120]	@ (800b8f8 <HAL_TIMEx_PWMN_Start+0x170>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d00e      	beq.n	800b8a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a1d      	ldr	r2, [pc, #116]	@ (800b8fc <HAL_TIMEx_PWMN_Start+0x174>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d009      	beq.n	800b8a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a1b      	ldr	r2, [pc, #108]	@ (800b900 <HAL_TIMEx_PWMN_Start+0x178>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d004      	beq.n	800b8a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a1a      	ldr	r2, [pc, #104]	@ (800b904 <HAL_TIMEx_PWMN_Start+0x17c>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d115      	bne.n	800b8cc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	689a      	ldr	r2, [r3, #8]
 800b8a6:	4b18      	ldr	r3, [pc, #96]	@ (800b908 <HAL_TIMEx_PWMN_Start+0x180>)
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b06      	cmp	r3, #6
 800b8b0:	d015      	beq.n	800b8de <HAL_TIMEx_PWMN_Start+0x156>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8b8:	d011      	beq.n	800b8de <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f042 0201 	orr.w	r2, r2, #1
 800b8c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8ca:	e008      	b.n	800b8de <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f042 0201 	orr.w	r2, r2, #1
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	e000      	b.n	800b8e0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	40010000 	.word	0x40010000
 800b8f0:	40000400 	.word	0x40000400
 800b8f4:	40000800 	.word	0x40000800
 800b8f8:	40000c00 	.word	0x40000c00
 800b8fc:	40010400 	.word	0x40010400
 800b900:	40001800 	.word	0x40001800
 800b904:	40014000 	.word	0x40014000
 800b908:	00010007 	.word	0x00010007

0800b90c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d101      	bne.n	800b924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b920:	2302      	movs	r3, #2
 800b922:	e06d      	b.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2202      	movs	r2, #2
 800b930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a30      	ldr	r2, [pc, #192]	@ (800ba0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d004      	beq.n	800b958 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a2f      	ldr	r2, [pc, #188]	@ (800ba10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d108      	bne.n	800b96a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b95e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	4313      	orrs	r3, r2
 800b968:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b970:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	4313      	orrs	r3, r2
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a20      	ldr	r2, [pc, #128]	@ (800ba0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d022      	beq.n	800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b996:	d01d      	beq.n	800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a1d      	ldr	r2, [pc, #116]	@ (800ba14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d018      	beq.n	800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a1c      	ldr	r2, [pc, #112]	@ (800ba18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d013      	beq.n	800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a1a      	ldr	r2, [pc, #104]	@ (800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d00e      	beq.n	800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a15      	ldr	r2, [pc, #84]	@ (800ba10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d009      	beq.n	800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a16      	ldr	r2, [pc, #88]	@ (800ba20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d004      	beq.n	800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a15      	ldr	r2, [pc, #84]	@ (800ba24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d10c      	bne.n	800b9ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr
 800ba0c:	40010000 	.word	0x40010000
 800ba10:	40010400 	.word	0x40010400
 800ba14:	40000400 	.word	0x40000400
 800ba18:	40000800 	.word	0x40000800
 800ba1c:	40000c00 	.word	0x40000c00
 800ba20:	40001800 	.word	0x40001800
 800ba24:	40014000 	.word	0x40014000

0800ba28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba32:	2300      	movs	r3, #0
 800ba34:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d101      	bne.n	800ba44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba40:	2302      	movs	r3, #2
 800ba42:	e065      	b.n	800bb10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baaa:	4313      	orrs	r3, r2
 800baac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	699b      	ldr	r3, [r3, #24]
 800bab8:	041b      	lsls	r3, r3, #16
 800baba:	4313      	orrs	r3, r2
 800babc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a16      	ldr	r2, [pc, #88]	@ (800bb1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d004      	beq.n	800bad2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a14      	ldr	r2, [pc, #80]	@ (800bb20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d115      	bne.n	800bafe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800badc:	051b      	lsls	r3, r3, #20
 800bade:	4313      	orrs	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	69db      	ldr	r3, [r3, #28]
 800baec:	4313      	orrs	r3, r2
 800baee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr
 800bb1c:	40010000 	.word	0x40010000
 800bb20:	40010400 	.word	0x40010400

0800bb24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b087      	sub	sp, #28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	f003 030f 	and.w	r3, r3, #15
 800bb72:	2204      	movs	r2, #4
 800bb74:	fa02 f303 	lsl.w	r3, r2, r3
 800bb78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6a1a      	ldr	r2, [r3, #32]
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	43db      	mvns	r3, r3
 800bb82:	401a      	ands	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6a1a      	ldr	r2, [r3, #32]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	f003 030f 	and.w	r3, r3, #15
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	fa01 f303 	lsl.w	r3, r1, r3
 800bb98:	431a      	orrs	r2, r3
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	621a      	str	r2, [r3, #32]
}
 800bb9e:	bf00      	nop
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
	...

0800bbac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bbac:	b084      	sub	sp, #16
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b084      	sub	sp, #16
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	f107 001c 	add.w	r0, r7, #28
 800bbba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bbbe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d121      	bne.n	800bc0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68da      	ldr	r2, [r3, #12]
 800bbd6:	4b2c      	ldr	r3, [pc, #176]	@ (800bc88 <USB_CoreInit+0xdc>)
 800bbd8:	4013      	ands	r3, r2
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	68db      	ldr	r3, [r3, #12]
 800bbe2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bbea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d105      	bne.n	800bbfe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f001 faf6 	bl	800d1f0 <USB_CoreReset>
 800bc04:	4603      	mov	r3, r0
 800bc06:	73fb      	strb	r3, [r7, #15]
 800bc08:	e01b      	b.n	800bc42 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f001 faea 	bl	800d1f0 <USB_CoreReset>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bc20:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d106      	bne.n	800bc36 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	639a      	str	r2, [r3, #56]	@ 0x38
 800bc34:	e005      	b.n	800bc42 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bc42:	7fbb      	ldrb	r3, [r7, #30]
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d116      	bne.n	800bc76 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bc56:	4b0d      	ldr	r3, [pc, #52]	@ (800bc8c <USB_CoreInit+0xe0>)
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	f043 0206 	orr.w	r2, r3, #6
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	f043 0220 	orr.w	r2, r3, #32
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc82:	b004      	add	sp, #16
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	ffbdffbf 	.word	0xffbdffbf
 800bc8c:	03ee0000 	.word	0x03ee0000

0800bc90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d165      	bne.n	800bd70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	4a41      	ldr	r2, [pc, #260]	@ (800bdac <USB_SetTurnaroundTime+0x11c>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d906      	bls.n	800bcba <USB_SetTurnaroundTime+0x2a>
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	4a40      	ldr	r2, [pc, #256]	@ (800bdb0 <USB_SetTurnaroundTime+0x120>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d202      	bcs.n	800bcba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bcb4:	230f      	movs	r3, #15
 800bcb6:	617b      	str	r3, [r7, #20]
 800bcb8:	e062      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	4a3c      	ldr	r2, [pc, #240]	@ (800bdb0 <USB_SetTurnaroundTime+0x120>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d306      	bcc.n	800bcd0 <USB_SetTurnaroundTime+0x40>
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	4a3b      	ldr	r2, [pc, #236]	@ (800bdb4 <USB_SetTurnaroundTime+0x124>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d202      	bcs.n	800bcd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bcca:	230e      	movs	r3, #14
 800bccc:	617b      	str	r3, [r7, #20]
 800bcce:	e057      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	4a38      	ldr	r2, [pc, #224]	@ (800bdb4 <USB_SetTurnaroundTime+0x124>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d306      	bcc.n	800bce6 <USB_SetTurnaroundTime+0x56>
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	4a37      	ldr	r2, [pc, #220]	@ (800bdb8 <USB_SetTurnaroundTime+0x128>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d202      	bcs.n	800bce6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bce0:	230d      	movs	r3, #13
 800bce2:	617b      	str	r3, [r7, #20]
 800bce4:	e04c      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	4a33      	ldr	r2, [pc, #204]	@ (800bdb8 <USB_SetTurnaroundTime+0x128>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d306      	bcc.n	800bcfc <USB_SetTurnaroundTime+0x6c>
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	4a32      	ldr	r2, [pc, #200]	@ (800bdbc <USB_SetTurnaroundTime+0x12c>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d802      	bhi.n	800bcfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bcf6:	230c      	movs	r3, #12
 800bcf8:	617b      	str	r3, [r7, #20]
 800bcfa:	e041      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	4a2f      	ldr	r2, [pc, #188]	@ (800bdbc <USB_SetTurnaroundTime+0x12c>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d906      	bls.n	800bd12 <USB_SetTurnaroundTime+0x82>
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	4a2e      	ldr	r2, [pc, #184]	@ (800bdc0 <USB_SetTurnaroundTime+0x130>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d802      	bhi.n	800bd12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bd0c:	230b      	movs	r3, #11
 800bd0e:	617b      	str	r3, [r7, #20]
 800bd10:	e036      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	4a2a      	ldr	r2, [pc, #168]	@ (800bdc0 <USB_SetTurnaroundTime+0x130>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d906      	bls.n	800bd28 <USB_SetTurnaroundTime+0x98>
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	4a29      	ldr	r2, [pc, #164]	@ (800bdc4 <USB_SetTurnaroundTime+0x134>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d802      	bhi.n	800bd28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bd22:	230a      	movs	r3, #10
 800bd24:	617b      	str	r3, [r7, #20]
 800bd26:	e02b      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	4a26      	ldr	r2, [pc, #152]	@ (800bdc4 <USB_SetTurnaroundTime+0x134>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d906      	bls.n	800bd3e <USB_SetTurnaroundTime+0xae>
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	4a25      	ldr	r2, [pc, #148]	@ (800bdc8 <USB_SetTurnaroundTime+0x138>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d202      	bcs.n	800bd3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bd38:	2309      	movs	r3, #9
 800bd3a:	617b      	str	r3, [r7, #20]
 800bd3c:	e020      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	4a21      	ldr	r2, [pc, #132]	@ (800bdc8 <USB_SetTurnaroundTime+0x138>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d306      	bcc.n	800bd54 <USB_SetTurnaroundTime+0xc4>
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	4a20      	ldr	r2, [pc, #128]	@ (800bdcc <USB_SetTurnaroundTime+0x13c>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d802      	bhi.n	800bd54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bd4e:	2308      	movs	r3, #8
 800bd50:	617b      	str	r3, [r7, #20]
 800bd52:	e015      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	4a1d      	ldr	r2, [pc, #116]	@ (800bdcc <USB_SetTurnaroundTime+0x13c>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d906      	bls.n	800bd6a <USB_SetTurnaroundTime+0xda>
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	4a1c      	ldr	r2, [pc, #112]	@ (800bdd0 <USB_SetTurnaroundTime+0x140>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d202      	bcs.n	800bd6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bd64:	2307      	movs	r3, #7
 800bd66:	617b      	str	r3, [r7, #20]
 800bd68:	e00a      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bd6a:	2306      	movs	r3, #6
 800bd6c:	617b      	str	r3, [r7, #20]
 800bd6e:	e007      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bd70:	79fb      	ldrb	r3, [r7, #7]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d102      	bne.n	800bd7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bd76:	2309      	movs	r3, #9
 800bd78:	617b      	str	r3, [r7, #20]
 800bd7a:	e001      	b.n	800bd80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bd7c:	2309      	movs	r3, #9
 800bd7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	68da      	ldr	r2, [r3, #12]
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	029b      	lsls	r3, r3, #10
 800bd94:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800bd98:	431a      	orrs	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	371c      	adds	r7, #28
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	00d8acbf 	.word	0x00d8acbf
 800bdb0:	00e4e1c0 	.word	0x00e4e1c0
 800bdb4:	00f42400 	.word	0x00f42400
 800bdb8:	01067380 	.word	0x01067380
 800bdbc:	011a499f 	.word	0x011a499f
 800bdc0:	01312cff 	.word	0x01312cff
 800bdc4:	014ca43f 	.word	0x014ca43f
 800bdc8:	016e3600 	.word	0x016e3600
 800bdcc:	01a6ab1f 	.word	0x01a6ab1f
 800bdd0:	01e84800 	.word	0x01e84800

0800bdd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	f043 0201 	orr.w	r2, r3, #1
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	f023 0201 	bic.w	r2, r3, #1
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	460b      	mov	r3, r1
 800be22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800be24:	2300      	movs	r3, #0
 800be26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d115      	bne.n	800be66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800be46:	200a      	movs	r0, #10
 800be48:	f7f4 fb28 	bl	800049c <HAL_Delay>
      ms += 10U;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	330a      	adds	r3, #10
 800be50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f001 f93b 	bl	800d0ce <USB_GetMode>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d01e      	beq.n	800be9c <USB_SetCurrentMode+0x84>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2bc7      	cmp	r3, #199	@ 0xc7
 800be62:	d9f0      	bls.n	800be46 <USB_SetCurrentMode+0x2e>
 800be64:	e01a      	b.n	800be9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800be66:	78fb      	ldrb	r3, [r7, #3]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d115      	bne.n	800be98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800be78:	200a      	movs	r0, #10
 800be7a:	f7f4 fb0f 	bl	800049c <HAL_Delay>
      ms += 10U;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	330a      	adds	r3, #10
 800be82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f001 f922 	bl	800d0ce <USB_GetMode>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d005      	beq.n	800be9c <USB_SetCurrentMode+0x84>
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2bc7      	cmp	r3, #199	@ 0xc7
 800be94:	d9f0      	bls.n	800be78 <USB_SetCurrentMode+0x60>
 800be96:	e001      	b.n	800be9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	e005      	b.n	800bea8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2bc8      	cmp	r3, #200	@ 0xc8
 800bea0:	d101      	bne.n	800bea6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	e000      	b.n	800bea8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800beb0:	b084      	sub	sp, #16
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b086      	sub	sp, #24
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800beca:	2300      	movs	r3, #0
 800becc:	613b      	str	r3, [r7, #16]
 800bece:	e009      	b.n	800bee4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	3340      	adds	r3, #64	@ 0x40
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	2200      	movs	r2, #0
 800bedc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	3301      	adds	r3, #1
 800bee2:	613b      	str	r3, [r7, #16]
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2b0e      	cmp	r3, #14
 800bee8:	d9f2      	bls.n	800bed0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800beea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d11c      	bne.n	800bf2c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf00:	f043 0302 	orr.w	r3, r3, #2
 800bf04:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf0a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	601a      	str	r2, [r3, #0]
 800bf2a:	e005      	b.n	800bf38 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf30:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf3e:	461a      	mov	r2, r3
 800bf40:	2300      	movs	r3, #0
 800bf42:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf44:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d10d      	bne.n	800bf68 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bf4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d104      	bne.n	800bf5e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bf54:	2100      	movs	r1, #0
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 f968 	bl	800c22c <USB_SetDevSpeed>
 800bf5c:	e008      	b.n	800bf70 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bf5e:	2101      	movs	r1, #1
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f963 	bl	800c22c <USB_SetDevSpeed>
 800bf66:	e003      	b.n	800bf70 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bf68:	2103      	movs	r1, #3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 f95e 	bl	800c22c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bf70:	2110      	movs	r1, #16
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f8fa 	bl	800c16c <USB_FlushTxFifo>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f924 	bl	800c1d0 <USB_FlushRxFifo>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d001      	beq.n	800bf92 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf98:	461a      	mov	r2, r3
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	613b      	str	r3, [r7, #16]
 800bfba:	e043      	b.n	800c044 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	015a      	lsls	r2, r3, #5
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bfce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bfd2:	d118      	bne.n	800c006 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10a      	bne.n	800bff0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	015a      	lsls	r2, r3, #5
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bfec:	6013      	str	r3, [r2, #0]
 800bfee:	e013      	b.n	800c018 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	015a      	lsls	r2, r3, #5
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	4413      	add	r3, r2
 800bff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bffc:	461a      	mov	r2, r3
 800bffe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c002:	6013      	str	r3, [r2, #0]
 800c004:	e008      	b.n	800c018 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	015a      	lsls	r2, r3, #5
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	4413      	add	r3, r2
 800c00e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c012:	461a      	mov	r2, r3
 800c014:	2300      	movs	r3, #0
 800c016:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	015a      	lsls	r2, r3, #5
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	4413      	add	r3, r2
 800c020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c024:	461a      	mov	r2, r3
 800c026:	2300      	movs	r3, #0
 800c028:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	015a      	lsls	r2, r3, #5
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4413      	add	r3, r2
 800c032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c036:	461a      	mov	r2, r3
 800c038:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c03c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	3301      	adds	r3, #1
 800c042:	613b      	str	r3, [r7, #16]
 800c044:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c048:	461a      	mov	r2, r3
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d3b5      	bcc.n	800bfbc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c050:	2300      	movs	r3, #0
 800c052:	613b      	str	r3, [r7, #16]
 800c054:	e043      	b.n	800c0de <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c068:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c06c:	d118      	bne.n	800c0a0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10a      	bne.n	800c08a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c080:	461a      	mov	r2, r3
 800c082:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c086:	6013      	str	r3, [r2, #0]
 800c088:	e013      	b.n	800c0b2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	015a      	lsls	r2, r3, #5
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	4413      	add	r3, r2
 800c092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c096:	461a      	mov	r2, r3
 800c098:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c09c:	6013      	str	r3, [r2, #0]
 800c09e:	e008      	b.n	800c0b2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	015a      	lsls	r2, r3, #5
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0be:	461a      	mov	r2, r3
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	015a      	lsls	r2, r3, #5
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c0d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	613b      	str	r3, [r7, #16]
 800c0de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d3b5      	bcc.n	800c056 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c0f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c10a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c10c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c110:	2b00      	cmp	r3, #0
 800c112:	d105      	bne.n	800c120 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	f043 0210 	orr.w	r2, r3, #16
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	699a      	ldr	r2, [r3, #24]
 800c124:	4b0f      	ldr	r3, [pc, #60]	@ (800c164 <USB_DevInit+0x2b4>)
 800c126:	4313      	orrs	r3, r2
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c12c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c130:	2b00      	cmp	r3, #0
 800c132:	d005      	beq.n	800c140 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	f043 0208 	orr.w	r2, r3, #8
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c140:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c144:	2b01      	cmp	r3, #1
 800c146:	d105      	bne.n	800c154 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	699a      	ldr	r2, [r3, #24]
 800c14c:	4b06      	ldr	r3, [pc, #24]	@ (800c168 <USB_DevInit+0x2b8>)
 800c14e:	4313      	orrs	r3, r2
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c154:	7dfb      	ldrb	r3, [r7, #23]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3718      	adds	r7, #24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c160:	b004      	add	sp, #16
 800c162:	4770      	bx	lr
 800c164:	803c3800 	.word	0x803c3800
 800c168:	40000004 	.word	0x40000004

0800c16c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3301      	adds	r3, #1
 800c17e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c186:	d901      	bls.n	800c18c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c188:	2303      	movs	r3, #3
 800c18a:	e01b      	b.n	800c1c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	daf2      	bge.n	800c17a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c194:	2300      	movs	r3, #0
 800c196:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	019b      	lsls	r3, r3, #6
 800c19c:	f043 0220 	orr.w	r2, r3, #32
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c1b0:	d901      	bls.n	800c1b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e006      	b.n	800c1c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	691b      	ldr	r3, [r3, #16]
 800c1ba:	f003 0320 	and.w	r3, r3, #32
 800c1be:	2b20      	cmp	r3, #32
 800c1c0:	d0f0      	beq.n	800c1a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c1c2:	2300      	movs	r3, #0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c1e8:	d901      	bls.n	800c1ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	e018      	b.n	800c220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	daf2      	bge.n	800c1dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2210      	movs	r2, #16
 800c1fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	3301      	adds	r3, #1
 800c204:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c20c:	d901      	bls.n	800c212 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c20e:	2303      	movs	r3, #3
 800c210:	e006      	b.n	800c220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	f003 0310 	and.w	r3, r3, #16
 800c21a:	2b10      	cmp	r3, #16
 800c21c:	d0f0      	beq.n	800c200 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3714      	adds	r7, #20
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	460b      	mov	r3, r1
 800c236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	78fb      	ldrb	r3, [r7, #3]
 800c246:	68f9      	ldr	r1, [r7, #12]
 800c248:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c24c:	4313      	orrs	r3, r2
 800c24e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3714      	adds	r7, #20
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c25e:	b480      	push	{r7}
 800c260:	b087      	sub	sp, #28
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	f003 0306 	and.w	r3, r3, #6
 800c276:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d102      	bne.n	800c284 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c27e:	2300      	movs	r3, #0
 800c280:	75fb      	strb	r3, [r7, #23]
 800c282:	e00a      	b.n	800c29a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2b02      	cmp	r3, #2
 800c288:	d002      	beq.n	800c290 <USB_GetDevSpeed+0x32>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2b06      	cmp	r3, #6
 800c28e:	d102      	bne.n	800c296 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c290:	2302      	movs	r3, #2
 800c292:	75fb      	strb	r3, [r7, #23]
 800c294:	e001      	b.n	800c29a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c296:	230f      	movs	r3, #15
 800c298:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	371c      	adds	r7, #28
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	785b      	ldrb	r3, [r3, #1]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d139      	bne.n	800c338 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2ca:	69da      	ldr	r2, [r3, #28]
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	f003 030f 	and.w	r3, r3, #15
 800c2d4:	2101      	movs	r1, #1
 800c2d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	68f9      	ldr	r1, [r7, #12]
 800c2de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	015a      	lsls	r2, r3, #5
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d153      	bne.n	800c3a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	015a      	lsls	r2, r3, #5
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4413      	add	r3, r2
 800c304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	791b      	ldrb	r3, [r3, #4]
 800c316:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c318:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	059b      	lsls	r3, r3, #22
 800c31e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c320:	431a      	orrs	r2, r3
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	0159      	lsls	r1, r3, #5
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	440b      	add	r3, r1
 800c32a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c32e:	4619      	mov	r1, r3
 800c330:	4b20      	ldr	r3, [pc, #128]	@ (800c3b4 <USB_ActivateEndpoint+0x10c>)
 800c332:	4313      	orrs	r3, r2
 800c334:	600b      	str	r3, [r1, #0]
 800c336:	e035      	b.n	800c3a4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c33e:	69da      	ldr	r2, [r3, #28]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	f003 030f 	and.w	r3, r3, #15
 800c348:	2101      	movs	r1, #1
 800c34a:	fa01 f303 	lsl.w	r3, r1, r3
 800c34e:	041b      	lsls	r3, r3, #16
 800c350:	68f9      	ldr	r1, [r7, #12]
 800c352:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c356:	4313      	orrs	r3, r2
 800c358:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	015a      	lsls	r2, r3, #5
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	4413      	add	r3, r2
 800c362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d119      	bne.n	800c3a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	015a      	lsls	r2, r3, #5
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	4413      	add	r3, r2
 800c378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	791b      	ldrb	r3, [r3, #4]
 800c38a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c38c:	430b      	orrs	r3, r1
 800c38e:	431a      	orrs	r2, r3
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	0159      	lsls	r1, r3, #5
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	440b      	add	r3, r1
 800c398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c39c:	4619      	mov	r1, r3
 800c39e:	4b05      	ldr	r3, [pc, #20]	@ (800c3b4 <USB_ActivateEndpoint+0x10c>)
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3714      	adds	r7, #20
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	10008000 	.word	0x10008000

0800c3b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	785b      	ldrb	r3, [r3, #1]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d161      	bne.n	800c498 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c3e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c3ea:	d11f      	bne.n	800c42c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	0151      	lsls	r1, r2, #5
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	440a      	add	r2, r1
 800c402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c406:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c40a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	015a      	lsls	r2, r3, #5
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4413      	add	r3, r2
 800c414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	0151      	lsls	r1, r2, #5
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	440a      	add	r2, r1
 800c422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c426:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c42a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c432:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	f003 030f 	and.w	r3, r3, #15
 800c43c:	2101      	movs	r1, #1
 800c43e:	fa01 f303 	lsl.w	r3, r1, r3
 800c442:	b29b      	uxth	r3, r3
 800c444:	43db      	mvns	r3, r3
 800c446:	68f9      	ldr	r1, [r7, #12]
 800c448:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c44c:	4013      	ands	r3, r2
 800c44e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c456:	69da      	ldr	r2, [r3, #28]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	f003 030f 	and.w	r3, r3, #15
 800c460:	2101      	movs	r1, #1
 800c462:	fa01 f303 	lsl.w	r3, r1, r3
 800c466:	b29b      	uxth	r3, r3
 800c468:	43db      	mvns	r3, r3
 800c46a:	68f9      	ldr	r1, [r7, #12]
 800c46c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c470:	4013      	ands	r3, r2
 800c472:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	0159      	lsls	r1, r3, #5
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	440b      	add	r3, r1
 800c48a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c48e:	4619      	mov	r1, r3
 800c490:	4b35      	ldr	r3, [pc, #212]	@ (800c568 <USB_DeactivateEndpoint+0x1b0>)
 800c492:	4013      	ands	r3, r2
 800c494:	600b      	str	r3, [r1, #0]
 800c496:	e060      	b.n	800c55a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	015a      	lsls	r2, r3, #5
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	4413      	add	r3, r2
 800c4a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4ae:	d11f      	bne.n	800c4f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	015a      	lsls	r2, r3, #5
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	0151      	lsls	r1, r2, #5
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	440a      	add	r2, r1
 800c4c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c4ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	015a      	lsls	r2, r3, #5
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	0151      	lsls	r1, r2, #5
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	440a      	add	r2, r1
 800c4e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c4ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	f003 030f 	and.w	r3, r3, #15
 800c500:	2101      	movs	r1, #1
 800c502:	fa01 f303 	lsl.w	r3, r1, r3
 800c506:	041b      	lsls	r3, r3, #16
 800c508:	43db      	mvns	r3, r3
 800c50a:	68f9      	ldr	r1, [r7, #12]
 800c50c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c510:	4013      	ands	r3, r2
 800c512:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c51a:	69da      	ldr	r2, [r3, #28]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	f003 030f 	and.w	r3, r3, #15
 800c524:	2101      	movs	r1, #1
 800c526:	fa01 f303 	lsl.w	r3, r1, r3
 800c52a:	041b      	lsls	r3, r3, #16
 800c52c:	43db      	mvns	r3, r3
 800c52e:	68f9      	ldr	r1, [r7, #12]
 800c530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c534:	4013      	ands	r3, r2
 800c536:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	015a      	lsls	r2, r3, #5
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	4413      	add	r3, r2
 800c540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	0159      	lsls	r1, r3, #5
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	440b      	add	r3, r1
 800c54e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c552:	4619      	mov	r1, r3
 800c554:	4b05      	ldr	r3, [pc, #20]	@ (800c56c <USB_DeactivateEndpoint+0x1b4>)
 800c556:	4013      	ands	r3, r2
 800c558:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	ec337800 	.word	0xec337800
 800c56c:	eff37800 	.word	0xeff37800

0800c570 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b08a      	sub	sp, #40	@ 0x28
 800c574:	af02      	add	r7, sp, #8
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	4613      	mov	r3, r2
 800c57c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	785b      	ldrb	r3, [r3, #1]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	f040 8181 	bne.w	800c894 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d132      	bne.n	800c600 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5a6:	691a      	ldr	r2, [r3, #16]
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	0159      	lsls	r1, r3, #5
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	440b      	add	r3, r1
 800c5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	4ba5      	ldr	r3, [pc, #660]	@ (800c84c <USB_EPStartXfer+0x2dc>)
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	015a      	lsls	r2, r3, #5
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	69ba      	ldr	r2, [r7, #24]
 800c5cc:	0151      	lsls	r1, r2, #5
 800c5ce:	69fa      	ldr	r2, [r7, #28]
 800c5d0:	440a      	add	r2, r1
 800c5d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c5da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5e8:	691a      	ldr	r2, [r3, #16]
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	0159      	lsls	r1, r3, #5
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	440b      	add	r3, r1
 800c5f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4b95      	ldr	r3, [pc, #596]	@ (800c850 <USB_EPStartXfer+0x2e0>)
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	610b      	str	r3, [r1, #16]
 800c5fe:	e092      	b.n	800c726 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	015a      	lsls	r2, r3, #5
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	4413      	add	r3, r2
 800c608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c60c:	691a      	ldr	r2, [r3, #16]
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	0159      	lsls	r1, r3, #5
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	440b      	add	r3, r1
 800c616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c61a:	4619      	mov	r1, r3
 800c61c:	4b8c      	ldr	r3, [pc, #560]	@ (800c850 <USB_EPStartXfer+0x2e0>)
 800c61e:	4013      	ands	r3, r2
 800c620:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	015a      	lsls	r2, r3, #5
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	4413      	add	r3, r2
 800c62a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c62e:	691a      	ldr	r2, [r3, #16]
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	0159      	lsls	r1, r3, #5
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	440b      	add	r3, r1
 800c638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c63c:	4619      	mov	r1, r3
 800c63e:	4b83      	ldr	r3, [pc, #524]	@ (800c84c <USB_EPStartXfer+0x2dc>)
 800c640:	4013      	ands	r3, r2
 800c642:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d11a      	bne.n	800c680 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	691a      	ldr	r2, [r3, #16]
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	429a      	cmp	r2, r3
 800c654:	d903      	bls.n	800c65e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	689a      	ldr	r2, [r3, #8]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	015a      	lsls	r2, r3, #5
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	4413      	add	r3, r2
 800c666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	69ba      	ldr	r2, [r7, #24]
 800c66e:	0151      	lsls	r1, r2, #5
 800c670:	69fa      	ldr	r2, [r7, #28]
 800c672:	440a      	add	r2, r1
 800c674:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c678:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c67c:	6113      	str	r3, [r2, #16]
 800c67e:	e01b      	b.n	800c6b8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	4413      	add	r3, r2
 800c688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c68c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	6919      	ldr	r1, [r3, #16]
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	440b      	add	r3, r1
 800c698:	1e59      	subs	r1, r3, #1
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c6a2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c6a4:	4b6b      	ldr	r3, [pc, #428]	@ (800c854 <USB_EPStartXfer+0x2e4>)
 800c6a6:	400b      	ands	r3, r1
 800c6a8:	69b9      	ldr	r1, [r7, #24]
 800c6aa:	0148      	lsls	r0, r1, #5
 800c6ac:	69f9      	ldr	r1, [r7, #28]
 800c6ae:	4401      	add	r1, r0
 800c6b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	015a      	lsls	r2, r3, #5
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	4413      	add	r3, r2
 800c6c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6c4:	691a      	ldr	r2, [r3, #16]
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6ce:	69b9      	ldr	r1, [r7, #24]
 800c6d0:	0148      	lsls	r0, r1, #5
 800c6d2:	69f9      	ldr	r1, [r7, #28]
 800c6d4:	4401      	add	r1, r0
 800c6d6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	791b      	ldrb	r3, [r3, #4]
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d11f      	bne.n	800c726 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	015a      	lsls	r2, r3, #5
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	69ba      	ldr	r2, [r7, #24]
 800c6f6:	0151      	lsls	r1, r2, #5
 800c6f8:	69fa      	ldr	r2, [r7, #28]
 800c6fa:	440a      	add	r2, r1
 800c6fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c700:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c704:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	015a      	lsls	r2, r3, #5
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	4413      	add	r3, r2
 800c70e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	69ba      	ldr	r2, [r7, #24]
 800c716:	0151      	lsls	r1, r2, #5
 800c718:	69fa      	ldr	r2, [r7, #28]
 800c71a:	440a      	add	r2, r1
 800c71c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c720:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c724:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c726:	79fb      	ldrb	r3, [r7, #7]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d14b      	bne.n	800c7c4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	69db      	ldr	r3, [r3, #28]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d009      	beq.n	800c748 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c740:	461a      	mov	r2, r3
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	69db      	ldr	r3, [r3, #28]
 800c746:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	791b      	ldrb	r3, [r3, #4]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d128      	bne.n	800c7a2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d110      	bne.n	800c782 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	015a      	lsls	r2, r3, #5
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	4413      	add	r3, r2
 800c768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	69ba      	ldr	r2, [r7, #24]
 800c770:	0151      	lsls	r1, r2, #5
 800c772:	69fa      	ldr	r2, [r7, #28]
 800c774:	440a      	add	r2, r1
 800c776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c77a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	e00f      	b.n	800c7a2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	015a      	lsls	r2, r3, #5
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	4413      	add	r3, r2
 800c78a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	69ba      	ldr	r2, [r7, #24]
 800c792:	0151      	lsls	r1, r2, #5
 800c794:	69fa      	ldr	r2, [r7, #28]
 800c796:	440a      	add	r2, r1
 800c798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c79c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	69ba      	ldr	r2, [r7, #24]
 800c7b2:	0151      	lsls	r1, r2, #5
 800c7b4:	69fa      	ldr	r2, [r7, #28]
 800c7b6:	440a      	add	r2, r1
 800c7b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c7c0:	6013      	str	r3, [r2, #0]
 800c7c2:	e16a      	b.n	800ca9a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	69ba      	ldr	r2, [r7, #24]
 800c7d4:	0151      	lsls	r1, r2, #5
 800c7d6:	69fa      	ldr	r2, [r7, #28]
 800c7d8:	440a      	add	r2, r1
 800c7da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c7e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	791b      	ldrb	r3, [r3, #4]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d015      	beq.n	800c818 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 8152 	beq.w	800ca9a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	f003 030f 	and.w	r3, r3, #15
 800c806:	2101      	movs	r1, #1
 800c808:	fa01 f303 	lsl.w	r3, r1, r3
 800c80c:	69f9      	ldr	r1, [r7, #28]
 800c80e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c812:	4313      	orrs	r3, r2
 800c814:	634b      	str	r3, [r1, #52]	@ 0x34
 800c816:	e140      	b.n	800ca9a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c824:	2b00      	cmp	r3, #0
 800c826:	d117      	bne.n	800c858 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	015a      	lsls	r2, r3, #5
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	4413      	add	r3, r2
 800c830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	0151      	lsls	r1, r2, #5
 800c83a:	69fa      	ldr	r2, [r7, #28]
 800c83c:	440a      	add	r2, r1
 800c83e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c842:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c846:	6013      	str	r3, [r2, #0]
 800c848:	e016      	b.n	800c878 <USB_EPStartXfer+0x308>
 800c84a:	bf00      	nop
 800c84c:	e007ffff 	.word	0xe007ffff
 800c850:	fff80000 	.word	0xfff80000
 800c854:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	015a      	lsls	r2, r3, #5
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	4413      	add	r3, r2
 800c860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	69ba      	ldr	r2, [r7, #24]
 800c868:	0151      	lsls	r1, r2, #5
 800c86a:	69fa      	ldr	r2, [r7, #28]
 800c86c:	440a      	add	r2, r1
 800c86e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c876:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	68d9      	ldr	r1, [r3, #12]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	781a      	ldrb	r2, [r3, #0]
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	b298      	uxth	r0, r3
 800c886:	79fb      	ldrb	r3, [r7, #7]
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	4603      	mov	r3, r0
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f000 f9b9 	bl	800cc04 <USB_WritePacket>
 800c892:	e102      	b.n	800ca9a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c894:	69bb      	ldr	r3, [r7, #24]
 800c896:	015a      	lsls	r2, r3, #5
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	4413      	add	r3, r2
 800c89c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8a0:	691a      	ldr	r2, [r3, #16]
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	0159      	lsls	r1, r3, #5
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	440b      	add	r3, r1
 800c8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	4b7c      	ldr	r3, [pc, #496]	@ (800caa4 <USB_EPStartXfer+0x534>)
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	015a      	lsls	r2, r3, #5
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8c2:	691a      	ldr	r2, [r3, #16]
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	0159      	lsls	r1, r3, #5
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	440b      	add	r3, r1
 800c8cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	4b75      	ldr	r3, [pc, #468]	@ (800caa8 <USB_EPStartXfer+0x538>)
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d12f      	bne.n	800c93e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d003      	beq.n	800c8ee <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	689a      	ldr	r2, [r3, #8]
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	689a      	ldr	r2, [r3, #8]
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	015a      	lsls	r2, r3, #5
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c902:	691a      	ldr	r2, [r3, #16]
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	6a1b      	ldr	r3, [r3, #32]
 800c908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c90c:	69b9      	ldr	r1, [r7, #24]
 800c90e:	0148      	lsls	r0, r1, #5
 800c910:	69f9      	ldr	r1, [r7, #28]
 800c912:	4401      	add	r1, r0
 800c914:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c918:	4313      	orrs	r3, r2
 800c91a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	015a      	lsls	r2, r3, #5
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	4413      	add	r3, r2
 800c924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	69ba      	ldr	r2, [r7, #24]
 800c92c:	0151      	lsls	r1, r2, #5
 800c92e:	69fa      	ldr	r2, [r7, #28]
 800c930:	440a      	add	r2, r1
 800c932:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c936:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c93a:	6113      	str	r3, [r2, #16]
 800c93c:	e05f      	b.n	800c9fe <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d123      	bne.n	800c98e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	015a      	lsls	r2, r3, #5
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	4413      	add	r3, r2
 800c94e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c952:	691a      	ldr	r2, [r3, #16]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c95c:	69b9      	ldr	r1, [r7, #24]
 800c95e:	0148      	lsls	r0, r1, #5
 800c960:	69f9      	ldr	r1, [r7, #28]
 800c962:	4401      	add	r1, r0
 800c964:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c968:	4313      	orrs	r3, r2
 800c96a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	015a      	lsls	r2, r3, #5
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	4413      	add	r3, r2
 800c974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	69ba      	ldr	r2, [r7, #24]
 800c97c:	0151      	lsls	r1, r2, #5
 800c97e:	69fa      	ldr	r2, [r7, #28]
 800c980:	440a      	add	r2, r1
 800c982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c986:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c98a:	6113      	str	r3, [r2, #16]
 800c98c:	e037      	b.n	800c9fe <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	691a      	ldr	r2, [r3, #16]
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	4413      	add	r3, r2
 800c998:	1e5a      	subs	r2, r3, #1
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	8afa      	ldrh	r2, [r7, #22]
 800c9aa:	fb03 f202 	mul.w	r2, r3, r2
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	015a      	lsls	r2, r3, #5
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9be:	691a      	ldr	r2, [r3, #16]
 800c9c0:	8afb      	ldrh	r3, [r7, #22]
 800c9c2:	04d9      	lsls	r1, r3, #19
 800c9c4:	4b39      	ldr	r3, [pc, #228]	@ (800caac <USB_EPStartXfer+0x53c>)
 800c9c6:	400b      	ands	r3, r1
 800c9c8:	69b9      	ldr	r1, [r7, #24]
 800c9ca:	0148      	lsls	r0, r1, #5
 800c9cc:	69f9      	ldr	r1, [r7, #28]
 800c9ce:	4401      	add	r1, r0
 800c9d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	015a      	lsls	r2, r3, #5
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	4413      	add	r3, r2
 800c9e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9e4:	691a      	ldr	r2, [r3, #16]
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9ee:	69b9      	ldr	r1, [r7, #24]
 800c9f0:	0148      	lsls	r0, r1, #5
 800c9f2:	69f9      	ldr	r1, [r7, #28]
 800c9f4:	4401      	add	r1, r0
 800c9f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c9fe:	79fb      	ldrb	r3, [r7, #7]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d10d      	bne.n	800ca20 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d009      	beq.n	800ca20 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	68d9      	ldr	r1, [r3, #12]
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	015a      	lsls	r2, r3, #5
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	4413      	add	r3, r2
 800ca18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca1c:	460a      	mov	r2, r1
 800ca1e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	791b      	ldrb	r3, [r3, #4]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d128      	bne.n	800ca7a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d110      	bne.n	800ca5a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	015a      	lsls	r2, r3, #5
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	4413      	add	r3, r2
 800ca40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	69ba      	ldr	r2, [r7, #24]
 800ca48:	0151      	lsls	r1, r2, #5
 800ca4a:	69fa      	ldr	r2, [r7, #28]
 800ca4c:	440a      	add	r2, r1
 800ca4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ca56:	6013      	str	r3, [r2, #0]
 800ca58:	e00f      	b.n	800ca7a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	015a      	lsls	r2, r3, #5
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	4413      	add	r3, r2
 800ca62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	69ba      	ldr	r2, [r7, #24]
 800ca6a:	0151      	lsls	r1, r2, #5
 800ca6c:	69fa      	ldr	r2, [r7, #28]
 800ca6e:	440a      	add	r2, r1
 800ca70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca78:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	015a      	lsls	r2, r3, #5
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	4413      	add	r3, r2
 800ca82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	69ba      	ldr	r2, [r7, #24]
 800ca8a:	0151      	lsls	r1, r2, #5
 800ca8c:	69fa      	ldr	r2, [r7, #28]
 800ca8e:	440a      	add	r2, r1
 800ca90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ca98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3720      	adds	r7, #32
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	fff80000 	.word	0xfff80000
 800caa8:	e007ffff 	.word	0xe007ffff
 800caac:	1ff80000 	.word	0x1ff80000

0800cab0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800caba:	2300      	movs	r3, #0
 800cabc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	785b      	ldrb	r3, [r3, #1]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d14a      	bne.n	800cb64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cae2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cae6:	f040 8086 	bne.w	800cbf6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	015a      	lsls	r2, r3, #5
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	7812      	ldrb	r2, [r2, #0]
 800cafe:	0151      	lsls	r1, r2, #5
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	440a      	add	r2, r1
 800cb04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cb0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	015a      	lsls	r2, r3, #5
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	4413      	add	r3, r2
 800cb18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	7812      	ldrb	r2, [r2, #0]
 800cb22:	0151      	lsls	r1, r2, #5
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	440a      	add	r2, r1
 800cb28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cb30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3301      	adds	r3, #1
 800cb36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d902      	bls.n	800cb48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cb42:	2301      	movs	r3, #1
 800cb44:	75fb      	strb	r3, [r7, #23]
          break;
 800cb46:	e056      	b.n	800cbf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	015a      	lsls	r2, r3, #5
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	4413      	add	r3, r2
 800cb52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cb5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cb60:	d0e7      	beq.n	800cb32 <USB_EPStopXfer+0x82>
 800cb62:	e048      	b.n	800cbf6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cb78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cb7c:	d13b      	bne.n	800cbf6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	7812      	ldrb	r2, [r2, #0]
 800cb92:	0151      	lsls	r1, r2, #5
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	440a      	add	r2, r1
 800cb98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cb9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cba0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	7812      	ldrb	r2, [r2, #0]
 800cbb6:	0151      	lsls	r1, r2, #5
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	440a      	add	r2, r1
 800cbbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cbc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d902      	bls.n	800cbdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	75fb      	strb	r3, [r7, #23]
          break;
 800cbda:	e00c      	b.n	800cbf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	015a      	lsls	r2, r3, #5
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cbf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cbf4:	d0e7      	beq.n	800cbc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	371c      	adds	r7, #28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b089      	sub	sp, #36	@ 0x24
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	461a      	mov	r2, r3
 800cc12:	460b      	mov	r3, r1
 800cc14:	71fb      	strb	r3, [r7, #7]
 800cc16:	4613      	mov	r3, r2
 800cc18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cc22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d123      	bne.n	800cc72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cc2a:	88bb      	ldrh	r3, [r7, #4]
 800cc2c:	3303      	adds	r3, #3
 800cc2e:	089b      	lsrs	r3, r3, #2
 800cc30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cc32:	2300      	movs	r3, #0
 800cc34:	61bb      	str	r3, [r7, #24]
 800cc36:	e018      	b.n	800cc6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc38:	79fb      	ldrb	r3, [r7, #7]
 800cc3a:	031a      	lsls	r2, r3, #12
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc44:	461a      	mov	r2, r3
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	3301      	adds	r3, #1
 800cc56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	3301      	adds	r3, #1
 800cc62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	3301      	adds	r3, #1
 800cc68:	61bb      	str	r3, [r7, #24]
 800cc6a:	69ba      	ldr	r2, [r7, #24]
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d3e2      	bcc.n	800cc38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3724      	adds	r7, #36	@ 0x24
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b08b      	sub	sp, #44	@ 0x2c
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cc96:	88fb      	ldrh	r3, [r7, #6]
 800cc98:	089b      	lsrs	r3, r3, #2
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cc9e:	88fb      	ldrh	r3, [r7, #6]
 800cca0:	f003 0303 	and.w	r3, r3, #3
 800cca4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cca6:	2300      	movs	r3, #0
 800cca8:	623b      	str	r3, [r7, #32]
 800ccaa:	e014      	b.n	800ccd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb6:	601a      	str	r2, [r3, #0]
    pDest++;
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccba:	3301      	adds	r3, #1
 800ccbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ccca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cccc:	3301      	adds	r3, #1
 800ccce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ccd0:	6a3b      	ldr	r3, [r7, #32]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	623b      	str	r3, [r7, #32]
 800ccd6:	6a3a      	ldr	r2, [r7, #32]
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d3e6      	bcc.n	800ccac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ccde:	8bfb      	ldrh	r3, [r7, #30]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d01e      	beq.n	800cd22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cce4:	2300      	movs	r3, #0
 800cce6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccee:	461a      	mov	r2, r3
 800ccf0:	f107 0310 	add.w	r3, r7, #16
 800ccf4:	6812      	ldr	r2, [r2, #0]
 800ccf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ccf8:	693a      	ldr	r2, [r7, #16]
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	fa22 f303 	lsr.w	r3, r2, r3
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd08:	701a      	strb	r2, [r3, #0]
      i++;
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	623b      	str	r3, [r7, #32]
      pDest++;
 800cd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd12:	3301      	adds	r3, #1
 800cd14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800cd16:	8bfb      	ldrh	r3, [r7, #30]
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cd1c:	8bfb      	ldrh	r3, [r7, #30]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1ea      	bne.n	800ccf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	372c      	adds	r7, #44	@ 0x2c
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	785b      	ldrb	r3, [r3, #1]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d12c      	bne.n	800cda6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	015a      	lsls	r2, r3, #5
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	4413      	add	r3, r2
 800cd54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	db12      	blt.n	800cd84 <USB_EPSetStall+0x54>
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00f      	beq.n	800cd84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	015a      	lsls	r2, r3, #5
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	0151      	lsls	r1, r2, #5
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	440a      	add	r2, r1
 800cd7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cd82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	015a      	lsls	r2, r3, #5
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	0151      	lsls	r1, r2, #5
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	440a      	add	r2, r1
 800cd9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cda2:	6013      	str	r3, [r2, #0]
 800cda4:	e02b      	b.n	800cdfe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	015a      	lsls	r2, r3, #5
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	4413      	add	r3, r2
 800cdae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	db12      	blt.n	800cdde <USB_EPSetStall+0xae>
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00f      	beq.n	800cdde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	015a      	lsls	r2, r3, #5
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	0151      	lsls	r1, r2, #5
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	440a      	add	r2, r1
 800cdd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cdd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cddc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	015a      	lsls	r2, r3, #5
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	4413      	add	r3, r2
 800cde6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	0151      	lsls	r1, r2, #5
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	440a      	add	r2, r1
 800cdf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cdf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cdfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	785b      	ldrb	r3, [r3, #1]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d128      	bne.n	800ce7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	015a      	lsls	r2, r3, #5
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	4413      	add	r3, r2
 800ce30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	0151      	lsls	r1, r2, #5
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	440a      	add	r2, r1
 800ce3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ce46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	791b      	ldrb	r3, [r3, #4]
 800ce4c:	2b03      	cmp	r3, #3
 800ce4e:	d003      	beq.n	800ce58 <USB_EPClearStall+0x4c>
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	791b      	ldrb	r3, [r3, #4]
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d138      	bne.n	800ceca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	015a      	lsls	r2, r3, #5
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4413      	add	r3, r2
 800ce60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	0151      	lsls	r1, r2, #5
 800ce6a:	68fa      	ldr	r2, [r7, #12]
 800ce6c:	440a      	add	r2, r1
 800ce6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	e027      	b.n	800ceca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	015a      	lsls	r2, r3, #5
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	4413      	add	r3, r2
 800ce82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	0151      	lsls	r1, r2, #5
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	440a      	add	r2, r1
 800ce90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ce94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ce98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	791b      	ldrb	r3, [r3, #4]
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	d003      	beq.n	800ceaa <USB_EPClearStall+0x9e>
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	791b      	ldrb	r3, [r3, #4]
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d10f      	bne.n	800ceca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	015a      	lsls	r2, r3, #5
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	0151      	lsls	r1, r2, #5
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	440a      	add	r2, r1
 800cec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cec8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3714      	adds	r7, #20
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	460b      	mov	r3, r1
 800cee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cef6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cefa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	78fb      	ldrb	r3, [r7, #3]
 800cf06:	011b      	lsls	r3, r3, #4
 800cf08:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800cf0c:	68f9      	ldr	r1, [r7, #12]
 800cf0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cf12:	4313      	orrs	r3, r2
 800cf14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3714      	adds	r7, #20
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cf3e:	f023 0303 	bic.w	r3, r3, #3
 800cf42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cf52:	f023 0302 	bic.w	r3, r3, #2
 800cf56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3714      	adds	r7, #20
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf66:	b480      	push	{r7}
 800cf68:	b085      	sub	sp, #20
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cf80:	f023 0303 	bic.w	r3, r3, #3
 800cf84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cf94:	f043 0302 	orr.w	r3, r3, #2
 800cf98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3714      	adds	r7, #20
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	695b      	ldr	r3, [r3, #20]
 800cfb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	699b      	ldr	r3, [r3, #24]
 800cfba:	68fa      	ldr	r2, [r7, #12]
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cfce:	b480      	push	{r7}
 800cfd0:	b085      	sub	sp, #20
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	4013      	ands	r3, r2
 800cff0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	0c1b      	lsrs	r3, r3, #16
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3714      	adds	r7, #20
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d002:	b480      	push	{r7}
 800d004:	b085      	sub	sp, #20
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d014:	699b      	ldr	r3, [r3, #24]
 800d016:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d01e:	69db      	ldr	r3, [r3, #28]
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	4013      	ands	r3, r2
 800d024:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	b29b      	uxth	r3, r3
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr

0800d036 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d036:	b480      	push	{r7}
 800d038:	b085      	sub	sp, #20
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	460b      	mov	r3, r1
 800d040:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d046:	78fb      	ldrb	r3, [r7, #3]
 800d048:	015a      	lsls	r2, r3, #5
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	4413      	add	r3, r2
 800d04e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	68ba      	ldr	r2, [r7, #8]
 800d060:	4013      	ands	r3, r2
 800d062:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d064:	68bb      	ldr	r3, [r7, #8]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d072:	b480      	push	{r7}
 800d074:	b087      	sub	sp, #28
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
 800d07a:	460b      	mov	r3, r1
 800d07c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d094:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d096:	78fb      	ldrb	r3, [r7, #3]
 800d098:	f003 030f 	and.w	r3, r3, #15
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	fa22 f303 	lsr.w	r3, r2, r3
 800d0a2:	01db      	lsls	r3, r3, #7
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d0ac:	78fb      	ldrb	r3, [r7, #3]
 800d0ae:	015a      	lsls	r2, r3, #5
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	693a      	ldr	r2, [r7, #16]
 800d0bc:	4013      	ands	r3, r2
 800d0be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0c0:	68bb      	ldr	r3, [r7, #8]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	371c      	adds	r7, #28
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b083      	sub	sp, #12
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	695b      	ldr	r3, [r3, #20]
 800d0da:	f003 0301 	and.w	r3, r3, #1
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	370c      	adds	r7, #12
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
	...

0800d0ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d106:	4619      	mov	r1, r3
 800d108:	4b09      	ldr	r3, [pc, #36]	@ (800d130 <USB_ActivateSetup+0x44>)
 800d10a:	4013      	ands	r3, r2
 800d10c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d11c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d120:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	fffff800 	.word	0xfffff800

0800d134 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d134:	b480      	push	{r7}
 800d136:	b087      	sub	sp, #28
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	460b      	mov	r3, r1
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	333c      	adds	r3, #60	@ 0x3c
 800d14a:	3304      	adds	r3, #4
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	4a26      	ldr	r2, [pc, #152]	@ (800d1ec <USB_EP0_OutStart+0xb8>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d90a      	bls.n	800d16e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d164:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d168:	d101      	bne.n	800d16e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	e037      	b.n	800d1de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d174:	461a      	mov	r2, r3
 800d176:	2300      	movs	r3, #0
 800d178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	697a      	ldr	r2, [r7, #20]
 800d184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d188:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d18c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d194:	691b      	ldr	r3, [r3, #16]
 800d196:	697a      	ldr	r2, [r7, #20]
 800d198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d19c:	f043 0318 	orr.w	r3, r3, #24
 800d1a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	697a      	ldr	r2, [r7, #20]
 800d1ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1b0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d1b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d1b6:	7afb      	ldrb	r3, [r7, #11]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d10f      	bne.n	800d1dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	697a      	ldr	r2, [r7, #20]
 800d1d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1d6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d1da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	371c      	adds	r7, #28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	4f54300a 	.word	0x4f54300a

0800d1f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	3301      	adds	r3, #1
 800d200:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d208:	d901      	bls.n	800d20e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d20a:	2303      	movs	r3, #3
 800d20c:	e01b      	b.n	800d246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	691b      	ldr	r3, [r3, #16]
 800d212:	2b00      	cmp	r3, #0
 800d214:	daf2      	bge.n	800d1fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d216:	2300      	movs	r3, #0
 800d218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	f043 0201 	orr.w	r2, r3, #1
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	3301      	adds	r3, #1
 800d22a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d232:	d901      	bls.n	800d238 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d234:	2303      	movs	r3, #3
 800d236:	e006      	b.n	800d246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	f003 0301 	and.w	r3, r3, #1
 800d240:	2b01      	cmp	r3, #1
 800d242:	d0f0      	beq.n	800d226 <USB_CoreReset+0x36>

  return HAL_OK;
 800d244:	2300      	movs	r3, #0
}
 800d246:	4618      	mov	r0, r3
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
	...

0800d254 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d260:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d264:	f005 f878 	bl	8012358 <USBD_static_malloc>
 800d268:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d109      	bne.n	800d284 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	32b0      	adds	r2, #176	@ 0xb0
 800d27a:	2100      	movs	r1, #0
 800d27c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d280:	2302      	movs	r3, #2
 800d282:	e0d4      	b.n	800d42e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d284:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d288:	2100      	movs	r1, #0
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f006 f849 	bl	8013322 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	32b0      	adds	r2, #176	@ 0xb0
 800d29a:	68f9      	ldr	r1, [r7, #12]
 800d29c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	32b0      	adds	r2, #176	@ 0xb0
 800d2aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	7c1b      	ldrb	r3, [r3, #16]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d138      	bne.n	800d32e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d2bc:	4b5e      	ldr	r3, [pc, #376]	@ (800d438 <USBD_CDC_Init+0x1e4>)
 800d2be:	7819      	ldrb	r1, [r3, #0]
 800d2c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f004 ff23 	bl	8012112 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d2cc:	4b5a      	ldr	r3, [pc, #360]	@ (800d438 <USBD_CDC_Init+0x1e4>)
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	f003 020f 	and.w	r2, r3, #15
 800d2d4:	6879      	ldr	r1, [r7, #4]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	4413      	add	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	440b      	add	r3, r1
 800d2e0:	3324      	adds	r3, #36	@ 0x24
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d2e6:	4b55      	ldr	r3, [pc, #340]	@ (800d43c <USBD_CDC_Init+0x1e8>)
 800d2e8:	7819      	ldrb	r1, [r3, #0]
 800d2ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f004 ff0e 	bl	8012112 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d2f6:	4b51      	ldr	r3, [pc, #324]	@ (800d43c <USBD_CDC_Init+0x1e8>)
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	f003 020f 	and.w	r2, r3, #15
 800d2fe:	6879      	ldr	r1, [r7, #4]
 800d300:	4613      	mov	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4413      	add	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	440b      	add	r3, r1
 800d30a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d30e:	2201      	movs	r2, #1
 800d310:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d312:	4b4b      	ldr	r3, [pc, #300]	@ (800d440 <USBD_CDC_Init+0x1ec>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	f003 020f 	and.w	r2, r3, #15
 800d31a:	6879      	ldr	r1, [r7, #4]
 800d31c:	4613      	mov	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	440b      	add	r3, r1
 800d326:	3326      	adds	r3, #38	@ 0x26
 800d328:	2210      	movs	r2, #16
 800d32a:	801a      	strh	r2, [r3, #0]
 800d32c:	e035      	b.n	800d39a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d32e:	4b42      	ldr	r3, [pc, #264]	@ (800d438 <USBD_CDC_Init+0x1e4>)
 800d330:	7819      	ldrb	r1, [r3, #0]
 800d332:	2340      	movs	r3, #64	@ 0x40
 800d334:	2202      	movs	r2, #2
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f004 feeb 	bl	8012112 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d33c:	4b3e      	ldr	r3, [pc, #248]	@ (800d438 <USBD_CDC_Init+0x1e4>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	f003 020f 	and.w	r2, r3, #15
 800d344:	6879      	ldr	r1, [r7, #4]
 800d346:	4613      	mov	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4413      	add	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	440b      	add	r3, r1
 800d350:	3324      	adds	r3, #36	@ 0x24
 800d352:	2201      	movs	r2, #1
 800d354:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d356:	4b39      	ldr	r3, [pc, #228]	@ (800d43c <USBD_CDC_Init+0x1e8>)
 800d358:	7819      	ldrb	r1, [r3, #0]
 800d35a:	2340      	movs	r3, #64	@ 0x40
 800d35c:	2202      	movs	r2, #2
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f004 fed7 	bl	8012112 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d364:	4b35      	ldr	r3, [pc, #212]	@ (800d43c <USBD_CDC_Init+0x1e8>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	f003 020f 	and.w	r2, r3, #15
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	4613      	mov	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	4413      	add	r3, r2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	440b      	add	r3, r1
 800d378:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d37c:	2201      	movs	r2, #1
 800d37e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d380:	4b2f      	ldr	r3, [pc, #188]	@ (800d440 <USBD_CDC_Init+0x1ec>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	f003 020f 	and.w	r2, r3, #15
 800d388:	6879      	ldr	r1, [r7, #4]
 800d38a:	4613      	mov	r3, r2
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4413      	add	r3, r2
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	440b      	add	r3, r1
 800d394:	3326      	adds	r3, #38	@ 0x26
 800d396:	2210      	movs	r2, #16
 800d398:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d39a:	4b29      	ldr	r3, [pc, #164]	@ (800d440 <USBD_CDC_Init+0x1ec>)
 800d39c:	7819      	ldrb	r1, [r3, #0]
 800d39e:	2308      	movs	r3, #8
 800d3a0:	2203      	movs	r2, #3
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f004 feb5 	bl	8012112 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d3a8:	4b25      	ldr	r3, [pc, #148]	@ (800d440 <USBD_CDC_Init+0x1ec>)
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	f003 020f 	and.w	r2, r3, #15
 800d3b0:	6879      	ldr	r1, [r7, #4]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4413      	add	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	440b      	add	r3, r1
 800d3bc:	3324      	adds	r3, #36	@ 0x24
 800d3be:	2201      	movs	r2, #1
 800d3c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	33b0      	adds	r3, #176	@ 0xb0
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	4413      	add	r3, r2
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	e018      	b.n	800d42e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	7c1b      	ldrb	r3, [r3, #16]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d10a      	bne.n	800d41a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d404:	4b0d      	ldr	r3, [pc, #52]	@ (800d43c <USBD_CDC_Init+0x1e8>)
 800d406:	7819      	ldrb	r1, [r3, #0]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d40e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f004 ff6c 	bl	80122f0 <USBD_LL_PrepareReceive>
 800d418:	e008      	b.n	800d42c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d41a:	4b08      	ldr	r3, [pc, #32]	@ (800d43c <USBD_CDC_Init+0x1e8>)
 800d41c:	7819      	ldrb	r1, [r3, #0]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d424:	2340      	movs	r3, #64	@ 0x40
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f004 ff62 	bl	80122f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	2400008f 	.word	0x2400008f
 800d43c:	24000090 	.word	0x24000090
 800d440:	24000091 	.word	0x24000091

0800d444 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d450:	4b3a      	ldr	r3, [pc, #232]	@ (800d53c <USBD_CDC_DeInit+0xf8>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	4619      	mov	r1, r3
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f004 fe81 	bl	801215e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d45c:	4b37      	ldr	r3, [pc, #220]	@ (800d53c <USBD_CDC_DeInit+0xf8>)
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	f003 020f 	and.w	r2, r3, #15
 800d464:	6879      	ldr	r1, [r7, #4]
 800d466:	4613      	mov	r3, r2
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4413      	add	r3, r2
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	440b      	add	r3, r1
 800d470:	3324      	adds	r3, #36	@ 0x24
 800d472:	2200      	movs	r2, #0
 800d474:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d476:	4b32      	ldr	r3, [pc, #200]	@ (800d540 <USBD_CDC_DeInit+0xfc>)
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	4619      	mov	r1, r3
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f004 fe6e 	bl	801215e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d482:	4b2f      	ldr	r3, [pc, #188]	@ (800d540 <USBD_CDC_DeInit+0xfc>)
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	f003 020f 	and.w	r2, r3, #15
 800d48a:	6879      	ldr	r1, [r7, #4]
 800d48c:	4613      	mov	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	4413      	add	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	440b      	add	r3, r1
 800d496:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d49a:	2200      	movs	r2, #0
 800d49c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d49e:	4b29      	ldr	r3, [pc, #164]	@ (800d544 <USBD_CDC_DeInit+0x100>)
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f004 fe5a 	bl	801215e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d4aa:	4b26      	ldr	r3, [pc, #152]	@ (800d544 <USBD_CDC_DeInit+0x100>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	f003 020f 	and.w	r2, r3, #15
 800d4b2:	6879      	ldr	r1, [r7, #4]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	4413      	add	r3, r2
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	440b      	add	r3, r1
 800d4be:	3324      	adds	r3, #36	@ 0x24
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d4c4:	4b1f      	ldr	r3, [pc, #124]	@ (800d544 <USBD_CDC_DeInit+0x100>)
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	f003 020f 	and.w	r2, r3, #15
 800d4cc:	6879      	ldr	r1, [r7, #4]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	4413      	add	r3, r2
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	440b      	add	r3, r1
 800d4d8:	3326      	adds	r3, #38	@ 0x26
 800d4da:	2200      	movs	r2, #0
 800d4dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	32b0      	adds	r2, #176	@ 0xb0
 800d4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d01f      	beq.n	800d530 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	33b0      	adds	r3, #176	@ 0xb0
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4413      	add	r3, r2
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	32b0      	adds	r2, #176	@ 0xb0
 800d50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d512:	4618      	mov	r0, r3
 800d514:	f004 ff2e 	bl	8012374 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	32b0      	adds	r2, #176	@ 0xb0
 800d522:	2100      	movs	r1, #0
 800d524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	2400008f 	.word	0x2400008f
 800d540:	24000090 	.word	0x24000090
 800d544:	24000091 	.word	0x24000091

0800d548 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b086      	sub	sp, #24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	32b0      	adds	r2, #176	@ 0xb0
 800d55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d560:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d562:	2300      	movs	r3, #0
 800d564:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d566:	2300      	movs	r3, #0
 800d568:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d56a:	2300      	movs	r3, #0
 800d56c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d101      	bne.n	800d578 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d574:	2303      	movs	r3, #3
 800d576:	e0bf      	b.n	800d6f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d580:	2b00      	cmp	r3, #0
 800d582:	d050      	beq.n	800d626 <USBD_CDC_Setup+0xde>
 800d584:	2b20      	cmp	r3, #32
 800d586:	f040 80af 	bne.w	800d6e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	88db      	ldrh	r3, [r3, #6]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d03a      	beq.n	800d608 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	b25b      	sxtb	r3, r3
 800d598:	2b00      	cmp	r3, #0
 800d59a:	da1b      	bge.n	800d5d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	33b0      	adds	r3, #176	@ 0xb0
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	683a      	ldr	r2, [r7, #0]
 800d5b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d5b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d5b4:	683a      	ldr	r2, [r7, #0]
 800d5b6:	88d2      	ldrh	r2, [r2, #6]
 800d5b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	88db      	ldrh	r3, [r3, #6]
 800d5be:	2b07      	cmp	r3, #7
 800d5c0:	bf28      	it	cs
 800d5c2:	2307      	movcs	r3, #7
 800d5c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	89fa      	ldrh	r2, [r7, #14]
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f001 fdbd 	bl	800f14c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d5d2:	e090      	b.n	800d6f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	785a      	ldrb	r2, [r3, #1]
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	88db      	ldrh	r3, [r3, #6]
 800d5e2:	2b3f      	cmp	r3, #63	@ 0x3f
 800d5e4:	d803      	bhi.n	800d5ee <USBD_CDC_Setup+0xa6>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	88db      	ldrh	r3, [r3, #6]
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	e000      	b.n	800d5f0 <USBD_CDC_Setup+0xa8>
 800d5ee:	2240      	movs	r2, #64	@ 0x40
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d5f6:	6939      	ldr	r1, [r7, #16]
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d5fe:	461a      	mov	r2, r3
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f001 fdcf 	bl	800f1a4 <USBD_CtlPrepareRx>
      break;
 800d606:	e076      	b.n	800d6f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	33b0      	adds	r3, #176	@ 0xb0
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	4413      	add	r3, r2
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	7850      	ldrb	r0, [r2, #1]
 800d61e:	2200      	movs	r2, #0
 800d620:	6839      	ldr	r1, [r7, #0]
 800d622:	4798      	blx	r3
      break;
 800d624:	e067      	b.n	800d6f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	785b      	ldrb	r3, [r3, #1]
 800d62a:	2b0b      	cmp	r3, #11
 800d62c:	d851      	bhi.n	800d6d2 <USBD_CDC_Setup+0x18a>
 800d62e:	a201      	add	r2, pc, #4	@ (adr r2, 800d634 <USBD_CDC_Setup+0xec>)
 800d630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d634:	0800d665 	.word	0x0800d665
 800d638:	0800d6e1 	.word	0x0800d6e1
 800d63c:	0800d6d3 	.word	0x0800d6d3
 800d640:	0800d6d3 	.word	0x0800d6d3
 800d644:	0800d6d3 	.word	0x0800d6d3
 800d648:	0800d6d3 	.word	0x0800d6d3
 800d64c:	0800d6d3 	.word	0x0800d6d3
 800d650:	0800d6d3 	.word	0x0800d6d3
 800d654:	0800d6d3 	.word	0x0800d6d3
 800d658:	0800d6d3 	.word	0x0800d6d3
 800d65c:	0800d68f 	.word	0x0800d68f
 800d660:	0800d6b9 	.word	0x0800d6b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	d107      	bne.n	800d680 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d670:	f107 030a 	add.w	r3, r7, #10
 800d674:	2202      	movs	r2, #2
 800d676:	4619      	mov	r1, r3
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f001 fd67 	bl	800f14c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d67e:	e032      	b.n	800d6e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f001 fce5 	bl	800f052 <USBD_CtlError>
            ret = USBD_FAIL;
 800d688:	2303      	movs	r3, #3
 800d68a:	75fb      	strb	r3, [r7, #23]
          break;
 800d68c:	e02b      	b.n	800d6e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d694:	b2db      	uxtb	r3, r3
 800d696:	2b03      	cmp	r3, #3
 800d698:	d107      	bne.n	800d6aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d69a:	f107 030d 	add.w	r3, r7, #13
 800d69e:	2201      	movs	r2, #1
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f001 fd52 	bl	800f14c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d6a8:	e01d      	b.n	800d6e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f001 fcd0 	bl	800f052 <USBD_CtlError>
            ret = USBD_FAIL;
 800d6b2:	2303      	movs	r3, #3
 800d6b4:	75fb      	strb	r3, [r7, #23]
          break;
 800d6b6:	e016      	b.n	800d6e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	2b03      	cmp	r3, #3
 800d6c2:	d00f      	beq.n	800d6e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d6c4:	6839      	ldr	r1, [r7, #0]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f001 fcc3 	bl	800f052 <USBD_CtlError>
            ret = USBD_FAIL;
 800d6cc:	2303      	movs	r3, #3
 800d6ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d6d0:	e008      	b.n	800d6e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f001 fcbc 	bl	800f052 <USBD_CtlError>
          ret = USBD_FAIL;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	75fb      	strb	r3, [r7, #23]
          break;
 800d6de:	e002      	b.n	800d6e6 <USBD_CDC_Setup+0x19e>
          break;
 800d6e0:	bf00      	nop
 800d6e2:	e008      	b.n	800d6f6 <USBD_CDC_Setup+0x1ae>
          break;
 800d6e4:	bf00      	nop
      }
      break;
 800d6e6:	e006      	b.n	800d6f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d6e8:	6839      	ldr	r1, [r7, #0]
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f001 fcb1 	bl	800f052 <USBD_CtlError>
      ret = USBD_FAIL;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	75fb      	strb	r3, [r7, #23]
      break;
 800d6f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3718      	adds	r7, #24
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	460b      	mov	r3, r1
 800d70a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d712:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	32b0      	adds	r2, #176	@ 0xb0
 800d71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d726:	2303      	movs	r3, #3
 800d728:	e065      	b.n	800d7f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	32b0      	adds	r2, #176	@ 0xb0
 800d734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d738:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d73a:	78fb      	ldrb	r3, [r7, #3]
 800d73c:	f003 020f 	and.w	r2, r3, #15
 800d740:	6879      	ldr	r1, [r7, #4]
 800d742:	4613      	mov	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	440b      	add	r3, r1
 800d74c:	3318      	adds	r3, #24
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d02f      	beq.n	800d7b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d754:	78fb      	ldrb	r3, [r7, #3]
 800d756:	f003 020f 	and.w	r2, r3, #15
 800d75a:	6879      	ldr	r1, [r7, #4]
 800d75c:	4613      	mov	r3, r2
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	4413      	add	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	440b      	add	r3, r1
 800d766:	3318      	adds	r3, #24
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	78fb      	ldrb	r3, [r7, #3]
 800d76c:	f003 010f 	and.w	r1, r3, #15
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	460b      	mov	r3, r1
 800d774:	00db      	lsls	r3, r3, #3
 800d776:	440b      	add	r3, r1
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4403      	add	r3, r0
 800d77c:	331c      	adds	r3, #28
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	fbb2 f1f3 	udiv	r1, r2, r3
 800d784:	fb01 f303 	mul.w	r3, r1, r3
 800d788:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d112      	bne.n	800d7b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d78e:	78fb      	ldrb	r3, [r7, #3]
 800d790:	f003 020f 	and.w	r2, r3, #15
 800d794:	6879      	ldr	r1, [r7, #4]
 800d796:	4613      	mov	r3, r2
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	4413      	add	r3, r2
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	440b      	add	r3, r1
 800d7a0:	3318      	adds	r3, #24
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d7a6:	78f9      	ldrb	r1, [r7, #3]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f004 fd7e 	bl	80122ae <USBD_LL_Transmit>
 800d7b2:	e01f      	b.n	800d7f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	33b0      	adds	r3, #176	@ 0xb0
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4413      	add	r3, r2
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d010      	beq.n	800d7f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	33b0      	adds	r3, #176	@ 0xb0
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	4413      	add	r3, r2
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d7f0:	78fa      	ldrb	r2, [r7, #3]
 800d7f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b084      	sub	sp, #16
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	460b      	mov	r3, r1
 800d808:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	32b0      	adds	r2, #176	@ 0xb0
 800d814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d818:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	32b0      	adds	r2, #176	@ 0xb0
 800d824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d101      	bne.n	800d830 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d82c:	2303      	movs	r3, #3
 800d82e:	e01a      	b.n	800d866 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d830:	78fb      	ldrb	r3, [r7, #3]
 800d832:	4619      	mov	r1, r3
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f004 fd7c 	bl	8012332 <USBD_LL_GetRxDataSize>
 800d83a:	4602      	mov	r2, r0
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	33b0      	adds	r3, #176	@ 0xb0
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d860:	4611      	mov	r1, r2
 800d862:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	32b0      	adds	r2, #176	@ 0xb0
 800d880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d884:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d88c:	2303      	movs	r3, #3
 800d88e:	e024      	b.n	800d8da <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	33b0      	adds	r3, #176	@ 0xb0
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	4413      	add	r3, r2
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d019      	beq.n	800d8d8 <USBD_CDC_EP0_RxReady+0x6a>
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d8aa:	2bff      	cmp	r3, #255	@ 0xff
 800d8ac:	d014      	beq.n	800d8d8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	33b0      	adds	r3, #176	@ 0xb0
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4413      	add	r3, r2
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d8c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d8c8:	68fa      	ldr	r2, [r7, #12]
 800d8ca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d8ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	22ff      	movs	r2, #255	@ 0xff
 800d8d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b086      	sub	sp, #24
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d8ec:	2182      	movs	r1, #130	@ 0x82
 800d8ee:	4818      	ldr	r0, [pc, #96]	@ (800d950 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d8f0:	f000 fd4f 	bl	800e392 <USBD_GetEpDesc>
 800d8f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d8f6:	2101      	movs	r1, #1
 800d8f8:	4815      	ldr	r0, [pc, #84]	@ (800d950 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d8fa:	f000 fd4a 	bl	800e392 <USBD_GetEpDesc>
 800d8fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d900:	2181      	movs	r1, #129	@ 0x81
 800d902:	4813      	ldr	r0, [pc, #76]	@ (800d950 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d904:	f000 fd45 	bl	800e392 <USBD_GetEpDesc>
 800d908:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d002      	beq.n	800d916 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	2210      	movs	r2, #16
 800d914:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d006      	beq.n	800d92a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	2200      	movs	r2, #0
 800d920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d924:	711a      	strb	r2, [r3, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d006      	beq.n	800d93e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d938:	711a      	strb	r2, [r3, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2243      	movs	r2, #67	@ 0x43
 800d942:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d944:	4b02      	ldr	r3, [pc, #8]	@ (800d950 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d946:	4618      	mov	r0, r3
 800d948:	3718      	adds	r7, #24
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	2400004c 	.word	0x2400004c

0800d954 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d95c:	2182      	movs	r1, #130	@ 0x82
 800d95e:	4818      	ldr	r0, [pc, #96]	@ (800d9c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d960:	f000 fd17 	bl	800e392 <USBD_GetEpDesc>
 800d964:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d966:	2101      	movs	r1, #1
 800d968:	4815      	ldr	r0, [pc, #84]	@ (800d9c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d96a:	f000 fd12 	bl	800e392 <USBD_GetEpDesc>
 800d96e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d970:	2181      	movs	r1, #129	@ 0x81
 800d972:	4813      	ldr	r0, [pc, #76]	@ (800d9c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d974:	f000 fd0d 	bl	800e392 <USBD_GetEpDesc>
 800d978:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d002      	beq.n	800d986 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2210      	movs	r2, #16
 800d984:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d006      	beq.n	800d99a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	2200      	movs	r2, #0
 800d990:	711a      	strb	r2, [r3, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	f042 0202 	orr.w	r2, r2, #2
 800d998:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d006      	beq.n	800d9ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	711a      	strb	r2, [r3, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f042 0202 	orr.w	r2, r2, #2
 800d9ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2243      	movs	r2, #67	@ 0x43
 800d9b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d9b4:	4b02      	ldr	r3, [pc, #8]	@ (800d9c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3718      	adds	r7, #24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	2400004c 	.word	0x2400004c

0800d9c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d9cc:	2182      	movs	r1, #130	@ 0x82
 800d9ce:	4818      	ldr	r0, [pc, #96]	@ (800da30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d9d0:	f000 fcdf 	bl	800e392 <USBD_GetEpDesc>
 800d9d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d9d6:	2101      	movs	r1, #1
 800d9d8:	4815      	ldr	r0, [pc, #84]	@ (800da30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d9da:	f000 fcda 	bl	800e392 <USBD_GetEpDesc>
 800d9de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d9e0:	2181      	movs	r1, #129	@ 0x81
 800d9e2:	4813      	ldr	r0, [pc, #76]	@ (800da30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d9e4:	f000 fcd5 	bl	800e392 <USBD_GetEpDesc>
 800d9e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	2210      	movs	r2, #16
 800d9f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d006      	beq.n	800da0a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da04:	711a      	strb	r2, [r3, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d006      	beq.n	800da1e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2200      	movs	r2, #0
 800da14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da18:	711a      	strb	r2, [r3, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2243      	movs	r2, #67	@ 0x43
 800da22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800da24:	4b02      	ldr	r3, [pc, #8]	@ (800da30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800da26:	4618      	mov	r0, r3
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	2400004c 	.word	0x2400004c

0800da34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	220a      	movs	r2, #10
 800da40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800da42:	4b03      	ldr	r3, [pc, #12]	@ (800da50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800da44:	4618      	mov	r0, r3
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	24000008 	.word	0x24000008

0800da54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d101      	bne.n	800da68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800da64:	2303      	movs	r3, #3
 800da66:	e009      	b.n	800da7c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	33b0      	adds	r3, #176	@ 0xb0
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4413      	add	r3, r2
 800da76:	683a      	ldr	r2, [r7, #0]
 800da78:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800da88:	b480      	push	{r7}
 800da8a:	b087      	sub	sp, #28
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	32b0      	adds	r2, #176	@ 0xb0
 800da9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daa2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d101      	bne.n	800daae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800daaa:	2303      	movs	r3, #3
 800daac:	e008      	b.n	800dac0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	371c      	adds	r7, #28
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	32b0      	adds	r2, #176	@ 0xb0
 800dae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dae4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d101      	bne.n	800daf0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800daec:	2303      	movs	r3, #3
 800daee:	e004      	b.n	800dafa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	683a      	ldr	r2, [r7, #0]
 800daf4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
	...

0800db08 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	32b0      	adds	r2, #176	@ 0xb0
 800db1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db1e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800db20:	2301      	movs	r3, #1
 800db22:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d101      	bne.n	800db2e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800db2a:	2303      	movs	r3, #3
 800db2c:	e025      	b.n	800db7a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800db34:	2b00      	cmp	r3, #0
 800db36:	d11f      	bne.n	800db78 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800db40:	4b10      	ldr	r3, [pc, #64]	@ (800db84 <USBD_CDC_TransmitPacket+0x7c>)
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	f003 020f 	and.w	r2, r3, #15
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	4613      	mov	r3, r2
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	4413      	add	r3, r2
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	4403      	add	r3, r0
 800db5a:	3318      	adds	r3, #24
 800db5c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800db5e:	4b09      	ldr	r3, [pc, #36]	@ (800db84 <USBD_CDC_TransmitPacket+0x7c>)
 800db60:	7819      	ldrb	r1, [r3, #0]
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f004 fb9d 	bl	80122ae <USBD_LL_Transmit>

    ret = USBD_OK;
 800db74:	2300      	movs	r3, #0
 800db76:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800db78:	7bfb      	ldrb	r3, [r7, #15]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	2400008f 	.word	0x2400008f

0800db88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	32b0      	adds	r2, #176	@ 0xb0
 800db9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db9e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	32b0      	adds	r2, #176	@ 0xb0
 800dbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d101      	bne.n	800dbb6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dbb2:	2303      	movs	r3, #3
 800dbb4:	e018      	b.n	800dbe8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	7c1b      	ldrb	r3, [r3, #16]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10a      	bne.n	800dbd4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dbbe:	4b0c      	ldr	r3, [pc, #48]	@ (800dbf0 <USBD_CDC_ReceivePacket+0x68>)
 800dbc0:	7819      	ldrb	r1, [r3, #0]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dbc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f004 fb8f 	bl	80122f0 <USBD_LL_PrepareReceive>
 800dbd2:	e008      	b.n	800dbe6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dbd4:	4b06      	ldr	r3, [pc, #24]	@ (800dbf0 <USBD_CDC_ReceivePacket+0x68>)
 800dbd6:	7819      	ldrb	r1, [r3, #0]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dbde:	2340      	movs	r3, #64	@ 0x40
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f004 fb85 	bl	80122f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	24000090 	.word	0x24000090

0800dbf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b086      	sub	sp, #24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d101      	bne.n	800dc0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dc08:	2303      	movs	r3, #3
 800dc0a:	e01f      	b.n	800dc4c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2201      	movs	r2, #1
 800dc36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	79fa      	ldrb	r2, [r7, #7]
 800dc3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f004 f9fb 	bl	801203c <USBD_LL_Init>
 800dc46:	4603      	mov	r3, r0
 800dc48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dc4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3718      	adds	r7, #24
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d101      	bne.n	800dc6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	e025      	b.n	800dcb8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	683a      	ldr	r2, [r7, #0]
 800dc70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	32ae      	adds	r2, #174	@ 0xae
 800dc7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00f      	beq.n	800dca8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	32ae      	adds	r2, #174	@ 0xae
 800dc92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc98:	f107 020e 	add.w	r2, r7, #14
 800dc9c:	4610      	mov	r0, r2
 800dc9e:	4798      	blx	r3
 800dca0:	4602      	mov	r2, r0
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dcae:	1c5a      	adds	r2, r3, #1
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f004 fa07 	bl	80120dc <USBD_LL_Start>
 800dcce:	4603      	mov	r3, r0
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dce0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	370c      	adds	r7, #12
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr

0800dcee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b084      	sub	sp, #16
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d009      	beq.n	800dd1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	78fa      	ldrb	r2, [r7, #3]
 800dd12:	4611      	mov	r1, r2
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	4798      	blx	r3
 800dd18:	4603      	mov	r3, r0
 800dd1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b084      	sub	sp, #16
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
 800dd2e:	460b      	mov	r3, r1
 800dd30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	78fa      	ldrb	r2, [r7, #3]
 800dd40:	4611      	mov	r1, r2
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	4798      	blx	r3
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dd4c:	2303      	movs	r3, #3
 800dd4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b084      	sub	sp, #16
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f001 f936 	bl	800efde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2201      	movs	r2, #1
 800dd76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800dd80:	461a      	mov	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dd8e:	f003 031f 	and.w	r3, r3, #31
 800dd92:	2b02      	cmp	r3, #2
 800dd94:	d01a      	beq.n	800ddcc <USBD_LL_SetupStage+0x72>
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	d822      	bhi.n	800dde0 <USBD_LL_SetupStage+0x86>
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d002      	beq.n	800dda4 <USBD_LL_SetupStage+0x4a>
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d00a      	beq.n	800ddb8 <USBD_LL_SetupStage+0x5e>
 800dda2:	e01d      	b.n	800dde0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ddaa:	4619      	mov	r1, r3
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 fb63 	bl	800e478 <USBD_StdDevReq>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	73fb      	strb	r3, [r7, #15]
      break;
 800ddb6:	e020      	b.n	800ddfa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 fbcb 	bl	800e55c <USBD_StdItfReq>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	73fb      	strb	r3, [r7, #15]
      break;
 800ddca:	e016      	b.n	800ddfa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 fc2d 	bl	800e634 <USBD_StdEPReq>
 800ddda:	4603      	mov	r3, r0
 800dddc:	73fb      	strb	r3, [r7, #15]
      break;
 800ddde:	e00c      	b.n	800ddfa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dde6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	4619      	mov	r1, r3
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f004 f9d4 	bl	801219c <USBD_LL_StallEP>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	73fb      	strb	r3, [r7, #15]
      break;
 800ddf8:	bf00      	nop
  }

  return ret;
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b086      	sub	sp, #24
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	460b      	mov	r3, r1
 800de0e:	607a      	str	r2, [r7, #4]
 800de10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800de12:	2300      	movs	r3, #0
 800de14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800de16:	7afb      	ldrb	r3, [r7, #11]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d16e      	bne.n	800defa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800de22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800de2a:	2b03      	cmp	r3, #3
 800de2c:	f040 8098 	bne.w	800df60 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	689a      	ldr	r2, [r3, #8]
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d913      	bls.n	800de64 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	689a      	ldr	r2, [r3, #8]
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	1ad2      	subs	r2, r2, r3
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	68da      	ldr	r2, [r3, #12]
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	4293      	cmp	r3, r2
 800de54:	bf28      	it	cs
 800de56:	4613      	movcs	r3, r2
 800de58:	461a      	mov	r2, r3
 800de5a:	6879      	ldr	r1, [r7, #4]
 800de5c:	68f8      	ldr	r0, [r7, #12]
 800de5e:	f001 f9be 	bl	800f1de <USBD_CtlContinueRx>
 800de62:	e07d      	b.n	800df60 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800de6a:	f003 031f 	and.w	r3, r3, #31
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d014      	beq.n	800de9c <USBD_LL_DataOutStage+0x98>
 800de72:	2b02      	cmp	r3, #2
 800de74:	d81d      	bhi.n	800deb2 <USBD_LL_DataOutStage+0xae>
 800de76:	2b00      	cmp	r3, #0
 800de78:	d002      	beq.n	800de80 <USBD_LL_DataOutStage+0x7c>
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d003      	beq.n	800de86 <USBD_LL_DataOutStage+0x82>
 800de7e:	e018      	b.n	800deb2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800de80:	2300      	movs	r3, #0
 800de82:	75bb      	strb	r3, [r7, #22]
            break;
 800de84:	e018      	b.n	800deb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	4619      	mov	r1, r3
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f000 fa64 	bl	800e35e <USBD_CoreFindIF>
 800de96:	4603      	mov	r3, r0
 800de98:	75bb      	strb	r3, [r7, #22]
            break;
 800de9a:	e00d      	b.n	800deb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	4619      	mov	r1, r3
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f000 fa66 	bl	800e378 <USBD_CoreFindEP>
 800deac:	4603      	mov	r3, r0
 800deae:	75bb      	strb	r3, [r7, #22]
            break;
 800deb0:	e002      	b.n	800deb8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800deb2:	2300      	movs	r3, #0
 800deb4:	75bb      	strb	r3, [r7, #22]
            break;
 800deb6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800deb8:	7dbb      	ldrb	r3, [r7, #22]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d119      	bne.n	800def2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b03      	cmp	r3, #3
 800dec8:	d113      	bne.n	800def2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800deca:	7dba      	ldrb	r2, [r7, #22]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	32ae      	adds	r2, #174	@ 0xae
 800ded0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00b      	beq.n	800def2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800deda:	7dba      	ldrb	r2, [r7, #22]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dee2:	7dba      	ldrb	r2, [r7, #22]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	32ae      	adds	r2, #174	@ 0xae
 800dee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f001 f984 	bl	800f200 <USBD_CtlSendStatus>
 800def8:	e032      	b.n	800df60 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800defa:	7afb      	ldrb	r3, [r7, #11]
 800defc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df00:	b2db      	uxtb	r3, r3
 800df02:	4619      	mov	r1, r3
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f000 fa37 	bl	800e378 <USBD_CoreFindEP>
 800df0a:	4603      	mov	r3, r0
 800df0c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df0e:	7dbb      	ldrb	r3, [r7, #22]
 800df10:	2bff      	cmp	r3, #255	@ 0xff
 800df12:	d025      	beq.n	800df60 <USBD_LL_DataOutStage+0x15c>
 800df14:	7dbb      	ldrb	r3, [r7, #22]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d122      	bne.n	800df60 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df20:	b2db      	uxtb	r3, r3
 800df22:	2b03      	cmp	r3, #3
 800df24:	d117      	bne.n	800df56 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800df26:	7dba      	ldrb	r2, [r7, #22]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	32ae      	adds	r2, #174	@ 0xae
 800df2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df30:	699b      	ldr	r3, [r3, #24]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00f      	beq.n	800df56 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800df36:	7dba      	ldrb	r2, [r7, #22]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800df3e:	7dba      	ldrb	r2, [r7, #22]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	32ae      	adds	r2, #174	@ 0xae
 800df44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df48:	699b      	ldr	r3, [r3, #24]
 800df4a:	7afa      	ldrb	r2, [r7, #11]
 800df4c:	4611      	mov	r1, r2
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	4798      	blx	r3
 800df52:	4603      	mov	r3, r0
 800df54:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800df56:	7dfb      	ldrb	r3, [r7, #23]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d001      	beq.n	800df60 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800df5c:	7dfb      	ldrb	r3, [r7, #23]
 800df5e:	e000      	b.n	800df62 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800df60:	2300      	movs	r3, #0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b086      	sub	sp, #24
 800df6e:	af00      	add	r7, sp, #0
 800df70:	60f8      	str	r0, [r7, #12]
 800df72:	460b      	mov	r3, r1
 800df74:	607a      	str	r2, [r7, #4]
 800df76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800df78:	7afb      	ldrb	r3, [r7, #11]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d16f      	bne.n	800e05e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3314      	adds	r3, #20
 800df82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800df8a:	2b02      	cmp	r3, #2
 800df8c:	d15a      	bne.n	800e044 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	689a      	ldr	r2, [r3, #8]
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	429a      	cmp	r2, r3
 800df98:	d914      	bls.n	800dfc4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	689a      	ldr	r2, [r3, #8]
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	1ad2      	subs	r2, r2, r3
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	461a      	mov	r2, r3
 800dfae:	6879      	ldr	r1, [r7, #4]
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f001 f8e6 	bl	800f182 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	2200      	movs	r2, #0
 800dfba:	2100      	movs	r1, #0
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f004 f997 	bl	80122f0 <USBD_LL_PrepareReceive>
 800dfc2:	e03f      	b.n	800e044 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	68da      	ldr	r2, [r3, #12]
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d11c      	bne.n	800e00a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d316      	bcc.n	800e00a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	685a      	ldr	r2, [r3, #4]
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d20f      	bcs.n	800e00a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dfea:	2200      	movs	r2, #0
 800dfec:	2100      	movs	r1, #0
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	f001 f8c7 	bl	800f182 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2200      	movs	r2, #0
 800dff8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dffc:	2300      	movs	r3, #0
 800dffe:	2200      	movs	r2, #0
 800e000:	2100      	movs	r1, #0
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f004 f974 	bl	80122f0 <USBD_LL_PrepareReceive>
 800e008:	e01c      	b.n	800e044 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b03      	cmp	r3, #3
 800e014:	d10f      	bne.n	800e036 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d009      	beq.n	800e036 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e036:	2180      	movs	r1, #128	@ 0x80
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f004 f8af 	bl	801219c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f001 f8f1 	bl	800f226 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d03a      	beq.n	800e0c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	f7ff fe42 	bl	800dcd8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2200      	movs	r2, #0
 800e058:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e05c:	e032      	b.n	800e0c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e05e:	7afb      	ldrb	r3, [r7, #11]
 800e060:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e064:	b2db      	uxtb	r3, r3
 800e066:	4619      	mov	r1, r3
 800e068:	68f8      	ldr	r0, [r7, #12]
 800e06a:	f000 f985 	bl	800e378 <USBD_CoreFindEP>
 800e06e:	4603      	mov	r3, r0
 800e070:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e072:	7dfb      	ldrb	r3, [r7, #23]
 800e074:	2bff      	cmp	r3, #255	@ 0xff
 800e076:	d025      	beq.n	800e0c4 <USBD_LL_DataInStage+0x15a>
 800e078:	7dfb      	ldrb	r3, [r7, #23]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d122      	bne.n	800e0c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e084:	b2db      	uxtb	r3, r3
 800e086:	2b03      	cmp	r3, #3
 800e088:	d11c      	bne.n	800e0c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e08a:	7dfa      	ldrb	r2, [r7, #23]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	32ae      	adds	r2, #174	@ 0xae
 800e090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e094:	695b      	ldr	r3, [r3, #20]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d014      	beq.n	800e0c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e09a:	7dfa      	ldrb	r2, [r7, #23]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e0a2:	7dfa      	ldrb	r2, [r7, #23]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	32ae      	adds	r2, #174	@ 0xae
 800e0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ac:	695b      	ldr	r3, [r3, #20]
 800e0ae:	7afa      	ldrb	r2, [r7, #11]
 800e0b0:	4611      	mov	r1, r2
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	4798      	blx	r3
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e0ba:	7dbb      	ldrb	r3, [r7, #22]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d001      	beq.n	800e0c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e0c0:	7dbb      	ldrb	r3, [r7, #22]
 800e0c2:	e000      	b.n	800e0c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e106:	2b00      	cmp	r3, #0
 800e108:	d014      	beq.n	800e134 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00e      	beq.n	800e134 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	6852      	ldr	r2, [r2, #4]
 800e122:	b2d2      	uxtb	r2, r2
 800e124:	4611      	mov	r1, r2
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	4798      	blx	r3
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e130:	2303      	movs	r3, #3
 800e132:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e134:	2340      	movs	r3, #64	@ 0x40
 800e136:	2200      	movs	r2, #0
 800e138:	2100      	movs	r1, #0
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f003 ffe9 	bl	8012112 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2201      	movs	r2, #1
 800e144:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2240      	movs	r2, #64	@ 0x40
 800e14c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e150:	2340      	movs	r3, #64	@ 0x40
 800e152:	2200      	movs	r2, #0
 800e154:	2180      	movs	r1, #128	@ 0x80
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f003 ffdb 	bl	8012112 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2240      	movs	r2, #64	@ 0x40
 800e166:	621a      	str	r2, [r3, #32]

  return ret;
 800e168:	7bfb      	ldrb	r3, [r7, #15]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e172:	b480      	push	{r7}
 800e174:	b083      	sub	sp, #12
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
 800e17a:	460b      	mov	r3, r1
 800e17c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	78fa      	ldrb	r2, [r7, #3]
 800e182:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	370c      	adds	r7, #12
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e192:	b480      	push	{r7}
 800e194:	b083      	sub	sp, #12
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	2b04      	cmp	r3, #4
 800e1a4:	d006      	beq.n	800e1b4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2204      	movs	r2, #4
 800e1b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	370c      	adds	r7, #12
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr

0800e1ca <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e1ca:	b480      	push	{r7}
 800e1cc:	b083      	sub	sp, #12
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	2b04      	cmp	r3, #4
 800e1dc:	d106      	bne.n	800e1ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e1ec:	2300      	movs	r3, #0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	370c      	adds	r7, #12
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b082      	sub	sp, #8
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	2b03      	cmp	r3, #3
 800e20c:	d110      	bne.n	800e230 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00b      	beq.n	800e230 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e21e:	69db      	ldr	r3, [r3, #28]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d005      	beq.n	800e230 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e22a:	69db      	ldr	r3, [r3, #28]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e230:	2300      	movs	r3, #0
}
 800e232:	4618      	mov	r0, r3
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}

0800e23a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e23a:	b580      	push	{r7, lr}
 800e23c:	b082      	sub	sp, #8
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	460b      	mov	r3, r1
 800e244:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	32ae      	adds	r2, #174	@ 0xae
 800e250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d101      	bne.n	800e25c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e258:	2303      	movs	r3, #3
 800e25a:	e01c      	b.n	800e296 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e262:	b2db      	uxtb	r3, r3
 800e264:	2b03      	cmp	r3, #3
 800e266:	d115      	bne.n	800e294 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	32ae      	adds	r2, #174	@ 0xae
 800e272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e276:	6a1b      	ldr	r3, [r3, #32]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00b      	beq.n	800e294 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	32ae      	adds	r2, #174	@ 0xae
 800e286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e28a:	6a1b      	ldr	r3, [r3, #32]
 800e28c:	78fa      	ldrb	r2, [r7, #3]
 800e28e:	4611      	mov	r1, r2
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b082      	sub	sp, #8
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	32ae      	adds	r2, #174	@ 0xae
 800e2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d101      	bne.n	800e2c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e2bc:	2303      	movs	r3, #3
 800e2be:	e01c      	b.n	800e2fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b03      	cmp	r3, #3
 800e2ca:	d115      	bne.n	800e2f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	32ae      	adds	r2, #174	@ 0xae
 800e2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00b      	beq.n	800e2f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	32ae      	adds	r2, #174	@ 0xae
 800e2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f0:	78fa      	ldrb	r2, [r7, #3]
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e2f8:	2300      	movs	r3, #0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e302:	b480      	push	{r7}
 800e304:	b083      	sub	sp, #12
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2201      	movs	r2, #1
 800e328:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00e      	beq.n	800e354 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	6852      	ldr	r2, [r2, #4]
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	4611      	mov	r1, r2
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	4798      	blx	r3
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e350:	2303      	movs	r3, #3
 800e352:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e354:	7bfb      	ldrb	r3, [r7, #15]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e35e:	b480      	push	{r7}
 800e360:	b083      	sub	sp, #12
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
 800e366:	460b      	mov	r3, r1
 800e368:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e36a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	460b      	mov	r3, r1
 800e382:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e384:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e386:	4618      	mov	r0, r3
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr

0800e392 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b086      	sub	sp, #24
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	460b      	mov	r3, r1
 800e39c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	885b      	ldrh	r3, [r3, #2]
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	7812      	ldrb	r2, [r2, #0]
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d91f      	bls.n	800e3f8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e3be:	e013      	b.n	800e3e8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e3c0:	f107 030a 	add.w	r3, r7, #10
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	6978      	ldr	r0, [r7, #20]
 800e3c8:	f000 f81b 	bl	800e402 <USBD_GetNextDesc>
 800e3cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	785b      	ldrb	r3, [r3, #1]
 800e3d2:	2b05      	cmp	r3, #5
 800e3d4:	d108      	bne.n	800e3e8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	789b      	ldrb	r3, [r3, #2]
 800e3de:	78fa      	ldrb	r2, [r7, #3]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d008      	beq.n	800e3f6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	885b      	ldrh	r3, [r3, #2]
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	897b      	ldrh	r3, [r7, #10]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d8e5      	bhi.n	800e3c0 <USBD_GetEpDesc+0x2e>
 800e3f4:	e000      	b.n	800e3f8 <USBD_GetEpDesc+0x66>
          break;
 800e3f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e3f8:	693b      	ldr	r3, [r7, #16]
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3718      	adds	r7, #24
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e402:	b480      	push	{r7}
 800e404:	b085      	sub	sp, #20
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
 800e40a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	881b      	ldrh	r3, [r3, #0]
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	7812      	ldrb	r2, [r2, #0]
 800e418:	4413      	add	r3, r2
 800e41a:	b29a      	uxth	r2, r3
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	461a      	mov	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4413      	add	r3, r2
 800e42a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e42c:	68fb      	ldr	r3, [r7, #12]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3714      	adds	r7, #20
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr

0800e43a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e43a:	b480      	push	{r7}
 800e43c:	b087      	sub	sp, #28
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	3301      	adds	r3, #1
 800e450:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e458:	8a3b      	ldrh	r3, [r7, #16]
 800e45a:	021b      	lsls	r3, r3, #8
 800e45c:	b21a      	sxth	r2, r3
 800e45e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e462:	4313      	orrs	r3, r2
 800e464:	b21b      	sxth	r3, r3
 800e466:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e468:	89fb      	ldrh	r3, [r7, #14]
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	371c      	adds	r7, #28
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
	...

0800e478 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e482:	2300      	movs	r3, #0
 800e484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e48e:	2b40      	cmp	r3, #64	@ 0x40
 800e490:	d005      	beq.n	800e49e <USBD_StdDevReq+0x26>
 800e492:	2b40      	cmp	r3, #64	@ 0x40
 800e494:	d857      	bhi.n	800e546 <USBD_StdDevReq+0xce>
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00f      	beq.n	800e4ba <USBD_StdDevReq+0x42>
 800e49a:	2b20      	cmp	r3, #32
 800e49c:	d153      	bne.n	800e546 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	32ae      	adds	r2, #174	@ 0xae
 800e4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	6839      	ldr	r1, [r7, #0]
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	4798      	blx	r3
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800e4b8:	e04a      	b.n	800e550 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	785b      	ldrb	r3, [r3, #1]
 800e4be:	2b09      	cmp	r3, #9
 800e4c0:	d83b      	bhi.n	800e53a <USBD_StdDevReq+0xc2>
 800e4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800e4c8 <USBD_StdDevReq+0x50>)
 800e4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c8:	0800e51d 	.word	0x0800e51d
 800e4cc:	0800e531 	.word	0x0800e531
 800e4d0:	0800e53b 	.word	0x0800e53b
 800e4d4:	0800e527 	.word	0x0800e527
 800e4d8:	0800e53b 	.word	0x0800e53b
 800e4dc:	0800e4fb 	.word	0x0800e4fb
 800e4e0:	0800e4f1 	.word	0x0800e4f1
 800e4e4:	0800e53b 	.word	0x0800e53b
 800e4e8:	0800e513 	.word	0x0800e513
 800e4ec:	0800e505 	.word	0x0800e505
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e4f0:	6839      	ldr	r1, [r7, #0]
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 fa3c 	bl	800e970 <USBD_GetDescriptor>
          break;
 800e4f8:	e024      	b.n	800e544 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e4fa:	6839      	ldr	r1, [r7, #0]
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 fbcb 	bl	800ec98 <USBD_SetAddress>
          break;
 800e502:	e01f      	b.n	800e544 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e504:	6839      	ldr	r1, [r7, #0]
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fc0a 	bl	800ed20 <USBD_SetConfig>
 800e50c:	4603      	mov	r3, r0
 800e50e:	73fb      	strb	r3, [r7, #15]
          break;
 800e510:	e018      	b.n	800e544 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e512:	6839      	ldr	r1, [r7, #0]
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 fcad 	bl	800ee74 <USBD_GetConfig>
          break;
 800e51a:	e013      	b.n	800e544 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e51c:	6839      	ldr	r1, [r7, #0]
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 fcde 	bl	800eee0 <USBD_GetStatus>
          break;
 800e524:	e00e      	b.n	800e544 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e526:	6839      	ldr	r1, [r7, #0]
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 fd0d 	bl	800ef48 <USBD_SetFeature>
          break;
 800e52e:	e009      	b.n	800e544 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 fd31 	bl	800ef9a <USBD_ClrFeature>
          break;
 800e538:	e004      	b.n	800e544 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e53a:	6839      	ldr	r1, [r7, #0]
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 fd88 	bl	800f052 <USBD_CtlError>
          break;
 800e542:	bf00      	nop
      }
      break;
 800e544:	e004      	b.n	800e550 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e546:	6839      	ldr	r1, [r7, #0]
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 fd82 	bl	800f052 <USBD_CtlError>
      break;
 800e54e:	bf00      	nop
  }

  return ret;
 800e550:	7bfb      	ldrb	r3, [r7, #15]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop

0800e55c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e566:	2300      	movs	r3, #0
 800e568:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e572:	2b40      	cmp	r3, #64	@ 0x40
 800e574:	d005      	beq.n	800e582 <USBD_StdItfReq+0x26>
 800e576:	2b40      	cmp	r3, #64	@ 0x40
 800e578:	d852      	bhi.n	800e620 <USBD_StdItfReq+0xc4>
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d001      	beq.n	800e582 <USBD_StdItfReq+0x26>
 800e57e:	2b20      	cmp	r3, #32
 800e580:	d14e      	bne.n	800e620 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	3b01      	subs	r3, #1
 800e58c:	2b02      	cmp	r3, #2
 800e58e:	d840      	bhi.n	800e612 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	889b      	ldrh	r3, [r3, #4]
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b01      	cmp	r3, #1
 800e598:	d836      	bhi.n	800e608 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	889b      	ldrh	r3, [r3, #4]
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f7ff fedb 	bl	800e35e <USBD_CoreFindIF>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e5ac:	7bbb      	ldrb	r3, [r7, #14]
 800e5ae:	2bff      	cmp	r3, #255	@ 0xff
 800e5b0:	d01d      	beq.n	800e5ee <USBD_StdItfReq+0x92>
 800e5b2:	7bbb      	ldrb	r3, [r7, #14]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d11a      	bne.n	800e5ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e5b8:	7bba      	ldrb	r2, [r7, #14]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	32ae      	adds	r2, #174	@ 0xae
 800e5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5c2:	689b      	ldr	r3, [r3, #8]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00f      	beq.n	800e5e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e5c8:	7bba      	ldrb	r2, [r7, #14]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e5d0:	7bba      	ldrb	r2, [r7, #14]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	32ae      	adds	r2, #174	@ 0xae
 800e5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	6839      	ldr	r1, [r7, #0]
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	4798      	blx	r3
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e5e6:	e004      	b.n	800e5f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e5ec:	e001      	b.n	800e5f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e5ee:	2303      	movs	r3, #3
 800e5f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	88db      	ldrh	r3, [r3, #6]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d110      	bne.n	800e61c <USBD_StdItfReq+0xc0>
 800e5fa:	7bfb      	ldrb	r3, [r7, #15]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d10d      	bne.n	800e61c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 fdfd 	bl	800f200 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e606:	e009      	b.n	800e61c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e608:	6839      	ldr	r1, [r7, #0]
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 fd21 	bl	800f052 <USBD_CtlError>
          break;
 800e610:	e004      	b.n	800e61c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e612:	6839      	ldr	r1, [r7, #0]
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 fd1c 	bl	800f052 <USBD_CtlError>
          break;
 800e61a:	e000      	b.n	800e61e <USBD_StdItfReq+0xc2>
          break;
 800e61c:	bf00      	nop
      }
      break;
 800e61e:	e004      	b.n	800e62a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e620:	6839      	ldr	r1, [r7, #0]
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 fd15 	bl	800f052 <USBD_CtlError>
      break;
 800e628:	bf00      	nop
  }

  return ret;
 800e62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3710      	adds	r7, #16
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e63e:	2300      	movs	r3, #0
 800e640:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	889b      	ldrh	r3, [r3, #4]
 800e646:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e650:	2b40      	cmp	r3, #64	@ 0x40
 800e652:	d007      	beq.n	800e664 <USBD_StdEPReq+0x30>
 800e654:	2b40      	cmp	r3, #64	@ 0x40
 800e656:	f200 817f 	bhi.w	800e958 <USBD_StdEPReq+0x324>
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d02a      	beq.n	800e6b4 <USBD_StdEPReq+0x80>
 800e65e:	2b20      	cmp	r3, #32
 800e660:	f040 817a 	bne.w	800e958 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e664:	7bbb      	ldrb	r3, [r7, #14]
 800e666:	4619      	mov	r1, r3
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7ff fe85 	bl	800e378 <USBD_CoreFindEP>
 800e66e:	4603      	mov	r3, r0
 800e670:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e672:	7b7b      	ldrb	r3, [r7, #13]
 800e674:	2bff      	cmp	r3, #255	@ 0xff
 800e676:	f000 8174 	beq.w	800e962 <USBD_StdEPReq+0x32e>
 800e67a:	7b7b      	ldrb	r3, [r7, #13]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f040 8170 	bne.w	800e962 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e682:	7b7a      	ldrb	r2, [r7, #13]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e68a:	7b7a      	ldrb	r2, [r7, #13]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	32ae      	adds	r2, #174	@ 0xae
 800e690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	2b00      	cmp	r3, #0
 800e698:	f000 8163 	beq.w	800e962 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e69c:	7b7a      	ldrb	r2, [r7, #13]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	32ae      	adds	r2, #174	@ 0xae
 800e6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	6839      	ldr	r1, [r7, #0]
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	4798      	blx	r3
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e6b2:	e156      	b.n	800e962 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	785b      	ldrb	r3, [r3, #1]
 800e6b8:	2b03      	cmp	r3, #3
 800e6ba:	d008      	beq.n	800e6ce <USBD_StdEPReq+0x9a>
 800e6bc:	2b03      	cmp	r3, #3
 800e6be:	f300 8145 	bgt.w	800e94c <USBD_StdEPReq+0x318>
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	f000 809b 	beq.w	800e7fe <USBD_StdEPReq+0x1ca>
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d03c      	beq.n	800e746 <USBD_StdEPReq+0x112>
 800e6cc:	e13e      	b.n	800e94c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d002      	beq.n	800e6e0 <USBD_StdEPReq+0xac>
 800e6da:	2b03      	cmp	r3, #3
 800e6dc:	d016      	beq.n	800e70c <USBD_StdEPReq+0xd8>
 800e6de:	e02c      	b.n	800e73a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e6e0:	7bbb      	ldrb	r3, [r7, #14]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00d      	beq.n	800e702 <USBD_StdEPReq+0xce>
 800e6e6:	7bbb      	ldrb	r3, [r7, #14]
 800e6e8:	2b80      	cmp	r3, #128	@ 0x80
 800e6ea:	d00a      	beq.n	800e702 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e6ec:	7bbb      	ldrb	r3, [r7, #14]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f003 fd53 	bl	801219c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e6f6:	2180      	movs	r1, #128	@ 0x80
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f003 fd4f 	bl	801219c <USBD_LL_StallEP>
 800e6fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e700:	e020      	b.n	800e744 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e702:	6839      	ldr	r1, [r7, #0]
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 fca4 	bl	800f052 <USBD_CtlError>
              break;
 800e70a:	e01b      	b.n	800e744 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	885b      	ldrh	r3, [r3, #2]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d10e      	bne.n	800e732 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e714:	7bbb      	ldrb	r3, [r7, #14]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00b      	beq.n	800e732 <USBD_StdEPReq+0xfe>
 800e71a:	7bbb      	ldrb	r3, [r7, #14]
 800e71c:	2b80      	cmp	r3, #128	@ 0x80
 800e71e:	d008      	beq.n	800e732 <USBD_StdEPReq+0xfe>
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	88db      	ldrh	r3, [r3, #6]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d104      	bne.n	800e732 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e728:	7bbb      	ldrb	r3, [r7, #14]
 800e72a:	4619      	mov	r1, r3
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f003 fd35 	bl	801219c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 fd64 	bl	800f200 <USBD_CtlSendStatus>

              break;
 800e738:	e004      	b.n	800e744 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fc88 	bl	800f052 <USBD_CtlError>
              break;
 800e742:	bf00      	nop
          }
          break;
 800e744:	e107      	b.n	800e956 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	2b02      	cmp	r3, #2
 800e750:	d002      	beq.n	800e758 <USBD_StdEPReq+0x124>
 800e752:	2b03      	cmp	r3, #3
 800e754:	d016      	beq.n	800e784 <USBD_StdEPReq+0x150>
 800e756:	e04b      	b.n	800e7f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e758:	7bbb      	ldrb	r3, [r7, #14]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d00d      	beq.n	800e77a <USBD_StdEPReq+0x146>
 800e75e:	7bbb      	ldrb	r3, [r7, #14]
 800e760:	2b80      	cmp	r3, #128	@ 0x80
 800e762:	d00a      	beq.n	800e77a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e764:	7bbb      	ldrb	r3, [r7, #14]
 800e766:	4619      	mov	r1, r3
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f003 fd17 	bl	801219c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e76e:	2180      	movs	r1, #128	@ 0x80
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f003 fd13 	bl	801219c <USBD_LL_StallEP>
 800e776:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e778:	e040      	b.n	800e7fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e77a:	6839      	ldr	r1, [r7, #0]
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 fc68 	bl	800f052 <USBD_CtlError>
              break;
 800e782:	e03b      	b.n	800e7fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	885b      	ldrh	r3, [r3, #2]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d136      	bne.n	800e7fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e78c:	7bbb      	ldrb	r3, [r7, #14]
 800e78e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e792:	2b00      	cmp	r3, #0
 800e794:	d004      	beq.n	800e7a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e796:	7bbb      	ldrb	r3, [r7, #14]
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f003 fd1d 	bl	80121da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 fd2d 	bl	800f200 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e7a6:	7bbb      	ldrb	r3, [r7, #14]
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f7ff fde4 	bl	800e378 <USBD_CoreFindEP>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e7b4:	7b7b      	ldrb	r3, [r7, #13]
 800e7b6:	2bff      	cmp	r3, #255	@ 0xff
 800e7b8:	d01f      	beq.n	800e7fa <USBD_StdEPReq+0x1c6>
 800e7ba:	7b7b      	ldrb	r3, [r7, #13]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d11c      	bne.n	800e7fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e7c0:	7b7a      	ldrb	r2, [r7, #13]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e7c8:	7b7a      	ldrb	r2, [r7, #13]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	32ae      	adds	r2, #174	@ 0xae
 800e7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7d2:	689b      	ldr	r3, [r3, #8]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d010      	beq.n	800e7fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e7d8:	7b7a      	ldrb	r2, [r7, #13]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	32ae      	adds	r2, #174	@ 0xae
 800e7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	6839      	ldr	r1, [r7, #0]
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	4798      	blx	r3
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e7ee:	e004      	b.n	800e7fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e7f0:	6839      	ldr	r1, [r7, #0]
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 fc2d 	bl	800f052 <USBD_CtlError>
              break;
 800e7f8:	e000      	b.n	800e7fc <USBD_StdEPReq+0x1c8>
              break;
 800e7fa:	bf00      	nop
          }
          break;
 800e7fc:	e0ab      	b.n	800e956 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b02      	cmp	r3, #2
 800e808:	d002      	beq.n	800e810 <USBD_StdEPReq+0x1dc>
 800e80a:	2b03      	cmp	r3, #3
 800e80c:	d032      	beq.n	800e874 <USBD_StdEPReq+0x240>
 800e80e:	e097      	b.n	800e940 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e810:	7bbb      	ldrb	r3, [r7, #14]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d007      	beq.n	800e826 <USBD_StdEPReq+0x1f2>
 800e816:	7bbb      	ldrb	r3, [r7, #14]
 800e818:	2b80      	cmp	r3, #128	@ 0x80
 800e81a:	d004      	beq.n	800e826 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fc17 	bl	800f052 <USBD_CtlError>
                break;
 800e824:	e091      	b.n	800e94a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e826:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	da0b      	bge.n	800e846 <USBD_StdEPReq+0x212>
 800e82e:	7bbb      	ldrb	r3, [r7, #14]
 800e830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e834:	4613      	mov	r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	4413      	add	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	3310      	adds	r3, #16
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	4413      	add	r3, r2
 800e842:	3304      	adds	r3, #4
 800e844:	e00b      	b.n	800e85e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e846:	7bbb      	ldrb	r3, [r7, #14]
 800e848:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e84c:	4613      	mov	r3, r2
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	4413      	add	r3, r2
 800e852:	009b      	lsls	r3, r3, #2
 800e854:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	4413      	add	r3, r2
 800e85c:	3304      	adds	r3, #4
 800e85e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	2202      	movs	r2, #2
 800e86a:	4619      	mov	r1, r3
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fc6d 	bl	800f14c <USBD_CtlSendData>
              break;
 800e872:	e06a      	b.n	800e94a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	da11      	bge.n	800e8a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e87c:	7bbb      	ldrb	r3, [r7, #14]
 800e87e:	f003 020f 	and.w	r2, r3, #15
 800e882:	6879      	ldr	r1, [r7, #4]
 800e884:	4613      	mov	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4413      	add	r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	440b      	add	r3, r1
 800e88e:	3324      	adds	r3, #36	@ 0x24
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d117      	bne.n	800e8c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e896:	6839      	ldr	r1, [r7, #0]
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 fbda 	bl	800f052 <USBD_CtlError>
                  break;
 800e89e:	e054      	b.n	800e94a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e8a0:	7bbb      	ldrb	r3, [r7, #14]
 800e8a2:	f003 020f 	and.w	r2, r3, #15
 800e8a6:	6879      	ldr	r1, [r7, #4]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	4413      	add	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	440b      	add	r3, r1
 800e8b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e8b6:	881b      	ldrh	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d104      	bne.n	800e8c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e8bc:	6839      	ldr	r1, [r7, #0]
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 fbc7 	bl	800f052 <USBD_CtlError>
                  break;
 800e8c4:	e041      	b.n	800e94a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	da0b      	bge.n	800e8e6 <USBD_StdEPReq+0x2b2>
 800e8ce:	7bbb      	ldrb	r3, [r7, #14]
 800e8d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	4413      	add	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	3310      	adds	r3, #16
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	4413      	add	r3, r2
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	e00b      	b.n	800e8fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e8e6:	7bbb      	ldrb	r3, [r7, #14]
 800e8e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	4413      	add	r3, r2
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e900:	7bbb      	ldrb	r3, [r7, #14]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d002      	beq.n	800e90c <USBD_StdEPReq+0x2d8>
 800e906:	7bbb      	ldrb	r3, [r7, #14]
 800e908:	2b80      	cmp	r3, #128	@ 0x80
 800e90a:	d103      	bne.n	800e914 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	2200      	movs	r2, #0
 800e910:	601a      	str	r2, [r3, #0]
 800e912:	e00e      	b.n	800e932 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e914:	7bbb      	ldrb	r3, [r7, #14]
 800e916:	4619      	mov	r1, r3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f003 fc7d 	bl	8012218 <USBD_LL_IsStallEP>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d003      	beq.n	800e92c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	2201      	movs	r2, #1
 800e928:	601a      	str	r2, [r3, #0]
 800e92a:	e002      	b.n	800e932 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	2200      	movs	r2, #0
 800e930:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	2202      	movs	r2, #2
 800e936:	4619      	mov	r1, r3
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 fc07 	bl	800f14c <USBD_CtlSendData>
              break;
 800e93e:	e004      	b.n	800e94a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e940:	6839      	ldr	r1, [r7, #0]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 fb85 	bl	800f052 <USBD_CtlError>
              break;
 800e948:	bf00      	nop
          }
          break;
 800e94a:	e004      	b.n	800e956 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e94c:	6839      	ldr	r1, [r7, #0]
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 fb7f 	bl	800f052 <USBD_CtlError>
          break;
 800e954:	bf00      	nop
      }
      break;
 800e956:	e005      	b.n	800e964 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e958:	6839      	ldr	r1, [r7, #0]
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f000 fb79 	bl	800f052 <USBD_CtlError>
      break;
 800e960:	e000      	b.n	800e964 <USBD_StdEPReq+0x330>
      break;
 800e962:	bf00      	nop
  }

  return ret;
 800e964:	7bfb      	ldrb	r3, [r7, #15]
}
 800e966:	4618      	mov	r0, r3
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
	...

0800e970 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e97a:	2300      	movs	r3, #0
 800e97c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e97e:	2300      	movs	r3, #0
 800e980:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e982:	2300      	movs	r3, #0
 800e984:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	885b      	ldrh	r3, [r3, #2]
 800e98a:	0a1b      	lsrs	r3, r3, #8
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	3b01      	subs	r3, #1
 800e990:	2b0e      	cmp	r3, #14
 800e992:	f200 8152 	bhi.w	800ec3a <USBD_GetDescriptor+0x2ca>
 800e996:	a201      	add	r2, pc, #4	@ (adr r2, 800e99c <USBD_GetDescriptor+0x2c>)
 800e998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99c:	0800ea0d 	.word	0x0800ea0d
 800e9a0:	0800ea25 	.word	0x0800ea25
 800e9a4:	0800ea65 	.word	0x0800ea65
 800e9a8:	0800ec3b 	.word	0x0800ec3b
 800e9ac:	0800ec3b 	.word	0x0800ec3b
 800e9b0:	0800ebdb 	.word	0x0800ebdb
 800e9b4:	0800ec07 	.word	0x0800ec07
 800e9b8:	0800ec3b 	.word	0x0800ec3b
 800e9bc:	0800ec3b 	.word	0x0800ec3b
 800e9c0:	0800ec3b 	.word	0x0800ec3b
 800e9c4:	0800ec3b 	.word	0x0800ec3b
 800e9c8:	0800ec3b 	.word	0x0800ec3b
 800e9cc:	0800ec3b 	.word	0x0800ec3b
 800e9d0:	0800ec3b 	.word	0x0800ec3b
 800e9d4:	0800e9d9 	.word	0x0800e9d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9de:	69db      	ldr	r3, [r3, #28]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00b      	beq.n	800e9fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9ea:	69db      	ldr	r3, [r3, #28]
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	7c12      	ldrb	r2, [r2, #16]
 800e9f0:	f107 0108 	add.w	r1, r7, #8
 800e9f4:	4610      	mov	r0, r2
 800e9f6:	4798      	blx	r3
 800e9f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9fa:	e126      	b.n	800ec4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e9fc:	6839      	ldr	r1, [r7, #0]
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 fb27 	bl	800f052 <USBD_CtlError>
        err++;
 800ea04:	7afb      	ldrb	r3, [r7, #11]
 800ea06:	3301      	adds	r3, #1
 800ea08:	72fb      	strb	r3, [r7, #11]
      break;
 800ea0a:	e11e      	b.n	800ec4a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	7c12      	ldrb	r2, [r2, #16]
 800ea18:	f107 0108 	add.w	r1, r7, #8
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	4798      	blx	r3
 800ea20:	60f8      	str	r0, [r7, #12]
      break;
 800ea22:	e112      	b.n	800ec4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	7c1b      	ldrb	r3, [r3, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10d      	bne.n	800ea48 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea34:	f107 0208 	add.w	r2, r7, #8
 800ea38:	4610      	mov	r0, r2
 800ea3a:	4798      	blx	r3
 800ea3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	3301      	adds	r3, #1
 800ea42:	2202      	movs	r2, #2
 800ea44:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ea46:	e100      	b.n	800ec4a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea50:	f107 0208 	add.w	r2, r7, #8
 800ea54:	4610      	mov	r0, r2
 800ea56:	4798      	blx	r3
 800ea58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	2202      	movs	r2, #2
 800ea60:	701a      	strb	r2, [r3, #0]
      break;
 800ea62:	e0f2      	b.n	800ec4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	885b      	ldrh	r3, [r3, #2]
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	2b05      	cmp	r3, #5
 800ea6c:	f200 80ac 	bhi.w	800ebc8 <USBD_GetDescriptor+0x258>
 800ea70:	a201      	add	r2, pc, #4	@ (adr r2, 800ea78 <USBD_GetDescriptor+0x108>)
 800ea72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea76:	bf00      	nop
 800ea78:	0800ea91 	.word	0x0800ea91
 800ea7c:	0800eac5 	.word	0x0800eac5
 800ea80:	0800eaf9 	.word	0x0800eaf9
 800ea84:	0800eb2d 	.word	0x0800eb2d
 800ea88:	0800eb61 	.word	0x0800eb61
 800ea8c:	0800eb95 	.word	0x0800eb95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00b      	beq.n	800eab4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	7c12      	ldrb	r2, [r2, #16]
 800eaa8:	f107 0108 	add.w	r1, r7, #8
 800eaac:	4610      	mov	r0, r2
 800eaae:	4798      	blx	r3
 800eab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eab2:	e091      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eab4:	6839      	ldr	r1, [r7, #0]
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 facb 	bl	800f052 <USBD_CtlError>
            err++;
 800eabc:	7afb      	ldrb	r3, [r7, #11]
 800eabe:	3301      	adds	r3, #1
 800eac0:	72fb      	strb	r3, [r7, #11]
          break;
 800eac2:	e089      	b.n	800ebd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00b      	beq.n	800eae8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	7c12      	ldrb	r2, [r2, #16]
 800eadc:	f107 0108 	add.w	r1, r7, #8
 800eae0:	4610      	mov	r0, r2
 800eae2:	4798      	blx	r3
 800eae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eae6:	e077      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 fab1 	bl	800f052 <USBD_CtlError>
            err++;
 800eaf0:	7afb      	ldrb	r3, [r7, #11]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	72fb      	strb	r3, [r7, #11]
          break;
 800eaf6:	e06f      	b.n	800ebd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00b      	beq.n	800eb1c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	7c12      	ldrb	r2, [r2, #16]
 800eb10:	f107 0108 	add.w	r1, r7, #8
 800eb14:	4610      	mov	r0, r2
 800eb16:	4798      	blx	r3
 800eb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb1a:	e05d      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fa97 	bl	800f052 <USBD_CtlError>
            err++;
 800eb24:	7afb      	ldrb	r3, [r7, #11]
 800eb26:	3301      	adds	r3, #1
 800eb28:	72fb      	strb	r3, [r7, #11]
          break;
 800eb2a:	e055      	b.n	800ebd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00b      	beq.n	800eb50 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb3e:	691b      	ldr	r3, [r3, #16]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	7c12      	ldrb	r2, [r2, #16]
 800eb44:	f107 0108 	add.w	r1, r7, #8
 800eb48:	4610      	mov	r0, r2
 800eb4a:	4798      	blx	r3
 800eb4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb4e:	e043      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb50:	6839      	ldr	r1, [r7, #0]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fa7d 	bl	800f052 <USBD_CtlError>
            err++;
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb5e:	e03b      	b.n	800ebd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb66:	695b      	ldr	r3, [r3, #20]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00b      	beq.n	800eb84 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	7c12      	ldrb	r2, [r2, #16]
 800eb78:	f107 0108 	add.w	r1, r7, #8
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	4798      	blx	r3
 800eb80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb82:	e029      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb84:	6839      	ldr	r1, [r7, #0]
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 fa63 	bl	800f052 <USBD_CtlError>
            err++;
 800eb8c:	7afb      	ldrb	r3, [r7, #11]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	72fb      	strb	r3, [r7, #11]
          break;
 800eb92:	e021      	b.n	800ebd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00b      	beq.n	800ebb8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eba6:	699b      	ldr	r3, [r3, #24]
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	7c12      	ldrb	r2, [r2, #16]
 800ebac:	f107 0108 	add.w	r1, r7, #8
 800ebb0:	4610      	mov	r0, r2
 800ebb2:	4798      	blx	r3
 800ebb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebb6:	e00f      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebb8:	6839      	ldr	r1, [r7, #0]
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 fa49 	bl	800f052 <USBD_CtlError>
            err++;
 800ebc0:	7afb      	ldrb	r3, [r7, #11]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	72fb      	strb	r3, [r7, #11]
          break;
 800ebc6:	e007      	b.n	800ebd8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ebc8:	6839      	ldr	r1, [r7, #0]
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 fa41 	bl	800f052 <USBD_CtlError>
          err++;
 800ebd0:	7afb      	ldrb	r3, [r7, #11]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ebd6:	bf00      	nop
      }
      break;
 800ebd8:	e037      	b.n	800ec4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	7c1b      	ldrb	r3, [r3, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d109      	bne.n	800ebf6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebea:	f107 0208 	add.w	r2, r7, #8
 800ebee:	4610      	mov	r0, r2
 800ebf0:	4798      	blx	r3
 800ebf2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebf4:	e029      	b.n	800ec4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ebf6:	6839      	ldr	r1, [r7, #0]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 fa2a 	bl	800f052 <USBD_CtlError>
        err++;
 800ebfe:	7afb      	ldrb	r3, [r7, #11]
 800ec00:	3301      	adds	r3, #1
 800ec02:	72fb      	strb	r3, [r7, #11]
      break;
 800ec04:	e021      	b.n	800ec4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	7c1b      	ldrb	r3, [r3, #16]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d10d      	bne.n	800ec2a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec16:	f107 0208 	add.w	r2, r7, #8
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	4798      	blx	r3
 800ec1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	3301      	adds	r3, #1
 800ec24:	2207      	movs	r2, #7
 800ec26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec28:	e00f      	b.n	800ec4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 fa10 	bl	800f052 <USBD_CtlError>
        err++;
 800ec32:	7afb      	ldrb	r3, [r7, #11]
 800ec34:	3301      	adds	r3, #1
 800ec36:	72fb      	strb	r3, [r7, #11]
      break;
 800ec38:	e007      	b.n	800ec4a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ec3a:	6839      	ldr	r1, [r7, #0]
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 fa08 	bl	800f052 <USBD_CtlError>
      err++;
 800ec42:	7afb      	ldrb	r3, [r7, #11]
 800ec44:	3301      	adds	r3, #1
 800ec46:	72fb      	strb	r3, [r7, #11]
      break;
 800ec48:	bf00      	nop
  }

  if (err != 0U)
 800ec4a:	7afb      	ldrb	r3, [r7, #11]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d11e      	bne.n	800ec8e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	88db      	ldrh	r3, [r3, #6]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d016      	beq.n	800ec86 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ec58:	893b      	ldrh	r3, [r7, #8]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00e      	beq.n	800ec7c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	88da      	ldrh	r2, [r3, #6]
 800ec62:	893b      	ldrh	r3, [r7, #8]
 800ec64:	4293      	cmp	r3, r2
 800ec66:	bf28      	it	cs
 800ec68:	4613      	movcs	r3, r2
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ec6e:	893b      	ldrh	r3, [r7, #8]
 800ec70:	461a      	mov	r2, r3
 800ec72:	68f9      	ldr	r1, [r7, #12]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 fa69 	bl	800f14c <USBD_CtlSendData>
 800ec7a:	e009      	b.n	800ec90 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ec7c:	6839      	ldr	r1, [r7, #0]
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 f9e7 	bl	800f052 <USBD_CtlError>
 800ec84:	e004      	b.n	800ec90 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 faba 	bl	800f200 <USBD_CtlSendStatus>
 800ec8c:	e000      	b.n	800ec90 <USBD_GetDescriptor+0x320>
    return;
 800ec8e:	bf00      	nop
  }
}
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop

0800ec98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	889b      	ldrh	r3, [r3, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d131      	bne.n	800ed0e <USBD_SetAddress+0x76>
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	88db      	ldrh	r3, [r3, #6]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d12d      	bne.n	800ed0e <USBD_SetAddress+0x76>
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	885b      	ldrh	r3, [r3, #2]
 800ecb6:	2b7f      	cmp	r3, #127	@ 0x7f
 800ecb8:	d829      	bhi.n	800ed0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	885b      	ldrh	r3, [r3, #2]
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b03      	cmp	r3, #3
 800ecd0:	d104      	bne.n	800ecdc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ecd2:	6839      	ldr	r1, [r7, #0]
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 f9bc 	bl	800f052 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecda:	e01d      	b.n	800ed18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	7bfa      	ldrb	r2, [r7, #15]
 800ece0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
 800ece6:	4619      	mov	r1, r3
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f003 fac1 	bl	8012270 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 fa86 	bl	800f200 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ecf4:	7bfb      	ldrb	r3, [r7, #15]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d004      	beq.n	800ed04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2202      	movs	r2, #2
 800ecfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed02:	e009      	b.n	800ed18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2201      	movs	r2, #1
 800ed08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed0c:	e004      	b.n	800ed18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed0e:	6839      	ldr	r1, [r7, #0]
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 f99e 	bl	800f052 <USBD_CtlError>
  }
}
 800ed16:	bf00      	nop
 800ed18:	bf00      	nop
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	885b      	ldrh	r3, [r3, #2]
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	4b4e      	ldr	r3, [pc, #312]	@ (800ee70 <USBD_SetConfig+0x150>)
 800ed36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed38:	4b4d      	ldr	r3, [pc, #308]	@ (800ee70 <USBD_SetConfig+0x150>)
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d905      	bls.n	800ed4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ed40:	6839      	ldr	r1, [r7, #0]
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 f985 	bl	800f052 <USBD_CtlError>
    return USBD_FAIL;
 800ed48:	2303      	movs	r3, #3
 800ed4a:	e08c      	b.n	800ee66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d002      	beq.n	800ed5e <USBD_SetConfig+0x3e>
 800ed58:	2b03      	cmp	r3, #3
 800ed5a:	d029      	beq.n	800edb0 <USBD_SetConfig+0x90>
 800ed5c:	e075      	b.n	800ee4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ed5e:	4b44      	ldr	r3, [pc, #272]	@ (800ee70 <USBD_SetConfig+0x150>)
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d020      	beq.n	800eda8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ed66:	4b42      	ldr	r3, [pc, #264]	@ (800ee70 <USBD_SetConfig+0x150>)
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ed70:	4b3f      	ldr	r3, [pc, #252]	@ (800ee70 <USBD_SetConfig+0x150>)
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	4619      	mov	r1, r3
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7fe ffb9 	bl	800dcee <USBD_SetClassConfig>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ed80:	7bfb      	ldrb	r3, [r7, #15]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d008      	beq.n	800ed98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ed86:	6839      	ldr	r1, [r7, #0]
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 f962 	bl	800f052 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2202      	movs	r2, #2
 800ed92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ed96:	e065      	b.n	800ee64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 fa31 	bl	800f200 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2203      	movs	r2, #3
 800eda2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800eda6:	e05d      	b.n	800ee64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 fa29 	bl	800f200 <USBD_CtlSendStatus>
      break;
 800edae:	e059      	b.n	800ee64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800edb0:	4b2f      	ldr	r3, [pc, #188]	@ (800ee70 <USBD_SetConfig+0x150>)
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d112      	bne.n	800edde <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2202      	movs	r2, #2
 800edbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800edc0:	4b2b      	ldr	r3, [pc, #172]	@ (800ee70 <USBD_SetConfig+0x150>)
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	461a      	mov	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800edca:	4b29      	ldr	r3, [pc, #164]	@ (800ee70 <USBD_SetConfig+0x150>)
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	4619      	mov	r1, r3
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f7fe ffa8 	bl	800dd26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 fa12 	bl	800f200 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eddc:	e042      	b.n	800ee64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800edde:	4b24      	ldr	r3, [pc, #144]	@ (800ee70 <USBD_SetConfig+0x150>)
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	461a      	mov	r2, r3
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d02a      	beq.n	800ee42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	4619      	mov	r1, r3
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f7fe ff96 	bl	800dd26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800edfa:	4b1d      	ldr	r3, [pc, #116]	@ (800ee70 <USBD_SetConfig+0x150>)
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	461a      	mov	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee04:	4b1a      	ldr	r3, [pc, #104]	@ (800ee70 <USBD_SetConfig+0x150>)
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	4619      	mov	r1, r3
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f7fe ff6f 	bl	800dcee <USBD_SetClassConfig>
 800ee10:	4603      	mov	r3, r0
 800ee12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ee14:	7bfb      	ldrb	r3, [r7, #15]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00f      	beq.n	800ee3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ee1a:	6839      	ldr	r1, [r7, #0]
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 f918 	bl	800f052 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	685b      	ldr	r3, [r3, #4]
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	4619      	mov	r1, r3
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7fe ff7b 	bl	800dd26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2202      	movs	r2, #2
 800ee34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ee38:	e014      	b.n	800ee64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 f9e0 	bl	800f200 <USBD_CtlSendStatus>
      break;
 800ee40:	e010      	b.n	800ee64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 f9dc 	bl	800f200 <USBD_CtlSendStatus>
      break;
 800ee48:	e00c      	b.n	800ee64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ee4a:	6839      	ldr	r1, [r7, #0]
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f900 	bl	800f052 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee52:	4b07      	ldr	r3, [pc, #28]	@ (800ee70 <USBD_SetConfig+0x150>)
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	4619      	mov	r1, r3
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f7fe ff64 	bl	800dd26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	73fb      	strb	r3, [r7, #15]
      break;
 800ee62:	bf00      	nop
  }

  return ret;
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	240002f0 	.word	0x240002f0

0800ee74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	88db      	ldrh	r3, [r3, #6]
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d004      	beq.n	800ee90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ee86:	6839      	ldr	r1, [r7, #0]
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 f8e2 	bl	800f052 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ee8e:	e023      	b.n	800eed8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee96:	b2db      	uxtb	r3, r3
 800ee98:	2b02      	cmp	r3, #2
 800ee9a:	dc02      	bgt.n	800eea2 <USBD_GetConfig+0x2e>
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	dc03      	bgt.n	800eea8 <USBD_GetConfig+0x34>
 800eea0:	e015      	b.n	800eece <USBD_GetConfig+0x5a>
 800eea2:	2b03      	cmp	r3, #3
 800eea4:	d00b      	beq.n	800eebe <USBD_GetConfig+0x4a>
 800eea6:	e012      	b.n	800eece <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f948 	bl	800f14c <USBD_CtlSendData>
        break;
 800eebc:	e00c      	b.n	800eed8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	3304      	adds	r3, #4
 800eec2:	2201      	movs	r2, #1
 800eec4:	4619      	mov	r1, r3
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f940 	bl	800f14c <USBD_CtlSendData>
        break;
 800eecc:	e004      	b.n	800eed8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 f8be 	bl	800f052 <USBD_CtlError>
        break;
 800eed6:	bf00      	nop
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	3b01      	subs	r3, #1
 800eef4:	2b02      	cmp	r3, #2
 800eef6:	d81e      	bhi.n	800ef36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	88db      	ldrh	r3, [r3, #6]
 800eefc:	2b02      	cmp	r3, #2
 800eefe:	d004      	beq.n	800ef0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ef00:	6839      	ldr	r1, [r7, #0]
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 f8a5 	bl	800f052 <USBD_CtlError>
        break;
 800ef08:	e01a      	b.n	800ef40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d005      	beq.n	800ef26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	f043 0202 	orr.w	r2, r3, #2
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	330c      	adds	r3, #12
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 f90c 	bl	800f14c <USBD_CtlSendData>
      break;
 800ef34:	e004      	b.n	800ef40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ef36:	6839      	ldr	r1, [r7, #0]
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 f88a 	bl	800f052 <USBD_CtlError>
      break;
 800ef3e:	bf00      	nop
  }
}
 800ef40:	bf00      	nop
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	885b      	ldrh	r3, [r3, #2]
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d107      	bne.n	800ef6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 f94c 	bl	800f200 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ef68:	e013      	b.n	800ef92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	885b      	ldrh	r3, [r3, #2]
 800ef6e:	2b02      	cmp	r3, #2
 800ef70:	d10b      	bne.n	800ef8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	889b      	ldrh	r3, [r3, #4]
 800ef76:	0a1b      	lsrs	r3, r3, #8
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	b2da      	uxtb	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 f93c 	bl	800f200 <USBD_CtlSendStatus>
}
 800ef88:	e003      	b.n	800ef92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ef8a:	6839      	ldr	r1, [r7, #0]
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f000 f860 	bl	800f052 <USBD_CtlError>
}
 800ef92:	bf00      	nop
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b082      	sub	sp, #8
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
 800efa2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	3b01      	subs	r3, #1
 800efae:	2b02      	cmp	r3, #2
 800efb0:	d80b      	bhi.n	800efca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	885b      	ldrh	r3, [r3, #2]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d10c      	bne.n	800efd4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 f91c 	bl	800f200 <USBD_CtlSendStatus>
      }
      break;
 800efc8:	e004      	b.n	800efd4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800efca:	6839      	ldr	r1, [r7, #0]
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f840 	bl	800f052 <USBD_CtlError>
      break;
 800efd2:	e000      	b.n	800efd6 <USBD_ClrFeature+0x3c>
      break;
 800efd4:	bf00      	nop
  }
}
 800efd6:	bf00      	nop
 800efd8:	3708      	adds	r7, #8
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b084      	sub	sp, #16
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
 800efe6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	781a      	ldrb	r2, [r3, #0]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	3301      	adds	r3, #1
 800eff8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	781a      	ldrb	r2, [r3, #0]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	3301      	adds	r3, #1
 800f006:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f7ff fa16 	bl	800e43a <SWAPBYTE>
 800f00e:	4603      	mov	r3, r0
 800f010:	461a      	mov	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	3301      	adds	r3, #1
 800f01a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	3301      	adds	r3, #1
 800f020:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f022:	68f8      	ldr	r0, [r7, #12]
 800f024:	f7ff fa09 	bl	800e43a <SWAPBYTE>
 800f028:	4603      	mov	r3, r0
 800f02a:	461a      	mov	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	3301      	adds	r3, #1
 800f034:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	3301      	adds	r3, #1
 800f03a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f03c:	68f8      	ldr	r0, [r7, #12]
 800f03e:	f7ff f9fc 	bl	800e43a <SWAPBYTE>
 800f042:	4603      	mov	r3, r0
 800f044:	461a      	mov	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	80da      	strh	r2, [r3, #6]
}
 800f04a:	bf00      	nop
 800f04c:	3710      	adds	r7, #16
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}

0800f052 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f052:	b580      	push	{r7, lr}
 800f054:	b082      	sub	sp, #8
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
 800f05a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f05c:	2180      	movs	r1, #128	@ 0x80
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f003 f89c 	bl	801219c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f064:	2100      	movs	r1, #0
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f003 f898 	bl	801219c <USBD_LL_StallEP>
}
 800f06c:	bf00      	nop
 800f06e:	3708      	adds	r7, #8
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b086      	sub	sp, #24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f080:	2300      	movs	r3, #0
 800f082:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d042      	beq.n	800f110 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f08e:	6938      	ldr	r0, [r7, #16]
 800f090:	f000 f842 	bl	800f118 <USBD_GetLen>
 800f094:	4603      	mov	r3, r0
 800f096:	3301      	adds	r3, #1
 800f098:	005b      	lsls	r3, r3, #1
 800f09a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f09e:	d808      	bhi.n	800f0b2 <USBD_GetString+0x3e>
 800f0a0:	6938      	ldr	r0, [r7, #16]
 800f0a2:	f000 f839 	bl	800f118 <USBD_GetLen>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	005b      	lsls	r3, r3, #1
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	e001      	b.n	800f0b6 <USBD_GetString+0x42>
 800f0b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f0ba:	7dfb      	ldrb	r3, [r7, #23]
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	4413      	add	r3, r2
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	7812      	ldrb	r2, [r2, #0]
 800f0c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800f0c6:	7dfb      	ldrb	r3, [r7, #23]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f0cc:	7dfb      	ldrb	r3, [r7, #23]
 800f0ce:	68ba      	ldr	r2, [r7, #8]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	2203      	movs	r2, #3
 800f0d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800f0d6:	7dfb      	ldrb	r3, [r7, #23]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f0dc:	e013      	b.n	800f106 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f0de:	7dfb      	ldrb	r3, [r7, #23]
 800f0e0:	68ba      	ldr	r2, [r7, #8]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	693a      	ldr	r2, [r7, #16]
 800f0e6:	7812      	ldrb	r2, [r2, #0]
 800f0e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	613b      	str	r3, [r7, #16]
    idx++;
 800f0f0:	7dfb      	ldrb	r3, [r7, #23]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f0f6:	7dfb      	ldrb	r3, [r7, #23]
 800f0f8:	68ba      	ldr	r2, [r7, #8]
 800f0fa:	4413      	add	r3, r2
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800f100:	7dfb      	ldrb	r3, [r7, #23]
 800f102:	3301      	adds	r3, #1
 800f104:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d1e7      	bne.n	800f0de <USBD_GetString+0x6a>
 800f10e:	e000      	b.n	800f112 <USBD_GetString+0x9e>
    return;
 800f110:	bf00      	nop
  }
}
 800f112:	3718      	adds	r7, #24
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f120:	2300      	movs	r3, #0
 800f122:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f128:	e005      	b.n	800f136 <USBD_GetLen+0x1e>
  {
    len++;
 800f12a:	7bfb      	ldrb	r3, [r7, #15]
 800f12c:	3301      	adds	r3, #1
 800f12e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	3301      	adds	r3, #1
 800f134:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1f5      	bne.n	800f12a <USBD_GetLen+0x12>
  }

  return len;
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f140:	4618      	mov	r0, r3
 800f142:	3714      	adds	r7, #20
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2202      	movs	r2, #2
 800f15c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	2100      	movs	r1, #0
 800f172:	68f8      	ldr	r0, [r7, #12]
 800f174:	f003 f89b 	bl	80122ae <USBD_LL_Transmit>

  return USBD_OK;
 800f178:	2300      	movs	r3, #0
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b084      	sub	sp, #16
 800f186:	af00      	add	r7, sp, #0
 800f188:	60f8      	str	r0, [r7, #12]
 800f18a:	60b9      	str	r1, [r7, #8]
 800f18c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	2100      	movs	r1, #0
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f003 f88a 	bl	80122ae <USBD_LL_Transmit>

  return USBD_OK;
 800f19a:	2300      	movs	r3, #0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2203      	movs	r2, #3
 800f1b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	68ba      	ldr	r2, [r7, #8]
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	f003 f88e 	bl	80122f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b084      	sub	sp, #16
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	60f8      	str	r0, [r7, #12]
 800f1e6:	60b9      	str	r1, [r7, #8]
 800f1e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	68ba      	ldr	r2, [r7, #8]
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	f003 f87d 	bl	80122f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1f6:	2300      	movs	r3, #0
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3710      	adds	r7, #16
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2204      	movs	r2, #4
 800f20c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f210:	2300      	movs	r3, #0
 800f212:	2200      	movs	r2, #0
 800f214:	2100      	movs	r1, #0
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f003 f849 	bl	80122ae <USBD_LL_Transmit>

  return USBD_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3708      	adds	r7, #8
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b082      	sub	sp, #8
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2205      	movs	r2, #5
 800f232:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f236:	2300      	movs	r3, #0
 800f238:	2200      	movs	r2, #0
 800f23a:	2100      	movs	r1, #0
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f003 f857 	bl	80122f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 800f250:	2200      	movs	r2, #0
 800f252:	2140      	movs	r1, #64	@ 0x40
 800f254:	480a      	ldr	r0, [pc, #40]	@ (800f280 <ad7606_Init+0x34>)
 800f256:	f7f4 fc05 	bl	8003a64 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800f25a:	2001      	movs	r0, #1
 800f25c:	f7f1 f91e 	bl	800049c <HAL_Delay>
    AD7606_RST_SET();
 800f260:	2201      	movs	r2, #1
 800f262:	2140      	movs	r1, #64	@ 0x40
 800f264:	4806      	ldr	r0, [pc, #24]	@ (800f280 <ad7606_Init+0x34>)
 800f266:	f7f4 fbfd 	bl	8003a64 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800f26a:	2001      	movs	r0, #1
 800f26c:	f7f1 f916 	bl	800049c <HAL_Delay>
    AD7606_RST_RESET();
 800f270:	2200      	movs	r2, #0
 800f272:	2140      	movs	r1, #64	@ 0x40
 800f274:	4802      	ldr	r0, [pc, #8]	@ (800f280 <ad7606_Init+0x34>)
 800f276:	f7f4 fbf5 	bl	8003a64 <HAL_GPIO_WritePin>
}
 800f27a:	bf00      	nop
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	58021800 	.word	0x58021800

0800f284 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	4613      	mov	r3, r2
 800f290:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 800f292:	2200      	movs	r2, #0
 800f294:	2180      	movs	r1, #128	@ 0x80
 800f296:	4809      	ldr	r0, [pc, #36]	@ (800f2bc <ad7606_Read+0x38>)
 800f298:	f7f4 fbe4 	bl	8003a64 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 800f29c:	88fa      	ldrh	r2, [r7, #6]
 800f29e:	2364      	movs	r3, #100	@ 0x64
 800f2a0:	68b9      	ldr	r1, [r7, #8]
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f7fa fd5a 	bl	8009d5c <HAL_SPI_Receive>
    AD7606_CS_SET();
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	2180      	movs	r1, #128	@ 0x80
 800f2ac:	4803      	ldr	r0, [pc, #12]	@ (800f2bc <ad7606_Read+0x38>)
 800f2ae:	f7f4 fbd9 	bl	8003a64 <HAL_GPIO_WritePin>
}
 800f2b2:	bf00      	nop
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	58021800 	.word	0x58021800

0800f2c0 <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 800f2ca:	6839      	ldr	r1, [r7, #0]
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7fb f9d1 	bl	800a674 <HAL_TIM_PWM_Start>
}
 800f2d2:	bf00      	nop
 800f2d4:	3708      	adds	r7, #8
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
	...

0800f2dc <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b087      	sub	sp, #28
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	607a      	str	r2, [r7, #4]
 800f2e8:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	617b      	str	r3, [r7, #20]
 800f2ee:	e03d      	b.n	800f36c <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数

        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	005b      	lsls	r3, r3, #1
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	da0f      	bge.n	800f320 <ad7606_Convert+0x44>
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	005b      	lsls	r3, r3, #1
 800f304:	68fa      	ldr	r2, [r7, #12]
 800f306:	4413      	add	r3, r2
 800f308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	425b      	negs	r3, r3
 800f310:	b29b      	uxth	r3, r3
 800f312:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f316:	b29b      	uxth	r3, r3
 800f318:	425b      	negs	r3, r3
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	b21b      	sxth	r3, r3
 800f31e:	e005      	b.n	800f32c <ad7606_Convert+0x50>
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	005b      	lsls	r3, r3, #1
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	4413      	add	r3, r2
 800f328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f32c:	697a      	ldr	r2, [r7, #20]
 800f32e:	0052      	lsls	r2, r2, #1
 800f330:	68f9      	ldr	r1, [r7, #12]
 800f332:	440a      	add	r2, r1
 800f334:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	005b      	lsls	r3, r3, #1
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	4413      	add	r3, r2
 800f33e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f342:	ee07 3a90 	vmov	s15, r3
 800f346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f34a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800f34e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	009b      	lsls	r3, r3, #2
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	4413      	add	r3, r2
 800f35a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800f384 <ad7606_Convert+0xa8>
 800f35e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f362:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	3301      	adds	r3, #1
 800f36a:	617b      	str	r3, [r7, #20]
 800f36c:	897b      	ldrh	r3, [r7, #10]
 800f36e:	697a      	ldr	r2, [r7, #20]
 800f370:	429a      	cmp	r2, r3
 800f372:	dbbd      	blt.n	800f2f0 <ad7606_Convert+0x14>
    }
}
 800f374:	bf00      	nop
 800f376:	bf00      	nop
 800f378:	371c      	adds	r7, #28
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
 800f382:	bf00      	nop
 800f384:	47000000 	.word	0x47000000

0800f388 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 800f388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f38c:	b087      	sub	sp, #28
 800f38e:	af00      	add	r7, sp, #0
 800f390:	60f8      	str	r0, [r7, #12]
 800f392:	460b      	mov	r3, r1
 800f394:	607a      	str	r2, [r7, #4]
 800f396:	817b      	strh	r3, [r7, #10]
 800f398:	466b      	mov	r3, sp
 800f39a:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 800f39c:	8979      	ldrh	r1, [r7, #10]
 800f39e:	460b      	mov	r3, r1
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	617b      	str	r3, [r7, #20]
 800f3a4:	b28b      	uxth	r3, r1
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	4698      	mov	r8, r3
 800f3aa:	4691      	mov	r9, r2
 800f3ac:	f04f 0200 	mov.w	r2, #0
 800f3b0:	f04f 0300 	mov.w	r3, #0
 800f3b4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800f3b8:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800f3bc:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800f3c0:	b28b      	uxth	r3, r1
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	461c      	mov	r4, r3
 800f3c6:	4615      	mov	r5, r2
 800f3c8:	f04f 0200 	mov.w	r2, #0
 800f3cc:	f04f 0300 	mov.w	r3, #0
 800f3d0:	012b      	lsls	r3, r5, #4
 800f3d2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800f3d6:	0122      	lsls	r2, r4, #4
 800f3d8:	460b      	mov	r3, r1
 800f3da:	005b      	lsls	r3, r3, #1
 800f3dc:	3307      	adds	r3, #7
 800f3de:	08db      	lsrs	r3, r3, #3
 800f3e0:	00db      	lsls	r3, r3, #3
 800f3e2:	ebad 0d03 	sub.w	sp, sp, r3
 800f3e6:	466b      	mov	r3, sp
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	085b      	lsrs	r3, r3, #1
 800f3ec:	005b      	lsls	r3, r3, #1
 800f3ee:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 800f3f0:	897b      	ldrh	r3, [r7, #10]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	6939      	ldr	r1, [r7, #16]
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f7ff ff44 	bl	800f284 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 800f3fc:	897b      	ldrh	r3, [r7, #10]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	4619      	mov	r1, r3
 800f402:	6938      	ldr	r0, [r7, #16]
 800f404:	f7ff ff6a 	bl	800f2dc <ad7606_Convert>
 800f408:	46b5      	mov	sp, r6
}
 800f40a:	bf00      	nop
 800f40c:	371c      	adds	r7, #28
 800f40e:	46bd      	mov	sp, r7
 800f410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f414 <ina238_Init>:
 * @brief  INA238初始化
 * @param  hi2c I2C句柄
 * @param  error 误差纠正
 */
void ina238_Init(I2C_HandleTypeDef *hi2c, int8_t error)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b088      	sub	sp, #32
 800f418:	af04      	add	r7, sp, #16
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	460b      	mov	r3, r1
 800f41e:	70fb      	strb	r3, [r7, #3]
	uint8_t pData[2];
	pData[0] = 0x00;
 800f420:	2300      	movs	r3, #0
 800f422:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x00;
 800f424:	2300      	movs	r3, #0
 800f426:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100); // 量程选择为163.84mv
 800f428:	2364      	movs	r3, #100	@ 0x64
 800f42a:	9302      	str	r3, [sp, #8]
 800f42c:	2302      	movs	r3, #2
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	f107 030c 	add.w	r3, r7, #12
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	2301      	movs	r3, #1
 800f438:	2200      	movs	r2, #0
 800f43a:	2181      	movs	r1, #129	@ 0x81
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7f4 fbfb 	bl	8003c38 <HAL_I2C_Mem_Write>
	pData[0] = 0xf4;
 800f442:	23f4      	movs	r3, #244	@ 0xf4
 800f444:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x93;
 800f446:	2393      	movs	r3, #147	@ 0x93
 800f448:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100); // 转换时间设置为9.6ms
 800f44a:	2364      	movs	r3, #100	@ 0x64
 800f44c:	9302      	str	r3, [sp, #8]
 800f44e:	2302      	movs	r3, #2
 800f450:	9301      	str	r3, [sp, #4]
 800f452:	f107 030c 	add.w	r3, r7, #12
 800f456:	9300      	str	r3, [sp, #0]
 800f458:	2301      	movs	r3, #1
 800f45a:	2201      	movs	r2, #1
 800f45c:	2181      	movs	r1, #129	@ 0x81
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7f4 fbea 	bl	8003c38 <HAL_I2C_Mem_Write>
	pData[0] = 0x0f;
 800f464:	230f      	movs	r3, #15
 800f466:	733b      	strb	r3, [r7, #12]
	pData[1] = 0xa0 + error;
 800f468:	78fb      	ldrb	r3, [r7, #3]
 800f46a:	3b60      	subs	r3, #96	@ 0x60
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100); // 设置最大电流为8A，采样电阻为20mΩ
 800f470:	2364      	movs	r3, #100	@ 0x64
 800f472:	9302      	str	r3, [sp, #8]
 800f474:	2302      	movs	r3, #2
 800f476:	9301      	str	r3, [sp, #4]
 800f478:	f107 030c 	add.w	r3, r7, #12
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	2301      	movs	r3, #1
 800f480:	2202      	movs	r2, #2
 800f482:	2181      	movs	r1, #129	@ 0x81
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f7f4 fbd7 	bl	8003c38 <HAL_I2C_Mem_Write>
}
 800f48a:	bf00      	nop
 800f48c:	3710      	adds	r7, #16
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	0000      	movs	r0, r0
 800f494:	0000      	movs	r0, r0
	...

0800f498 <ina238_GetVolt>:
 * @brief  INA238读取电压
 * @param  hi2c I2C句柄
 * @retval 电压值
 */
float ina238_GetVolt(I2C_HandleTypeDef *hi2c)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b088      	sub	sp, #32
 800f49c:	af04      	add	r7, sp, #16
 800f49e:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float volt;
	if (HAL_I2C_Mem_Read(hi2c, ADDR_READ, VBUS, 1, pData, 2, 100) == HAL_OK)
 800f4a0:	2364      	movs	r3, #100	@ 0x64
 800f4a2:	9302      	str	r3, [sp, #8]
 800f4a4:	2302      	movs	r3, #2
 800f4a6:	9301      	str	r3, [sp, #4]
 800f4a8:	f107 0308 	add.w	r3, r7, #8
 800f4ac:	9300      	str	r3, [sp, #0]
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	2205      	movs	r2, #5
 800f4b2:	2180      	movs	r1, #128	@ 0x80
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7f4 fcd3 	bl	8003e60 <HAL_I2C_Mem_Read>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d137      	bne.n	800f530 <ina238_GetVolt+0x98>
	{
		volt = pData[0] * 256 + pData[1];
 800f4c0:	7a3b      	ldrb	r3, [r7, #8]
 800f4c2:	021b      	lsls	r3, r3, #8
 800f4c4:	7a7a      	ldrb	r2, [r7, #9]
 800f4c6:	4413      	add	r3, r2
 800f4c8:	ee07 3a90 	vmov	s15, r3
 800f4cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4d0:	edc7 7a03 	vstr	s15, [r7, #12]
		if (volt > 32767) // 为负数的情况
 800f4d4:	edd7 7a03 	vldr	s15, [r7, #12]
 800f4d8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800f548 <ina238_GetVolt+0xb0>
 800f4dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e4:	dd14      	ble.n	800f510 <ina238_GetVolt+0x78>
			volt = (volt - 65536) * 3.125 / 1000;
 800f4e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800f4ea:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800f54c <ina238_GetVolt+0xb4>
 800f4ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f4f6:	eeb0 6b09 	vmov.f64	d6, #9	@ 0x40480000  3.125
 800f4fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f4fe:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 800f540 <ina238_GetVolt+0xa8>
 800f502:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f506:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f50a:	edc7 7a03 	vstr	s15, [r7, #12]
 800f50e:	e00f      	b.n	800f530 <ina238_GetVolt+0x98>
		else
			volt = volt * 3.125 / 1000;
 800f510:	edd7 7a03 	vldr	s15, [r7, #12]
 800f514:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f518:	eeb0 6b09 	vmov.f64	d6, #9	@ 0x40480000  3.125
 800f51c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f520:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 800f540 <ina238_GetVolt+0xa8>
 800f524:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f528:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f52c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return volt;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	ee07 3a90 	vmov	s15, r3
}
 800f536:	eeb0 0a67 	vmov.f32	s0, s15
 800f53a:	3710      	adds	r7, #16
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	00000000 	.word	0x00000000
 800f544:	408f4000 	.word	0x408f4000
 800f548:	46fffe00 	.word	0x46fffe00
 800f54c:	47800000 	.word	0x47800000

0800f550 <ina238_GetCurrent>:
 * @brief  INA238读取电流
 * @param  hi2c I2C句柄
 * @retval 电流值
 */
float ina238_GetCurrent(I2C_HandleTypeDef *hi2c)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b088      	sub	sp, #32
 800f554:	af04      	add	r7, sp, #16
 800f556:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float current;
	if (HAL_I2C_Mem_Read(hi2c, ADDR_READ, CURRENT, 1, pData, 2, 100) == HAL_OK)
 800f558:	2364      	movs	r3, #100	@ 0x64
 800f55a:	9302      	str	r3, [sp, #8]
 800f55c:	2302      	movs	r3, #2
 800f55e:	9301      	str	r3, [sp, #4]
 800f560:	f107 0308 	add.w	r3, r7, #8
 800f564:	9300      	str	r3, [sp, #0]
 800f566:	2301      	movs	r3, #1
 800f568:	2207      	movs	r2, #7
 800f56a:	2180      	movs	r1, #128	@ 0x80
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7f4 fc77 	bl	8003e60 <HAL_I2C_Mem_Read>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d127      	bne.n	800f5c8 <ina238_GetCurrent+0x78>
	{
		current = pData[0] * 256 + pData[1];
 800f578:	7a3b      	ldrb	r3, [r7, #8]
 800f57a:	021b      	lsls	r3, r3, #8
 800f57c:	7a7a      	ldrb	r2, [r7, #9]
 800f57e:	4413      	add	r3, r2
 800f580:	ee07 3a90 	vmov	s15, r3
 800f584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f588:	edc7 7a03 	vstr	s15, [r7, #12]
		if (current > 32767)
 800f58c:	edd7 7a03 	vldr	s15, [r7, #12]
 800f590:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800f5d8 <ina238_GetCurrent+0x88>
 800f594:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f59c:	dd0c      	ble.n	800f5b8 <ina238_GetCurrent+0x68>
			current = (current - 65536) * (8 / 32768.0);
 800f59e:	edd7 7a03 	vldr	s15, [r7, #12]
 800f5a2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800f5dc <ina238_GetCurrent+0x8c>
 800f5a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800f5e0 <ina238_GetCurrent+0x90>
 800f5ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5b2:	edc7 7a03 	vstr	s15, [r7, #12]
 800f5b6:	e007      	b.n	800f5c8 <ina238_GetCurrent+0x78>
		else
			current = current * (8 / 32768.0);
 800f5b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800f5bc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800f5e0 <ina238_GetCurrent+0x90>
 800f5c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5c4:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return current;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	ee07 3a90 	vmov	s15, r3
}
 800f5ce:	eeb0 0a67 	vmov.f32	s0, s15
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	46fffe00 	.word	0x46fffe00
 800f5dc:	47800000 	.word	0x47800000
 800f5e0:	39800000 	.word	0x39800000

0800f5e4 <OLED_WR_Byte>:
		OLED_WR_Byte(0xA0, OLED_CMD);
	}
}

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	460a      	mov	r2, r1
 800f5ee:	71fb      	strb	r3, [r7, #7]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800f5f4:	1dfb      	adds	r3, r7, #7
 800f5f6:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800f5f8:	79bb      	ldrb	r3, [r7, #6]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d005      	beq.n	800f60a <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800f5fe:	2201      	movs	r2, #1
 800f600:	2140      	movs	r1, #64	@ 0x40
 800f602:	4811      	ldr	r0, [pc, #68]	@ (800f648 <OLED_WR_Byte+0x64>)
 800f604:	f7f4 fa2e 	bl	8003a64 <HAL_GPIO_WritePin>
 800f608:	e004      	b.n	800f614 <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800f60a:	2200      	movs	r2, #0
 800f60c:	2140      	movs	r1, #64	@ 0x40
 800f60e:	480e      	ldr	r0, [pc, #56]	@ (800f648 <OLED_WR_Byte+0x64>)
 800f610:	f7f4 fa28 	bl	8003a64 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800f614:	2200      	movs	r2, #0
 800f616:	2102      	movs	r1, #2
 800f618:	480c      	ldr	r0, [pc, #48]	@ (800f64c <OLED_WR_Byte+0x68>)
 800f61a:	f7f4 fa23 	bl	8003a64 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800f61e:	23c8      	movs	r3, #200	@ 0xc8
 800f620:	2201      	movs	r2, #1
 800f622:	68f9      	ldr	r1, [r7, #12]
 800f624:	480a      	ldr	r0, [pc, #40]	@ (800f650 <OLED_WR_Byte+0x6c>)
 800f626:	f7fa f9ab 	bl	8009980 <HAL_SPI_Transmit>

	OLED_CS_Set();
 800f62a:	2201      	movs	r2, #1
 800f62c:	2102      	movs	r1, #2
 800f62e:	4807      	ldr	r0, [pc, #28]	@ (800f64c <OLED_WR_Byte+0x68>)
 800f630:	f7f4 fa18 	bl	8003a64 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800f634:	2201      	movs	r2, #1
 800f636:	2140      	movs	r1, #64	@ 0x40
 800f638:	4803      	ldr	r0, [pc, #12]	@ (800f648 <OLED_WR_Byte+0x64>)
 800f63a:	f7f4 fa13 	bl	8003a64 <HAL_GPIO_WritePin>
}
 800f63e:	bf00      	nop
 800f640:	3710      	adds	r7, #16
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	58022000 	.word	0x58022000
 800f64c:	58020400 	.word	0x58020400
 800f650:	240009cc 	.word	0x240009cc

0800f654 <OLED_Refresh>:
	OLED_WR_Byte(0xAF, OLED_CMD); // 关闭屏幕
}

// 更新显存到OLED
void OLED_Refresh(void)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800f65a:	2300      	movs	r3, #0
 800f65c:	71fb      	strb	r3, [r7, #7]
 800f65e:	e026      	b.n	800f6ae <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800f660:	79fb      	ldrb	r3, [r7, #7]
 800f662:	3b50      	subs	r3, #80	@ 0x50
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2100      	movs	r1, #0
 800f668:	4618      	mov	r0, r3
 800f66a:	f7ff ffbb 	bl	800f5e4 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800f66e:	2100      	movs	r1, #0
 800f670:	2000      	movs	r0, #0
 800f672:	f7ff ffb7 	bl	800f5e4 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800f676:	2100      	movs	r1, #0
 800f678:	2010      	movs	r0, #16
 800f67a:	f7ff ffb3 	bl	800f5e4 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800f67e:	2300      	movs	r3, #0
 800f680:	71bb      	strb	r3, [r7, #6]
 800f682:	e00d      	b.n	800f6a0 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800f684:	79ba      	ldrb	r2, [r7, #6]
 800f686:	79fb      	ldrb	r3, [r7, #7]
 800f688:	490d      	ldr	r1, [pc, #52]	@ (800f6c0 <OLED_Refresh+0x6c>)
 800f68a:	00d2      	lsls	r2, r2, #3
 800f68c:	440a      	add	r2, r1
 800f68e:	4413      	add	r3, r2
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	2101      	movs	r1, #1
 800f694:	4618      	mov	r0, r3
 800f696:	f7ff ffa5 	bl	800f5e4 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800f69a:	79bb      	ldrb	r3, [r7, #6]
 800f69c:	3301      	adds	r3, #1
 800f69e:	71bb      	strb	r3, [r7, #6]
 800f6a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	daed      	bge.n	800f684 <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800f6a8:	79fb      	ldrb	r3, [r7, #7]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	71fb      	strb	r3, [r7, #7]
 800f6ae:	79fb      	ldrb	r3, [r7, #7]
 800f6b0:	2b07      	cmp	r3, #7
 800f6b2:	d9d5      	bls.n	800f660 <OLED_Refresh+0xc>
	}
}
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	240002f4 	.word	0x240002f4

0800f6c4 <OLED_Clear>:
// 清屏函数
void OLED_Clear(void)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	71fb      	strb	r3, [r7, #7]
 800f6ce:	e014      	b.n	800f6fa <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	71bb      	strb	r3, [r7, #6]
 800f6d4:	e00a      	b.n	800f6ec <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 800f6d6:	79ba      	ldrb	r2, [r7, #6]
 800f6d8:	79fb      	ldrb	r3, [r7, #7]
 800f6da:	490c      	ldr	r1, [pc, #48]	@ (800f70c <OLED_Clear+0x48>)
 800f6dc:	00d2      	lsls	r2, r2, #3
 800f6de:	440a      	add	r2, r1
 800f6e0:	4413      	add	r3, r2
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800f6e6:	79bb      	ldrb	r3, [r7, #6]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	71bb      	strb	r3, [r7, #6]
 800f6ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	daf0      	bge.n	800f6d6 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800f6f4:	79fb      	ldrb	r3, [r7, #7]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	71fb      	strb	r3, [r7, #7]
 800f6fa:	79fb      	ldrb	r3, [r7, #7]
 800f6fc:	2b07      	cmp	r3, #7
 800f6fe:	d9e7      	bls.n	800f6d0 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 800f700:	f7ff ffa8 	bl	800f654 <OLED_Refresh>
}
 800f704:	bf00      	nop
 800f706:	3708      	adds	r7, #8
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	240002f4 	.word	0x240002f4

0800f710 <OLED_DrawPoint>:

// 画点
// x:0~127
// y:0~63
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800f710:	b480      	push	{r7}
 800f712:	b085      	sub	sp, #20
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	460a      	mov	r2, r1
 800f71a:	71fb      	strb	r3, [r7, #7]
 800f71c:	4613      	mov	r3, r2
 800f71e:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800f720:	79bb      	ldrb	r3, [r7, #6]
 800f722:	08db      	lsrs	r3, r3, #3
 800f724:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800f726:	79bb      	ldrb	r3, [r7, #6]
 800f728:	f003 0307 	and.w	r3, r3, #7
 800f72c:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800f72e:	7bbb      	ldrb	r3, [r7, #14]
 800f730:	2201      	movs	r2, #1
 800f732:	fa02 f303 	lsl.w	r3, r2, r3
 800f736:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800f738:	79fa      	ldrb	r2, [r7, #7]
 800f73a:	7bfb      	ldrb	r3, [r7, #15]
 800f73c:	490a      	ldr	r1, [pc, #40]	@ (800f768 <OLED_DrawPoint+0x58>)
 800f73e:	00d2      	lsls	r2, r2, #3
 800f740:	440a      	add	r2, r1
 800f742:	4413      	add	r3, r2
 800f744:	7818      	ldrb	r0, [r3, #0]
 800f746:	79fa      	ldrb	r2, [r7, #7]
 800f748:	7bfb      	ldrb	r3, [r7, #15]
 800f74a:	7b79      	ldrb	r1, [r7, #13]
 800f74c:	4301      	orrs	r1, r0
 800f74e:	b2c8      	uxtb	r0, r1
 800f750:	4905      	ldr	r1, [pc, #20]	@ (800f768 <OLED_DrawPoint+0x58>)
 800f752:	00d2      	lsls	r2, r2, #3
 800f754:	440a      	add	r2, r1
 800f756:	4413      	add	r3, r2
 800f758:	4602      	mov	r2, r0
 800f75a:	701a      	strb	r2, [r3, #0]
}
 800f75c:	bf00      	nop
 800f75e:	3714      	adds	r7, #20
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr
 800f768:	240002f4 	.word	0x240002f4

0800f76c <OLED_ClearPoint>:

// 清除一个点
// x:0~127
// y:0~63
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	4603      	mov	r3, r0
 800f774:	460a      	mov	r2, r1
 800f776:	71fb      	strb	r3, [r7, #7]
 800f778:	4613      	mov	r3, r2
 800f77a:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800f77c:	79bb      	ldrb	r3, [r7, #6]
 800f77e:	08db      	lsrs	r3, r3, #3
 800f780:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800f782:	79bb      	ldrb	r3, [r7, #6]
 800f784:	f003 0307 	and.w	r3, r3, #7
 800f788:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800f78a:	7bbb      	ldrb	r3, [r7, #14]
 800f78c:	2201      	movs	r2, #1
 800f78e:	fa02 f303 	lsl.w	r3, r2, r3
 800f792:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800f794:	79fa      	ldrb	r2, [r7, #7]
 800f796:	7bfb      	ldrb	r3, [r7, #15]
 800f798:	491b      	ldr	r1, [pc, #108]	@ (800f808 <OLED_ClearPoint+0x9c>)
 800f79a:	00d2      	lsls	r2, r2, #3
 800f79c:	440a      	add	r2, r1
 800f79e:	4413      	add	r3, r2
 800f7a0:	7819      	ldrb	r1, [r3, #0]
 800f7a2:	79fa      	ldrb	r2, [r7, #7]
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
 800f7a6:	43c9      	mvns	r1, r1
 800f7a8:	b2c8      	uxtb	r0, r1
 800f7aa:	4917      	ldr	r1, [pc, #92]	@ (800f808 <OLED_ClearPoint+0x9c>)
 800f7ac:	00d2      	lsls	r2, r2, #3
 800f7ae:	440a      	add	r2, r1
 800f7b0:	4413      	add	r3, r2
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800f7b6:	79fa      	ldrb	r2, [r7, #7]
 800f7b8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ba:	4913      	ldr	r1, [pc, #76]	@ (800f808 <OLED_ClearPoint+0x9c>)
 800f7bc:	00d2      	lsls	r2, r2, #3
 800f7be:	440a      	add	r2, r1
 800f7c0:	4413      	add	r3, r2
 800f7c2:	7818      	ldrb	r0, [r3, #0]
 800f7c4:	79fa      	ldrb	r2, [r7, #7]
 800f7c6:	7bfb      	ldrb	r3, [r7, #15]
 800f7c8:	7b79      	ldrb	r1, [r7, #13]
 800f7ca:	4301      	orrs	r1, r0
 800f7cc:	b2c8      	uxtb	r0, r1
 800f7ce:	490e      	ldr	r1, [pc, #56]	@ (800f808 <OLED_ClearPoint+0x9c>)
 800f7d0:	00d2      	lsls	r2, r2, #3
 800f7d2:	440a      	add	r2, r1
 800f7d4:	4413      	add	r3, r2
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800f7da:	79fa      	ldrb	r2, [r7, #7]
 800f7dc:	7bfb      	ldrb	r3, [r7, #15]
 800f7de:	490a      	ldr	r1, [pc, #40]	@ (800f808 <OLED_ClearPoint+0x9c>)
 800f7e0:	00d2      	lsls	r2, r2, #3
 800f7e2:	440a      	add	r2, r1
 800f7e4:	4413      	add	r3, r2
 800f7e6:	7819      	ldrb	r1, [r3, #0]
 800f7e8:	79fa      	ldrb	r2, [r7, #7]
 800f7ea:	7bfb      	ldrb	r3, [r7, #15]
 800f7ec:	43c9      	mvns	r1, r1
 800f7ee:	b2c8      	uxtb	r0, r1
 800f7f0:	4905      	ldr	r1, [pc, #20]	@ (800f808 <OLED_ClearPoint+0x9c>)
 800f7f2:	00d2      	lsls	r2, r2, #3
 800f7f4:	440a      	add	r2, r1
 800f7f6:	4413      	add	r3, r2
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	701a      	strb	r2, [r3, #0]
}
 800f7fc:	bf00      	nop
 800f7fe:	3714      	adds	r7, #20
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	240002f4 	.word	0x240002f4

0800f80c <OLED_ShowChar>:
// x:0~127
// y:0~63
// size:选择字体 12/16/24
// 取模方式 逐列式
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800f80c:	b590      	push	{r4, r7, lr}
 800f80e:	b085      	sub	sp, #20
 800f810:	af00      	add	r7, sp, #0
 800f812:	4604      	mov	r4, r0
 800f814:	4608      	mov	r0, r1
 800f816:	4611      	mov	r1, r2
 800f818:	461a      	mov	r2, r3
 800f81a:	4623      	mov	r3, r4
 800f81c:	71fb      	strb	r3, [r7, #7]
 800f81e:	4603      	mov	r3, r0
 800f820:	71bb      	strb	r3, [r7, #6]
 800f822:	460b      	mov	r3, r1
 800f824:	717b      	strb	r3, [r7, #5]
 800f826:	4613      	mov	r3, r2
 800f828:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800f82a:	79bb      	ldrb	r3, [r7, #6]
 800f82c:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800f82e:	793b      	ldrb	r3, [r7, #4]
 800f830:	08db      	lsrs	r3, r3, #3
 800f832:	b2db      	uxtb	r3, r3
 800f834:	461a      	mov	r2, r3
 800f836:	793b      	ldrb	r3, [r7, #4]
 800f838:	f003 0307 	and.w	r3, r3, #7
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	bf14      	ite	ne
 800f842:	2301      	movne	r3, #1
 800f844:	2300      	moveq	r3, #0
 800f846:	b2db      	uxtb	r3, r3
 800f848:	4413      	add	r3, r2
 800f84a:	b2da      	uxtb	r2, r3
 800f84c:	793b      	ldrb	r3, [r7, #4]
 800f84e:	085b      	lsrs	r3, r3, #1
 800f850:	b2db      	uxtb	r3, r3
 800f852:	fb12 f303 	smulbb	r3, r2, r3
 800f856:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800f858:	797b      	ldrb	r3, [r7, #5]
 800f85a:	3b20      	subs	r3, #32
 800f85c:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800f85e:	2300      	movs	r3, #0
 800f860:	73fb      	strb	r3, [r7, #15]
 800f862:	e057      	b.n	800f914 <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800f864:	793b      	ldrb	r3, [r7, #4]
 800f866:	2b0c      	cmp	r3, #12
 800f868:	d10b      	bne.n	800f882 <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800f86a:	7aba      	ldrb	r2, [r7, #10]
 800f86c:	7bf9      	ldrb	r1, [r7, #15]
 800f86e:	482e      	ldr	r0, [pc, #184]	@ (800f928 <OLED_ShowChar+0x11c>)
 800f870:	4613      	mov	r3, r2
 800f872:	005b      	lsls	r3, r3, #1
 800f874:	4413      	add	r3, r2
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	4403      	add	r3, r0
 800f87a:	440b      	add	r3, r1
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	737b      	strb	r3, [r7, #13]
 800f880:	e019      	b.n	800f8b6 <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800f882:	793b      	ldrb	r3, [r7, #4]
 800f884:	2b10      	cmp	r3, #16
 800f886:	d108      	bne.n	800f89a <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800f888:	7aba      	ldrb	r2, [r7, #10]
 800f88a:	7bfb      	ldrb	r3, [r7, #15]
 800f88c:	4927      	ldr	r1, [pc, #156]	@ (800f92c <OLED_ShowChar+0x120>)
 800f88e:	0112      	lsls	r2, r2, #4
 800f890:	440a      	add	r2, r1
 800f892:	4413      	add	r3, r2
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	737b      	strb	r3, [r7, #13]
 800f898:	e00d      	b.n	800f8b6 <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800f89a:	793b      	ldrb	r3, [r7, #4]
 800f89c:	2b18      	cmp	r3, #24
 800f89e:	d13e      	bne.n	800f91e <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800f8a0:	7aba      	ldrb	r2, [r7, #10]
 800f8a2:	7bf9      	ldrb	r1, [r7, #15]
 800f8a4:	4822      	ldr	r0, [pc, #136]	@ (800f930 <OLED_ShowChar+0x124>)
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	00db      	lsls	r3, r3, #3
 800f8aa:	4413      	add	r3, r2
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	4403      	add	r3, r0
 800f8b0:	440b      	add	r3, r1
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	73bb      	strb	r3, [r7, #14]
 800f8ba:	e025      	b.n	800f908 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800f8bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	da06      	bge.n	800f8d2 <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800f8c4:	79ba      	ldrb	r2, [r7, #6]
 800f8c6:	79fb      	ldrb	r3, [r7, #7]
 800f8c8:	4611      	mov	r1, r2
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7ff ff20 	bl	800f710 <OLED_DrawPoint>
 800f8d0:	e005      	b.n	800f8de <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800f8d2:	79ba      	ldrb	r2, [r7, #6]
 800f8d4:	79fb      	ldrb	r3, [r7, #7]
 800f8d6:	4611      	mov	r1, r2
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7ff ff47 	bl	800f76c <OLED_ClearPoint>
			temp <<= 1;
 800f8de:	7b7b      	ldrb	r3, [r7, #13]
 800f8e0:	005b      	lsls	r3, r3, #1
 800f8e2:	737b      	strb	r3, [r7, #13]
			y++;
 800f8e4:	79bb      	ldrb	r3, [r7, #6]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800f8ea:	79ba      	ldrb	r2, [r7, #6]
 800f8ec:	7b3b      	ldrb	r3, [r7, #12]
 800f8ee:	1ad2      	subs	r2, r2, r3
 800f8f0:	793b      	ldrb	r3, [r7, #4]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d105      	bne.n	800f902 <OLED_ShowChar+0xf6>
			{
				y = y0;
 800f8f6:	7b3b      	ldrb	r3, [r7, #12]
 800f8f8:	71bb      	strb	r3, [r7, #6]
				x++;
 800f8fa:	79fb      	ldrb	r3, [r7, #7]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	71fb      	strb	r3, [r7, #7]
				break;
 800f900:	e005      	b.n	800f90e <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800f902:	7bbb      	ldrb	r3, [r7, #14]
 800f904:	3301      	adds	r3, #1
 800f906:	73bb      	strb	r3, [r7, #14]
 800f908:	7bbb      	ldrb	r3, [r7, #14]
 800f90a:	2b07      	cmp	r3, #7
 800f90c:	d9d6      	bls.n	800f8bc <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800f90e:	7bfb      	ldrb	r3, [r7, #15]
 800f910:	3301      	adds	r3, #1
 800f912:	73fb      	strb	r3, [r7, #15]
 800f914:	7bfa      	ldrb	r2, [r7, #15]
 800f916:	7afb      	ldrb	r3, [r7, #11]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d3a3      	bcc.n	800f864 <OLED_ShowChar+0x58>
 800f91c:	e000      	b.n	800f920 <OLED_ShowChar+0x114>
			return;
 800f91e:	bf00      	nop
			}
		}
	}
}
 800f920:	3714      	adds	r7, #20
 800f922:	46bd      	mov	sp, r7
 800f924:	bd90      	pop	{r4, r7, pc}
 800f926:	bf00      	nop
 800f928:	08015634 	.word	0x08015634
 800f92c:	08015aa8 	.word	0x08015aa8
 800f930:	08016098 	.word	0x08016098

0800f934 <OLED_ShowString>:
// 显示字符串
// x,y:起点坐标
// size1:字体大小
//*chr:字符串起始地址
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	603a      	str	r2, [r7, #0]
 800f93c:	461a      	mov	r2, r3
 800f93e:	4603      	mov	r3, r0
 800f940:	71fb      	strb	r3, [r7, #7]
 800f942:	460b      	mov	r3, r1
 800f944:	71bb      	strb	r3, [r7, #6]
 800f946:	4613      	mov	r3, r2
 800f948:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800f94a:	e01b      	b.n	800f984 <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	781a      	ldrb	r2, [r3, #0]
 800f950:	797b      	ldrb	r3, [r7, #5]
 800f952:	79b9      	ldrb	r1, [r7, #6]
 800f954:	79f8      	ldrb	r0, [r7, #7]
 800f956:	f7ff ff59 	bl	800f80c <OLED_ShowChar>
		x += size1 / 2;
 800f95a:	797b      	ldrb	r3, [r7, #5]
 800f95c:	085b      	lsrs	r3, r3, #1
 800f95e:	b2da      	uxtb	r2, r3
 800f960:	79fb      	ldrb	r3, [r7, #7]
 800f962:	4413      	add	r3, r2
 800f964:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800f966:	79fa      	ldrb	r2, [r7, #7]
 800f968:	797b      	ldrb	r3, [r7, #5]
 800f96a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800f96e:	429a      	cmp	r2, r3
 800f970:	dd05      	ble.n	800f97e <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800f972:	2302      	movs	r3, #2
 800f974:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800f976:	79ba      	ldrb	r2, [r7, #6]
 800f978:	797b      	ldrb	r3, [r7, #5]
 800f97a:	4413      	add	r3, r2
 800f97c:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	3301      	adds	r3, #1
 800f982:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	2b1f      	cmp	r3, #31
 800f98a:	d903      	bls.n	800f994 <OLED_ShowString+0x60>
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	2b7e      	cmp	r3, #126	@ 0x7e
 800f992:	d9db      	bls.n	800f94c <OLED_ShowString+0x18>
	}
}
 800f994:	bf00      	nop
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <OLED_Init>:
	OLED_ShowString(2, 2, str, 12);
	OLED_Refresh();
}
// OLED的初始化
void OLED_Init(void)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	2120      	movs	r1, #32
 800f9a4:	483f      	ldr	r0, [pc, #252]	@ (800faa4 <OLED_Init+0x108>)
 800f9a6:	f7f4 f85d 	bl	8003a64 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800f9aa:	20c8      	movs	r0, #200	@ 0xc8
 800f9ac:	f7f0 fd76 	bl	800049c <HAL_Delay>
	OLED_RES_Set();
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	2120      	movs	r1, #32
 800f9b4:	483b      	ldr	r0, [pc, #236]	@ (800faa4 <OLED_Init+0x108>)
 800f9b6:	f7f4 f855 	bl	8003a64 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	20ae      	movs	r0, #174	@ 0xae
 800f9be:	f7ff fe11 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	f7ff fe0d 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	2010      	movs	r0, #16
 800f9ce:	f7ff fe09 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800f9d2:	2100      	movs	r1, #0
 800f9d4:	2040      	movs	r0, #64	@ 0x40
 800f9d6:	f7ff fe05 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800f9da:	2100      	movs	r1, #0
 800f9dc:	2081      	movs	r0, #129	@ 0x81
 800f9de:	f7ff fe01 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	20cf      	movs	r0, #207	@ 0xcf
 800f9e6:	f7ff fdfd 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	20a1      	movs	r0, #161	@ 0xa1
 800f9ee:	f7ff fdf9 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800f9f2:	2100      	movs	r1, #0
 800f9f4:	20c8      	movs	r0, #200	@ 0xc8
 800f9f6:	f7ff fdf5 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	20a6      	movs	r0, #166	@ 0xa6
 800f9fe:	f7ff fdf1 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800fa02:	2100      	movs	r1, #0
 800fa04:	20a8      	movs	r0, #168	@ 0xa8
 800fa06:	f7ff fded 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800fa0a:	2100      	movs	r1, #0
 800fa0c:	203f      	movs	r0, #63	@ 0x3f
 800fa0e:	f7ff fde9 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800fa12:	2100      	movs	r1, #0
 800fa14:	20d3      	movs	r0, #211	@ 0xd3
 800fa16:	f7ff fde5 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 800fa1a:	2100      	movs	r1, #0
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	f7ff fde1 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800fa22:	2100      	movs	r1, #0
 800fa24:	20d5      	movs	r0, #213	@ 0xd5
 800fa26:	f7ff fddd 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	2080      	movs	r0, #128	@ 0x80
 800fa2e:	f7ff fdd9 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 800fa32:	2100      	movs	r1, #0
 800fa34:	20d9      	movs	r0, #217	@ 0xd9
 800fa36:	f7ff fdd5 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	20f1      	movs	r0, #241	@ 0xf1
 800fa3e:	f7ff fdd1 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 800fa42:	2100      	movs	r1, #0
 800fa44:	20da      	movs	r0, #218	@ 0xda
 800fa46:	f7ff fdcd 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	2012      	movs	r0, #18
 800fa4e:	f7ff fdc9 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 800fa52:	2100      	movs	r1, #0
 800fa54:	20db      	movs	r0, #219	@ 0xdb
 800fa56:	f7ff fdc5 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	2040      	movs	r0, #64	@ 0x40
 800fa5e:	f7ff fdc1 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800fa62:	2100      	movs	r1, #0
 800fa64:	2020      	movs	r0, #32
 800fa66:	f7ff fdbd 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	2002      	movs	r0, #2
 800fa6e:	f7ff fdb9 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 800fa72:	2100      	movs	r1, #0
 800fa74:	208d      	movs	r0, #141	@ 0x8d
 800fa76:	f7ff fdb5 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 800fa7a:	2100      	movs	r1, #0
 800fa7c:	2014      	movs	r0, #20
 800fa7e:	f7ff fdb1 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800fa82:	2100      	movs	r1, #0
 800fa84:	20a4      	movs	r0, #164	@ 0xa4
 800fa86:	f7ff fdad 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	20a6      	movs	r0, #166	@ 0xa6
 800fa8e:	f7ff fda9 	bl	800f5e4 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 800fa92:	2100      	movs	r1, #0
 800fa94:	20af      	movs	r0, #175	@ 0xaf
 800fa96:	f7ff fda5 	bl	800f5e4 <OLED_WR_Byte>
	OLED_Clear();
 800fa9a:	f7ff fe13 	bl	800f6c4 <OLED_Clear>
}
 800fa9e:	bf00      	nop
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	58020800 	.word	0x58020800

0800faa8 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 800faa8:	b480      	push	{r7}
 800faaa:	b087      	sub	sp, #28
 800faac:	af00      	add	r7, sp, #0
 800faae:	6178      	str	r0, [r7, #20]
 800fab0:	ed87 0a04 	vstr	s0, [r7, #16]
 800fab4:	edc7 0a03 	vstr	s1, [r7, #12]
 800fab8:	ed87 1a02 	vstr	s2, [r7, #8]
 800fabc:	edc7 1a01 	vstr	s3, [r7, #4]
 800fac0:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	693a      	ldr	r2, [r7, #16]
 800fac8:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	68fa      	ldr	r2, [r7, #12]
 800face:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	68ba      	ldr	r2, [r7, #8]
 800fad4:	609a      	str	r2, [r3, #8]
	pid->resultMax = max;
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	61da      	str	r2, [r3, #28]
	pid->resultMin = min;
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	683a      	ldr	r2, [r7, #0]
 800fae0:	621a      	str	r2, [r3, #32]
	pid->bias[0] = 0;
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	f04f 0200 	mov.w	r2, #0
 800fae8:	60da      	str	r2, [r3, #12]
	pid->bias[1] = 0;
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	f04f 0200 	mov.w	r2, #0
 800faf0:	611a      	str	r2, [r3, #16]
	pid->bias[2] = 0;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	f04f 0200 	mov.w	r2, #0
 800faf8:	615a      	str	r2, [r3, #20]
}
 800fafa:	bf00      	nop
 800fafc:	371c      	adds	r7, #28
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr

0800fb06 <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
float pid(PID *pid, float Measured, float Target)
{
 800fb06:	b480      	push	{r7}
 800fb08:	b085      	sub	sp, #20
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	60f8      	str	r0, [r7, #12]
 800fb0e:	ed87 0a02 	vstr	s0, [r7, #8]
 800fb12:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->bias[0] = Target - Measured;
 800fb16:	ed97 7a01 	vldr	s14, [r7, #4]
 800fb1a:	edd7 7a02 	vldr	s15, [r7, #8]
 800fb1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->result += pid->kp * (pid->bias[0] - pid->bias[1]) + pid->ki * pid->bias[0] + pid->kd * (pid->bias[0] - 2 * pid->bias[1] + pid->bias[2]);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	ed93 7a06 	vldr	s14, [r3, #24]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	edd3 6a00 	vldr	s13, [r3]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	ed93 6a03 	vldr	s12, [r3, #12]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	edd3 7a04 	vldr	s15, [r3, #16]
 800fb40:	ee76 7a67 	vsub.f32	s15, s12, s15
 800fb44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	ed93 6a01 	vldr	s12, [r3, #4]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	edd3 7a03 	vldr	s15, [r3, #12]
 800fb54:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fb58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	ed93 6a02 	vldr	s12, [r3, #8]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	edd3 5a03 	vldr	s11, [r3, #12]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	edd3 7a04 	vldr	s15, [r3, #16]
 800fb6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fb72:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	edd3 7a05 	vldr	s15, [r3, #20]
 800fb7c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800fb80:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fb84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->bias[2] = pid->bias[1];
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	691a      	ldr	r2, [r3, #16]
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	615a      	str	r2, [r3, #20]
	pid->bias[1] = pid->bias[0];
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	68da      	ldr	r2, [r3, #12]
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->result > pid->resultMax)
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	ed93 7a06 	vldr	s14, [r3, #24]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	edd3 7a07 	vldr	s15, [r3, #28]
 800fbae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb6:	dd04      	ble.n	800fbc2 <pid+0xbc>
		pid->result = pid->resultMax;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	69da      	ldr	r2, [r3, #28]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	619a      	str	r2, [r3, #24]
 800fbc0:	e00e      	b.n	800fbe0 <pid+0xda>
	else if (pid->result < pid->resultMin)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	ed93 7a06 	vldr	s14, [r3, #24]
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	edd3 7a08 	vldr	s15, [r3, #32]
 800fbce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd6:	d503      	bpl.n	800fbe0 <pid+0xda>
		pid->result = pid->resultMin;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	6a1a      	ldr	r2, [r3, #32]
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	619a      	str	r2, [r3, #24]

	return pid->result;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	699b      	ldr	r3, [r3, #24]
 800fbe4:	ee07 3a90 	vmov	s15, r3
}
 800fbe8:	eeb0 0a67 	vmov.f32	s0, s15
 800fbec:	3714      	adds	r7, #20
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr
	...

0800fbf8 <pll_Init>:
 * @param config 配置指针
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b085      	sub	sp, #20
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	ed87 0a01 	vstr	s0, [r7, #4]
 800fc06:	4613      	mov	r3, r2
 800fc08:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f04f 0200 	mov.w	r2, #0
 800fc10:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f04f 0200 	mov.w	r2, #0
 800fc18:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f04f 0200 	mov.w	r2, #0
 800fc20:	609a      	str	r2, [r3, #8]

    signal->sogi_a_1 = 0.f;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f04f 0200 	mov.w	r2, #0
 800fc28:	611a      	str	r2, [r3, #16]
    signal->sogi_a_2 = 0.f;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f04f 0200 	mov.w	r2, #0
 800fc30:	615a      	str	r2, [r3, #20]
    signal->sogi_b_1 = 0.f;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f04f 0200 	mov.w	r2, #0
 800fc38:	61da      	str	r2, [r3, #28]
    signal->sogi_b_2 = 0.f;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f04f 0200 	mov.w	r2, #0
 800fc40:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f04f 0200 	mov.w	r2, #0
 800fc48:	635a      	str	r2, [r3, #52]	@ 0x34

    config->omiga = 2 * PI * f; // f典型值50
 800fc4a:	edd7 7a01 	vldr	s15, [r7, #4]
 800fc4e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800fdb4 <pll_Init+0x1bc>
 800fc52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 800fc5c:	887b      	ldrh	r3, [r7, #2]
 800fc5e:	ee07 3a90 	vmov	s15, r3
 800fc62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fc66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	4a50      	ldr	r2, [pc, #320]	@ (800fdb8 <pll_Init+0x1c0>)
 800fc78:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	f04f 0200 	mov.w	r2, #0
 800fc80:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	edd3 7a00 	vldr	s15, [r3]
 800fc88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fc8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	edd3 7a01 	vldr	s15, [r3, #4]
 800fc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	edd3 7a02 	vldr	s15, [r3, #8]
 800fca6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	edd3 7a00 	vldr	s15, [r3]
 800fcb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	edd3 7a01 	vldr	s15, [r3, #4]
 800fcba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	ed93 7a00 	vldr	s14, [r3]
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	edd3 7a01 	vldr	s15, [r3, #4]
 800fcd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	edd3 7a00 	vldr	s15, [r3]
 800fcda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	edd3 7a01 	vldr	s15, [r3, #4]
 800fce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fd00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd04:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800fd08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fd1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fd20:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800fd24:	ee77 6a67 	vsub.f32	s13, s14, s15
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fd34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd38:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800fd3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fd56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd5a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800fd5e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fd6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd72:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800fd76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	4a0d      	ldr	r2, [pc, #52]	@ (800fdbc <pll_Init+0x1c4>)
 800fd88:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	4a0c      	ldr	r2, [pc, #48]	@ (800fdc0 <pll_Init+0x1c8>)
 800fd8e:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	f04f 0200 	mov.w	r2, #0
 800fd96:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f04f 0200 	mov.w	r2, #0
 800fd9e:	641a      	str	r2, [r3, #64]	@ 0x40
    signal->pid_out = 0.f;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f04f 0200 	mov.w	r2, #0
 800fda6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800fda8:	bf00      	nop
 800fdaa:	3714      	adds	r7, #20
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr
 800fdb4:	40c90fdb 	.word	0x40c90fdb
 800fdb8:	3fb4fdf4 	.word	0x3fb4fdf4
 800fdbc:	428d78c3 	.word	0x428d78c3
 800fdc0:	46758fb9 	.word	0x46758fb9
 800fdc4:	00000000 	.word	0x00000000

0800fdc8 <pll_Control>:
 * @param signal_In 信号指针
 * @param config 配置指针
 * @param signal_Target 目标信号指针
 */
void pll_Control(pll_Signal *signal_In, pll_Config *config, pll_Signal *signal_Target)
{
 800fdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdca:	ed2d 8b02 	vpush	{d8}
 800fdce:	b08b      	sub	sp, #44	@ 0x2c
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_In);
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f000 f8e9 	bl	800ffb0 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_In->sogi_a_0, signal_In->sogi_b_0 / 382 * 3, &signal_In->park_d, &signal_In->park_q, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	68de      	ldr	r6, [r3, #12]
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	ed93 7a06 	vldr	s14, [r3, #24]
 800fde8:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800fef0 <pll_Control+0x128>
 800fdec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fdf0:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800fdf4:	ee27 8a87 	vmul.f32	s16, s15, s14
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800fe0a:	eeb0 0a67 	vmov.f32	s0, s15
 800fe0e:	f002 fbe7 	bl	80125e0 <arm_sin_f32>
 800fe12:	eef0 8a40 	vmov.f32	s17, s0
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800fe1c:	eeb0 0a67 	vmov.f32	s0, s15
 800fe20:	f002 fc24 	bl	801266c <arm_cos_f32>
 800fe24:	eef0 7a40 	vmov.f32	s15, s0
 800fe28:	627e      	str	r6, [r7, #36]	@ 0x24
 800fe2a:	ed87 8a08 	vstr	s16, [r7, #32]
 800fe2e:	61fd      	str	r5, [r7, #28]
 800fe30:	61bc      	str	r4, [r7, #24]
 800fe32:	edc7 8a05 	vstr	s17, [r7, #20]
 800fe36:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800fe3a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800fe3e:	edd7 7a04 	vldr	s15, [r7, #16]
 800fe42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe46:	edd7 6a08 	vldr	s13, [r7, #32]
 800fe4a:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800fe5c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800fe60:	eeb1 7a67 	vneg.f32	s14, s15
 800fe64:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe6c:	edd7 6a08 	vldr	s13, [r7, #32]
 800fe70:	edd7 7a04 	vldr	s15, [r7, #16]
 800fe74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe7c:	69bb      	ldr	r3, [r7, #24]
 800fe7e:	edc3 7a00 	vstr	s15, [r3]
  }
 800fe82:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal_In, config);
 800fe84:	68b9      	ldr	r1, [r7, #8]
 800fe86:	68f8      	ldr	r0, [r7, #12]
 800fe88:	f000 f834 	bl	800fef4 <pll_Pid>
    // 更新theta
    signal_In->theta += (signal_In->pid_out + config->omiga) * config->Ts;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	edd3 7a00 	vldr	s15, [r3]
 800fe9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	edd3 7a01 	vldr	s15, [r3, #4]
 800fea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800feac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal_In->theta = (float)fmod(signal_In->theta, 2 * PI);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800febc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fec0:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 800fee8 <pll_Control+0x120>
 800fec4:	eeb0 0b47 	vmov.f64	d0, d7
 800fec8:	f005 f9ca 	bl	8015260 <fmod>
 800fecc:	eeb0 7b40 	vmov.f64	d7, d0
 800fed0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    // 反park变换
    // arm_inv_park_f32(signal_In->park_d, signal_In->park_q, &signal_In->park_inv_a, &signal_In->park_inv_b, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
}
 800feda:	bf00      	nop
 800fedc:	372c      	adds	r7, #44	@ 0x2c
 800fede:	46bd      	mov	sp, r7
 800fee0:	ecbd 8b02 	vpop	{d8}
 800fee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fee6:	bf00      	nop
 800fee8:	60000000 	.word	0x60000000
 800feec:	401921fb 	.word	0x401921fb
 800fef0:	43bf0000 	.word	0x43bf0000

0800fef4 <pll_Pid>:
 * @brief PI控制器
 * @param signal 信号指针
 * @param config 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	edd3 7a03 	vldr	s15, [r3, #12]
 800ff0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    signal->pid_out += config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	edd3 6a04 	vldr	s13, [r3, #16]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800ff2c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ff30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	ed93 6a05 	vldr	s12, [r3, #20]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800ff40:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ff44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    signal->pid_err[1] = signal->pid_err[0];
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	641a      	str	r2, [r3, #64]	@ 0x40
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800ff60:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800ffa0 <pll_Pid+0xac>
 800ff64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ff68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff6c:	dd03      	ble.n	800ff76 <pll_Pid+0x82>
        signal->pid_out = 50 * PI;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4a0c      	ldr	r2, [pc, #48]	@ (800ffa4 <pll_Pid+0xb0>)
 800ff72:	639a      	str	r2, [r3, #56]	@ 0x38
    else if (signal->pid_out < -50 * PI)
        signal->pid_out = -50 * PI;
}
 800ff74:	e00d      	b.n	800ff92 <pll_Pid+0x9e>
    else if (signal->pid_out < -50 * PI)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800ff7c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800ffa8 <pll_Pid+0xb4>
 800ff80:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ff84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff88:	d400      	bmi.n	800ff8c <pll_Pid+0x98>
}
 800ff8a:	e002      	b.n	800ff92 <pll_Pid+0x9e>
        signal->pid_out = -50 * PI;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	4a07      	ldr	r2, [pc, #28]	@ (800ffac <pll_Pid+0xb8>)
 800ff90:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800ff92:	bf00      	nop
 800ff94:	370c      	adds	r7, #12
 800ff96:	46bd      	mov	sp, r7
 800ff98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop
 800ffa0:	431d1463 	.word	0x431d1463
 800ffa4:	431d1463 	.word	0x431d1463
 800ffa8:	c31d1463 	.word	0xc31d1463
 800ffac:	c31d1463 	.word	0xc31d1463

0800ffb0 <pll_Sogi>:
/**
 * @brief Sogi变换
 * @param signal 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
    signal->sogi_a_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_a_1 + signal->a2 * signal->sogi_a_2;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	edd3 7a00 	vldr	s15, [r3]
 800ffc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	edd3 7a02 	vldr	s15, [r3, #8]
 800ffd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ffd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	edd3 7a04 	vldr	s15, [r3, #16]
 800ffe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ffec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	edd3 7a05 	vldr	s15, [r3, #20]
 800fffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_b_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_b_1 + signal->a2 * signal->sogi_b_2;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	edd3 7a00 	vldr	s15, [r3]
 8010016:	ee27 7a27 	vmul.f32	s14, s14, s15
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8010020:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	edd3 7a01 	vldr	s15, [r3, #4]
 801002a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801002e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	edd3 7a02 	vldr	s15, [r3, #8]
 801003e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010042:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	edd3 7a07 	vldr	s15, [r3, #28]
 8010052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010056:	ee37 7a27 	vadd.f32	s14, s14, s15
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	edd3 7a08 	vldr	s15, [r3, #32]
 8010066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801006a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	685a      	ldr	r2, [r3, #4]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	605a      	str	r2, [r3, #4]
    signal->sogi_a_2 = signal->sogi_a_1;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	691a      	ldr	r2, [r3, #16]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	615a      	str	r2, [r3, #20]
    signal->sogi_a_1 = signal->sogi_a_0;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	68da      	ldr	r2, [r3, #12]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	611a      	str	r2, [r3, #16]
    signal->sogi_b_2 = signal->sogi_b_1;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	69da      	ldr	r2, [r3, #28]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	621a      	str	r2, [r3, #32]
    signal->sogi_b_1 = signal->sogi_b_0;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	699a      	ldr	r2, [r3, #24]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	61da      	str	r2, [r3, #28]
}
 80100a4:	bf00      	nop
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b08a      	sub	sp, #40	@ 0x28
 80100b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80100b6:	f107 031c 	add.w	r3, r7, #28
 80100ba:	2200      	movs	r2, #0
 80100bc:	601a      	str	r2, [r3, #0]
 80100be:	605a      	str	r2, [r3, #4]
 80100c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80100c2:	463b      	mov	r3, r7
 80100c4:	2200      	movs	r2, #0
 80100c6:	601a      	str	r2, [r3, #0]
 80100c8:	605a      	str	r2, [r3, #4]
 80100ca:	609a      	str	r2, [r3, #8]
 80100cc:	60da      	str	r2, [r3, #12]
 80100ce:	611a      	str	r2, [r3, #16]
 80100d0:	615a      	str	r2, [r3, #20]
 80100d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80100d4:	4b3d      	ldr	r3, [pc, #244]	@ (80101cc <MX_ADC1_Init+0x11c>)
 80100d6:	4a3e      	ldr	r2, [pc, #248]	@ (80101d0 <MX_ADC1_Init+0x120>)
 80100d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80100da:	4b3c      	ldr	r3, [pc, #240]	@ (80101cc <MX_ADC1_Init+0x11c>)
 80100dc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80100e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80100e2:	4b3a      	ldr	r3, [pc, #232]	@ (80101cc <MX_ADC1_Init+0x11c>)
 80100e4:	2200      	movs	r2, #0
 80100e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80100e8:	4b38      	ldr	r3, [pc, #224]	@ (80101cc <MX_ADC1_Init+0x11c>)
 80100ea:	2201      	movs	r2, #1
 80100ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80100ee:	4b37      	ldr	r3, [pc, #220]	@ (80101cc <MX_ADC1_Init+0x11c>)
 80100f0:	2208      	movs	r2, #8
 80100f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80100f4:	4b35      	ldr	r3, [pc, #212]	@ (80101cc <MX_ADC1_Init+0x11c>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80100fa:	4b34      	ldr	r3, [pc, #208]	@ (80101cc <MX_ADC1_Init+0x11c>)
 80100fc:	2200      	movs	r2, #0
 80100fe:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8010100:	4b32      	ldr	r3, [pc, #200]	@ (80101cc <MX_ADC1_Init+0x11c>)
 8010102:	2202      	movs	r2, #2
 8010104:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8010106:	4b31      	ldr	r3, [pc, #196]	@ (80101cc <MX_ADC1_Init+0x11c>)
 8010108:	2200      	movs	r2, #0
 801010a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801010c:	4b2f      	ldr	r3, [pc, #188]	@ (80101cc <MX_ADC1_Init+0x11c>)
 801010e:	2200      	movs	r2, #0
 8010110:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010112:	4b2e      	ldr	r3, [pc, #184]	@ (80101cc <MX_ADC1_Init+0x11c>)
 8010114:	2200      	movs	r2, #0
 8010116:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8010118:	4b2c      	ldr	r3, [pc, #176]	@ (80101cc <MX_ADC1_Init+0x11c>)
 801011a:	2203      	movs	r2, #3
 801011c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 801011e:	4b2b      	ldr	r3, [pc, #172]	@ (80101cc <MX_ADC1_Init+0x11c>)
 8010120:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010124:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8010126:	4b29      	ldr	r3, [pc, #164]	@ (80101cc <MX_ADC1_Init+0x11c>)
 8010128:	2200      	movs	r2, #0
 801012a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 801012c:	4b27      	ldr	r3, [pc, #156]	@ (80101cc <MX_ADC1_Init+0x11c>)
 801012e:	2201      	movs	r2, #1
 8010130:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 4;
 8010134:	4b25      	ldr	r3, [pc, #148]	@ (80101cc <MX_ADC1_Init+0x11c>)
 8010136:	2204      	movs	r2, #4
 8010138:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 801013a:	4b24      	ldr	r3, [pc, #144]	@ (80101cc <MX_ADC1_Init+0x11c>)
 801013c:	2240      	movs	r2, #64	@ 0x40
 801013e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8010140:	4b22      	ldr	r3, [pc, #136]	@ (80101cc <MX_ADC1_Init+0x11c>)
 8010142:	2200      	movs	r2, #0
 8010144:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8010146:	4b21      	ldr	r3, [pc, #132]	@ (80101cc <MX_ADC1_Init+0x11c>)
 8010148:	2201      	movs	r2, #1
 801014a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801014c:	481f      	ldr	r0, [pc, #124]	@ (80101cc <MX_ADC1_Init+0x11c>)
 801014e:	f7f0 fb61 	bl	8000814 <HAL_ADC_Init>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	d001      	beq.n	801015c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8010158:	f000 ffee 	bl	8011138 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 801015c:	2300      	movs	r3, #0
 801015e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8010160:	f107 031c 	add.w	r3, r7, #28
 8010164:	4619      	mov	r1, r3
 8010166:	4819      	ldr	r0, [pc, #100]	@ (80101cc <MX_ADC1_Init+0x11c>)
 8010168:	f7f1 f984 	bl	8001474 <HAL_ADCEx_MultiModeConfigChannel>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d001      	beq.n	8010176 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8010172:	f000 ffe1 	bl	8011138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8010176:	4b17      	ldr	r3, [pc, #92]	@ (80101d4 <MX_ADC1_Init+0x124>)
 8010178:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801017a:	2306      	movs	r3, #6
 801017c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 801017e:	2305      	movs	r3, #5
 8010180:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8010182:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8010186:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010188:	2304      	movs	r3, #4
 801018a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 801018c:	2300      	movs	r3, #0
 801018e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8010190:	2300      	movs	r3, #0
 8010192:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010194:	463b      	mov	r3, r7
 8010196:	4619      	mov	r1, r3
 8010198:	480c      	ldr	r0, [pc, #48]	@ (80101cc <MX_ADC1_Init+0x11c>)
 801019a:	f7f0 fcdd 	bl	8000b58 <HAL_ADC_ConfigChannel>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d001      	beq.n	80101a8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80101a4:	f000 ffc8 	bl	8011138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80101a8:	4b0b      	ldr	r3, [pc, #44]	@ (80101d8 <MX_ADC1_Init+0x128>)
 80101aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80101ac:	230c      	movs	r3, #12
 80101ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80101b0:	463b      	mov	r3, r7
 80101b2:	4619      	mov	r1, r3
 80101b4:	4805      	ldr	r0, [pc, #20]	@ (80101cc <MX_ADC1_Init+0x11c>)
 80101b6:	f7f0 fccf 	bl	8000b58 <HAL_ADC_ConfigChannel>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d001      	beq.n	80101c4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80101c0:	f000 ffba 	bl	8011138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80101c4:	bf00      	nop
 80101c6:	3728      	adds	r7, #40	@ 0x28
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	24000774 	.word	0x24000774
 80101d0:	40022000 	.word	0x40022000
 80101d4:	10c00010 	.word	0x10c00010
 80101d8:	0c900008 	.word	0x0c900008

080101dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b0bc      	sub	sp, #240	@ 0xf0
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80101e8:	2200      	movs	r2, #0
 80101ea:	601a      	str	r2, [r3, #0]
 80101ec:	605a      	str	r2, [r3, #4]
 80101ee:	609a      	str	r2, [r3, #8]
 80101f0:	60da      	str	r2, [r3, #12]
 80101f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80101f4:	f107 0318 	add.w	r3, r7, #24
 80101f8:	22c0      	movs	r2, #192	@ 0xc0
 80101fa:	2100      	movs	r1, #0
 80101fc:	4618      	mov	r0, r3
 80101fe:	f003 f890 	bl	8013322 <memset>
  if(adcHandle->Instance==ADC1)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a54      	ldr	r2, [pc, #336]	@ (8010358 <HAL_ADC_MspInit+0x17c>)
 8010208:	4293      	cmp	r3, r2
 801020a:	f040 80a0 	bne.w	801034e <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 801020e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8010212:	f04f 0300 	mov.w	r3, #0
 8010216:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 801021a:	2319      	movs	r3, #25
 801021c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 801021e:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8010222:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 8010224:	2307      	movs	r3, #7
 8010226:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8010228:	2302      	movs	r3, #2
 801022a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 801022c:	2302      	movs	r3, #2
 801022e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8010230:	2300      	movs	r3, #0
 8010232:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8010234:	2300      	movs	r3, #0
 8010236:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8010238:	2300      	movs	r3, #0
 801023a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 801023c:	2300      	movs	r3, #0
 801023e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010242:	f107 0318 	add.w	r3, r7, #24
 8010246:	4618      	mov	r0, r3
 8010248:	f7f6 fd78 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 801024c:	4603      	mov	r3, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	d001      	beq.n	8010256 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8010252:	f000 ff71 	bl	8011138 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8010256:	4b41      	ldr	r3, [pc, #260]	@ (801035c <HAL_ADC_MspInit+0x180>)
 8010258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801025c:	4a3f      	ldr	r2, [pc, #252]	@ (801035c <HAL_ADC_MspInit+0x180>)
 801025e:	f043 0320 	orr.w	r3, r3, #32
 8010262:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010266:	4b3d      	ldr	r3, [pc, #244]	@ (801035c <HAL_ADC_MspInit+0x180>)
 8010268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801026c:	f003 0320 	and.w	r3, r3, #32
 8010270:	617b      	str	r3, [r7, #20]
 8010272:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010274:	4b39      	ldr	r3, [pc, #228]	@ (801035c <HAL_ADC_MspInit+0x180>)
 8010276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801027a:	4a38      	ldr	r2, [pc, #224]	@ (801035c <HAL_ADC_MspInit+0x180>)
 801027c:	f043 0301 	orr.w	r3, r3, #1
 8010280:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010284:	4b35      	ldr	r3, [pc, #212]	@ (801035c <HAL_ADC_MspInit+0x180>)
 8010286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801028a:	f003 0301 	and.w	r3, r3, #1
 801028e:	613b      	str	r3, [r7, #16]
 8010290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010292:	4b32      	ldr	r3, [pc, #200]	@ (801035c <HAL_ADC_MspInit+0x180>)
 8010294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010298:	4a30      	ldr	r2, [pc, #192]	@ (801035c <HAL_ADC_MspInit+0x180>)
 801029a:	f043 0304 	orr.w	r3, r3, #4
 801029e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80102a2:	4b2e      	ldr	r3, [pc, #184]	@ (801035c <HAL_ADC_MspInit+0x180>)
 80102a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80102a8:	f003 0304 	and.w	r3, r3, #4
 80102ac:	60fb      	str	r3, [r7, #12]
 80102ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80102b0:	2340      	movs	r3, #64	@ 0x40
 80102b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80102b6:	2303      	movs	r3, #3
 80102b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102bc:	2300      	movs	r3, #0
 80102be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80102c6:	4619      	mov	r1, r3
 80102c8:	4825      	ldr	r0, [pc, #148]	@ (8010360 <HAL_ADC_MspInit+0x184>)
 80102ca:	f7f3 fa1b 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80102ce:	2310      	movs	r3, #16
 80102d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80102d4:	2303      	movs	r3, #3
 80102d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102da:	2300      	movs	r3, #0
 80102dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80102e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80102e4:	4619      	mov	r1, r3
 80102e6:	481f      	ldr	r0, [pc, #124]	@ (8010364 <HAL_ADC_MspInit+0x188>)
 80102e8:	f7f3 fa0c 	bl	8003704 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80102ec:	4b1e      	ldr	r3, [pc, #120]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 80102ee:	4a1f      	ldr	r2, [pc, #124]	@ (801036c <HAL_ADC_MspInit+0x190>)
 80102f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80102f2:	4b1d      	ldr	r3, [pc, #116]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 80102f4:	2209      	movs	r2, #9
 80102f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80102f8:	4b1b      	ldr	r3, [pc, #108]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 80102fa:	2200      	movs	r2, #0
 80102fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80102fe:	4b1a      	ldr	r3, [pc, #104]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 8010300:	2200      	movs	r2, #0
 8010302:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8010304:	4b18      	ldr	r3, [pc, #96]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 8010306:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801030a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801030c:	4b16      	ldr	r3, [pc, #88]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 801030e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010312:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8010314:	4b14      	ldr	r3, [pc, #80]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 8010316:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801031a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 801031c:	4b12      	ldr	r3, [pc, #72]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 801031e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010322:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8010324:	4b10      	ldr	r3, [pc, #64]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 8010326:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801032a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801032c:	4b0e      	ldr	r3, [pc, #56]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 801032e:	2200      	movs	r2, #0
 8010330:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8010332:	480d      	ldr	r0, [pc, #52]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 8010334:	f7f1 fd24 	bl	8001d80 <HAL_DMA_Init>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d001      	beq.n	8010342 <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 801033e:	f000 fefb 	bl	8011138 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4a08      	ldr	r2, [pc, #32]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 8010346:	64da      	str	r2, [r3, #76]	@ 0x4c
 8010348:	4a07      	ldr	r2, [pc, #28]	@ (8010368 <HAL_ADC_MspInit+0x18c>)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 801034e:	bf00      	nop
 8010350:	37f0      	adds	r7, #240	@ 0xf0
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	40022000 	.word	0x40022000
 801035c:	58024400 	.word	0x58024400
 8010360:	58020000 	.word	0x58020000
 8010364:	58020800 	.word	0x58020800
 8010368:	240007d8 	.word	0x240007d8
 801036c:	40020010 	.word	0x40020010

08010370 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b08a      	sub	sp, #40	@ 0x28
 8010374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8010376:	1d3b      	adds	r3, r7, #4
 8010378:	2224      	movs	r2, #36	@ 0x24
 801037a:	2100      	movs	r1, #0
 801037c:	4618      	mov	r0, r3
 801037e:	f002 ffd0 	bl	8013322 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8010382:	4b12      	ldr	r3, [pc, #72]	@ (80103cc <MX_DAC1_Init+0x5c>)
 8010384:	4a12      	ldr	r2, [pc, #72]	@ (80103d0 <MX_DAC1_Init+0x60>)
 8010386:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8010388:	4810      	ldr	r0, [pc, #64]	@ (80103cc <MX_DAC1_Init+0x5c>)
 801038a:	f7f1 faa9 	bl	80018e0 <HAL_DAC_Init>
 801038e:	4603      	mov	r3, r0
 8010390:	2b00      	cmp	r3, #0
 8010392:	d001      	beq.n	8010398 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8010394:	f000 fed0 	bl	8011138 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8010398:	2300      	movs	r3, #0
 801039a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 801039c:	2300      	movs	r3, #0
 801039e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80103a0:	2300      	movs	r3, #0
 80103a2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80103a4:	2301      	movs	r3, #1
 80103a6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80103a8:	2300      	movs	r3, #0
 80103aa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80103ac:	1d3b      	adds	r3, r7, #4
 80103ae:	2200      	movs	r2, #0
 80103b0:	4619      	mov	r1, r3
 80103b2:	4806      	ldr	r0, [pc, #24]	@ (80103cc <MX_DAC1_Init+0x5c>)
 80103b4:	f7f1 fb98 	bl	8001ae8 <HAL_DAC_ConfigChannel>
 80103b8:	4603      	mov	r3, r0
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d001      	beq.n	80103c2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80103be:	f000 febb 	bl	8011138 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80103c2:	bf00      	nop
 80103c4:	3728      	adds	r7, #40	@ 0x28
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	24000850 	.word	0x24000850
 80103d0:	40007400 	.word	0x40007400

080103d4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b08a      	sub	sp, #40	@ 0x28
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103dc:	f107 0314 	add.w	r3, r7, #20
 80103e0:	2200      	movs	r2, #0
 80103e2:	601a      	str	r2, [r3, #0]
 80103e4:	605a      	str	r2, [r3, #4]
 80103e6:	609a      	str	r2, [r3, #8]
 80103e8:	60da      	str	r2, [r3, #12]
 80103ea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4a1c      	ldr	r2, [pc, #112]	@ (8010464 <HAL_DAC_MspInit+0x90>)
 80103f2:	4293      	cmp	r3, r2
 80103f4:	d131      	bne.n	801045a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80103f6:	4b1c      	ldr	r3, [pc, #112]	@ (8010468 <HAL_DAC_MspInit+0x94>)
 80103f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80103fc:	4a1a      	ldr	r2, [pc, #104]	@ (8010468 <HAL_DAC_MspInit+0x94>)
 80103fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010402:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010406:	4b18      	ldr	r3, [pc, #96]	@ (8010468 <HAL_DAC_MspInit+0x94>)
 8010408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801040c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010410:	613b      	str	r3, [r7, #16]
 8010412:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010414:	4b14      	ldr	r3, [pc, #80]	@ (8010468 <HAL_DAC_MspInit+0x94>)
 8010416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801041a:	4a13      	ldr	r2, [pc, #76]	@ (8010468 <HAL_DAC_MspInit+0x94>)
 801041c:	f043 0301 	orr.w	r3, r3, #1
 8010420:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010424:	4b10      	ldr	r3, [pc, #64]	@ (8010468 <HAL_DAC_MspInit+0x94>)
 8010426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801042a:	f003 0301 	and.w	r3, r3, #1
 801042e:	60fb      	str	r3, [r7, #12]
 8010430:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8010432:	2310      	movs	r3, #16
 8010434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010436:	2303      	movs	r3, #3
 8010438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801043a:	2300      	movs	r3, #0
 801043c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801043e:	f107 0314 	add.w	r3, r7, #20
 8010442:	4619      	mov	r1, r3
 8010444:	4809      	ldr	r0, [pc, #36]	@ (801046c <HAL_DAC_MspInit+0x98>)
 8010446:	f7f3 f95d 	bl	8003704 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 801044a:	2200      	movs	r2, #0
 801044c:	210f      	movs	r1, #15
 801044e:	2036      	movs	r0, #54	@ 0x36
 8010450:	f7f1 f9a6 	bl	80017a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8010454:	2036      	movs	r0, #54	@ 0x36
 8010456:	f7f1 f9bd 	bl	80017d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 801045a:	bf00      	nop
 801045c:	3728      	adds	r7, #40	@ 0x28
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	40007400 	.word	0x40007400
 8010468:	58024400 	.word	0x58024400
 801046c:	58020000 	.word	0x58020000

08010470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8010476:	4b0d      	ldr	r3, [pc, #52]	@ (80104ac <MX_DMA_Init+0x3c>)
 8010478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801047c:	4a0b      	ldr	r2, [pc, #44]	@ (80104ac <MX_DMA_Init+0x3c>)
 801047e:	f043 0301 	orr.w	r3, r3, #1
 8010482:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010486:	4b09      	ldr	r3, [pc, #36]	@ (80104ac <MX_DMA_Init+0x3c>)
 8010488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801048c:	f003 0301 	and.w	r3, r3, #1
 8010490:	607b      	str	r3, [r7, #4]
 8010492:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8010494:	2200      	movs	r2, #0
 8010496:	2100      	movs	r1, #0
 8010498:	200b      	movs	r0, #11
 801049a:	f7f1 f981 	bl	80017a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 801049e:	200b      	movs	r0, #11
 80104a0:	f7f1 f998 	bl	80017d4 <HAL_NVIC_EnableIRQ>

}
 80104a4:	bf00      	nop
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	58024400 	.word	0x58024400

080104b0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b08c      	sub	sp, #48	@ 0x30
 80104b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80104b6:	f107 031c 	add.w	r3, r7, #28
 80104ba:	2200      	movs	r2, #0
 80104bc:	601a      	str	r2, [r3, #0]
 80104be:	605a      	str	r2, [r3, #4]
 80104c0:	609a      	str	r2, [r3, #8]
 80104c2:	60da      	str	r2, [r3, #12]
 80104c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80104c6:	4b69      	ldr	r3, [pc, #420]	@ (801066c <MX_GPIO_Init+0x1bc>)
 80104c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80104cc:	4a67      	ldr	r2, [pc, #412]	@ (801066c <MX_GPIO_Init+0x1bc>)
 80104ce:	f043 0304 	orr.w	r3, r3, #4
 80104d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80104d6:	4b65      	ldr	r3, [pc, #404]	@ (801066c <MX_GPIO_Init+0x1bc>)
 80104d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80104dc:	f003 0304 	and.w	r3, r3, #4
 80104e0:	61bb      	str	r3, [r7, #24]
 80104e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80104e4:	4b61      	ldr	r3, [pc, #388]	@ (801066c <MX_GPIO_Init+0x1bc>)
 80104e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80104ea:	4a60      	ldr	r2, [pc, #384]	@ (801066c <MX_GPIO_Init+0x1bc>)
 80104ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80104f4:	4b5d      	ldr	r3, [pc, #372]	@ (801066c <MX_GPIO_Init+0x1bc>)
 80104f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80104fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104fe:	617b      	str	r3, [r7, #20]
 8010500:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010502:	4b5a      	ldr	r3, [pc, #360]	@ (801066c <MX_GPIO_Init+0x1bc>)
 8010504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010508:	4a58      	ldr	r2, [pc, #352]	@ (801066c <MX_GPIO_Init+0x1bc>)
 801050a:	f043 0301 	orr.w	r3, r3, #1
 801050e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010512:	4b56      	ldr	r3, [pc, #344]	@ (801066c <MX_GPIO_Init+0x1bc>)
 8010514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010518:	f003 0301 	and.w	r3, r3, #1
 801051c:	613b      	str	r3, [r7, #16]
 801051e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010520:	4b52      	ldr	r3, [pc, #328]	@ (801066c <MX_GPIO_Init+0x1bc>)
 8010522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010526:	4a51      	ldr	r2, [pc, #324]	@ (801066c <MX_GPIO_Init+0x1bc>)
 8010528:	f043 0302 	orr.w	r3, r3, #2
 801052c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010530:	4b4e      	ldr	r3, [pc, #312]	@ (801066c <MX_GPIO_Init+0x1bc>)
 8010532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010536:	f003 0302 	and.w	r3, r3, #2
 801053a:	60fb      	str	r3, [r7, #12]
 801053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801053e:	4b4b      	ldr	r3, [pc, #300]	@ (801066c <MX_GPIO_Init+0x1bc>)
 8010540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010544:	4a49      	ldr	r2, [pc, #292]	@ (801066c <MX_GPIO_Init+0x1bc>)
 8010546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801054a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801054e:	4b47      	ldr	r3, [pc, #284]	@ (801066c <MX_GPIO_Init+0x1bc>)
 8010550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010558:	60bb      	str	r3, [r7, #8]
 801055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801055c:	4b43      	ldr	r3, [pc, #268]	@ (801066c <MX_GPIO_Init+0x1bc>)
 801055e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010562:	4a42      	ldr	r2, [pc, #264]	@ (801066c <MX_GPIO_Init+0x1bc>)
 8010564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010568:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801056c:	4b3f      	ldr	r3, [pc, #252]	@ (801066c <MX_GPIO_Init+0x1bc>)
 801056e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010576:	607b      	str	r3, [r7, #4]
 8010578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 801057a:	2200      	movs	r2, #0
 801057c:	2120      	movs	r1, #32
 801057e:	483c      	ldr	r0, [pc, #240]	@ (8010670 <MX_GPIO_Init+0x1c0>)
 8010580:	f7f3 fa70 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8010584:	2200      	movs	r2, #0
 8010586:	2102      	movs	r1, #2
 8010588:	483a      	ldr	r0, [pc, #232]	@ (8010674 <MX_GPIO_Init+0x1c4>)
 801058a:	f7f3 fa6b 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 801058e:	2200      	movs	r2, #0
 8010590:	21c0      	movs	r1, #192	@ 0xc0
 8010592:	4839      	ldr	r0, [pc, #228]	@ (8010678 <MX_GPIO_Init+0x1c8>)
 8010594:	f7f3 fa66 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8010598:	2201      	movs	r2, #1
 801059a:	2101      	movs	r1, #1
 801059c:	4837      	ldr	r0, [pc, #220]	@ (801067c <MX_GPIO_Init+0x1cc>)
 801059e:	f7f3 fa61 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80105a2:	2200      	movs	r2, #0
 80105a4:	2140      	movs	r1, #64	@ 0x40
 80105a6:	4835      	ldr	r0, [pc, #212]	@ (801067c <MX_GPIO_Init+0x1cc>)
 80105a8:	f7f3 fa5c 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80105ac:	2320      	movs	r3, #32
 80105ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80105b0:	2301      	movs	r3, #1
 80105b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105b4:	2300      	movs	r3, #0
 80105b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80105b8:	2301      	movs	r3, #1
 80105ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80105bc:	f107 031c 	add.w	r3, r7, #28
 80105c0:	4619      	mov	r1, r3
 80105c2:	482b      	ldr	r0, [pc, #172]	@ (8010670 <MX_GPIO_Init+0x1c0>)
 80105c4:	f7f3 f89e 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80105c8:	2302      	movs	r3, #2
 80105ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80105cc:	2301      	movs	r3, #1
 80105ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105d0:	2300      	movs	r3, #0
 80105d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80105d4:	2301      	movs	r3, #1
 80105d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80105d8:	f107 031c 	add.w	r3, r7, #28
 80105dc:	4619      	mov	r1, r3
 80105de:	4825      	ldr	r0, [pc, #148]	@ (8010674 <MX_GPIO_Init+0x1c4>)
 80105e0:	f7f3 f890 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 80105e4:	2308      	movs	r3, #8
 80105e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80105e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80105ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80105ee:	2301      	movs	r3, #1
 80105f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 80105f2:	f107 031c 	add.w	r3, r7, #28
 80105f6:	4619      	mov	r1, r3
 80105f8:	481f      	ldr	r0, [pc, #124]	@ (8010678 <MX_GPIO_Init+0x1c8>)
 80105fa:	f7f3 f883 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 80105fe:	23c0      	movs	r3, #192	@ 0xc0
 8010600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010602:	2301      	movs	r3, #1
 8010604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010606:	2300      	movs	r3, #0
 8010608:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801060a:	2300      	movs	r3, #0
 801060c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801060e:	f107 031c 	add.w	r3, r7, #28
 8010612:	4619      	mov	r1, r3
 8010614:	4818      	ldr	r0, [pc, #96]	@ (8010678 <MX_GPIO_Init+0x1c8>)
 8010616:	f7f3 f875 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 801061a:	2301      	movs	r3, #1
 801061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801061e:	2301      	movs	r3, #1
 8010620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010622:	2300      	movs	r3, #0
 8010624:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010626:	2300      	movs	r3, #0
 8010628:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801062a:	f107 031c 	add.w	r3, r7, #28
 801062e:	4619      	mov	r1, r3
 8010630:	4812      	ldr	r0, [pc, #72]	@ (801067c <MX_GPIO_Init+0x1cc>)
 8010632:	f7f3 f867 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8010636:	2340      	movs	r3, #64	@ 0x40
 8010638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801063a:	2301      	movs	r3, #1
 801063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801063e:	2300      	movs	r3, #0
 8010640:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010642:	2301      	movs	r3, #1
 8010644:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8010646:	f107 031c 	add.w	r3, r7, #28
 801064a:	4619      	mov	r1, r3
 801064c:	480b      	ldr	r0, [pc, #44]	@ (801067c <MX_GPIO_Init+0x1cc>)
 801064e:	f7f3 f859 	bl	8003704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8010652:	2200      	movs	r2, #0
 8010654:	2100      	movs	r1, #0
 8010656:	2009      	movs	r0, #9
 8010658:	f7f1 f8a2 	bl	80017a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801065c:	2009      	movs	r0, #9
 801065e:	f7f1 f8b9 	bl	80017d4 <HAL_NVIC_EnableIRQ>

}
 8010662:	bf00      	nop
 8010664:	3730      	adds	r7, #48	@ 0x30
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	58024400 	.word	0x58024400
 8010670:	58020800 	.word	0x58020800
 8010674:	58020400 	.word	0x58020400
 8010678:	58021800 	.word	0x58021800
 801067c:	58022000 	.word	0x58022000

08010680 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8010684:	4b1b      	ldr	r3, [pc, #108]	@ (80106f4 <MX_I2C3_Init+0x74>)
 8010686:	4a1c      	ldr	r2, [pc, #112]	@ (80106f8 <MX_I2C3_Init+0x78>)
 8010688:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A175AB;
 801068a:	4b1a      	ldr	r3, [pc, #104]	@ (80106f4 <MX_I2C3_Init+0x74>)
 801068c:	4a1b      	ldr	r2, [pc, #108]	@ (80106fc <MX_I2C3_Init+0x7c>)
 801068e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8010690:	4b18      	ldr	r3, [pc, #96]	@ (80106f4 <MX_I2C3_Init+0x74>)
 8010692:	2200      	movs	r2, #0
 8010694:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010696:	4b17      	ldr	r3, [pc, #92]	@ (80106f4 <MX_I2C3_Init+0x74>)
 8010698:	2201      	movs	r2, #1
 801069a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801069c:	4b15      	ldr	r3, [pc, #84]	@ (80106f4 <MX_I2C3_Init+0x74>)
 801069e:	2200      	movs	r2, #0
 80106a0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80106a2:	4b14      	ldr	r3, [pc, #80]	@ (80106f4 <MX_I2C3_Init+0x74>)
 80106a4:	2200      	movs	r2, #0
 80106a6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80106a8:	4b12      	ldr	r3, [pc, #72]	@ (80106f4 <MX_I2C3_Init+0x74>)
 80106aa:	2200      	movs	r2, #0
 80106ac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80106ae:	4b11      	ldr	r3, [pc, #68]	@ (80106f4 <MX_I2C3_Init+0x74>)
 80106b0:	2200      	movs	r2, #0
 80106b2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80106b4:	4b0f      	ldr	r3, [pc, #60]	@ (80106f4 <MX_I2C3_Init+0x74>)
 80106b6:	2200      	movs	r2, #0
 80106b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80106ba:	480e      	ldr	r0, [pc, #56]	@ (80106f4 <MX_I2C3_Init+0x74>)
 80106bc:	f7f3 fa20 	bl	8003b00 <HAL_I2C_Init>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d001      	beq.n	80106ca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80106c6:	f000 fd37 	bl	8011138 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80106ca:	2100      	movs	r1, #0
 80106cc:	4809      	ldr	r0, [pc, #36]	@ (80106f4 <MX_I2C3_Init+0x74>)
 80106ce:	f7f3 ffa3 	bl	8004618 <HAL_I2CEx_ConfigAnalogFilter>
 80106d2:	4603      	mov	r3, r0
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d001      	beq.n	80106dc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80106d8:	f000 fd2e 	bl	8011138 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80106dc:	2100      	movs	r1, #0
 80106de:	4805      	ldr	r0, [pc, #20]	@ (80106f4 <MX_I2C3_Init+0x74>)
 80106e0:	f7f3 ffe5 	bl	80046ae <HAL_I2CEx_ConfigDigitalFilter>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d001      	beq.n	80106ee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80106ea:	f000 fd25 	bl	8011138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80106ee:	bf00      	nop
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	24000864 	.word	0x24000864
 80106f8:	40005c00 	.word	0x40005c00
 80106fc:	30a175ab 	.word	0x30a175ab

08010700 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b0ba      	sub	sp, #232	@ 0xe8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010708:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801070c:	2200      	movs	r2, #0
 801070e:	601a      	str	r2, [r3, #0]
 8010710:	605a      	str	r2, [r3, #4]
 8010712:	609a      	str	r2, [r3, #8]
 8010714:	60da      	str	r2, [r3, #12]
 8010716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010718:	f107 0310 	add.w	r3, r7, #16
 801071c:	22c0      	movs	r2, #192	@ 0xc0
 801071e:	2100      	movs	r1, #0
 8010720:	4618      	mov	r0, r3
 8010722:	f002 fdfe 	bl	8013322 <memset>
  if(i2cHandle->Instance==I2C3)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4a27      	ldr	r2, [pc, #156]	@ (80107c8 <HAL_I2C_MspInit+0xc8>)
 801072c:	4293      	cmp	r3, r2
 801072e:	d146      	bne.n	80107be <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8010730:	f04f 0208 	mov.w	r2, #8
 8010734:	f04f 0300 	mov.w	r3, #0
 8010738:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 801073c:	2300      	movs	r3, #0
 801073e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010742:	f107 0310 	add.w	r3, r7, #16
 8010746:	4618      	mov	r0, r3
 8010748:	f7f6 faf8 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d001      	beq.n	8010756 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8010752:	f000 fcf1 	bl	8011138 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8010756:	4b1d      	ldr	r3, [pc, #116]	@ (80107cc <HAL_I2C_MspInit+0xcc>)
 8010758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801075c:	4a1b      	ldr	r2, [pc, #108]	@ (80107cc <HAL_I2C_MspInit+0xcc>)
 801075e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010762:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010766:	4b19      	ldr	r3, [pc, #100]	@ (80107cc <HAL_I2C_MspInit+0xcc>)
 8010768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801076c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010770:	60fb      	str	r3, [r7, #12]
 8010772:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8010774:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8010778:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801077c:	2312      	movs	r3, #18
 801077e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010782:	2301      	movs	r3, #1
 8010784:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010788:	2303      	movs	r3, #3
 801078a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801078e:	2304      	movs	r3, #4
 8010790:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010794:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010798:	4619      	mov	r1, r3
 801079a:	480d      	ldr	r0, [pc, #52]	@ (80107d0 <HAL_I2C_MspInit+0xd0>)
 801079c:	f7f2 ffb2 	bl	8003704 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80107a0:	4b0a      	ldr	r3, [pc, #40]	@ (80107cc <HAL_I2C_MspInit+0xcc>)
 80107a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80107a6:	4a09      	ldr	r2, [pc, #36]	@ (80107cc <HAL_I2C_MspInit+0xcc>)
 80107a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80107ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80107b0:	4b06      	ldr	r3, [pc, #24]	@ (80107cc <HAL_I2C_MspInit+0xcc>)
 80107b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80107b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80107ba:	60bb      	str	r3, [r7, #8]
 80107bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80107be:	bf00      	nop
 80107c0:	37e8      	adds	r7, #232	@ 0xe8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	40005c00 	.word	0x40005c00
 80107cc:	58024400 	.word	0x58024400
 80107d0:	58021c00 	.word	0x58021c00

080107d4 <_close>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// IDE版本错误临时修复
__attribute__((weak)) void _close(void) {}
 80107d4:	b480      	push	{r7}
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	bf00      	nop
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr

080107e2 <_lseek>:
__attribute__((weak)) void _lseek(void) {}
 80107e2:	b480      	push	{r7}
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	bf00      	nop
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <_read>:
__attribute__((weak)) void _read(void) {}
 80107f0:	b480      	push	{r7}
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	bf00      	nop
 80107f6:	46bd      	mov	sp, r7
 80107f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fc:	4770      	bx	lr

080107fe <_write>:
__attribute__((weak)) void _write(void) {}
 80107fe:	b480      	push	{r7}
 8010800:	af00      	add	r7, sp, #0
 8010802:	bf00      	nop
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <_fstat>:
__attribute__((weak)) void _fstat(void) {}
 801080c:	b480      	push	{r7}
 801080e:	af00      	add	r7, sp, #0
 8010810:	bf00      	nop
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr

0801081a <_getpid>:
__attribute__((weak)) void _getpid(void) {}
 801081a:	b480      	push	{r7}
 801081c:	af00      	add	r7, sp, #0
 801081e:	bf00      	nop
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <_isatty>:
__attribute__((weak)) void _isatty(void) {}
 8010828:	b480      	push	{r7}
 801082a:	af00      	add	r7, sp, #0
 801082c:	bf00      	nop
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr

08010836 <_kill>:
__attribute__((weak)) void _kill(void) {}
 8010836:	b480      	push	{r7}
 8010838:	af00      	add	r7, sp, #0
 801083a:	bf00      	nop
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <oled_Show>:
float dcCurrent = 0.f;
PID *dcPid;
// 显示函数
uint8_t textBuf[256] = {0};
void oled_Show(void)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	ed2d 8b04 	vpush	{d8-d9}
 801084a:	b092      	sub	sp, #72	@ 0x48
 801084c:	af12      	add	r7, sp, #72	@ 0x48
  // IN:  输入
  sprintf((char *)textBuf, "IN : %5.2fV %5.2fA", signal_V->u_0, signal_I->u_0);
 801084e:	4b7f      	ldr	r3, [pc, #508]	@ (8010a4c <oled_Show+0x208>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	edd3 7a00 	vldr	s15, [r3]
 8010856:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 801085a:	4b7d      	ldr	r3, [pc, #500]	@ (8010a50 <oled_Show+0x20c>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	edd3 7a00 	vldr	s15, [r3]
 8010862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010866:	ed8d 7b00 	vstr	d7, [sp]
 801086a:	ec53 2b16 	vmov	r2, r3, d6
 801086e:	4979      	ldr	r1, [pc, #484]	@ (8010a54 <oled_Show+0x210>)
 8010870:	4879      	ldr	r0, [pc, #484]	@ (8010a58 <oled_Show+0x214>)
 8010872:	f002 fcf3 	bl	801325c <siprintf>
  OLED_ShowString(0, 0, textBuf, 12);
 8010876:	230c      	movs	r3, #12
 8010878:	4a77      	ldr	r2, [pc, #476]	@ (8010a58 <oled_Show+0x214>)
 801087a:	2100      	movs	r1, #0
 801087c:	2000      	movs	r0, #0
 801087e:	f7ff f859 	bl	800f934 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // DC:  直流
  sprintf((char *)textBuf, "DC : %5.2fV %5.2fA", dcVolt, dcCurrent);
 8010882:	4b76      	ldr	r3, [pc, #472]	@ (8010a5c <oled_Show+0x218>)
 8010884:	edd3 7a00 	vldr	s15, [r3]
 8010888:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 801088c:	4b74      	ldr	r3, [pc, #464]	@ (8010a60 <oled_Show+0x21c>)
 801088e:	edd3 7a00 	vldr	s15, [r3]
 8010892:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010896:	ed8d 7b00 	vstr	d7, [sp]
 801089a:	ec53 2b16 	vmov	r2, r3, d6
 801089e:	4971      	ldr	r1, [pc, #452]	@ (8010a64 <oled_Show+0x220>)
 80108a0:	486d      	ldr	r0, [pc, #436]	@ (8010a58 <oled_Show+0x214>)
 80108a2:	f002 fcdb 	bl	801325c <siprintf>
  OLED_ShowString(0, 12, textBuf, 12);
 80108a6:	230c      	movs	r3, #12
 80108a8:	4a6b      	ldr	r2, [pc, #428]	@ (8010a58 <oled_Show+0x214>)
 80108aa:	210c      	movs	r1, #12
 80108ac:	2000      	movs	r0, #0
 80108ae:	f7ff f841 	bl	800f934 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // OUT: 输出
  sprintf((char *)textBuf, "OUT: %5.2fV %5.2fA", signal_V->u_0, signal_I->u_0);
 80108b2:	4b66      	ldr	r3, [pc, #408]	@ (8010a4c <oled_Show+0x208>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	edd3 7a00 	vldr	s15, [r3]
 80108ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80108be:	4b64      	ldr	r3, [pc, #400]	@ (8010a50 <oled_Show+0x20c>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	edd3 7a00 	vldr	s15, [r3]
 80108c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80108ca:	ed8d 7b00 	vstr	d7, [sp]
 80108ce:	ec53 2b16 	vmov	r2, r3, d6
 80108d2:	4965      	ldr	r1, [pc, #404]	@ (8010a68 <oled_Show+0x224>)
 80108d4:	4860      	ldr	r0, [pc, #384]	@ (8010a58 <oled_Show+0x214>)
 80108d6:	f002 fcc1 	bl	801325c <siprintf>
  OLED_ShowString(0, 24, textBuf, 12);
 80108da:	230c      	movs	r3, #12
 80108dc:	4a5e      	ldr	r2, [pc, #376]	@ (8010a58 <oled_Show+0x214>)
 80108de:	2118      	movs	r1, #24
 80108e0:	2000      	movs	r0, #0
 80108e2:	f7ff f827 	bl	800f934 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // FAC: 功率因数
  sprintf((char *)textBuf, "FAC: %4.2f", arm_cos_f32(0));
 80108e6:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8010a6c <oled_Show+0x228>
 80108ea:	f001 febf 	bl	801266c <arm_cos_f32>
 80108ee:	eef0 7a40 	vmov.f32	s15, s0
 80108f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80108f6:	ec53 2b17 	vmov	r2, r3, d7
 80108fa:	495d      	ldr	r1, [pc, #372]	@ (8010a70 <oled_Show+0x22c>)
 80108fc:	4856      	ldr	r0, [pc, #344]	@ (8010a58 <oled_Show+0x214>)
 80108fe:	f002 fcad 	bl	801325c <siprintf>
  OLED_ShowString(0, 36, textBuf, 12);
 8010902:	230c      	movs	r3, #12
 8010904:	4a54      	ldr	r2, [pc, #336]	@ (8010a58 <oled_Show+0x214>)
 8010906:	2124      	movs	r1, #36	@ 0x24
 8010908:	2000      	movs	r0, #0
 801090a:	f7ff f813 	bl	800f934 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // EFF: 效率
  sprintf((char *)textBuf, "EFF: %5.2f%% %5.2f", (signal_V->u_0 * signal_I->u_0) / (signal_V->u_0 * signal_I->u_0) * 100.f, MI);
 801090e:	4b4f      	ldr	r3, [pc, #316]	@ (8010a4c <oled_Show+0x208>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	ed93 7a00 	vldr	s14, [r3]
 8010916:	4b4e      	ldr	r3, [pc, #312]	@ (8010a50 <oled_Show+0x20c>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	edd3 7a00 	vldr	s15, [r3]
 801091e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010922:	4b4a      	ldr	r3, [pc, #296]	@ (8010a4c <oled_Show+0x208>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	ed93 7a00 	vldr	s14, [r3]
 801092a:	4b49      	ldr	r3, [pc, #292]	@ (8010a50 <oled_Show+0x20c>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	edd3 7a00 	vldr	s15, [r3]
 8010932:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801093a:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8010a74 <oled_Show+0x230>
 801093e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010942:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8010946:	4b4c      	ldr	r3, [pc, #304]	@ (8010a78 <oled_Show+0x234>)
 8010948:	edd3 7a00 	vldr	s15, [r3]
 801094c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010950:	ed8d 7b00 	vstr	d7, [sp]
 8010954:	ec53 2b16 	vmov	r2, r3, d6
 8010958:	4948      	ldr	r1, [pc, #288]	@ (8010a7c <oled_Show+0x238>)
 801095a:	483f      	ldr	r0, [pc, #252]	@ (8010a58 <oled_Show+0x214>)
 801095c:	f002 fc7e 	bl	801325c <siprintf>
  OLED_ShowString(0, 48, textBuf, 12);
 8010960:	230c      	movs	r3, #12
 8010962:	4a3d      	ldr	r2, [pc, #244]	@ (8010a58 <oled_Show+0x214>)
 8010964:	2130      	movs	r1, #48	@ 0x30
 8010966:	2000      	movs	r0, #0
 8010968:	f7fe ffe4 	bl	800f934 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // 串口调试
  sprintf((char *)textBuf, "x=0,u=%.2f,park_Iq=%.2f,park_Id=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,sogi_Ia=%.2f,sogi_Ib=%.2f,inv_a=%.2f\n", signal_V->u_0, signal_I->park_q, signal_I->park_d, signal_V->park_d, signal_V->park_q, signal_V->sogi_a_0, signal_V->sogi_b_0 / 382 * 3, signal_I->sogi_a_0, signal_I->sogi_b_0 / 382 * 3, signal_I->park_inv_a);
 801096c:	4b37      	ldr	r3, [pc, #220]	@ (8010a4c <oled_Show+0x208>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	edd3 7a00 	vldr	s15, [r3]
 8010974:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8010978:	4b35      	ldr	r3, [pc, #212]	@ (8010a50 <oled_Show+0x20c>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010980:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010984:	4b32      	ldr	r3, [pc, #200]	@ (8010a50 <oled_Show+0x20c>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801098c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8010990:	4b2e      	ldr	r3, [pc, #184]	@ (8010a4c <oled_Show+0x208>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 8010998:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 801099c:	4b2b      	ldr	r3, [pc, #172]	@ (8010a4c <oled_Show+0x208>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	edd3 4a0a 	vldr	s9, [r3, #40]	@ 0x28
 80109a4:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80109a8:	4b28      	ldr	r3, [pc, #160]	@ (8010a4c <oled_Show+0x208>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	edd3 3a03 	vldr	s7, [r3, #12]
 80109b0:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80109b4:	4b25      	ldr	r3, [pc, #148]	@ (8010a4c <oled_Show+0x208>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	ed93 2a06 	vldr	s4, [r3, #24]
 80109bc:	eddf 1a30 	vldr	s3, [pc, #192]	@ 8010a80 <oled_Show+0x23c>
 80109c0:	eec2 2a21 	vdiv.f32	s5, s4, s3
 80109c4:	eeb0 2a08 	vmov.f32	s4, #8	@ 0x40400000  3.0
 80109c8:	ee62 2a82 	vmul.f32	s5, s5, s4
 80109cc:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 80109d0:	4b1f      	ldr	r3, [pc, #124]	@ (8010a50 <oled_Show+0x20c>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	edd3 1a03 	vldr	s3, [r3, #12]
 80109d8:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 80109dc:	4b1c      	ldr	r3, [pc, #112]	@ (8010a50 <oled_Show+0x20c>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	ed93 0a06 	vldr	s0, [r3, #24]
 80109e4:	ed9f 8a26 	vldr	s16, [pc, #152]	@ 8010a80 <oled_Show+0x23c>
 80109e8:	eec0 0a08 	vdiv.f32	s1, s0, s16
 80109ec:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80109f0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80109f4:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80109f8:	4b15      	ldr	r3, [pc, #84]	@ (8010a50 <oled_Show+0x20c>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	ed93 8a0b 	vldr	s16, [r3, #44]	@ 0x2c
 8010a00:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8010a04:	ed8d 8b10 	vstr	d8, [sp, #64]	@ 0x40
 8010a08:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8010a0c:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8010a10:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8010a14:	ed8d 3b08 	vstr	d3, [sp, #32]
 8010a18:	ed8d 4b06 	vstr	d4, [sp, #24]
 8010a1c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8010a20:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010a24:	ed8d 7b00 	vstr	d7, [sp]
 8010a28:	ec53 2b19 	vmov	r2, r3, d9
 8010a2c:	4915      	ldr	r1, [pc, #84]	@ (8010a84 <oled_Show+0x240>)
 8010a2e:	480a      	ldr	r0, [pc, #40]	@ (8010a58 <oled_Show+0x214>)
 8010a30:	f002 fc14 	bl	801325c <siprintf>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8010a34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a38:	4807      	ldr	r0, [pc, #28]	@ (8010a58 <oled_Show+0x214>)
 8010a3a:	f001 f961 	bl	8011d00 <CDC_Transmit_FS>

  OLED_Refresh();
 8010a3e:	f7fe fe09 	bl	800f654 <OLED_Refresh>
}
 8010a42:	bf00      	nop
 8010a44:	46bd      	mov	sp, r7
 8010a46:	ecbd 8b04 	vpop	{d8-d9}
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	20000000 	.word	0x20000000
 8010a50:	20000008 	.word	0x20000008
 8010a54:	08015508 	.word	0x08015508
 8010a58:	240008cc 	.word	0x240008cc
 8010a5c:	240008c0 	.word	0x240008c0
 8010a60:	240008c4 	.word	0x240008c4
 8010a64:	0801551c 	.word	0x0801551c
 8010a68:	08015530 	.word	0x08015530
 8010a6c:	00000000 	.word	0x00000000
 8010a70:	08015544 	.word	0x08015544
 8010a74:	42c80000 	.word	0x42c80000
 8010a78:	24000094 	.word	0x24000094
 8010a7c:	08015550 	.word	0x08015550
 8010a80:	43bf0000 	.word	0x43bf0000
 8010a84:	08015564 	.word	0x08015564

08010a88 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b084      	sub	sp, #16
 8010a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8010a8e:	f000 fac7 	bl	8011020 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8010a92:	4b7e      	ldr	r3, [pc, #504]	@ (8010c8c <main+0x204>)
 8010a94:	695b      	ldr	r3, [r3, #20]
 8010a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d11b      	bne.n	8010ad6 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8010a9e:	f3bf 8f4f 	dsb	sy
}
 8010aa2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010aa4:	f3bf 8f6f 	isb	sy
}
 8010aa8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8010aaa:	4b78      	ldr	r3, [pc, #480]	@ (8010c8c <main+0x204>)
 8010aac:	2200      	movs	r2, #0
 8010aae:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8010ab2:	f3bf 8f4f 	dsb	sy
}
 8010ab6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010ab8:	f3bf 8f6f 	isb	sy
}
 8010abc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8010abe:	4b73      	ldr	r3, [pc, #460]	@ (8010c8c <main+0x204>)
 8010ac0:	695b      	ldr	r3, [r3, #20]
 8010ac2:	4a72      	ldr	r2, [pc, #456]	@ (8010c8c <main+0x204>)
 8010ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010ac8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8010aca:	f3bf 8f4f 	dsb	sy
}
 8010ace:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010ad0:	f3bf 8f6f 	isb	sy
}
 8010ad4:	e000      	b.n	8010ad8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8010ad6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8010ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8010c8c <main+0x204>)
 8010ada:	695b      	ldr	r3, [r3, #20]
 8010adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d138      	bne.n	8010b56 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8010ae4:	4b69      	ldr	r3, [pc, #420]	@ (8010c8c <main+0x204>)
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8010aec:	f3bf 8f4f 	dsb	sy
}
 8010af0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8010af2:	4b66      	ldr	r3, [pc, #408]	@ (8010c8c <main+0x204>)
 8010af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010af8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	0b5b      	lsrs	r3, r3, #13
 8010afe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010b02:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	08db      	lsrs	r3, r3, #3
 8010b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b0c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	015a      	lsls	r2, r3, #5
 8010b12:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8010b16:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8010b1c:	495b      	ldr	r1, [pc, #364]	@ (8010c8c <main+0x204>)
 8010b1e:	4313      	orrs	r3, r2
 8010b20:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	1e5a      	subs	r2, r3, #1
 8010b28:	607a      	str	r2, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d1ef      	bne.n	8010b0e <main+0x86>
    } while(sets-- != 0U);
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	1e5a      	subs	r2, r3, #1
 8010b32:	60ba      	str	r2, [r7, #8]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d1e5      	bne.n	8010b04 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8010b38:	f3bf 8f4f 	dsb	sy
}
 8010b3c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8010b3e:	4b53      	ldr	r3, [pc, #332]	@ (8010c8c <main+0x204>)
 8010b40:	695b      	ldr	r3, [r3, #20]
 8010b42:	4a52      	ldr	r2, [pc, #328]	@ (8010c8c <main+0x204>)
 8010b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010b48:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8010b4a:	f3bf 8f4f 	dsb	sy
}
 8010b4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010b50:	f3bf 8f6f 	isb	sy
}
 8010b54:	e000      	b.n	8010b58 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8010b56:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010b58:	f7ef fc44 	bl	80003e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010b5c:	f000 f8b8 	bl	8010cd0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8010b60:	f000 f964 	bl	8010e2c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010b64:	f7ff fca4 	bl	80104b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8010b68:	f7ff fc82 	bl	8010470 <MX_DMA_Init>
  MX_ADC1_Init();
 8010b6c:	f7ff faa0 	bl	80100b0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8010b70:	f7ff fbfe 	bl	8010370 <MX_DAC1_Init>
  MX_SPI1_Init();
 8010b74:	f000 fae6 	bl	8011144 <MX_SPI1_Init>
  MX_SPI2_Init();
 8010b78:	f000 fb3a 	bl	80111f0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8010b7c:	f000 fd8a 	bl	8011694 <MX_TIM2_Init>
  MX_TIM8_Init();
 8010b80:	f000 fe4e 	bl	8011820 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8010b84:	f000 fffc 	bl	8011b80 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8010b88:	f7ff fd7a 	bl	8010680 <MX_I2C3_Init>
  MX_TIM3_Init();
 8010b8c:	f000 fdfa 	bl	8011784 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal *)malloc(sizeof(pll_Signal));
 8010b90:	205c      	movs	r0, #92	@ 0x5c
 8010b92:	f001 fdb5 	bl	8012700 <malloc>
 8010b96:	4603      	mov	r3, r0
 8010b98:	461a      	mov	r2, r3
 8010b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8010c90 <main+0x208>)
 8010b9c:	601a      	str	r2, [r3, #0]
  signal_config_V = (pll_Config *)malloc(sizeof(pll_Config));
 8010b9e:	2020      	movs	r0, #32
 8010ba0:	f001 fdae 	bl	8012700 <malloc>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	461a      	mov	r2, r3
 8010ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8010c94 <main+0x20c>)
 8010baa:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal *)malloc(sizeof(pll_Signal));
 8010bac:	205c      	movs	r0, #92	@ 0x5c
 8010bae:	f001 fda7 	bl	8012700 <malloc>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	4b38      	ldr	r3, [pc, #224]	@ (8010c98 <main+0x210>)
 8010bb8:	601a      	str	r2, [r3, #0]
  signal_config_I = (pll_Config *)malloc(sizeof(pll_Config));
 8010bba:	2020      	movs	r0, #32
 8010bbc:	f001 fda0 	bl	8012700 <malloc>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	4b35      	ldr	r3, [pc, #212]	@ (8010c9c <main+0x214>)
 8010bc6:	601a      	str	r2, [r3, #0]
  dcPid = (PID *)malloc(sizeof(PID));
 8010bc8:	2024      	movs	r0, #36	@ 0x24
 8010bca:	f001 fd99 	bl	8012700 <malloc>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	4b33      	ldr	r3, [pc, #204]	@ (8010ca0 <main+0x218>)
 8010bd4:	601a      	str	r2, [r3, #0]
  // 芯片温度
  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 锁相环初始化
  pll_Init(signal_V, signal_config_V, 50, 20000); // 电压环
 8010bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8010c90 <main+0x208>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	4a2e      	ldr	r2, [pc, #184]	@ (8010c94 <main+0x20c>)
 8010bdc:	6811      	ldr	r1, [r2, #0]
 8010bde:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8010be2:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8010ca4 <main+0x21c>
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7ff f806 	bl	800fbf8 <pll_Init>
  pll_Init(signal_I, signal_config_I, 50, 20000); // 电流环
 8010bec:	4b2a      	ldr	r3, [pc, #168]	@ (8010c98 <main+0x210>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8010c9c <main+0x214>)
 8010bf2:	6811      	ldr	r1, [r2, #0]
 8010bf4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8010bf8:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8010ca4 <main+0x21c>
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fe fffb 	bl	800fbf8 <pll_Init>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8010c02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010c06:	2200      	movs	r2, #0
 8010c08:	2100      	movs	r1, #0
 8010c0a:	4827      	ldr	r0, [pc, #156]	@ (8010ca8 <main+0x220>)
 8010c0c:	f7f0 ff37 	bl	8001a7e <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8010c10:	2100      	movs	r1, #0
 8010c12:	4825      	ldr	r0, [pc, #148]	@ (8010ca8 <main+0x220>)
 8010c14:	f7f0 fe86 	bl	8001924 <HAL_DAC_Start>
  // HAL_Delay(200);
  // HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
  // HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED); // 线性度校准
  // HAL_Delay(500);
  // 初始化AD7606
  ad7606_Init();
 8010c18:	f7fe fb18 	bl	800f24c <ad7606_Init>
  // 打开PWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8010c1c:	2100      	movs	r1, #0
 8010c1e:	4823      	ldr	r0, [pc, #140]	@ (8010cac <main+0x224>)
 8010c20:	f7f9 fd28 	bl	800a674 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8010c24:	2100      	movs	r1, #0
 8010c26:	4821      	ldr	r0, [pc, #132]	@ (8010cac <main+0x224>)
 8010c28:	f7fa fdae 	bl	800b788 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8010c2c:	2104      	movs	r1, #4
 8010c2e:	481f      	ldr	r0, [pc, #124]	@ (8010cac <main+0x224>)
 8010c30:	f7f9 fd20 	bl	800a674 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8010c34:	2104      	movs	r1, #4
 8010c36:	481d      	ldr	r0, [pc, #116]	@ (8010cac <main+0x224>)
 8010c38:	f7fa fda6 	bl	800b788 <HAL_TIMEx_PWMN_Start>
  // OLED初始化
  OLED_Init();
 8010c3c:	f7fe feae 	bl	800f99c <OLED_Init>
  // INA238初始化
  ina238_Init(&hi2c3, 0);
 8010c40:	2100      	movs	r1, #0
 8010c42:	481b      	ldr	r0, [pc, #108]	@ (8010cb0 <main+0x228>)
 8010c44:	f7fe fbe6 	bl	800f414 <ina238_Init>
  // pid初始化
  pid_Init(dcPid, 0.01, 0.1, 0.1, 0.95, 0.3);
 8010c48:	4b15      	ldr	r3, [pc, #84]	@ (8010ca0 <main+0x218>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	ed9f 2a19 	vldr	s4, [pc, #100]	@ 8010cb4 <main+0x22c>
 8010c50:	eddf 1a19 	vldr	s3, [pc, #100]	@ 8010cb8 <main+0x230>
 8010c54:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8010cbc <main+0x234>
 8010c58:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8010cbc <main+0x234>
 8010c5c:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8010cc0 <main+0x238>
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7fe ff21 	bl	800faa8 <pid_Init>
  // 开启中断
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 8010c66:	2100      	movs	r1, #0
 8010c68:	4816      	ldr	r0, [pc, #88]	@ (8010cc4 <main+0x23c>)
 8010c6a:	f7fe fb29 	bl	800f2c0 <ad7606_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8010c6e:	4816      	ldr	r0, [pc, #88]	@ (8010cc8 <main+0x240>)
 8010c70:	f7f9 fc26 	bl	800a4c0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //    dcVolt = ina238_GetVolt(&hi2c3);
    oled_Show();
 8010c74:	f7ff fde6 	bl	8010844 <oled_Show>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8010c78:	2101      	movs	r1, #1
 8010c7a:	4814      	ldr	r0, [pc, #80]	@ (8010ccc <main+0x244>)
 8010c7c:	f7f2 ff0b 	bl	8003a96 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8010c80:	2064      	movs	r0, #100	@ 0x64
 8010c82:	f7ef fc0b 	bl	800049c <HAL_Delay>
    oled_Show();
 8010c86:	bf00      	nop
 8010c88:	e7f4      	b.n	8010c74 <main+0x1ec>
 8010c8a:	bf00      	nop
 8010c8c:	e000ed00 	.word	0xe000ed00
 8010c90:	20000000 	.word	0x20000000
 8010c94:	20000004 	.word	0x20000004
 8010c98:	20000008 	.word	0x20000008
 8010c9c:	2000000c 	.word	0x2000000c
 8010ca0:	240008c8 	.word	0x240008c8
 8010ca4:	42480000 	.word	0x42480000
 8010ca8:	24000850 	.word	0x24000850
 8010cac:	24000bc0 	.word	0x24000bc0
 8010cb0:	24000864 	.word	0x24000864
 8010cb4:	3e99999a 	.word	0x3e99999a
 8010cb8:	3f733333 	.word	0x3f733333
 8010cbc:	3dcccccd 	.word	0x3dcccccd
 8010cc0:	3c23d70a 	.word	0x3c23d70a
 8010cc4:	24000b28 	.word	0x24000b28
 8010cc8:	24000b74 	.word	0x24000b74
 8010ccc:	58022000 	.word	0x58022000

08010cd0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b09e      	sub	sp, #120	@ 0x78
 8010cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010cda:	224c      	movs	r2, #76	@ 0x4c
 8010cdc:	2100      	movs	r1, #0
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f002 fb1f 	bl	8013322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010ce4:	f107 030c 	add.w	r3, r7, #12
 8010ce8:	2220      	movs	r2, #32
 8010cea:	2100      	movs	r1, #0
 8010cec:	4618      	mov	r0, r3
 8010cee:	f002 fb18 	bl	8013322 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8010cf2:	2002      	movs	r0, #2
 8010cf4:	f7f4 ffc6 	bl	8005c84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	60bb      	str	r3, [r7, #8]
 8010cfc:	4b48      	ldr	r3, [pc, #288]	@ (8010e20 <SystemClock_Config+0x150>)
 8010cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d00:	4a47      	ldr	r2, [pc, #284]	@ (8010e20 <SystemClock_Config+0x150>)
 8010d02:	f023 0301 	bic.w	r3, r3, #1
 8010d06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010d08:	4b45      	ldr	r3, [pc, #276]	@ (8010e20 <SystemClock_Config+0x150>)
 8010d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d0c:	f003 0301 	and.w	r3, r3, #1
 8010d10:	60bb      	str	r3, [r7, #8]
 8010d12:	4b44      	ldr	r3, [pc, #272]	@ (8010e24 <SystemClock_Config+0x154>)
 8010d14:	699b      	ldr	r3, [r3, #24]
 8010d16:	4a43      	ldr	r2, [pc, #268]	@ (8010e24 <SystemClock_Config+0x154>)
 8010d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010d1c:	6193      	str	r3, [r2, #24]
 8010d1e:	4b41      	ldr	r3, [pc, #260]	@ (8010e24 <SystemClock_Config+0x154>)
 8010d20:	699b      	ldr	r3, [r3, #24]
 8010d22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010d26:	60bb      	str	r3, [r7, #8]
 8010d28:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8010d2a:	bf00      	nop
 8010d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8010e24 <SystemClock_Config+0x154>)
 8010d2e:	699b      	ldr	r3, [r3, #24]
 8010d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010d38:	d1f8      	bne.n	8010d2c <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8010e28 <SystemClock_Config+0x158>)
 8010d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010d40:	4a39      	ldr	r2, [pc, #228]	@ (8010e28 <SystemClock_Config+0x158>)
 8010d42:	f043 0302 	orr.w	r3, r3, #2
 8010d46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010d4a:	4b37      	ldr	r3, [pc, #220]	@ (8010e28 <SystemClock_Config+0x158>)
 8010d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010d50:	f003 0302 	and.w	r3, r3, #2
 8010d54:	607b      	str	r3, [r7, #4]
 8010d56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8010d58:	2300      	movs	r3, #0
 8010d5a:	603b      	str	r3, [r7, #0]
 8010d5c:	4b31      	ldr	r3, [pc, #196]	@ (8010e24 <SystemClock_Config+0x154>)
 8010d5e:	699b      	ldr	r3, [r3, #24]
 8010d60:	4a30      	ldr	r2, [pc, #192]	@ (8010e24 <SystemClock_Config+0x154>)
 8010d62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010d66:	6193      	str	r3, [r2, #24]
 8010d68:	4b2e      	ldr	r3, [pc, #184]	@ (8010e24 <SystemClock_Config+0x154>)
 8010d6a:	699b      	ldr	r3, [r3, #24]
 8010d6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010d70:	603b      	str	r3, [r7, #0]
 8010d72:	4b2b      	ldr	r3, [pc, #172]	@ (8010e20 <SystemClock_Config+0x150>)
 8010d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d76:	4a2a      	ldr	r2, [pc, #168]	@ (8010e20 <SystemClock_Config+0x150>)
 8010d78:	f043 0301 	orr.w	r3, r3, #1
 8010d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010d7e:	4b28      	ldr	r3, [pc, #160]	@ (8010e20 <SystemClock_Config+0x150>)
 8010d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d82:	f003 0301 	and.w	r3, r3, #1
 8010d86:	603b      	str	r3, [r7, #0]
 8010d88:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8010d8a:	bf00      	nop
 8010d8c:	4b25      	ldr	r3, [pc, #148]	@ (8010e24 <SystemClock_Config+0x154>)
 8010d8e:	699b      	ldr	r3, [r3, #24]
 8010d90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010d98:	d1f8      	bne.n	8010d8c <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010d9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8010da2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010da4:	2302      	movs	r3, #2
 8010da6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010da8:	2302      	movs	r3, #2
 8010daa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8010dac:	2305      	movs	r3, #5
 8010dae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8010db0:	23c0      	movs	r3, #192	@ 0xc0
 8010db2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8010db4:	2302      	movs	r3, #2
 8010db6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8010db8:	2314      	movs	r3, #20
 8010dba:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8010dbc:	2302      	movs	r3, #2
 8010dbe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8010dc0:	2308      	movs	r3, #8
 8010dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010dcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7f4 ffa1 	bl	8005d18 <HAL_RCC_OscConfig>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d001      	beq.n	8010de0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8010ddc:	f000 f9ac 	bl	8011138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8010de0:	233f      	movs	r3, #63	@ 0x3f
 8010de2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010de4:	2303      	movs	r3, #3
 8010de6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8010de8:	2300      	movs	r3, #0
 8010dea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8010dec:	2308      	movs	r3, #8
 8010dee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8010df0:	2340      	movs	r3, #64	@ 0x40
 8010df2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8010df4:	2340      	movs	r3, #64	@ 0x40
 8010df6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8010df8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8010dfe:	2340      	movs	r3, #64	@ 0x40
 8010e00:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8010e02:	f107 030c 	add.w	r3, r7, #12
 8010e06:	2104      	movs	r1, #4
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7f5 fbdf 	bl	80065cc <HAL_RCC_ClockConfig>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d001      	beq.n	8010e18 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8010e14:	f000 f990 	bl	8011138 <Error_Handler>
  }
}
 8010e18:	bf00      	nop
 8010e1a:	3778      	adds	r7, #120	@ 0x78
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	58000400 	.word	0x58000400
 8010e24:	58024800 	.word	0x58024800
 8010e28:	58024400 	.word	0x58024400

08010e2c <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b0b0      	sub	sp, #192	@ 0xc0
 8010e30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010e32:	463b      	mov	r3, r7
 8010e34:	22c0      	movs	r2, #192	@ 0xc0
 8010e36:	2100      	movs	r1, #0
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f002 fa72 	bl	8013322 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 8010e3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010e42:	f04f 0300 	mov.w	r3, #0
 8010e46:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8010e4a:	2319      	movs	r3, #25
 8010e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8010e4e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8010e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8010e54:	2302      	movs	r3, #2
 8010e56:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8010e58:	2302      	movs	r3, #2
 8010e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8010e5c:	2302      	movs	r3, #2
 8010e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8010e60:	2300      	movs	r3, #0
 8010e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8010e64:	2300      	movs	r3, #0
 8010e66:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8010e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010e70:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010e72:	463b      	mov	r3, r7
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7f5 ff61 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d001      	beq.n	8010e84 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8010e80:	f000 f95a 	bl	8011138 <Error_Handler>
  }
}
 8010e84:	bf00      	nop
 8010e86:	37c0      	adds	r7, #192	@ 0xc0
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <HAL_GPIO_EXTI_Callback>:
/**
 * @brief 外部中断触发示例
 * @param GPIO_Pin 中断引脚
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	ed2d 8b02 	vpush	{d8}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	4603      	mov	r3, r0
 8010e98:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == AD7606_BUSY_Pin)
 8010e9a:	88fb      	ldrh	r3, [r7, #6]
 8010e9c:	2b08      	cmp	r3, #8
 8010e9e:	f040 80a0 	bne.w	8010fe2 <HAL_GPIO_EXTI_Callback+0x156>
  {
    ad7606_GetValue(&hspi2, 2, adcBuf);
 8010ea2:	4a53      	ldr	r2, [pc, #332]	@ (8010ff0 <HAL_GPIO_EXTI_Callback+0x164>)
 8010ea4:	2102      	movs	r1, #2
 8010ea6:	4853      	ldr	r0, [pc, #332]	@ (8010ff4 <HAL_GPIO_EXTI_Callback+0x168>)
 8010ea8:	f7fe fa6e 	bl	800f388 <ad7606_GetValue>
    // 缓存adcBuf
    signal_V->u_0 = adcBuf[0];
 8010eac:	4b52      	ldr	r3, [pc, #328]	@ (8010ff8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8010ff0 <HAL_GPIO_EXTI_Callback+0x164>)
 8010eb2:	6812      	ldr	r2, [r2, #0]
 8010eb4:	601a      	str	r2, [r3, #0]
    signal_I->u_0 = adcBuf[1];
 8010eb6:	4b51      	ldr	r3, [pc, #324]	@ (8010ffc <HAL_GPIO_EXTI_Callback+0x170>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a4d      	ldr	r2, [pc, #308]	@ (8010ff0 <HAL_GPIO_EXTI_Callback+0x164>)
 8010ebc:	6852      	ldr	r2, [r2, #4]
 8010ebe:	601a      	str	r2, [r3, #0]
    // 锁相控制
    pll_Control(signal_V, signal_config_V, signal_V); // 电压环
 8010ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8010ff8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8011000 <HAL_GPIO_EXTI_Callback+0x174>)
 8010ec6:	6811      	ldr	r1, [r2, #0]
 8010ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8010ff8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8010eca:	6812      	ldr	r2, [r2, #0]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fe ff7b 	bl	800fdc8 <pll_Control>
    pll_Control(signal_I, signal_config_I, signal_V); // 电流环
 8010ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8010ffc <HAL_GPIO_EXTI_Callback+0x170>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4a4b      	ldr	r2, [pc, #300]	@ (8011004 <HAL_GPIO_EXTI_Callback+0x178>)
 8010ed8:	6811      	ldr	r1, [r2, #0]
 8010eda:	4a47      	ldr	r2, [pc, #284]	@ (8010ff8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8010edc:	6812      	ldr	r2, [r2, #0]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7fe ff72 	bl	800fdc8 <pll_Control>
    // 调节SPWM占空比
    // 要想实现PFC，需要让电流相位与电压相位相同，而电压相位由电网控制，所以需要闭环控制的是电流相位
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MI * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_cos_f32(signal_V->theta) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 8010ee4:	4b48      	ldr	r3, [pc, #288]	@ (8011008 <HAL_GPIO_EXTI_Callback+0x17c>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eea:	ee07 3a90 	vmov	s15, r3
 8010eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ef2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010ef6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010efa:	4b44      	ldr	r3, [pc, #272]	@ (801100c <HAL_GPIO_EXTI_Callback+0x180>)
 8010efc:	edd3 7a00 	vldr	s15, [r3]
 8010f00:	ee27 8a27 	vmul.f32	s16, s14, s15
 8010f04:	4b3c      	ldr	r3, [pc, #240]	@ (8010ff8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8010f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8010f10:	f001 fbac 	bl	801266c <arm_cos_f32>
 8010f14:	eef0 7a40 	vmov.f32	s15, s0
 8010f18:	ee28 7a27 	vmul.f32	s14, s16, s15
 8010f1c:	4b3a      	ldr	r3, [pc, #232]	@ (8011008 <HAL_GPIO_EXTI_Callback+0x17c>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f22:	ee07 3a90 	vmov	s15, r3
 8010f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f2a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010f2e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f36:	4b34      	ldr	r3, [pc, #208]	@ (8011008 <HAL_GPIO_EXTI_Callback+0x17c>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f3e:	ee17 2a90 	vmov	r2, s15
 8010f42:	635a      	str	r2, [r3, #52]	@ 0x34
    // 反馈侧
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MI * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_cos_f32(signal_I->theta) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 8010f44:	4b30      	ldr	r3, [pc, #192]	@ (8011008 <HAL_GPIO_EXTI_Callback+0x17c>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f4a:	ee07 3a90 	vmov	s15, r3
 8010f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f52:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010f56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010f5a:	4b2c      	ldr	r3, [pc, #176]	@ (801100c <HAL_GPIO_EXTI_Callback+0x180>)
 8010f5c:	edd3 7a00 	vldr	s15, [r3]
 8010f60:	ee27 8a27 	vmul.f32	s16, s14, s15
 8010f64:	4b25      	ldr	r3, [pc, #148]	@ (8010ffc <HAL_GPIO_EXTI_Callback+0x170>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8010f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8010f70:	f001 fb7c 	bl	801266c <arm_cos_f32>
 8010f74:	eef0 7a40 	vmov.f32	s15, s0
 8010f78:	ee28 7a27 	vmul.f32	s14, s16, s15
 8010f7c:	4b22      	ldr	r3, [pc, #136]	@ (8011008 <HAL_GPIO_EXTI_Callback+0x17c>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f82:	ee07 3a90 	vmov	s15, r3
 8010f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f8a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010f8e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f96:	4b1c      	ldr	r3, [pc, #112]	@ (8011008 <HAL_GPIO_EXTI_Callback+0x17c>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f9e:	ee17 2a90 	vmov	r2, s15
 8010fa2:	639a      	str	r2, [r3, #56]	@ 0x38
    // DAC模拟输出，便于调试，不需要时可关闭
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_V->theta + PI / 2.f) + 2048.f);
 8010fa4:	4b14      	ldr	r3, [pc, #80]	@ (8010ff8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8010fac:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011010 <HAL_GPIO_EXTI_Callback+0x184>
 8010fb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8010fb8:	f001 fb12 	bl	80125e0 <arm_sin_f32>
 8010fbc:	eef0 7a40 	vmov.f32	s15, s0
 8010fc0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8011014 <HAL_GPIO_EXTI_Callback+0x188>
 8010fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010fc8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8011018 <HAL_GPIO_EXTI_Callback+0x18c>
 8010fcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fd4:	ee17 3a90 	vmov	r3, s15
 8010fd8:	2200      	movs	r2, #0
 8010fda:	2100      	movs	r1, #0
 8010fdc:	480f      	ldr	r0, [pc, #60]	@ (801101c <HAL_GPIO_EXTI_Callback+0x190>)
 8010fde:	f7f0 fd4e 	bl	8001a7e <HAL_DAC_SetValue>
  }
}
 8010fe2:	bf00      	nop
 8010fe4:	3708      	adds	r7, #8
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	ecbd 8b02 	vpop	{d8}
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	240008b8 	.word	0x240008b8
 8010ff4:	24000a54 	.word	0x24000a54
 8010ff8:	20000000 	.word	0x20000000
 8010ffc:	20000008 	.word	0x20000008
 8011000:	20000004 	.word	0x20000004
 8011004:	2000000c 	.word	0x2000000c
 8011008:	24000bc0 	.word	0x24000bc0
 801100c:	24000094 	.word	0x24000094
 8011010:	3fc90fdb 	.word	0x3fc90fdb
 8011014:	44fa0000 	.word	0x44fa0000
 8011018:	45000000 	.word	0x45000000
 801101c:	24000850 	.word	0x24000850

08011020 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8011026:	463b      	mov	r3, r7
 8011028:	2200      	movs	r2, #0
 801102a:	601a      	str	r2, [r3, #0]
 801102c:	605a      	str	r2, [r3, #4]
 801102e:	609a      	str	r2, [r3, #8]
 8011030:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8011032:	f7f0 fbdd 	bl	80017f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8011036:	2301      	movs	r3, #1
 8011038:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 801103a:	2300      	movs	r3, #0
 801103c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 801103e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8011042:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8011044:	2312      	movs	r3, #18
 8011046:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8011048:	2300      	movs	r3, #0
 801104a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 801104c:	2301      	movs	r3, #1
 801104e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8011050:	2303      	movs	r3, #3
 8011052:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8011054:	2300      	movs	r3, #0
 8011056:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8011058:	2300      	movs	r3, #0
 801105a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 801105c:	2301      	movs	r3, #1
 801105e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8011060:	2301      	movs	r3, #1
 8011062:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011064:	463b      	mov	r3, r7
 8011066:	4618      	mov	r0, r3
 8011068:	f7f0 fbfa 	bl	8001860 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 801106c:	2301      	movs	r3, #1
 801106e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8011070:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8011074:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8011076:	230f      	movs	r3, #15
 8011078:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 801107a:	2300      	movs	r3, #0
 801107c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 801107e:	2300      	movs	r3, #0
 8011080:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011082:	463b      	mov	r3, r7
 8011084:	4618      	mov	r0, r3
 8011086:	f7f0 fbeb 	bl	8001860 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 801108a:	2302      	movs	r3, #2
 801108c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 801108e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8011092:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8011094:	2310      	movs	r3, #16
 8011096:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011098:	463b      	mov	r3, r7
 801109a:	4618      	mov	r0, r3
 801109c:	f7f0 fbe0 	bl	8001860 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80110a0:	2004      	movs	r0, #4
 80110a2:	f7f0 fbbd 	bl	8001820 <HAL_MPU_Enable>
}
 80110a6:	bf00      	nop
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
	...

080110b0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4a17      	ldr	r2, [pc, #92]	@ (801111c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	d101      	bne.n	80110c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80110c2:	f7ef f9cb 	bl	800045c <HAL_IncTick>
  //   // 反馈侧
  //   __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MI * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_cos_f32(signal_I->theta) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
  //   // DAC模拟输出，便于调试，不需要时可关闭
  //   HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_V->theta + PI / 2.f) + 2048.f);
  // }
  if (htim->Instance == TIM3) // 100Hz
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a15      	ldr	r2, [pc, #84]	@ (8011120 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d120      	bne.n	8011112 <HAL_TIM_PeriodElapsedCallback+0x62>
  {
    // 控制中间直流电压
    dcVolt = ina238_GetVolt(&hi2c3);
 80110d0:	4814      	ldr	r0, [pc, #80]	@ (8011124 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80110d2:	f7fe f9e1 	bl	800f498 <ina238_GetVolt>
 80110d6:	eef0 7a40 	vmov.f32	s15, s0
 80110da:	4b13      	ldr	r3, [pc, #76]	@ (8011128 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80110dc:	edc3 7a00 	vstr	s15, [r3]
    dcCurrent = ina238_GetCurrent(&hi2c3);
 80110e0:	4810      	ldr	r0, [pc, #64]	@ (8011124 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80110e2:	f7fe fa35 	bl	800f550 <ina238_GetCurrent>
 80110e6:	eef0 7a40 	vmov.f32	s15, s0
 80110ea:	4b10      	ldr	r3, [pc, #64]	@ (801112c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80110ec:	edc3 7a00 	vstr	s15, [r3]
    MI = pid(dcPid, dcVolt, 10.f);
 80110f0:	4b0f      	ldr	r3, [pc, #60]	@ (8011130 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a0c      	ldr	r2, [pc, #48]	@ (8011128 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80110f6:	edd2 7a00 	vldr	s15, [r2]
 80110fa:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80110fe:	eeb0 0a67 	vmov.f32	s0, s15
 8011102:	4618      	mov	r0, r3
 8011104:	f7fe fcff 	bl	800fb06 <pid>
 8011108:	eef0 7a40 	vmov.f32	s15, s0
 801110c:	4b09      	ldr	r3, [pc, #36]	@ (8011134 <HAL_TIM_PeriodElapsedCallback+0x84>)
 801110e:	edc3 7a00 	vstr	s15, [r3]
  }
  /* USER CODE END Callback 1 */
}
 8011112:	bf00      	nop
 8011114:	3708      	adds	r7, #8
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	40001000 	.word	0x40001000
 8011120:	40000400 	.word	0x40000400
 8011124:	24000864 	.word	0x24000864
 8011128:	240008c0 	.word	0x240008c0
 801112c:	240008c4 	.word	0x240008c4
 8011130:	240008c8 	.word	0x240008c8
 8011134:	24000094 	.word	0x24000094

08011138 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8011138:	b480      	push	{r7}
 801113a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 801113c:	b672      	cpsid	i
}
 801113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011140:	bf00      	nop
 8011142:	e7fd      	b.n	8011140 <Error_Handler+0x8>

08011144 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8011148:	4b27      	ldr	r3, [pc, #156]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 801114a:	4a28      	ldr	r2, [pc, #160]	@ (80111ec <MX_SPI1_Init+0xa8>)
 801114c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801114e:	4b26      	ldr	r3, [pc, #152]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 8011150:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011154:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8011156:	4b24      	ldr	r3, [pc, #144]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 8011158:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801115c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801115e:	4b22      	ldr	r3, [pc, #136]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 8011160:	2207      	movs	r2, #7
 8011162:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011164:	4b20      	ldr	r3, [pc, #128]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 8011166:	2200      	movs	r2, #0
 8011168:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801116a:	4b1f      	ldr	r3, [pc, #124]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 801116c:	2200      	movs	r2, #0
 801116e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011170:	4b1d      	ldr	r3, [pc, #116]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 8011172:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8011176:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011178:	4b1b      	ldr	r3, [pc, #108]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 801117a:	2200      	movs	r2, #0
 801117c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801117e:	4b1a      	ldr	r3, [pc, #104]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 8011180:	2200      	movs	r2, #0
 8011182:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8011184:	4b18      	ldr	r3, [pc, #96]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 8011186:	2200      	movs	r2, #0
 8011188:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801118a:	4b17      	ldr	r3, [pc, #92]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 801118c:	2200      	movs	r2, #0
 801118e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8011190:	4b15      	ldr	r3, [pc, #84]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 8011192:	2200      	movs	r2, #0
 8011194:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011196:	4b14      	ldr	r3, [pc, #80]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 8011198:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801119c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 801119e:	4b12      	ldr	r3, [pc, #72]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 80111a0:	2200      	movs	r2, #0
 80111a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80111a4:	4b10      	ldr	r3, [pc, #64]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 80111a6:	2200      	movs	r2, #0
 80111a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80111aa:	4b0f      	ldr	r3, [pc, #60]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 80111ac:	2200      	movs	r2, #0
 80111ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80111b0:	4b0d      	ldr	r3, [pc, #52]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 80111b2:	2200      	movs	r2, #0
 80111b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80111b6:	4b0c      	ldr	r3, [pc, #48]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 80111b8:	2200      	movs	r2, #0
 80111ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80111bc:	4b0a      	ldr	r3, [pc, #40]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 80111be:	2200      	movs	r2, #0
 80111c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80111c2:	4b09      	ldr	r3, [pc, #36]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 80111c4:	2200      	movs	r2, #0
 80111c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80111c8:	4b07      	ldr	r3, [pc, #28]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 80111ca:	2200      	movs	r2, #0
 80111cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80111ce:	4b06      	ldr	r3, [pc, #24]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 80111d0:	2200      	movs	r2, #0
 80111d2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80111d4:	4804      	ldr	r0, [pc, #16]	@ (80111e8 <MX_SPI1_Init+0xa4>)
 80111d6:	f7f8 faaf 	bl	8009738 <HAL_SPI_Init>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d001      	beq.n	80111e4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80111e0:	f7ff ffaa 	bl	8011138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80111e4:	bf00      	nop
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	240009cc 	.word	0x240009cc
 80111ec:	40013000 	.word	0x40013000

080111f0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80111f4:	4b28      	ldr	r3, [pc, #160]	@ (8011298 <MX_SPI2_Init+0xa8>)
 80111f6:	4a29      	ldr	r2, [pc, #164]	@ (801129c <MX_SPI2_Init+0xac>)
 80111f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80111fa:	4b27      	ldr	r3, [pc, #156]	@ (8011298 <MX_SPI2_Init+0xa8>)
 80111fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011200:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8011202:	4b25      	ldr	r3, [pc, #148]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011204:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011208:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 801120a:	4b23      	ldr	r3, [pc, #140]	@ (8011298 <MX_SPI2_Init+0xa8>)
 801120c:	220f      	movs	r2, #15
 801120e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8011210:	4b21      	ldr	r3, [pc, #132]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011212:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8011216:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011218:	4b1f      	ldr	r3, [pc, #124]	@ (8011298 <MX_SPI2_Init+0xa8>)
 801121a:	2200      	movs	r2, #0
 801121c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801121e:	4b1e      	ldr	r3, [pc, #120]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011220:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8011224:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8011226:	4b1c      	ldr	r3, [pc, #112]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011228:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 801122c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801122e:	4b1a      	ldr	r3, [pc, #104]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011230:	2200      	movs	r2, #0
 8011232:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011234:	4b18      	ldr	r3, [pc, #96]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011236:	2200      	movs	r2, #0
 8011238:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801123a:	4b17      	ldr	r3, [pc, #92]	@ (8011298 <MX_SPI2_Init+0xa8>)
 801123c:	2200      	movs	r2, #0
 801123e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8011240:	4b15      	ldr	r3, [pc, #84]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011242:	2200      	movs	r2, #0
 8011244:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011246:	4b14      	ldr	r3, [pc, #80]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011248:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801124c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 801124e:	4b12      	ldr	r3, [pc, #72]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011250:	2200      	movs	r2, #0
 8011252:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8011254:	4b10      	ldr	r3, [pc, #64]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011256:	2200      	movs	r2, #0
 8011258:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 801125a:	4b0f      	ldr	r3, [pc, #60]	@ (8011298 <MX_SPI2_Init+0xa8>)
 801125c:	2200      	movs	r2, #0
 801125e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011260:	4b0d      	ldr	r3, [pc, #52]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011262:	2200      	movs	r2, #0
 8011264:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8011266:	4b0c      	ldr	r3, [pc, #48]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011268:	2200      	movs	r2, #0
 801126a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 801126c:	4b0a      	ldr	r3, [pc, #40]	@ (8011298 <MX_SPI2_Init+0xa8>)
 801126e:	2200      	movs	r2, #0
 8011270:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8011272:	4b09      	ldr	r3, [pc, #36]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011274:	2200      	movs	r2, #0
 8011276:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8011278:	4b07      	ldr	r3, [pc, #28]	@ (8011298 <MX_SPI2_Init+0xa8>)
 801127a:	2200      	movs	r2, #0
 801127c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 801127e:	4b06      	ldr	r3, [pc, #24]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011280:	2200      	movs	r2, #0
 8011282:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011284:	4804      	ldr	r0, [pc, #16]	@ (8011298 <MX_SPI2_Init+0xa8>)
 8011286:	f7f8 fa57 	bl	8009738 <HAL_SPI_Init>
 801128a:	4603      	mov	r3, r0
 801128c:	2b00      	cmp	r3, #0
 801128e:	d001      	beq.n	8011294 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8011290:	f7ff ff52 	bl	8011138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8011294:	bf00      	nop
 8011296:	bd80      	pop	{r7, pc}
 8011298:	24000a54 	.word	0x24000a54
 801129c:	40003800 	.word	0x40003800

080112a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b08c      	sub	sp, #48	@ 0x30
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80112a8:	f107 031c 	add.w	r3, r7, #28
 80112ac:	2200      	movs	r2, #0
 80112ae:	601a      	str	r2, [r3, #0]
 80112b0:	605a      	str	r2, [r3, #4]
 80112b2:	609a      	str	r2, [r3, #8]
 80112b4:	60da      	str	r2, [r3, #12]
 80112b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4a34      	ldr	r2, [pc, #208]	@ (8011390 <HAL_SPI_MspInit+0xf0>)
 80112be:	4293      	cmp	r3, r2
 80112c0:	d12e      	bne.n	8011320 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80112c2:	4b34      	ldr	r3, [pc, #208]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 80112c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80112c8:	4a32      	ldr	r2, [pc, #200]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 80112ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80112ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80112d2:	4b30      	ldr	r3, [pc, #192]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 80112d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80112d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80112dc:	61bb      	str	r3, [r7, #24]
 80112de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80112e0:	4b2c      	ldr	r3, [pc, #176]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 80112e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80112e6:	4a2b      	ldr	r2, [pc, #172]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 80112e8:	f043 0301 	orr.w	r3, r3, #1
 80112ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80112f0:	4b28      	ldr	r3, [pc, #160]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 80112f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80112f6:	f003 0301 	and.w	r3, r3, #1
 80112fa:	617b      	str	r3, [r7, #20]
 80112fc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 80112fe:	23a0      	movs	r3, #160	@ 0xa0
 8011300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011302:	2302      	movs	r3, #2
 8011304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011306:	2300      	movs	r3, #0
 8011308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801130a:	2301      	movs	r3, #1
 801130c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801130e:	2305      	movs	r3, #5
 8011310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011312:	f107 031c 	add.w	r3, r7, #28
 8011316:	4619      	mov	r1, r3
 8011318:	481f      	ldr	r0, [pc, #124]	@ (8011398 <HAL_SPI_MspInit+0xf8>)
 801131a:	f7f2 f9f3 	bl	8003704 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801131e:	e032      	b.n	8011386 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4a1d      	ldr	r2, [pc, #116]	@ (801139c <HAL_SPI_MspInit+0xfc>)
 8011326:	4293      	cmp	r3, r2
 8011328:	d12d      	bne.n	8011386 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 801132a:	4b1a      	ldr	r3, [pc, #104]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 801132c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011330:	4a18      	ldr	r2, [pc, #96]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 8011332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011336:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801133a:	4b16      	ldr	r3, [pc, #88]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 801133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011344:	613b      	str	r3, [r7, #16]
 8011346:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8011348:	4b12      	ldr	r3, [pc, #72]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 801134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801134e:	4a11      	ldr	r2, [pc, #68]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 8011350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011358:	4b0e      	ldr	r3, [pc, #56]	@ (8011394 <HAL_SPI_MspInit+0xf4>)
 801135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801135e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011362:	60fb      	str	r3, [r7, #12]
 8011364:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8011366:	2306      	movs	r3, #6
 8011368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801136a:	2302      	movs	r3, #2
 801136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801136e:	2300      	movs	r3, #0
 8011370:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011372:	2300      	movs	r3, #0
 8011374:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011376:	2305      	movs	r3, #5
 8011378:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801137a:	f107 031c 	add.w	r3, r7, #28
 801137e:	4619      	mov	r1, r3
 8011380:	4807      	ldr	r0, [pc, #28]	@ (80113a0 <HAL_SPI_MspInit+0x100>)
 8011382:	f7f2 f9bf 	bl	8003704 <HAL_GPIO_Init>
}
 8011386:	bf00      	nop
 8011388:	3730      	adds	r7, #48	@ 0x30
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	40013000 	.word	0x40013000
 8011394:	58024400 	.word	0x58024400
 8011398:	58020000 	.word	0x58020000
 801139c:	40003800 	.word	0x40003800
 80113a0:	58022000 	.word	0x58022000

080113a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80113a4:	b480      	push	{r7}
 80113a6:	b083      	sub	sp, #12
 80113a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80113aa:	4b0a      	ldr	r3, [pc, #40]	@ (80113d4 <HAL_MspInit+0x30>)
 80113ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80113b0:	4a08      	ldr	r2, [pc, #32]	@ (80113d4 <HAL_MspInit+0x30>)
 80113b2:	f043 0302 	orr.w	r3, r3, #2
 80113b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80113ba:	4b06      	ldr	r3, [pc, #24]	@ (80113d4 <HAL_MspInit+0x30>)
 80113bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80113c0:	f003 0302 	and.w	r3, r3, #2
 80113c4:	607b      	str	r3, [r7, #4]
 80113c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80113c8:	bf00      	nop
 80113ca:	370c      	adds	r7, #12
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr
 80113d4:	58024400 	.word	0x58024400

080113d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b090      	sub	sp, #64	@ 0x40
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b0f      	cmp	r3, #15
 80113e4:	d827      	bhi.n	8011436 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80113e6:	2200      	movs	r2, #0
 80113e8:	6879      	ldr	r1, [r7, #4]
 80113ea:	2036      	movs	r0, #54	@ 0x36
 80113ec:	f7f0 f9d8 	bl	80017a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80113f0:	2036      	movs	r0, #54	@ 0x36
 80113f2:	f7f0 f9ef 	bl	80017d4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80113f6:	4a29      	ldr	r2, [pc, #164]	@ (801149c <HAL_InitTick+0xc4>)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80113fc:	4b28      	ldr	r3, [pc, #160]	@ (80114a0 <HAL_InitTick+0xc8>)
 80113fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011402:	4a27      	ldr	r2, [pc, #156]	@ (80114a0 <HAL_InitTick+0xc8>)
 8011404:	f043 0310 	orr.w	r3, r3, #16
 8011408:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801140c:	4b24      	ldr	r3, [pc, #144]	@ (80114a0 <HAL_InitTick+0xc8>)
 801140e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011412:	f003 0310 	and.w	r3, r3, #16
 8011416:	60fb      	str	r3, [r7, #12]
 8011418:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801141a:	f107 0210 	add.w	r2, r7, #16
 801141e:	f107 0314 	add.w	r3, r7, #20
 8011422:	4611      	mov	r1, r2
 8011424:	4618      	mov	r0, r3
 8011426:	f7f5 fc47 	bl	8006cb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 801142a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801142c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801142e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011430:	2b00      	cmp	r3, #0
 8011432:	d106      	bne.n	8011442 <HAL_InitTick+0x6a>
 8011434:	e001      	b.n	801143a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8011436:	2301      	movs	r3, #1
 8011438:	e02b      	b.n	8011492 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 801143a:	f7f5 fc27 	bl	8006c8c <HAL_RCC_GetPCLK1Freq>
 801143e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8011440:	e004      	b.n	801144c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8011442:	f7f5 fc23 	bl	8006c8c <HAL_RCC_GetPCLK1Freq>
 8011446:	4603      	mov	r3, r0
 8011448:	005b      	lsls	r3, r3, #1
 801144a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801144c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801144e:	4a15      	ldr	r2, [pc, #84]	@ (80114a4 <HAL_InitTick+0xcc>)
 8011450:	fba2 2303 	umull	r2, r3, r2, r3
 8011454:	0c9b      	lsrs	r3, r3, #18
 8011456:	3b01      	subs	r3, #1
 8011458:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801145a:	4b13      	ldr	r3, [pc, #76]	@ (80114a8 <HAL_InitTick+0xd0>)
 801145c:	4a13      	ldr	r2, [pc, #76]	@ (80114ac <HAL_InitTick+0xd4>)
 801145e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8011460:	4b11      	ldr	r3, [pc, #68]	@ (80114a8 <HAL_InitTick+0xd0>)
 8011462:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8011466:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8011468:	4a0f      	ldr	r2, [pc, #60]	@ (80114a8 <HAL_InitTick+0xd0>)
 801146a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801146c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 801146e:	4b0e      	ldr	r3, [pc, #56]	@ (80114a8 <HAL_InitTick+0xd0>)
 8011470:	2200      	movs	r2, #0
 8011472:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011474:	4b0c      	ldr	r3, [pc, #48]	@ (80114a8 <HAL_InitTick+0xd0>)
 8011476:	2200      	movs	r2, #0
 8011478:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801147a:	480b      	ldr	r0, [pc, #44]	@ (80114a8 <HAL_InitTick+0xd0>)
 801147c:	f7f8 ffc9 	bl	800a412 <HAL_TIM_Base_Init>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d104      	bne.n	8011490 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8011486:	4808      	ldr	r0, [pc, #32]	@ (80114a8 <HAL_InitTick+0xd0>)
 8011488:	f7f9 f81a 	bl	800a4c0 <HAL_TIM_Base_Start_IT>
 801148c:	4603      	mov	r3, r0
 801148e:	e000      	b.n	8011492 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8011490:	2301      	movs	r3, #1
}
 8011492:	4618      	mov	r0, r3
 8011494:	3740      	adds	r7, #64	@ 0x40
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	24000000 	.word	0x24000000
 80114a0:	58024400 	.word	0x58024400
 80114a4:	431bde83 	.word	0x431bde83
 80114a8:	24000adc 	.word	0x24000adc
 80114ac:	40001000 	.word	0x40001000

080114b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80114b0:	b480      	push	{r7}
 80114b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80114b4:	bf00      	nop
 80114b6:	e7fd      	b.n	80114b4 <NMI_Handler+0x4>

080114b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80114b8:	b480      	push	{r7}
 80114ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80114bc:	bf00      	nop
 80114be:	e7fd      	b.n	80114bc <HardFault_Handler+0x4>

080114c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80114c0:	b480      	push	{r7}
 80114c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80114c4:	bf00      	nop
 80114c6:	e7fd      	b.n	80114c4 <MemManage_Handler+0x4>

080114c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80114c8:	b480      	push	{r7}
 80114ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80114cc:	bf00      	nop
 80114ce:	e7fd      	b.n	80114cc <BusFault_Handler+0x4>

080114d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80114d0:	b480      	push	{r7}
 80114d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80114d4:	bf00      	nop
 80114d6:	e7fd      	b.n	80114d4 <UsageFault_Handler+0x4>

080114d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80114d8:	b480      	push	{r7}
 80114da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80114dc:	bf00      	nop
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr

080114e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80114e6:	b480      	push	{r7}
 80114e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80114ea:	bf00      	nop
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr

080114f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80114f4:	b480      	push	{r7}
 80114f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80114f8:	bf00      	nop
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr

08011502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011502:	b480      	push	{r7}
 8011504:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011506:	bf00      	nop
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 8011514:	2008      	movs	r0, #8
 8011516:	f7f2 fad8 	bl	8003aca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 801151a:	bf00      	nop
 801151c:	bd80      	pop	{r7, pc}
	...

08011520 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8011524:	4802      	ldr	r0, [pc, #8]	@ (8011530 <DMA1_Stream0_IRQHandler+0x10>)
 8011526:	f7f0 ff87 	bl	8002438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 801152a:	bf00      	nop
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	240007d8 	.word	0x240007d8

08011534 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8011538:	4802      	ldr	r0, [pc, #8]	@ (8011544 <TIM3_IRQHandler+0x10>)
 801153a:	f7f9 f9a9 	bl	800a890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801153e:	bf00      	nop
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	24000b74 	.word	0x24000b74

08011548 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 801154c:	4b06      	ldr	r3, [pc, #24]	@ (8011568 <TIM6_DAC_IRQHandler+0x20>)
 801154e:	791b      	ldrb	r3, [r3, #4]
 8011550:	b2db      	uxtb	r3, r3
 8011552:	2b00      	cmp	r3, #0
 8011554:	d002      	beq.n	801155c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8011556:	4804      	ldr	r0, [pc, #16]	@ (8011568 <TIM6_DAC_IRQHandler+0x20>)
 8011558:	f7f0 fa3b 	bl	80019d2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 801155c:	4803      	ldr	r0, [pc, #12]	@ (801156c <TIM6_DAC_IRQHandler+0x24>)
 801155e:	f7f9 f997 	bl	800a890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8011562:	bf00      	nop
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	24000850 	.word	0x24000850
 801156c:	24000adc 	.word	0x24000adc

08011570 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8011574:	4802      	ldr	r0, [pc, #8]	@ (8011580 <OTG_FS_IRQHandler+0x10>)
 8011576:	f7f3 fa27 	bl	80049c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801157a:	bf00      	nop
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	24001ee8 	.word	0x24001ee8

08011584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8011584:	b480      	push	{r7}
 8011586:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8011588:	4b37      	ldr	r3, [pc, #220]	@ (8011668 <SystemInit+0xe4>)
 801158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801158e:	4a36      	ldr	r2, [pc, #216]	@ (8011668 <SystemInit+0xe4>)
 8011590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8011598:	4b34      	ldr	r3, [pc, #208]	@ (801166c <SystemInit+0xe8>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f003 030f 	and.w	r3, r3, #15
 80115a0:	2b06      	cmp	r3, #6
 80115a2:	d807      	bhi.n	80115b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80115a4:	4b31      	ldr	r3, [pc, #196]	@ (801166c <SystemInit+0xe8>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f023 030f 	bic.w	r3, r3, #15
 80115ac:	4a2f      	ldr	r2, [pc, #188]	@ (801166c <SystemInit+0xe8>)
 80115ae:	f043 0307 	orr.w	r3, r3, #7
 80115b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80115b4:	4b2e      	ldr	r3, [pc, #184]	@ (8011670 <SystemInit+0xec>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4a2d      	ldr	r2, [pc, #180]	@ (8011670 <SystemInit+0xec>)
 80115ba:	f043 0301 	orr.w	r3, r3, #1
 80115be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80115c0:	4b2b      	ldr	r3, [pc, #172]	@ (8011670 <SystemInit+0xec>)
 80115c2:	2200      	movs	r2, #0
 80115c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80115c6:	4b2a      	ldr	r3, [pc, #168]	@ (8011670 <SystemInit+0xec>)
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	4929      	ldr	r1, [pc, #164]	@ (8011670 <SystemInit+0xec>)
 80115cc:	4b29      	ldr	r3, [pc, #164]	@ (8011674 <SystemInit+0xf0>)
 80115ce:	4013      	ands	r3, r2
 80115d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80115d2:	4b26      	ldr	r3, [pc, #152]	@ (801166c <SystemInit+0xe8>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	f003 0308 	and.w	r3, r3, #8
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d007      	beq.n	80115ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80115de:	4b23      	ldr	r3, [pc, #140]	@ (801166c <SystemInit+0xe8>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	f023 030f 	bic.w	r3, r3, #15
 80115e6:	4a21      	ldr	r2, [pc, #132]	@ (801166c <SystemInit+0xe8>)
 80115e8:	f043 0307 	orr.w	r3, r3, #7
 80115ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80115ee:	4b20      	ldr	r3, [pc, #128]	@ (8011670 <SystemInit+0xec>)
 80115f0:	2200      	movs	r2, #0
 80115f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80115f4:	4b1e      	ldr	r3, [pc, #120]	@ (8011670 <SystemInit+0xec>)
 80115f6:	2200      	movs	r2, #0
 80115f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80115fa:	4b1d      	ldr	r3, [pc, #116]	@ (8011670 <SystemInit+0xec>)
 80115fc:	2200      	movs	r2, #0
 80115fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8011600:	4b1b      	ldr	r3, [pc, #108]	@ (8011670 <SystemInit+0xec>)
 8011602:	4a1d      	ldr	r2, [pc, #116]	@ (8011678 <SystemInit+0xf4>)
 8011604:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8011606:	4b1a      	ldr	r3, [pc, #104]	@ (8011670 <SystemInit+0xec>)
 8011608:	4a1c      	ldr	r2, [pc, #112]	@ (801167c <SystemInit+0xf8>)
 801160a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 801160c:	4b18      	ldr	r3, [pc, #96]	@ (8011670 <SystemInit+0xec>)
 801160e:	4a1c      	ldr	r2, [pc, #112]	@ (8011680 <SystemInit+0xfc>)
 8011610:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8011612:	4b17      	ldr	r3, [pc, #92]	@ (8011670 <SystemInit+0xec>)
 8011614:	2200      	movs	r2, #0
 8011616:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8011618:	4b15      	ldr	r3, [pc, #84]	@ (8011670 <SystemInit+0xec>)
 801161a:	4a19      	ldr	r2, [pc, #100]	@ (8011680 <SystemInit+0xfc>)
 801161c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 801161e:	4b14      	ldr	r3, [pc, #80]	@ (8011670 <SystemInit+0xec>)
 8011620:	2200      	movs	r2, #0
 8011622:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8011624:	4b12      	ldr	r3, [pc, #72]	@ (8011670 <SystemInit+0xec>)
 8011626:	4a16      	ldr	r2, [pc, #88]	@ (8011680 <SystemInit+0xfc>)
 8011628:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 801162a:	4b11      	ldr	r3, [pc, #68]	@ (8011670 <SystemInit+0xec>)
 801162c:	2200      	movs	r2, #0
 801162e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8011630:	4b0f      	ldr	r3, [pc, #60]	@ (8011670 <SystemInit+0xec>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	4a0e      	ldr	r2, [pc, #56]	@ (8011670 <SystemInit+0xec>)
 8011636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801163a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 801163c:	4b0c      	ldr	r3, [pc, #48]	@ (8011670 <SystemInit+0xec>)
 801163e:	2200      	movs	r2, #0
 8011640:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8011642:	4b10      	ldr	r3, [pc, #64]	@ (8011684 <SystemInit+0x100>)
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	4b10      	ldr	r3, [pc, #64]	@ (8011688 <SystemInit+0x104>)
 8011648:	4013      	ands	r3, r2
 801164a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801164e:	d202      	bcs.n	8011656 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8011650:	4b0e      	ldr	r3, [pc, #56]	@ (801168c <SystemInit+0x108>)
 8011652:	2201      	movs	r2, #1
 8011654:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8011656:	4b0e      	ldr	r3, [pc, #56]	@ (8011690 <SystemInit+0x10c>)
 8011658:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 801165c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 801165e:	bf00      	nop
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr
 8011668:	e000ed00 	.word	0xe000ed00
 801166c:	52002000 	.word	0x52002000
 8011670:	58024400 	.word	0x58024400
 8011674:	eaf6ed7f 	.word	0xeaf6ed7f
 8011678:	02020200 	.word	0x02020200
 801167c:	01ff0000 	.word	0x01ff0000
 8011680:	01010280 	.word	0x01010280
 8011684:	5c001000 	.word	0x5c001000
 8011688:	ffff0000 	.word	0xffff0000
 801168c:	51008108 	.word	0x51008108
 8011690:	52004000 	.word	0x52004000

08011694 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b08e      	sub	sp, #56	@ 0x38
 8011698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801169a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801169e:	2200      	movs	r2, #0
 80116a0:	601a      	str	r2, [r3, #0]
 80116a2:	605a      	str	r2, [r3, #4]
 80116a4:	609a      	str	r2, [r3, #8]
 80116a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80116a8:	f107 031c 	add.w	r3, r7, #28
 80116ac:	2200      	movs	r2, #0
 80116ae:	601a      	str	r2, [r3, #0]
 80116b0:	605a      	str	r2, [r3, #4]
 80116b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80116b4:	463b      	mov	r3, r7
 80116b6:	2200      	movs	r2, #0
 80116b8:	601a      	str	r2, [r3, #0]
 80116ba:	605a      	str	r2, [r3, #4]
 80116bc:	609a      	str	r2, [r3, #8]
 80116be:	60da      	str	r2, [r3, #12]
 80116c0:	611a      	str	r2, [r3, #16]
 80116c2:	615a      	str	r2, [r3, #20]
 80116c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80116c6:	4b2e      	ldr	r3, [pc, #184]	@ (8011780 <MX_TIM2_Init+0xec>)
 80116c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80116cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80116ce:	4b2c      	ldr	r3, [pc, #176]	@ (8011780 <MX_TIM2_Init+0xec>)
 80116d0:	2200      	movs	r2, #0
 80116d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80116d4:	4b2a      	ldr	r3, [pc, #168]	@ (8011780 <MX_TIM2_Init+0xec>)
 80116d6:	2200      	movs	r2, #0
 80116d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 80116da:	4b29      	ldr	r3, [pc, #164]	@ (8011780 <MX_TIM2_Init+0xec>)
 80116dc:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80116e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80116e2:	4b27      	ldr	r3, [pc, #156]	@ (8011780 <MX_TIM2_Init+0xec>)
 80116e4:	2200      	movs	r2, #0
 80116e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80116e8:	4b25      	ldr	r3, [pc, #148]	@ (8011780 <MX_TIM2_Init+0xec>)
 80116ea:	2200      	movs	r2, #0
 80116ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80116ee:	4824      	ldr	r0, [pc, #144]	@ (8011780 <MX_TIM2_Init+0xec>)
 80116f0:	f7f8 fe8f 	bl	800a412 <HAL_TIM_Base_Init>
 80116f4:	4603      	mov	r3, r0
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d001      	beq.n	80116fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80116fa:	f7ff fd1d 	bl	8011138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80116fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011702:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8011704:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011708:	4619      	mov	r1, r3
 801170a:	481d      	ldr	r0, [pc, #116]	@ (8011780 <MX_TIM2_Init+0xec>)
 801170c:	f7f9 fadc 	bl	800acc8 <HAL_TIM_ConfigClockSource>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d001      	beq.n	801171a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8011716:	f7ff fd0f 	bl	8011138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801171a:	4819      	ldr	r0, [pc, #100]	@ (8011780 <MX_TIM2_Init+0xec>)
 801171c:	f7f8 ff48 	bl	800a5b0 <HAL_TIM_PWM_Init>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d001      	beq.n	801172a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8011726:	f7ff fd07 	bl	8011138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801172a:	2300      	movs	r3, #0
 801172c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801172e:	2300      	movs	r3, #0
 8011730:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8011732:	f107 031c 	add.w	r3, r7, #28
 8011736:	4619      	mov	r1, r3
 8011738:	4811      	ldr	r0, [pc, #68]	@ (8011780 <MX_TIM2_Init+0xec>)
 801173a:	f7fa f8e7 	bl	800b90c <HAL_TIMEx_MasterConfigSynchronization>
 801173e:	4603      	mov	r3, r0
 8011740:	2b00      	cmp	r3, #0
 8011742:	d001      	beq.n	8011748 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8011744:	f7ff fcf8 	bl	8011138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011748:	2360      	movs	r3, #96	@ 0x60
 801174a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 801174c:	f242 3327 	movw	r3, #8999	@ 0x2327
 8011750:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011752:	2300      	movs	r3, #0
 8011754:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011756:	2300      	movs	r3, #0
 8011758:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801175a:	463b      	mov	r3, r7
 801175c:	2200      	movs	r2, #0
 801175e:	4619      	mov	r1, r3
 8011760:	4807      	ldr	r0, [pc, #28]	@ (8011780 <MX_TIM2_Init+0xec>)
 8011762:	f7f9 f99d 	bl	800aaa0 <HAL_TIM_PWM_ConfigChannel>
 8011766:	4603      	mov	r3, r0
 8011768:	2b00      	cmp	r3, #0
 801176a:	d001      	beq.n	8011770 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 801176c:	f7ff fce4 	bl	8011138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8011770:	4803      	ldr	r0, [pc, #12]	@ (8011780 <MX_TIM2_Init+0xec>)
 8011772:	f000 f961 	bl	8011a38 <HAL_TIM_MspPostInit>

}
 8011776:	bf00      	nop
 8011778:	3738      	adds	r7, #56	@ 0x38
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	24000b28 	.word	0x24000b28

08011784 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b088      	sub	sp, #32
 8011788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801178a:	f107 0310 	add.w	r3, r7, #16
 801178e:	2200      	movs	r2, #0
 8011790:	601a      	str	r2, [r3, #0]
 8011792:	605a      	str	r2, [r3, #4]
 8011794:	609a      	str	r2, [r3, #8]
 8011796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011798:	1d3b      	adds	r3, r7, #4
 801179a:	2200      	movs	r2, #0
 801179c:	601a      	str	r2, [r3, #0]
 801179e:	605a      	str	r2, [r3, #4]
 80117a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80117a2:	4b1d      	ldr	r3, [pc, #116]	@ (8011818 <MX_TIM3_Init+0x94>)
 80117a4:	4a1d      	ldr	r2, [pc, #116]	@ (801181c <MX_TIM3_Init+0x98>)
 80117a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80117a8:	4b1b      	ldr	r3, [pc, #108]	@ (8011818 <MX_TIM3_Init+0x94>)
 80117aa:	2263      	movs	r2, #99	@ 0x63
 80117ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80117ae:	4b1a      	ldr	r3, [pc, #104]	@ (8011818 <MX_TIM3_Init+0x94>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24000-1;
 80117b4:	4b18      	ldr	r3, [pc, #96]	@ (8011818 <MX_TIM3_Init+0x94>)
 80117b6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80117ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80117bc:	4b16      	ldr	r3, [pc, #88]	@ (8011818 <MX_TIM3_Init+0x94>)
 80117be:	2200      	movs	r2, #0
 80117c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80117c2:	4b15      	ldr	r3, [pc, #84]	@ (8011818 <MX_TIM3_Init+0x94>)
 80117c4:	2200      	movs	r2, #0
 80117c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80117c8:	4813      	ldr	r0, [pc, #76]	@ (8011818 <MX_TIM3_Init+0x94>)
 80117ca:	f7f8 fe22 	bl	800a412 <HAL_TIM_Base_Init>
 80117ce:	4603      	mov	r3, r0
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d001      	beq.n	80117d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80117d4:	f7ff fcb0 	bl	8011138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80117d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80117dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80117de:	f107 0310 	add.w	r3, r7, #16
 80117e2:	4619      	mov	r1, r3
 80117e4:	480c      	ldr	r0, [pc, #48]	@ (8011818 <MX_TIM3_Init+0x94>)
 80117e6:	f7f9 fa6f 	bl	800acc8 <HAL_TIM_ConfigClockSource>
 80117ea:	4603      	mov	r3, r0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d001      	beq.n	80117f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80117f0:	f7ff fca2 	bl	8011138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80117f4:	2300      	movs	r3, #0
 80117f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80117f8:	2300      	movs	r3, #0
 80117fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80117fc:	1d3b      	adds	r3, r7, #4
 80117fe:	4619      	mov	r1, r3
 8011800:	4805      	ldr	r0, [pc, #20]	@ (8011818 <MX_TIM3_Init+0x94>)
 8011802:	f7fa f883 	bl	800b90c <HAL_TIMEx_MasterConfigSynchronization>
 8011806:	4603      	mov	r3, r0
 8011808:	2b00      	cmp	r3, #0
 801180a:	d001      	beq.n	8011810 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 801180c:	f7ff fc94 	bl	8011138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8011810:	bf00      	nop
 8011812:	3720      	adds	r7, #32
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	24000b74 	.word	0x24000b74
 801181c:	40000400 	.word	0x40000400

08011820 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b09a      	sub	sp, #104	@ 0x68
 8011824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011826:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801182a:	2200      	movs	r2, #0
 801182c:	601a      	str	r2, [r3, #0]
 801182e:	605a      	str	r2, [r3, #4]
 8011830:	609a      	str	r2, [r3, #8]
 8011832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011834:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8011838:	2200      	movs	r2, #0
 801183a:	601a      	str	r2, [r3, #0]
 801183c:	605a      	str	r2, [r3, #4]
 801183e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011840:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011844:	2200      	movs	r2, #0
 8011846:	601a      	str	r2, [r3, #0]
 8011848:	605a      	str	r2, [r3, #4]
 801184a:	609a      	str	r2, [r3, #8]
 801184c:	60da      	str	r2, [r3, #12]
 801184e:	611a      	str	r2, [r3, #16]
 8011850:	615a      	str	r2, [r3, #20]
 8011852:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8011854:	1d3b      	adds	r3, r7, #4
 8011856:	222c      	movs	r2, #44	@ 0x2c
 8011858:	2100      	movs	r1, #0
 801185a:	4618      	mov	r0, r3
 801185c:	f001 fd61 	bl	8013322 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8011860:	4b49      	ldr	r3, [pc, #292]	@ (8011988 <MX_TIM8_Init+0x168>)
 8011862:	4a4a      	ldr	r2, [pc, #296]	@ (801198c <MX_TIM8_Init+0x16c>)
 8011864:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8011866:	4b48      	ldr	r3, [pc, #288]	@ (8011988 <MX_TIM8_Init+0x168>)
 8011868:	2200      	movs	r2, #0
 801186a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801186c:	4b46      	ldr	r3, [pc, #280]	@ (8011988 <MX_TIM8_Init+0x168>)
 801186e:	2200      	movs	r2, #0
 8011870:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 8011872:	4b45      	ldr	r3, [pc, #276]	@ (8011988 <MX_TIM8_Init+0x168>)
 8011874:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8011878:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801187a:	4b43      	ldr	r3, [pc, #268]	@ (8011988 <MX_TIM8_Init+0x168>)
 801187c:	2200      	movs	r2, #0
 801187e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8011880:	4b41      	ldr	r3, [pc, #260]	@ (8011988 <MX_TIM8_Init+0x168>)
 8011882:	2200      	movs	r2, #0
 8011884:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011886:	4b40      	ldr	r3, [pc, #256]	@ (8011988 <MX_TIM8_Init+0x168>)
 8011888:	2200      	movs	r2, #0
 801188a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801188c:	483e      	ldr	r0, [pc, #248]	@ (8011988 <MX_TIM8_Init+0x168>)
 801188e:	f7f8 fdc0 	bl	800a412 <HAL_TIM_Base_Init>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d001      	beq.n	801189c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8011898:	f7ff fc4e 	bl	8011138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801189c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80118a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80118a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80118a6:	4619      	mov	r1, r3
 80118a8:	4837      	ldr	r0, [pc, #220]	@ (8011988 <MX_TIM8_Init+0x168>)
 80118aa:	f7f9 fa0d 	bl	800acc8 <HAL_TIM_ConfigClockSource>
 80118ae:	4603      	mov	r3, r0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d001      	beq.n	80118b8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80118b4:	f7ff fc40 	bl	8011138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80118b8:	4833      	ldr	r0, [pc, #204]	@ (8011988 <MX_TIM8_Init+0x168>)
 80118ba:	f7f8 fe79 	bl	800a5b0 <HAL_TIM_PWM_Init>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d001      	beq.n	80118c8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80118c4:	f7ff fc38 	bl	8011138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80118c8:	2300      	movs	r3, #0
 80118ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80118cc:	2300      	movs	r3, #0
 80118ce:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80118d0:	2300      	movs	r3, #0
 80118d2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80118d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80118d8:	4619      	mov	r1, r3
 80118da:	482b      	ldr	r0, [pc, #172]	@ (8011988 <MX_TIM8_Init+0x168>)
 80118dc:	f7fa f816 	bl	800b90c <HAL_TIMEx_MasterConfigSynchronization>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d001      	beq.n	80118ea <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80118e6:	f7ff fc27 	bl	8011138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80118ea:	2360      	movs	r3, #96	@ 0x60
 80118ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80118ee:	2300      	movs	r3, #0
 80118f0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80118f2:	2300      	movs	r3, #0
 80118f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80118f6:	2300      	movs	r3, #0
 80118f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80118fa:	2300      	movs	r3, #0
 80118fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80118fe:	2300      	movs	r3, #0
 8011900:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8011902:	2300      	movs	r3, #0
 8011904:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011906:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801190a:	2200      	movs	r2, #0
 801190c:	4619      	mov	r1, r3
 801190e:	481e      	ldr	r0, [pc, #120]	@ (8011988 <MX_TIM8_Init+0x168>)
 8011910:	f7f9 f8c6 	bl	800aaa0 <HAL_TIM_PWM_ConfigChannel>
 8011914:	4603      	mov	r3, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d001      	beq.n	801191e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 801191a:	f7ff fc0d 	bl	8011138 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801191e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011922:	2204      	movs	r2, #4
 8011924:	4619      	mov	r1, r3
 8011926:	4818      	ldr	r0, [pc, #96]	@ (8011988 <MX_TIM8_Init+0x168>)
 8011928:	f7f9 f8ba 	bl	800aaa0 <HAL_TIM_PWM_ConfigChannel>
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	d001      	beq.n	8011936 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8011932:	f7ff fc01 	bl	8011138 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8011936:	2300      	movs	r3, #0
 8011938:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801193a:	2300      	movs	r3, #0
 801193c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801193e:	2300      	movs	r3, #0
 8011940:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8011942:	2300      	movs	r3, #0
 8011944:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8011946:	2300      	movs	r3, #0
 8011948:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801194a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801194e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8011950:	2300      	movs	r3, #0
 8011952:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8011954:	2300      	movs	r3, #0
 8011956:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8011958:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801195c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 801195e:	2300      	movs	r3, #0
 8011960:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8011962:	2300      	movs	r3, #0
 8011964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8011966:	1d3b      	adds	r3, r7, #4
 8011968:	4619      	mov	r1, r3
 801196a:	4807      	ldr	r0, [pc, #28]	@ (8011988 <MX_TIM8_Init+0x168>)
 801196c:	f7fa f85c 	bl	800ba28 <HAL_TIMEx_ConfigBreakDeadTime>
 8011970:	4603      	mov	r3, r0
 8011972:	2b00      	cmp	r3, #0
 8011974:	d001      	beq.n	801197a <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8011976:	f7ff fbdf 	bl	8011138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 801197a:	4803      	ldr	r0, [pc, #12]	@ (8011988 <MX_TIM8_Init+0x168>)
 801197c:	f000 f85c 	bl	8011a38 <HAL_TIM_MspPostInit>

}
 8011980:	bf00      	nop
 8011982:	3768      	adds	r7, #104	@ 0x68
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	24000bc0 	.word	0x24000bc0
 801198c:	40010400 	.word	0x40010400

08011990 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b086      	sub	sp, #24
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80119a0:	d10f      	bne.n	80119c2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80119a2:	4b22      	ldr	r3, [pc, #136]	@ (8011a2c <HAL_TIM_Base_MspInit+0x9c>)
 80119a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80119a8:	4a20      	ldr	r2, [pc, #128]	@ (8011a2c <HAL_TIM_Base_MspInit+0x9c>)
 80119aa:	f043 0301 	orr.w	r3, r3, #1
 80119ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80119b2:	4b1e      	ldr	r3, [pc, #120]	@ (8011a2c <HAL_TIM_Base_MspInit+0x9c>)
 80119b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80119b8:	f003 0301 	and.w	r3, r3, #1
 80119bc:	617b      	str	r3, [r7, #20]
 80119be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80119c0:	e030      	b.n	8011a24 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM3)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	4a1a      	ldr	r2, [pc, #104]	@ (8011a30 <HAL_TIM_Base_MspInit+0xa0>)
 80119c8:	4293      	cmp	r3, r2
 80119ca:	d117      	bne.n	80119fc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80119cc:	4b17      	ldr	r3, [pc, #92]	@ (8011a2c <HAL_TIM_Base_MspInit+0x9c>)
 80119ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80119d2:	4a16      	ldr	r2, [pc, #88]	@ (8011a2c <HAL_TIM_Base_MspInit+0x9c>)
 80119d4:	f043 0302 	orr.w	r3, r3, #2
 80119d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80119dc:	4b13      	ldr	r3, [pc, #76]	@ (8011a2c <HAL_TIM_Base_MspInit+0x9c>)
 80119de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80119e2:	f003 0302 	and.w	r3, r3, #2
 80119e6:	613b      	str	r3, [r7, #16]
 80119e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80119ea:	2200      	movs	r2, #0
 80119ec:	2100      	movs	r1, #0
 80119ee:	201d      	movs	r0, #29
 80119f0:	f7ef fed6 	bl	80017a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80119f4:	201d      	movs	r0, #29
 80119f6:	f7ef feed 	bl	80017d4 <HAL_NVIC_EnableIRQ>
}
 80119fa:	e013      	b.n	8011a24 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM8)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	4a0c      	ldr	r2, [pc, #48]	@ (8011a34 <HAL_TIM_Base_MspInit+0xa4>)
 8011a02:	4293      	cmp	r3, r2
 8011a04:	d10e      	bne.n	8011a24 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8011a06:	4b09      	ldr	r3, [pc, #36]	@ (8011a2c <HAL_TIM_Base_MspInit+0x9c>)
 8011a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011a0c:	4a07      	ldr	r2, [pc, #28]	@ (8011a2c <HAL_TIM_Base_MspInit+0x9c>)
 8011a0e:	f043 0302 	orr.w	r3, r3, #2
 8011a12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8011a16:	4b05      	ldr	r3, [pc, #20]	@ (8011a2c <HAL_TIM_Base_MspInit+0x9c>)
 8011a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011a1c:	f003 0302 	and.w	r3, r3, #2
 8011a20:	60fb      	str	r3, [r7, #12]
 8011a22:	68fb      	ldr	r3, [r7, #12]
}
 8011a24:	bf00      	nop
 8011a26:	3718      	adds	r7, #24
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	58024400 	.word	0x58024400
 8011a30:	40000400 	.word	0x40000400
 8011a34:	40010400 	.word	0x40010400

08011a38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b08c      	sub	sp, #48	@ 0x30
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a40:	f107 031c 	add.w	r3, r7, #28
 8011a44:	2200      	movs	r2, #0
 8011a46:	601a      	str	r2, [r3, #0]
 8011a48:	605a      	str	r2, [r3, #4]
 8011a4a:	609a      	str	r2, [r3, #8]
 8011a4c:	60da      	str	r2, [r3, #12]
 8011a4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a58:	d11f      	bne.n	8011a9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a5a:	4b43      	ldr	r3, [pc, #268]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011a60:	4a41      	ldr	r2, [pc, #260]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011a62:	f043 0301 	orr.w	r3, r3, #1
 8011a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011a70:	f003 0301 	and.w	r3, r3, #1
 8011a74:	61bb      	str	r3, [r7, #24]
 8011a76:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8011a78:	2301      	movs	r3, #1
 8011a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a7c:	2302      	movs	r3, #2
 8011a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a80:	2300      	movs	r3, #0
 8011a82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a84:	2303      	movs	r3, #3
 8011a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011a88:	2301      	movs	r3, #1
 8011a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011a8c:	f107 031c 	add.w	r3, r7, #28
 8011a90:	4619      	mov	r1, r3
 8011a92:	4836      	ldr	r0, [pc, #216]	@ (8011b6c <HAL_TIM_MspPostInit+0x134>)
 8011a94:	f7f1 fe36 	bl	8003704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8011a98:	e062      	b.n	8011b60 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM8)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	4a34      	ldr	r2, [pc, #208]	@ (8011b70 <HAL_TIM_MspPostInit+0x138>)
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	d15d      	bne.n	8011b60 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011aa4:	4b30      	ldr	r3, [pc, #192]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011aac:	f043 0302 	orr.w	r3, r3, #2
 8011ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011aba:	f003 0302 	and.w	r3, r3, #2
 8011abe:	617b      	str	r3, [r7, #20]
 8011ac0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011ac2:	4b29      	ldr	r3, [pc, #164]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011ac8:	4a27      	ldr	r2, [pc, #156]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011aca:	f043 0304 	orr.w	r3, r3, #4
 8011ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011ad2:	4b25      	ldr	r3, [pc, #148]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011ad8:	f003 0304 	and.w	r3, r3, #4
 8011adc:	613b      	str	r3, [r7, #16]
 8011ade:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8011ae0:	4b21      	ldr	r3, [pc, #132]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011ae6:	4a20      	ldr	r2, [pc, #128]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011af0:	4b1d      	ldr	r3, [pc, #116]	@ (8011b68 <HAL_TIM_MspPostInit+0x130>)
 8011af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011afa:	60fb      	str	r3, [r7, #12]
 8011afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8011afe:	2301      	movs	r3, #1
 8011b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b02:	2302      	movs	r3, #2
 8011b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b06:	2300      	movs	r3, #0
 8011b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011b0e:	2303      	movs	r3, #3
 8011b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011b12:	f107 031c 	add.w	r3, r7, #28
 8011b16:	4619      	mov	r1, r3
 8011b18:	4816      	ldr	r0, [pc, #88]	@ (8011b74 <HAL_TIM_MspPostInit+0x13c>)
 8011b1a:	f7f1 fdf3 	bl	8003704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011b1e:	23c0      	movs	r3, #192	@ 0xc0
 8011b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b22:	2302      	movs	r3, #2
 8011b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b26:	2300      	movs	r3, #0
 8011b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b2a:	2303      	movs	r3, #3
 8011b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011b2e:	2303      	movs	r3, #3
 8011b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011b32:	f107 031c 	add.w	r3, r7, #28
 8011b36:	4619      	mov	r1, r3
 8011b38:	480f      	ldr	r0, [pc, #60]	@ (8011b78 <HAL_TIM_MspPostInit+0x140>)
 8011b3a:	f7f1 fde3 	bl	8003704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8011b3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b44:	2302      	movs	r3, #2
 8011b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011b50:	2303      	movs	r3, #3
 8011b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8011b54:	f107 031c 	add.w	r3, r7, #28
 8011b58:	4619      	mov	r1, r3
 8011b5a:	4808      	ldr	r0, [pc, #32]	@ (8011b7c <HAL_TIM_MspPostInit+0x144>)
 8011b5c:	f7f1 fdd2 	bl	8003704 <HAL_GPIO_Init>
}
 8011b60:	bf00      	nop
 8011b62:	3730      	adds	r7, #48	@ 0x30
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	58024400 	.word	0x58024400
 8011b6c:	58020000 	.word	0x58020000
 8011b70:	40010400 	.word	0x40010400
 8011b74:	58020400 	.word	0x58020400
 8011b78:	58020800 	.word	0x58020800
 8011b7c:	58021c00 	.word	0x58021c00

08011b80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011b84:	2200      	movs	r2, #0
 8011b86:	4913      	ldr	r1, [pc, #76]	@ (8011bd4 <MX_USB_DEVICE_Init+0x54>)
 8011b88:	4813      	ldr	r0, [pc, #76]	@ (8011bd8 <MX_USB_DEVICE_Init+0x58>)
 8011b8a:	f7fc f833 	bl	800dbf4 <USBD_Init>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d001      	beq.n	8011b98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011b94:	f7ff fad0 	bl	8011138 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011b98:	4910      	ldr	r1, [pc, #64]	@ (8011bdc <MX_USB_DEVICE_Init+0x5c>)
 8011b9a:	480f      	ldr	r0, [pc, #60]	@ (8011bd8 <MX_USB_DEVICE_Init+0x58>)
 8011b9c:	f7fc f85a 	bl	800dc54 <USBD_RegisterClass>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d001      	beq.n	8011baa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011ba6:	f7ff fac7 	bl	8011138 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011baa:	490d      	ldr	r1, [pc, #52]	@ (8011be0 <MX_USB_DEVICE_Init+0x60>)
 8011bac:	480a      	ldr	r0, [pc, #40]	@ (8011bd8 <MX_USB_DEVICE_Init+0x58>)
 8011bae:	f7fb ff51 	bl	800da54 <USBD_CDC_RegisterInterface>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d001      	beq.n	8011bbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011bb8:	f7ff fabe 	bl	8011138 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011bbc:	4806      	ldr	r0, [pc, #24]	@ (8011bd8 <MX_USB_DEVICE_Init+0x58>)
 8011bbe:	f7fc f87f 	bl	800dcc0 <USBD_Start>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d001      	beq.n	8011bcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011bc8:	f7ff fab6 	bl	8011138 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011bcc:	f7f4 f894 	bl	8005cf8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011bd0:	bf00      	nop
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	240000b4 	.word	0x240000b4
 8011bd8:	24000c0c 	.word	0x24000c0c
 8011bdc:	24000014 	.word	0x24000014
 8011be0:	240000a0 	.word	0x240000a0

08011be4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011be8:	2200      	movs	r2, #0
 8011bea:	4905      	ldr	r1, [pc, #20]	@ (8011c00 <CDC_Init_FS+0x1c>)
 8011bec:	4805      	ldr	r0, [pc, #20]	@ (8011c04 <CDC_Init_FS+0x20>)
 8011bee:	f7fb ff4b 	bl	800da88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011bf2:	4905      	ldr	r1, [pc, #20]	@ (8011c08 <CDC_Init_FS+0x24>)
 8011bf4:	4803      	ldr	r0, [pc, #12]	@ (8011c04 <CDC_Init_FS+0x20>)
 8011bf6:	f7fb ff69 	bl	800dacc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011bfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	240016e8 	.word	0x240016e8
 8011c04:	24000c0c 	.word	0x24000c0c
 8011c08:	24000ee8 	.word	0x24000ee8

08011c0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011c10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr

08011c1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b083      	sub	sp, #12
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	4603      	mov	r3, r0
 8011c24:	6039      	str	r1, [r7, #0]
 8011c26:	71fb      	strb	r3, [r7, #7]
 8011c28:	4613      	mov	r3, r2
 8011c2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011c2c:	79fb      	ldrb	r3, [r7, #7]
 8011c2e:	2b23      	cmp	r3, #35	@ 0x23
 8011c30:	d84a      	bhi.n	8011cc8 <CDC_Control_FS+0xac>
 8011c32:	a201      	add	r2, pc, #4	@ (adr r2, 8011c38 <CDC_Control_FS+0x1c>)
 8011c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c38:	08011cc9 	.word	0x08011cc9
 8011c3c:	08011cc9 	.word	0x08011cc9
 8011c40:	08011cc9 	.word	0x08011cc9
 8011c44:	08011cc9 	.word	0x08011cc9
 8011c48:	08011cc9 	.word	0x08011cc9
 8011c4c:	08011cc9 	.word	0x08011cc9
 8011c50:	08011cc9 	.word	0x08011cc9
 8011c54:	08011cc9 	.word	0x08011cc9
 8011c58:	08011cc9 	.word	0x08011cc9
 8011c5c:	08011cc9 	.word	0x08011cc9
 8011c60:	08011cc9 	.word	0x08011cc9
 8011c64:	08011cc9 	.word	0x08011cc9
 8011c68:	08011cc9 	.word	0x08011cc9
 8011c6c:	08011cc9 	.word	0x08011cc9
 8011c70:	08011cc9 	.word	0x08011cc9
 8011c74:	08011cc9 	.word	0x08011cc9
 8011c78:	08011cc9 	.word	0x08011cc9
 8011c7c:	08011cc9 	.word	0x08011cc9
 8011c80:	08011cc9 	.word	0x08011cc9
 8011c84:	08011cc9 	.word	0x08011cc9
 8011c88:	08011cc9 	.word	0x08011cc9
 8011c8c:	08011cc9 	.word	0x08011cc9
 8011c90:	08011cc9 	.word	0x08011cc9
 8011c94:	08011cc9 	.word	0x08011cc9
 8011c98:	08011cc9 	.word	0x08011cc9
 8011c9c:	08011cc9 	.word	0x08011cc9
 8011ca0:	08011cc9 	.word	0x08011cc9
 8011ca4:	08011cc9 	.word	0x08011cc9
 8011ca8:	08011cc9 	.word	0x08011cc9
 8011cac:	08011cc9 	.word	0x08011cc9
 8011cb0:	08011cc9 	.word	0x08011cc9
 8011cb4:	08011cc9 	.word	0x08011cc9
 8011cb8:	08011cc9 	.word	0x08011cc9
 8011cbc:	08011cc9 	.word	0x08011cc9
 8011cc0:	08011cc9 	.word	0x08011cc9
 8011cc4:	08011cc9 	.word	0x08011cc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011cc8:	bf00      	nop
  }

  return (USBD_OK);
 8011cca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	370c      	adds	r7, #12
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr

08011cd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011ce2:	6879      	ldr	r1, [r7, #4]
 8011ce4:	4805      	ldr	r0, [pc, #20]	@ (8011cfc <CDC_Receive_FS+0x24>)
 8011ce6:	f7fb fef1 	bl	800dacc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011cea:	4804      	ldr	r0, [pc, #16]	@ (8011cfc <CDC_Receive_FS+0x24>)
 8011cec:	f7fb ff4c 	bl	800db88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011cf0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3708      	adds	r7, #8
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	24000c0c 	.word	0x24000c0c

08011d00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	460b      	mov	r3, r1
 8011d0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011d10:	4b0d      	ldr	r3, [pc, #52]	@ (8011d48 <CDC_Transmit_FS+0x48>)
 8011d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011d16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d001      	beq.n	8011d26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011d22:	2301      	movs	r3, #1
 8011d24:	e00b      	b.n	8011d3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011d26:	887b      	ldrh	r3, [r7, #2]
 8011d28:	461a      	mov	r2, r3
 8011d2a:	6879      	ldr	r1, [r7, #4]
 8011d2c:	4806      	ldr	r0, [pc, #24]	@ (8011d48 <CDC_Transmit_FS+0x48>)
 8011d2e:	f7fb feab 	bl	800da88 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011d32:	4805      	ldr	r0, [pc, #20]	@ (8011d48 <CDC_Transmit_FS+0x48>)
 8011d34:	f7fb fee8 	bl	800db08 <USBD_CDC_TransmitPacket>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3710      	adds	r7, #16
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
 8011d46:	bf00      	nop
 8011d48:	24000c0c 	.word	0x24000c0c

08011d4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b087      	sub	sp, #28
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	4613      	mov	r3, r2
 8011d58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	371c      	adds	r7, #28
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
	...

08011d70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b0ba      	sub	sp, #232	@ 0xe8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	601a      	str	r2, [r3, #0]
 8011d80:	605a      	str	r2, [r3, #4]
 8011d82:	609a      	str	r2, [r3, #8]
 8011d84:	60da      	str	r2, [r3, #12]
 8011d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011d88:	f107 0310 	add.w	r3, r7, #16
 8011d8c:	22c0      	movs	r2, #192	@ 0xc0
 8011d8e:	2100      	movs	r1, #0
 8011d90:	4618      	mov	r0, r3
 8011d92:	f001 fac6 	bl	8013322 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8011e4c <HAL_PCD_MspInit+0xdc>)
 8011d9c:	4293      	cmp	r3, r2
 8011d9e:	d151      	bne.n	8011e44 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011da0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011da4:	f04f 0300 	mov.w	r3, #0
 8011da8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011dac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011db4:	f107 0310 	add.w	r3, r7, #16
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7f4 ffbf 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d001      	beq.n	8011dc8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011dc4:	f7ff f9b8 	bl	8011138 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011dc8:	f7f3 ff96 	bl	8005cf8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011dcc:	4b20      	ldr	r3, [pc, #128]	@ (8011e50 <HAL_PCD_MspInit+0xe0>)
 8011dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8011e50 <HAL_PCD_MspInit+0xe0>)
 8011dd4:	f043 0301 	orr.w	r3, r3, #1
 8011dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8011e50 <HAL_PCD_MspInit+0xe0>)
 8011dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011de2:	f003 0301 	and.w	r3, r3, #1
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011dea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011df2:	2302      	movs	r3, #2
 8011df4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011e04:	230a      	movs	r3, #10
 8011e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e0a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011e0e:	4619      	mov	r1, r3
 8011e10:	4810      	ldr	r0, [pc, #64]	@ (8011e54 <HAL_PCD_MspInit+0xe4>)
 8011e12:	f7f1 fc77 	bl	8003704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011e16:	4b0e      	ldr	r3, [pc, #56]	@ (8011e50 <HAL_PCD_MspInit+0xe0>)
 8011e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8011e50 <HAL_PCD_MspInit+0xe0>)
 8011e1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011e22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011e26:	4b0a      	ldr	r3, [pc, #40]	@ (8011e50 <HAL_PCD_MspInit+0xe0>)
 8011e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011e30:	60bb      	str	r3, [r7, #8]
 8011e32:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011e34:	2200      	movs	r2, #0
 8011e36:	2100      	movs	r1, #0
 8011e38:	2065      	movs	r0, #101	@ 0x65
 8011e3a:	f7ef fcb1 	bl	80017a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011e3e:	2065      	movs	r0, #101	@ 0x65
 8011e40:	f7ef fcc8 	bl	80017d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011e44:	bf00      	nop
 8011e46:	37e8      	adds	r7, #232	@ 0xe8
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	40080000 	.word	0x40080000
 8011e50:	58024400 	.word	0x58024400
 8011e54:	58020000 	.word	0x58020000

08011e58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	4610      	mov	r0, r2
 8011e70:	f7fb ff73 	bl	800dd5a <USBD_LL_SetupStage>
}
 8011e74:	bf00      	nop
 8011e76:	3708      	adds	r7, #8
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	460b      	mov	r3, r1
 8011e86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011e8e:	78fa      	ldrb	r2, [r7, #3]
 8011e90:	6879      	ldr	r1, [r7, #4]
 8011e92:	4613      	mov	r3, r2
 8011e94:	00db      	lsls	r3, r3, #3
 8011e96:	4413      	add	r3, r2
 8011e98:	009b      	lsls	r3, r3, #2
 8011e9a:	440b      	add	r3, r1
 8011e9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011ea0:	681a      	ldr	r2, [r3, #0]
 8011ea2:	78fb      	ldrb	r3, [r7, #3]
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	f7fb ffad 	bl	800de04 <USBD_LL_DataOutStage>
}
 8011eaa:	bf00      	nop
 8011eac:	3708      	adds	r7, #8
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}

08011eb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	b082      	sub	sp, #8
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
 8011eba:	460b      	mov	r3, r1
 8011ebc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011ec4:	78fa      	ldrb	r2, [r7, #3]
 8011ec6:	6879      	ldr	r1, [r7, #4]
 8011ec8:	4613      	mov	r3, r2
 8011eca:	00db      	lsls	r3, r3, #3
 8011ecc:	4413      	add	r3, r2
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	440b      	add	r3, r1
 8011ed2:	3320      	adds	r3, #32
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	78fb      	ldrb	r3, [r7, #3]
 8011ed8:	4619      	mov	r1, r3
 8011eda:	f7fc f846 	bl	800df6a <USBD_LL_DataInStage>
}
 8011ede:	bf00      	nop
 8011ee0:	3708      	adds	r7, #8
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}

08011ee6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ee6:	b580      	push	{r7, lr}
 8011ee8:	b082      	sub	sp, #8
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fc f980 	bl	800e1fa <USBD_LL_SOF>
}
 8011efa:	bf00      	nop
 8011efc:	3708      	adds	r7, #8
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b084      	sub	sp, #16
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	79db      	ldrb	r3, [r3, #7]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d102      	bne.n	8011f1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011f16:	2300      	movs	r3, #0
 8011f18:	73fb      	strb	r3, [r7, #15]
 8011f1a:	e008      	b.n	8011f2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	79db      	ldrb	r3, [r3, #7]
 8011f20:	2b02      	cmp	r3, #2
 8011f22:	d102      	bne.n	8011f2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011f24:	2301      	movs	r3, #1
 8011f26:	73fb      	strb	r3, [r7, #15]
 8011f28:	e001      	b.n	8011f2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011f2a:	f7ff f905 	bl	8011138 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f34:	7bfa      	ldrb	r2, [r7, #15]
 8011f36:	4611      	mov	r1, r2
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fc f91a 	bl	800e172 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7fc f8c2 	bl	800e0ce <USBD_LL_Reset>
}
 8011f4a:	bf00      	nop
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
	...

08011f54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7fc f915 	bl	800e192 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	6812      	ldr	r2, [r2, #0]
 8011f76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011f7a:	f043 0301 	orr.w	r3, r3, #1
 8011f7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	7adb      	ldrb	r3, [r3, #11]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d005      	beq.n	8011f94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f88:	4b04      	ldr	r3, [pc, #16]	@ (8011f9c <HAL_PCD_SuspendCallback+0x48>)
 8011f8a:	691b      	ldr	r3, [r3, #16]
 8011f8c:	4a03      	ldr	r2, [pc, #12]	@ (8011f9c <HAL_PCD_SuspendCallback+0x48>)
 8011f8e:	f043 0306 	orr.w	r3, r3, #6
 8011f92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011f94:	bf00      	nop
 8011f96:	3708      	adds	r7, #8
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	e000ed00 	.word	0xe000ed00

08011fa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7fc f90b 	bl	800e1ca <USBD_LL_Resume>
}
 8011fb4:	bf00      	nop
 8011fb6:	3708      	adds	r7, #8
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011fce:	78fa      	ldrb	r2, [r7, #3]
 8011fd0:	4611      	mov	r1, r2
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fc f963 	bl	800e29e <USBD_LL_IsoOUTIncomplete>
}
 8011fd8:	bf00      	nop
 8011fda:	3708      	adds	r7, #8
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}

08011fe0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	460b      	mov	r3, r1
 8011fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011ff2:	78fa      	ldrb	r2, [r7, #3]
 8011ff4:	4611      	mov	r1, r2
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7fc f91f 	bl	800e23a <USBD_LL_IsoINIncomplete>
}
 8011ffc:	bf00      	nop
 8011ffe:	3708      	adds	r7, #8
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012012:	4618      	mov	r0, r3
 8012014:	f7fc f975 	bl	800e302 <USBD_LL_DevConnected>
}
 8012018:	bf00      	nop
 801201a:	3708      	adds	r7, #8
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801202e:	4618      	mov	r0, r3
 8012030:	f7fc f972 	bl	800e318 <USBD_LL_DevDisconnected>
}
 8012034:	bf00      	nop
 8012036:	3708      	adds	r7, #8
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d13e      	bne.n	80120ca <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801204c:	4a21      	ldr	r2, [pc, #132]	@ (80120d4 <USBD_LL_Init+0x98>)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	4a1f      	ldr	r2, [pc, #124]	@ (80120d4 <USBD_LL_Init+0x98>)
 8012058:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801205c:	4b1d      	ldr	r3, [pc, #116]	@ (80120d4 <USBD_LL_Init+0x98>)
 801205e:	4a1e      	ldr	r2, [pc, #120]	@ (80120d8 <USBD_LL_Init+0x9c>)
 8012060:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012062:	4b1c      	ldr	r3, [pc, #112]	@ (80120d4 <USBD_LL_Init+0x98>)
 8012064:	2209      	movs	r2, #9
 8012066:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012068:	4b1a      	ldr	r3, [pc, #104]	@ (80120d4 <USBD_LL_Init+0x98>)
 801206a:	2202      	movs	r2, #2
 801206c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801206e:	4b19      	ldr	r3, [pc, #100]	@ (80120d4 <USBD_LL_Init+0x98>)
 8012070:	2200      	movs	r2, #0
 8012072:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012074:	4b17      	ldr	r3, [pc, #92]	@ (80120d4 <USBD_LL_Init+0x98>)
 8012076:	2202      	movs	r2, #2
 8012078:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801207a:	4b16      	ldr	r3, [pc, #88]	@ (80120d4 <USBD_LL_Init+0x98>)
 801207c:	2200      	movs	r2, #0
 801207e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012080:	4b14      	ldr	r3, [pc, #80]	@ (80120d4 <USBD_LL_Init+0x98>)
 8012082:	2200      	movs	r2, #0
 8012084:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012086:	4b13      	ldr	r3, [pc, #76]	@ (80120d4 <USBD_LL_Init+0x98>)
 8012088:	2200      	movs	r2, #0
 801208a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801208c:	4b11      	ldr	r3, [pc, #68]	@ (80120d4 <USBD_LL_Init+0x98>)
 801208e:	2200      	movs	r2, #0
 8012090:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012092:	4b10      	ldr	r3, [pc, #64]	@ (80120d4 <USBD_LL_Init+0x98>)
 8012094:	2200      	movs	r2, #0
 8012096:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012098:	4b0e      	ldr	r3, [pc, #56]	@ (80120d4 <USBD_LL_Init+0x98>)
 801209a:	2200      	movs	r2, #0
 801209c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801209e:	480d      	ldr	r0, [pc, #52]	@ (80120d4 <USBD_LL_Init+0x98>)
 80120a0:	f7f2 fb51 	bl	8004746 <HAL_PCD_Init>
 80120a4:	4603      	mov	r3, r0
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d001      	beq.n	80120ae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80120aa:	f7ff f845 	bl	8011138 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80120ae:	2180      	movs	r1, #128	@ 0x80
 80120b0:	4808      	ldr	r0, [pc, #32]	@ (80120d4 <USBD_LL_Init+0x98>)
 80120b2:	f7f3 fda6 	bl	8005c02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80120b6:	2240      	movs	r2, #64	@ 0x40
 80120b8:	2100      	movs	r1, #0
 80120ba:	4806      	ldr	r0, [pc, #24]	@ (80120d4 <USBD_LL_Init+0x98>)
 80120bc:	f7f3 fd5a 	bl	8005b74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80120c0:	2280      	movs	r2, #128	@ 0x80
 80120c2:	2101      	movs	r1, #1
 80120c4:	4803      	ldr	r0, [pc, #12]	@ (80120d4 <USBD_LL_Init+0x98>)
 80120c6:	f7f3 fd55 	bl	8005b74 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80120ca:	2300      	movs	r3, #0
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	24001ee8 	.word	0x24001ee8
 80120d8:	40080000 	.word	0x40080000

080120dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120e4:	2300      	movs	r3, #0
 80120e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120e8:	2300      	movs	r3, #0
 80120ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7f2 fc33 	bl	800495e <HAL_PCD_Start>
 80120f8:	4603      	mov	r3, r0
 80120fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120fc:	7bfb      	ldrb	r3, [r7, #15]
 80120fe:	4618      	mov	r0, r3
 8012100:	f000 f942 	bl	8012388 <USBD_Get_USB_Status>
 8012104:	4603      	mov	r3, r0
 8012106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012108:	7bbb      	ldrb	r3, [r7, #14]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012112:	b580      	push	{r7, lr}
 8012114:	b084      	sub	sp, #16
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
 801211a:	4608      	mov	r0, r1
 801211c:	4611      	mov	r1, r2
 801211e:	461a      	mov	r2, r3
 8012120:	4603      	mov	r3, r0
 8012122:	70fb      	strb	r3, [r7, #3]
 8012124:	460b      	mov	r3, r1
 8012126:	70bb      	strb	r3, [r7, #2]
 8012128:	4613      	mov	r3, r2
 801212a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801212c:	2300      	movs	r3, #0
 801212e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012130:	2300      	movs	r3, #0
 8012132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801213a:	78bb      	ldrb	r3, [r7, #2]
 801213c:	883a      	ldrh	r2, [r7, #0]
 801213e:	78f9      	ldrb	r1, [r7, #3]
 8012140:	f7f3 f934 	bl	80053ac <HAL_PCD_EP_Open>
 8012144:	4603      	mov	r3, r0
 8012146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012148:	7bfb      	ldrb	r3, [r7, #15]
 801214a:	4618      	mov	r0, r3
 801214c:	f000 f91c 	bl	8012388 <USBD_Get_USB_Status>
 8012150:	4603      	mov	r3, r0
 8012152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012154:	7bbb      	ldrb	r3, [r7, #14]
}
 8012156:	4618      	mov	r0, r3
 8012158:	3710      	adds	r7, #16
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b084      	sub	sp, #16
 8012162:	af00      	add	r7, sp, #0
 8012164:	6078      	str	r0, [r7, #4]
 8012166:	460b      	mov	r3, r1
 8012168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801216a:	2300      	movs	r3, #0
 801216c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801216e:	2300      	movs	r3, #0
 8012170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012178:	78fa      	ldrb	r2, [r7, #3]
 801217a:	4611      	mov	r1, r2
 801217c:	4618      	mov	r0, r3
 801217e:	f7f3 f97d 	bl	800547c <HAL_PCD_EP_Close>
 8012182:	4603      	mov	r3, r0
 8012184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012186:	7bfb      	ldrb	r3, [r7, #15]
 8012188:	4618      	mov	r0, r3
 801218a:	f000 f8fd 	bl	8012388 <USBD_Get_USB_Status>
 801218e:	4603      	mov	r3, r0
 8012190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012192:	7bbb      	ldrb	r3, [r7, #14]
}
 8012194:	4618      	mov	r0, r3
 8012196:	3710      	adds	r7, #16
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	460b      	mov	r3, r1
 80121a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121a8:	2300      	movs	r3, #0
 80121aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121ac:	2300      	movs	r3, #0
 80121ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121b6:	78fa      	ldrb	r2, [r7, #3]
 80121b8:	4611      	mov	r1, r2
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7f3 fa35 	bl	800562a <HAL_PCD_EP_SetStall>
 80121c0:	4603      	mov	r3, r0
 80121c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121c4:	7bfb      	ldrb	r3, [r7, #15]
 80121c6:	4618      	mov	r0, r3
 80121c8:	f000 f8de 	bl	8012388 <USBD_Get_USB_Status>
 80121cc:	4603      	mov	r3, r0
 80121ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3710      	adds	r7, #16
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}

080121da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80121da:	b580      	push	{r7, lr}
 80121dc:	b084      	sub	sp, #16
 80121de:	af00      	add	r7, sp, #0
 80121e0:	6078      	str	r0, [r7, #4]
 80121e2:	460b      	mov	r3, r1
 80121e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121e6:	2300      	movs	r3, #0
 80121e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121ea:	2300      	movs	r3, #0
 80121ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121f4:	78fa      	ldrb	r2, [r7, #3]
 80121f6:	4611      	mov	r1, r2
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7f3 fa79 	bl	80056f0 <HAL_PCD_EP_ClrStall>
 80121fe:	4603      	mov	r3, r0
 8012200:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012202:	7bfb      	ldrb	r3, [r7, #15]
 8012204:	4618      	mov	r0, r3
 8012206:	f000 f8bf 	bl	8012388 <USBD_Get_USB_Status>
 801220a:	4603      	mov	r3, r0
 801220c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801220e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3710      	adds	r7, #16
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012218:	b480      	push	{r7}
 801221a:	b085      	sub	sp, #20
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	460b      	mov	r3, r1
 8012222:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801222a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801222c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012230:	2b00      	cmp	r3, #0
 8012232:	da0b      	bge.n	801224c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012234:	78fb      	ldrb	r3, [r7, #3]
 8012236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801223a:	68f9      	ldr	r1, [r7, #12]
 801223c:	4613      	mov	r3, r2
 801223e:	00db      	lsls	r3, r3, #3
 8012240:	4413      	add	r3, r2
 8012242:	009b      	lsls	r3, r3, #2
 8012244:	440b      	add	r3, r1
 8012246:	3316      	adds	r3, #22
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	e00b      	b.n	8012264 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801224c:	78fb      	ldrb	r3, [r7, #3]
 801224e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012252:	68f9      	ldr	r1, [r7, #12]
 8012254:	4613      	mov	r3, r2
 8012256:	00db      	lsls	r3, r3, #3
 8012258:	4413      	add	r3, r2
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	440b      	add	r3, r1
 801225e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8012262:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012264:	4618      	mov	r0, r3
 8012266:	3714      	adds	r7, #20
 8012268:	46bd      	mov	sp, r7
 801226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226e:	4770      	bx	lr

08012270 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	460b      	mov	r3, r1
 801227a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801227c:	2300      	movs	r3, #0
 801227e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012280:	2300      	movs	r3, #0
 8012282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801228a:	78fa      	ldrb	r2, [r7, #3]
 801228c:	4611      	mov	r1, r2
 801228e:	4618      	mov	r0, r3
 8012290:	f7f3 f868 	bl	8005364 <HAL_PCD_SetAddress>
 8012294:	4603      	mov	r3, r0
 8012296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012298:	7bfb      	ldrb	r3, [r7, #15]
 801229a:	4618      	mov	r0, r3
 801229c:	f000 f874 	bl	8012388 <USBD_Get_USB_Status>
 80122a0:	4603      	mov	r3, r0
 80122a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3710      	adds	r7, #16
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}

080122ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80122ae:	b580      	push	{r7, lr}
 80122b0:	b086      	sub	sp, #24
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	60f8      	str	r0, [r7, #12]
 80122b6:	607a      	str	r2, [r7, #4]
 80122b8:	603b      	str	r3, [r7, #0]
 80122ba:	460b      	mov	r3, r1
 80122bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122be:	2300      	movs	r3, #0
 80122c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122c2:	2300      	movs	r3, #0
 80122c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80122cc:	7af9      	ldrb	r1, [r7, #11]
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	f7f3 f970 	bl	80055b6 <HAL_PCD_EP_Transmit>
 80122d6:	4603      	mov	r3, r0
 80122d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122da:	7dfb      	ldrb	r3, [r7, #23]
 80122dc:	4618      	mov	r0, r3
 80122de:	f000 f853 	bl	8012388 <USBD_Get_USB_Status>
 80122e2:	4603      	mov	r3, r0
 80122e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80122e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3718      	adds	r7, #24
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b086      	sub	sp, #24
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	60f8      	str	r0, [r7, #12]
 80122f8:	607a      	str	r2, [r7, #4]
 80122fa:	603b      	str	r3, [r7, #0]
 80122fc:	460b      	mov	r3, r1
 80122fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012300:	2300      	movs	r3, #0
 8012302:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012304:	2300      	movs	r3, #0
 8012306:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801230e:	7af9      	ldrb	r1, [r7, #11]
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	f7f3 f8fc 	bl	8005510 <HAL_PCD_EP_Receive>
 8012318:	4603      	mov	r3, r0
 801231a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801231c:	7dfb      	ldrb	r3, [r7, #23]
 801231e:	4618      	mov	r0, r3
 8012320:	f000 f832 	bl	8012388 <USBD_Get_USB_Status>
 8012324:	4603      	mov	r3, r0
 8012326:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012328:	7dbb      	ldrb	r3, [r7, #22]
}
 801232a:	4618      	mov	r0, r3
 801232c:	3718      	adds	r7, #24
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012332:	b580      	push	{r7, lr}
 8012334:	b082      	sub	sp, #8
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	460b      	mov	r3, r1
 801233c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012344:	78fa      	ldrb	r2, [r7, #3]
 8012346:	4611      	mov	r1, r2
 8012348:	4618      	mov	r0, r3
 801234a:	f7f3 f91c 	bl	8005586 <HAL_PCD_EP_GetRxCount>
 801234e:	4603      	mov	r3, r0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3708      	adds	r7, #8
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012358:	b480      	push	{r7}
 801235a:	b083      	sub	sp, #12
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012360:	4b03      	ldr	r3, [pc, #12]	@ (8012370 <USBD_static_malloc+0x18>)
}
 8012362:	4618      	mov	r0, r3
 8012364:	370c      	adds	r7, #12
 8012366:	46bd      	mov	sp, r7
 8012368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236c:	4770      	bx	lr
 801236e:	bf00      	nop
 8012370:	240023cc 	.word	0x240023cc

08012374 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012374:	b480      	push	{r7}
 8012376:	b083      	sub	sp, #12
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801237c:	bf00      	nop
 801237e:	370c      	adds	r7, #12
 8012380:	46bd      	mov	sp, r7
 8012382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012386:	4770      	bx	lr

08012388 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012388:	b480      	push	{r7}
 801238a:	b085      	sub	sp, #20
 801238c:	af00      	add	r7, sp, #0
 801238e:	4603      	mov	r3, r0
 8012390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012392:	2300      	movs	r3, #0
 8012394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012396:	79fb      	ldrb	r3, [r7, #7]
 8012398:	2b03      	cmp	r3, #3
 801239a:	d817      	bhi.n	80123cc <USBD_Get_USB_Status+0x44>
 801239c:	a201      	add	r2, pc, #4	@ (adr r2, 80123a4 <USBD_Get_USB_Status+0x1c>)
 801239e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123a2:	bf00      	nop
 80123a4:	080123b5 	.word	0x080123b5
 80123a8:	080123bb 	.word	0x080123bb
 80123ac:	080123c1 	.word	0x080123c1
 80123b0:	080123c7 	.word	0x080123c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80123b4:	2300      	movs	r3, #0
 80123b6:	73fb      	strb	r3, [r7, #15]
    break;
 80123b8:	e00b      	b.n	80123d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80123ba:	2303      	movs	r3, #3
 80123bc:	73fb      	strb	r3, [r7, #15]
    break;
 80123be:	e008      	b.n	80123d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80123c0:	2301      	movs	r3, #1
 80123c2:	73fb      	strb	r3, [r7, #15]
    break;
 80123c4:	e005      	b.n	80123d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80123c6:	2303      	movs	r3, #3
 80123c8:	73fb      	strb	r3, [r7, #15]
    break;
 80123ca:	e002      	b.n	80123d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80123cc:	2303      	movs	r3, #3
 80123ce:	73fb      	strb	r3, [r7, #15]
    break;
 80123d0:	bf00      	nop
  }
  return usb_status;
 80123d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3714      	adds	r7, #20
 80123d8:	46bd      	mov	sp, r7
 80123da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123de:	4770      	bx	lr

080123e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123e0:	b480      	push	{r7}
 80123e2:	b083      	sub	sp, #12
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	4603      	mov	r3, r0
 80123e8:	6039      	str	r1, [r7, #0]
 80123ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	2212      	movs	r2, #18
 80123f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80123f2:	4b03      	ldr	r3, [pc, #12]	@ (8012400 <USBD_FS_DeviceDescriptor+0x20>)
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	370c      	adds	r7, #12
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr
 8012400:	240000d4 	.word	0x240000d4

08012404 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012404:	b480      	push	{r7}
 8012406:	b083      	sub	sp, #12
 8012408:	af00      	add	r7, sp, #0
 801240a:	4603      	mov	r3, r0
 801240c:	6039      	str	r1, [r7, #0]
 801240e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	2204      	movs	r2, #4
 8012414:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012416:	4b03      	ldr	r3, [pc, #12]	@ (8012424 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012418:	4618      	mov	r0, r3
 801241a:	370c      	adds	r7, #12
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr
 8012424:	240000e8 	.word	0x240000e8

08012428 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	4603      	mov	r3, r0
 8012430:	6039      	str	r1, [r7, #0]
 8012432:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012434:	79fb      	ldrb	r3, [r7, #7]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d105      	bne.n	8012446 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801243a:	683a      	ldr	r2, [r7, #0]
 801243c:	4907      	ldr	r1, [pc, #28]	@ (801245c <USBD_FS_ProductStrDescriptor+0x34>)
 801243e:	4808      	ldr	r0, [pc, #32]	@ (8012460 <USBD_FS_ProductStrDescriptor+0x38>)
 8012440:	f7fc fe18 	bl	800f074 <USBD_GetString>
 8012444:	e004      	b.n	8012450 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012446:	683a      	ldr	r2, [r7, #0]
 8012448:	4904      	ldr	r1, [pc, #16]	@ (801245c <USBD_FS_ProductStrDescriptor+0x34>)
 801244a:	4805      	ldr	r0, [pc, #20]	@ (8012460 <USBD_FS_ProductStrDescriptor+0x38>)
 801244c:	f7fc fe12 	bl	800f074 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012450:	4b02      	ldr	r3, [pc, #8]	@ (801245c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012452:	4618      	mov	r0, r3
 8012454:	3708      	adds	r7, #8
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	240025ec 	.word	0x240025ec
 8012460:	080155e4 	.word	0x080155e4

08012464 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
 801246a:	4603      	mov	r3, r0
 801246c:	6039      	str	r1, [r7, #0]
 801246e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012470:	683a      	ldr	r2, [r7, #0]
 8012472:	4904      	ldr	r1, [pc, #16]	@ (8012484 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012474:	4804      	ldr	r0, [pc, #16]	@ (8012488 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012476:	f7fc fdfd 	bl	800f074 <USBD_GetString>
  return USBD_StrDesc;
 801247a:	4b02      	ldr	r3, [pc, #8]	@ (8012484 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801247c:	4618      	mov	r0, r3
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	240025ec 	.word	0x240025ec
 8012488:	080155fc 	.word	0x080155fc

0801248c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	4603      	mov	r3, r0
 8012494:	6039      	str	r1, [r7, #0]
 8012496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	221a      	movs	r2, #26
 801249c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801249e:	f000 f843 	bl	8012528 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80124a2:	4b02      	ldr	r3, [pc, #8]	@ (80124ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	3708      	adds	r7, #8
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}
 80124ac:	240000ec 	.word	0x240000ec

080124b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	4603      	mov	r3, r0
 80124b8:	6039      	str	r1, [r7, #0]
 80124ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80124bc:	79fb      	ldrb	r3, [r7, #7]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d105      	bne.n	80124ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80124c2:	683a      	ldr	r2, [r7, #0]
 80124c4:	4907      	ldr	r1, [pc, #28]	@ (80124e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80124c6:	4808      	ldr	r0, [pc, #32]	@ (80124e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80124c8:	f7fc fdd4 	bl	800f074 <USBD_GetString>
 80124cc:	e004      	b.n	80124d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80124ce:	683a      	ldr	r2, [r7, #0]
 80124d0:	4904      	ldr	r1, [pc, #16]	@ (80124e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80124d2:	4805      	ldr	r0, [pc, #20]	@ (80124e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80124d4:	f7fc fdce 	bl	800f074 <USBD_GetString>
  }
  return USBD_StrDesc;
 80124d8:	4b02      	ldr	r3, [pc, #8]	@ (80124e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3708      	adds	r7, #8
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	240025ec 	.word	0x240025ec
 80124e8:	08015610 	.word	0x08015610

080124ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	4603      	mov	r3, r0
 80124f4:	6039      	str	r1, [r7, #0]
 80124f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80124f8:	79fb      	ldrb	r3, [r7, #7]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d105      	bne.n	801250a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80124fe:	683a      	ldr	r2, [r7, #0]
 8012500:	4907      	ldr	r1, [pc, #28]	@ (8012520 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012502:	4808      	ldr	r0, [pc, #32]	@ (8012524 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012504:	f7fc fdb6 	bl	800f074 <USBD_GetString>
 8012508:	e004      	b.n	8012514 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	4904      	ldr	r1, [pc, #16]	@ (8012520 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801250e:	4805      	ldr	r0, [pc, #20]	@ (8012524 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012510:	f7fc fdb0 	bl	800f074 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012514:	4b02      	ldr	r3, [pc, #8]	@ (8012520 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012516:	4618      	mov	r0, r3
 8012518:	3708      	adds	r7, #8
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	240025ec 	.word	0x240025ec
 8012524:	0801561c 	.word	0x0801561c

08012528 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b084      	sub	sp, #16
 801252c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 801252e:	68fa      	ldr	r2, [r7, #12]
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	4413      	add	r3, r2
 8012534:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d009      	beq.n	8012550 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801253c:	2208      	movs	r2, #8
 801253e:	4906      	ldr	r1, [pc, #24]	@ (8012558 <Get_SerialNum+0x30>)
 8012540:	68f8      	ldr	r0, [r7, #12]
 8012542:	f000 f80d 	bl	8012560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012546:	2204      	movs	r2, #4
 8012548:	4904      	ldr	r1, [pc, #16]	@ (801255c <Get_SerialNum+0x34>)
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f000 f808 	bl	8012560 <IntToUnicode>
  }
}
 8012550:	bf00      	nop
 8012552:	3710      	adds	r7, #16
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	240000ee 	.word	0x240000ee
 801255c:	240000fe 	.word	0x240000fe

08012560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012560:	b480      	push	{r7}
 8012562:	b087      	sub	sp, #28
 8012564:	af00      	add	r7, sp, #0
 8012566:	60f8      	str	r0, [r7, #12]
 8012568:	60b9      	str	r1, [r7, #8]
 801256a:	4613      	mov	r3, r2
 801256c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801256e:	2300      	movs	r3, #0
 8012570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012572:	2300      	movs	r3, #0
 8012574:	75fb      	strb	r3, [r7, #23]
 8012576:	e027      	b.n	80125c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	0f1b      	lsrs	r3, r3, #28
 801257c:	2b09      	cmp	r3, #9
 801257e:	d80b      	bhi.n	8012598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	0f1b      	lsrs	r3, r3, #28
 8012584:	b2da      	uxtb	r2, r3
 8012586:	7dfb      	ldrb	r3, [r7, #23]
 8012588:	005b      	lsls	r3, r3, #1
 801258a:	4619      	mov	r1, r3
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	440b      	add	r3, r1
 8012590:	3230      	adds	r2, #48	@ 0x30
 8012592:	b2d2      	uxtb	r2, r2
 8012594:	701a      	strb	r2, [r3, #0]
 8012596:	e00a      	b.n	80125ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	0f1b      	lsrs	r3, r3, #28
 801259c:	b2da      	uxtb	r2, r3
 801259e:	7dfb      	ldrb	r3, [r7, #23]
 80125a0:	005b      	lsls	r3, r3, #1
 80125a2:	4619      	mov	r1, r3
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	440b      	add	r3, r1
 80125a8:	3237      	adds	r2, #55	@ 0x37
 80125aa:	b2d2      	uxtb	r2, r2
 80125ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	011b      	lsls	r3, r3, #4
 80125b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80125b4:	7dfb      	ldrb	r3, [r7, #23]
 80125b6:	005b      	lsls	r3, r3, #1
 80125b8:	3301      	adds	r3, #1
 80125ba:	68ba      	ldr	r2, [r7, #8]
 80125bc:	4413      	add	r3, r2
 80125be:	2200      	movs	r2, #0
 80125c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80125c2:	7dfb      	ldrb	r3, [r7, #23]
 80125c4:	3301      	adds	r3, #1
 80125c6:	75fb      	strb	r3, [r7, #23]
 80125c8:	7dfa      	ldrb	r2, [r7, #23]
 80125ca:	79fb      	ldrb	r3, [r7, #7]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d3d3      	bcc.n	8012578 <IntToUnicode+0x18>
  }
}
 80125d0:	bf00      	nop
 80125d2:	bf00      	nop
 80125d4:	371c      	adds	r7, #28
 80125d6:	46bd      	mov	sp, r7
 80125d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125dc:	4770      	bx	lr
	...

080125e0 <arm_sin_f32>:
 80125e0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8012660 <arm_sin_f32+0x80>
 80125e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80125e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80125ec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80125f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f4:	d504      	bpl.n	8012600 <arm_sin_f32+0x20>
 80125f6:	ee17 3a90 	vmov	r3, s15
 80125fa:	3b01      	subs	r3, #1
 80125fc:	ee07 3a90 	vmov	s15, r3
 8012600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012604:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012664 <arm_sin_f32+0x84>
 8012608:	ee70 7a67 	vsub.f32	s15, s0, s15
 801260c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012610:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8012614:	ee17 3a10 	vmov	r3, s14
 8012618:	b29b      	uxth	r3, r3
 801261a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801261e:	d21a      	bcs.n	8012656 <arm_sin_f32+0x76>
 8012620:	ee07 3a10 	vmov	s14, r3
 8012624:	1c59      	adds	r1, r3, #1
 8012626:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801262a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801262e:	4a0e      	ldr	r2, [pc, #56]	@ (8012668 <arm_sin_f32+0x88>)
 8012630:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012634:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012638:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801263c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012640:	edd3 6a00 	vldr	s13, [r3]
 8012644:	ed92 7a00 	vldr	s14, [r2]
 8012648:	ee20 0a26 	vmul.f32	s0, s0, s13
 801264c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012650:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012654:	4770      	bx	lr
 8012656:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801265a:	2101      	movs	r1, #1
 801265c:	2300      	movs	r3, #0
 801265e:	e7e6      	b.n	801262e <arm_sin_f32+0x4e>
 8012660:	3e22f983 	.word	0x3e22f983
 8012664:	44000000 	.word	0x44000000
 8012668:	08016e04 	.word	0x08016e04

0801266c <arm_cos_f32>:
 801266c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80126f4 <arm_cos_f32+0x88>
 8012670:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8012674:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012678:	ee30 0a07 	vadd.f32	s0, s0, s14
 801267c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012680:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012688:	d504      	bpl.n	8012694 <arm_cos_f32+0x28>
 801268a:	ee17 3a90 	vmov	r3, s15
 801268e:	3b01      	subs	r3, #1
 8012690:	ee07 3a90 	vmov	s15, r3
 8012694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012698:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80126f8 <arm_cos_f32+0x8c>
 801269c:	ee70 7a67 	vsub.f32	s15, s0, s15
 80126a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80126a4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80126a8:	ee17 3a10 	vmov	r3, s14
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80126b2:	d21a      	bcs.n	80126ea <arm_cos_f32+0x7e>
 80126b4:	ee07 3a10 	vmov	s14, r3
 80126b8:	1c59      	adds	r1, r3, #1
 80126ba:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80126be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80126c2:	4a0e      	ldr	r2, [pc, #56]	@ (80126fc <arm_cos_f32+0x90>)
 80126c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80126c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80126cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80126d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80126d4:	edd3 6a00 	vldr	s13, [r3]
 80126d8:	ed92 7a00 	vldr	s14, [r2]
 80126dc:	ee20 0a26 	vmul.f32	s0, s0, s13
 80126e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80126e8:	4770      	bx	lr
 80126ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80126ee:	2101      	movs	r1, #1
 80126f0:	2300      	movs	r3, #0
 80126f2:	e7e6      	b.n	80126c2 <arm_cos_f32+0x56>
 80126f4:	3e22f983 	.word	0x3e22f983
 80126f8:	44000000 	.word	0x44000000
 80126fc:	08016e04 	.word	0x08016e04

08012700 <malloc>:
 8012700:	4b02      	ldr	r3, [pc, #8]	@ (801270c <malloc+0xc>)
 8012702:	4601      	mov	r1, r0
 8012704:	6818      	ldr	r0, [r3, #0]
 8012706:	f000 b825 	b.w	8012754 <_malloc_r>
 801270a:	bf00      	nop
 801270c:	24000114 	.word	0x24000114

08012710 <sbrk_aligned>:
 8012710:	b570      	push	{r4, r5, r6, lr}
 8012712:	4e0f      	ldr	r6, [pc, #60]	@ (8012750 <sbrk_aligned+0x40>)
 8012714:	460c      	mov	r4, r1
 8012716:	6831      	ldr	r1, [r6, #0]
 8012718:	4605      	mov	r5, r0
 801271a:	b911      	cbnz	r1, 8012722 <sbrk_aligned+0x12>
 801271c:	f000 fe42 	bl	80133a4 <_sbrk_r>
 8012720:	6030      	str	r0, [r6, #0]
 8012722:	4621      	mov	r1, r4
 8012724:	4628      	mov	r0, r5
 8012726:	f000 fe3d 	bl	80133a4 <_sbrk_r>
 801272a:	1c43      	adds	r3, r0, #1
 801272c:	d103      	bne.n	8012736 <sbrk_aligned+0x26>
 801272e:	f04f 34ff 	mov.w	r4, #4294967295
 8012732:	4620      	mov	r0, r4
 8012734:	bd70      	pop	{r4, r5, r6, pc}
 8012736:	1cc4      	adds	r4, r0, #3
 8012738:	f024 0403 	bic.w	r4, r4, #3
 801273c:	42a0      	cmp	r0, r4
 801273e:	d0f8      	beq.n	8012732 <sbrk_aligned+0x22>
 8012740:	1a21      	subs	r1, r4, r0
 8012742:	4628      	mov	r0, r5
 8012744:	f000 fe2e 	bl	80133a4 <_sbrk_r>
 8012748:	3001      	adds	r0, #1
 801274a:	d1f2      	bne.n	8012732 <sbrk_aligned+0x22>
 801274c:	e7ef      	b.n	801272e <sbrk_aligned+0x1e>
 801274e:	bf00      	nop
 8012750:	240027ec 	.word	0x240027ec

08012754 <_malloc_r>:
 8012754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012758:	1ccd      	adds	r5, r1, #3
 801275a:	f025 0503 	bic.w	r5, r5, #3
 801275e:	3508      	adds	r5, #8
 8012760:	2d0c      	cmp	r5, #12
 8012762:	bf38      	it	cc
 8012764:	250c      	movcc	r5, #12
 8012766:	2d00      	cmp	r5, #0
 8012768:	4606      	mov	r6, r0
 801276a:	db01      	blt.n	8012770 <_malloc_r+0x1c>
 801276c:	42a9      	cmp	r1, r5
 801276e:	d904      	bls.n	801277a <_malloc_r+0x26>
 8012770:	230c      	movs	r3, #12
 8012772:	6033      	str	r3, [r6, #0]
 8012774:	2000      	movs	r0, #0
 8012776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801277a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012850 <_malloc_r+0xfc>
 801277e:	f000 f869 	bl	8012854 <__malloc_lock>
 8012782:	f8d8 3000 	ldr.w	r3, [r8]
 8012786:	461c      	mov	r4, r3
 8012788:	bb44      	cbnz	r4, 80127dc <_malloc_r+0x88>
 801278a:	4629      	mov	r1, r5
 801278c:	4630      	mov	r0, r6
 801278e:	f7ff ffbf 	bl	8012710 <sbrk_aligned>
 8012792:	1c43      	adds	r3, r0, #1
 8012794:	4604      	mov	r4, r0
 8012796:	d158      	bne.n	801284a <_malloc_r+0xf6>
 8012798:	f8d8 4000 	ldr.w	r4, [r8]
 801279c:	4627      	mov	r7, r4
 801279e:	2f00      	cmp	r7, #0
 80127a0:	d143      	bne.n	801282a <_malloc_r+0xd6>
 80127a2:	2c00      	cmp	r4, #0
 80127a4:	d04b      	beq.n	801283e <_malloc_r+0xea>
 80127a6:	6823      	ldr	r3, [r4, #0]
 80127a8:	4639      	mov	r1, r7
 80127aa:	4630      	mov	r0, r6
 80127ac:	eb04 0903 	add.w	r9, r4, r3
 80127b0:	f000 fdf8 	bl	80133a4 <_sbrk_r>
 80127b4:	4581      	cmp	r9, r0
 80127b6:	d142      	bne.n	801283e <_malloc_r+0xea>
 80127b8:	6821      	ldr	r1, [r4, #0]
 80127ba:	1a6d      	subs	r5, r5, r1
 80127bc:	4629      	mov	r1, r5
 80127be:	4630      	mov	r0, r6
 80127c0:	f7ff ffa6 	bl	8012710 <sbrk_aligned>
 80127c4:	3001      	adds	r0, #1
 80127c6:	d03a      	beq.n	801283e <_malloc_r+0xea>
 80127c8:	6823      	ldr	r3, [r4, #0]
 80127ca:	442b      	add	r3, r5
 80127cc:	6023      	str	r3, [r4, #0]
 80127ce:	f8d8 3000 	ldr.w	r3, [r8]
 80127d2:	685a      	ldr	r2, [r3, #4]
 80127d4:	bb62      	cbnz	r2, 8012830 <_malloc_r+0xdc>
 80127d6:	f8c8 7000 	str.w	r7, [r8]
 80127da:	e00f      	b.n	80127fc <_malloc_r+0xa8>
 80127dc:	6822      	ldr	r2, [r4, #0]
 80127de:	1b52      	subs	r2, r2, r5
 80127e0:	d420      	bmi.n	8012824 <_malloc_r+0xd0>
 80127e2:	2a0b      	cmp	r2, #11
 80127e4:	d917      	bls.n	8012816 <_malloc_r+0xc2>
 80127e6:	1961      	adds	r1, r4, r5
 80127e8:	42a3      	cmp	r3, r4
 80127ea:	6025      	str	r5, [r4, #0]
 80127ec:	bf18      	it	ne
 80127ee:	6059      	strne	r1, [r3, #4]
 80127f0:	6863      	ldr	r3, [r4, #4]
 80127f2:	bf08      	it	eq
 80127f4:	f8c8 1000 	streq.w	r1, [r8]
 80127f8:	5162      	str	r2, [r4, r5]
 80127fa:	604b      	str	r3, [r1, #4]
 80127fc:	4630      	mov	r0, r6
 80127fe:	f000 f82f 	bl	8012860 <__malloc_unlock>
 8012802:	f104 000b 	add.w	r0, r4, #11
 8012806:	1d23      	adds	r3, r4, #4
 8012808:	f020 0007 	bic.w	r0, r0, #7
 801280c:	1ac2      	subs	r2, r0, r3
 801280e:	bf1c      	itt	ne
 8012810:	1a1b      	subne	r3, r3, r0
 8012812:	50a3      	strne	r3, [r4, r2]
 8012814:	e7af      	b.n	8012776 <_malloc_r+0x22>
 8012816:	6862      	ldr	r2, [r4, #4]
 8012818:	42a3      	cmp	r3, r4
 801281a:	bf0c      	ite	eq
 801281c:	f8c8 2000 	streq.w	r2, [r8]
 8012820:	605a      	strne	r2, [r3, #4]
 8012822:	e7eb      	b.n	80127fc <_malloc_r+0xa8>
 8012824:	4623      	mov	r3, r4
 8012826:	6864      	ldr	r4, [r4, #4]
 8012828:	e7ae      	b.n	8012788 <_malloc_r+0x34>
 801282a:	463c      	mov	r4, r7
 801282c:	687f      	ldr	r7, [r7, #4]
 801282e:	e7b6      	b.n	801279e <_malloc_r+0x4a>
 8012830:	461a      	mov	r2, r3
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	42a3      	cmp	r3, r4
 8012836:	d1fb      	bne.n	8012830 <_malloc_r+0xdc>
 8012838:	2300      	movs	r3, #0
 801283a:	6053      	str	r3, [r2, #4]
 801283c:	e7de      	b.n	80127fc <_malloc_r+0xa8>
 801283e:	230c      	movs	r3, #12
 8012840:	6033      	str	r3, [r6, #0]
 8012842:	4630      	mov	r0, r6
 8012844:	f000 f80c 	bl	8012860 <__malloc_unlock>
 8012848:	e794      	b.n	8012774 <_malloc_r+0x20>
 801284a:	6005      	str	r5, [r0, #0]
 801284c:	e7d6      	b.n	80127fc <_malloc_r+0xa8>
 801284e:	bf00      	nop
 8012850:	240027f0 	.word	0x240027f0

08012854 <__malloc_lock>:
 8012854:	4801      	ldr	r0, [pc, #4]	@ (801285c <__malloc_lock+0x8>)
 8012856:	f000 bdec 	b.w	8013432 <__retarget_lock_acquire_recursive>
 801285a:	bf00      	nop
 801285c:	24002934 	.word	0x24002934

08012860 <__malloc_unlock>:
 8012860:	4801      	ldr	r0, [pc, #4]	@ (8012868 <__malloc_unlock+0x8>)
 8012862:	f000 bde7 	b.w	8013434 <__retarget_lock_release_recursive>
 8012866:	bf00      	nop
 8012868:	24002934 	.word	0x24002934

0801286c <__cvt>:
 801286c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801286e:	ed2d 8b02 	vpush	{d8}
 8012872:	eeb0 8b40 	vmov.f64	d8, d0
 8012876:	b085      	sub	sp, #20
 8012878:	4617      	mov	r7, r2
 801287a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801287c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801287e:	ee18 2a90 	vmov	r2, s17
 8012882:	f025 0520 	bic.w	r5, r5, #32
 8012886:	2a00      	cmp	r2, #0
 8012888:	bfb6      	itet	lt
 801288a:	222d      	movlt	r2, #45	@ 0x2d
 801288c:	2200      	movge	r2, #0
 801288e:	eeb1 8b40 	vneglt.f64	d8, d0
 8012892:	2d46      	cmp	r5, #70	@ 0x46
 8012894:	460c      	mov	r4, r1
 8012896:	701a      	strb	r2, [r3, #0]
 8012898:	d004      	beq.n	80128a4 <__cvt+0x38>
 801289a:	2d45      	cmp	r5, #69	@ 0x45
 801289c:	d100      	bne.n	80128a0 <__cvt+0x34>
 801289e:	3401      	adds	r4, #1
 80128a0:	2102      	movs	r1, #2
 80128a2:	e000      	b.n	80128a6 <__cvt+0x3a>
 80128a4:	2103      	movs	r1, #3
 80128a6:	ab03      	add	r3, sp, #12
 80128a8:	9301      	str	r3, [sp, #4]
 80128aa:	ab02      	add	r3, sp, #8
 80128ac:	9300      	str	r3, [sp, #0]
 80128ae:	4622      	mov	r2, r4
 80128b0:	4633      	mov	r3, r6
 80128b2:	eeb0 0b48 	vmov.f64	d0, d8
 80128b6:	f000 fe47 	bl	8013548 <_dtoa_r>
 80128ba:	2d47      	cmp	r5, #71	@ 0x47
 80128bc:	d114      	bne.n	80128e8 <__cvt+0x7c>
 80128be:	07fb      	lsls	r3, r7, #31
 80128c0:	d50a      	bpl.n	80128d8 <__cvt+0x6c>
 80128c2:	1902      	adds	r2, r0, r4
 80128c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128cc:	bf08      	it	eq
 80128ce:	9203      	streq	r2, [sp, #12]
 80128d0:	2130      	movs	r1, #48	@ 0x30
 80128d2:	9b03      	ldr	r3, [sp, #12]
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d319      	bcc.n	801290c <__cvt+0xa0>
 80128d8:	9b03      	ldr	r3, [sp, #12]
 80128da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128dc:	1a1b      	subs	r3, r3, r0
 80128de:	6013      	str	r3, [r2, #0]
 80128e0:	b005      	add	sp, #20
 80128e2:	ecbd 8b02 	vpop	{d8}
 80128e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128e8:	2d46      	cmp	r5, #70	@ 0x46
 80128ea:	eb00 0204 	add.w	r2, r0, r4
 80128ee:	d1e9      	bne.n	80128c4 <__cvt+0x58>
 80128f0:	7803      	ldrb	r3, [r0, #0]
 80128f2:	2b30      	cmp	r3, #48	@ 0x30
 80128f4:	d107      	bne.n	8012906 <__cvt+0x9a>
 80128f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fe:	bf1c      	itt	ne
 8012900:	f1c4 0401 	rsbne	r4, r4, #1
 8012904:	6034      	strne	r4, [r6, #0]
 8012906:	6833      	ldr	r3, [r6, #0]
 8012908:	441a      	add	r2, r3
 801290a:	e7db      	b.n	80128c4 <__cvt+0x58>
 801290c:	1c5c      	adds	r4, r3, #1
 801290e:	9403      	str	r4, [sp, #12]
 8012910:	7019      	strb	r1, [r3, #0]
 8012912:	e7de      	b.n	80128d2 <__cvt+0x66>

08012914 <__exponent>:
 8012914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012916:	2900      	cmp	r1, #0
 8012918:	bfba      	itte	lt
 801291a:	4249      	neglt	r1, r1
 801291c:	232d      	movlt	r3, #45	@ 0x2d
 801291e:	232b      	movge	r3, #43	@ 0x2b
 8012920:	2909      	cmp	r1, #9
 8012922:	7002      	strb	r2, [r0, #0]
 8012924:	7043      	strb	r3, [r0, #1]
 8012926:	dd29      	ble.n	801297c <__exponent+0x68>
 8012928:	f10d 0307 	add.w	r3, sp, #7
 801292c:	461d      	mov	r5, r3
 801292e:	270a      	movs	r7, #10
 8012930:	461a      	mov	r2, r3
 8012932:	fbb1 f6f7 	udiv	r6, r1, r7
 8012936:	fb07 1416 	mls	r4, r7, r6, r1
 801293a:	3430      	adds	r4, #48	@ 0x30
 801293c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012940:	460c      	mov	r4, r1
 8012942:	2c63      	cmp	r4, #99	@ 0x63
 8012944:	f103 33ff 	add.w	r3, r3, #4294967295
 8012948:	4631      	mov	r1, r6
 801294a:	dcf1      	bgt.n	8012930 <__exponent+0x1c>
 801294c:	3130      	adds	r1, #48	@ 0x30
 801294e:	1e94      	subs	r4, r2, #2
 8012950:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012954:	1c41      	adds	r1, r0, #1
 8012956:	4623      	mov	r3, r4
 8012958:	42ab      	cmp	r3, r5
 801295a:	d30a      	bcc.n	8012972 <__exponent+0x5e>
 801295c:	f10d 0309 	add.w	r3, sp, #9
 8012960:	1a9b      	subs	r3, r3, r2
 8012962:	42ac      	cmp	r4, r5
 8012964:	bf88      	it	hi
 8012966:	2300      	movhi	r3, #0
 8012968:	3302      	adds	r3, #2
 801296a:	4403      	add	r3, r0
 801296c:	1a18      	subs	r0, r3, r0
 801296e:	b003      	add	sp, #12
 8012970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012972:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012976:	f801 6f01 	strb.w	r6, [r1, #1]!
 801297a:	e7ed      	b.n	8012958 <__exponent+0x44>
 801297c:	2330      	movs	r3, #48	@ 0x30
 801297e:	3130      	adds	r1, #48	@ 0x30
 8012980:	7083      	strb	r3, [r0, #2]
 8012982:	70c1      	strb	r1, [r0, #3]
 8012984:	1d03      	adds	r3, r0, #4
 8012986:	e7f1      	b.n	801296c <__exponent+0x58>

08012988 <_printf_float>:
 8012988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801298c:	b08d      	sub	sp, #52	@ 0x34
 801298e:	460c      	mov	r4, r1
 8012990:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012994:	4616      	mov	r6, r2
 8012996:	461f      	mov	r7, r3
 8012998:	4605      	mov	r5, r0
 801299a:	f000 fccb 	bl	8013334 <_localeconv_r>
 801299e:	f8d0 b000 	ldr.w	fp, [r0]
 80129a2:	4658      	mov	r0, fp
 80129a4:	f7ed fcec 	bl	8000380 <strlen>
 80129a8:	2300      	movs	r3, #0
 80129aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80129ac:	f8d8 3000 	ldr.w	r3, [r8]
 80129b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80129b4:	6822      	ldr	r2, [r4, #0]
 80129b6:	9005      	str	r0, [sp, #20]
 80129b8:	3307      	adds	r3, #7
 80129ba:	f023 0307 	bic.w	r3, r3, #7
 80129be:	f103 0108 	add.w	r1, r3, #8
 80129c2:	f8c8 1000 	str.w	r1, [r8]
 80129c6:	ed93 0b00 	vldr	d0, [r3]
 80129ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012c28 <_printf_float+0x2a0>
 80129ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80129d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80129d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80129de:	dd24      	ble.n	8012a2a <_printf_float+0xa2>
 80129e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80129e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e8:	d502      	bpl.n	80129f0 <_printf_float+0x68>
 80129ea:	232d      	movs	r3, #45	@ 0x2d
 80129ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80129f0:	498f      	ldr	r1, [pc, #572]	@ (8012c30 <_printf_float+0x2a8>)
 80129f2:	4b90      	ldr	r3, [pc, #576]	@ (8012c34 <_printf_float+0x2ac>)
 80129f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80129f8:	bf94      	ite	ls
 80129fa:	4688      	movls	r8, r1
 80129fc:	4698      	movhi	r8, r3
 80129fe:	f022 0204 	bic.w	r2, r2, #4
 8012a02:	2303      	movs	r3, #3
 8012a04:	6123      	str	r3, [r4, #16]
 8012a06:	6022      	str	r2, [r4, #0]
 8012a08:	f04f 0a00 	mov.w	sl, #0
 8012a0c:	9700      	str	r7, [sp, #0]
 8012a0e:	4633      	mov	r3, r6
 8012a10:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012a12:	4621      	mov	r1, r4
 8012a14:	4628      	mov	r0, r5
 8012a16:	f000 f9d1 	bl	8012dbc <_printf_common>
 8012a1a:	3001      	adds	r0, #1
 8012a1c:	f040 8089 	bne.w	8012b32 <_printf_float+0x1aa>
 8012a20:	f04f 30ff 	mov.w	r0, #4294967295
 8012a24:	b00d      	add	sp, #52	@ 0x34
 8012a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a2a:	eeb4 0b40 	vcmp.f64	d0, d0
 8012a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a32:	d709      	bvc.n	8012a48 <_printf_float+0xc0>
 8012a34:	ee10 3a90 	vmov	r3, s1
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	bfbc      	itt	lt
 8012a3c:	232d      	movlt	r3, #45	@ 0x2d
 8012a3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012a42:	497d      	ldr	r1, [pc, #500]	@ (8012c38 <_printf_float+0x2b0>)
 8012a44:	4b7d      	ldr	r3, [pc, #500]	@ (8012c3c <_printf_float+0x2b4>)
 8012a46:	e7d5      	b.n	80129f4 <_printf_float+0x6c>
 8012a48:	6863      	ldr	r3, [r4, #4]
 8012a4a:	1c59      	adds	r1, r3, #1
 8012a4c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012a50:	d139      	bne.n	8012ac6 <_printf_float+0x13e>
 8012a52:	2306      	movs	r3, #6
 8012a54:	6063      	str	r3, [r4, #4]
 8012a56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	6022      	str	r2, [r4, #0]
 8012a5e:	9303      	str	r3, [sp, #12]
 8012a60:	ab0a      	add	r3, sp, #40	@ 0x28
 8012a62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012a66:	ab09      	add	r3, sp, #36	@ 0x24
 8012a68:	9300      	str	r3, [sp, #0]
 8012a6a:	6861      	ldr	r1, [r4, #4]
 8012a6c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012a70:	4628      	mov	r0, r5
 8012a72:	f7ff fefb 	bl	801286c <__cvt>
 8012a76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012a7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a7c:	4680      	mov	r8, r0
 8012a7e:	d129      	bne.n	8012ad4 <_printf_float+0x14c>
 8012a80:	1cc8      	adds	r0, r1, #3
 8012a82:	db02      	blt.n	8012a8a <_printf_float+0x102>
 8012a84:	6863      	ldr	r3, [r4, #4]
 8012a86:	4299      	cmp	r1, r3
 8012a88:	dd41      	ble.n	8012b0e <_printf_float+0x186>
 8012a8a:	f1a9 0902 	sub.w	r9, r9, #2
 8012a8e:	fa5f f989 	uxtb.w	r9, r9
 8012a92:	3901      	subs	r1, #1
 8012a94:	464a      	mov	r2, r9
 8012a96:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012a9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a9c:	f7ff ff3a 	bl	8012914 <__exponent>
 8012aa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012aa2:	1813      	adds	r3, r2, r0
 8012aa4:	2a01      	cmp	r2, #1
 8012aa6:	4682      	mov	sl, r0
 8012aa8:	6123      	str	r3, [r4, #16]
 8012aaa:	dc02      	bgt.n	8012ab2 <_printf_float+0x12a>
 8012aac:	6822      	ldr	r2, [r4, #0]
 8012aae:	07d2      	lsls	r2, r2, #31
 8012ab0:	d501      	bpl.n	8012ab6 <_printf_float+0x12e>
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	6123      	str	r3, [r4, #16]
 8012ab6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d0a6      	beq.n	8012a0c <_printf_float+0x84>
 8012abe:	232d      	movs	r3, #45	@ 0x2d
 8012ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ac4:	e7a2      	b.n	8012a0c <_printf_float+0x84>
 8012ac6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012aca:	d1c4      	bne.n	8012a56 <_printf_float+0xce>
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d1c2      	bne.n	8012a56 <_printf_float+0xce>
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e7bf      	b.n	8012a54 <_printf_float+0xcc>
 8012ad4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012ad8:	d9db      	bls.n	8012a92 <_printf_float+0x10a>
 8012ada:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012ade:	d118      	bne.n	8012b12 <_printf_float+0x18a>
 8012ae0:	2900      	cmp	r1, #0
 8012ae2:	6863      	ldr	r3, [r4, #4]
 8012ae4:	dd0b      	ble.n	8012afe <_printf_float+0x176>
 8012ae6:	6121      	str	r1, [r4, #16]
 8012ae8:	b913      	cbnz	r3, 8012af0 <_printf_float+0x168>
 8012aea:	6822      	ldr	r2, [r4, #0]
 8012aec:	07d0      	lsls	r0, r2, #31
 8012aee:	d502      	bpl.n	8012af6 <_printf_float+0x16e>
 8012af0:	3301      	adds	r3, #1
 8012af2:	440b      	add	r3, r1
 8012af4:	6123      	str	r3, [r4, #16]
 8012af6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012af8:	f04f 0a00 	mov.w	sl, #0
 8012afc:	e7db      	b.n	8012ab6 <_printf_float+0x12e>
 8012afe:	b913      	cbnz	r3, 8012b06 <_printf_float+0x17e>
 8012b00:	6822      	ldr	r2, [r4, #0]
 8012b02:	07d2      	lsls	r2, r2, #31
 8012b04:	d501      	bpl.n	8012b0a <_printf_float+0x182>
 8012b06:	3302      	adds	r3, #2
 8012b08:	e7f4      	b.n	8012af4 <_printf_float+0x16c>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e7f2      	b.n	8012af4 <_printf_float+0x16c>
 8012b0e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b14:	4299      	cmp	r1, r3
 8012b16:	db05      	blt.n	8012b24 <_printf_float+0x19c>
 8012b18:	6823      	ldr	r3, [r4, #0]
 8012b1a:	6121      	str	r1, [r4, #16]
 8012b1c:	07d8      	lsls	r0, r3, #31
 8012b1e:	d5ea      	bpl.n	8012af6 <_printf_float+0x16e>
 8012b20:	1c4b      	adds	r3, r1, #1
 8012b22:	e7e7      	b.n	8012af4 <_printf_float+0x16c>
 8012b24:	2900      	cmp	r1, #0
 8012b26:	bfd4      	ite	le
 8012b28:	f1c1 0202 	rsble	r2, r1, #2
 8012b2c:	2201      	movgt	r2, #1
 8012b2e:	4413      	add	r3, r2
 8012b30:	e7e0      	b.n	8012af4 <_printf_float+0x16c>
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	055a      	lsls	r2, r3, #21
 8012b36:	d407      	bmi.n	8012b48 <_printf_float+0x1c0>
 8012b38:	6923      	ldr	r3, [r4, #16]
 8012b3a:	4642      	mov	r2, r8
 8012b3c:	4631      	mov	r1, r6
 8012b3e:	4628      	mov	r0, r5
 8012b40:	47b8      	blx	r7
 8012b42:	3001      	adds	r0, #1
 8012b44:	d12a      	bne.n	8012b9c <_printf_float+0x214>
 8012b46:	e76b      	b.n	8012a20 <_printf_float+0x98>
 8012b48:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012b4c:	f240 80e0 	bls.w	8012d10 <_printf_float+0x388>
 8012b50:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012b54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5c:	d133      	bne.n	8012bc6 <_printf_float+0x23e>
 8012b5e:	4a38      	ldr	r2, [pc, #224]	@ (8012c40 <_printf_float+0x2b8>)
 8012b60:	2301      	movs	r3, #1
 8012b62:	4631      	mov	r1, r6
 8012b64:	4628      	mov	r0, r5
 8012b66:	47b8      	blx	r7
 8012b68:	3001      	adds	r0, #1
 8012b6a:	f43f af59 	beq.w	8012a20 <_printf_float+0x98>
 8012b6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012b72:	4543      	cmp	r3, r8
 8012b74:	db02      	blt.n	8012b7c <_printf_float+0x1f4>
 8012b76:	6823      	ldr	r3, [r4, #0]
 8012b78:	07d8      	lsls	r0, r3, #31
 8012b7a:	d50f      	bpl.n	8012b9c <_printf_float+0x214>
 8012b7c:	9b05      	ldr	r3, [sp, #20]
 8012b7e:	465a      	mov	r2, fp
 8012b80:	4631      	mov	r1, r6
 8012b82:	4628      	mov	r0, r5
 8012b84:	47b8      	blx	r7
 8012b86:	3001      	adds	r0, #1
 8012b88:	f43f af4a 	beq.w	8012a20 <_printf_float+0x98>
 8012b8c:	f04f 0900 	mov.w	r9, #0
 8012b90:	f108 38ff 	add.w	r8, r8, #4294967295
 8012b94:	f104 0a1a 	add.w	sl, r4, #26
 8012b98:	45c8      	cmp	r8, r9
 8012b9a:	dc09      	bgt.n	8012bb0 <_printf_float+0x228>
 8012b9c:	6823      	ldr	r3, [r4, #0]
 8012b9e:	079b      	lsls	r3, r3, #30
 8012ba0:	f100 8107 	bmi.w	8012db2 <_printf_float+0x42a>
 8012ba4:	68e0      	ldr	r0, [r4, #12]
 8012ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ba8:	4298      	cmp	r0, r3
 8012baa:	bfb8      	it	lt
 8012bac:	4618      	movlt	r0, r3
 8012bae:	e739      	b.n	8012a24 <_printf_float+0x9c>
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	4652      	mov	r2, sl
 8012bb4:	4631      	mov	r1, r6
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	47b8      	blx	r7
 8012bba:	3001      	adds	r0, #1
 8012bbc:	f43f af30 	beq.w	8012a20 <_printf_float+0x98>
 8012bc0:	f109 0901 	add.w	r9, r9, #1
 8012bc4:	e7e8      	b.n	8012b98 <_printf_float+0x210>
 8012bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	dc3b      	bgt.n	8012c44 <_printf_float+0x2bc>
 8012bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8012c40 <_printf_float+0x2b8>)
 8012bce:	2301      	movs	r3, #1
 8012bd0:	4631      	mov	r1, r6
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	47b8      	blx	r7
 8012bd6:	3001      	adds	r0, #1
 8012bd8:	f43f af22 	beq.w	8012a20 <_printf_float+0x98>
 8012bdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012be0:	ea59 0303 	orrs.w	r3, r9, r3
 8012be4:	d102      	bne.n	8012bec <_printf_float+0x264>
 8012be6:	6823      	ldr	r3, [r4, #0]
 8012be8:	07d9      	lsls	r1, r3, #31
 8012bea:	d5d7      	bpl.n	8012b9c <_printf_float+0x214>
 8012bec:	9b05      	ldr	r3, [sp, #20]
 8012bee:	465a      	mov	r2, fp
 8012bf0:	4631      	mov	r1, r6
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	47b8      	blx	r7
 8012bf6:	3001      	adds	r0, #1
 8012bf8:	f43f af12 	beq.w	8012a20 <_printf_float+0x98>
 8012bfc:	f04f 0a00 	mov.w	sl, #0
 8012c00:	f104 0b1a 	add.w	fp, r4, #26
 8012c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c06:	425b      	negs	r3, r3
 8012c08:	4553      	cmp	r3, sl
 8012c0a:	dc01      	bgt.n	8012c10 <_printf_float+0x288>
 8012c0c:	464b      	mov	r3, r9
 8012c0e:	e794      	b.n	8012b3a <_printf_float+0x1b2>
 8012c10:	2301      	movs	r3, #1
 8012c12:	465a      	mov	r2, fp
 8012c14:	4631      	mov	r1, r6
 8012c16:	4628      	mov	r0, r5
 8012c18:	47b8      	blx	r7
 8012c1a:	3001      	adds	r0, #1
 8012c1c:	f43f af00 	beq.w	8012a20 <_printf_float+0x98>
 8012c20:	f10a 0a01 	add.w	sl, sl, #1
 8012c24:	e7ee      	b.n	8012c04 <_printf_float+0x27c>
 8012c26:	bf00      	nop
 8012c28:	ffffffff 	.word	0xffffffff
 8012c2c:	7fefffff 	.word	0x7fefffff
 8012c30:	08017608 	.word	0x08017608
 8012c34:	0801760c 	.word	0x0801760c
 8012c38:	08017610 	.word	0x08017610
 8012c3c:	08017614 	.word	0x08017614
 8012c40:	08017618 	.word	0x08017618
 8012c44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012c46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012c4a:	4553      	cmp	r3, sl
 8012c4c:	bfa8      	it	ge
 8012c4e:	4653      	movge	r3, sl
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	4699      	mov	r9, r3
 8012c54:	dc37      	bgt.n	8012cc6 <_printf_float+0x33e>
 8012c56:	2300      	movs	r3, #0
 8012c58:	9307      	str	r3, [sp, #28]
 8012c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c5e:	f104 021a 	add.w	r2, r4, #26
 8012c62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012c64:	9907      	ldr	r1, [sp, #28]
 8012c66:	9306      	str	r3, [sp, #24]
 8012c68:	eba3 0309 	sub.w	r3, r3, r9
 8012c6c:	428b      	cmp	r3, r1
 8012c6e:	dc31      	bgt.n	8012cd4 <_printf_float+0x34c>
 8012c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c72:	459a      	cmp	sl, r3
 8012c74:	dc3b      	bgt.n	8012cee <_printf_float+0x366>
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	07da      	lsls	r2, r3, #31
 8012c7a:	d438      	bmi.n	8012cee <_printf_float+0x366>
 8012c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c7e:	ebaa 0903 	sub.w	r9, sl, r3
 8012c82:	9b06      	ldr	r3, [sp, #24]
 8012c84:	ebaa 0303 	sub.w	r3, sl, r3
 8012c88:	4599      	cmp	r9, r3
 8012c8a:	bfa8      	it	ge
 8012c8c:	4699      	movge	r9, r3
 8012c8e:	f1b9 0f00 	cmp.w	r9, #0
 8012c92:	dc34      	bgt.n	8012cfe <_printf_float+0x376>
 8012c94:	f04f 0800 	mov.w	r8, #0
 8012c98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c9c:	f104 0b1a 	add.w	fp, r4, #26
 8012ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ca2:	ebaa 0303 	sub.w	r3, sl, r3
 8012ca6:	eba3 0309 	sub.w	r3, r3, r9
 8012caa:	4543      	cmp	r3, r8
 8012cac:	f77f af76 	ble.w	8012b9c <_printf_float+0x214>
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	465a      	mov	r2, fp
 8012cb4:	4631      	mov	r1, r6
 8012cb6:	4628      	mov	r0, r5
 8012cb8:	47b8      	blx	r7
 8012cba:	3001      	adds	r0, #1
 8012cbc:	f43f aeb0 	beq.w	8012a20 <_printf_float+0x98>
 8012cc0:	f108 0801 	add.w	r8, r8, #1
 8012cc4:	e7ec      	b.n	8012ca0 <_printf_float+0x318>
 8012cc6:	4642      	mov	r2, r8
 8012cc8:	4631      	mov	r1, r6
 8012cca:	4628      	mov	r0, r5
 8012ccc:	47b8      	blx	r7
 8012cce:	3001      	adds	r0, #1
 8012cd0:	d1c1      	bne.n	8012c56 <_printf_float+0x2ce>
 8012cd2:	e6a5      	b.n	8012a20 <_printf_float+0x98>
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	4631      	mov	r1, r6
 8012cd8:	4628      	mov	r0, r5
 8012cda:	9206      	str	r2, [sp, #24]
 8012cdc:	47b8      	blx	r7
 8012cde:	3001      	adds	r0, #1
 8012ce0:	f43f ae9e 	beq.w	8012a20 <_printf_float+0x98>
 8012ce4:	9b07      	ldr	r3, [sp, #28]
 8012ce6:	9a06      	ldr	r2, [sp, #24]
 8012ce8:	3301      	adds	r3, #1
 8012cea:	9307      	str	r3, [sp, #28]
 8012cec:	e7b9      	b.n	8012c62 <_printf_float+0x2da>
 8012cee:	9b05      	ldr	r3, [sp, #20]
 8012cf0:	465a      	mov	r2, fp
 8012cf2:	4631      	mov	r1, r6
 8012cf4:	4628      	mov	r0, r5
 8012cf6:	47b8      	blx	r7
 8012cf8:	3001      	adds	r0, #1
 8012cfa:	d1bf      	bne.n	8012c7c <_printf_float+0x2f4>
 8012cfc:	e690      	b.n	8012a20 <_printf_float+0x98>
 8012cfe:	9a06      	ldr	r2, [sp, #24]
 8012d00:	464b      	mov	r3, r9
 8012d02:	4442      	add	r2, r8
 8012d04:	4631      	mov	r1, r6
 8012d06:	4628      	mov	r0, r5
 8012d08:	47b8      	blx	r7
 8012d0a:	3001      	adds	r0, #1
 8012d0c:	d1c2      	bne.n	8012c94 <_printf_float+0x30c>
 8012d0e:	e687      	b.n	8012a20 <_printf_float+0x98>
 8012d10:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012d14:	f1b9 0f01 	cmp.w	r9, #1
 8012d18:	dc01      	bgt.n	8012d1e <_printf_float+0x396>
 8012d1a:	07db      	lsls	r3, r3, #31
 8012d1c:	d536      	bpl.n	8012d8c <_printf_float+0x404>
 8012d1e:	2301      	movs	r3, #1
 8012d20:	4642      	mov	r2, r8
 8012d22:	4631      	mov	r1, r6
 8012d24:	4628      	mov	r0, r5
 8012d26:	47b8      	blx	r7
 8012d28:	3001      	adds	r0, #1
 8012d2a:	f43f ae79 	beq.w	8012a20 <_printf_float+0x98>
 8012d2e:	9b05      	ldr	r3, [sp, #20]
 8012d30:	465a      	mov	r2, fp
 8012d32:	4631      	mov	r1, r6
 8012d34:	4628      	mov	r0, r5
 8012d36:	47b8      	blx	r7
 8012d38:	3001      	adds	r0, #1
 8012d3a:	f43f ae71 	beq.w	8012a20 <_printf_float+0x98>
 8012d3e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012d42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8012d4e:	d018      	beq.n	8012d82 <_printf_float+0x3fa>
 8012d50:	464b      	mov	r3, r9
 8012d52:	f108 0201 	add.w	r2, r8, #1
 8012d56:	4631      	mov	r1, r6
 8012d58:	4628      	mov	r0, r5
 8012d5a:	47b8      	blx	r7
 8012d5c:	3001      	adds	r0, #1
 8012d5e:	d10c      	bne.n	8012d7a <_printf_float+0x3f2>
 8012d60:	e65e      	b.n	8012a20 <_printf_float+0x98>
 8012d62:	2301      	movs	r3, #1
 8012d64:	465a      	mov	r2, fp
 8012d66:	4631      	mov	r1, r6
 8012d68:	4628      	mov	r0, r5
 8012d6a:	47b8      	blx	r7
 8012d6c:	3001      	adds	r0, #1
 8012d6e:	f43f ae57 	beq.w	8012a20 <_printf_float+0x98>
 8012d72:	f108 0801 	add.w	r8, r8, #1
 8012d76:	45c8      	cmp	r8, r9
 8012d78:	dbf3      	blt.n	8012d62 <_printf_float+0x3da>
 8012d7a:	4653      	mov	r3, sl
 8012d7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012d80:	e6dc      	b.n	8012b3c <_printf_float+0x1b4>
 8012d82:	f04f 0800 	mov.w	r8, #0
 8012d86:	f104 0b1a 	add.w	fp, r4, #26
 8012d8a:	e7f4      	b.n	8012d76 <_printf_float+0x3ee>
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	4642      	mov	r2, r8
 8012d90:	e7e1      	b.n	8012d56 <_printf_float+0x3ce>
 8012d92:	2301      	movs	r3, #1
 8012d94:	464a      	mov	r2, r9
 8012d96:	4631      	mov	r1, r6
 8012d98:	4628      	mov	r0, r5
 8012d9a:	47b8      	blx	r7
 8012d9c:	3001      	adds	r0, #1
 8012d9e:	f43f ae3f 	beq.w	8012a20 <_printf_float+0x98>
 8012da2:	f108 0801 	add.w	r8, r8, #1
 8012da6:	68e3      	ldr	r3, [r4, #12]
 8012da8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012daa:	1a5b      	subs	r3, r3, r1
 8012dac:	4543      	cmp	r3, r8
 8012dae:	dcf0      	bgt.n	8012d92 <_printf_float+0x40a>
 8012db0:	e6f8      	b.n	8012ba4 <_printf_float+0x21c>
 8012db2:	f04f 0800 	mov.w	r8, #0
 8012db6:	f104 0919 	add.w	r9, r4, #25
 8012dba:	e7f4      	b.n	8012da6 <_printf_float+0x41e>

08012dbc <_printf_common>:
 8012dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dc0:	4616      	mov	r6, r2
 8012dc2:	4698      	mov	r8, r3
 8012dc4:	688a      	ldr	r2, [r1, #8]
 8012dc6:	690b      	ldr	r3, [r1, #16]
 8012dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	bfb8      	it	lt
 8012dd0:	4613      	movlt	r3, r2
 8012dd2:	6033      	str	r3, [r6, #0]
 8012dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012dd8:	4607      	mov	r7, r0
 8012dda:	460c      	mov	r4, r1
 8012ddc:	b10a      	cbz	r2, 8012de2 <_printf_common+0x26>
 8012dde:	3301      	adds	r3, #1
 8012de0:	6033      	str	r3, [r6, #0]
 8012de2:	6823      	ldr	r3, [r4, #0]
 8012de4:	0699      	lsls	r1, r3, #26
 8012de6:	bf42      	ittt	mi
 8012de8:	6833      	ldrmi	r3, [r6, #0]
 8012dea:	3302      	addmi	r3, #2
 8012dec:	6033      	strmi	r3, [r6, #0]
 8012dee:	6825      	ldr	r5, [r4, #0]
 8012df0:	f015 0506 	ands.w	r5, r5, #6
 8012df4:	d106      	bne.n	8012e04 <_printf_common+0x48>
 8012df6:	f104 0a19 	add.w	sl, r4, #25
 8012dfa:	68e3      	ldr	r3, [r4, #12]
 8012dfc:	6832      	ldr	r2, [r6, #0]
 8012dfe:	1a9b      	subs	r3, r3, r2
 8012e00:	42ab      	cmp	r3, r5
 8012e02:	dc26      	bgt.n	8012e52 <_printf_common+0x96>
 8012e04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012e08:	6822      	ldr	r2, [r4, #0]
 8012e0a:	3b00      	subs	r3, #0
 8012e0c:	bf18      	it	ne
 8012e0e:	2301      	movne	r3, #1
 8012e10:	0692      	lsls	r2, r2, #26
 8012e12:	d42b      	bmi.n	8012e6c <_printf_common+0xb0>
 8012e14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012e18:	4641      	mov	r1, r8
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	47c8      	blx	r9
 8012e1e:	3001      	adds	r0, #1
 8012e20:	d01e      	beq.n	8012e60 <_printf_common+0xa4>
 8012e22:	6823      	ldr	r3, [r4, #0]
 8012e24:	6922      	ldr	r2, [r4, #16]
 8012e26:	f003 0306 	and.w	r3, r3, #6
 8012e2a:	2b04      	cmp	r3, #4
 8012e2c:	bf02      	ittt	eq
 8012e2e:	68e5      	ldreq	r5, [r4, #12]
 8012e30:	6833      	ldreq	r3, [r6, #0]
 8012e32:	1aed      	subeq	r5, r5, r3
 8012e34:	68a3      	ldr	r3, [r4, #8]
 8012e36:	bf0c      	ite	eq
 8012e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e3c:	2500      	movne	r5, #0
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	bfc4      	itt	gt
 8012e42:	1a9b      	subgt	r3, r3, r2
 8012e44:	18ed      	addgt	r5, r5, r3
 8012e46:	2600      	movs	r6, #0
 8012e48:	341a      	adds	r4, #26
 8012e4a:	42b5      	cmp	r5, r6
 8012e4c:	d11a      	bne.n	8012e84 <_printf_common+0xc8>
 8012e4e:	2000      	movs	r0, #0
 8012e50:	e008      	b.n	8012e64 <_printf_common+0xa8>
 8012e52:	2301      	movs	r3, #1
 8012e54:	4652      	mov	r2, sl
 8012e56:	4641      	mov	r1, r8
 8012e58:	4638      	mov	r0, r7
 8012e5a:	47c8      	blx	r9
 8012e5c:	3001      	adds	r0, #1
 8012e5e:	d103      	bne.n	8012e68 <_printf_common+0xac>
 8012e60:	f04f 30ff 	mov.w	r0, #4294967295
 8012e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e68:	3501      	adds	r5, #1
 8012e6a:	e7c6      	b.n	8012dfa <_printf_common+0x3e>
 8012e6c:	18e1      	adds	r1, r4, r3
 8012e6e:	1c5a      	adds	r2, r3, #1
 8012e70:	2030      	movs	r0, #48	@ 0x30
 8012e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012e76:	4422      	add	r2, r4
 8012e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012e7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012e80:	3302      	adds	r3, #2
 8012e82:	e7c7      	b.n	8012e14 <_printf_common+0x58>
 8012e84:	2301      	movs	r3, #1
 8012e86:	4622      	mov	r2, r4
 8012e88:	4641      	mov	r1, r8
 8012e8a:	4638      	mov	r0, r7
 8012e8c:	47c8      	blx	r9
 8012e8e:	3001      	adds	r0, #1
 8012e90:	d0e6      	beq.n	8012e60 <_printf_common+0xa4>
 8012e92:	3601      	adds	r6, #1
 8012e94:	e7d9      	b.n	8012e4a <_printf_common+0x8e>
	...

08012e98 <_printf_i>:
 8012e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e9c:	7e0f      	ldrb	r7, [r1, #24]
 8012e9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012ea0:	2f78      	cmp	r7, #120	@ 0x78
 8012ea2:	4691      	mov	r9, r2
 8012ea4:	4680      	mov	r8, r0
 8012ea6:	460c      	mov	r4, r1
 8012ea8:	469a      	mov	sl, r3
 8012eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012eae:	d807      	bhi.n	8012ec0 <_printf_i+0x28>
 8012eb0:	2f62      	cmp	r7, #98	@ 0x62
 8012eb2:	d80a      	bhi.n	8012eca <_printf_i+0x32>
 8012eb4:	2f00      	cmp	r7, #0
 8012eb6:	f000 80d2 	beq.w	801305e <_printf_i+0x1c6>
 8012eba:	2f58      	cmp	r7, #88	@ 0x58
 8012ebc:	f000 80b9 	beq.w	8013032 <_printf_i+0x19a>
 8012ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012ec8:	e03a      	b.n	8012f40 <_printf_i+0xa8>
 8012eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012ece:	2b15      	cmp	r3, #21
 8012ed0:	d8f6      	bhi.n	8012ec0 <_printf_i+0x28>
 8012ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8012ed8 <_printf_i+0x40>)
 8012ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ed8:	08012f31 	.word	0x08012f31
 8012edc:	08012f45 	.word	0x08012f45
 8012ee0:	08012ec1 	.word	0x08012ec1
 8012ee4:	08012ec1 	.word	0x08012ec1
 8012ee8:	08012ec1 	.word	0x08012ec1
 8012eec:	08012ec1 	.word	0x08012ec1
 8012ef0:	08012f45 	.word	0x08012f45
 8012ef4:	08012ec1 	.word	0x08012ec1
 8012ef8:	08012ec1 	.word	0x08012ec1
 8012efc:	08012ec1 	.word	0x08012ec1
 8012f00:	08012ec1 	.word	0x08012ec1
 8012f04:	08013045 	.word	0x08013045
 8012f08:	08012f6f 	.word	0x08012f6f
 8012f0c:	08012fff 	.word	0x08012fff
 8012f10:	08012ec1 	.word	0x08012ec1
 8012f14:	08012ec1 	.word	0x08012ec1
 8012f18:	08013067 	.word	0x08013067
 8012f1c:	08012ec1 	.word	0x08012ec1
 8012f20:	08012f6f 	.word	0x08012f6f
 8012f24:	08012ec1 	.word	0x08012ec1
 8012f28:	08012ec1 	.word	0x08012ec1
 8012f2c:	08013007 	.word	0x08013007
 8012f30:	6833      	ldr	r3, [r6, #0]
 8012f32:	1d1a      	adds	r2, r3, #4
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	6032      	str	r2, [r6, #0]
 8012f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012f40:	2301      	movs	r3, #1
 8012f42:	e09d      	b.n	8013080 <_printf_i+0x1e8>
 8012f44:	6833      	ldr	r3, [r6, #0]
 8012f46:	6820      	ldr	r0, [r4, #0]
 8012f48:	1d19      	adds	r1, r3, #4
 8012f4a:	6031      	str	r1, [r6, #0]
 8012f4c:	0606      	lsls	r6, r0, #24
 8012f4e:	d501      	bpl.n	8012f54 <_printf_i+0xbc>
 8012f50:	681d      	ldr	r5, [r3, #0]
 8012f52:	e003      	b.n	8012f5c <_printf_i+0xc4>
 8012f54:	0645      	lsls	r5, r0, #25
 8012f56:	d5fb      	bpl.n	8012f50 <_printf_i+0xb8>
 8012f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012f5c:	2d00      	cmp	r5, #0
 8012f5e:	da03      	bge.n	8012f68 <_printf_i+0xd0>
 8012f60:	232d      	movs	r3, #45	@ 0x2d
 8012f62:	426d      	negs	r5, r5
 8012f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f68:	4859      	ldr	r0, [pc, #356]	@ (80130d0 <_printf_i+0x238>)
 8012f6a:	230a      	movs	r3, #10
 8012f6c:	e011      	b.n	8012f92 <_printf_i+0xfa>
 8012f6e:	6821      	ldr	r1, [r4, #0]
 8012f70:	6833      	ldr	r3, [r6, #0]
 8012f72:	0608      	lsls	r0, r1, #24
 8012f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8012f78:	d402      	bmi.n	8012f80 <_printf_i+0xe8>
 8012f7a:	0649      	lsls	r1, r1, #25
 8012f7c:	bf48      	it	mi
 8012f7e:	b2ad      	uxthmi	r5, r5
 8012f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8012f82:	4853      	ldr	r0, [pc, #332]	@ (80130d0 <_printf_i+0x238>)
 8012f84:	6033      	str	r3, [r6, #0]
 8012f86:	bf14      	ite	ne
 8012f88:	230a      	movne	r3, #10
 8012f8a:	2308      	moveq	r3, #8
 8012f8c:	2100      	movs	r1, #0
 8012f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012f92:	6866      	ldr	r6, [r4, #4]
 8012f94:	60a6      	str	r6, [r4, #8]
 8012f96:	2e00      	cmp	r6, #0
 8012f98:	bfa2      	ittt	ge
 8012f9a:	6821      	ldrge	r1, [r4, #0]
 8012f9c:	f021 0104 	bicge.w	r1, r1, #4
 8012fa0:	6021      	strge	r1, [r4, #0]
 8012fa2:	b90d      	cbnz	r5, 8012fa8 <_printf_i+0x110>
 8012fa4:	2e00      	cmp	r6, #0
 8012fa6:	d04b      	beq.n	8013040 <_printf_i+0x1a8>
 8012fa8:	4616      	mov	r6, r2
 8012faa:	fbb5 f1f3 	udiv	r1, r5, r3
 8012fae:	fb03 5711 	mls	r7, r3, r1, r5
 8012fb2:	5dc7      	ldrb	r7, [r0, r7]
 8012fb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012fb8:	462f      	mov	r7, r5
 8012fba:	42bb      	cmp	r3, r7
 8012fbc:	460d      	mov	r5, r1
 8012fbe:	d9f4      	bls.n	8012faa <_printf_i+0x112>
 8012fc0:	2b08      	cmp	r3, #8
 8012fc2:	d10b      	bne.n	8012fdc <_printf_i+0x144>
 8012fc4:	6823      	ldr	r3, [r4, #0]
 8012fc6:	07df      	lsls	r7, r3, #31
 8012fc8:	d508      	bpl.n	8012fdc <_printf_i+0x144>
 8012fca:	6923      	ldr	r3, [r4, #16]
 8012fcc:	6861      	ldr	r1, [r4, #4]
 8012fce:	4299      	cmp	r1, r3
 8012fd0:	bfde      	ittt	le
 8012fd2:	2330      	movle	r3, #48	@ 0x30
 8012fd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012fd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012fdc:	1b92      	subs	r2, r2, r6
 8012fde:	6122      	str	r2, [r4, #16]
 8012fe0:	f8cd a000 	str.w	sl, [sp]
 8012fe4:	464b      	mov	r3, r9
 8012fe6:	aa03      	add	r2, sp, #12
 8012fe8:	4621      	mov	r1, r4
 8012fea:	4640      	mov	r0, r8
 8012fec:	f7ff fee6 	bl	8012dbc <_printf_common>
 8012ff0:	3001      	adds	r0, #1
 8012ff2:	d14a      	bne.n	801308a <_printf_i+0x1f2>
 8012ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ff8:	b004      	add	sp, #16
 8012ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ffe:	6823      	ldr	r3, [r4, #0]
 8013000:	f043 0320 	orr.w	r3, r3, #32
 8013004:	6023      	str	r3, [r4, #0]
 8013006:	4833      	ldr	r0, [pc, #204]	@ (80130d4 <_printf_i+0x23c>)
 8013008:	2778      	movs	r7, #120	@ 0x78
 801300a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801300e:	6823      	ldr	r3, [r4, #0]
 8013010:	6831      	ldr	r1, [r6, #0]
 8013012:	061f      	lsls	r7, r3, #24
 8013014:	f851 5b04 	ldr.w	r5, [r1], #4
 8013018:	d402      	bmi.n	8013020 <_printf_i+0x188>
 801301a:	065f      	lsls	r7, r3, #25
 801301c:	bf48      	it	mi
 801301e:	b2ad      	uxthmi	r5, r5
 8013020:	6031      	str	r1, [r6, #0]
 8013022:	07d9      	lsls	r1, r3, #31
 8013024:	bf44      	itt	mi
 8013026:	f043 0320 	orrmi.w	r3, r3, #32
 801302a:	6023      	strmi	r3, [r4, #0]
 801302c:	b11d      	cbz	r5, 8013036 <_printf_i+0x19e>
 801302e:	2310      	movs	r3, #16
 8013030:	e7ac      	b.n	8012f8c <_printf_i+0xf4>
 8013032:	4827      	ldr	r0, [pc, #156]	@ (80130d0 <_printf_i+0x238>)
 8013034:	e7e9      	b.n	801300a <_printf_i+0x172>
 8013036:	6823      	ldr	r3, [r4, #0]
 8013038:	f023 0320 	bic.w	r3, r3, #32
 801303c:	6023      	str	r3, [r4, #0]
 801303e:	e7f6      	b.n	801302e <_printf_i+0x196>
 8013040:	4616      	mov	r6, r2
 8013042:	e7bd      	b.n	8012fc0 <_printf_i+0x128>
 8013044:	6833      	ldr	r3, [r6, #0]
 8013046:	6825      	ldr	r5, [r4, #0]
 8013048:	6961      	ldr	r1, [r4, #20]
 801304a:	1d18      	adds	r0, r3, #4
 801304c:	6030      	str	r0, [r6, #0]
 801304e:	062e      	lsls	r6, r5, #24
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	d501      	bpl.n	8013058 <_printf_i+0x1c0>
 8013054:	6019      	str	r1, [r3, #0]
 8013056:	e002      	b.n	801305e <_printf_i+0x1c6>
 8013058:	0668      	lsls	r0, r5, #25
 801305a:	d5fb      	bpl.n	8013054 <_printf_i+0x1bc>
 801305c:	8019      	strh	r1, [r3, #0]
 801305e:	2300      	movs	r3, #0
 8013060:	6123      	str	r3, [r4, #16]
 8013062:	4616      	mov	r6, r2
 8013064:	e7bc      	b.n	8012fe0 <_printf_i+0x148>
 8013066:	6833      	ldr	r3, [r6, #0]
 8013068:	1d1a      	adds	r2, r3, #4
 801306a:	6032      	str	r2, [r6, #0]
 801306c:	681e      	ldr	r6, [r3, #0]
 801306e:	6862      	ldr	r2, [r4, #4]
 8013070:	2100      	movs	r1, #0
 8013072:	4630      	mov	r0, r6
 8013074:	f7ed f934 	bl	80002e0 <memchr>
 8013078:	b108      	cbz	r0, 801307e <_printf_i+0x1e6>
 801307a:	1b80      	subs	r0, r0, r6
 801307c:	6060      	str	r0, [r4, #4]
 801307e:	6863      	ldr	r3, [r4, #4]
 8013080:	6123      	str	r3, [r4, #16]
 8013082:	2300      	movs	r3, #0
 8013084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013088:	e7aa      	b.n	8012fe0 <_printf_i+0x148>
 801308a:	6923      	ldr	r3, [r4, #16]
 801308c:	4632      	mov	r2, r6
 801308e:	4649      	mov	r1, r9
 8013090:	4640      	mov	r0, r8
 8013092:	47d0      	blx	sl
 8013094:	3001      	adds	r0, #1
 8013096:	d0ad      	beq.n	8012ff4 <_printf_i+0x15c>
 8013098:	6823      	ldr	r3, [r4, #0]
 801309a:	079b      	lsls	r3, r3, #30
 801309c:	d413      	bmi.n	80130c6 <_printf_i+0x22e>
 801309e:	68e0      	ldr	r0, [r4, #12]
 80130a0:	9b03      	ldr	r3, [sp, #12]
 80130a2:	4298      	cmp	r0, r3
 80130a4:	bfb8      	it	lt
 80130a6:	4618      	movlt	r0, r3
 80130a8:	e7a6      	b.n	8012ff8 <_printf_i+0x160>
 80130aa:	2301      	movs	r3, #1
 80130ac:	4632      	mov	r2, r6
 80130ae:	4649      	mov	r1, r9
 80130b0:	4640      	mov	r0, r8
 80130b2:	47d0      	blx	sl
 80130b4:	3001      	adds	r0, #1
 80130b6:	d09d      	beq.n	8012ff4 <_printf_i+0x15c>
 80130b8:	3501      	adds	r5, #1
 80130ba:	68e3      	ldr	r3, [r4, #12]
 80130bc:	9903      	ldr	r1, [sp, #12]
 80130be:	1a5b      	subs	r3, r3, r1
 80130c0:	42ab      	cmp	r3, r5
 80130c2:	dcf2      	bgt.n	80130aa <_printf_i+0x212>
 80130c4:	e7eb      	b.n	801309e <_printf_i+0x206>
 80130c6:	2500      	movs	r5, #0
 80130c8:	f104 0619 	add.w	r6, r4, #25
 80130cc:	e7f5      	b.n	80130ba <_printf_i+0x222>
 80130ce:	bf00      	nop
 80130d0:	0801761a 	.word	0x0801761a
 80130d4:	0801762b 	.word	0x0801762b

080130d8 <std>:
 80130d8:	2300      	movs	r3, #0
 80130da:	b510      	push	{r4, lr}
 80130dc:	4604      	mov	r4, r0
 80130de:	e9c0 3300 	strd	r3, r3, [r0]
 80130e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80130e6:	6083      	str	r3, [r0, #8]
 80130e8:	8181      	strh	r1, [r0, #12]
 80130ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80130ec:	81c2      	strh	r2, [r0, #14]
 80130ee:	6183      	str	r3, [r0, #24]
 80130f0:	4619      	mov	r1, r3
 80130f2:	2208      	movs	r2, #8
 80130f4:	305c      	adds	r0, #92	@ 0x5c
 80130f6:	f000 f914 	bl	8013322 <memset>
 80130fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013130 <std+0x58>)
 80130fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80130fe:	4b0d      	ldr	r3, [pc, #52]	@ (8013134 <std+0x5c>)
 8013100:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013102:	4b0d      	ldr	r3, [pc, #52]	@ (8013138 <std+0x60>)
 8013104:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013106:	4b0d      	ldr	r3, [pc, #52]	@ (801313c <std+0x64>)
 8013108:	6323      	str	r3, [r4, #48]	@ 0x30
 801310a:	4b0d      	ldr	r3, [pc, #52]	@ (8013140 <std+0x68>)
 801310c:	6224      	str	r4, [r4, #32]
 801310e:	429c      	cmp	r4, r3
 8013110:	d006      	beq.n	8013120 <std+0x48>
 8013112:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013116:	4294      	cmp	r4, r2
 8013118:	d002      	beq.n	8013120 <std+0x48>
 801311a:	33d0      	adds	r3, #208	@ 0xd0
 801311c:	429c      	cmp	r4, r3
 801311e:	d105      	bne.n	801312c <std+0x54>
 8013120:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013128:	f000 b982 	b.w	8013430 <__retarget_lock_init_recursive>
 801312c:	bd10      	pop	{r4, pc}
 801312e:	bf00      	nop
 8013130:	0801329d 	.word	0x0801329d
 8013134:	080132bf 	.word	0x080132bf
 8013138:	080132f7 	.word	0x080132f7
 801313c:	0801331b 	.word	0x0801331b
 8013140:	240027f4 	.word	0x240027f4

08013144 <stdio_exit_handler>:
 8013144:	4a02      	ldr	r2, [pc, #8]	@ (8013150 <stdio_exit_handler+0xc>)
 8013146:	4903      	ldr	r1, [pc, #12]	@ (8013154 <stdio_exit_handler+0x10>)
 8013148:	4803      	ldr	r0, [pc, #12]	@ (8013158 <stdio_exit_handler+0x14>)
 801314a:	f000 b869 	b.w	8013220 <_fwalk_sglue>
 801314e:	bf00      	nop
 8013150:	24000108 	.word	0x24000108
 8013154:	08014b45 	.word	0x08014b45
 8013158:	24000118 	.word	0x24000118

0801315c <cleanup_stdio>:
 801315c:	6841      	ldr	r1, [r0, #4]
 801315e:	4b0c      	ldr	r3, [pc, #48]	@ (8013190 <cleanup_stdio+0x34>)
 8013160:	4299      	cmp	r1, r3
 8013162:	b510      	push	{r4, lr}
 8013164:	4604      	mov	r4, r0
 8013166:	d001      	beq.n	801316c <cleanup_stdio+0x10>
 8013168:	f001 fcec 	bl	8014b44 <_fflush_r>
 801316c:	68a1      	ldr	r1, [r4, #8]
 801316e:	4b09      	ldr	r3, [pc, #36]	@ (8013194 <cleanup_stdio+0x38>)
 8013170:	4299      	cmp	r1, r3
 8013172:	d002      	beq.n	801317a <cleanup_stdio+0x1e>
 8013174:	4620      	mov	r0, r4
 8013176:	f001 fce5 	bl	8014b44 <_fflush_r>
 801317a:	68e1      	ldr	r1, [r4, #12]
 801317c:	4b06      	ldr	r3, [pc, #24]	@ (8013198 <cleanup_stdio+0x3c>)
 801317e:	4299      	cmp	r1, r3
 8013180:	d004      	beq.n	801318c <cleanup_stdio+0x30>
 8013182:	4620      	mov	r0, r4
 8013184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013188:	f001 bcdc 	b.w	8014b44 <_fflush_r>
 801318c:	bd10      	pop	{r4, pc}
 801318e:	bf00      	nop
 8013190:	240027f4 	.word	0x240027f4
 8013194:	2400285c 	.word	0x2400285c
 8013198:	240028c4 	.word	0x240028c4

0801319c <global_stdio_init.part.0>:
 801319c:	b510      	push	{r4, lr}
 801319e:	4b0b      	ldr	r3, [pc, #44]	@ (80131cc <global_stdio_init.part.0+0x30>)
 80131a0:	4c0b      	ldr	r4, [pc, #44]	@ (80131d0 <global_stdio_init.part.0+0x34>)
 80131a2:	4a0c      	ldr	r2, [pc, #48]	@ (80131d4 <global_stdio_init.part.0+0x38>)
 80131a4:	601a      	str	r2, [r3, #0]
 80131a6:	4620      	mov	r0, r4
 80131a8:	2200      	movs	r2, #0
 80131aa:	2104      	movs	r1, #4
 80131ac:	f7ff ff94 	bl	80130d8 <std>
 80131b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80131b4:	2201      	movs	r2, #1
 80131b6:	2109      	movs	r1, #9
 80131b8:	f7ff ff8e 	bl	80130d8 <std>
 80131bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80131c0:	2202      	movs	r2, #2
 80131c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131c6:	2112      	movs	r1, #18
 80131c8:	f7ff bf86 	b.w	80130d8 <std>
 80131cc:	2400292c 	.word	0x2400292c
 80131d0:	240027f4 	.word	0x240027f4
 80131d4:	08013145 	.word	0x08013145

080131d8 <__sfp_lock_acquire>:
 80131d8:	4801      	ldr	r0, [pc, #4]	@ (80131e0 <__sfp_lock_acquire+0x8>)
 80131da:	f000 b92a 	b.w	8013432 <__retarget_lock_acquire_recursive>
 80131de:	bf00      	nop
 80131e0:	24002935 	.word	0x24002935

080131e4 <__sfp_lock_release>:
 80131e4:	4801      	ldr	r0, [pc, #4]	@ (80131ec <__sfp_lock_release+0x8>)
 80131e6:	f000 b925 	b.w	8013434 <__retarget_lock_release_recursive>
 80131ea:	bf00      	nop
 80131ec:	24002935 	.word	0x24002935

080131f0 <__sinit>:
 80131f0:	b510      	push	{r4, lr}
 80131f2:	4604      	mov	r4, r0
 80131f4:	f7ff fff0 	bl	80131d8 <__sfp_lock_acquire>
 80131f8:	6a23      	ldr	r3, [r4, #32]
 80131fa:	b11b      	cbz	r3, 8013204 <__sinit+0x14>
 80131fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013200:	f7ff bff0 	b.w	80131e4 <__sfp_lock_release>
 8013204:	4b04      	ldr	r3, [pc, #16]	@ (8013218 <__sinit+0x28>)
 8013206:	6223      	str	r3, [r4, #32]
 8013208:	4b04      	ldr	r3, [pc, #16]	@ (801321c <__sinit+0x2c>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d1f5      	bne.n	80131fc <__sinit+0xc>
 8013210:	f7ff ffc4 	bl	801319c <global_stdio_init.part.0>
 8013214:	e7f2      	b.n	80131fc <__sinit+0xc>
 8013216:	bf00      	nop
 8013218:	0801315d 	.word	0x0801315d
 801321c:	2400292c 	.word	0x2400292c

08013220 <_fwalk_sglue>:
 8013220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013224:	4607      	mov	r7, r0
 8013226:	4688      	mov	r8, r1
 8013228:	4614      	mov	r4, r2
 801322a:	2600      	movs	r6, #0
 801322c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013230:	f1b9 0901 	subs.w	r9, r9, #1
 8013234:	d505      	bpl.n	8013242 <_fwalk_sglue+0x22>
 8013236:	6824      	ldr	r4, [r4, #0]
 8013238:	2c00      	cmp	r4, #0
 801323a:	d1f7      	bne.n	801322c <_fwalk_sglue+0xc>
 801323c:	4630      	mov	r0, r6
 801323e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013242:	89ab      	ldrh	r3, [r5, #12]
 8013244:	2b01      	cmp	r3, #1
 8013246:	d907      	bls.n	8013258 <_fwalk_sglue+0x38>
 8013248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801324c:	3301      	adds	r3, #1
 801324e:	d003      	beq.n	8013258 <_fwalk_sglue+0x38>
 8013250:	4629      	mov	r1, r5
 8013252:	4638      	mov	r0, r7
 8013254:	47c0      	blx	r8
 8013256:	4306      	orrs	r6, r0
 8013258:	3568      	adds	r5, #104	@ 0x68
 801325a:	e7e9      	b.n	8013230 <_fwalk_sglue+0x10>

0801325c <siprintf>:
 801325c:	b40e      	push	{r1, r2, r3}
 801325e:	b500      	push	{lr}
 8013260:	b09c      	sub	sp, #112	@ 0x70
 8013262:	ab1d      	add	r3, sp, #116	@ 0x74
 8013264:	9002      	str	r0, [sp, #8]
 8013266:	9006      	str	r0, [sp, #24]
 8013268:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801326c:	4809      	ldr	r0, [pc, #36]	@ (8013294 <siprintf+0x38>)
 801326e:	9107      	str	r1, [sp, #28]
 8013270:	9104      	str	r1, [sp, #16]
 8013272:	4909      	ldr	r1, [pc, #36]	@ (8013298 <siprintf+0x3c>)
 8013274:	f853 2b04 	ldr.w	r2, [r3], #4
 8013278:	9105      	str	r1, [sp, #20]
 801327a:	6800      	ldr	r0, [r0, #0]
 801327c:	9301      	str	r3, [sp, #4]
 801327e:	a902      	add	r1, sp, #8
 8013280:	f001 fae0 	bl	8014844 <_svfiprintf_r>
 8013284:	9b02      	ldr	r3, [sp, #8]
 8013286:	2200      	movs	r2, #0
 8013288:	701a      	strb	r2, [r3, #0]
 801328a:	b01c      	add	sp, #112	@ 0x70
 801328c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013290:	b003      	add	sp, #12
 8013292:	4770      	bx	lr
 8013294:	24000114 	.word	0x24000114
 8013298:	ffff0208 	.word	0xffff0208

0801329c <__sread>:
 801329c:	b510      	push	{r4, lr}
 801329e:	460c      	mov	r4, r1
 80132a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132a4:	f000 f86c 	bl	8013380 <_read_r>
 80132a8:	2800      	cmp	r0, #0
 80132aa:	bfab      	itete	ge
 80132ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80132ae:	89a3      	ldrhlt	r3, [r4, #12]
 80132b0:	181b      	addge	r3, r3, r0
 80132b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80132b6:	bfac      	ite	ge
 80132b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80132ba:	81a3      	strhlt	r3, [r4, #12]
 80132bc:	bd10      	pop	{r4, pc}

080132be <__swrite>:
 80132be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132c2:	461f      	mov	r7, r3
 80132c4:	898b      	ldrh	r3, [r1, #12]
 80132c6:	05db      	lsls	r3, r3, #23
 80132c8:	4605      	mov	r5, r0
 80132ca:	460c      	mov	r4, r1
 80132cc:	4616      	mov	r6, r2
 80132ce:	d505      	bpl.n	80132dc <__swrite+0x1e>
 80132d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132d4:	2302      	movs	r3, #2
 80132d6:	2200      	movs	r2, #0
 80132d8:	f000 f840 	bl	801335c <_lseek_r>
 80132dc:	89a3      	ldrh	r3, [r4, #12]
 80132de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80132e6:	81a3      	strh	r3, [r4, #12]
 80132e8:	4632      	mov	r2, r6
 80132ea:	463b      	mov	r3, r7
 80132ec:	4628      	mov	r0, r5
 80132ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132f2:	f000 b867 	b.w	80133c4 <_write_r>

080132f6 <__sseek>:
 80132f6:	b510      	push	{r4, lr}
 80132f8:	460c      	mov	r4, r1
 80132fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132fe:	f000 f82d 	bl	801335c <_lseek_r>
 8013302:	1c43      	adds	r3, r0, #1
 8013304:	89a3      	ldrh	r3, [r4, #12]
 8013306:	bf15      	itete	ne
 8013308:	6560      	strne	r0, [r4, #84]	@ 0x54
 801330a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801330e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013312:	81a3      	strheq	r3, [r4, #12]
 8013314:	bf18      	it	ne
 8013316:	81a3      	strhne	r3, [r4, #12]
 8013318:	bd10      	pop	{r4, pc}

0801331a <__sclose>:
 801331a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801331e:	f000 b80d 	b.w	801333c <_close_r>

08013322 <memset>:
 8013322:	4402      	add	r2, r0
 8013324:	4603      	mov	r3, r0
 8013326:	4293      	cmp	r3, r2
 8013328:	d100      	bne.n	801332c <memset+0xa>
 801332a:	4770      	bx	lr
 801332c:	f803 1b01 	strb.w	r1, [r3], #1
 8013330:	e7f9      	b.n	8013326 <memset+0x4>
	...

08013334 <_localeconv_r>:
 8013334:	4800      	ldr	r0, [pc, #0]	@ (8013338 <_localeconv_r+0x4>)
 8013336:	4770      	bx	lr
 8013338:	24000254 	.word	0x24000254

0801333c <_close_r>:
 801333c:	b538      	push	{r3, r4, r5, lr}
 801333e:	4d06      	ldr	r5, [pc, #24]	@ (8013358 <_close_r+0x1c>)
 8013340:	2300      	movs	r3, #0
 8013342:	4604      	mov	r4, r0
 8013344:	4608      	mov	r0, r1
 8013346:	602b      	str	r3, [r5, #0]
 8013348:	f7fd fa44 	bl	80107d4 <_close>
 801334c:	1c43      	adds	r3, r0, #1
 801334e:	d102      	bne.n	8013356 <_close_r+0x1a>
 8013350:	682b      	ldr	r3, [r5, #0]
 8013352:	b103      	cbz	r3, 8013356 <_close_r+0x1a>
 8013354:	6023      	str	r3, [r4, #0]
 8013356:	bd38      	pop	{r3, r4, r5, pc}
 8013358:	24002930 	.word	0x24002930

0801335c <_lseek_r>:
 801335c:	b538      	push	{r3, r4, r5, lr}
 801335e:	4d07      	ldr	r5, [pc, #28]	@ (801337c <_lseek_r+0x20>)
 8013360:	4604      	mov	r4, r0
 8013362:	4608      	mov	r0, r1
 8013364:	4611      	mov	r1, r2
 8013366:	2200      	movs	r2, #0
 8013368:	602a      	str	r2, [r5, #0]
 801336a:	461a      	mov	r2, r3
 801336c:	f7fd fa39 	bl	80107e2 <_lseek>
 8013370:	1c43      	adds	r3, r0, #1
 8013372:	d102      	bne.n	801337a <_lseek_r+0x1e>
 8013374:	682b      	ldr	r3, [r5, #0]
 8013376:	b103      	cbz	r3, 801337a <_lseek_r+0x1e>
 8013378:	6023      	str	r3, [r4, #0]
 801337a:	bd38      	pop	{r3, r4, r5, pc}
 801337c:	24002930 	.word	0x24002930

08013380 <_read_r>:
 8013380:	b538      	push	{r3, r4, r5, lr}
 8013382:	4d07      	ldr	r5, [pc, #28]	@ (80133a0 <_read_r+0x20>)
 8013384:	4604      	mov	r4, r0
 8013386:	4608      	mov	r0, r1
 8013388:	4611      	mov	r1, r2
 801338a:	2200      	movs	r2, #0
 801338c:	602a      	str	r2, [r5, #0]
 801338e:	461a      	mov	r2, r3
 8013390:	f7fd fa2e 	bl	80107f0 <_read>
 8013394:	1c43      	adds	r3, r0, #1
 8013396:	d102      	bne.n	801339e <_read_r+0x1e>
 8013398:	682b      	ldr	r3, [r5, #0]
 801339a:	b103      	cbz	r3, 801339e <_read_r+0x1e>
 801339c:	6023      	str	r3, [r4, #0]
 801339e:	bd38      	pop	{r3, r4, r5, pc}
 80133a0:	24002930 	.word	0x24002930

080133a4 <_sbrk_r>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4d06      	ldr	r5, [pc, #24]	@ (80133c0 <_sbrk_r+0x1c>)
 80133a8:	2300      	movs	r3, #0
 80133aa:	4604      	mov	r4, r0
 80133ac:	4608      	mov	r0, r1
 80133ae:	602b      	str	r3, [r5, #0]
 80133b0:	f002 f88c 	bl	80154cc <_sbrk>
 80133b4:	1c43      	adds	r3, r0, #1
 80133b6:	d102      	bne.n	80133be <_sbrk_r+0x1a>
 80133b8:	682b      	ldr	r3, [r5, #0]
 80133ba:	b103      	cbz	r3, 80133be <_sbrk_r+0x1a>
 80133bc:	6023      	str	r3, [r4, #0]
 80133be:	bd38      	pop	{r3, r4, r5, pc}
 80133c0:	24002930 	.word	0x24002930

080133c4 <_write_r>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	4d07      	ldr	r5, [pc, #28]	@ (80133e4 <_write_r+0x20>)
 80133c8:	4604      	mov	r4, r0
 80133ca:	4608      	mov	r0, r1
 80133cc:	4611      	mov	r1, r2
 80133ce:	2200      	movs	r2, #0
 80133d0:	602a      	str	r2, [r5, #0]
 80133d2:	461a      	mov	r2, r3
 80133d4:	f7fd fa13 	bl	80107fe <_write>
 80133d8:	1c43      	adds	r3, r0, #1
 80133da:	d102      	bne.n	80133e2 <_write_r+0x1e>
 80133dc:	682b      	ldr	r3, [r5, #0]
 80133de:	b103      	cbz	r3, 80133e2 <_write_r+0x1e>
 80133e0:	6023      	str	r3, [r4, #0]
 80133e2:	bd38      	pop	{r3, r4, r5, pc}
 80133e4:	24002930 	.word	0x24002930

080133e8 <__libc_init_array>:
 80133e8:	b570      	push	{r4, r5, r6, lr}
 80133ea:	4d0d      	ldr	r5, [pc, #52]	@ (8013420 <__libc_init_array+0x38>)
 80133ec:	4c0d      	ldr	r4, [pc, #52]	@ (8013424 <__libc_init_array+0x3c>)
 80133ee:	1b64      	subs	r4, r4, r5
 80133f0:	10a4      	asrs	r4, r4, #2
 80133f2:	2600      	movs	r6, #0
 80133f4:	42a6      	cmp	r6, r4
 80133f6:	d109      	bne.n	801340c <__libc_init_array+0x24>
 80133f8:	4d0b      	ldr	r5, [pc, #44]	@ (8013428 <__libc_init_array+0x40>)
 80133fa:	4c0c      	ldr	r4, [pc, #48]	@ (801342c <__libc_init_array+0x44>)
 80133fc:	f002 f876 	bl	80154ec <_init>
 8013400:	1b64      	subs	r4, r4, r5
 8013402:	10a4      	asrs	r4, r4, #2
 8013404:	2600      	movs	r6, #0
 8013406:	42a6      	cmp	r6, r4
 8013408:	d105      	bne.n	8013416 <__libc_init_array+0x2e>
 801340a:	bd70      	pop	{r4, r5, r6, pc}
 801340c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013410:	4798      	blx	r3
 8013412:	3601      	adds	r6, #1
 8013414:	e7ee      	b.n	80133f4 <__libc_init_array+0xc>
 8013416:	f855 3b04 	ldr.w	r3, [r5], #4
 801341a:	4798      	blx	r3
 801341c:	3601      	adds	r6, #1
 801341e:	e7f2      	b.n	8013406 <__libc_init_array+0x1e>
 8013420:	08017990 	.word	0x08017990
 8013424:	08017990 	.word	0x08017990
 8013428:	08017990 	.word	0x08017990
 801342c:	08017994 	.word	0x08017994

08013430 <__retarget_lock_init_recursive>:
 8013430:	4770      	bx	lr

08013432 <__retarget_lock_acquire_recursive>:
 8013432:	4770      	bx	lr

08013434 <__retarget_lock_release_recursive>:
 8013434:	4770      	bx	lr

08013436 <quorem>:
 8013436:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801343a:	6903      	ldr	r3, [r0, #16]
 801343c:	690c      	ldr	r4, [r1, #16]
 801343e:	42a3      	cmp	r3, r4
 8013440:	4607      	mov	r7, r0
 8013442:	db7e      	blt.n	8013542 <quorem+0x10c>
 8013444:	3c01      	subs	r4, #1
 8013446:	f101 0814 	add.w	r8, r1, #20
 801344a:	00a3      	lsls	r3, r4, #2
 801344c:	f100 0514 	add.w	r5, r0, #20
 8013450:	9300      	str	r3, [sp, #0]
 8013452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013456:	9301      	str	r3, [sp, #4]
 8013458:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801345c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013460:	3301      	adds	r3, #1
 8013462:	429a      	cmp	r2, r3
 8013464:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013468:	fbb2 f6f3 	udiv	r6, r2, r3
 801346c:	d32e      	bcc.n	80134cc <quorem+0x96>
 801346e:	f04f 0a00 	mov.w	sl, #0
 8013472:	46c4      	mov	ip, r8
 8013474:	46ae      	mov	lr, r5
 8013476:	46d3      	mov	fp, sl
 8013478:	f85c 3b04 	ldr.w	r3, [ip], #4
 801347c:	b298      	uxth	r0, r3
 801347e:	fb06 a000 	mla	r0, r6, r0, sl
 8013482:	0c02      	lsrs	r2, r0, #16
 8013484:	0c1b      	lsrs	r3, r3, #16
 8013486:	fb06 2303 	mla	r3, r6, r3, r2
 801348a:	f8de 2000 	ldr.w	r2, [lr]
 801348e:	b280      	uxth	r0, r0
 8013490:	b292      	uxth	r2, r2
 8013492:	1a12      	subs	r2, r2, r0
 8013494:	445a      	add	r2, fp
 8013496:	f8de 0000 	ldr.w	r0, [lr]
 801349a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801349e:	b29b      	uxth	r3, r3
 80134a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80134a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80134a8:	b292      	uxth	r2, r2
 80134aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80134ae:	45e1      	cmp	r9, ip
 80134b0:	f84e 2b04 	str.w	r2, [lr], #4
 80134b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80134b8:	d2de      	bcs.n	8013478 <quorem+0x42>
 80134ba:	9b00      	ldr	r3, [sp, #0]
 80134bc:	58eb      	ldr	r3, [r5, r3]
 80134be:	b92b      	cbnz	r3, 80134cc <quorem+0x96>
 80134c0:	9b01      	ldr	r3, [sp, #4]
 80134c2:	3b04      	subs	r3, #4
 80134c4:	429d      	cmp	r5, r3
 80134c6:	461a      	mov	r2, r3
 80134c8:	d32f      	bcc.n	801352a <quorem+0xf4>
 80134ca:	613c      	str	r4, [r7, #16]
 80134cc:	4638      	mov	r0, r7
 80134ce:	f001 f855 	bl	801457c <__mcmp>
 80134d2:	2800      	cmp	r0, #0
 80134d4:	db25      	blt.n	8013522 <quorem+0xec>
 80134d6:	4629      	mov	r1, r5
 80134d8:	2000      	movs	r0, #0
 80134da:	f858 2b04 	ldr.w	r2, [r8], #4
 80134de:	f8d1 c000 	ldr.w	ip, [r1]
 80134e2:	fa1f fe82 	uxth.w	lr, r2
 80134e6:	fa1f f38c 	uxth.w	r3, ip
 80134ea:	eba3 030e 	sub.w	r3, r3, lr
 80134ee:	4403      	add	r3, r0
 80134f0:	0c12      	lsrs	r2, r2, #16
 80134f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80134f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013500:	45c1      	cmp	r9, r8
 8013502:	f841 3b04 	str.w	r3, [r1], #4
 8013506:	ea4f 4022 	mov.w	r0, r2, asr #16
 801350a:	d2e6      	bcs.n	80134da <quorem+0xa4>
 801350c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013510:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013514:	b922      	cbnz	r2, 8013520 <quorem+0xea>
 8013516:	3b04      	subs	r3, #4
 8013518:	429d      	cmp	r5, r3
 801351a:	461a      	mov	r2, r3
 801351c:	d30b      	bcc.n	8013536 <quorem+0x100>
 801351e:	613c      	str	r4, [r7, #16]
 8013520:	3601      	adds	r6, #1
 8013522:	4630      	mov	r0, r6
 8013524:	b003      	add	sp, #12
 8013526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801352a:	6812      	ldr	r2, [r2, #0]
 801352c:	3b04      	subs	r3, #4
 801352e:	2a00      	cmp	r2, #0
 8013530:	d1cb      	bne.n	80134ca <quorem+0x94>
 8013532:	3c01      	subs	r4, #1
 8013534:	e7c6      	b.n	80134c4 <quorem+0x8e>
 8013536:	6812      	ldr	r2, [r2, #0]
 8013538:	3b04      	subs	r3, #4
 801353a:	2a00      	cmp	r2, #0
 801353c:	d1ef      	bne.n	801351e <quorem+0xe8>
 801353e:	3c01      	subs	r4, #1
 8013540:	e7ea      	b.n	8013518 <quorem+0xe2>
 8013542:	2000      	movs	r0, #0
 8013544:	e7ee      	b.n	8013524 <quorem+0xee>
	...

08013548 <_dtoa_r>:
 8013548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801354c:	ed2d 8b02 	vpush	{d8}
 8013550:	69c7      	ldr	r7, [r0, #28]
 8013552:	b091      	sub	sp, #68	@ 0x44
 8013554:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013558:	ec55 4b10 	vmov	r4, r5, d0
 801355c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801355e:	9107      	str	r1, [sp, #28]
 8013560:	4681      	mov	r9, r0
 8013562:	9209      	str	r2, [sp, #36]	@ 0x24
 8013564:	930d      	str	r3, [sp, #52]	@ 0x34
 8013566:	b97f      	cbnz	r7, 8013588 <_dtoa_r+0x40>
 8013568:	2010      	movs	r0, #16
 801356a:	f7ff f8c9 	bl	8012700 <malloc>
 801356e:	4602      	mov	r2, r0
 8013570:	f8c9 001c 	str.w	r0, [r9, #28]
 8013574:	b920      	cbnz	r0, 8013580 <_dtoa_r+0x38>
 8013576:	4ba0      	ldr	r3, [pc, #640]	@ (80137f8 <_dtoa_r+0x2b0>)
 8013578:	21ef      	movs	r1, #239	@ 0xef
 801357a:	48a0      	ldr	r0, [pc, #640]	@ (80137fc <_dtoa_r+0x2b4>)
 801357c:	f001 fb32 	bl	8014be4 <__assert_func>
 8013580:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013584:	6007      	str	r7, [r0, #0]
 8013586:	60c7      	str	r7, [r0, #12]
 8013588:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801358c:	6819      	ldr	r1, [r3, #0]
 801358e:	b159      	cbz	r1, 80135a8 <_dtoa_r+0x60>
 8013590:	685a      	ldr	r2, [r3, #4]
 8013592:	604a      	str	r2, [r1, #4]
 8013594:	2301      	movs	r3, #1
 8013596:	4093      	lsls	r3, r2
 8013598:	608b      	str	r3, [r1, #8]
 801359a:	4648      	mov	r0, r9
 801359c:	f000 fdb4 	bl	8014108 <_Bfree>
 80135a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80135a4:	2200      	movs	r2, #0
 80135a6:	601a      	str	r2, [r3, #0]
 80135a8:	1e2b      	subs	r3, r5, #0
 80135aa:	bfbb      	ittet	lt
 80135ac:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80135b0:	9303      	strlt	r3, [sp, #12]
 80135b2:	2300      	movge	r3, #0
 80135b4:	2201      	movlt	r2, #1
 80135b6:	bfac      	ite	ge
 80135b8:	6033      	strge	r3, [r6, #0]
 80135ba:	6032      	strlt	r2, [r6, #0]
 80135bc:	4b90      	ldr	r3, [pc, #576]	@ (8013800 <_dtoa_r+0x2b8>)
 80135be:	9e03      	ldr	r6, [sp, #12]
 80135c0:	43b3      	bics	r3, r6
 80135c2:	d110      	bne.n	80135e6 <_dtoa_r+0x9e>
 80135c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80135c6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80135ca:	6013      	str	r3, [r2, #0]
 80135cc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80135d0:	4323      	orrs	r3, r4
 80135d2:	f000 84de 	beq.w	8013f92 <_dtoa_r+0xa4a>
 80135d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80135d8:	4f8a      	ldr	r7, [pc, #552]	@ (8013804 <_dtoa_r+0x2bc>)
 80135da:	2b00      	cmp	r3, #0
 80135dc:	f000 84e0 	beq.w	8013fa0 <_dtoa_r+0xa58>
 80135e0:	1cfb      	adds	r3, r7, #3
 80135e2:	f000 bcdb 	b.w	8013f9c <_dtoa_r+0xa54>
 80135e6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80135ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80135ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f2:	d10a      	bne.n	801360a <_dtoa_r+0xc2>
 80135f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80135f6:	2301      	movs	r3, #1
 80135f8:	6013      	str	r3, [r2, #0]
 80135fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80135fc:	b113      	cbz	r3, 8013604 <_dtoa_r+0xbc>
 80135fe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013600:	4b81      	ldr	r3, [pc, #516]	@ (8013808 <_dtoa_r+0x2c0>)
 8013602:	6013      	str	r3, [r2, #0]
 8013604:	4f81      	ldr	r7, [pc, #516]	@ (801380c <_dtoa_r+0x2c4>)
 8013606:	f000 bccb 	b.w	8013fa0 <_dtoa_r+0xa58>
 801360a:	aa0e      	add	r2, sp, #56	@ 0x38
 801360c:	a90f      	add	r1, sp, #60	@ 0x3c
 801360e:	4648      	mov	r0, r9
 8013610:	eeb0 0b48 	vmov.f64	d0, d8
 8013614:	f001 f862 	bl	80146dc <__d2b>
 8013618:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801361c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801361e:	9001      	str	r0, [sp, #4]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d045      	beq.n	80136b0 <_dtoa_r+0x168>
 8013624:	eeb0 7b48 	vmov.f64	d7, d8
 8013628:	ee18 1a90 	vmov	r1, s17
 801362c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013630:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8013634:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013638:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801363c:	2500      	movs	r5, #0
 801363e:	ee07 1a90 	vmov	s15, r1
 8013642:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8013646:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80137e0 <_dtoa_r+0x298>
 801364a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801364e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80137e8 <_dtoa_r+0x2a0>
 8013652:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013656:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80137f0 <_dtoa_r+0x2a8>
 801365a:	ee07 3a90 	vmov	s15, r3
 801365e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013662:	eeb0 7b46 	vmov.f64	d7, d6
 8013666:	eea4 7b05 	vfma.f64	d7, d4, d5
 801366a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801366e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013676:	ee16 8a90 	vmov	r8, s13
 801367a:	d508      	bpl.n	801368e <_dtoa_r+0x146>
 801367c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013680:	eeb4 6b47 	vcmp.f64	d6, d7
 8013684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013688:	bf18      	it	ne
 801368a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801368e:	f1b8 0f16 	cmp.w	r8, #22
 8013692:	d82b      	bhi.n	80136ec <_dtoa_r+0x1a4>
 8013694:	495e      	ldr	r1, [pc, #376]	@ (8013810 <_dtoa_r+0x2c8>)
 8013696:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801369a:	ed91 7b00 	vldr	d7, [r1]
 801369e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80136a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136a6:	d501      	bpl.n	80136ac <_dtoa_r+0x164>
 80136a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80136ac:	2100      	movs	r1, #0
 80136ae:	e01e      	b.n	80136ee <_dtoa_r+0x1a6>
 80136b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136b2:	4413      	add	r3, r2
 80136b4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80136b8:	2920      	cmp	r1, #32
 80136ba:	bfc1      	itttt	gt
 80136bc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80136c0:	408e      	lslgt	r6, r1
 80136c2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80136c6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80136ca:	bfd6      	itet	le
 80136cc:	f1c1 0120 	rsble	r1, r1, #32
 80136d0:	4331      	orrgt	r1, r6
 80136d2:	fa04 f101 	lslle.w	r1, r4, r1
 80136d6:	ee07 1a90 	vmov	s15, r1
 80136da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80136de:	3b01      	subs	r3, #1
 80136e0:	ee17 1a90 	vmov	r1, s15
 80136e4:	2501      	movs	r5, #1
 80136e6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80136ea:	e7a8      	b.n	801363e <_dtoa_r+0xf6>
 80136ec:	2101      	movs	r1, #1
 80136ee:	1ad2      	subs	r2, r2, r3
 80136f0:	1e53      	subs	r3, r2, #1
 80136f2:	9306      	str	r3, [sp, #24]
 80136f4:	bf45      	ittet	mi
 80136f6:	f1c2 0301 	rsbmi	r3, r2, #1
 80136fa:	9305      	strmi	r3, [sp, #20]
 80136fc:	2300      	movpl	r3, #0
 80136fe:	2300      	movmi	r3, #0
 8013700:	bf4c      	ite	mi
 8013702:	9306      	strmi	r3, [sp, #24]
 8013704:	9305      	strpl	r3, [sp, #20]
 8013706:	f1b8 0f00 	cmp.w	r8, #0
 801370a:	910c      	str	r1, [sp, #48]	@ 0x30
 801370c:	db18      	blt.n	8013740 <_dtoa_r+0x1f8>
 801370e:	9b06      	ldr	r3, [sp, #24]
 8013710:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8013714:	4443      	add	r3, r8
 8013716:	9306      	str	r3, [sp, #24]
 8013718:	2300      	movs	r3, #0
 801371a:	9a07      	ldr	r2, [sp, #28]
 801371c:	2a09      	cmp	r2, #9
 801371e:	d849      	bhi.n	80137b4 <_dtoa_r+0x26c>
 8013720:	2a05      	cmp	r2, #5
 8013722:	bfc4      	itt	gt
 8013724:	3a04      	subgt	r2, #4
 8013726:	9207      	strgt	r2, [sp, #28]
 8013728:	9a07      	ldr	r2, [sp, #28]
 801372a:	f1a2 0202 	sub.w	r2, r2, #2
 801372e:	bfcc      	ite	gt
 8013730:	2400      	movgt	r4, #0
 8013732:	2401      	movle	r4, #1
 8013734:	2a03      	cmp	r2, #3
 8013736:	d848      	bhi.n	80137ca <_dtoa_r+0x282>
 8013738:	e8df f002 	tbb	[pc, r2]
 801373c:	3a2c2e0b 	.word	0x3a2c2e0b
 8013740:	9b05      	ldr	r3, [sp, #20]
 8013742:	2200      	movs	r2, #0
 8013744:	eba3 0308 	sub.w	r3, r3, r8
 8013748:	9305      	str	r3, [sp, #20]
 801374a:	920a      	str	r2, [sp, #40]	@ 0x28
 801374c:	f1c8 0300 	rsb	r3, r8, #0
 8013750:	e7e3      	b.n	801371a <_dtoa_r+0x1d2>
 8013752:	2200      	movs	r2, #0
 8013754:	9208      	str	r2, [sp, #32]
 8013756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013758:	2a00      	cmp	r2, #0
 801375a:	dc39      	bgt.n	80137d0 <_dtoa_r+0x288>
 801375c:	f04f 0b01 	mov.w	fp, #1
 8013760:	46da      	mov	sl, fp
 8013762:	465a      	mov	r2, fp
 8013764:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013768:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801376c:	2100      	movs	r1, #0
 801376e:	2004      	movs	r0, #4
 8013770:	f100 0614 	add.w	r6, r0, #20
 8013774:	4296      	cmp	r6, r2
 8013776:	d930      	bls.n	80137da <_dtoa_r+0x292>
 8013778:	6079      	str	r1, [r7, #4]
 801377a:	4648      	mov	r0, r9
 801377c:	9304      	str	r3, [sp, #16]
 801377e:	f000 fc83 	bl	8014088 <_Balloc>
 8013782:	9b04      	ldr	r3, [sp, #16]
 8013784:	4607      	mov	r7, r0
 8013786:	2800      	cmp	r0, #0
 8013788:	d146      	bne.n	8013818 <_dtoa_r+0x2d0>
 801378a:	4b22      	ldr	r3, [pc, #136]	@ (8013814 <_dtoa_r+0x2cc>)
 801378c:	4602      	mov	r2, r0
 801378e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013792:	e6f2      	b.n	801357a <_dtoa_r+0x32>
 8013794:	2201      	movs	r2, #1
 8013796:	e7dd      	b.n	8013754 <_dtoa_r+0x20c>
 8013798:	2200      	movs	r2, #0
 801379a:	9208      	str	r2, [sp, #32]
 801379c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801379e:	eb08 0b02 	add.w	fp, r8, r2
 80137a2:	f10b 0a01 	add.w	sl, fp, #1
 80137a6:	4652      	mov	r2, sl
 80137a8:	2a01      	cmp	r2, #1
 80137aa:	bfb8      	it	lt
 80137ac:	2201      	movlt	r2, #1
 80137ae:	e7db      	b.n	8013768 <_dtoa_r+0x220>
 80137b0:	2201      	movs	r2, #1
 80137b2:	e7f2      	b.n	801379a <_dtoa_r+0x252>
 80137b4:	2401      	movs	r4, #1
 80137b6:	2200      	movs	r2, #0
 80137b8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80137bc:	f04f 3bff 	mov.w	fp, #4294967295
 80137c0:	2100      	movs	r1, #0
 80137c2:	46da      	mov	sl, fp
 80137c4:	2212      	movs	r2, #18
 80137c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80137c8:	e7ce      	b.n	8013768 <_dtoa_r+0x220>
 80137ca:	2201      	movs	r2, #1
 80137cc:	9208      	str	r2, [sp, #32]
 80137ce:	e7f5      	b.n	80137bc <_dtoa_r+0x274>
 80137d0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80137d4:	46da      	mov	sl, fp
 80137d6:	465a      	mov	r2, fp
 80137d8:	e7c6      	b.n	8013768 <_dtoa_r+0x220>
 80137da:	3101      	adds	r1, #1
 80137dc:	0040      	lsls	r0, r0, #1
 80137de:	e7c7      	b.n	8013770 <_dtoa_r+0x228>
 80137e0:	636f4361 	.word	0x636f4361
 80137e4:	3fd287a7 	.word	0x3fd287a7
 80137e8:	8b60c8b3 	.word	0x8b60c8b3
 80137ec:	3fc68a28 	.word	0x3fc68a28
 80137f0:	509f79fb 	.word	0x509f79fb
 80137f4:	3fd34413 	.word	0x3fd34413
 80137f8:	08017649 	.word	0x08017649
 80137fc:	08017660 	.word	0x08017660
 8013800:	7ff00000 	.word	0x7ff00000
 8013804:	08017645 	.word	0x08017645
 8013808:	08017619 	.word	0x08017619
 801380c:	08017618 	.word	0x08017618
 8013810:	08017758 	.word	0x08017758
 8013814:	080176b8 	.word	0x080176b8
 8013818:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801381c:	f1ba 0f0e 	cmp.w	sl, #14
 8013820:	6010      	str	r0, [r2, #0]
 8013822:	d86f      	bhi.n	8013904 <_dtoa_r+0x3bc>
 8013824:	2c00      	cmp	r4, #0
 8013826:	d06d      	beq.n	8013904 <_dtoa_r+0x3bc>
 8013828:	f1b8 0f00 	cmp.w	r8, #0
 801382c:	f340 80c2 	ble.w	80139b4 <_dtoa_r+0x46c>
 8013830:	4aca      	ldr	r2, [pc, #808]	@ (8013b5c <_dtoa_r+0x614>)
 8013832:	f008 010f 	and.w	r1, r8, #15
 8013836:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801383a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801383e:	ed92 7b00 	vldr	d7, [r2]
 8013842:	ea4f 1128 	mov.w	r1, r8, asr #4
 8013846:	f000 80a9 	beq.w	801399c <_dtoa_r+0x454>
 801384a:	4ac5      	ldr	r2, [pc, #788]	@ (8013b60 <_dtoa_r+0x618>)
 801384c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013850:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013854:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013858:	f001 010f 	and.w	r1, r1, #15
 801385c:	2203      	movs	r2, #3
 801385e:	48c0      	ldr	r0, [pc, #768]	@ (8013b60 <_dtoa_r+0x618>)
 8013860:	2900      	cmp	r1, #0
 8013862:	f040 809d 	bne.w	80139a0 <_dtoa_r+0x458>
 8013866:	ed9d 6b02 	vldr	d6, [sp, #8]
 801386a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801386e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013872:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013874:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013878:	2900      	cmp	r1, #0
 801387a:	f000 80c1 	beq.w	8013a00 <_dtoa_r+0x4b8>
 801387e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013882:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388a:	f140 80b9 	bpl.w	8013a00 <_dtoa_r+0x4b8>
 801388e:	f1ba 0f00 	cmp.w	sl, #0
 8013892:	f000 80b5 	beq.w	8013a00 <_dtoa_r+0x4b8>
 8013896:	f1bb 0f00 	cmp.w	fp, #0
 801389a:	dd31      	ble.n	8013900 <_dtoa_r+0x3b8>
 801389c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80138a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80138a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138a8:	f108 31ff 	add.w	r1, r8, #4294967295
 80138ac:	9104      	str	r1, [sp, #16]
 80138ae:	3201      	adds	r2, #1
 80138b0:	465c      	mov	r4, fp
 80138b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80138b6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80138ba:	ee07 2a90 	vmov	s15, r2
 80138be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80138c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80138c6:	ee15 2a90 	vmov	r2, s11
 80138ca:	ec51 0b15 	vmov	r0, r1, d5
 80138ce:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80138d2:	2c00      	cmp	r4, #0
 80138d4:	f040 8098 	bne.w	8013a08 <_dtoa_r+0x4c0>
 80138d8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80138dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80138e0:	ec41 0b17 	vmov	d7, r0, r1
 80138e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80138e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ec:	f300 8261 	bgt.w	8013db2 <_dtoa_r+0x86a>
 80138f0:	eeb1 7b47 	vneg.f64	d7, d7
 80138f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80138f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138fc:	f100 80f5 	bmi.w	8013aea <_dtoa_r+0x5a2>
 8013900:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013904:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013906:	2a00      	cmp	r2, #0
 8013908:	f2c0 812c 	blt.w	8013b64 <_dtoa_r+0x61c>
 801390c:	f1b8 0f0e 	cmp.w	r8, #14
 8013910:	f300 8128 	bgt.w	8013b64 <_dtoa_r+0x61c>
 8013914:	4b91      	ldr	r3, [pc, #580]	@ (8013b5c <_dtoa_r+0x614>)
 8013916:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801391a:	ed93 6b00 	vldr	d6, [r3]
 801391e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013920:	2b00      	cmp	r3, #0
 8013922:	da03      	bge.n	801392c <_dtoa_r+0x3e4>
 8013924:	f1ba 0f00 	cmp.w	sl, #0
 8013928:	f340 80d2 	ble.w	8013ad0 <_dtoa_r+0x588>
 801392c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013930:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013934:	463e      	mov	r6, r7
 8013936:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801393a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801393e:	ee15 3a10 	vmov	r3, s10
 8013942:	3330      	adds	r3, #48	@ 0x30
 8013944:	f806 3b01 	strb.w	r3, [r6], #1
 8013948:	1bf3      	subs	r3, r6, r7
 801394a:	459a      	cmp	sl, r3
 801394c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013950:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013954:	f040 80f8 	bne.w	8013b48 <_dtoa_r+0x600>
 8013958:	ee37 7b07 	vadd.f64	d7, d7, d7
 801395c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013964:	f300 80dd 	bgt.w	8013b22 <_dtoa_r+0x5da>
 8013968:	eeb4 7b46 	vcmp.f64	d7, d6
 801396c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013970:	d104      	bne.n	801397c <_dtoa_r+0x434>
 8013972:	ee15 3a10 	vmov	r3, s10
 8013976:	07db      	lsls	r3, r3, #31
 8013978:	f100 80d3 	bmi.w	8013b22 <_dtoa_r+0x5da>
 801397c:	9901      	ldr	r1, [sp, #4]
 801397e:	4648      	mov	r0, r9
 8013980:	f000 fbc2 	bl	8014108 <_Bfree>
 8013984:	2300      	movs	r3, #0
 8013986:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013988:	7033      	strb	r3, [r6, #0]
 801398a:	f108 0301 	add.w	r3, r8, #1
 801398e:	6013      	str	r3, [r2, #0]
 8013990:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013992:	2b00      	cmp	r3, #0
 8013994:	f000 8304 	beq.w	8013fa0 <_dtoa_r+0xa58>
 8013998:	601e      	str	r6, [r3, #0]
 801399a:	e301      	b.n	8013fa0 <_dtoa_r+0xa58>
 801399c:	2202      	movs	r2, #2
 801399e:	e75e      	b.n	801385e <_dtoa_r+0x316>
 80139a0:	07cc      	lsls	r4, r1, #31
 80139a2:	d504      	bpl.n	80139ae <_dtoa_r+0x466>
 80139a4:	ed90 6b00 	vldr	d6, [r0]
 80139a8:	3201      	adds	r2, #1
 80139aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139ae:	1049      	asrs	r1, r1, #1
 80139b0:	3008      	adds	r0, #8
 80139b2:	e755      	b.n	8013860 <_dtoa_r+0x318>
 80139b4:	d022      	beq.n	80139fc <_dtoa_r+0x4b4>
 80139b6:	f1c8 0100 	rsb	r1, r8, #0
 80139ba:	4a68      	ldr	r2, [pc, #416]	@ (8013b5c <_dtoa_r+0x614>)
 80139bc:	f001 000f 	and.w	r0, r1, #15
 80139c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80139c4:	ed92 7b00 	vldr	d7, [r2]
 80139c8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80139cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80139d0:	4863      	ldr	r0, [pc, #396]	@ (8013b60 <_dtoa_r+0x618>)
 80139d2:	1109      	asrs	r1, r1, #4
 80139d4:	2400      	movs	r4, #0
 80139d6:	2202      	movs	r2, #2
 80139d8:	b929      	cbnz	r1, 80139e6 <_dtoa_r+0x49e>
 80139da:	2c00      	cmp	r4, #0
 80139dc:	f43f af49 	beq.w	8013872 <_dtoa_r+0x32a>
 80139e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80139e4:	e745      	b.n	8013872 <_dtoa_r+0x32a>
 80139e6:	07ce      	lsls	r6, r1, #31
 80139e8:	d505      	bpl.n	80139f6 <_dtoa_r+0x4ae>
 80139ea:	ed90 6b00 	vldr	d6, [r0]
 80139ee:	3201      	adds	r2, #1
 80139f0:	2401      	movs	r4, #1
 80139f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139f6:	1049      	asrs	r1, r1, #1
 80139f8:	3008      	adds	r0, #8
 80139fa:	e7ed      	b.n	80139d8 <_dtoa_r+0x490>
 80139fc:	2202      	movs	r2, #2
 80139fe:	e738      	b.n	8013872 <_dtoa_r+0x32a>
 8013a00:	f8cd 8010 	str.w	r8, [sp, #16]
 8013a04:	4654      	mov	r4, sl
 8013a06:	e754      	b.n	80138b2 <_dtoa_r+0x36a>
 8013a08:	4a54      	ldr	r2, [pc, #336]	@ (8013b5c <_dtoa_r+0x614>)
 8013a0a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013a0e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013a12:	9a08      	ldr	r2, [sp, #32]
 8013a14:	ec41 0b17 	vmov	d7, r0, r1
 8013a18:	443c      	add	r4, r7
 8013a1a:	b34a      	cbz	r2, 8013a70 <_dtoa_r+0x528>
 8013a1c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013a20:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8013a24:	463e      	mov	r6, r7
 8013a26:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013a2a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013a2e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013a32:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013a36:	ee14 2a90 	vmov	r2, s9
 8013a3a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013a3e:	3230      	adds	r2, #48	@ 0x30
 8013a40:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013a44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a4c:	f806 2b01 	strb.w	r2, [r6], #1
 8013a50:	d438      	bmi.n	8013ac4 <_dtoa_r+0x57c>
 8013a52:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013a56:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a5e:	d462      	bmi.n	8013b26 <_dtoa_r+0x5de>
 8013a60:	42a6      	cmp	r6, r4
 8013a62:	f43f af4d 	beq.w	8013900 <_dtoa_r+0x3b8>
 8013a66:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013a6a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013a6e:	e7e0      	b.n	8013a32 <_dtoa_r+0x4ea>
 8013a70:	4621      	mov	r1, r4
 8013a72:	463e      	mov	r6, r7
 8013a74:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013a78:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013a7c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013a80:	ee14 2a90 	vmov	r2, s9
 8013a84:	3230      	adds	r2, #48	@ 0x30
 8013a86:	f806 2b01 	strb.w	r2, [r6], #1
 8013a8a:	42a6      	cmp	r6, r4
 8013a8c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013a90:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013a94:	d119      	bne.n	8013aca <_dtoa_r+0x582>
 8013a96:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013a9a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013a9e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa6:	dc3e      	bgt.n	8013b26 <_dtoa_r+0x5de>
 8013aa8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013aac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab4:	f57f af24 	bpl.w	8013900 <_dtoa_r+0x3b8>
 8013ab8:	460e      	mov	r6, r1
 8013aba:	3901      	subs	r1, #1
 8013abc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013ac0:	2b30      	cmp	r3, #48	@ 0x30
 8013ac2:	d0f9      	beq.n	8013ab8 <_dtoa_r+0x570>
 8013ac4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013ac8:	e758      	b.n	801397c <_dtoa_r+0x434>
 8013aca:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013ace:	e7d5      	b.n	8013a7c <_dtoa_r+0x534>
 8013ad0:	d10b      	bne.n	8013aea <_dtoa_r+0x5a2>
 8013ad2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013ad6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013ada:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ade:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ae6:	f2c0 8161 	blt.w	8013dac <_dtoa_r+0x864>
 8013aea:	2400      	movs	r4, #0
 8013aec:	4625      	mov	r5, r4
 8013aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013af0:	43db      	mvns	r3, r3
 8013af2:	9304      	str	r3, [sp, #16]
 8013af4:	463e      	mov	r6, r7
 8013af6:	f04f 0800 	mov.w	r8, #0
 8013afa:	4621      	mov	r1, r4
 8013afc:	4648      	mov	r0, r9
 8013afe:	f000 fb03 	bl	8014108 <_Bfree>
 8013b02:	2d00      	cmp	r5, #0
 8013b04:	d0de      	beq.n	8013ac4 <_dtoa_r+0x57c>
 8013b06:	f1b8 0f00 	cmp.w	r8, #0
 8013b0a:	d005      	beq.n	8013b18 <_dtoa_r+0x5d0>
 8013b0c:	45a8      	cmp	r8, r5
 8013b0e:	d003      	beq.n	8013b18 <_dtoa_r+0x5d0>
 8013b10:	4641      	mov	r1, r8
 8013b12:	4648      	mov	r0, r9
 8013b14:	f000 faf8 	bl	8014108 <_Bfree>
 8013b18:	4629      	mov	r1, r5
 8013b1a:	4648      	mov	r0, r9
 8013b1c:	f000 faf4 	bl	8014108 <_Bfree>
 8013b20:	e7d0      	b.n	8013ac4 <_dtoa_r+0x57c>
 8013b22:	f8cd 8010 	str.w	r8, [sp, #16]
 8013b26:	4633      	mov	r3, r6
 8013b28:	461e      	mov	r6, r3
 8013b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b2e:	2a39      	cmp	r2, #57	@ 0x39
 8013b30:	d106      	bne.n	8013b40 <_dtoa_r+0x5f8>
 8013b32:	429f      	cmp	r7, r3
 8013b34:	d1f8      	bne.n	8013b28 <_dtoa_r+0x5e0>
 8013b36:	9a04      	ldr	r2, [sp, #16]
 8013b38:	3201      	adds	r2, #1
 8013b3a:	9204      	str	r2, [sp, #16]
 8013b3c:	2230      	movs	r2, #48	@ 0x30
 8013b3e:	703a      	strb	r2, [r7, #0]
 8013b40:	781a      	ldrb	r2, [r3, #0]
 8013b42:	3201      	adds	r2, #1
 8013b44:	701a      	strb	r2, [r3, #0]
 8013b46:	e7bd      	b.n	8013ac4 <_dtoa_r+0x57c>
 8013b48:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013b4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b54:	f47f aeef 	bne.w	8013936 <_dtoa_r+0x3ee>
 8013b58:	e710      	b.n	801397c <_dtoa_r+0x434>
 8013b5a:	bf00      	nop
 8013b5c:	08017758 	.word	0x08017758
 8013b60:	08017730 	.word	0x08017730
 8013b64:	9908      	ldr	r1, [sp, #32]
 8013b66:	2900      	cmp	r1, #0
 8013b68:	f000 80e3 	beq.w	8013d32 <_dtoa_r+0x7ea>
 8013b6c:	9907      	ldr	r1, [sp, #28]
 8013b6e:	2901      	cmp	r1, #1
 8013b70:	f300 80c8 	bgt.w	8013d04 <_dtoa_r+0x7bc>
 8013b74:	2d00      	cmp	r5, #0
 8013b76:	f000 80c1 	beq.w	8013cfc <_dtoa_r+0x7b4>
 8013b7a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013b7e:	9e05      	ldr	r6, [sp, #20]
 8013b80:	461c      	mov	r4, r3
 8013b82:	9304      	str	r3, [sp, #16]
 8013b84:	9b05      	ldr	r3, [sp, #20]
 8013b86:	4413      	add	r3, r2
 8013b88:	9305      	str	r3, [sp, #20]
 8013b8a:	9b06      	ldr	r3, [sp, #24]
 8013b8c:	2101      	movs	r1, #1
 8013b8e:	4413      	add	r3, r2
 8013b90:	4648      	mov	r0, r9
 8013b92:	9306      	str	r3, [sp, #24]
 8013b94:	f000 fb6c 	bl	8014270 <__i2b>
 8013b98:	9b04      	ldr	r3, [sp, #16]
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	b166      	cbz	r6, 8013bb8 <_dtoa_r+0x670>
 8013b9e:	9a06      	ldr	r2, [sp, #24]
 8013ba0:	2a00      	cmp	r2, #0
 8013ba2:	dd09      	ble.n	8013bb8 <_dtoa_r+0x670>
 8013ba4:	42b2      	cmp	r2, r6
 8013ba6:	9905      	ldr	r1, [sp, #20]
 8013ba8:	bfa8      	it	ge
 8013baa:	4632      	movge	r2, r6
 8013bac:	1a89      	subs	r1, r1, r2
 8013bae:	9105      	str	r1, [sp, #20]
 8013bb0:	9906      	ldr	r1, [sp, #24]
 8013bb2:	1ab6      	subs	r6, r6, r2
 8013bb4:	1a8a      	subs	r2, r1, r2
 8013bb6:	9206      	str	r2, [sp, #24]
 8013bb8:	b1fb      	cbz	r3, 8013bfa <_dtoa_r+0x6b2>
 8013bba:	9a08      	ldr	r2, [sp, #32]
 8013bbc:	2a00      	cmp	r2, #0
 8013bbe:	f000 80bc 	beq.w	8013d3a <_dtoa_r+0x7f2>
 8013bc2:	b19c      	cbz	r4, 8013bec <_dtoa_r+0x6a4>
 8013bc4:	4629      	mov	r1, r5
 8013bc6:	4622      	mov	r2, r4
 8013bc8:	4648      	mov	r0, r9
 8013bca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013bcc:	f000 fc10 	bl	80143f0 <__pow5mult>
 8013bd0:	9a01      	ldr	r2, [sp, #4]
 8013bd2:	4601      	mov	r1, r0
 8013bd4:	4605      	mov	r5, r0
 8013bd6:	4648      	mov	r0, r9
 8013bd8:	f000 fb60 	bl	801429c <__multiply>
 8013bdc:	9901      	ldr	r1, [sp, #4]
 8013bde:	9004      	str	r0, [sp, #16]
 8013be0:	4648      	mov	r0, r9
 8013be2:	f000 fa91 	bl	8014108 <_Bfree>
 8013be6:	9a04      	ldr	r2, [sp, #16]
 8013be8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013bea:	9201      	str	r2, [sp, #4]
 8013bec:	1b1a      	subs	r2, r3, r4
 8013bee:	d004      	beq.n	8013bfa <_dtoa_r+0x6b2>
 8013bf0:	9901      	ldr	r1, [sp, #4]
 8013bf2:	4648      	mov	r0, r9
 8013bf4:	f000 fbfc 	bl	80143f0 <__pow5mult>
 8013bf8:	9001      	str	r0, [sp, #4]
 8013bfa:	2101      	movs	r1, #1
 8013bfc:	4648      	mov	r0, r9
 8013bfe:	f000 fb37 	bl	8014270 <__i2b>
 8013c02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c04:	4604      	mov	r4, r0
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	f000 81d0 	beq.w	8013fac <_dtoa_r+0xa64>
 8013c0c:	461a      	mov	r2, r3
 8013c0e:	4601      	mov	r1, r0
 8013c10:	4648      	mov	r0, r9
 8013c12:	f000 fbed 	bl	80143f0 <__pow5mult>
 8013c16:	9b07      	ldr	r3, [sp, #28]
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	f300 8095 	bgt.w	8013d4a <_dtoa_r+0x802>
 8013c20:	9b02      	ldr	r3, [sp, #8]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	f040 808b 	bne.w	8013d3e <_dtoa_r+0x7f6>
 8013c28:	9b03      	ldr	r3, [sp, #12]
 8013c2a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013c2e:	2a00      	cmp	r2, #0
 8013c30:	f040 8087 	bne.w	8013d42 <_dtoa_r+0x7fa>
 8013c34:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013c38:	0d12      	lsrs	r2, r2, #20
 8013c3a:	0512      	lsls	r2, r2, #20
 8013c3c:	2a00      	cmp	r2, #0
 8013c3e:	f000 8082 	beq.w	8013d46 <_dtoa_r+0x7fe>
 8013c42:	9b05      	ldr	r3, [sp, #20]
 8013c44:	3301      	adds	r3, #1
 8013c46:	9305      	str	r3, [sp, #20]
 8013c48:	9b06      	ldr	r3, [sp, #24]
 8013c4a:	3301      	adds	r3, #1
 8013c4c:	9306      	str	r3, [sp, #24]
 8013c4e:	2301      	movs	r3, #1
 8013c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013c52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	f000 81af 	beq.w	8013fb8 <_dtoa_r+0xa70>
 8013c5a:	6922      	ldr	r2, [r4, #16]
 8013c5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013c60:	6910      	ldr	r0, [r2, #16]
 8013c62:	f000 fab9 	bl	80141d8 <__hi0bits>
 8013c66:	f1c0 0020 	rsb	r0, r0, #32
 8013c6a:	9b06      	ldr	r3, [sp, #24]
 8013c6c:	4418      	add	r0, r3
 8013c6e:	f010 001f 	ands.w	r0, r0, #31
 8013c72:	d076      	beq.n	8013d62 <_dtoa_r+0x81a>
 8013c74:	f1c0 0220 	rsb	r2, r0, #32
 8013c78:	2a04      	cmp	r2, #4
 8013c7a:	dd69      	ble.n	8013d50 <_dtoa_r+0x808>
 8013c7c:	9b05      	ldr	r3, [sp, #20]
 8013c7e:	f1c0 001c 	rsb	r0, r0, #28
 8013c82:	4403      	add	r3, r0
 8013c84:	9305      	str	r3, [sp, #20]
 8013c86:	9b06      	ldr	r3, [sp, #24]
 8013c88:	4406      	add	r6, r0
 8013c8a:	4403      	add	r3, r0
 8013c8c:	9306      	str	r3, [sp, #24]
 8013c8e:	9b05      	ldr	r3, [sp, #20]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	dd05      	ble.n	8013ca0 <_dtoa_r+0x758>
 8013c94:	9901      	ldr	r1, [sp, #4]
 8013c96:	461a      	mov	r2, r3
 8013c98:	4648      	mov	r0, r9
 8013c9a:	f000 fc03 	bl	80144a4 <__lshift>
 8013c9e:	9001      	str	r0, [sp, #4]
 8013ca0:	9b06      	ldr	r3, [sp, #24]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	dd05      	ble.n	8013cb2 <_dtoa_r+0x76a>
 8013ca6:	4621      	mov	r1, r4
 8013ca8:	461a      	mov	r2, r3
 8013caa:	4648      	mov	r0, r9
 8013cac:	f000 fbfa 	bl	80144a4 <__lshift>
 8013cb0:	4604      	mov	r4, r0
 8013cb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d056      	beq.n	8013d66 <_dtoa_r+0x81e>
 8013cb8:	9801      	ldr	r0, [sp, #4]
 8013cba:	4621      	mov	r1, r4
 8013cbc:	f000 fc5e 	bl	801457c <__mcmp>
 8013cc0:	2800      	cmp	r0, #0
 8013cc2:	da50      	bge.n	8013d66 <_dtoa_r+0x81e>
 8013cc4:	f108 33ff 	add.w	r3, r8, #4294967295
 8013cc8:	9304      	str	r3, [sp, #16]
 8013cca:	9901      	ldr	r1, [sp, #4]
 8013ccc:	2300      	movs	r3, #0
 8013cce:	220a      	movs	r2, #10
 8013cd0:	4648      	mov	r0, r9
 8013cd2:	f000 fa3b 	bl	801414c <__multadd>
 8013cd6:	9b08      	ldr	r3, [sp, #32]
 8013cd8:	9001      	str	r0, [sp, #4]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f000 816e 	beq.w	8013fbc <_dtoa_r+0xa74>
 8013ce0:	4629      	mov	r1, r5
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	220a      	movs	r2, #10
 8013ce6:	4648      	mov	r0, r9
 8013ce8:	f000 fa30 	bl	801414c <__multadd>
 8013cec:	f1bb 0f00 	cmp.w	fp, #0
 8013cf0:	4605      	mov	r5, r0
 8013cf2:	dc64      	bgt.n	8013dbe <_dtoa_r+0x876>
 8013cf4:	9b07      	ldr	r3, [sp, #28]
 8013cf6:	2b02      	cmp	r3, #2
 8013cf8:	dc3e      	bgt.n	8013d78 <_dtoa_r+0x830>
 8013cfa:	e060      	b.n	8013dbe <_dtoa_r+0x876>
 8013cfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013cfe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013d02:	e73c      	b.n	8013b7e <_dtoa_r+0x636>
 8013d04:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013d08:	42a3      	cmp	r3, r4
 8013d0a:	bfbf      	itttt	lt
 8013d0c:	1ae2      	sublt	r2, r4, r3
 8013d0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013d10:	189b      	addlt	r3, r3, r2
 8013d12:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8013d14:	bfae      	itee	ge
 8013d16:	1b1c      	subge	r4, r3, r4
 8013d18:	4623      	movlt	r3, r4
 8013d1a:	2400      	movlt	r4, #0
 8013d1c:	f1ba 0f00 	cmp.w	sl, #0
 8013d20:	bfb5      	itete	lt
 8013d22:	9a05      	ldrlt	r2, [sp, #20]
 8013d24:	9e05      	ldrge	r6, [sp, #20]
 8013d26:	eba2 060a 	sublt.w	r6, r2, sl
 8013d2a:	4652      	movge	r2, sl
 8013d2c:	bfb8      	it	lt
 8013d2e:	2200      	movlt	r2, #0
 8013d30:	e727      	b.n	8013b82 <_dtoa_r+0x63a>
 8013d32:	9e05      	ldr	r6, [sp, #20]
 8013d34:	9d08      	ldr	r5, [sp, #32]
 8013d36:	461c      	mov	r4, r3
 8013d38:	e730      	b.n	8013b9c <_dtoa_r+0x654>
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	e758      	b.n	8013bf0 <_dtoa_r+0x6a8>
 8013d3e:	2300      	movs	r3, #0
 8013d40:	e786      	b.n	8013c50 <_dtoa_r+0x708>
 8013d42:	9b02      	ldr	r3, [sp, #8]
 8013d44:	e784      	b.n	8013c50 <_dtoa_r+0x708>
 8013d46:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013d48:	e783      	b.n	8013c52 <_dtoa_r+0x70a>
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013d4e:	e784      	b.n	8013c5a <_dtoa_r+0x712>
 8013d50:	d09d      	beq.n	8013c8e <_dtoa_r+0x746>
 8013d52:	9b05      	ldr	r3, [sp, #20]
 8013d54:	321c      	adds	r2, #28
 8013d56:	4413      	add	r3, r2
 8013d58:	9305      	str	r3, [sp, #20]
 8013d5a:	9b06      	ldr	r3, [sp, #24]
 8013d5c:	4416      	add	r6, r2
 8013d5e:	4413      	add	r3, r2
 8013d60:	e794      	b.n	8013c8c <_dtoa_r+0x744>
 8013d62:	4602      	mov	r2, r0
 8013d64:	e7f5      	b.n	8013d52 <_dtoa_r+0x80a>
 8013d66:	f1ba 0f00 	cmp.w	sl, #0
 8013d6a:	f8cd 8010 	str.w	r8, [sp, #16]
 8013d6e:	46d3      	mov	fp, sl
 8013d70:	dc21      	bgt.n	8013db6 <_dtoa_r+0x86e>
 8013d72:	9b07      	ldr	r3, [sp, #28]
 8013d74:	2b02      	cmp	r3, #2
 8013d76:	dd1e      	ble.n	8013db6 <_dtoa_r+0x86e>
 8013d78:	f1bb 0f00 	cmp.w	fp, #0
 8013d7c:	f47f aeb7 	bne.w	8013aee <_dtoa_r+0x5a6>
 8013d80:	4621      	mov	r1, r4
 8013d82:	465b      	mov	r3, fp
 8013d84:	2205      	movs	r2, #5
 8013d86:	4648      	mov	r0, r9
 8013d88:	f000 f9e0 	bl	801414c <__multadd>
 8013d8c:	4601      	mov	r1, r0
 8013d8e:	4604      	mov	r4, r0
 8013d90:	9801      	ldr	r0, [sp, #4]
 8013d92:	f000 fbf3 	bl	801457c <__mcmp>
 8013d96:	2800      	cmp	r0, #0
 8013d98:	f77f aea9 	ble.w	8013aee <_dtoa_r+0x5a6>
 8013d9c:	463e      	mov	r6, r7
 8013d9e:	2331      	movs	r3, #49	@ 0x31
 8013da0:	f806 3b01 	strb.w	r3, [r6], #1
 8013da4:	9b04      	ldr	r3, [sp, #16]
 8013da6:	3301      	adds	r3, #1
 8013da8:	9304      	str	r3, [sp, #16]
 8013daa:	e6a4      	b.n	8013af6 <_dtoa_r+0x5ae>
 8013dac:	f8cd 8010 	str.w	r8, [sp, #16]
 8013db0:	4654      	mov	r4, sl
 8013db2:	4625      	mov	r5, r4
 8013db4:	e7f2      	b.n	8013d9c <_dtoa_r+0x854>
 8013db6:	9b08      	ldr	r3, [sp, #32]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	f000 8103 	beq.w	8013fc4 <_dtoa_r+0xa7c>
 8013dbe:	2e00      	cmp	r6, #0
 8013dc0:	dd05      	ble.n	8013dce <_dtoa_r+0x886>
 8013dc2:	4629      	mov	r1, r5
 8013dc4:	4632      	mov	r2, r6
 8013dc6:	4648      	mov	r0, r9
 8013dc8:	f000 fb6c 	bl	80144a4 <__lshift>
 8013dcc:	4605      	mov	r5, r0
 8013dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d058      	beq.n	8013e86 <_dtoa_r+0x93e>
 8013dd4:	6869      	ldr	r1, [r5, #4]
 8013dd6:	4648      	mov	r0, r9
 8013dd8:	f000 f956 	bl	8014088 <_Balloc>
 8013ddc:	4606      	mov	r6, r0
 8013dde:	b928      	cbnz	r0, 8013dec <_dtoa_r+0x8a4>
 8013de0:	4b82      	ldr	r3, [pc, #520]	@ (8013fec <_dtoa_r+0xaa4>)
 8013de2:	4602      	mov	r2, r0
 8013de4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013de8:	f7ff bbc7 	b.w	801357a <_dtoa_r+0x32>
 8013dec:	692a      	ldr	r2, [r5, #16]
 8013dee:	3202      	adds	r2, #2
 8013df0:	0092      	lsls	r2, r2, #2
 8013df2:	f105 010c 	add.w	r1, r5, #12
 8013df6:	300c      	adds	r0, #12
 8013df8:	f000 fee6 	bl	8014bc8 <memcpy>
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	4631      	mov	r1, r6
 8013e00:	4648      	mov	r0, r9
 8013e02:	f000 fb4f 	bl	80144a4 <__lshift>
 8013e06:	1c7b      	adds	r3, r7, #1
 8013e08:	9305      	str	r3, [sp, #20]
 8013e0a:	eb07 030b 	add.w	r3, r7, fp
 8013e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e10:	9b02      	ldr	r3, [sp, #8]
 8013e12:	f003 0301 	and.w	r3, r3, #1
 8013e16:	46a8      	mov	r8, r5
 8013e18:	9308      	str	r3, [sp, #32]
 8013e1a:	4605      	mov	r5, r0
 8013e1c:	9b05      	ldr	r3, [sp, #20]
 8013e1e:	9801      	ldr	r0, [sp, #4]
 8013e20:	4621      	mov	r1, r4
 8013e22:	f103 3bff 	add.w	fp, r3, #4294967295
 8013e26:	f7ff fb06 	bl	8013436 <quorem>
 8013e2a:	4641      	mov	r1, r8
 8013e2c:	9002      	str	r0, [sp, #8]
 8013e2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013e32:	9801      	ldr	r0, [sp, #4]
 8013e34:	f000 fba2 	bl	801457c <__mcmp>
 8013e38:	462a      	mov	r2, r5
 8013e3a:	9006      	str	r0, [sp, #24]
 8013e3c:	4621      	mov	r1, r4
 8013e3e:	4648      	mov	r0, r9
 8013e40:	f000 fbb8 	bl	80145b4 <__mdiff>
 8013e44:	68c2      	ldr	r2, [r0, #12]
 8013e46:	4606      	mov	r6, r0
 8013e48:	b9fa      	cbnz	r2, 8013e8a <_dtoa_r+0x942>
 8013e4a:	4601      	mov	r1, r0
 8013e4c:	9801      	ldr	r0, [sp, #4]
 8013e4e:	f000 fb95 	bl	801457c <__mcmp>
 8013e52:	4602      	mov	r2, r0
 8013e54:	4631      	mov	r1, r6
 8013e56:	4648      	mov	r0, r9
 8013e58:	920a      	str	r2, [sp, #40]	@ 0x28
 8013e5a:	f000 f955 	bl	8014108 <_Bfree>
 8013e5e:	9b07      	ldr	r3, [sp, #28]
 8013e60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013e62:	9e05      	ldr	r6, [sp, #20]
 8013e64:	ea43 0102 	orr.w	r1, r3, r2
 8013e68:	9b08      	ldr	r3, [sp, #32]
 8013e6a:	4319      	orrs	r1, r3
 8013e6c:	d10f      	bne.n	8013e8e <_dtoa_r+0x946>
 8013e6e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013e72:	d028      	beq.n	8013ec6 <_dtoa_r+0x97e>
 8013e74:	9b06      	ldr	r3, [sp, #24]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	dd02      	ble.n	8013e80 <_dtoa_r+0x938>
 8013e7a:	9b02      	ldr	r3, [sp, #8]
 8013e7c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013e80:	f88b a000 	strb.w	sl, [fp]
 8013e84:	e639      	b.n	8013afa <_dtoa_r+0x5b2>
 8013e86:	4628      	mov	r0, r5
 8013e88:	e7bd      	b.n	8013e06 <_dtoa_r+0x8be>
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	e7e2      	b.n	8013e54 <_dtoa_r+0x90c>
 8013e8e:	9b06      	ldr	r3, [sp, #24]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	db04      	blt.n	8013e9e <_dtoa_r+0x956>
 8013e94:	9907      	ldr	r1, [sp, #28]
 8013e96:	430b      	orrs	r3, r1
 8013e98:	9908      	ldr	r1, [sp, #32]
 8013e9a:	430b      	orrs	r3, r1
 8013e9c:	d120      	bne.n	8013ee0 <_dtoa_r+0x998>
 8013e9e:	2a00      	cmp	r2, #0
 8013ea0:	ddee      	ble.n	8013e80 <_dtoa_r+0x938>
 8013ea2:	9901      	ldr	r1, [sp, #4]
 8013ea4:	2201      	movs	r2, #1
 8013ea6:	4648      	mov	r0, r9
 8013ea8:	f000 fafc 	bl	80144a4 <__lshift>
 8013eac:	4621      	mov	r1, r4
 8013eae:	9001      	str	r0, [sp, #4]
 8013eb0:	f000 fb64 	bl	801457c <__mcmp>
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	dc03      	bgt.n	8013ec0 <_dtoa_r+0x978>
 8013eb8:	d1e2      	bne.n	8013e80 <_dtoa_r+0x938>
 8013eba:	f01a 0f01 	tst.w	sl, #1
 8013ebe:	d0df      	beq.n	8013e80 <_dtoa_r+0x938>
 8013ec0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013ec4:	d1d9      	bne.n	8013e7a <_dtoa_r+0x932>
 8013ec6:	2339      	movs	r3, #57	@ 0x39
 8013ec8:	f88b 3000 	strb.w	r3, [fp]
 8013ecc:	4633      	mov	r3, r6
 8013ece:	461e      	mov	r6, r3
 8013ed0:	3b01      	subs	r3, #1
 8013ed2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013ed6:	2a39      	cmp	r2, #57	@ 0x39
 8013ed8:	d053      	beq.n	8013f82 <_dtoa_r+0xa3a>
 8013eda:	3201      	adds	r2, #1
 8013edc:	701a      	strb	r2, [r3, #0]
 8013ede:	e60c      	b.n	8013afa <_dtoa_r+0x5b2>
 8013ee0:	2a00      	cmp	r2, #0
 8013ee2:	dd07      	ble.n	8013ef4 <_dtoa_r+0x9ac>
 8013ee4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013ee8:	d0ed      	beq.n	8013ec6 <_dtoa_r+0x97e>
 8013eea:	f10a 0301 	add.w	r3, sl, #1
 8013eee:	f88b 3000 	strb.w	r3, [fp]
 8013ef2:	e602      	b.n	8013afa <_dtoa_r+0x5b2>
 8013ef4:	9b05      	ldr	r3, [sp, #20]
 8013ef6:	9a05      	ldr	r2, [sp, #20]
 8013ef8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013efe:	4293      	cmp	r3, r2
 8013f00:	d029      	beq.n	8013f56 <_dtoa_r+0xa0e>
 8013f02:	9901      	ldr	r1, [sp, #4]
 8013f04:	2300      	movs	r3, #0
 8013f06:	220a      	movs	r2, #10
 8013f08:	4648      	mov	r0, r9
 8013f0a:	f000 f91f 	bl	801414c <__multadd>
 8013f0e:	45a8      	cmp	r8, r5
 8013f10:	9001      	str	r0, [sp, #4]
 8013f12:	f04f 0300 	mov.w	r3, #0
 8013f16:	f04f 020a 	mov.w	r2, #10
 8013f1a:	4641      	mov	r1, r8
 8013f1c:	4648      	mov	r0, r9
 8013f1e:	d107      	bne.n	8013f30 <_dtoa_r+0x9e8>
 8013f20:	f000 f914 	bl	801414c <__multadd>
 8013f24:	4680      	mov	r8, r0
 8013f26:	4605      	mov	r5, r0
 8013f28:	9b05      	ldr	r3, [sp, #20]
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	9305      	str	r3, [sp, #20]
 8013f2e:	e775      	b.n	8013e1c <_dtoa_r+0x8d4>
 8013f30:	f000 f90c 	bl	801414c <__multadd>
 8013f34:	4629      	mov	r1, r5
 8013f36:	4680      	mov	r8, r0
 8013f38:	2300      	movs	r3, #0
 8013f3a:	220a      	movs	r2, #10
 8013f3c:	4648      	mov	r0, r9
 8013f3e:	f000 f905 	bl	801414c <__multadd>
 8013f42:	4605      	mov	r5, r0
 8013f44:	e7f0      	b.n	8013f28 <_dtoa_r+0x9e0>
 8013f46:	f1bb 0f00 	cmp.w	fp, #0
 8013f4a:	bfcc      	ite	gt
 8013f4c:	465e      	movgt	r6, fp
 8013f4e:	2601      	movle	r6, #1
 8013f50:	443e      	add	r6, r7
 8013f52:	f04f 0800 	mov.w	r8, #0
 8013f56:	9901      	ldr	r1, [sp, #4]
 8013f58:	2201      	movs	r2, #1
 8013f5a:	4648      	mov	r0, r9
 8013f5c:	f000 faa2 	bl	80144a4 <__lshift>
 8013f60:	4621      	mov	r1, r4
 8013f62:	9001      	str	r0, [sp, #4]
 8013f64:	f000 fb0a 	bl	801457c <__mcmp>
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	dcaf      	bgt.n	8013ecc <_dtoa_r+0x984>
 8013f6c:	d102      	bne.n	8013f74 <_dtoa_r+0xa2c>
 8013f6e:	f01a 0f01 	tst.w	sl, #1
 8013f72:	d1ab      	bne.n	8013ecc <_dtoa_r+0x984>
 8013f74:	4633      	mov	r3, r6
 8013f76:	461e      	mov	r6, r3
 8013f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f7c:	2a30      	cmp	r2, #48	@ 0x30
 8013f7e:	d0fa      	beq.n	8013f76 <_dtoa_r+0xa2e>
 8013f80:	e5bb      	b.n	8013afa <_dtoa_r+0x5b2>
 8013f82:	429f      	cmp	r7, r3
 8013f84:	d1a3      	bne.n	8013ece <_dtoa_r+0x986>
 8013f86:	9b04      	ldr	r3, [sp, #16]
 8013f88:	3301      	adds	r3, #1
 8013f8a:	9304      	str	r3, [sp, #16]
 8013f8c:	2331      	movs	r3, #49	@ 0x31
 8013f8e:	703b      	strb	r3, [r7, #0]
 8013f90:	e5b3      	b.n	8013afa <_dtoa_r+0x5b2>
 8013f92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013f94:	4f16      	ldr	r7, [pc, #88]	@ (8013ff0 <_dtoa_r+0xaa8>)
 8013f96:	b11b      	cbz	r3, 8013fa0 <_dtoa_r+0xa58>
 8013f98:	f107 0308 	add.w	r3, r7, #8
 8013f9c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013f9e:	6013      	str	r3, [r2, #0]
 8013fa0:	4638      	mov	r0, r7
 8013fa2:	b011      	add	sp, #68	@ 0x44
 8013fa4:	ecbd 8b02 	vpop	{d8}
 8013fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fac:	9b07      	ldr	r3, [sp, #28]
 8013fae:	2b01      	cmp	r3, #1
 8013fb0:	f77f ae36 	ble.w	8013c20 <_dtoa_r+0x6d8>
 8013fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013fb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013fb8:	2001      	movs	r0, #1
 8013fba:	e656      	b.n	8013c6a <_dtoa_r+0x722>
 8013fbc:	f1bb 0f00 	cmp.w	fp, #0
 8013fc0:	f77f aed7 	ble.w	8013d72 <_dtoa_r+0x82a>
 8013fc4:	463e      	mov	r6, r7
 8013fc6:	9801      	ldr	r0, [sp, #4]
 8013fc8:	4621      	mov	r1, r4
 8013fca:	f7ff fa34 	bl	8013436 <quorem>
 8013fce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013fd2:	f806 ab01 	strb.w	sl, [r6], #1
 8013fd6:	1bf2      	subs	r2, r6, r7
 8013fd8:	4593      	cmp	fp, r2
 8013fda:	ddb4      	ble.n	8013f46 <_dtoa_r+0x9fe>
 8013fdc:	9901      	ldr	r1, [sp, #4]
 8013fde:	2300      	movs	r3, #0
 8013fe0:	220a      	movs	r2, #10
 8013fe2:	4648      	mov	r0, r9
 8013fe4:	f000 f8b2 	bl	801414c <__multadd>
 8013fe8:	9001      	str	r0, [sp, #4]
 8013fea:	e7ec      	b.n	8013fc6 <_dtoa_r+0xa7e>
 8013fec:	080176b8 	.word	0x080176b8
 8013ff0:	0801763c 	.word	0x0801763c

08013ff4 <_free_r>:
 8013ff4:	b538      	push	{r3, r4, r5, lr}
 8013ff6:	4605      	mov	r5, r0
 8013ff8:	2900      	cmp	r1, #0
 8013ffa:	d041      	beq.n	8014080 <_free_r+0x8c>
 8013ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014000:	1f0c      	subs	r4, r1, #4
 8014002:	2b00      	cmp	r3, #0
 8014004:	bfb8      	it	lt
 8014006:	18e4      	addlt	r4, r4, r3
 8014008:	f7fe fc24 	bl	8012854 <__malloc_lock>
 801400c:	4a1d      	ldr	r2, [pc, #116]	@ (8014084 <_free_r+0x90>)
 801400e:	6813      	ldr	r3, [r2, #0]
 8014010:	b933      	cbnz	r3, 8014020 <_free_r+0x2c>
 8014012:	6063      	str	r3, [r4, #4]
 8014014:	6014      	str	r4, [r2, #0]
 8014016:	4628      	mov	r0, r5
 8014018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801401c:	f7fe bc20 	b.w	8012860 <__malloc_unlock>
 8014020:	42a3      	cmp	r3, r4
 8014022:	d908      	bls.n	8014036 <_free_r+0x42>
 8014024:	6820      	ldr	r0, [r4, #0]
 8014026:	1821      	adds	r1, r4, r0
 8014028:	428b      	cmp	r3, r1
 801402a:	bf01      	itttt	eq
 801402c:	6819      	ldreq	r1, [r3, #0]
 801402e:	685b      	ldreq	r3, [r3, #4]
 8014030:	1809      	addeq	r1, r1, r0
 8014032:	6021      	streq	r1, [r4, #0]
 8014034:	e7ed      	b.n	8014012 <_free_r+0x1e>
 8014036:	461a      	mov	r2, r3
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	b10b      	cbz	r3, 8014040 <_free_r+0x4c>
 801403c:	42a3      	cmp	r3, r4
 801403e:	d9fa      	bls.n	8014036 <_free_r+0x42>
 8014040:	6811      	ldr	r1, [r2, #0]
 8014042:	1850      	adds	r0, r2, r1
 8014044:	42a0      	cmp	r0, r4
 8014046:	d10b      	bne.n	8014060 <_free_r+0x6c>
 8014048:	6820      	ldr	r0, [r4, #0]
 801404a:	4401      	add	r1, r0
 801404c:	1850      	adds	r0, r2, r1
 801404e:	4283      	cmp	r3, r0
 8014050:	6011      	str	r1, [r2, #0]
 8014052:	d1e0      	bne.n	8014016 <_free_r+0x22>
 8014054:	6818      	ldr	r0, [r3, #0]
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	6053      	str	r3, [r2, #4]
 801405a:	4408      	add	r0, r1
 801405c:	6010      	str	r0, [r2, #0]
 801405e:	e7da      	b.n	8014016 <_free_r+0x22>
 8014060:	d902      	bls.n	8014068 <_free_r+0x74>
 8014062:	230c      	movs	r3, #12
 8014064:	602b      	str	r3, [r5, #0]
 8014066:	e7d6      	b.n	8014016 <_free_r+0x22>
 8014068:	6820      	ldr	r0, [r4, #0]
 801406a:	1821      	adds	r1, r4, r0
 801406c:	428b      	cmp	r3, r1
 801406e:	bf04      	itt	eq
 8014070:	6819      	ldreq	r1, [r3, #0]
 8014072:	685b      	ldreq	r3, [r3, #4]
 8014074:	6063      	str	r3, [r4, #4]
 8014076:	bf04      	itt	eq
 8014078:	1809      	addeq	r1, r1, r0
 801407a:	6021      	streq	r1, [r4, #0]
 801407c:	6054      	str	r4, [r2, #4]
 801407e:	e7ca      	b.n	8014016 <_free_r+0x22>
 8014080:	bd38      	pop	{r3, r4, r5, pc}
 8014082:	bf00      	nop
 8014084:	240027f0 	.word	0x240027f0

08014088 <_Balloc>:
 8014088:	b570      	push	{r4, r5, r6, lr}
 801408a:	69c6      	ldr	r6, [r0, #28]
 801408c:	4604      	mov	r4, r0
 801408e:	460d      	mov	r5, r1
 8014090:	b976      	cbnz	r6, 80140b0 <_Balloc+0x28>
 8014092:	2010      	movs	r0, #16
 8014094:	f7fe fb34 	bl	8012700 <malloc>
 8014098:	4602      	mov	r2, r0
 801409a:	61e0      	str	r0, [r4, #28]
 801409c:	b920      	cbnz	r0, 80140a8 <_Balloc+0x20>
 801409e:	4b18      	ldr	r3, [pc, #96]	@ (8014100 <_Balloc+0x78>)
 80140a0:	4818      	ldr	r0, [pc, #96]	@ (8014104 <_Balloc+0x7c>)
 80140a2:	216b      	movs	r1, #107	@ 0x6b
 80140a4:	f000 fd9e 	bl	8014be4 <__assert_func>
 80140a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80140ac:	6006      	str	r6, [r0, #0]
 80140ae:	60c6      	str	r6, [r0, #12]
 80140b0:	69e6      	ldr	r6, [r4, #28]
 80140b2:	68f3      	ldr	r3, [r6, #12]
 80140b4:	b183      	cbz	r3, 80140d8 <_Balloc+0x50>
 80140b6:	69e3      	ldr	r3, [r4, #28]
 80140b8:	68db      	ldr	r3, [r3, #12]
 80140ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80140be:	b9b8      	cbnz	r0, 80140f0 <_Balloc+0x68>
 80140c0:	2101      	movs	r1, #1
 80140c2:	fa01 f605 	lsl.w	r6, r1, r5
 80140c6:	1d72      	adds	r2, r6, #5
 80140c8:	0092      	lsls	r2, r2, #2
 80140ca:	4620      	mov	r0, r4
 80140cc:	f000 fda8 	bl	8014c20 <_calloc_r>
 80140d0:	b160      	cbz	r0, 80140ec <_Balloc+0x64>
 80140d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80140d6:	e00e      	b.n	80140f6 <_Balloc+0x6e>
 80140d8:	2221      	movs	r2, #33	@ 0x21
 80140da:	2104      	movs	r1, #4
 80140dc:	4620      	mov	r0, r4
 80140de:	f000 fd9f 	bl	8014c20 <_calloc_r>
 80140e2:	69e3      	ldr	r3, [r4, #28]
 80140e4:	60f0      	str	r0, [r6, #12]
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d1e4      	bne.n	80140b6 <_Balloc+0x2e>
 80140ec:	2000      	movs	r0, #0
 80140ee:	bd70      	pop	{r4, r5, r6, pc}
 80140f0:	6802      	ldr	r2, [r0, #0]
 80140f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140f6:	2300      	movs	r3, #0
 80140f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80140fc:	e7f7      	b.n	80140ee <_Balloc+0x66>
 80140fe:	bf00      	nop
 8014100:	08017649 	.word	0x08017649
 8014104:	080176c9 	.word	0x080176c9

08014108 <_Bfree>:
 8014108:	b570      	push	{r4, r5, r6, lr}
 801410a:	69c6      	ldr	r6, [r0, #28]
 801410c:	4605      	mov	r5, r0
 801410e:	460c      	mov	r4, r1
 8014110:	b976      	cbnz	r6, 8014130 <_Bfree+0x28>
 8014112:	2010      	movs	r0, #16
 8014114:	f7fe faf4 	bl	8012700 <malloc>
 8014118:	4602      	mov	r2, r0
 801411a:	61e8      	str	r0, [r5, #28]
 801411c:	b920      	cbnz	r0, 8014128 <_Bfree+0x20>
 801411e:	4b09      	ldr	r3, [pc, #36]	@ (8014144 <_Bfree+0x3c>)
 8014120:	4809      	ldr	r0, [pc, #36]	@ (8014148 <_Bfree+0x40>)
 8014122:	218f      	movs	r1, #143	@ 0x8f
 8014124:	f000 fd5e 	bl	8014be4 <__assert_func>
 8014128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801412c:	6006      	str	r6, [r0, #0]
 801412e:	60c6      	str	r6, [r0, #12]
 8014130:	b13c      	cbz	r4, 8014142 <_Bfree+0x3a>
 8014132:	69eb      	ldr	r3, [r5, #28]
 8014134:	6862      	ldr	r2, [r4, #4]
 8014136:	68db      	ldr	r3, [r3, #12]
 8014138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801413c:	6021      	str	r1, [r4, #0]
 801413e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014142:	bd70      	pop	{r4, r5, r6, pc}
 8014144:	08017649 	.word	0x08017649
 8014148:	080176c9 	.word	0x080176c9

0801414c <__multadd>:
 801414c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014150:	690d      	ldr	r5, [r1, #16]
 8014152:	4607      	mov	r7, r0
 8014154:	460c      	mov	r4, r1
 8014156:	461e      	mov	r6, r3
 8014158:	f101 0c14 	add.w	ip, r1, #20
 801415c:	2000      	movs	r0, #0
 801415e:	f8dc 3000 	ldr.w	r3, [ip]
 8014162:	b299      	uxth	r1, r3
 8014164:	fb02 6101 	mla	r1, r2, r1, r6
 8014168:	0c1e      	lsrs	r6, r3, #16
 801416a:	0c0b      	lsrs	r3, r1, #16
 801416c:	fb02 3306 	mla	r3, r2, r6, r3
 8014170:	b289      	uxth	r1, r1
 8014172:	3001      	adds	r0, #1
 8014174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014178:	4285      	cmp	r5, r0
 801417a:	f84c 1b04 	str.w	r1, [ip], #4
 801417e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014182:	dcec      	bgt.n	801415e <__multadd+0x12>
 8014184:	b30e      	cbz	r6, 80141ca <__multadd+0x7e>
 8014186:	68a3      	ldr	r3, [r4, #8]
 8014188:	42ab      	cmp	r3, r5
 801418a:	dc19      	bgt.n	80141c0 <__multadd+0x74>
 801418c:	6861      	ldr	r1, [r4, #4]
 801418e:	4638      	mov	r0, r7
 8014190:	3101      	adds	r1, #1
 8014192:	f7ff ff79 	bl	8014088 <_Balloc>
 8014196:	4680      	mov	r8, r0
 8014198:	b928      	cbnz	r0, 80141a6 <__multadd+0x5a>
 801419a:	4602      	mov	r2, r0
 801419c:	4b0c      	ldr	r3, [pc, #48]	@ (80141d0 <__multadd+0x84>)
 801419e:	480d      	ldr	r0, [pc, #52]	@ (80141d4 <__multadd+0x88>)
 80141a0:	21ba      	movs	r1, #186	@ 0xba
 80141a2:	f000 fd1f 	bl	8014be4 <__assert_func>
 80141a6:	6922      	ldr	r2, [r4, #16]
 80141a8:	3202      	adds	r2, #2
 80141aa:	f104 010c 	add.w	r1, r4, #12
 80141ae:	0092      	lsls	r2, r2, #2
 80141b0:	300c      	adds	r0, #12
 80141b2:	f000 fd09 	bl	8014bc8 <memcpy>
 80141b6:	4621      	mov	r1, r4
 80141b8:	4638      	mov	r0, r7
 80141ba:	f7ff ffa5 	bl	8014108 <_Bfree>
 80141be:	4644      	mov	r4, r8
 80141c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80141c4:	3501      	adds	r5, #1
 80141c6:	615e      	str	r6, [r3, #20]
 80141c8:	6125      	str	r5, [r4, #16]
 80141ca:	4620      	mov	r0, r4
 80141cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d0:	080176b8 	.word	0x080176b8
 80141d4:	080176c9 	.word	0x080176c9

080141d8 <__hi0bits>:
 80141d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80141dc:	4603      	mov	r3, r0
 80141de:	bf36      	itet	cc
 80141e0:	0403      	lslcc	r3, r0, #16
 80141e2:	2000      	movcs	r0, #0
 80141e4:	2010      	movcc	r0, #16
 80141e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80141ea:	bf3c      	itt	cc
 80141ec:	021b      	lslcc	r3, r3, #8
 80141ee:	3008      	addcc	r0, #8
 80141f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80141f4:	bf3c      	itt	cc
 80141f6:	011b      	lslcc	r3, r3, #4
 80141f8:	3004      	addcc	r0, #4
 80141fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80141fe:	bf3c      	itt	cc
 8014200:	009b      	lslcc	r3, r3, #2
 8014202:	3002      	addcc	r0, #2
 8014204:	2b00      	cmp	r3, #0
 8014206:	db05      	blt.n	8014214 <__hi0bits+0x3c>
 8014208:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801420c:	f100 0001 	add.w	r0, r0, #1
 8014210:	bf08      	it	eq
 8014212:	2020      	moveq	r0, #32
 8014214:	4770      	bx	lr

08014216 <__lo0bits>:
 8014216:	6803      	ldr	r3, [r0, #0]
 8014218:	4602      	mov	r2, r0
 801421a:	f013 0007 	ands.w	r0, r3, #7
 801421e:	d00b      	beq.n	8014238 <__lo0bits+0x22>
 8014220:	07d9      	lsls	r1, r3, #31
 8014222:	d421      	bmi.n	8014268 <__lo0bits+0x52>
 8014224:	0798      	lsls	r0, r3, #30
 8014226:	bf49      	itett	mi
 8014228:	085b      	lsrmi	r3, r3, #1
 801422a:	089b      	lsrpl	r3, r3, #2
 801422c:	2001      	movmi	r0, #1
 801422e:	6013      	strmi	r3, [r2, #0]
 8014230:	bf5c      	itt	pl
 8014232:	6013      	strpl	r3, [r2, #0]
 8014234:	2002      	movpl	r0, #2
 8014236:	4770      	bx	lr
 8014238:	b299      	uxth	r1, r3
 801423a:	b909      	cbnz	r1, 8014240 <__lo0bits+0x2a>
 801423c:	0c1b      	lsrs	r3, r3, #16
 801423e:	2010      	movs	r0, #16
 8014240:	b2d9      	uxtb	r1, r3
 8014242:	b909      	cbnz	r1, 8014248 <__lo0bits+0x32>
 8014244:	3008      	adds	r0, #8
 8014246:	0a1b      	lsrs	r3, r3, #8
 8014248:	0719      	lsls	r1, r3, #28
 801424a:	bf04      	itt	eq
 801424c:	091b      	lsreq	r3, r3, #4
 801424e:	3004      	addeq	r0, #4
 8014250:	0799      	lsls	r1, r3, #30
 8014252:	bf04      	itt	eq
 8014254:	089b      	lsreq	r3, r3, #2
 8014256:	3002      	addeq	r0, #2
 8014258:	07d9      	lsls	r1, r3, #31
 801425a:	d403      	bmi.n	8014264 <__lo0bits+0x4e>
 801425c:	085b      	lsrs	r3, r3, #1
 801425e:	f100 0001 	add.w	r0, r0, #1
 8014262:	d003      	beq.n	801426c <__lo0bits+0x56>
 8014264:	6013      	str	r3, [r2, #0]
 8014266:	4770      	bx	lr
 8014268:	2000      	movs	r0, #0
 801426a:	4770      	bx	lr
 801426c:	2020      	movs	r0, #32
 801426e:	4770      	bx	lr

08014270 <__i2b>:
 8014270:	b510      	push	{r4, lr}
 8014272:	460c      	mov	r4, r1
 8014274:	2101      	movs	r1, #1
 8014276:	f7ff ff07 	bl	8014088 <_Balloc>
 801427a:	4602      	mov	r2, r0
 801427c:	b928      	cbnz	r0, 801428a <__i2b+0x1a>
 801427e:	4b05      	ldr	r3, [pc, #20]	@ (8014294 <__i2b+0x24>)
 8014280:	4805      	ldr	r0, [pc, #20]	@ (8014298 <__i2b+0x28>)
 8014282:	f240 1145 	movw	r1, #325	@ 0x145
 8014286:	f000 fcad 	bl	8014be4 <__assert_func>
 801428a:	2301      	movs	r3, #1
 801428c:	6144      	str	r4, [r0, #20]
 801428e:	6103      	str	r3, [r0, #16]
 8014290:	bd10      	pop	{r4, pc}
 8014292:	bf00      	nop
 8014294:	080176b8 	.word	0x080176b8
 8014298:	080176c9 	.word	0x080176c9

0801429c <__multiply>:
 801429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a0:	4614      	mov	r4, r2
 80142a2:	690a      	ldr	r2, [r1, #16]
 80142a4:	6923      	ldr	r3, [r4, #16]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	bfa8      	it	ge
 80142aa:	4623      	movge	r3, r4
 80142ac:	460f      	mov	r7, r1
 80142ae:	bfa4      	itt	ge
 80142b0:	460c      	movge	r4, r1
 80142b2:	461f      	movge	r7, r3
 80142b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80142b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80142bc:	68a3      	ldr	r3, [r4, #8]
 80142be:	6861      	ldr	r1, [r4, #4]
 80142c0:	eb0a 0609 	add.w	r6, sl, r9
 80142c4:	42b3      	cmp	r3, r6
 80142c6:	b085      	sub	sp, #20
 80142c8:	bfb8      	it	lt
 80142ca:	3101      	addlt	r1, #1
 80142cc:	f7ff fedc 	bl	8014088 <_Balloc>
 80142d0:	b930      	cbnz	r0, 80142e0 <__multiply+0x44>
 80142d2:	4602      	mov	r2, r0
 80142d4:	4b44      	ldr	r3, [pc, #272]	@ (80143e8 <__multiply+0x14c>)
 80142d6:	4845      	ldr	r0, [pc, #276]	@ (80143ec <__multiply+0x150>)
 80142d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80142dc:	f000 fc82 	bl	8014be4 <__assert_func>
 80142e0:	f100 0514 	add.w	r5, r0, #20
 80142e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80142e8:	462b      	mov	r3, r5
 80142ea:	2200      	movs	r2, #0
 80142ec:	4543      	cmp	r3, r8
 80142ee:	d321      	bcc.n	8014334 <__multiply+0x98>
 80142f0:	f107 0114 	add.w	r1, r7, #20
 80142f4:	f104 0214 	add.w	r2, r4, #20
 80142f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80142fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014300:	9302      	str	r3, [sp, #8]
 8014302:	1b13      	subs	r3, r2, r4
 8014304:	3b15      	subs	r3, #21
 8014306:	f023 0303 	bic.w	r3, r3, #3
 801430a:	3304      	adds	r3, #4
 801430c:	f104 0715 	add.w	r7, r4, #21
 8014310:	42ba      	cmp	r2, r7
 8014312:	bf38      	it	cc
 8014314:	2304      	movcc	r3, #4
 8014316:	9301      	str	r3, [sp, #4]
 8014318:	9b02      	ldr	r3, [sp, #8]
 801431a:	9103      	str	r1, [sp, #12]
 801431c:	428b      	cmp	r3, r1
 801431e:	d80c      	bhi.n	801433a <__multiply+0x9e>
 8014320:	2e00      	cmp	r6, #0
 8014322:	dd03      	ble.n	801432c <__multiply+0x90>
 8014324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014328:	2b00      	cmp	r3, #0
 801432a:	d05b      	beq.n	80143e4 <__multiply+0x148>
 801432c:	6106      	str	r6, [r0, #16]
 801432e:	b005      	add	sp, #20
 8014330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014334:	f843 2b04 	str.w	r2, [r3], #4
 8014338:	e7d8      	b.n	80142ec <__multiply+0x50>
 801433a:	f8b1 a000 	ldrh.w	sl, [r1]
 801433e:	f1ba 0f00 	cmp.w	sl, #0
 8014342:	d024      	beq.n	801438e <__multiply+0xf2>
 8014344:	f104 0e14 	add.w	lr, r4, #20
 8014348:	46a9      	mov	r9, r5
 801434a:	f04f 0c00 	mov.w	ip, #0
 801434e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014352:	f8d9 3000 	ldr.w	r3, [r9]
 8014356:	fa1f fb87 	uxth.w	fp, r7
 801435a:	b29b      	uxth	r3, r3
 801435c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014360:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014364:	f8d9 7000 	ldr.w	r7, [r9]
 8014368:	4463      	add	r3, ip
 801436a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801436e:	fb0a c70b 	mla	r7, sl, fp, ip
 8014372:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014376:	b29b      	uxth	r3, r3
 8014378:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801437c:	4572      	cmp	r2, lr
 801437e:	f849 3b04 	str.w	r3, [r9], #4
 8014382:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014386:	d8e2      	bhi.n	801434e <__multiply+0xb2>
 8014388:	9b01      	ldr	r3, [sp, #4]
 801438a:	f845 c003 	str.w	ip, [r5, r3]
 801438e:	9b03      	ldr	r3, [sp, #12]
 8014390:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014394:	3104      	adds	r1, #4
 8014396:	f1b9 0f00 	cmp.w	r9, #0
 801439a:	d021      	beq.n	80143e0 <__multiply+0x144>
 801439c:	682b      	ldr	r3, [r5, #0]
 801439e:	f104 0c14 	add.w	ip, r4, #20
 80143a2:	46ae      	mov	lr, r5
 80143a4:	f04f 0a00 	mov.w	sl, #0
 80143a8:	f8bc b000 	ldrh.w	fp, [ip]
 80143ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80143b0:	fb09 770b 	mla	r7, r9, fp, r7
 80143b4:	4457      	add	r7, sl
 80143b6:	b29b      	uxth	r3, r3
 80143b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80143bc:	f84e 3b04 	str.w	r3, [lr], #4
 80143c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80143c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80143c8:	f8be 3000 	ldrh.w	r3, [lr]
 80143cc:	fb09 330a 	mla	r3, r9, sl, r3
 80143d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80143d4:	4562      	cmp	r2, ip
 80143d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80143da:	d8e5      	bhi.n	80143a8 <__multiply+0x10c>
 80143dc:	9f01      	ldr	r7, [sp, #4]
 80143de:	51eb      	str	r3, [r5, r7]
 80143e0:	3504      	adds	r5, #4
 80143e2:	e799      	b.n	8014318 <__multiply+0x7c>
 80143e4:	3e01      	subs	r6, #1
 80143e6:	e79b      	b.n	8014320 <__multiply+0x84>
 80143e8:	080176b8 	.word	0x080176b8
 80143ec:	080176c9 	.word	0x080176c9

080143f0 <__pow5mult>:
 80143f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143f4:	4615      	mov	r5, r2
 80143f6:	f012 0203 	ands.w	r2, r2, #3
 80143fa:	4607      	mov	r7, r0
 80143fc:	460e      	mov	r6, r1
 80143fe:	d007      	beq.n	8014410 <__pow5mult+0x20>
 8014400:	4c25      	ldr	r4, [pc, #148]	@ (8014498 <__pow5mult+0xa8>)
 8014402:	3a01      	subs	r2, #1
 8014404:	2300      	movs	r3, #0
 8014406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801440a:	f7ff fe9f 	bl	801414c <__multadd>
 801440e:	4606      	mov	r6, r0
 8014410:	10ad      	asrs	r5, r5, #2
 8014412:	d03d      	beq.n	8014490 <__pow5mult+0xa0>
 8014414:	69fc      	ldr	r4, [r7, #28]
 8014416:	b97c      	cbnz	r4, 8014438 <__pow5mult+0x48>
 8014418:	2010      	movs	r0, #16
 801441a:	f7fe f971 	bl	8012700 <malloc>
 801441e:	4602      	mov	r2, r0
 8014420:	61f8      	str	r0, [r7, #28]
 8014422:	b928      	cbnz	r0, 8014430 <__pow5mult+0x40>
 8014424:	4b1d      	ldr	r3, [pc, #116]	@ (801449c <__pow5mult+0xac>)
 8014426:	481e      	ldr	r0, [pc, #120]	@ (80144a0 <__pow5mult+0xb0>)
 8014428:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801442c:	f000 fbda 	bl	8014be4 <__assert_func>
 8014430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014434:	6004      	str	r4, [r0, #0]
 8014436:	60c4      	str	r4, [r0, #12]
 8014438:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801443c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014440:	b94c      	cbnz	r4, 8014456 <__pow5mult+0x66>
 8014442:	f240 2171 	movw	r1, #625	@ 0x271
 8014446:	4638      	mov	r0, r7
 8014448:	f7ff ff12 	bl	8014270 <__i2b>
 801444c:	2300      	movs	r3, #0
 801444e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014452:	4604      	mov	r4, r0
 8014454:	6003      	str	r3, [r0, #0]
 8014456:	f04f 0900 	mov.w	r9, #0
 801445a:	07eb      	lsls	r3, r5, #31
 801445c:	d50a      	bpl.n	8014474 <__pow5mult+0x84>
 801445e:	4631      	mov	r1, r6
 8014460:	4622      	mov	r2, r4
 8014462:	4638      	mov	r0, r7
 8014464:	f7ff ff1a 	bl	801429c <__multiply>
 8014468:	4631      	mov	r1, r6
 801446a:	4680      	mov	r8, r0
 801446c:	4638      	mov	r0, r7
 801446e:	f7ff fe4b 	bl	8014108 <_Bfree>
 8014472:	4646      	mov	r6, r8
 8014474:	106d      	asrs	r5, r5, #1
 8014476:	d00b      	beq.n	8014490 <__pow5mult+0xa0>
 8014478:	6820      	ldr	r0, [r4, #0]
 801447a:	b938      	cbnz	r0, 801448c <__pow5mult+0x9c>
 801447c:	4622      	mov	r2, r4
 801447e:	4621      	mov	r1, r4
 8014480:	4638      	mov	r0, r7
 8014482:	f7ff ff0b 	bl	801429c <__multiply>
 8014486:	6020      	str	r0, [r4, #0]
 8014488:	f8c0 9000 	str.w	r9, [r0]
 801448c:	4604      	mov	r4, r0
 801448e:	e7e4      	b.n	801445a <__pow5mult+0x6a>
 8014490:	4630      	mov	r0, r6
 8014492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014496:	bf00      	nop
 8014498:	08017724 	.word	0x08017724
 801449c:	08017649 	.word	0x08017649
 80144a0:	080176c9 	.word	0x080176c9

080144a4 <__lshift>:
 80144a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a8:	460c      	mov	r4, r1
 80144aa:	6849      	ldr	r1, [r1, #4]
 80144ac:	6923      	ldr	r3, [r4, #16]
 80144ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80144b2:	68a3      	ldr	r3, [r4, #8]
 80144b4:	4607      	mov	r7, r0
 80144b6:	4691      	mov	r9, r2
 80144b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80144bc:	f108 0601 	add.w	r6, r8, #1
 80144c0:	42b3      	cmp	r3, r6
 80144c2:	db0b      	blt.n	80144dc <__lshift+0x38>
 80144c4:	4638      	mov	r0, r7
 80144c6:	f7ff fddf 	bl	8014088 <_Balloc>
 80144ca:	4605      	mov	r5, r0
 80144cc:	b948      	cbnz	r0, 80144e2 <__lshift+0x3e>
 80144ce:	4602      	mov	r2, r0
 80144d0:	4b28      	ldr	r3, [pc, #160]	@ (8014574 <__lshift+0xd0>)
 80144d2:	4829      	ldr	r0, [pc, #164]	@ (8014578 <__lshift+0xd4>)
 80144d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80144d8:	f000 fb84 	bl	8014be4 <__assert_func>
 80144dc:	3101      	adds	r1, #1
 80144de:	005b      	lsls	r3, r3, #1
 80144e0:	e7ee      	b.n	80144c0 <__lshift+0x1c>
 80144e2:	2300      	movs	r3, #0
 80144e4:	f100 0114 	add.w	r1, r0, #20
 80144e8:	f100 0210 	add.w	r2, r0, #16
 80144ec:	4618      	mov	r0, r3
 80144ee:	4553      	cmp	r3, sl
 80144f0:	db33      	blt.n	801455a <__lshift+0xb6>
 80144f2:	6920      	ldr	r0, [r4, #16]
 80144f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80144f8:	f104 0314 	add.w	r3, r4, #20
 80144fc:	f019 091f 	ands.w	r9, r9, #31
 8014500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014508:	d02b      	beq.n	8014562 <__lshift+0xbe>
 801450a:	f1c9 0e20 	rsb	lr, r9, #32
 801450e:	468a      	mov	sl, r1
 8014510:	2200      	movs	r2, #0
 8014512:	6818      	ldr	r0, [r3, #0]
 8014514:	fa00 f009 	lsl.w	r0, r0, r9
 8014518:	4310      	orrs	r0, r2
 801451a:	f84a 0b04 	str.w	r0, [sl], #4
 801451e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014522:	459c      	cmp	ip, r3
 8014524:	fa22 f20e 	lsr.w	r2, r2, lr
 8014528:	d8f3      	bhi.n	8014512 <__lshift+0x6e>
 801452a:	ebac 0304 	sub.w	r3, ip, r4
 801452e:	3b15      	subs	r3, #21
 8014530:	f023 0303 	bic.w	r3, r3, #3
 8014534:	3304      	adds	r3, #4
 8014536:	f104 0015 	add.w	r0, r4, #21
 801453a:	4584      	cmp	ip, r0
 801453c:	bf38      	it	cc
 801453e:	2304      	movcc	r3, #4
 8014540:	50ca      	str	r2, [r1, r3]
 8014542:	b10a      	cbz	r2, 8014548 <__lshift+0xa4>
 8014544:	f108 0602 	add.w	r6, r8, #2
 8014548:	3e01      	subs	r6, #1
 801454a:	4638      	mov	r0, r7
 801454c:	612e      	str	r6, [r5, #16]
 801454e:	4621      	mov	r1, r4
 8014550:	f7ff fdda 	bl	8014108 <_Bfree>
 8014554:	4628      	mov	r0, r5
 8014556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801455a:	f842 0f04 	str.w	r0, [r2, #4]!
 801455e:	3301      	adds	r3, #1
 8014560:	e7c5      	b.n	80144ee <__lshift+0x4a>
 8014562:	3904      	subs	r1, #4
 8014564:	f853 2b04 	ldr.w	r2, [r3], #4
 8014568:	f841 2f04 	str.w	r2, [r1, #4]!
 801456c:	459c      	cmp	ip, r3
 801456e:	d8f9      	bhi.n	8014564 <__lshift+0xc0>
 8014570:	e7ea      	b.n	8014548 <__lshift+0xa4>
 8014572:	bf00      	nop
 8014574:	080176b8 	.word	0x080176b8
 8014578:	080176c9 	.word	0x080176c9

0801457c <__mcmp>:
 801457c:	690a      	ldr	r2, [r1, #16]
 801457e:	4603      	mov	r3, r0
 8014580:	6900      	ldr	r0, [r0, #16]
 8014582:	1a80      	subs	r0, r0, r2
 8014584:	b530      	push	{r4, r5, lr}
 8014586:	d10e      	bne.n	80145a6 <__mcmp+0x2a>
 8014588:	3314      	adds	r3, #20
 801458a:	3114      	adds	r1, #20
 801458c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014590:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801459c:	4295      	cmp	r5, r2
 801459e:	d003      	beq.n	80145a8 <__mcmp+0x2c>
 80145a0:	d205      	bcs.n	80145ae <__mcmp+0x32>
 80145a2:	f04f 30ff 	mov.w	r0, #4294967295
 80145a6:	bd30      	pop	{r4, r5, pc}
 80145a8:	42a3      	cmp	r3, r4
 80145aa:	d3f3      	bcc.n	8014594 <__mcmp+0x18>
 80145ac:	e7fb      	b.n	80145a6 <__mcmp+0x2a>
 80145ae:	2001      	movs	r0, #1
 80145b0:	e7f9      	b.n	80145a6 <__mcmp+0x2a>
	...

080145b4 <__mdiff>:
 80145b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145b8:	4689      	mov	r9, r1
 80145ba:	4606      	mov	r6, r0
 80145bc:	4611      	mov	r1, r2
 80145be:	4648      	mov	r0, r9
 80145c0:	4614      	mov	r4, r2
 80145c2:	f7ff ffdb 	bl	801457c <__mcmp>
 80145c6:	1e05      	subs	r5, r0, #0
 80145c8:	d112      	bne.n	80145f0 <__mdiff+0x3c>
 80145ca:	4629      	mov	r1, r5
 80145cc:	4630      	mov	r0, r6
 80145ce:	f7ff fd5b 	bl	8014088 <_Balloc>
 80145d2:	4602      	mov	r2, r0
 80145d4:	b928      	cbnz	r0, 80145e2 <__mdiff+0x2e>
 80145d6:	4b3f      	ldr	r3, [pc, #252]	@ (80146d4 <__mdiff+0x120>)
 80145d8:	f240 2137 	movw	r1, #567	@ 0x237
 80145dc:	483e      	ldr	r0, [pc, #248]	@ (80146d8 <__mdiff+0x124>)
 80145de:	f000 fb01 	bl	8014be4 <__assert_func>
 80145e2:	2301      	movs	r3, #1
 80145e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80145e8:	4610      	mov	r0, r2
 80145ea:	b003      	add	sp, #12
 80145ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145f0:	bfbc      	itt	lt
 80145f2:	464b      	movlt	r3, r9
 80145f4:	46a1      	movlt	r9, r4
 80145f6:	4630      	mov	r0, r6
 80145f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80145fc:	bfba      	itte	lt
 80145fe:	461c      	movlt	r4, r3
 8014600:	2501      	movlt	r5, #1
 8014602:	2500      	movge	r5, #0
 8014604:	f7ff fd40 	bl	8014088 <_Balloc>
 8014608:	4602      	mov	r2, r0
 801460a:	b918      	cbnz	r0, 8014614 <__mdiff+0x60>
 801460c:	4b31      	ldr	r3, [pc, #196]	@ (80146d4 <__mdiff+0x120>)
 801460e:	f240 2145 	movw	r1, #581	@ 0x245
 8014612:	e7e3      	b.n	80145dc <__mdiff+0x28>
 8014614:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014618:	6926      	ldr	r6, [r4, #16]
 801461a:	60c5      	str	r5, [r0, #12]
 801461c:	f109 0310 	add.w	r3, r9, #16
 8014620:	f109 0514 	add.w	r5, r9, #20
 8014624:	f104 0e14 	add.w	lr, r4, #20
 8014628:	f100 0b14 	add.w	fp, r0, #20
 801462c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014630:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014634:	9301      	str	r3, [sp, #4]
 8014636:	46d9      	mov	r9, fp
 8014638:	f04f 0c00 	mov.w	ip, #0
 801463c:	9b01      	ldr	r3, [sp, #4]
 801463e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014642:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014646:	9301      	str	r3, [sp, #4]
 8014648:	fa1f f38a 	uxth.w	r3, sl
 801464c:	4619      	mov	r1, r3
 801464e:	b283      	uxth	r3, r0
 8014650:	1acb      	subs	r3, r1, r3
 8014652:	0c00      	lsrs	r0, r0, #16
 8014654:	4463      	add	r3, ip
 8014656:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801465a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801465e:	b29b      	uxth	r3, r3
 8014660:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014664:	4576      	cmp	r6, lr
 8014666:	f849 3b04 	str.w	r3, [r9], #4
 801466a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801466e:	d8e5      	bhi.n	801463c <__mdiff+0x88>
 8014670:	1b33      	subs	r3, r6, r4
 8014672:	3b15      	subs	r3, #21
 8014674:	f023 0303 	bic.w	r3, r3, #3
 8014678:	3415      	adds	r4, #21
 801467a:	3304      	adds	r3, #4
 801467c:	42a6      	cmp	r6, r4
 801467e:	bf38      	it	cc
 8014680:	2304      	movcc	r3, #4
 8014682:	441d      	add	r5, r3
 8014684:	445b      	add	r3, fp
 8014686:	461e      	mov	r6, r3
 8014688:	462c      	mov	r4, r5
 801468a:	4544      	cmp	r4, r8
 801468c:	d30e      	bcc.n	80146ac <__mdiff+0xf8>
 801468e:	f108 0103 	add.w	r1, r8, #3
 8014692:	1b49      	subs	r1, r1, r5
 8014694:	f021 0103 	bic.w	r1, r1, #3
 8014698:	3d03      	subs	r5, #3
 801469a:	45a8      	cmp	r8, r5
 801469c:	bf38      	it	cc
 801469e:	2100      	movcc	r1, #0
 80146a0:	440b      	add	r3, r1
 80146a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80146a6:	b191      	cbz	r1, 80146ce <__mdiff+0x11a>
 80146a8:	6117      	str	r7, [r2, #16]
 80146aa:	e79d      	b.n	80145e8 <__mdiff+0x34>
 80146ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80146b0:	46e6      	mov	lr, ip
 80146b2:	0c08      	lsrs	r0, r1, #16
 80146b4:	fa1c fc81 	uxtah	ip, ip, r1
 80146b8:	4471      	add	r1, lr
 80146ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80146be:	b289      	uxth	r1, r1
 80146c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80146c4:	f846 1b04 	str.w	r1, [r6], #4
 80146c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80146cc:	e7dd      	b.n	801468a <__mdiff+0xd6>
 80146ce:	3f01      	subs	r7, #1
 80146d0:	e7e7      	b.n	80146a2 <__mdiff+0xee>
 80146d2:	bf00      	nop
 80146d4:	080176b8 	.word	0x080176b8
 80146d8:	080176c9 	.word	0x080176c9

080146dc <__d2b>:
 80146dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80146e0:	460f      	mov	r7, r1
 80146e2:	2101      	movs	r1, #1
 80146e4:	ec59 8b10 	vmov	r8, r9, d0
 80146e8:	4616      	mov	r6, r2
 80146ea:	f7ff fccd 	bl	8014088 <_Balloc>
 80146ee:	4604      	mov	r4, r0
 80146f0:	b930      	cbnz	r0, 8014700 <__d2b+0x24>
 80146f2:	4602      	mov	r2, r0
 80146f4:	4b23      	ldr	r3, [pc, #140]	@ (8014784 <__d2b+0xa8>)
 80146f6:	4824      	ldr	r0, [pc, #144]	@ (8014788 <__d2b+0xac>)
 80146f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80146fc:	f000 fa72 	bl	8014be4 <__assert_func>
 8014700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014708:	b10d      	cbz	r5, 801470e <__d2b+0x32>
 801470a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801470e:	9301      	str	r3, [sp, #4]
 8014710:	f1b8 0300 	subs.w	r3, r8, #0
 8014714:	d023      	beq.n	801475e <__d2b+0x82>
 8014716:	4668      	mov	r0, sp
 8014718:	9300      	str	r3, [sp, #0]
 801471a:	f7ff fd7c 	bl	8014216 <__lo0bits>
 801471e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014722:	b1d0      	cbz	r0, 801475a <__d2b+0x7e>
 8014724:	f1c0 0320 	rsb	r3, r0, #32
 8014728:	fa02 f303 	lsl.w	r3, r2, r3
 801472c:	430b      	orrs	r3, r1
 801472e:	40c2      	lsrs	r2, r0
 8014730:	6163      	str	r3, [r4, #20]
 8014732:	9201      	str	r2, [sp, #4]
 8014734:	9b01      	ldr	r3, [sp, #4]
 8014736:	61a3      	str	r3, [r4, #24]
 8014738:	2b00      	cmp	r3, #0
 801473a:	bf0c      	ite	eq
 801473c:	2201      	moveq	r2, #1
 801473e:	2202      	movne	r2, #2
 8014740:	6122      	str	r2, [r4, #16]
 8014742:	b1a5      	cbz	r5, 801476e <__d2b+0x92>
 8014744:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014748:	4405      	add	r5, r0
 801474a:	603d      	str	r5, [r7, #0]
 801474c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014750:	6030      	str	r0, [r6, #0]
 8014752:	4620      	mov	r0, r4
 8014754:	b003      	add	sp, #12
 8014756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801475a:	6161      	str	r1, [r4, #20]
 801475c:	e7ea      	b.n	8014734 <__d2b+0x58>
 801475e:	a801      	add	r0, sp, #4
 8014760:	f7ff fd59 	bl	8014216 <__lo0bits>
 8014764:	9b01      	ldr	r3, [sp, #4]
 8014766:	6163      	str	r3, [r4, #20]
 8014768:	3020      	adds	r0, #32
 801476a:	2201      	movs	r2, #1
 801476c:	e7e8      	b.n	8014740 <__d2b+0x64>
 801476e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014772:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014776:	6038      	str	r0, [r7, #0]
 8014778:	6918      	ldr	r0, [r3, #16]
 801477a:	f7ff fd2d 	bl	80141d8 <__hi0bits>
 801477e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014782:	e7e5      	b.n	8014750 <__d2b+0x74>
 8014784:	080176b8 	.word	0x080176b8
 8014788:	080176c9 	.word	0x080176c9

0801478c <__ssputs_r>:
 801478c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014790:	688e      	ldr	r6, [r1, #8]
 8014792:	461f      	mov	r7, r3
 8014794:	42be      	cmp	r6, r7
 8014796:	680b      	ldr	r3, [r1, #0]
 8014798:	4682      	mov	sl, r0
 801479a:	460c      	mov	r4, r1
 801479c:	4690      	mov	r8, r2
 801479e:	d82d      	bhi.n	80147fc <__ssputs_r+0x70>
 80147a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80147a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80147a8:	d026      	beq.n	80147f8 <__ssputs_r+0x6c>
 80147aa:	6965      	ldr	r5, [r4, #20]
 80147ac:	6909      	ldr	r1, [r1, #16]
 80147ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80147b2:	eba3 0901 	sub.w	r9, r3, r1
 80147b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80147ba:	1c7b      	adds	r3, r7, #1
 80147bc:	444b      	add	r3, r9
 80147be:	106d      	asrs	r5, r5, #1
 80147c0:	429d      	cmp	r5, r3
 80147c2:	bf38      	it	cc
 80147c4:	461d      	movcc	r5, r3
 80147c6:	0553      	lsls	r3, r2, #21
 80147c8:	d527      	bpl.n	801481a <__ssputs_r+0x8e>
 80147ca:	4629      	mov	r1, r5
 80147cc:	f7fd ffc2 	bl	8012754 <_malloc_r>
 80147d0:	4606      	mov	r6, r0
 80147d2:	b360      	cbz	r0, 801482e <__ssputs_r+0xa2>
 80147d4:	6921      	ldr	r1, [r4, #16]
 80147d6:	464a      	mov	r2, r9
 80147d8:	f000 f9f6 	bl	8014bc8 <memcpy>
 80147dc:	89a3      	ldrh	r3, [r4, #12]
 80147de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80147e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80147e6:	81a3      	strh	r3, [r4, #12]
 80147e8:	6126      	str	r6, [r4, #16]
 80147ea:	6165      	str	r5, [r4, #20]
 80147ec:	444e      	add	r6, r9
 80147ee:	eba5 0509 	sub.w	r5, r5, r9
 80147f2:	6026      	str	r6, [r4, #0]
 80147f4:	60a5      	str	r5, [r4, #8]
 80147f6:	463e      	mov	r6, r7
 80147f8:	42be      	cmp	r6, r7
 80147fa:	d900      	bls.n	80147fe <__ssputs_r+0x72>
 80147fc:	463e      	mov	r6, r7
 80147fe:	6820      	ldr	r0, [r4, #0]
 8014800:	4632      	mov	r2, r6
 8014802:	4641      	mov	r1, r8
 8014804:	f000 f9c6 	bl	8014b94 <memmove>
 8014808:	68a3      	ldr	r3, [r4, #8]
 801480a:	1b9b      	subs	r3, r3, r6
 801480c:	60a3      	str	r3, [r4, #8]
 801480e:	6823      	ldr	r3, [r4, #0]
 8014810:	4433      	add	r3, r6
 8014812:	6023      	str	r3, [r4, #0]
 8014814:	2000      	movs	r0, #0
 8014816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801481a:	462a      	mov	r2, r5
 801481c:	f000 fa26 	bl	8014c6c <_realloc_r>
 8014820:	4606      	mov	r6, r0
 8014822:	2800      	cmp	r0, #0
 8014824:	d1e0      	bne.n	80147e8 <__ssputs_r+0x5c>
 8014826:	6921      	ldr	r1, [r4, #16]
 8014828:	4650      	mov	r0, sl
 801482a:	f7ff fbe3 	bl	8013ff4 <_free_r>
 801482e:	230c      	movs	r3, #12
 8014830:	f8ca 3000 	str.w	r3, [sl]
 8014834:	89a3      	ldrh	r3, [r4, #12]
 8014836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801483a:	81a3      	strh	r3, [r4, #12]
 801483c:	f04f 30ff 	mov.w	r0, #4294967295
 8014840:	e7e9      	b.n	8014816 <__ssputs_r+0x8a>
	...

08014844 <_svfiprintf_r>:
 8014844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014848:	4698      	mov	r8, r3
 801484a:	898b      	ldrh	r3, [r1, #12]
 801484c:	061b      	lsls	r3, r3, #24
 801484e:	b09d      	sub	sp, #116	@ 0x74
 8014850:	4607      	mov	r7, r0
 8014852:	460d      	mov	r5, r1
 8014854:	4614      	mov	r4, r2
 8014856:	d510      	bpl.n	801487a <_svfiprintf_r+0x36>
 8014858:	690b      	ldr	r3, [r1, #16]
 801485a:	b973      	cbnz	r3, 801487a <_svfiprintf_r+0x36>
 801485c:	2140      	movs	r1, #64	@ 0x40
 801485e:	f7fd ff79 	bl	8012754 <_malloc_r>
 8014862:	6028      	str	r0, [r5, #0]
 8014864:	6128      	str	r0, [r5, #16]
 8014866:	b930      	cbnz	r0, 8014876 <_svfiprintf_r+0x32>
 8014868:	230c      	movs	r3, #12
 801486a:	603b      	str	r3, [r7, #0]
 801486c:	f04f 30ff 	mov.w	r0, #4294967295
 8014870:	b01d      	add	sp, #116	@ 0x74
 8014872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014876:	2340      	movs	r3, #64	@ 0x40
 8014878:	616b      	str	r3, [r5, #20]
 801487a:	2300      	movs	r3, #0
 801487c:	9309      	str	r3, [sp, #36]	@ 0x24
 801487e:	2320      	movs	r3, #32
 8014880:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014884:	f8cd 800c 	str.w	r8, [sp, #12]
 8014888:	2330      	movs	r3, #48	@ 0x30
 801488a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014a28 <_svfiprintf_r+0x1e4>
 801488e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014892:	f04f 0901 	mov.w	r9, #1
 8014896:	4623      	mov	r3, r4
 8014898:	469a      	mov	sl, r3
 801489a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801489e:	b10a      	cbz	r2, 80148a4 <_svfiprintf_r+0x60>
 80148a0:	2a25      	cmp	r2, #37	@ 0x25
 80148a2:	d1f9      	bne.n	8014898 <_svfiprintf_r+0x54>
 80148a4:	ebba 0b04 	subs.w	fp, sl, r4
 80148a8:	d00b      	beq.n	80148c2 <_svfiprintf_r+0x7e>
 80148aa:	465b      	mov	r3, fp
 80148ac:	4622      	mov	r2, r4
 80148ae:	4629      	mov	r1, r5
 80148b0:	4638      	mov	r0, r7
 80148b2:	f7ff ff6b 	bl	801478c <__ssputs_r>
 80148b6:	3001      	adds	r0, #1
 80148b8:	f000 80a7 	beq.w	8014a0a <_svfiprintf_r+0x1c6>
 80148bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80148be:	445a      	add	r2, fp
 80148c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80148c2:	f89a 3000 	ldrb.w	r3, [sl]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	f000 809f 	beq.w	8014a0a <_svfiprintf_r+0x1c6>
 80148cc:	2300      	movs	r3, #0
 80148ce:	f04f 32ff 	mov.w	r2, #4294967295
 80148d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148d6:	f10a 0a01 	add.w	sl, sl, #1
 80148da:	9304      	str	r3, [sp, #16]
 80148dc:	9307      	str	r3, [sp, #28]
 80148de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80148e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80148e4:	4654      	mov	r4, sl
 80148e6:	2205      	movs	r2, #5
 80148e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148ec:	484e      	ldr	r0, [pc, #312]	@ (8014a28 <_svfiprintf_r+0x1e4>)
 80148ee:	f7eb fcf7 	bl	80002e0 <memchr>
 80148f2:	9a04      	ldr	r2, [sp, #16]
 80148f4:	b9d8      	cbnz	r0, 801492e <_svfiprintf_r+0xea>
 80148f6:	06d0      	lsls	r0, r2, #27
 80148f8:	bf44      	itt	mi
 80148fa:	2320      	movmi	r3, #32
 80148fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014900:	0711      	lsls	r1, r2, #28
 8014902:	bf44      	itt	mi
 8014904:	232b      	movmi	r3, #43	@ 0x2b
 8014906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801490a:	f89a 3000 	ldrb.w	r3, [sl]
 801490e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014910:	d015      	beq.n	801493e <_svfiprintf_r+0xfa>
 8014912:	9a07      	ldr	r2, [sp, #28]
 8014914:	4654      	mov	r4, sl
 8014916:	2000      	movs	r0, #0
 8014918:	f04f 0c0a 	mov.w	ip, #10
 801491c:	4621      	mov	r1, r4
 801491e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014922:	3b30      	subs	r3, #48	@ 0x30
 8014924:	2b09      	cmp	r3, #9
 8014926:	d94b      	bls.n	80149c0 <_svfiprintf_r+0x17c>
 8014928:	b1b0      	cbz	r0, 8014958 <_svfiprintf_r+0x114>
 801492a:	9207      	str	r2, [sp, #28]
 801492c:	e014      	b.n	8014958 <_svfiprintf_r+0x114>
 801492e:	eba0 0308 	sub.w	r3, r0, r8
 8014932:	fa09 f303 	lsl.w	r3, r9, r3
 8014936:	4313      	orrs	r3, r2
 8014938:	9304      	str	r3, [sp, #16]
 801493a:	46a2      	mov	sl, r4
 801493c:	e7d2      	b.n	80148e4 <_svfiprintf_r+0xa0>
 801493e:	9b03      	ldr	r3, [sp, #12]
 8014940:	1d19      	adds	r1, r3, #4
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	9103      	str	r1, [sp, #12]
 8014946:	2b00      	cmp	r3, #0
 8014948:	bfbb      	ittet	lt
 801494a:	425b      	neglt	r3, r3
 801494c:	f042 0202 	orrlt.w	r2, r2, #2
 8014950:	9307      	strge	r3, [sp, #28]
 8014952:	9307      	strlt	r3, [sp, #28]
 8014954:	bfb8      	it	lt
 8014956:	9204      	strlt	r2, [sp, #16]
 8014958:	7823      	ldrb	r3, [r4, #0]
 801495a:	2b2e      	cmp	r3, #46	@ 0x2e
 801495c:	d10a      	bne.n	8014974 <_svfiprintf_r+0x130>
 801495e:	7863      	ldrb	r3, [r4, #1]
 8014960:	2b2a      	cmp	r3, #42	@ 0x2a
 8014962:	d132      	bne.n	80149ca <_svfiprintf_r+0x186>
 8014964:	9b03      	ldr	r3, [sp, #12]
 8014966:	1d1a      	adds	r2, r3, #4
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	9203      	str	r2, [sp, #12]
 801496c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014970:	3402      	adds	r4, #2
 8014972:	9305      	str	r3, [sp, #20]
 8014974:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014a38 <_svfiprintf_r+0x1f4>
 8014978:	7821      	ldrb	r1, [r4, #0]
 801497a:	2203      	movs	r2, #3
 801497c:	4650      	mov	r0, sl
 801497e:	f7eb fcaf 	bl	80002e0 <memchr>
 8014982:	b138      	cbz	r0, 8014994 <_svfiprintf_r+0x150>
 8014984:	9b04      	ldr	r3, [sp, #16]
 8014986:	eba0 000a 	sub.w	r0, r0, sl
 801498a:	2240      	movs	r2, #64	@ 0x40
 801498c:	4082      	lsls	r2, r0
 801498e:	4313      	orrs	r3, r2
 8014990:	3401      	adds	r4, #1
 8014992:	9304      	str	r3, [sp, #16]
 8014994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014998:	4824      	ldr	r0, [pc, #144]	@ (8014a2c <_svfiprintf_r+0x1e8>)
 801499a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801499e:	2206      	movs	r2, #6
 80149a0:	f7eb fc9e 	bl	80002e0 <memchr>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	d036      	beq.n	8014a16 <_svfiprintf_r+0x1d2>
 80149a8:	4b21      	ldr	r3, [pc, #132]	@ (8014a30 <_svfiprintf_r+0x1ec>)
 80149aa:	bb1b      	cbnz	r3, 80149f4 <_svfiprintf_r+0x1b0>
 80149ac:	9b03      	ldr	r3, [sp, #12]
 80149ae:	3307      	adds	r3, #7
 80149b0:	f023 0307 	bic.w	r3, r3, #7
 80149b4:	3308      	adds	r3, #8
 80149b6:	9303      	str	r3, [sp, #12]
 80149b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149ba:	4433      	add	r3, r6
 80149bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80149be:	e76a      	b.n	8014896 <_svfiprintf_r+0x52>
 80149c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80149c4:	460c      	mov	r4, r1
 80149c6:	2001      	movs	r0, #1
 80149c8:	e7a8      	b.n	801491c <_svfiprintf_r+0xd8>
 80149ca:	2300      	movs	r3, #0
 80149cc:	3401      	adds	r4, #1
 80149ce:	9305      	str	r3, [sp, #20]
 80149d0:	4619      	mov	r1, r3
 80149d2:	f04f 0c0a 	mov.w	ip, #10
 80149d6:	4620      	mov	r0, r4
 80149d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149dc:	3a30      	subs	r2, #48	@ 0x30
 80149de:	2a09      	cmp	r2, #9
 80149e0:	d903      	bls.n	80149ea <_svfiprintf_r+0x1a6>
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d0c6      	beq.n	8014974 <_svfiprintf_r+0x130>
 80149e6:	9105      	str	r1, [sp, #20]
 80149e8:	e7c4      	b.n	8014974 <_svfiprintf_r+0x130>
 80149ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80149ee:	4604      	mov	r4, r0
 80149f0:	2301      	movs	r3, #1
 80149f2:	e7f0      	b.n	80149d6 <_svfiprintf_r+0x192>
 80149f4:	ab03      	add	r3, sp, #12
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	462a      	mov	r2, r5
 80149fa:	4b0e      	ldr	r3, [pc, #56]	@ (8014a34 <_svfiprintf_r+0x1f0>)
 80149fc:	a904      	add	r1, sp, #16
 80149fe:	4638      	mov	r0, r7
 8014a00:	f7fd ffc2 	bl	8012988 <_printf_float>
 8014a04:	1c42      	adds	r2, r0, #1
 8014a06:	4606      	mov	r6, r0
 8014a08:	d1d6      	bne.n	80149b8 <_svfiprintf_r+0x174>
 8014a0a:	89ab      	ldrh	r3, [r5, #12]
 8014a0c:	065b      	lsls	r3, r3, #25
 8014a0e:	f53f af2d 	bmi.w	801486c <_svfiprintf_r+0x28>
 8014a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014a14:	e72c      	b.n	8014870 <_svfiprintf_r+0x2c>
 8014a16:	ab03      	add	r3, sp, #12
 8014a18:	9300      	str	r3, [sp, #0]
 8014a1a:	462a      	mov	r2, r5
 8014a1c:	4b05      	ldr	r3, [pc, #20]	@ (8014a34 <_svfiprintf_r+0x1f0>)
 8014a1e:	a904      	add	r1, sp, #16
 8014a20:	4638      	mov	r0, r7
 8014a22:	f7fe fa39 	bl	8012e98 <_printf_i>
 8014a26:	e7ed      	b.n	8014a04 <_svfiprintf_r+0x1c0>
 8014a28:	08017820 	.word	0x08017820
 8014a2c:	0801782a 	.word	0x0801782a
 8014a30:	08012989 	.word	0x08012989
 8014a34:	0801478d 	.word	0x0801478d
 8014a38:	08017826 	.word	0x08017826

08014a3c <__sflush_r>:
 8014a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a44:	0716      	lsls	r6, r2, #28
 8014a46:	4605      	mov	r5, r0
 8014a48:	460c      	mov	r4, r1
 8014a4a:	d454      	bmi.n	8014af6 <__sflush_r+0xba>
 8014a4c:	684b      	ldr	r3, [r1, #4]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	dc02      	bgt.n	8014a58 <__sflush_r+0x1c>
 8014a52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	dd48      	ble.n	8014aea <__sflush_r+0xae>
 8014a58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014a5a:	2e00      	cmp	r6, #0
 8014a5c:	d045      	beq.n	8014aea <__sflush_r+0xae>
 8014a5e:	2300      	movs	r3, #0
 8014a60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014a64:	682f      	ldr	r7, [r5, #0]
 8014a66:	6a21      	ldr	r1, [r4, #32]
 8014a68:	602b      	str	r3, [r5, #0]
 8014a6a:	d030      	beq.n	8014ace <__sflush_r+0x92>
 8014a6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014a6e:	89a3      	ldrh	r3, [r4, #12]
 8014a70:	0759      	lsls	r1, r3, #29
 8014a72:	d505      	bpl.n	8014a80 <__sflush_r+0x44>
 8014a74:	6863      	ldr	r3, [r4, #4]
 8014a76:	1ad2      	subs	r2, r2, r3
 8014a78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014a7a:	b10b      	cbz	r3, 8014a80 <__sflush_r+0x44>
 8014a7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014a7e:	1ad2      	subs	r2, r2, r3
 8014a80:	2300      	movs	r3, #0
 8014a82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014a84:	6a21      	ldr	r1, [r4, #32]
 8014a86:	4628      	mov	r0, r5
 8014a88:	47b0      	blx	r6
 8014a8a:	1c43      	adds	r3, r0, #1
 8014a8c:	89a3      	ldrh	r3, [r4, #12]
 8014a8e:	d106      	bne.n	8014a9e <__sflush_r+0x62>
 8014a90:	6829      	ldr	r1, [r5, #0]
 8014a92:	291d      	cmp	r1, #29
 8014a94:	d82b      	bhi.n	8014aee <__sflush_r+0xb2>
 8014a96:	4a2a      	ldr	r2, [pc, #168]	@ (8014b40 <__sflush_r+0x104>)
 8014a98:	410a      	asrs	r2, r1
 8014a9a:	07d6      	lsls	r6, r2, #31
 8014a9c:	d427      	bmi.n	8014aee <__sflush_r+0xb2>
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	6062      	str	r2, [r4, #4]
 8014aa2:	04d9      	lsls	r1, r3, #19
 8014aa4:	6922      	ldr	r2, [r4, #16]
 8014aa6:	6022      	str	r2, [r4, #0]
 8014aa8:	d504      	bpl.n	8014ab4 <__sflush_r+0x78>
 8014aaa:	1c42      	adds	r2, r0, #1
 8014aac:	d101      	bne.n	8014ab2 <__sflush_r+0x76>
 8014aae:	682b      	ldr	r3, [r5, #0]
 8014ab0:	b903      	cbnz	r3, 8014ab4 <__sflush_r+0x78>
 8014ab2:	6560      	str	r0, [r4, #84]	@ 0x54
 8014ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ab6:	602f      	str	r7, [r5, #0]
 8014ab8:	b1b9      	cbz	r1, 8014aea <__sflush_r+0xae>
 8014aba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014abe:	4299      	cmp	r1, r3
 8014ac0:	d002      	beq.n	8014ac8 <__sflush_r+0x8c>
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	f7ff fa96 	bl	8013ff4 <_free_r>
 8014ac8:	2300      	movs	r3, #0
 8014aca:	6363      	str	r3, [r4, #52]	@ 0x34
 8014acc:	e00d      	b.n	8014aea <__sflush_r+0xae>
 8014ace:	2301      	movs	r3, #1
 8014ad0:	4628      	mov	r0, r5
 8014ad2:	47b0      	blx	r6
 8014ad4:	4602      	mov	r2, r0
 8014ad6:	1c50      	adds	r0, r2, #1
 8014ad8:	d1c9      	bne.n	8014a6e <__sflush_r+0x32>
 8014ada:	682b      	ldr	r3, [r5, #0]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d0c6      	beq.n	8014a6e <__sflush_r+0x32>
 8014ae0:	2b1d      	cmp	r3, #29
 8014ae2:	d001      	beq.n	8014ae8 <__sflush_r+0xac>
 8014ae4:	2b16      	cmp	r3, #22
 8014ae6:	d11e      	bne.n	8014b26 <__sflush_r+0xea>
 8014ae8:	602f      	str	r7, [r5, #0]
 8014aea:	2000      	movs	r0, #0
 8014aec:	e022      	b.n	8014b34 <__sflush_r+0xf8>
 8014aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014af2:	b21b      	sxth	r3, r3
 8014af4:	e01b      	b.n	8014b2e <__sflush_r+0xf2>
 8014af6:	690f      	ldr	r7, [r1, #16]
 8014af8:	2f00      	cmp	r7, #0
 8014afa:	d0f6      	beq.n	8014aea <__sflush_r+0xae>
 8014afc:	0793      	lsls	r3, r2, #30
 8014afe:	680e      	ldr	r6, [r1, #0]
 8014b00:	bf08      	it	eq
 8014b02:	694b      	ldreq	r3, [r1, #20]
 8014b04:	600f      	str	r7, [r1, #0]
 8014b06:	bf18      	it	ne
 8014b08:	2300      	movne	r3, #0
 8014b0a:	eba6 0807 	sub.w	r8, r6, r7
 8014b0e:	608b      	str	r3, [r1, #8]
 8014b10:	f1b8 0f00 	cmp.w	r8, #0
 8014b14:	dde9      	ble.n	8014aea <__sflush_r+0xae>
 8014b16:	6a21      	ldr	r1, [r4, #32]
 8014b18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014b1a:	4643      	mov	r3, r8
 8014b1c:	463a      	mov	r2, r7
 8014b1e:	4628      	mov	r0, r5
 8014b20:	47b0      	blx	r6
 8014b22:	2800      	cmp	r0, #0
 8014b24:	dc08      	bgt.n	8014b38 <__sflush_r+0xfc>
 8014b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b2e:	81a3      	strh	r3, [r4, #12]
 8014b30:	f04f 30ff 	mov.w	r0, #4294967295
 8014b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b38:	4407      	add	r7, r0
 8014b3a:	eba8 0800 	sub.w	r8, r8, r0
 8014b3e:	e7e7      	b.n	8014b10 <__sflush_r+0xd4>
 8014b40:	dfbffffe 	.word	0xdfbffffe

08014b44 <_fflush_r>:
 8014b44:	b538      	push	{r3, r4, r5, lr}
 8014b46:	690b      	ldr	r3, [r1, #16]
 8014b48:	4605      	mov	r5, r0
 8014b4a:	460c      	mov	r4, r1
 8014b4c:	b913      	cbnz	r3, 8014b54 <_fflush_r+0x10>
 8014b4e:	2500      	movs	r5, #0
 8014b50:	4628      	mov	r0, r5
 8014b52:	bd38      	pop	{r3, r4, r5, pc}
 8014b54:	b118      	cbz	r0, 8014b5e <_fflush_r+0x1a>
 8014b56:	6a03      	ldr	r3, [r0, #32]
 8014b58:	b90b      	cbnz	r3, 8014b5e <_fflush_r+0x1a>
 8014b5a:	f7fe fb49 	bl	80131f0 <__sinit>
 8014b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d0f3      	beq.n	8014b4e <_fflush_r+0xa>
 8014b66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014b68:	07d0      	lsls	r0, r2, #31
 8014b6a:	d404      	bmi.n	8014b76 <_fflush_r+0x32>
 8014b6c:	0599      	lsls	r1, r3, #22
 8014b6e:	d402      	bmi.n	8014b76 <_fflush_r+0x32>
 8014b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014b72:	f7fe fc5e 	bl	8013432 <__retarget_lock_acquire_recursive>
 8014b76:	4628      	mov	r0, r5
 8014b78:	4621      	mov	r1, r4
 8014b7a:	f7ff ff5f 	bl	8014a3c <__sflush_r>
 8014b7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014b80:	07da      	lsls	r2, r3, #31
 8014b82:	4605      	mov	r5, r0
 8014b84:	d4e4      	bmi.n	8014b50 <_fflush_r+0xc>
 8014b86:	89a3      	ldrh	r3, [r4, #12]
 8014b88:	059b      	lsls	r3, r3, #22
 8014b8a:	d4e1      	bmi.n	8014b50 <_fflush_r+0xc>
 8014b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014b8e:	f7fe fc51 	bl	8013434 <__retarget_lock_release_recursive>
 8014b92:	e7dd      	b.n	8014b50 <_fflush_r+0xc>

08014b94 <memmove>:
 8014b94:	4288      	cmp	r0, r1
 8014b96:	b510      	push	{r4, lr}
 8014b98:	eb01 0402 	add.w	r4, r1, r2
 8014b9c:	d902      	bls.n	8014ba4 <memmove+0x10>
 8014b9e:	4284      	cmp	r4, r0
 8014ba0:	4623      	mov	r3, r4
 8014ba2:	d807      	bhi.n	8014bb4 <memmove+0x20>
 8014ba4:	1e43      	subs	r3, r0, #1
 8014ba6:	42a1      	cmp	r1, r4
 8014ba8:	d008      	beq.n	8014bbc <memmove+0x28>
 8014baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014bb2:	e7f8      	b.n	8014ba6 <memmove+0x12>
 8014bb4:	4402      	add	r2, r0
 8014bb6:	4601      	mov	r1, r0
 8014bb8:	428a      	cmp	r2, r1
 8014bba:	d100      	bne.n	8014bbe <memmove+0x2a>
 8014bbc:	bd10      	pop	{r4, pc}
 8014bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014bc6:	e7f7      	b.n	8014bb8 <memmove+0x24>

08014bc8 <memcpy>:
 8014bc8:	440a      	add	r2, r1
 8014bca:	4291      	cmp	r1, r2
 8014bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8014bd0:	d100      	bne.n	8014bd4 <memcpy+0xc>
 8014bd2:	4770      	bx	lr
 8014bd4:	b510      	push	{r4, lr}
 8014bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014bde:	4291      	cmp	r1, r2
 8014be0:	d1f9      	bne.n	8014bd6 <memcpy+0xe>
 8014be2:	bd10      	pop	{r4, pc}

08014be4 <__assert_func>:
 8014be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014be6:	4614      	mov	r4, r2
 8014be8:	461a      	mov	r2, r3
 8014bea:	4b09      	ldr	r3, [pc, #36]	@ (8014c10 <__assert_func+0x2c>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	4605      	mov	r5, r0
 8014bf0:	68d8      	ldr	r0, [r3, #12]
 8014bf2:	b954      	cbnz	r4, 8014c0a <__assert_func+0x26>
 8014bf4:	4b07      	ldr	r3, [pc, #28]	@ (8014c14 <__assert_func+0x30>)
 8014bf6:	461c      	mov	r4, r3
 8014bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014bfc:	9100      	str	r1, [sp, #0]
 8014bfe:	462b      	mov	r3, r5
 8014c00:	4905      	ldr	r1, [pc, #20]	@ (8014c18 <__assert_func+0x34>)
 8014c02:	f000 f86f 	bl	8014ce4 <fiprintf>
 8014c06:	f000 f87f 	bl	8014d08 <abort>
 8014c0a:	4b04      	ldr	r3, [pc, #16]	@ (8014c1c <__assert_func+0x38>)
 8014c0c:	e7f4      	b.n	8014bf8 <__assert_func+0x14>
 8014c0e:	bf00      	nop
 8014c10:	24000114 	.word	0x24000114
 8014c14:	08017876 	.word	0x08017876
 8014c18:	08017848 	.word	0x08017848
 8014c1c:	0801783b 	.word	0x0801783b

08014c20 <_calloc_r>:
 8014c20:	b570      	push	{r4, r5, r6, lr}
 8014c22:	fba1 5402 	umull	r5, r4, r1, r2
 8014c26:	b93c      	cbnz	r4, 8014c38 <_calloc_r+0x18>
 8014c28:	4629      	mov	r1, r5
 8014c2a:	f7fd fd93 	bl	8012754 <_malloc_r>
 8014c2e:	4606      	mov	r6, r0
 8014c30:	b928      	cbnz	r0, 8014c3e <_calloc_r+0x1e>
 8014c32:	2600      	movs	r6, #0
 8014c34:	4630      	mov	r0, r6
 8014c36:	bd70      	pop	{r4, r5, r6, pc}
 8014c38:	220c      	movs	r2, #12
 8014c3a:	6002      	str	r2, [r0, #0]
 8014c3c:	e7f9      	b.n	8014c32 <_calloc_r+0x12>
 8014c3e:	462a      	mov	r2, r5
 8014c40:	4621      	mov	r1, r4
 8014c42:	f7fe fb6e 	bl	8013322 <memset>
 8014c46:	e7f5      	b.n	8014c34 <_calloc_r+0x14>

08014c48 <__ascii_mbtowc>:
 8014c48:	b082      	sub	sp, #8
 8014c4a:	b901      	cbnz	r1, 8014c4e <__ascii_mbtowc+0x6>
 8014c4c:	a901      	add	r1, sp, #4
 8014c4e:	b142      	cbz	r2, 8014c62 <__ascii_mbtowc+0x1a>
 8014c50:	b14b      	cbz	r3, 8014c66 <__ascii_mbtowc+0x1e>
 8014c52:	7813      	ldrb	r3, [r2, #0]
 8014c54:	600b      	str	r3, [r1, #0]
 8014c56:	7812      	ldrb	r2, [r2, #0]
 8014c58:	1e10      	subs	r0, r2, #0
 8014c5a:	bf18      	it	ne
 8014c5c:	2001      	movne	r0, #1
 8014c5e:	b002      	add	sp, #8
 8014c60:	4770      	bx	lr
 8014c62:	4610      	mov	r0, r2
 8014c64:	e7fb      	b.n	8014c5e <__ascii_mbtowc+0x16>
 8014c66:	f06f 0001 	mvn.w	r0, #1
 8014c6a:	e7f8      	b.n	8014c5e <__ascii_mbtowc+0x16>

08014c6c <_realloc_r>:
 8014c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c70:	4680      	mov	r8, r0
 8014c72:	4615      	mov	r5, r2
 8014c74:	460c      	mov	r4, r1
 8014c76:	b921      	cbnz	r1, 8014c82 <_realloc_r+0x16>
 8014c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c7c:	4611      	mov	r1, r2
 8014c7e:	f7fd bd69 	b.w	8012754 <_malloc_r>
 8014c82:	b92a      	cbnz	r2, 8014c90 <_realloc_r+0x24>
 8014c84:	f7ff f9b6 	bl	8013ff4 <_free_r>
 8014c88:	2400      	movs	r4, #0
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c90:	f000 f841 	bl	8014d16 <_malloc_usable_size_r>
 8014c94:	4285      	cmp	r5, r0
 8014c96:	4606      	mov	r6, r0
 8014c98:	d802      	bhi.n	8014ca0 <_realloc_r+0x34>
 8014c9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014c9e:	d8f4      	bhi.n	8014c8a <_realloc_r+0x1e>
 8014ca0:	4629      	mov	r1, r5
 8014ca2:	4640      	mov	r0, r8
 8014ca4:	f7fd fd56 	bl	8012754 <_malloc_r>
 8014ca8:	4607      	mov	r7, r0
 8014caa:	2800      	cmp	r0, #0
 8014cac:	d0ec      	beq.n	8014c88 <_realloc_r+0x1c>
 8014cae:	42b5      	cmp	r5, r6
 8014cb0:	462a      	mov	r2, r5
 8014cb2:	4621      	mov	r1, r4
 8014cb4:	bf28      	it	cs
 8014cb6:	4632      	movcs	r2, r6
 8014cb8:	f7ff ff86 	bl	8014bc8 <memcpy>
 8014cbc:	4621      	mov	r1, r4
 8014cbe:	4640      	mov	r0, r8
 8014cc0:	f7ff f998 	bl	8013ff4 <_free_r>
 8014cc4:	463c      	mov	r4, r7
 8014cc6:	e7e0      	b.n	8014c8a <_realloc_r+0x1e>

08014cc8 <__ascii_wctomb>:
 8014cc8:	4603      	mov	r3, r0
 8014cca:	4608      	mov	r0, r1
 8014ccc:	b141      	cbz	r1, 8014ce0 <__ascii_wctomb+0x18>
 8014cce:	2aff      	cmp	r2, #255	@ 0xff
 8014cd0:	d904      	bls.n	8014cdc <__ascii_wctomb+0x14>
 8014cd2:	228a      	movs	r2, #138	@ 0x8a
 8014cd4:	601a      	str	r2, [r3, #0]
 8014cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8014cda:	4770      	bx	lr
 8014cdc:	700a      	strb	r2, [r1, #0]
 8014cde:	2001      	movs	r0, #1
 8014ce0:	4770      	bx	lr
	...

08014ce4 <fiprintf>:
 8014ce4:	b40e      	push	{r1, r2, r3}
 8014ce6:	b503      	push	{r0, r1, lr}
 8014ce8:	4601      	mov	r1, r0
 8014cea:	ab03      	add	r3, sp, #12
 8014cec:	4805      	ldr	r0, [pc, #20]	@ (8014d04 <fiprintf+0x20>)
 8014cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cf2:	6800      	ldr	r0, [r0, #0]
 8014cf4:	9301      	str	r3, [sp, #4]
 8014cf6:	f000 f83f 	bl	8014d78 <_vfiprintf_r>
 8014cfa:	b002      	add	sp, #8
 8014cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d00:	b003      	add	sp, #12
 8014d02:	4770      	bx	lr
 8014d04:	24000114 	.word	0x24000114

08014d08 <abort>:
 8014d08:	b508      	push	{r3, lr}
 8014d0a:	2006      	movs	r0, #6
 8014d0c:	f000 fa08 	bl	8015120 <raise>
 8014d10:	2001      	movs	r0, #1
 8014d12:	f000 fbe9 	bl	80154e8 <_exit>

08014d16 <_malloc_usable_size_r>:
 8014d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d1a:	1f18      	subs	r0, r3, #4
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	bfbc      	itt	lt
 8014d20:	580b      	ldrlt	r3, [r1, r0]
 8014d22:	18c0      	addlt	r0, r0, r3
 8014d24:	4770      	bx	lr

08014d26 <__sfputc_r>:
 8014d26:	6893      	ldr	r3, [r2, #8]
 8014d28:	3b01      	subs	r3, #1
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	b410      	push	{r4}
 8014d2e:	6093      	str	r3, [r2, #8]
 8014d30:	da08      	bge.n	8014d44 <__sfputc_r+0x1e>
 8014d32:	6994      	ldr	r4, [r2, #24]
 8014d34:	42a3      	cmp	r3, r4
 8014d36:	db01      	blt.n	8014d3c <__sfputc_r+0x16>
 8014d38:	290a      	cmp	r1, #10
 8014d3a:	d103      	bne.n	8014d44 <__sfputc_r+0x1e>
 8014d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d40:	f000 b932 	b.w	8014fa8 <__swbuf_r>
 8014d44:	6813      	ldr	r3, [r2, #0]
 8014d46:	1c58      	adds	r0, r3, #1
 8014d48:	6010      	str	r0, [r2, #0]
 8014d4a:	7019      	strb	r1, [r3, #0]
 8014d4c:	4608      	mov	r0, r1
 8014d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d52:	4770      	bx	lr

08014d54 <__sfputs_r>:
 8014d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d56:	4606      	mov	r6, r0
 8014d58:	460f      	mov	r7, r1
 8014d5a:	4614      	mov	r4, r2
 8014d5c:	18d5      	adds	r5, r2, r3
 8014d5e:	42ac      	cmp	r4, r5
 8014d60:	d101      	bne.n	8014d66 <__sfputs_r+0x12>
 8014d62:	2000      	movs	r0, #0
 8014d64:	e007      	b.n	8014d76 <__sfputs_r+0x22>
 8014d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d6a:	463a      	mov	r2, r7
 8014d6c:	4630      	mov	r0, r6
 8014d6e:	f7ff ffda 	bl	8014d26 <__sfputc_r>
 8014d72:	1c43      	adds	r3, r0, #1
 8014d74:	d1f3      	bne.n	8014d5e <__sfputs_r+0xa>
 8014d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014d78 <_vfiprintf_r>:
 8014d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d7c:	460d      	mov	r5, r1
 8014d7e:	b09d      	sub	sp, #116	@ 0x74
 8014d80:	4614      	mov	r4, r2
 8014d82:	4698      	mov	r8, r3
 8014d84:	4606      	mov	r6, r0
 8014d86:	b118      	cbz	r0, 8014d90 <_vfiprintf_r+0x18>
 8014d88:	6a03      	ldr	r3, [r0, #32]
 8014d8a:	b90b      	cbnz	r3, 8014d90 <_vfiprintf_r+0x18>
 8014d8c:	f7fe fa30 	bl	80131f0 <__sinit>
 8014d90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d92:	07d9      	lsls	r1, r3, #31
 8014d94:	d405      	bmi.n	8014da2 <_vfiprintf_r+0x2a>
 8014d96:	89ab      	ldrh	r3, [r5, #12]
 8014d98:	059a      	lsls	r2, r3, #22
 8014d9a:	d402      	bmi.n	8014da2 <_vfiprintf_r+0x2a>
 8014d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d9e:	f7fe fb48 	bl	8013432 <__retarget_lock_acquire_recursive>
 8014da2:	89ab      	ldrh	r3, [r5, #12]
 8014da4:	071b      	lsls	r3, r3, #28
 8014da6:	d501      	bpl.n	8014dac <_vfiprintf_r+0x34>
 8014da8:	692b      	ldr	r3, [r5, #16]
 8014daa:	b99b      	cbnz	r3, 8014dd4 <_vfiprintf_r+0x5c>
 8014dac:	4629      	mov	r1, r5
 8014dae:	4630      	mov	r0, r6
 8014db0:	f000 f938 	bl	8015024 <__swsetup_r>
 8014db4:	b170      	cbz	r0, 8014dd4 <_vfiprintf_r+0x5c>
 8014db6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014db8:	07dc      	lsls	r4, r3, #31
 8014dba:	d504      	bpl.n	8014dc6 <_vfiprintf_r+0x4e>
 8014dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8014dc0:	b01d      	add	sp, #116	@ 0x74
 8014dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dc6:	89ab      	ldrh	r3, [r5, #12]
 8014dc8:	0598      	lsls	r0, r3, #22
 8014dca:	d4f7      	bmi.n	8014dbc <_vfiprintf_r+0x44>
 8014dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dce:	f7fe fb31 	bl	8013434 <__retarget_lock_release_recursive>
 8014dd2:	e7f3      	b.n	8014dbc <_vfiprintf_r+0x44>
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dd8:	2320      	movs	r3, #32
 8014dda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8014de2:	2330      	movs	r3, #48	@ 0x30
 8014de4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014f94 <_vfiprintf_r+0x21c>
 8014de8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014dec:	f04f 0901 	mov.w	r9, #1
 8014df0:	4623      	mov	r3, r4
 8014df2:	469a      	mov	sl, r3
 8014df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014df8:	b10a      	cbz	r2, 8014dfe <_vfiprintf_r+0x86>
 8014dfa:	2a25      	cmp	r2, #37	@ 0x25
 8014dfc:	d1f9      	bne.n	8014df2 <_vfiprintf_r+0x7a>
 8014dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8014e02:	d00b      	beq.n	8014e1c <_vfiprintf_r+0xa4>
 8014e04:	465b      	mov	r3, fp
 8014e06:	4622      	mov	r2, r4
 8014e08:	4629      	mov	r1, r5
 8014e0a:	4630      	mov	r0, r6
 8014e0c:	f7ff ffa2 	bl	8014d54 <__sfputs_r>
 8014e10:	3001      	adds	r0, #1
 8014e12:	f000 80a7 	beq.w	8014f64 <_vfiprintf_r+0x1ec>
 8014e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e18:	445a      	add	r2, fp
 8014e1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	f000 809f 	beq.w	8014f64 <_vfiprintf_r+0x1ec>
 8014e26:	2300      	movs	r3, #0
 8014e28:	f04f 32ff 	mov.w	r2, #4294967295
 8014e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e30:	f10a 0a01 	add.w	sl, sl, #1
 8014e34:	9304      	str	r3, [sp, #16]
 8014e36:	9307      	str	r3, [sp, #28]
 8014e38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e3e:	4654      	mov	r4, sl
 8014e40:	2205      	movs	r2, #5
 8014e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e46:	4853      	ldr	r0, [pc, #332]	@ (8014f94 <_vfiprintf_r+0x21c>)
 8014e48:	f7eb fa4a 	bl	80002e0 <memchr>
 8014e4c:	9a04      	ldr	r2, [sp, #16]
 8014e4e:	b9d8      	cbnz	r0, 8014e88 <_vfiprintf_r+0x110>
 8014e50:	06d1      	lsls	r1, r2, #27
 8014e52:	bf44      	itt	mi
 8014e54:	2320      	movmi	r3, #32
 8014e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e5a:	0713      	lsls	r3, r2, #28
 8014e5c:	bf44      	itt	mi
 8014e5e:	232b      	movmi	r3, #43	@ 0x2b
 8014e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e64:	f89a 3000 	ldrb.w	r3, [sl]
 8014e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e6a:	d015      	beq.n	8014e98 <_vfiprintf_r+0x120>
 8014e6c:	9a07      	ldr	r2, [sp, #28]
 8014e6e:	4654      	mov	r4, sl
 8014e70:	2000      	movs	r0, #0
 8014e72:	f04f 0c0a 	mov.w	ip, #10
 8014e76:	4621      	mov	r1, r4
 8014e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e7c:	3b30      	subs	r3, #48	@ 0x30
 8014e7e:	2b09      	cmp	r3, #9
 8014e80:	d94b      	bls.n	8014f1a <_vfiprintf_r+0x1a2>
 8014e82:	b1b0      	cbz	r0, 8014eb2 <_vfiprintf_r+0x13a>
 8014e84:	9207      	str	r2, [sp, #28]
 8014e86:	e014      	b.n	8014eb2 <_vfiprintf_r+0x13a>
 8014e88:	eba0 0308 	sub.w	r3, r0, r8
 8014e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8014e90:	4313      	orrs	r3, r2
 8014e92:	9304      	str	r3, [sp, #16]
 8014e94:	46a2      	mov	sl, r4
 8014e96:	e7d2      	b.n	8014e3e <_vfiprintf_r+0xc6>
 8014e98:	9b03      	ldr	r3, [sp, #12]
 8014e9a:	1d19      	adds	r1, r3, #4
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	9103      	str	r1, [sp, #12]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	bfbb      	ittet	lt
 8014ea4:	425b      	neglt	r3, r3
 8014ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8014eaa:	9307      	strge	r3, [sp, #28]
 8014eac:	9307      	strlt	r3, [sp, #28]
 8014eae:	bfb8      	it	lt
 8014eb0:	9204      	strlt	r2, [sp, #16]
 8014eb2:	7823      	ldrb	r3, [r4, #0]
 8014eb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8014eb6:	d10a      	bne.n	8014ece <_vfiprintf_r+0x156>
 8014eb8:	7863      	ldrb	r3, [r4, #1]
 8014eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ebc:	d132      	bne.n	8014f24 <_vfiprintf_r+0x1ac>
 8014ebe:	9b03      	ldr	r3, [sp, #12]
 8014ec0:	1d1a      	adds	r2, r3, #4
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	9203      	str	r2, [sp, #12]
 8014ec6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014eca:	3402      	adds	r4, #2
 8014ecc:	9305      	str	r3, [sp, #20]
 8014ece:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014fa4 <_vfiprintf_r+0x22c>
 8014ed2:	7821      	ldrb	r1, [r4, #0]
 8014ed4:	2203      	movs	r2, #3
 8014ed6:	4650      	mov	r0, sl
 8014ed8:	f7eb fa02 	bl	80002e0 <memchr>
 8014edc:	b138      	cbz	r0, 8014eee <_vfiprintf_r+0x176>
 8014ede:	9b04      	ldr	r3, [sp, #16]
 8014ee0:	eba0 000a 	sub.w	r0, r0, sl
 8014ee4:	2240      	movs	r2, #64	@ 0x40
 8014ee6:	4082      	lsls	r2, r0
 8014ee8:	4313      	orrs	r3, r2
 8014eea:	3401      	adds	r4, #1
 8014eec:	9304      	str	r3, [sp, #16]
 8014eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ef2:	4829      	ldr	r0, [pc, #164]	@ (8014f98 <_vfiprintf_r+0x220>)
 8014ef4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014ef8:	2206      	movs	r2, #6
 8014efa:	f7eb f9f1 	bl	80002e0 <memchr>
 8014efe:	2800      	cmp	r0, #0
 8014f00:	d03f      	beq.n	8014f82 <_vfiprintf_r+0x20a>
 8014f02:	4b26      	ldr	r3, [pc, #152]	@ (8014f9c <_vfiprintf_r+0x224>)
 8014f04:	bb1b      	cbnz	r3, 8014f4e <_vfiprintf_r+0x1d6>
 8014f06:	9b03      	ldr	r3, [sp, #12]
 8014f08:	3307      	adds	r3, #7
 8014f0a:	f023 0307 	bic.w	r3, r3, #7
 8014f0e:	3308      	adds	r3, #8
 8014f10:	9303      	str	r3, [sp, #12]
 8014f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f14:	443b      	add	r3, r7
 8014f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f18:	e76a      	b.n	8014df0 <_vfiprintf_r+0x78>
 8014f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f1e:	460c      	mov	r4, r1
 8014f20:	2001      	movs	r0, #1
 8014f22:	e7a8      	b.n	8014e76 <_vfiprintf_r+0xfe>
 8014f24:	2300      	movs	r3, #0
 8014f26:	3401      	adds	r4, #1
 8014f28:	9305      	str	r3, [sp, #20]
 8014f2a:	4619      	mov	r1, r3
 8014f2c:	f04f 0c0a 	mov.w	ip, #10
 8014f30:	4620      	mov	r0, r4
 8014f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f36:	3a30      	subs	r2, #48	@ 0x30
 8014f38:	2a09      	cmp	r2, #9
 8014f3a:	d903      	bls.n	8014f44 <_vfiprintf_r+0x1cc>
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d0c6      	beq.n	8014ece <_vfiprintf_r+0x156>
 8014f40:	9105      	str	r1, [sp, #20]
 8014f42:	e7c4      	b.n	8014ece <_vfiprintf_r+0x156>
 8014f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f48:	4604      	mov	r4, r0
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	e7f0      	b.n	8014f30 <_vfiprintf_r+0x1b8>
 8014f4e:	ab03      	add	r3, sp, #12
 8014f50:	9300      	str	r3, [sp, #0]
 8014f52:	462a      	mov	r2, r5
 8014f54:	4b12      	ldr	r3, [pc, #72]	@ (8014fa0 <_vfiprintf_r+0x228>)
 8014f56:	a904      	add	r1, sp, #16
 8014f58:	4630      	mov	r0, r6
 8014f5a:	f7fd fd15 	bl	8012988 <_printf_float>
 8014f5e:	4607      	mov	r7, r0
 8014f60:	1c78      	adds	r0, r7, #1
 8014f62:	d1d6      	bne.n	8014f12 <_vfiprintf_r+0x19a>
 8014f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f66:	07d9      	lsls	r1, r3, #31
 8014f68:	d405      	bmi.n	8014f76 <_vfiprintf_r+0x1fe>
 8014f6a:	89ab      	ldrh	r3, [r5, #12]
 8014f6c:	059a      	lsls	r2, r3, #22
 8014f6e:	d402      	bmi.n	8014f76 <_vfiprintf_r+0x1fe>
 8014f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f72:	f7fe fa5f 	bl	8013434 <__retarget_lock_release_recursive>
 8014f76:	89ab      	ldrh	r3, [r5, #12]
 8014f78:	065b      	lsls	r3, r3, #25
 8014f7a:	f53f af1f 	bmi.w	8014dbc <_vfiprintf_r+0x44>
 8014f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f80:	e71e      	b.n	8014dc0 <_vfiprintf_r+0x48>
 8014f82:	ab03      	add	r3, sp, #12
 8014f84:	9300      	str	r3, [sp, #0]
 8014f86:	462a      	mov	r2, r5
 8014f88:	4b05      	ldr	r3, [pc, #20]	@ (8014fa0 <_vfiprintf_r+0x228>)
 8014f8a:	a904      	add	r1, sp, #16
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	f7fd ff83 	bl	8012e98 <_printf_i>
 8014f92:	e7e4      	b.n	8014f5e <_vfiprintf_r+0x1e6>
 8014f94:	08017820 	.word	0x08017820
 8014f98:	0801782a 	.word	0x0801782a
 8014f9c:	08012989 	.word	0x08012989
 8014fa0:	08014d55 	.word	0x08014d55
 8014fa4:	08017826 	.word	0x08017826

08014fa8 <__swbuf_r>:
 8014fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014faa:	460e      	mov	r6, r1
 8014fac:	4614      	mov	r4, r2
 8014fae:	4605      	mov	r5, r0
 8014fb0:	b118      	cbz	r0, 8014fba <__swbuf_r+0x12>
 8014fb2:	6a03      	ldr	r3, [r0, #32]
 8014fb4:	b90b      	cbnz	r3, 8014fba <__swbuf_r+0x12>
 8014fb6:	f7fe f91b 	bl	80131f0 <__sinit>
 8014fba:	69a3      	ldr	r3, [r4, #24]
 8014fbc:	60a3      	str	r3, [r4, #8]
 8014fbe:	89a3      	ldrh	r3, [r4, #12]
 8014fc0:	071a      	lsls	r2, r3, #28
 8014fc2:	d501      	bpl.n	8014fc8 <__swbuf_r+0x20>
 8014fc4:	6923      	ldr	r3, [r4, #16]
 8014fc6:	b943      	cbnz	r3, 8014fda <__swbuf_r+0x32>
 8014fc8:	4621      	mov	r1, r4
 8014fca:	4628      	mov	r0, r5
 8014fcc:	f000 f82a 	bl	8015024 <__swsetup_r>
 8014fd0:	b118      	cbz	r0, 8014fda <__swbuf_r+0x32>
 8014fd2:	f04f 37ff 	mov.w	r7, #4294967295
 8014fd6:	4638      	mov	r0, r7
 8014fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fda:	6823      	ldr	r3, [r4, #0]
 8014fdc:	6922      	ldr	r2, [r4, #16]
 8014fde:	1a98      	subs	r0, r3, r2
 8014fe0:	6963      	ldr	r3, [r4, #20]
 8014fe2:	b2f6      	uxtb	r6, r6
 8014fe4:	4283      	cmp	r3, r0
 8014fe6:	4637      	mov	r7, r6
 8014fe8:	dc05      	bgt.n	8014ff6 <__swbuf_r+0x4e>
 8014fea:	4621      	mov	r1, r4
 8014fec:	4628      	mov	r0, r5
 8014fee:	f7ff fda9 	bl	8014b44 <_fflush_r>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	d1ed      	bne.n	8014fd2 <__swbuf_r+0x2a>
 8014ff6:	68a3      	ldr	r3, [r4, #8]
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	60a3      	str	r3, [r4, #8]
 8014ffc:	6823      	ldr	r3, [r4, #0]
 8014ffe:	1c5a      	adds	r2, r3, #1
 8015000:	6022      	str	r2, [r4, #0]
 8015002:	701e      	strb	r6, [r3, #0]
 8015004:	6962      	ldr	r2, [r4, #20]
 8015006:	1c43      	adds	r3, r0, #1
 8015008:	429a      	cmp	r2, r3
 801500a:	d004      	beq.n	8015016 <__swbuf_r+0x6e>
 801500c:	89a3      	ldrh	r3, [r4, #12]
 801500e:	07db      	lsls	r3, r3, #31
 8015010:	d5e1      	bpl.n	8014fd6 <__swbuf_r+0x2e>
 8015012:	2e0a      	cmp	r6, #10
 8015014:	d1df      	bne.n	8014fd6 <__swbuf_r+0x2e>
 8015016:	4621      	mov	r1, r4
 8015018:	4628      	mov	r0, r5
 801501a:	f7ff fd93 	bl	8014b44 <_fflush_r>
 801501e:	2800      	cmp	r0, #0
 8015020:	d0d9      	beq.n	8014fd6 <__swbuf_r+0x2e>
 8015022:	e7d6      	b.n	8014fd2 <__swbuf_r+0x2a>

08015024 <__swsetup_r>:
 8015024:	b538      	push	{r3, r4, r5, lr}
 8015026:	4b29      	ldr	r3, [pc, #164]	@ (80150cc <__swsetup_r+0xa8>)
 8015028:	4605      	mov	r5, r0
 801502a:	6818      	ldr	r0, [r3, #0]
 801502c:	460c      	mov	r4, r1
 801502e:	b118      	cbz	r0, 8015038 <__swsetup_r+0x14>
 8015030:	6a03      	ldr	r3, [r0, #32]
 8015032:	b90b      	cbnz	r3, 8015038 <__swsetup_r+0x14>
 8015034:	f7fe f8dc 	bl	80131f0 <__sinit>
 8015038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801503c:	0719      	lsls	r1, r3, #28
 801503e:	d422      	bmi.n	8015086 <__swsetup_r+0x62>
 8015040:	06da      	lsls	r2, r3, #27
 8015042:	d407      	bmi.n	8015054 <__swsetup_r+0x30>
 8015044:	2209      	movs	r2, #9
 8015046:	602a      	str	r2, [r5, #0]
 8015048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801504c:	81a3      	strh	r3, [r4, #12]
 801504e:	f04f 30ff 	mov.w	r0, #4294967295
 8015052:	e033      	b.n	80150bc <__swsetup_r+0x98>
 8015054:	0758      	lsls	r0, r3, #29
 8015056:	d512      	bpl.n	801507e <__swsetup_r+0x5a>
 8015058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801505a:	b141      	cbz	r1, 801506e <__swsetup_r+0x4a>
 801505c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015060:	4299      	cmp	r1, r3
 8015062:	d002      	beq.n	801506a <__swsetup_r+0x46>
 8015064:	4628      	mov	r0, r5
 8015066:	f7fe ffc5 	bl	8013ff4 <_free_r>
 801506a:	2300      	movs	r3, #0
 801506c:	6363      	str	r3, [r4, #52]	@ 0x34
 801506e:	89a3      	ldrh	r3, [r4, #12]
 8015070:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015074:	81a3      	strh	r3, [r4, #12]
 8015076:	2300      	movs	r3, #0
 8015078:	6063      	str	r3, [r4, #4]
 801507a:	6923      	ldr	r3, [r4, #16]
 801507c:	6023      	str	r3, [r4, #0]
 801507e:	89a3      	ldrh	r3, [r4, #12]
 8015080:	f043 0308 	orr.w	r3, r3, #8
 8015084:	81a3      	strh	r3, [r4, #12]
 8015086:	6923      	ldr	r3, [r4, #16]
 8015088:	b94b      	cbnz	r3, 801509e <__swsetup_r+0x7a>
 801508a:	89a3      	ldrh	r3, [r4, #12]
 801508c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015094:	d003      	beq.n	801509e <__swsetup_r+0x7a>
 8015096:	4621      	mov	r1, r4
 8015098:	4628      	mov	r0, r5
 801509a:	f000 f883 	bl	80151a4 <__smakebuf_r>
 801509e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150a2:	f013 0201 	ands.w	r2, r3, #1
 80150a6:	d00a      	beq.n	80150be <__swsetup_r+0x9a>
 80150a8:	2200      	movs	r2, #0
 80150aa:	60a2      	str	r2, [r4, #8]
 80150ac:	6962      	ldr	r2, [r4, #20]
 80150ae:	4252      	negs	r2, r2
 80150b0:	61a2      	str	r2, [r4, #24]
 80150b2:	6922      	ldr	r2, [r4, #16]
 80150b4:	b942      	cbnz	r2, 80150c8 <__swsetup_r+0xa4>
 80150b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80150ba:	d1c5      	bne.n	8015048 <__swsetup_r+0x24>
 80150bc:	bd38      	pop	{r3, r4, r5, pc}
 80150be:	0799      	lsls	r1, r3, #30
 80150c0:	bf58      	it	pl
 80150c2:	6962      	ldrpl	r2, [r4, #20]
 80150c4:	60a2      	str	r2, [r4, #8]
 80150c6:	e7f4      	b.n	80150b2 <__swsetup_r+0x8e>
 80150c8:	2000      	movs	r0, #0
 80150ca:	e7f7      	b.n	80150bc <__swsetup_r+0x98>
 80150cc:	24000114 	.word	0x24000114

080150d0 <_raise_r>:
 80150d0:	291f      	cmp	r1, #31
 80150d2:	b538      	push	{r3, r4, r5, lr}
 80150d4:	4605      	mov	r5, r0
 80150d6:	460c      	mov	r4, r1
 80150d8:	d904      	bls.n	80150e4 <_raise_r+0x14>
 80150da:	2316      	movs	r3, #22
 80150dc:	6003      	str	r3, [r0, #0]
 80150de:	f04f 30ff 	mov.w	r0, #4294967295
 80150e2:	bd38      	pop	{r3, r4, r5, pc}
 80150e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80150e6:	b112      	cbz	r2, 80150ee <_raise_r+0x1e>
 80150e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80150ec:	b94b      	cbnz	r3, 8015102 <_raise_r+0x32>
 80150ee:	4628      	mov	r0, r5
 80150f0:	f000 f830 	bl	8015154 <_getpid_r>
 80150f4:	4622      	mov	r2, r4
 80150f6:	4601      	mov	r1, r0
 80150f8:	4628      	mov	r0, r5
 80150fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150fe:	f000 b817 	b.w	8015130 <_kill_r>
 8015102:	2b01      	cmp	r3, #1
 8015104:	d00a      	beq.n	801511c <_raise_r+0x4c>
 8015106:	1c59      	adds	r1, r3, #1
 8015108:	d103      	bne.n	8015112 <_raise_r+0x42>
 801510a:	2316      	movs	r3, #22
 801510c:	6003      	str	r3, [r0, #0]
 801510e:	2001      	movs	r0, #1
 8015110:	e7e7      	b.n	80150e2 <_raise_r+0x12>
 8015112:	2100      	movs	r1, #0
 8015114:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015118:	4620      	mov	r0, r4
 801511a:	4798      	blx	r3
 801511c:	2000      	movs	r0, #0
 801511e:	e7e0      	b.n	80150e2 <_raise_r+0x12>

08015120 <raise>:
 8015120:	4b02      	ldr	r3, [pc, #8]	@ (801512c <raise+0xc>)
 8015122:	4601      	mov	r1, r0
 8015124:	6818      	ldr	r0, [r3, #0]
 8015126:	f7ff bfd3 	b.w	80150d0 <_raise_r>
 801512a:	bf00      	nop
 801512c:	24000114 	.word	0x24000114

08015130 <_kill_r>:
 8015130:	b538      	push	{r3, r4, r5, lr}
 8015132:	4d07      	ldr	r5, [pc, #28]	@ (8015150 <_kill_r+0x20>)
 8015134:	2300      	movs	r3, #0
 8015136:	4604      	mov	r4, r0
 8015138:	4608      	mov	r0, r1
 801513a:	4611      	mov	r1, r2
 801513c:	602b      	str	r3, [r5, #0]
 801513e:	f7fb fb7a 	bl	8010836 <_kill>
 8015142:	1c43      	adds	r3, r0, #1
 8015144:	d102      	bne.n	801514c <_kill_r+0x1c>
 8015146:	682b      	ldr	r3, [r5, #0]
 8015148:	b103      	cbz	r3, 801514c <_kill_r+0x1c>
 801514a:	6023      	str	r3, [r4, #0]
 801514c:	bd38      	pop	{r3, r4, r5, pc}
 801514e:	bf00      	nop
 8015150:	24002930 	.word	0x24002930

08015154 <_getpid_r>:
 8015154:	f7fb bb61 	b.w	801081a <_getpid>

08015158 <__swhatbuf_r>:
 8015158:	b570      	push	{r4, r5, r6, lr}
 801515a:	460c      	mov	r4, r1
 801515c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015160:	2900      	cmp	r1, #0
 8015162:	b096      	sub	sp, #88	@ 0x58
 8015164:	4615      	mov	r5, r2
 8015166:	461e      	mov	r6, r3
 8015168:	da0d      	bge.n	8015186 <__swhatbuf_r+0x2e>
 801516a:	89a3      	ldrh	r3, [r4, #12]
 801516c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015170:	f04f 0100 	mov.w	r1, #0
 8015174:	bf14      	ite	ne
 8015176:	2340      	movne	r3, #64	@ 0x40
 8015178:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801517c:	2000      	movs	r0, #0
 801517e:	6031      	str	r1, [r6, #0]
 8015180:	602b      	str	r3, [r5, #0]
 8015182:	b016      	add	sp, #88	@ 0x58
 8015184:	bd70      	pop	{r4, r5, r6, pc}
 8015186:	466a      	mov	r2, sp
 8015188:	f000 f848 	bl	801521c <_fstat_r>
 801518c:	2800      	cmp	r0, #0
 801518e:	dbec      	blt.n	801516a <__swhatbuf_r+0x12>
 8015190:	9901      	ldr	r1, [sp, #4]
 8015192:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015196:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801519a:	4259      	negs	r1, r3
 801519c:	4159      	adcs	r1, r3
 801519e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80151a2:	e7eb      	b.n	801517c <__swhatbuf_r+0x24>

080151a4 <__smakebuf_r>:
 80151a4:	898b      	ldrh	r3, [r1, #12]
 80151a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80151a8:	079d      	lsls	r5, r3, #30
 80151aa:	4606      	mov	r6, r0
 80151ac:	460c      	mov	r4, r1
 80151ae:	d507      	bpl.n	80151c0 <__smakebuf_r+0x1c>
 80151b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80151b4:	6023      	str	r3, [r4, #0]
 80151b6:	6123      	str	r3, [r4, #16]
 80151b8:	2301      	movs	r3, #1
 80151ba:	6163      	str	r3, [r4, #20]
 80151bc:	b003      	add	sp, #12
 80151be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151c0:	ab01      	add	r3, sp, #4
 80151c2:	466a      	mov	r2, sp
 80151c4:	f7ff ffc8 	bl	8015158 <__swhatbuf_r>
 80151c8:	9f00      	ldr	r7, [sp, #0]
 80151ca:	4605      	mov	r5, r0
 80151cc:	4639      	mov	r1, r7
 80151ce:	4630      	mov	r0, r6
 80151d0:	f7fd fac0 	bl	8012754 <_malloc_r>
 80151d4:	b948      	cbnz	r0, 80151ea <__smakebuf_r+0x46>
 80151d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151da:	059a      	lsls	r2, r3, #22
 80151dc:	d4ee      	bmi.n	80151bc <__smakebuf_r+0x18>
 80151de:	f023 0303 	bic.w	r3, r3, #3
 80151e2:	f043 0302 	orr.w	r3, r3, #2
 80151e6:	81a3      	strh	r3, [r4, #12]
 80151e8:	e7e2      	b.n	80151b0 <__smakebuf_r+0xc>
 80151ea:	89a3      	ldrh	r3, [r4, #12]
 80151ec:	6020      	str	r0, [r4, #0]
 80151ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151f2:	81a3      	strh	r3, [r4, #12]
 80151f4:	9b01      	ldr	r3, [sp, #4]
 80151f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80151fa:	b15b      	cbz	r3, 8015214 <__smakebuf_r+0x70>
 80151fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015200:	4630      	mov	r0, r6
 8015202:	f000 f81d 	bl	8015240 <_isatty_r>
 8015206:	b128      	cbz	r0, 8015214 <__smakebuf_r+0x70>
 8015208:	89a3      	ldrh	r3, [r4, #12]
 801520a:	f023 0303 	bic.w	r3, r3, #3
 801520e:	f043 0301 	orr.w	r3, r3, #1
 8015212:	81a3      	strh	r3, [r4, #12]
 8015214:	89a3      	ldrh	r3, [r4, #12]
 8015216:	431d      	orrs	r5, r3
 8015218:	81a5      	strh	r5, [r4, #12]
 801521a:	e7cf      	b.n	80151bc <__smakebuf_r+0x18>

0801521c <_fstat_r>:
 801521c:	b538      	push	{r3, r4, r5, lr}
 801521e:	4d07      	ldr	r5, [pc, #28]	@ (801523c <_fstat_r+0x20>)
 8015220:	2300      	movs	r3, #0
 8015222:	4604      	mov	r4, r0
 8015224:	4608      	mov	r0, r1
 8015226:	4611      	mov	r1, r2
 8015228:	602b      	str	r3, [r5, #0]
 801522a:	f7fb faef 	bl	801080c <_fstat>
 801522e:	1c43      	adds	r3, r0, #1
 8015230:	d102      	bne.n	8015238 <_fstat_r+0x1c>
 8015232:	682b      	ldr	r3, [r5, #0]
 8015234:	b103      	cbz	r3, 8015238 <_fstat_r+0x1c>
 8015236:	6023      	str	r3, [r4, #0]
 8015238:	bd38      	pop	{r3, r4, r5, pc}
 801523a:	bf00      	nop
 801523c:	24002930 	.word	0x24002930

08015240 <_isatty_r>:
 8015240:	b538      	push	{r3, r4, r5, lr}
 8015242:	4d06      	ldr	r5, [pc, #24]	@ (801525c <_isatty_r+0x1c>)
 8015244:	2300      	movs	r3, #0
 8015246:	4604      	mov	r4, r0
 8015248:	4608      	mov	r0, r1
 801524a:	602b      	str	r3, [r5, #0]
 801524c:	f7fb faec 	bl	8010828 <_isatty>
 8015250:	1c43      	adds	r3, r0, #1
 8015252:	d102      	bne.n	801525a <_isatty_r+0x1a>
 8015254:	682b      	ldr	r3, [r5, #0]
 8015256:	b103      	cbz	r3, 801525a <_isatty_r+0x1a>
 8015258:	6023      	str	r3, [r4, #0]
 801525a:	bd38      	pop	{r3, r4, r5, pc}
 801525c:	24002930 	.word	0x24002930

08015260 <fmod>:
 8015260:	b508      	push	{r3, lr}
 8015262:	ed2d 8b04 	vpush	{d8-d9}
 8015266:	eeb0 9b40 	vmov.f64	d9, d0
 801526a:	eeb0 8b41 	vmov.f64	d8, d1
 801526e:	f000 f81b 	bl	80152a8 <__ieee754_fmod>
 8015272:	eeb4 9b48 	vcmp.f64	d9, d8
 8015276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527a:	d60c      	bvs.n	8015296 <fmod+0x36>
 801527c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 80152a0 <fmod+0x40>
 8015280:	eeb4 8b49 	vcmp.f64	d8, d9
 8015284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015288:	d105      	bne.n	8015296 <fmod+0x36>
 801528a:	f000 f919 	bl	80154c0 <__errno>
 801528e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8015292:	2321      	movs	r3, #33	@ 0x21
 8015294:	6003      	str	r3, [r0, #0]
 8015296:	ecbd 8b04 	vpop	{d8-d9}
 801529a:	bd08      	pop	{r3, pc}
 801529c:	f3af 8000 	nop.w
	...

080152a8 <__ieee754_fmod>:
 80152a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80152ac:	ed8d 1b00 	vstr	d1, [sp]
 80152b0:	e9dd 6500 	ldrd	r6, r5, [sp]
 80152b4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80152b8:	ea56 0307 	orrs.w	r3, r6, r7
 80152bc:	46b6      	mov	lr, r6
 80152be:	d00d      	beq.n	80152dc <__ieee754_fmod+0x34>
 80152c0:	ee10 ca90 	vmov	ip, s1
 80152c4:	4b78      	ldr	r3, [pc, #480]	@ (80154a8 <__ieee754_fmod+0x200>)
 80152c6:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 80152ca:	4598      	cmp	r8, r3
 80152cc:	d806      	bhi.n	80152dc <__ieee754_fmod+0x34>
 80152ce:	4273      	negs	r3, r6
 80152d0:	4a76      	ldr	r2, [pc, #472]	@ (80154ac <__ieee754_fmod+0x204>)
 80152d2:	4333      	orrs	r3, r6
 80152d4:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 80152d8:	4293      	cmp	r3, r2
 80152da:	d908      	bls.n	80152ee <__ieee754_fmod+0x46>
 80152dc:	ed9d 7b00 	vldr	d7, [sp]
 80152e0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80152e4:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80152e8:	b003      	add	sp, #12
 80152ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152ee:	ee10 9a10 	vmov	r9, s0
 80152f2:	45b8      	cmp	r8, r7
 80152f4:	4649      	mov	r1, r9
 80152f6:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 80152fa:	dc09      	bgt.n	8015310 <__ieee754_fmod+0x68>
 80152fc:	dbf4      	blt.n	80152e8 <__ieee754_fmod+0x40>
 80152fe:	454e      	cmp	r6, r9
 8015300:	d8f2      	bhi.n	80152e8 <__ieee754_fmod+0x40>
 8015302:	d105      	bne.n	8015310 <__ieee754_fmod+0x68>
 8015304:	4b6a      	ldr	r3, [pc, #424]	@ (80154b0 <__ieee754_fmod+0x208>)
 8015306:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 801530a:	ed93 0b00 	vldr	d0, [r3]
 801530e:	e7eb      	b.n	80152e8 <__ieee754_fmod+0x40>
 8015310:	4a66      	ldr	r2, [pc, #408]	@ (80154ac <__ieee754_fmod+0x204>)
 8015312:	ea1c 0f02 	tst.w	ip, r2
 8015316:	d14a      	bne.n	80153ae <__ieee754_fmod+0x106>
 8015318:	f1b8 0f00 	cmp.w	r8, #0
 801531c:	d13f      	bne.n	801539e <__ieee754_fmod+0xf6>
 801531e:	4865      	ldr	r0, [pc, #404]	@ (80154b4 <__ieee754_fmod+0x20c>)
 8015320:	464b      	mov	r3, r9
 8015322:	2b00      	cmp	r3, #0
 8015324:	dc38      	bgt.n	8015398 <__ieee754_fmod+0xf0>
 8015326:	4215      	tst	r5, r2
 8015328:	d150      	bne.n	80153cc <__ieee754_fmod+0x124>
 801532a:	2f00      	cmp	r7, #0
 801532c:	d147      	bne.n	80153be <__ieee754_fmod+0x116>
 801532e:	4a61      	ldr	r2, [pc, #388]	@ (80154b4 <__ieee754_fmod+0x20c>)
 8015330:	4633      	mov	r3, r6
 8015332:	2b00      	cmp	r3, #0
 8015334:	dc40      	bgt.n	80153b8 <__ieee754_fmod+0x110>
 8015336:	4b60      	ldr	r3, [pc, #384]	@ (80154b8 <__ieee754_fmod+0x210>)
 8015338:	4298      	cmp	r0, r3
 801533a:	db4b      	blt.n	80153d4 <__ieee754_fmod+0x12c>
 801533c:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8015340:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015344:	f8df c170 	ldr.w	ip, [pc, #368]	@ 80154b8 <__ieee754_fmod+0x210>
 8015348:	4562      	cmp	r2, ip
 801534a:	db58      	blt.n	80153fe <__ieee754_fmod+0x156>
 801534c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015350:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8015354:	1a80      	subs	r0, r0, r2
 8015356:	1b5e      	subs	r6, r3, r5
 8015358:	eba1 070e 	sub.w	r7, r1, lr
 801535c:	2800      	cmp	r0, #0
 801535e:	d164      	bne.n	801542a <__ieee754_fmod+0x182>
 8015360:	4571      	cmp	r1, lr
 8015362:	bf38      	it	cc
 8015364:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8015368:	2e00      	cmp	r6, #0
 801536a:	bfa4      	itt	ge
 801536c:	4639      	movge	r1, r7
 801536e:	4633      	movge	r3, r6
 8015370:	ea53 0001 	orrs.w	r0, r3, r1
 8015374:	d0c6      	beq.n	8015304 <__ieee754_fmod+0x5c>
 8015376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801537a:	db6b      	blt.n	8015454 <__ieee754_fmod+0x1ac>
 801537c:	484e      	ldr	r0, [pc, #312]	@ (80154b8 <__ieee754_fmod+0x210>)
 801537e:	4282      	cmp	r2, r0
 8015380:	db6e      	blt.n	8015460 <__ieee754_fmod+0x1b8>
 8015382:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015386:	4323      	orrs	r3, r4
 8015388:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801538c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015390:	460c      	mov	r4, r1
 8015392:	ec45 4b10 	vmov	d0, r4, r5
 8015396:	e7a7      	b.n	80152e8 <__ieee754_fmod+0x40>
 8015398:	3801      	subs	r0, #1
 801539a:	005b      	lsls	r3, r3, #1
 801539c:	e7c1      	b.n	8015322 <__ieee754_fmod+0x7a>
 801539e:	4846      	ldr	r0, [pc, #280]	@ (80154b8 <__ieee754_fmod+0x210>)
 80153a0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	ddbe      	ble.n	8015326 <__ieee754_fmod+0x7e>
 80153a8:	3801      	subs	r0, #1
 80153aa:	005b      	lsls	r3, r3, #1
 80153ac:	e7fa      	b.n	80153a4 <__ieee754_fmod+0xfc>
 80153ae:	ea4f 5028 	mov.w	r0, r8, asr #20
 80153b2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 80153b6:	e7b6      	b.n	8015326 <__ieee754_fmod+0x7e>
 80153b8:	3a01      	subs	r2, #1
 80153ba:	005b      	lsls	r3, r3, #1
 80153bc:	e7b9      	b.n	8015332 <__ieee754_fmod+0x8a>
 80153be:	4a3e      	ldr	r2, [pc, #248]	@ (80154b8 <__ieee754_fmod+0x210>)
 80153c0:	02fb      	lsls	r3, r7, #11
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	ddb7      	ble.n	8015336 <__ieee754_fmod+0x8e>
 80153c6:	3a01      	subs	r2, #1
 80153c8:	005b      	lsls	r3, r3, #1
 80153ca:	e7fa      	b.n	80153c2 <__ieee754_fmod+0x11a>
 80153cc:	153a      	asrs	r2, r7, #20
 80153ce:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80153d2:	e7b0      	b.n	8015336 <__ieee754_fmod+0x8e>
 80153d4:	eba3 0c00 	sub.w	ip, r3, r0
 80153d8:	f1bc 0f1f 	cmp.w	ip, #31
 80153dc:	dc09      	bgt.n	80153f2 <__ieee754_fmod+0x14a>
 80153de:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 80153e2:	fa08 f10c 	lsl.w	r1, r8, ip
 80153e6:	fa29 f303 	lsr.w	r3, r9, r3
 80153ea:	430b      	orrs	r3, r1
 80153ec:	fa09 f10c 	lsl.w	r1, r9, ip
 80153f0:	e7a8      	b.n	8015344 <__ieee754_fmod+0x9c>
 80153f2:	4b32      	ldr	r3, [pc, #200]	@ (80154bc <__ieee754_fmod+0x214>)
 80153f4:	1a1b      	subs	r3, r3, r0
 80153f6:	fa09 f303 	lsl.w	r3, r9, r3
 80153fa:	2100      	movs	r1, #0
 80153fc:	e7a2      	b.n	8015344 <__ieee754_fmod+0x9c>
 80153fe:	ebac 0c02 	sub.w	ip, ip, r2
 8015402:	f1bc 0f1f 	cmp.w	ip, #31
 8015406:	dc09      	bgt.n	801541c <__ieee754_fmod+0x174>
 8015408:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 801540c:	fa07 f70c 	lsl.w	r7, r7, ip
 8015410:	fa26 f505 	lsr.w	r5, r6, r5
 8015414:	433d      	orrs	r5, r7
 8015416:	fa06 fe0c 	lsl.w	lr, r6, ip
 801541a:	e79b      	b.n	8015354 <__ieee754_fmod+0xac>
 801541c:	4d27      	ldr	r5, [pc, #156]	@ (80154bc <__ieee754_fmod+0x214>)
 801541e:	1aad      	subs	r5, r5, r2
 8015420:	fa06 f505 	lsl.w	r5, r6, r5
 8015424:	f04f 0e00 	mov.w	lr, #0
 8015428:	e794      	b.n	8015354 <__ieee754_fmod+0xac>
 801542a:	4571      	cmp	r1, lr
 801542c:	bf38      	it	cc
 801542e:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8015432:	2e00      	cmp	r6, #0
 8015434:	da05      	bge.n	8015442 <__ieee754_fmod+0x19a>
 8015436:	0fce      	lsrs	r6, r1, #31
 8015438:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801543c:	0049      	lsls	r1, r1, #1
 801543e:	3801      	subs	r0, #1
 8015440:	e789      	b.n	8015356 <__ieee754_fmod+0xae>
 8015442:	ea56 0307 	orrs.w	r3, r6, r7
 8015446:	f43f af5d 	beq.w	8015304 <__ieee754_fmod+0x5c>
 801544a:	0ffb      	lsrs	r3, r7, #31
 801544c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015450:	0079      	lsls	r1, r7, #1
 8015452:	e7f4      	b.n	801543e <__ieee754_fmod+0x196>
 8015454:	0fc8      	lsrs	r0, r1, #31
 8015456:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801545a:	0049      	lsls	r1, r1, #1
 801545c:	3a01      	subs	r2, #1
 801545e:	e78a      	b.n	8015376 <__ieee754_fmod+0xce>
 8015460:	1a80      	subs	r0, r0, r2
 8015462:	2814      	cmp	r0, #20
 8015464:	dc0c      	bgt.n	8015480 <__ieee754_fmod+0x1d8>
 8015466:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801546a:	fa03 f202 	lsl.w	r2, r3, r2
 801546e:	40c1      	lsrs	r1, r0
 8015470:	430a      	orrs	r2, r1
 8015472:	4103      	asrs	r3, r0
 8015474:	ea43 0104 	orr.w	r1, r3, r4
 8015478:	4610      	mov	r0, r2
 801547a:	ec41 0b10 	vmov	d0, r0, r1
 801547e:	e733      	b.n	80152e8 <__ieee754_fmod+0x40>
 8015480:	281f      	cmp	r0, #31
 8015482:	dc07      	bgt.n	8015494 <__ieee754_fmod+0x1ec>
 8015484:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015488:	40c1      	lsrs	r1, r0
 801548a:	fa03 f202 	lsl.w	r2, r3, r2
 801548e:	430a      	orrs	r2, r1
 8015490:	4623      	mov	r3, r4
 8015492:	e7ef      	b.n	8015474 <__ieee754_fmod+0x1cc>
 8015494:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8015498:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801549c:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80154a0:	32e2      	adds	r2, #226	@ 0xe2
 80154a2:	fa43 f202 	asr.w	r2, r3, r2
 80154a6:	e7f3      	b.n	8015490 <__ieee754_fmod+0x1e8>
 80154a8:	7fefffff 	.word	0x7fefffff
 80154ac:	7ff00000 	.word	0x7ff00000
 80154b0:	08017978 	.word	0x08017978
 80154b4:	fffffbed 	.word	0xfffffbed
 80154b8:	fffffc02 	.word	0xfffffc02
 80154bc:	fffffbe2 	.word	0xfffffbe2

080154c0 <__errno>:
 80154c0:	4b01      	ldr	r3, [pc, #4]	@ (80154c8 <__errno+0x8>)
 80154c2:	6818      	ldr	r0, [r3, #0]
 80154c4:	4770      	bx	lr
 80154c6:	bf00      	nop
 80154c8:	24000114 	.word	0x24000114

080154cc <_sbrk>:
 80154cc:	4a04      	ldr	r2, [pc, #16]	@ (80154e0 <_sbrk+0x14>)
 80154ce:	6811      	ldr	r1, [r2, #0]
 80154d0:	4603      	mov	r3, r0
 80154d2:	b909      	cbnz	r1, 80154d8 <_sbrk+0xc>
 80154d4:	4903      	ldr	r1, [pc, #12]	@ (80154e4 <_sbrk+0x18>)
 80154d6:	6011      	str	r1, [r2, #0]
 80154d8:	6810      	ldr	r0, [r2, #0]
 80154da:	4403      	add	r3, r0
 80154dc:	6013      	str	r3, [r2, #0]
 80154de:	4770      	bx	lr
 80154e0:	24002938 	.word	0x24002938
 80154e4:	24002940 	.word	0x24002940

080154e8 <_exit>:
 80154e8:	e7fe      	b.n	80154e8 <_exit>
	...

080154ec <_init>:
 80154ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ee:	bf00      	nop
 80154f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154f2:	bc08      	pop	{r3}
 80154f4:	469e      	mov	lr, r3
 80154f6:	4770      	bx	lr

080154f8 <_fini>:
 80154f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154fa:	bf00      	nop
 80154fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154fe:	bc08      	pop	{r3}
 8015500:	469e      	mov	lr, r3
 8015502:	4770      	bx	lr
