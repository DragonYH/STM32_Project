
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a24  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002428  08011cc8  08011cc8  00012cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080140f0  080140f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080140f8  080140f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080140fc  080140fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  08014100  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002588  240002cc  080143cc  000162cc  2**2
                  ALLOC
  8 ._user_heap_stack 0000c004  24002854  080143cc  00016854  2**0
                  ALLOC
  9 ._D3_Area     00000000  38000000  38000000  00017018  2**0
                  CONTENTS
 10 ._DTCM_Area   00000018  20000000  20000000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  00017018  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002bc99  00000000  00000000  00017046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000081  00000000  00000000  00042cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002e28e  00000000  00000000  00042d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006365  00000000  00000000  00070fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001df8  00000000  00000000  00077358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00168ba9  00000000  00000000  00079150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001660  00000000  00000000  001e1cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d34b  00000000  00000000  001e3359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  002206a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008aac  00000000  00000000  0022075c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000a31  00000000  00000000  00229208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000040  00000000  00000000  00229c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002cc 	.word	0x240002cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011cac 	.word	0x08011cac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d0 	.word	0x240002d0
 80002dc:	08011cac 	.word	0x08011cac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f00d fbbe 	bl	800db14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003be:	f00f fbcf 	bl	800fb60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f00c fddf 	bl	800cf84 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80003cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80003d0:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 80003d4:	08014100 	.word	0x08014100
  ldr r2, =_sbss
 80003d8:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 80003dc:	24002854 	.word	0x24002854

080003e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC3_IRQHandler>
	...

080003e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ea:	2003      	movs	r0, #3
 80003ec:	f000 f933 	bl	8000656 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80003f0:	f003 fd5e 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 80003f4:	4602      	mov	r2, r0
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <HAL_Init+0x68>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	0a1b      	lsrs	r3, r3, #8
 80003fc:	f003 030f 	and.w	r3, r3, #15
 8000400:	4913      	ldr	r1, [pc, #76]	@ (8000450 <HAL_Init+0x6c>)
 8000402:	5ccb      	ldrb	r3, [r1, r3]
 8000404:	f003 031f 	and.w	r3, r3, #31
 8000408:	fa22 f303 	lsr.w	r3, r2, r3
 800040c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_Init+0x68>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 030f 	and.w	r3, r3, #15
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <HAL_Init+0x6c>)
 8000418:	5cd3      	ldrb	r3, [r2, r3]
 800041a:	f003 031f 	and.w	r3, r3, #31
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	fa22 f303 	lsr.w	r3, r2, r3
 8000424:	4a0b      	ldr	r2, [pc, #44]	@ (8000454 <HAL_Init+0x70>)
 8000426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000428:	4a0b      	ldr	r2, [pc, #44]	@ (8000458 <HAL_Init+0x74>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800042e:	200f      	movs	r0, #15
 8000430:	f00d faa4 	bl	800d97c <HAL_InitTick>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800043a:	2301      	movs	r3, #1
 800043c:	e002      	b.n	8000444 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800043e:	f00d fa83 	bl	800d948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	58024400 	.word	0x58024400
 8000450:	08013558 	.word	0x08013558
 8000454:	24000098 	.word	0x24000098
 8000458:	24000094 	.word	0x24000094

0800045c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_IncTick+0x20>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <HAL_IncTick+0x24>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4413      	add	r3, r2
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <HAL_IncTick+0x24>)
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	24000004 	.word	0x24000004
 8000480:	240002e8 	.word	0x240002e8

08000484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  return uwTick;
 8000488:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <HAL_GetTick+0x14>)
 800048a:	681b      	ldr	r3, [r3, #0]
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	240002e8 	.word	0x240002e8

0800049c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004a4:	f7ff ffee 	bl	8000484 <HAL_GetTick>
 80004a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b4:	d005      	beq.n	80004c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b6:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <HAL_Delay+0x44>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	4413      	add	r3, r2
 80004c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c2:	bf00      	nop
 80004c4:	f7ff ffde 	bl	8000484 <HAL_GetTick>
 80004c8:	4602      	mov	r2, r0
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d8f7      	bhi.n	80004c4 <HAL_Delay+0x28>
  {
  }
}
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000004 	.word	0x24000004

080004e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80004e8:	4b03      	ldr	r3, [pc, #12]	@ (80004f8 <HAL_GetREVID+0x14>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	0c1b      	lsrs	r3, r3, #16
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	5c001000 	.word	0x5c001000

080004fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f003 0307 	and.w	r3, r3, #7
 800050a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800050c:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <__NVIC_SetPriorityGrouping+0x40>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000518:	4013      	ands	r3, r2
 800051a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <__NVIC_SetPriorityGrouping+0x44>)
 8000526:	4313      	orrs	r3, r2
 8000528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800052a:	4a04      	ldr	r2, [pc, #16]	@ (800053c <__NVIC_SetPriorityGrouping+0x40>)
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	60d3      	str	r3, [r2, #12]
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	e000ed00 	.word	0xe000ed00
 8000540:	05fa0000 	.word	0x05fa0000

08000544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000548:	4b04      	ldr	r3, [pc, #16]	@ (800055c <__NVIC_GetPriorityGrouping+0x18>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	0a1b      	lsrs	r3, r3, #8
 800054e:	f003 0307 	and.w	r3, r3, #7
}
 8000552:	4618      	mov	r0, r3
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800056a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800056e:	2b00      	cmp	r3, #0
 8000570:	db0b      	blt.n	800058a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	f003 021f 	and.w	r2, r3, #31
 8000578:	4907      	ldr	r1, [pc, #28]	@ (8000598 <__NVIC_EnableIRQ+0x38>)
 800057a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057e:	095b      	lsrs	r3, r3, #5
 8000580:	2001      	movs	r0, #1
 8000582:	fa00 f202 	lsl.w	r2, r0, r2
 8000586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000e100 	.word	0xe000e100

0800059c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db0a      	blt.n	80005c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <__NVIC_SetPriority+0x4c>)
 80005b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ba:	0112      	lsls	r2, r2, #4
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	440b      	add	r3, r1
 80005c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c4:	e00a      	b.n	80005dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4908      	ldr	r1, [pc, #32]	@ (80005ec <__NVIC_SetPriority+0x50>)
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	f003 030f 	and.w	r3, r3, #15
 80005d2:	3b04      	subs	r3, #4
 80005d4:	0112      	lsls	r2, r2, #4
 80005d6:	b2d2      	uxtb	r2, r2
 80005d8:	440b      	add	r3, r1
 80005da:	761a      	strb	r2, [r3, #24]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000e100 	.word	0xe000e100
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b089      	sub	sp, #36	@ 0x24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	f1c3 0307 	rsb	r3, r3, #7
 800060a:	2b04      	cmp	r3, #4
 800060c:	bf28      	it	cs
 800060e:	2304      	movcs	r3, #4
 8000610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	3304      	adds	r3, #4
 8000616:	2b06      	cmp	r3, #6
 8000618:	d902      	bls.n	8000620 <NVIC_EncodePriority+0x30>
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3b03      	subs	r3, #3
 800061e:	e000      	b.n	8000622 <NVIC_EncodePriority+0x32>
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	f04f 32ff 	mov.w	r2, #4294967295
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	43da      	mvns	r2, r3
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	401a      	ands	r2, r3
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000638:	f04f 31ff 	mov.w	r1, #4294967295
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	43d9      	mvns	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000648:	4313      	orrs	r3, r2
         );
}
 800064a:	4618      	mov	r0, r3
 800064c:	3724      	adds	r7, #36	@ 0x24
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff4c 	bl	80004fc <__NVIC_SetPriorityGrouping>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800067a:	f7ff ff63 	bl	8000544 <__NVIC_GetPriorityGrouping>
 800067e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	68b9      	ldr	r1, [r7, #8]
 8000684:	6978      	ldr	r0, [r7, #20]
 8000686:	f7ff ffb3 	bl	80005f0 <NVIC_EncodePriority>
 800068a:	4602      	mov	r2, r0
 800068c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff82 	bl	800059c <__NVIC_SetPriority>
}
 8000698:	bf00      	nop
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff56 	bl	8000560 <__NVIC_EnableIRQ>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80006c0:	f3bf 8f5f 	dmb	sy
}
 80006c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <HAL_MPU_Disable+0x28>)
 80006c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ca:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <HAL_MPU_Disable+0x28>)
 80006cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80006d0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80006d2:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <HAL_MPU_Disable+0x2c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	e000ed90 	.word	0xe000ed90

080006ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80006f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000724 <HAL_MPU_Enable+0x38>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80006fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <HAL_MPU_Enable+0x3c>)
 8000700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000702:	4a09      	ldr	r2, [pc, #36]	@ (8000728 <HAL_MPU_Enable+0x3c>)
 8000704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000708:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800070a:	f3bf 8f4f 	dsb	sy
}
 800070e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000710:	f3bf 8f6f 	isb	sy
}
 8000714:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed90 	.word	0xe000ed90
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	785a      	ldrb	r2, [r3, #1]
 8000738:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <HAL_MPU_ConfigRegion+0x7c>)
 800073a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800073c:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <HAL_MPU_ConfigRegion+0x7c>)
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	4a19      	ldr	r2, [pc, #100]	@ (80007a8 <HAL_MPU_ConfigRegion+0x7c>)
 8000742:	f023 0301 	bic.w	r3, r3, #1
 8000746:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000748:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <HAL_MPU_ConfigRegion+0x7c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7b1b      	ldrb	r3, [r3, #12]
 8000754:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7adb      	ldrb	r3, [r3, #11]
 800075a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800075c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	7a9b      	ldrb	r3, [r3, #10]
 8000762:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7b5b      	ldrb	r3, [r3, #13]
 800076a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800076c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	7b9b      	ldrb	r3, [r3, #14]
 8000772:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7bdb      	ldrb	r3, [r3, #15]
 800077a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800077c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7a5b      	ldrb	r3, [r3, #9]
 8000782:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000784:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	7a1b      	ldrb	r3, [r3, #8]
 800078a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800078c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000796:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000798:	6113      	str	r3, [r2, #16]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed90 	.word	0xe000ed90

080007ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e014      	b.n	80007e8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d105      	bne.n	80007d4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f00c f8bc 	bl	800c94c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2202      	movs	r2, #2
 80007d8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2201      	movs	r2, #1
 80007e4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d101      	bne.n	8000804 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	e046      	b.n	8000892 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	795b      	ldrb	r3, [r3, #5]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d101      	bne.n	8000810 <HAL_DAC_Start+0x20>
 800080c:	2302      	movs	r3, #2
 800080e:	e040      	b.n	8000892 <HAL_DAC_Start+0xa2>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2202      	movs	r2, #2
 800081a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6819      	ldr	r1, [r3, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	2201      	movs	r2, #1
 800082a:	409a      	lsls	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	430a      	orrs	r2, r1
 8000832:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10f      	bne.n	800085a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000844:	2b02      	cmp	r3, #2
 8000846:	d11d      	bne.n	8000884 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f042 0201 	orr.w	r2, r2, #1
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	e014      	b.n	8000884 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	2102      	movs	r1, #2
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	429a      	cmp	r2, r3
 8000872:	d107      	bne.n	8000884 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f042 0202 	orr.w	r2, r2, #2
 8000882:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008b4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d01d      	beq.n	80008fc <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d018      	beq.n	80008fc <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2204      	movs	r2, #4
 80008ce:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	f043 0201 	orr.w	r2, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80008f4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f851 	bl	800099e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d01d      	beq.n	8000942 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d018      	beq.n	8000942 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2204      	movs	r2, #4
 8000914:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	f043 0202 	orr.w	r2, r3, #2
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800092a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800093a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f97b 	bl	8000c38 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800094a:	b480      	push	{r7}
 800094c:	b087      	sub	sp, #28
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d101      	bne.n	8000966 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e015      	b.n	8000992 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d105      	bne.n	800097e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	3308      	adds	r3, #8
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e004      	b.n	8000988 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	3314      	adds	r3, #20
 8000986:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	461a      	mov	r2, r3
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	371c      	adds	r7, #28
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <HAL_DAC_ConfigChannel+0x1e>
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e12a      	b.n	8000c2c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	795b      	ldrb	r3, [r3, #5]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d101      	bne.n	80009e2 <HAL_DAC_ConfigChannel+0x2e>
 80009de:	2302      	movs	r3, #2
 80009e0:	e124      	b.n	8000c2c <HAL_DAC_ConfigChannel+0x278>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2201      	movs	r2, #1
 80009e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2202      	movs	r2, #2
 80009ec:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d17a      	bne.n	8000aec <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80009f6:	f7ff fd45 	bl	8000484 <HAL_GetTick>
 80009fa:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d13d      	bne.n	8000a7e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000a02:	e018      	b.n	8000a36 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000a04:	f7ff fd3e 	bl	8000484 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d911      	bls.n	8000a36 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a18:	4b86      	ldr	r3, [pc, #536]	@ (8000c34 <HAL_DAC_ConfigChannel+0x280>)
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00a      	beq.n	8000a36 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	f043 0208 	orr.w	r2, r3, #8
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2203      	movs	r2, #3
 8000a30:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e0fa      	b.n	8000c2c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a3c:	4b7d      	ldr	r3, [pc, #500]	@ (8000c34 <HAL_DAC_ConfigChannel+0x280>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1df      	bne.n	8000a04 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	6992      	ldr	r2, [r2, #24]
 8000a4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a4e:	e020      	b.n	8000a92 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000a50:	f7ff fd18 	bl	8000484 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d90f      	bls.n	8000a7e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	da0a      	bge.n	8000a7e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	f043 0208 	orr.w	r2, r3, #8
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2203      	movs	r2, #3
 8000a78:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e0d6      	b.n	8000c2c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dbe3      	blt.n	8000a50 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	6992      	ldr	r2, [r2, #24]
 8000a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	ea02 0103 	and.w	r1, r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	69da      	ldr	r2, [r3, #28]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	430a      	orrs	r2, r1
 8000abe:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	21ff      	movs	r1, #255	@ 0xff
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	ea02 0103 	and.w	r1, r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	6a1a      	ldr	r2, [r3, #32]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0310 	and.w	r3, r3, #16
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d11d      	bne.n	8000b30 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000afa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	221f      	movs	r2, #31
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b36:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	2207      	movs	r2, #7
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d102      	bne.n	8000b5a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b58:	e00f      	b.n	8000b7a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d102      	bne.n	8000b68 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000b62:	2301      	movs	r3, #1
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b66:	e008      	b.n	8000b7a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8000b70:	2301      	movs	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b74:	e001      	b.n	8000b7a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b86:	4313      	orrs	r3, r2
 8000b88:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6819      	ldr	r1, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f003 0310 	and.w	r3, r3, #16
 8000c0c:	22c0      	movs	r2, #192	@ 0xc0
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	400a      	ands	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2200      	movs	r2, #0
 8000c26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8000c28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3728      	adds	r7, #40	@ 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20008000 	.word	0x20008000

08000c38 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c5a:	4b89      	ldr	r3, [pc, #548]	@ (8000e80 <HAL_GPIO_Init+0x234>)
 8000c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c5e:	e194      	b.n	8000f8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	2101      	movs	r1, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 8186 	beq.w	8000f84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d005      	beq.n	8000c90 <HAL_GPIO_Init+0x44>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d130      	bne.n	8000cf2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	091b      	lsrs	r3, r3, #4
 8000cdc:	f003 0201 	and.w	r2, r3, #1
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d017      	beq.n	8000d2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d123      	bne.n	8000d82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	08da      	lsrs	r2, r3, #3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3208      	adds	r2, #8
 8000d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	220f      	movs	r2, #15
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	691a      	ldr	r2, [r3, #16]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	69b9      	ldr	r1, [r7, #24]
 8000d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0203 	and.w	r2, r3, #3
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 80e0 	beq.w	8000f84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <HAL_GPIO_Init+0x238>)
 8000dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dca:	4a2e      	ldr	r2, [pc, #184]	@ (8000e84 <HAL_GPIO_Init+0x238>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <HAL_GPIO_Init+0x238>)
 8000dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000de2:	4a29      	ldr	r2, [pc, #164]	@ (8000e88 <HAL_GPIO_Init+0x23c>)
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	220f      	movs	r2, #15
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a20      	ldr	r2, [pc, #128]	@ (8000e8c <HAL_GPIO_Init+0x240>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d052      	beq.n	8000eb4 <HAL_GPIO_Init+0x268>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1f      	ldr	r2, [pc, #124]	@ (8000e90 <HAL_GPIO_Init+0x244>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d031      	beq.n	8000e7a <HAL_GPIO_Init+0x22e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <HAL_GPIO_Init+0x248>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d02b      	beq.n	8000e76 <HAL_GPIO_Init+0x22a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1d      	ldr	r2, [pc, #116]	@ (8000e98 <HAL_GPIO_Init+0x24c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d025      	beq.n	8000e72 <HAL_GPIO_Init+0x226>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1c      	ldr	r2, [pc, #112]	@ (8000e9c <HAL_GPIO_Init+0x250>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d01f      	beq.n	8000e6e <HAL_GPIO_Init+0x222>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <HAL_GPIO_Init+0x254>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d019      	beq.n	8000e6a <HAL_GPIO_Init+0x21e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea4 <HAL_GPIO_Init+0x258>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0x21a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a19      	ldr	r2, [pc, #100]	@ (8000ea8 <HAL_GPIO_Init+0x25c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00d      	beq.n	8000e62 <HAL_GPIO_Init+0x216>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a18      	ldr	r2, [pc, #96]	@ (8000eac <HAL_GPIO_Init+0x260>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d007      	beq.n	8000e5e <HAL_GPIO_Init+0x212>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a17      	ldr	r2, [pc, #92]	@ (8000eb0 <HAL_GPIO_Init+0x264>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e56:	2309      	movs	r3, #9
 8000e58:	e02d      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	e02b      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e5e:	2308      	movs	r3, #8
 8000e60:	e029      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e62:	2307      	movs	r3, #7
 8000e64:	e027      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e025      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e023      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	e021      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e72:	2303      	movs	r3, #3
 8000e74:	e01f      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e01d      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e01b      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e7e:	bf00      	nop
 8000e80:	58000080 	.word	0x58000080
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58000400 	.word	0x58000400
 8000e8c:	58020000 	.word	0x58020000
 8000e90:	58020400 	.word	0x58020400
 8000e94:	58020800 	.word	0x58020800
 8000e98:	58020c00 	.word	0x58020c00
 8000e9c:	58021000 	.word	0x58021000
 8000ea0:	58021400 	.word	0x58021400
 8000ea4:	58021800 	.word	0x58021800
 8000ea8:	58021c00 	.word	0x58021c00
 8000eac:	58022000 	.word	0x58022000
 8000eb0:	58022400 	.word	0x58022400
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	69fa      	ldr	r2, [r7, #28]
 8000eb8:	f002 0203 	and.w	r2, r2, #3
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	4093      	lsls	r3, r2
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec6:	4938      	ldr	r1, [pc, #224]	@ (8000fa8 <HAL_GPIO_Init+0x35c>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000efa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	3301      	adds	r3, #1
 8000f88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f47f ae63 	bne.w	8000c60 <HAL_GPIO_Init+0x14>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3724      	adds	r7, #36	@ 0x24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	58000400 	.word	0x58000400

08000fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e001      	b.n	8000fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000ff8:	e003      	b.n	8001002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	041a      	lsls	r2, r3, #16
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800100e:	b480      	push	{r7}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001020:	887a      	ldrh	r2, [r7, #2]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4013      	ands	r3, r2
 8001026:	041a      	lsls	r2, r3, #16
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43d9      	mvns	r1, r3
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	400b      	ands	r3, r1
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	619a      	str	r2, [r3, #24]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800104c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001050:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d008      	beq.n	800106e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800105c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	4618      	mov	r0, r3
 800106a:	f00c f9e9 	bl	800d440 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e08b      	b.n	80011a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f00b fdec 	bl	800cc7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2224      	movs	r2, #36	@ 0x24
 80010a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	e006      	b.n	8001100 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d108      	bne.n	800111a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	e007      	b.n	800112a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001128:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6859      	ldr	r1, [r3, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <HAL_I2C_Init+0x134>)
 8001136:	430b      	orrs	r3, r1
 8001138:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001148:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69d9      	ldr	r1, [r3, #28]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2220      	movs	r2, #32
 800118e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	02008000 	.word	0x02008000

080011b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	817b      	strh	r3, [r7, #10]
 80011c2:	460b      	mov	r3, r1
 80011c4:	813b      	strh	r3, [r7, #8]
 80011c6:	4613      	mov	r3, r2
 80011c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	f040 80f9 	bne.w	80013ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <HAL_I2C_Mem_Write+0x34>
 80011de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d105      	bne.n	80011f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0ed      	b.n	80013cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_I2C_Mem_Write+0x4e>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e0e6      	b.n	80013cc <HAL_I2C_Mem_Write+0x21c>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001206:	f7ff f93d 	bl	8000484 <HAL_GetTick>
 800120a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2319      	movs	r3, #25
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 fac3 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e0d1      	b.n	80013cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2221      	movs	r2, #33	@ 0x21
 800122c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2240      	movs	r2, #64	@ 0x40
 8001234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a3a      	ldr	r2, [r7, #32]
 8001242:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001250:	88f8      	ldrh	r0, [r7, #6]
 8001252:	893a      	ldrh	r2, [r7, #8]
 8001254:	8979      	ldrh	r1, [r7, #10]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4603      	mov	r3, r0
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f9d3 	bl	800160c <I2C_RequestMemoryWrite>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0a9      	b.n	80013cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800127c:	b29b      	uxth	r3, r3
 800127e:	2bff      	cmp	r3, #255	@ 0xff
 8001280:	d90e      	bls.n	80012a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	22ff      	movs	r2, #255	@ 0xff
 8001286:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800128c:	b2da      	uxtb	r2, r3
 800128e:	8979      	ldrh	r1, [r7, #10]
 8001290:	2300      	movs	r3, #0
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 fc47 	bl	8001b2c <I2C_TransferConfig>
 800129e:	e00f      	b.n	80012c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	8979      	ldrh	r1, [r7, #10]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 fc36 	bl	8001b2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 fac6 	bl	8001856 <I2C_WaitOnTXISFlagUntilTimeout>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e07b      	b.n	80013cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	3b01      	subs	r3, #1
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d034      	beq.n	8001378 <HAL_I2C_Mem_Write+0x1c8>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001312:	2b00      	cmp	r3, #0
 8001314:	d130      	bne.n	8001378 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800131c:	2200      	movs	r2, #0
 800131e:	2180      	movs	r1, #128	@ 0x80
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 fa3f 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e04d      	b.n	80013cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001334:	b29b      	uxth	r3, r3
 8001336:	2bff      	cmp	r3, #255	@ 0xff
 8001338:	d90e      	bls.n	8001358 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	22ff      	movs	r2, #255	@ 0xff
 800133e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001344:	b2da      	uxtb	r2, r3
 8001346:	8979      	ldrh	r1, [r7, #10]
 8001348:	2300      	movs	r3, #0
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 fbeb 	bl	8001b2c <I2C_TransferConfig>
 8001356:	e00f      	b.n	8001378 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001366:	b2da      	uxtb	r2, r3
 8001368:	8979      	ldrh	r1, [r7, #10]
 800136a:	2300      	movs	r3, #0
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 fbda 	bl	8001b2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800137c:	b29b      	uxth	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d19e      	bne.n	80012c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 faac 	bl	80018e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e01a      	b.n	80013cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2220      	movs	r2, #32
 800139c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6859      	ldr	r1, [r3, #4]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_I2C_Mem_Write+0x224>)
 80013aa:	400b      	ands	r3, r1
 80013ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2220      	movs	r2, #32
 80013b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80013ca:	2302      	movs	r3, #2
  }
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	fe00e800 	.word	0xfe00e800

080013d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af02      	add	r7, sp, #8
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	4608      	mov	r0, r1
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	817b      	strh	r3, [r7, #10]
 80013ea:	460b      	mov	r3, r1
 80013ec:	813b      	strh	r3, [r7, #8]
 80013ee:	4613      	mov	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b20      	cmp	r3, #32
 80013fc:	f040 80fd 	bne.w	80015fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <HAL_I2C_Mem_Read+0x34>
 8001406:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001412:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0f1      	b.n	80015fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_I2C_Mem_Read+0x4e>
 8001422:	2302      	movs	r3, #2
 8001424:	e0ea      	b.n	80015fc <HAL_I2C_Mem_Read+0x224>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800142e:	f7ff f829 	bl	8000484 <HAL_GetTick>
 8001432:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2319      	movs	r3, #25
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 f9af 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0d5      	b.n	80015fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2222      	movs	r2, #34	@ 0x22
 8001454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2240      	movs	r2, #64	@ 0x40
 800145c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a3a      	ldr	r2, [r7, #32]
 800146a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001470:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001478:	88f8      	ldrh	r0, [r7, #6]
 800147a:	893a      	ldrh	r2, [r7, #8]
 800147c:	8979      	ldrh	r1, [r7, #10]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	4603      	mov	r3, r0
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 f913 	bl	80016b4 <I2C_RequestMemoryRead>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0ad      	b.n	80015fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2bff      	cmp	r3, #255	@ 0xff
 80014a8:	d90e      	bls.n	80014c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	22ff      	movs	r2, #255	@ 0xff
 80014ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	8979      	ldrh	r1, [r7, #10]
 80014b8:	4b52      	ldr	r3, [pc, #328]	@ (8001604 <HAL_I2C_Mem_Read+0x22c>)
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 fb33 	bl	8001b2c <I2C_TransferConfig>
 80014c6:	e00f      	b.n	80014e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	8979      	ldrh	r1, [r7, #10]
 80014da:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <HAL_I2C_Mem_Read+0x22c>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 fb22 	bl	8001b2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ee:	2200      	movs	r2, #0
 80014f0:	2104      	movs	r1, #4
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 f956 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e07c      	b.n	80015fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800151e:	3b01      	subs	r3, #1
 8001520:	b29a      	uxth	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	3b01      	subs	r3, #1
 800152e:	b29a      	uxth	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d034      	beq.n	80015a8 <HAL_I2C_Mem_Read+0x1d0>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001542:	2b00      	cmp	r3, #0
 8001544:	d130      	bne.n	80015a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154c:	2200      	movs	r2, #0
 800154e:	2180      	movs	r1, #128	@ 0x80
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f927 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e04d      	b.n	80015fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001564:	b29b      	uxth	r3, r3
 8001566:	2bff      	cmp	r3, #255	@ 0xff
 8001568:	d90e      	bls.n	8001588 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	22ff      	movs	r2, #255	@ 0xff
 800156e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001574:	b2da      	uxtb	r2, r3
 8001576:	8979      	ldrh	r1, [r7, #10]
 8001578:	2300      	movs	r3, #0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 fad3 	bl	8001b2c <I2C_TransferConfig>
 8001586:	e00f      	b.n	80015a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001596:	b2da      	uxtb	r2, r3
 8001598:	8979      	ldrh	r1, [r7, #10]
 800159a:	2300      	movs	r3, #0
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 fac2 	bl	8001b2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d19a      	bne.n	80014e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 f994 	bl	80018e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e01a      	b.n	80015fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2220      	movs	r2, #32
 80015cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_I2C_Mem_Read+0x230>)
 80015da:	400b      	ands	r3, r1
 80015dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2220      	movs	r2, #32
 80015e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80015fa:	2302      	movs	r3, #2
  }
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	80002400 	.word	0x80002400
 8001608:	fe00e800 	.word	0xfe00e800

0800160c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af02      	add	r7, sp, #8
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	4608      	mov	r0, r1
 8001616:	4611      	mov	r1, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4603      	mov	r3, r0
 800161c:	817b      	strh	r3, [r7, #10]
 800161e:	460b      	mov	r3, r1
 8001620:	813b      	strh	r3, [r7, #8]
 8001622:	4613      	mov	r3, r2
 8001624:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	8979      	ldrh	r1, [r7, #10]
 800162c:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <I2C_RequestMemoryWrite+0xa4>)
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 fa79 	bl	8001b2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	69b9      	ldr	r1, [r7, #24]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f909 	bl	8001856 <I2C_WaitOnTXISFlagUntilTimeout>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e02c      	b.n	80016a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001654:	893b      	ldrh	r3, [r7, #8]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28
 800165e:	e015      	b.n	800168c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001660:	893b      	ldrh	r3, [r7, #8]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b29b      	uxth	r3, r3
 8001666:	b2da      	uxtb	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	69b9      	ldr	r1, [r7, #24]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f8ef 	bl	8001856 <I2C_WaitOnTXISFlagUntilTimeout>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e012      	b.n	80016a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001682:	893b      	ldrh	r3, [r7, #8]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2200      	movs	r2, #0
 8001694:	2180      	movs	r1, #128	@ 0x80
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f884 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	80002000 	.word	0x80002000

080016b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	817b      	strh	r3, [r7, #10]
 80016c6:	460b      	mov	r3, r1
 80016c8:	813b      	strh	r3, [r7, #8]
 80016ca:	4613      	mov	r3, r2
 80016cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	8979      	ldrh	r1, [r7, #10]
 80016d4:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <I2C_RequestMemoryRead+0xa4>)
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2300      	movs	r3, #0
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 fa26 	bl	8001b2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	69b9      	ldr	r1, [r7, #24]
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 f8b6 	bl	8001856 <I2C_WaitOnTXISFlagUntilTimeout>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e02c      	b.n	800174e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016fa:	893b      	ldrh	r3, [r7, #8]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
 8001704:	e015      	b.n	8001732 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001706:	893b      	ldrh	r3, [r7, #8]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	b29b      	uxth	r3, r3
 800170c:	b2da      	uxtb	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f89c 	bl	8001856 <I2C_WaitOnTXISFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e012      	b.n	800174e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001728:	893b      	ldrh	r3, [r7, #8]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2200      	movs	r2, #0
 800173a:	2140      	movs	r1, #64	@ 0x40
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 f831 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	80002000 	.word	0x80002000

0800175c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b02      	cmp	r3, #2
 8001770:	d103      	bne.n	800177a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b01      	cmp	r3, #1
 8001786:	d007      	beq.n	8001798 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	619a      	str	r2, [r3, #24]
  }
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b4:	e03b      	b.n	800182e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f8d6 	bl	800196c <I2C_IsErrorOccurred>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e041      	b.n	800184e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d02d      	beq.n	800182e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d2:	f7fe fe57 	bl	8000484 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d302      	bcc.n	80017e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d122      	bne.n	800182e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	4013      	ands	r3, r2
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	429a      	cmp	r2, r3
 8001804:	d113      	bne.n	800182e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180a:	f043 0220 	orr.w	r2, r3, #32
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00f      	b.n	800184e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699a      	ldr	r2, [r3, #24]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4013      	ands	r3, r2
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	429a      	cmp	r2, r3
 800183c:	bf0c      	ite	eq
 800183e:	2301      	moveq	r3, #1
 8001840:	2300      	movne	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	429a      	cmp	r2, r3
 800184a:	d0b4      	beq.n	80017b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001862:	e033      	b.n	80018cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f87f 	bl	800196c <I2C_IsErrorOccurred>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e031      	b.n	80018dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187e:	d025      	beq.n	80018cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001880:	f7fe fe00 	bl	8000484 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	429a      	cmp	r2, r3
 800188e:	d302      	bcc.n	8001896 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d11a      	bne.n	80018cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d013      	beq.n	80018cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a8:	f043 0220 	orr.w	r2, r3, #32
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e007      	b.n	80018dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d1c4      	bne.n	8001864 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018f0:	e02f      	b.n	8001952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f838 	bl	800196c <I2C_IsErrorOccurred>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e02d      	b.n	8001962 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001906:	f7fe fdbd 	bl	8000484 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	429a      	cmp	r2, r3
 8001914:	d302      	bcc.n	800191c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d11a      	bne.n	8001952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0320 	and.w	r3, r3, #32
 8001926:	2b20      	cmp	r3, #32
 8001928:	d013      	beq.n	8001952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	f043 0220 	orr.w	r2, r3, #32
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2220      	movs	r2, #32
 800193a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e007      	b.n	8001962 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	2b20      	cmp	r3, #32
 800195e:	d1c8      	bne.n	80018f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	@ 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b00      	cmp	r3, #0
 8001996:	d068      	beq.n	8001a6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2210      	movs	r2, #16
 800199e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019a0:	e049      	b.n	8001a36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d045      	beq.n	8001a36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019aa:	f7fe fd6b 	bl	8000484 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d302      	bcc.n	80019c0 <I2C_IsErrorOccurred+0x54>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d13a      	bne.n	8001a36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019e2:	d121      	bne.n	8001a28 <I2C_IsErrorOccurred+0xbc>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019ea:	d01d      	beq.n	8001a28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80019ec:	7cfb      	ldrb	r3, [r7, #19]
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d01a      	beq.n	8001a28 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a02:	f7fe fd3f 	bl	8000484 <HAL_GetTick>
 8001a06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a08:	e00e      	b.n	8001a28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a0a:	f7fe fd3b 	bl	8000484 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b19      	cmp	r3, #25
 8001a16:	d907      	bls.n	8001a28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	f043 0320 	orr.w	r3, r3, #32
 8001a1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001a26:	e006      	b.n	8001a36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d1e9      	bne.n	8001a0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d003      	beq.n	8001a4c <I2C_IsErrorOccurred+0xe0>
 8001a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0aa      	beq.n	80019a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00b      	beq.n	8001ab6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ad0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01c      	beq.n	8001b1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f7ff fe3b 	bl	800175c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <I2C_IsErrorOccurred+0x1bc>)
 8001af2:	400b      	ands	r3, r1
 8001af4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2220      	movs	r2, #32
 8001b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3728      	adds	r7, #40	@ 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	fe00e800 	.word	0xfe00e800

08001b2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	817b      	strh	r3, [r7, #10]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b3e:	897b      	ldrh	r3, [r7, #10]
 8001b40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b44:	7a7b      	ldrb	r3, [r7, #9]
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	0d5b      	lsrs	r3, r3, #21
 8001b66:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001b6a:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <I2C_TransferConfig+0x60>)
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	ea02 0103 	and.w	r1, r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b7e:	bf00      	nop
 8001b80:	371c      	adds	r7, #28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	03ff63ff 	.word	0x03ff63ff

08001b90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d138      	bne.n	8001c18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e032      	b.n	8001c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2224      	movs	r2, #36	@ 0x24
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001be2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2220      	movs	r2, #32
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e000      	b.n	8001c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c18:	2302      	movs	r3, #2
  }
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d139      	bne.n	8001cb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e033      	b.n	8001cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2224      	movs	r2, #36	@ 0x24
 8001c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e000      	b.n	8001cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
  }
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af02      	add	r7, sp, #8
 8001cc4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0fe      	b.n	8001ece <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d106      	bne.n	8001cea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f00c fae5 	bl	800e2b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2203      	movs	r2, #3
 8001cee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f006 f9a9 	bl	800804e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7c1a      	ldrb	r2, [r3, #16]
 8001d04:	f88d 2000 	strb.w	r2, [sp]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d0c:	f006 f87a 	bl	8007e04 <USB_CoreInit>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0d5      	b.n	8001ece <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f006 f9a1 	bl	8008070 <USB_SetCurrentMode>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0c6      	b.n	8001ece <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e04a      	b.n	8001ddc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	3315      	adds	r3, #21
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	3314      	adds	r3, #20
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	b298      	uxth	r0, r3
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	332e      	adds	r3, #46	@ 0x2e
 8001d82:	4602      	mov	r2, r0
 8001d84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	3318      	adds	r3, #24
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	331c      	adds	r3, #28
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	3320      	adds	r3, #32
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	3324      	adds	r3, #36	@ 0x24
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	791b      	ldrb	r3, [r3, #4]
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3af      	bcc.n	8001d46 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	e044      	b.n	8001e76 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	3301      	adds	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	791b      	ldrb	r3, [r3, #4]
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d3b5      	bcc.n	8001dec <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7c1a      	ldrb	r2, [r3, #16]
 8001e88:	f88d 2000 	strb.w	r2, [sp]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e90:	f006 f93a 	bl	8008108 <USB_DevInit>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e013      	b.n	8001ece <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7b1b      	ldrb	r3, [r3, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d102      	bne.n	8001ec2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f001 f96d 	bl	800319c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f007 f979 	bl	80091be <USB_DevDisconnect>

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_PCD_Start+0x1c>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e022      	b.n	8001f38 <HAL_PCD_Start+0x62>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f006 f884 	bl	800802c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f007 f927 	bl	800917c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b08d      	sub	sp, #52	@ 0x34
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f007 f9e5 	bl	8009326 <USB_GetMode>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 84b9 	bne.w	80028d6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f007 f949 	bl	8009200 <USB_ReadInterrupts>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 84af 	beq.w	80028d4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f007 f936 	bl	8009200 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d107      	bne.n	8001fae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f002 0202 	and.w	r2, r2, #2
 8001fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f007 f924 	bl	8009200 <USB_ReadInterrupts>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d161      	bne.n	8002086 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0210 	bic.w	r2, r2, #16
 8001fd0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f003 020f 	and.w	r2, r3, #15
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	0c5b      	lsrs	r3, r3, #17
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d124      	bne.n	8002048 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d035      	beq.n	8002076 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002018:	b29b      	uxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	6a38      	ldr	r0, [r7, #32]
 800201e:	f006 ff5b 	bl	8008ed8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800202e:	441a      	add	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002040:	441a      	add	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	615a      	str	r2, [r3, #20]
 8002046:	e016      	b.n	8002076 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	0c5b      	lsrs	r3, r3, #17
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	2b06      	cmp	r3, #6
 8002052:	d110      	bne.n	8002076 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800205a:	2208      	movs	r2, #8
 800205c:	4619      	mov	r1, r3
 800205e:	6a38      	ldr	r0, [r7, #32]
 8002060:	f006 ff3a 	bl	8008ed8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002070:	441a      	add	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0210 	orr.w	r2, r2, #16
 8002084:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f007 f8b8 	bl	8009200 <USB_ReadInterrupts>
 8002090:	4603      	mov	r3, r0
 8002092:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002096:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800209a:	f040 80a7 	bne.w	80021ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f007 f8bd 	bl	8009226 <USB_ReadDevAllOutEpInterrupt>
 80020ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80020ae:	e099      	b.n	80021e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 808e 	beq.w	80021d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f007 f8e1 	bl	800928e <USB_ReadDevOutEPInterrupt>
 80020cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00c      	beq.n	80020f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020e4:	461a      	mov	r2, r3
 80020e6:	2301      	movs	r3, #1
 80020e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fecf 	bl	8002e90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00c      	beq.n	8002116 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002108:	461a      	mov	r2, r3
 800210a:	2308      	movs	r3, #8
 800210c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800210e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 ffa5 	bl	8003060 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800212c:	461a      	mov	r2, r3
 800212e:	2310      	movs	r3, #16
 8002130:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d030      	beq.n	800219e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002144:	2b80      	cmp	r3, #128	@ 0x80
 8002146:	d109      	bne.n	800215c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800215a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800215c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	3304      	adds	r3, #4
 8002170:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	78db      	ldrb	r3, [r3, #3]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d108      	bne.n	800218c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2200      	movs	r2, #0
 800217e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	b2db      	uxtb	r3, r3
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f00c f9ba 	bl	800e500 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	4413      	add	r3, r2
 8002194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002198:	461a      	mov	r2, r3
 800219a:	2302      	movs	r3, #2
 800219c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b4:	461a      	mov	r2, r3
 80021b6:	2320      	movs	r3, #32
 80021b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d009      	beq.n	80021d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d0:	461a      	mov	r2, r3
 80021d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	3301      	adds	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80021de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80021e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f47f af62 	bne.w	80020b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f007 f805 	bl	8009200 <USB_ReadInterrupts>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002200:	f040 80db 	bne.w	80023ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f007 f826 	bl	800925a <USB_ReadDevAllInEpInterrupt>
 800220e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002214:	e0cd      	b.n	80023b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80c2 	beq.w	80023a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f007 f84c 	bl	80092ca <USB_ReadDevInEPInterrupt>
 8002232:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d057      	beq.n	80022ee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	2201      	movs	r2, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	69f9      	ldr	r1, [r7, #28]
 800225a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800225e:	4013      	ands	r3, r2
 8002260:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800226e:	461a      	mov	r2, r3
 8002270:	2301      	movs	r3, #1
 8002272:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	799b      	ldrb	r3, [r3, #6]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d132      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3320      	adds	r3, #32
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4403      	add	r3, r0
 800229c:	331c      	adds	r3, #28
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4419      	add	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4403      	add	r3, r0
 80022b0:	3320      	adds	r3, #32
 80022b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d113      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x3a2>
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3324      	adds	r3, #36	@ 0x24
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d108      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022da:	461a      	mov	r2, r3
 80022dc:	2101      	movs	r1, #1
 80022de:	f007 f855 	bl	800938c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4619      	mov	r1, r3
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f00c f884 	bl	800e3f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002304:	461a      	mov	r2, r3
 8002306:	2308      	movs	r3, #8
 8002308:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002320:	461a      	mov	r2, r3
 8002322:	2310      	movs	r3, #16
 8002324:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800233c:	461a      	mov	r2, r3
 800233e:	2340      	movs	r3, #64	@ 0x40
 8002340:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d023      	beq.n	8002394 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800234c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800234e:	6a38      	ldr	r0, [r7, #32]
 8002350:	f006 f838 	bl	80083c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	3310      	adds	r3, #16
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	3304      	adds	r3, #4
 8002366:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	78db      	ldrb	r3, [r3, #3]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d108      	bne.n	8002382 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2200      	movs	r2, #0
 8002374:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	b2db      	uxtb	r3, r3
 800237a:	4619      	mov	r1, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f00c f8d1 	bl	800e524 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	4413      	add	r3, r2
 800238a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800238e:	461a      	mov	r2, r3
 8002390:	2302      	movs	r3, #2
 8002392:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800239e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fce8 	bl	8002d76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a8:	3301      	adds	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80023ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80023b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f47f af2e 	bne.w	8002216 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f006 ff1e 	bl	8009200 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023ce:	d122      	bne.n	8002416 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d108      	bne.n	8002400 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023f6:	2100      	movs	r1, #0
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fef3 	bl	80031e4 <HAL_PCDEx_LPM_Callback>
 80023fe:	e002      	b.n	8002406 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f00c f86f 	bl	800e4e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f006 fef0 	bl	8009200 <USB_ReadInterrupts>
 8002420:	4603      	mov	r3, r0
 8002422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800242a:	d112      	bne.n	8002452 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d102      	bne.n	8002442 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f00c f82b 	bl	800e498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002450:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f006 fed2 	bl	8009200 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002462:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002466:	d121      	bne.n	80024ac <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002476:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800247e:	2b00      	cmp	r3, #0
 8002480:	d111      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	f003 020f 	and.w	r2, r3, #15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800249c:	2101      	movs	r1, #1
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fea0 	bl	80031e4 <HAL_PCDEx_LPM_Callback>
 80024a4:	e002      	b.n	80024ac <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f00b fff6 	bl	800e498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f006 fea5 	bl	8009200 <USB_ReadInterrupts>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c0:	f040 80b7 	bne.w	8002632 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2110      	movs	r1, #16
 80024de:	4618      	mov	r0, r3
 80024e0:	f005 ff70 	bl	80083c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024e8:	e046      	b.n	8002578 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024f6:	461a      	mov	r2, r3
 80024f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80024fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800250e:	0151      	lsls	r1, r2, #5
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	440a      	add	r2, r1
 8002514:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002518:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800251c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800251e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800252a:	461a      	mov	r2, r3
 800252c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002530:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002542:	0151      	lsls	r1, r2, #5
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	440a      	add	r2, r1
 8002548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800254c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002550:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002562:	0151      	lsls	r1, r2, #5
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	440a      	add	r2, r1
 8002568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800256c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002570:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002574:	3301      	adds	r3, #1
 8002576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	791b      	ldrb	r3, [r3, #4]
 800257c:	461a      	mov	r2, r3
 800257e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002580:	4293      	cmp	r3, r2
 8002582:	d3b2      	bcc.n	80024ea <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002592:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002596:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7bdb      	ldrb	r3, [r3, #15]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d016      	beq.n	80025ce <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025b0:	f043 030b 	orr.w	r3, r3, #11
 80025b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025c6:	f043 030b 	orr.w	r3, r3, #11
 80025ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80025cc:	e015      	b.n	80025fa <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025dc:	4619      	mov	r1, r3
 80025de:	f242 032b 	movw	r3, #8235	@ 0x202b
 80025e2:	4313      	orrs	r3, r2
 80025e4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025f4:	f043 030b 	orr.w	r3, r3, #11
 80025f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002608:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800260c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800261c:	461a      	mov	r2, r3
 800261e:	f006 feb5 	bl	800938c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f006 fde2 	bl	8009200 <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002646:	d123      	bne.n	8002690 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f006 fe79 	bl	8009344 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f005 ff2d 	bl	80084b6 <USB_GetDevSpeed>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681c      	ldr	r4, [r3, #0]
 8002668:	f001 fd9c 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 800266c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002672:	461a      	mov	r2, r3
 8002674:	4620      	mov	r0, r4
 8002676:	f005 fc37 	bl	8007ee8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f00b fee3 	bl	800e446 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800268e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f006 fdb3 	bl	8009200 <USB_ReadInterrupts>
 800269a:	4603      	mov	r3, r0
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d10a      	bne.n	80026ba <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f00b fec0 	bl	800e42a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f002 0208 	and.w	r2, r2, #8
 80026b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f006 fd9e 	bl	8009200 <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ca:	2b80      	cmp	r3, #128	@ 0x80
 80026cc:	d123      	bne.n	8002716 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026da:	2301      	movs	r3, #1
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026de:	e014      	b.n	800270a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fb08 	bl	8002d14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	3301      	adds	r3, #1
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	791b      	ldrb	r3, [r3, #4]
 800270e:	461a      	mov	r2, r3
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	4293      	cmp	r3, r2
 8002714:	d3e4      	bcc.n	80026e0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f006 fd70 	bl	8009200 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800272a:	d13c      	bne.n	80027a6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800272c:	2301      	movs	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002730:	e02b      	b.n	800278a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3318      	adds	r3, #24
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d115      	bne.n	8002784 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002758:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	da12      	bge.n	8002784 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3317      	adds	r3, #23
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fac8 	bl	8002d14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	3301      	adds	r3, #1
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	791b      	ldrb	r3, [r3, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	4293      	cmp	r3, r2
 8002794:	d3cd      	bcc.n	8002732 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80027a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f006 fd28 	bl	8009200 <USB_ReadInterrupts>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027ba:	d156      	bne.n	800286a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027bc:	2301      	movs	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c0:	e045      	b.n	800284e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d12e      	bne.n	8002848 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	da2b      	bge.n	8002848 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80027fc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002800:	429a      	cmp	r2, r3
 8002802:	d121      	bne.n	8002848 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002840:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002844:	6053      	str	r3, [r2, #4]
            break;
 8002846:	e008      	b.n	800285a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	3301      	adds	r3, #1
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	791b      	ldrb	r3, [r3, #4]
 8002852:	461a      	mov	r2, r3
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	4293      	cmp	r3, r2
 8002858:	d3b3      	bcc.n	80027c2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f006 fcc6 	bl	8009200 <USB_ReadInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800287e:	d10a      	bne.n	8002896 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f00b fe61 	bl	800e548 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f006 fcb0 	bl	8009200 <USB_ReadInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d115      	bne.n	80028d6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f00b fe51 	bl	800e564 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e000      	b.n	80028d6 <HAL_PCD_IRQHandler+0x996>
      return;
 80028d4:	bf00      	nop
    }
  }
}
 80028d6:	3734      	adds	r7, #52	@ 0x34
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}

080028dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_PCD_SetAddress+0x1a>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e012      	b.n	800291c <HAL_PCD_SetAddress+0x40>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f006 fc0f 	bl	8009130 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	4608      	mov	r0, r1
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	70fb      	strb	r3, [r7, #3]
 8002936:	460b      	mov	r3, r1
 8002938:	803b      	strh	r3, [r7, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002946:	2b00      	cmp	r3, #0
 8002948:	da0f      	bge.n	800296a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 020f 	and.w	r2, r3, #15
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	3310      	adds	r3, #16
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	3304      	adds	r3, #4
 8002960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	705a      	strb	r2, [r3, #1]
 8002968:	e00f      	b.n	800298a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	f003 020f 	and.w	r2, r3, #15
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002996:	883a      	ldrh	r2, [r7, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	78ba      	ldrb	r2, [r7, #2]
 80029a0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029b4:	78bb      	ldrb	r3, [r7, #2]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d102      	bne.n	80029c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_PCD_EP_Open+0xaa>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e00e      	b.n	80029ec <HAL_PCD_EP_Open+0xc8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68f9      	ldr	r1, [r7, #12]
 80029dc:	4618      	mov	r0, r3
 80029de:	f005 fd8f 	bl	8008500 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80029ea:	7afb      	ldrb	r3, [r7, #11]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	da0f      	bge.n	8002a28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	f003 020f 	and.w	r2, r3, #15
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	3310      	adds	r3, #16
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	705a      	strb	r2, [r3, #1]
 8002a26:	e00f      	b.n	8002a48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	f003 020f 	and.w	r2, r3, #15
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3304      	adds	r3, #4
 8002a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_PCD_EP_Close+0x6e>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e00e      	b.n	8002a80 <HAL_PCD_EP_Close+0x8c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68f9      	ldr	r1, [r7, #12]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f005 fdcd 	bl	8008610 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	460b      	mov	r3, r1
 8002a96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	799b      	ldrb	r3, [r3, #6]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d102      	bne.n	8002ae4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	799b      	ldrb	r3, [r3, #6]
 8002aec:	461a      	mov	r2, r3
 8002aee:	6979      	ldr	r1, [r7, #20]
 8002af0:	f005 fe6a 	bl	80087c8 <USB_EPStartXfer>

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002b20:	681b      	ldr	r3, [r3, #0]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4413      	add	r3, r2
 8002b52:	3304      	adds	r3, #4
 8002b54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b6e:	7afb      	ldrb	r3, [r7, #11]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	799b      	ldrb	r3, [r3, #6]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d102      	bne.n	8002b88 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	799b      	ldrb	r3, [r3, #6]
 8002b90:	461a      	mov	r2, r3
 8002b92:	6979      	ldr	r1, [r7, #20]
 8002b94:	f005 fe18 	bl	80087c8 <USB_EPStartXfer>

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	7912      	ldrb	r2, [r2, #4]
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e04f      	b.n	8002c60 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	da0f      	bge.n	8002be8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	3310      	adds	r3, #16
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	705a      	strb	r2, [r3, #1]
 8002be6:	e00d      	b.n	8002c04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_PCD_EP_SetStall+0x82>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e01d      	b.n	8002c60 <HAL_PCD_EP_SetStall+0xbe>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f006 f9a8 	bl	8008f88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7999      	ldrb	r1, [r3, #6]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c50:	461a      	mov	r2, r3
 8002c52:	f006 fb9b 	bl	800938c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	7912      	ldrb	r2, [r2, #4]
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e042      	b.n	8002d0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da0f      	bge.n	8002cae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 020f 	and.w	r2, r3, #15
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	3310      	adds	r3, #16
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	705a      	strb	r2, [r3, #1]
 8002cac:	e00f      	b.n	8002cce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_PCD_EP_ClrStall+0x86>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e00e      	b.n	8002d0c <HAL_PCD_EP_ClrStall+0xa4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f006 f9b1 	bl	8009064 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da0c      	bge.n	8002d42 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3310      	adds	r3, #16
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e00c      	b.n	8002d5c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f003 020f 	and.w	r2, r3, #15
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68f9      	ldr	r1, [r7, #12]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f005 ffd0 	bl	8008d08 <USB_EPStopXfer>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b08a      	sub	sp, #40	@ 0x28
 8002d7a:	af02      	add	r7, sp, #8
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	3310      	adds	r3, #16
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d901      	bls.n	8002dae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06b      	b.n	8002e86 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d902      	bls.n	8002dca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3303      	adds	r3, #3
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dd2:	e02a      	b.n	8002e2a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d902      	bls.n	8002df0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3303      	adds	r3, #3
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68d9      	ldr	r1, [r3, #12]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6978      	ldr	r0, [r7, #20]
 8002e0e:	f006 f825 	bl	8008e5c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	441a      	add	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	441a      	add	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d809      	bhi.n	8002e54 <PCD_WriteEmptyTxFifo+0xde>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d203      	bcs.n	8002e54 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1bf      	bne.n	8002dd4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d811      	bhi.n	8002e84 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	2201      	movs	r2, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	6939      	ldr	r1, [r7, #16]
 8002e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e80:	4013      	ands	r3, r2
 8002e82:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	333c      	adds	r3, #60	@ 0x3c
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	799b      	ldrb	r3, [r3, #6]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d17b      	bne.n	8002fbe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4a61      	ldr	r2, [pc, #388]	@ (8003058 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	f240 80b9 	bls.w	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80b3 	beq.w	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ef8:	6093      	str	r3, [r2, #8]
 8002efa:	e0a7      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f12:	461a      	mov	r2, r3
 8002f14:	2320      	movs	r3, #32
 8002f16:	6093      	str	r3, [r2, #8]
 8002f18:	e098      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 8093 	bne.w	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	4a4b      	ldr	r2, [pc, #300]	@ (8003058 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d90f      	bls.n	8002f4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f44:	461a      	mov	r2, r3
 8002f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f4a:	6093      	str	r3, [r2, #8]
 8002f4c:	e07e      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	0159      	lsls	r1, r3, #5
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	440b      	add	r3, r1
 8002f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d114      	bne.n	8002fb0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	f006 f9f6 	bl	800938c <USB_EP0_OutStart>
 8002fa0:	e006      	b.n	8002fb0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	441a      	add	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f00b fa02 	bl	800e3c0 <HAL_PCD_DataOutStageCallback>
 8002fbc:	e046      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	4a26      	ldr	r2, [pc, #152]	@ (800305c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d124      	bne.n	8003010 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fe2:	6093      	str	r3, [r2, #8]
 8002fe4:	e032      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2320      	movs	r3, #32
 8003000:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f00b f9d9 	bl	800e3c0 <HAL_PCD_DataOutStageCallback>
 800300e:	e01d      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d114      	bne.n	8003040 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d108      	bne.n	8003040 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003038:	461a      	mov	r2, r3
 800303a:	2100      	movs	r1, #0
 800303c:	f006 f9a6 	bl	800938c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f00b f9ba 	bl	800e3c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	4f54300a 	.word	0x4f54300a
 800305c:	4f54310a 	.word	0x4f54310a

08003060 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	333c      	adds	r3, #60	@ 0x3c
 8003078:	3304      	adds	r3, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a15      	ldr	r2, [pc, #84]	@ (80030e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d90e      	bls.n	80030b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ac:	461a      	mov	r2, r3
 80030ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f00b f971 	bl	800e39c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d90c      	bls.n	80030dc <PCD_EP_OutSetupPacket_int+0x7c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	799b      	ldrb	r3, [r3, #6]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d108      	bne.n	80030dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030d4:	461a      	mov	r2, r3
 80030d6:	2101      	movs	r1, #1
 80030d8:	f006 f958 	bl	800938c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	4f54300a 	.word	0x4f54300a

080030ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	70fb      	strb	r3, [r7, #3]
 80030f8:	4613      	mov	r3, r2
 80030fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800310a:	883b      	ldrh	r3, [r7, #0]
 800310c:	0419      	lsls	r1, r3, #16
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	430a      	orrs	r2, r1
 8003116:	629a      	str	r2, [r3, #40]	@ 0x28
 8003118:	e028      	b.n	800316c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4413      	add	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e00d      	b.n	800314a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	3340      	adds	r3, #64	@ 0x40
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	3301      	adds	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	3b01      	subs	r3, #1
 8003150:	429a      	cmp	r2, r3
 8003152:	d3ec      	bcc.n	800312e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003154:	883b      	ldrh	r3, [r7, #0]
 8003156:	0418      	lsls	r0, r3, #16
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6819      	ldr	r1, [r3, #0]
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	3b01      	subs	r3, #1
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	4302      	orrs	r2, r0
 8003164:	3340      	adds	r3, #64	@ 0x40
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031ca:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	10000003 	.word	0x10000003

080031e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003204:	4b19      	ldr	r3, [pc, #100]	@ (800326c <HAL_PWREx_ConfigSupply+0x70>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d00a      	beq.n	8003226 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003210:	4b16      	ldr	r3, [pc, #88]	@ (800326c <HAL_PWREx_ConfigSupply+0x70>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	d001      	beq.n	8003222 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e01f      	b.n	8003262 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e01d      	b.n	8003262 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003226:	4b11      	ldr	r3, [pc, #68]	@ (800326c <HAL_PWREx_ConfigSupply+0x70>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f023 0207 	bic.w	r2, r3, #7
 800322e:	490f      	ldr	r1, [pc, #60]	@ (800326c <HAL_PWREx_ConfigSupply+0x70>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4313      	orrs	r3, r2
 8003234:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003236:	f7fd f925 	bl	8000484 <HAL_GetTick>
 800323a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800323c:	e009      	b.n	8003252 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800323e:	f7fd f921 	bl	8000484 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800324c:	d901      	bls.n	8003252 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e007      	b.n	8003262 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003252:	4b06      	ldr	r3, [pc, #24]	@ (800326c <HAL_PWREx_ConfigSupply+0x70>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800325a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800325e:	d1ee      	bne.n	800323e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	58024800 	.word	0x58024800

08003270 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a04      	ldr	r2, [pc, #16]	@ (800328c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800327e:	60d3      	str	r3, [r2, #12]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	58024800 	.word	0x58024800

08003290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08c      	sub	sp, #48	@ 0x30
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f000 bc48 	b.w	8003b34 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8088 	beq.w	80033c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b2:	4b99      	ldr	r3, [pc, #612]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032bc:	4b96      	ldr	r3, [pc, #600]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80032c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d007      	beq.n	80032d8 <HAL_RCC_OscConfig+0x48>
 80032c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ca:	2b18      	cmp	r3, #24
 80032cc:	d111      	bne.n	80032f2 <HAL_RCC_OscConfig+0x62>
 80032ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d06d      	beq.n	80033c0 <HAL_RCC_OscConfig+0x130>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d169      	bne.n	80033c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f000 bc21 	b.w	8003b34 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032fa:	d106      	bne.n	800330a <HAL_RCC_OscConfig+0x7a>
 80032fc:	4b86      	ldr	r3, [pc, #536]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a85      	ldr	r2, [pc, #532]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	e02e      	b.n	8003368 <HAL_RCC_OscConfig+0xd8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x9c>
 8003312:	4b81      	ldr	r3, [pc, #516]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a80      	ldr	r2, [pc, #512]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b7e      	ldr	r3, [pc, #504]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7d      	ldr	r2, [pc, #500]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003324:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e01d      	b.n	8003368 <HAL_RCC_OscConfig+0xd8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0xc0>
 8003336:	4b78      	ldr	r3, [pc, #480]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a77      	ldr	r2, [pc, #476]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 800333c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b75      	ldr	r3, [pc, #468]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a74      	ldr	r2, [pc, #464]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e00b      	b.n	8003368 <HAL_RCC_OscConfig+0xd8>
 8003350:	4b71      	ldr	r3, [pc, #452]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a70      	ldr	r2, [pc, #448]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b6e      	ldr	r3, [pc, #440]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6d      	ldr	r2, [pc, #436]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fd f888 	bl	8000484 <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fd f884 	bl	8000484 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	@ 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e3d4      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800338a:	4b63      	ldr	r3, [pc, #396]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0xe8>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd f874 	bl	8000484 <HAL_GetTick>
 800339c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fd f870 	bl	8000484 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	@ 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e3c0      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033b2:	4b59      	ldr	r3, [pc, #356]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x110>
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80ca 	beq.w	8003564 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d0:	4b51      	ldr	r3, [pc, #324]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033da:	4b4f      	ldr	r3, [pc, #316]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_RCC_OscConfig+0x166>
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	2b18      	cmp	r3, #24
 80033ea:	d156      	bne.n	800349a <HAL_RCC_OscConfig+0x20a>
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d151      	bne.n	800349a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f6:	4b48      	ldr	r3, [pc, #288]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_RCC_OscConfig+0x17e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e392      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800340e:	4b42      	ldr	r3, [pc, #264]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 0219 	bic.w	r2, r3, #25
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	493f      	ldr	r1, [pc, #252]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fd f830 	bl	8000484 <HAL_GetTick>
 8003424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003428:	f7fd f82c 	bl	8000484 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e37c      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800343a:	4b37      	ldr	r3, [pc, #220]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	f7fd f84d 	bl	80004e4 <HAL_GetREVID>
 800344a:	4603      	mov	r3, r0
 800344c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003450:	4293      	cmp	r3, r2
 8003452:	d817      	bhi.n	8003484 <HAL_RCC_OscConfig+0x1f4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b40      	cmp	r3, #64	@ 0x40
 800345a:	d108      	bne.n	800346e <HAL_RCC_OscConfig+0x1de>
 800345c:	4b2e      	ldr	r3, [pc, #184]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003464:	4a2c      	ldr	r2, [pc, #176]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800346a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800346c:	e07a      	b.n	8003564 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346e:	4b2a      	ldr	r3, [pc, #168]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	031b      	lsls	r3, r3, #12
 800347c:	4926      	ldr	r1, [pc, #152]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003482:	e06f      	b.n	8003564 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b24      	ldr	r3, [pc, #144]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	4921      	ldr	r1, [pc, #132]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003498:	e064      	b.n	8003564 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d047      	beq.n	8003532 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 0219 	bic.w	r2, r3, #25
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	491a      	ldr	r1, [pc, #104]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fc ffe6 	bl	8000484 <HAL_GetTick>
 80034b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fc ffe2 	bl	8000484 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e332      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034ce:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	f7fd f803 	bl	80004e4 <HAL_GetREVID>
 80034de:	4603      	mov	r3, r0
 80034e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d819      	bhi.n	800351c <HAL_RCC_OscConfig+0x28c>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b40      	cmp	r3, #64	@ 0x40
 80034ee:	d108      	bne.n	8003502 <HAL_RCC_OscConfig+0x272>
 80034f0:	4b09      	ldr	r3, [pc, #36]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80034f8:	4a07      	ldr	r2, [pc, #28]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 80034fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034fe:	6053      	str	r3, [r2, #4]
 8003500:	e030      	b.n	8003564 <HAL_RCC_OscConfig+0x2d4>
 8003502:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	031b      	lsls	r3, r3, #12
 8003510:	4901      	ldr	r1, [pc, #4]	@ (8003518 <HAL_RCC_OscConfig+0x288>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
 8003516:	e025      	b.n	8003564 <HAL_RCC_OscConfig+0x2d4>
 8003518:	58024400 	.word	0x58024400
 800351c:	4b9a      	ldr	r3, [pc, #616]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	4997      	ldr	r1, [pc, #604]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
 8003530:	e018      	b.n	8003564 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b95      	ldr	r3, [pc, #596]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a94      	ldr	r2, [pc, #592]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fc ffa1 	bl	8000484 <HAL_GetTick>
 8003542:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003546:	f7fc ff9d 	bl	8000484 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e2ed      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003558:	4b8b      	ldr	r3, [pc, #556]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a9 	beq.w	80036c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003572:	4b85      	ldr	r3, [pc, #532]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800357a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800357c:	4b82      	ldr	r3, [pc, #520]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003580:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b08      	cmp	r3, #8
 8003586:	d007      	beq.n	8003598 <HAL_RCC_OscConfig+0x308>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b18      	cmp	r3, #24
 800358c:	d13a      	bne.n	8003604 <HAL_RCC_OscConfig+0x374>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d135      	bne.n	8003604 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003598:	4b7b      	ldr	r3, [pc, #492]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_OscConfig+0x320>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	2b80      	cmp	r3, #128	@ 0x80
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e2c1      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035b0:	f7fc ff98 	bl	80004e4 <HAL_GetREVID>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d817      	bhi.n	80035ee <HAL_RCC_OscConfig+0x35e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d108      	bne.n	80035d8 <HAL_RCC_OscConfig+0x348>
 80035c6:	4b70      	ldr	r3, [pc, #448]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80035ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 80035d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035d6:	e075      	b.n	80036c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	069b      	lsls	r3, r3, #26
 80035e6:	4968      	ldr	r1, [pc, #416]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035ec:	e06a      	b.n	80036c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035ee:	4b66      	ldr	r3, [pc, #408]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	061b      	lsls	r3, r3, #24
 80035fc:	4962      	ldr	r1, [pc, #392]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003602:	e05f      	b.n	80036c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d042      	beq.n	8003692 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800360c:	4b5e      	ldr	r3, [pc, #376]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a5d      	ldr	r2, [pc, #372]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fc ff34 	bl	8000484 <HAL_GetTick>
 800361c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003620:	f7fc ff30 	bl	8000484 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e280      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003632:	4b55      	ldr	r3, [pc, #340]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800363e:	f7fc ff51 	bl	80004e4 <HAL_GetREVID>
 8003642:	4603      	mov	r3, r0
 8003644:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003648:	4293      	cmp	r3, r2
 800364a:	d817      	bhi.n	800367c <HAL_RCC_OscConfig+0x3ec>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	2b20      	cmp	r3, #32
 8003652:	d108      	bne.n	8003666 <HAL_RCC_OscConfig+0x3d6>
 8003654:	4b4c      	ldr	r3, [pc, #304]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800365c:	4a4a      	ldr	r2, [pc, #296]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800365e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003662:	6053      	str	r3, [r2, #4]
 8003664:	e02e      	b.n	80036c4 <HAL_RCC_OscConfig+0x434>
 8003666:	4b48      	ldr	r3, [pc, #288]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	069b      	lsls	r3, r3, #26
 8003674:	4944      	ldr	r1, [pc, #272]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
 800367a:	e023      	b.n	80036c4 <HAL_RCC_OscConfig+0x434>
 800367c:	4b42      	ldr	r3, [pc, #264]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	493f      	ldr	r1, [pc, #252]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800368c:	4313      	orrs	r3, r2
 800368e:	60cb      	str	r3, [r1, #12]
 8003690:	e018      	b.n	80036c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003692:	4b3d      	ldr	r3, [pc, #244]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3c      	ldr	r2, [pc, #240]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003698:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800369c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fc fef1 	bl	8000484 <HAL_GetTick>
 80036a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036a6:	f7fc feed 	bl	8000484 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e23d      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036b8:	4b33      	ldr	r3, [pc, #204]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d036      	beq.n	800373e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d019      	beq.n	800370c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 80036da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fc fece 	bl	8000484 <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fc feca 	bl	8000484 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e21a      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036fe:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x45c>
 800370a:	e018      	b.n	800373e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370c:	4b1e      	ldr	r3, [pc, #120]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003710:	4a1d      	ldr	r2, [pc, #116]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fc feb4 	bl	8000484 <HAL_GetTick>
 800371c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003720:	f7fc feb0 	bl	8000484 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e200      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003732:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d039      	beq.n	80037be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01c      	beq.n	800378c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003752:	4b0d      	ldr	r3, [pc, #52]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a0c      	ldr	r2, [pc, #48]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 8003758:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800375c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800375e:	f7fc fe91 	bl	8000484 <HAL_GetTick>
 8003762:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003766:	f7fc fe8d 	bl	8000484 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e1dd      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003778:	4b03      	ldr	r3, [pc, #12]	@ (8003788 <HAL_RCC_OscConfig+0x4f8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x4d6>
 8003784:	e01b      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 8003786:	bf00      	nop
 8003788:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800378c:	4b9b      	ldr	r3, [pc, #620]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a9a      	ldr	r2, [pc, #616]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003796:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003798:	f7fc fe74 	bl	8000484 <HAL_GetTick>
 800379c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a0:	f7fc fe70 	bl	8000484 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e1c0      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037b2:	4b92      	ldr	r3, [pc, #584]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8081 	beq.w	80038ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003a00 <HAL_RCC_OscConfig+0x770>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003a00 <HAL_RCC_OscConfig+0x770>)
 80037d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037d8:	f7fc fe54 	bl	8000484 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e0:	f7fc fe50 	bl	8000484 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	@ 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e1a0      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037f2:	4b83      	ldr	r3, [pc, #524]	@ (8003a00 <HAL_RCC_OscConfig+0x770>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d106      	bne.n	8003814 <HAL_RCC_OscConfig+0x584>
 8003806:	4b7d      	ldr	r3, [pc, #500]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380a:	4a7c      	ldr	r2, [pc, #496]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6713      	str	r3, [r2, #112]	@ 0x70
 8003812:	e02d      	b.n	8003870 <HAL_RCC_OscConfig+0x5e0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10c      	bne.n	8003836 <HAL_RCC_OscConfig+0x5a6>
 800381c:	4b77      	ldr	r3, [pc, #476]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003820:	4a76      	ldr	r2, [pc, #472]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6713      	str	r3, [r2, #112]	@ 0x70
 8003828:	4b74      	ldr	r3, [pc, #464]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382c:	4a73      	ldr	r2, [pc, #460]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800382e:	f023 0304 	bic.w	r3, r3, #4
 8003832:	6713      	str	r3, [r2, #112]	@ 0x70
 8003834:	e01c      	b.n	8003870 <HAL_RCC_OscConfig+0x5e0>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b05      	cmp	r3, #5
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0x5c8>
 800383e:	4b6f      	ldr	r3, [pc, #444]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	4a6e      	ldr	r2, [pc, #440]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	6713      	str	r3, [r2, #112]	@ 0x70
 800384a:	4b6c      	ldr	r3, [pc, #432]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	4a6b      	ldr	r2, [pc, #428]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6713      	str	r3, [r2, #112]	@ 0x70
 8003856:	e00b      	b.n	8003870 <HAL_RCC_OscConfig+0x5e0>
 8003858:	4b68      	ldr	r3, [pc, #416]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	4a67      	ldr	r2, [pc, #412]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70
 8003864:	4b65      	ldr	r3, [pc, #404]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003868:	4a64      	ldr	r2, [pc, #400]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800386a:	f023 0304 	bic.w	r3, r3, #4
 800386e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d015      	beq.n	80038a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7fc fe04 	bl	8000484 <HAL_GetTick>
 800387c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800387e:	e00a      	b.n	8003896 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003880:	f7fc fe00 	bl	8000484 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e14e      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003896:	4b59      	ldr	r3, [pc, #356]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0ee      	beq.n	8003880 <HAL_RCC_OscConfig+0x5f0>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fc fdee 	bl	8000484 <HAL_GetTick>
 80038a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ac:	f7fc fdea 	bl	8000484 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e138      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038c2:	4b4e      	ldr	r3, [pc, #312]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ee      	bne.n	80038ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 812d 	beq.w	8003b32 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80038d8:	4b48      	ldr	r3, [pc, #288]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038e0:	2b18      	cmp	r3, #24
 80038e2:	f000 80bd 	beq.w	8003a60 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	f040 809e 	bne.w	8003a2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f0:	4b42      	ldr	r3, [pc, #264]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a41      	ldr	r2, [pc, #260]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fc fdc2 	bl	8000484 <HAL_GetTick>
 8003900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fc fdbe 	bl	8000484 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e10e      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003916:	4b39      	ldr	r3, [pc, #228]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003922:	4b36      	ldr	r3, [pc, #216]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003926:	4b37      	ldr	r3, [pc, #220]	@ (8003a04 <HAL_RCC_OscConfig+0x774>)
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003932:	0112      	lsls	r2, r2, #4
 8003934:	430a      	orrs	r2, r1
 8003936:	4931      	ldr	r1, [pc, #196]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	628b      	str	r3, [r1, #40]	@ 0x28
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	3b01      	subs	r3, #1
 8003942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394a:	3b01      	subs	r3, #1
 800394c:	025b      	lsls	r3, r3, #9
 800394e:	b29b      	uxth	r3, r3
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	3b01      	subs	r3, #1
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003964:	3b01      	subs	r3, #1
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800396c:	4923      	ldr	r1, [pc, #140]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003972:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	4a21      	ldr	r2, [pc, #132]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800397e:	4b1f      	ldr	r3, [pc, #124]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003982:	4b21      	ldr	r3, [pc, #132]	@ (8003a08 <HAL_RCC_OscConfig+0x778>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800398a:	00d2      	lsls	r2, r2, #3
 800398c:	491b      	ldr	r1, [pc, #108]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003992:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	f023 020c 	bic.w	r2, r3, #12
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	4917      	ldr	r1, [pc, #92]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80039a4:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	f023 0202 	bic.w	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b0:	4912      	ldr	r1, [pc, #72]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039b6:	4b11      	ldr	r3, [pc, #68]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	4a10      	ldr	r2, [pc, #64]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c2:	4b0e      	ldr	r3, [pc, #56]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c6:	4a0d      	ldr	r2, [pc, #52]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80039ce:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d2:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80039da:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039de:	4a07      	ldr	r2, [pc, #28]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e6:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a04      	ldr	r2, [pc, #16]	@ (80039fc <HAL_RCC_OscConfig+0x76c>)
 80039ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7fc fd47 	bl	8000484 <HAL_GetTick>
 80039f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039f8:	e011      	b.n	8003a1e <HAL_RCC_OscConfig+0x78e>
 80039fa:	bf00      	nop
 80039fc:	58024400 	.word	0x58024400
 8003a00:	58024800 	.word	0x58024800
 8003a04:	fffffc0c 	.word	0xfffffc0c
 8003a08:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fc fd3a 	bl	8000484 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e08a      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a1e:	4b47      	ldr	r3, [pc, #284]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x77c>
 8003a2a:	e082      	b.n	8003b32 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2c:	4b43      	ldr	r3, [pc, #268]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a42      	ldr	r2, [pc, #264]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fc fd24 	bl	8000484 <HAL_GetTick>
 8003a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fc fd20 	bl	8000484 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e070      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a52:	4b3a      	ldr	r3, [pc, #232]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x7b0>
 8003a5e:	e068      	b.n	8003b32 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a60:	4b36      	ldr	r3, [pc, #216]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a66:	4b35      	ldr	r3, [pc, #212]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d031      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f003 0203 	and.w	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d12a      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d122      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d11a      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	0a5b      	lsrs	r3, r3, #9
 8003aa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d111      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d108      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	0e1b      	lsrs	r3, r3, #24
 8003aca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e02b      	b.n	8003b34 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003adc:	4b17      	ldr	r3, [pc, #92]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae0:	08db      	lsrs	r3, r3, #3
 8003ae2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ae6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d01f      	beq.n	8003b32 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003af2:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af6:	4a11      	ldr	r2, [pc, #68]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003afe:	f7fc fcc1 	bl	8000484 <HAL_GetTick>
 8003b02:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003b04:	bf00      	nop
 8003b06:	f7fc fcbd 	bl	8000484 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d0f9      	beq.n	8003b06 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b12:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b16:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <HAL_RCC_OscConfig+0x8b0>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b1e:	00d2      	lsls	r2, r2, #3
 8003b20:	4906      	ldr	r1, [pc, #24]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003b26:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	4a04      	ldr	r2, [pc, #16]	@ (8003b3c <HAL_RCC_OscConfig+0x8ac>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3730      	adds	r7, #48	@ 0x30
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	58024400 	.word	0x58024400
 8003b40:	ffff0007 	.word	0xffff0007

08003b44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e19c      	b.n	8003e92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b58:	4b8a      	ldr	r3, [pc, #552]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d910      	bls.n	8003b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b87      	ldr	r3, [pc, #540]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 020f 	bic.w	r2, r3, #15
 8003b6e:	4985      	ldr	r1, [pc, #532]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b83      	ldr	r3, [pc, #524]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e184      	b.n	8003e92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d010      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	4b7b      	ldr	r3, [pc, #492]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d908      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ba4:	4b78      	ldr	r3, [pc, #480]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	4975      	ldr	r1, [pc, #468]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d010      	beq.n	8003be4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	4b70      	ldr	r3, [pc, #448]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d908      	bls.n	8003be4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	496a      	ldr	r1, [pc, #424]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d010      	beq.n	8003c12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	4b64      	ldr	r3, [pc, #400]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d908      	bls.n	8003c12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c00:	4b61      	ldr	r3, [pc, #388]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	495e      	ldr	r1, [pc, #376]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d010      	beq.n	8003c40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	4b59      	ldr	r3, [pc, #356]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d908      	bls.n	8003c40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c2e:	4b56      	ldr	r3, [pc, #344]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4953      	ldr	r1, [pc, #332]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d010      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d908      	bls.n	8003c6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f023 020f 	bic.w	r2, r3, #15
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4947      	ldr	r1, [pc, #284]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d055      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c7a:	4b43      	ldr	r3, [pc, #268]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	4940      	ldr	r1, [pc, #256]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c94:	4b3c      	ldr	r3, [pc, #240]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d121      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0f6      	b.n	8003e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cac:	4b36      	ldr	r3, [pc, #216]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d115      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0ea      	b.n	8003e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cc4:	4b30      	ldr	r3, [pc, #192]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0de      	b.n	8003e92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0d6      	b.n	8003e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ce4:	4b28      	ldr	r3, [pc, #160]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f023 0207 	bic.w	r2, r3, #7
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4925      	ldr	r1, [pc, #148]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf6:	f7fc fbc5 	bl	8000484 <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfc:	e00a      	b.n	8003d14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfe:	f7fc fbc1 	bl	8000484 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0be      	b.n	8003e92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d14:	4b1c      	ldr	r3, [pc, #112]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d1eb      	bne.n	8003cfe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d010      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	4b14      	ldr	r3, [pc, #80]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d208      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d42:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f023 020f 	bic.w	r2, r3, #15
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	490e      	ldr	r1, [pc, #56]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d54:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d214      	bcs.n	8003d8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	4906      	ldr	r1, [pc, #24]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b04      	ldr	r3, [pc, #16]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e086      	b.n	8003e92 <HAL_RCC_ClockConfig+0x34e>
 8003d84:	52002000 	.word	0x52002000
 8003d88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d208      	bcs.n	8003dba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003da8:	4b3c      	ldr	r3, [pc, #240]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	4939      	ldr	r1, [pc, #228]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d010      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	4b34      	ldr	r3, [pc, #208]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d208      	bcs.n	8003de8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dd6:	4b31      	ldr	r3, [pc, #196]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	492e      	ldr	r1, [pc, #184]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d010      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	4b28      	ldr	r3, [pc, #160]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d208      	bcs.n	8003e16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e04:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	4922      	ldr	r1, [pc, #136]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d010      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	4b1d      	ldr	r3, [pc, #116]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d208      	bcs.n	8003e44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e32:	4b1a      	ldr	r3, [pc, #104]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	4917      	ldr	r1, [pc, #92]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e44:	f000 f834 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4b14      	ldr	r3, [pc, #80]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	4912      	ldr	r1, [pc, #72]	@ (8003ea0 <HAL_RCC_ClockConfig+0x35c>)
 8003e56:	5ccb      	ldrb	r3, [r1, r3]
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e62:	4b0e      	ldr	r3, [pc, #56]	@ (8003e9c <HAL_RCC_ClockConfig+0x358>)
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea0 <HAL_RCC_ClockConfig+0x35c>)
 8003e6c:	5cd3      	ldrb	r3, [r2, r3]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea4 <HAL_RCC_ClockConfig+0x360>)
 8003e7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea8 <HAL_RCC_ClockConfig+0x364>)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003e82:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <HAL_RCC_ClockConfig+0x368>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f009 fd78 	bl	800d97c <HAL_InitTick>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	08013558 	.word	0x08013558
 8003ea4:	24000098 	.word	0x24000098
 8003ea8:	24000094 	.word	0x24000094
 8003eac:	24000000 	.word	0x24000000

08003eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b089      	sub	sp, #36	@ 0x24
 8003eb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb6:	4bb3      	ldr	r3, [pc, #716]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ebe:	2b18      	cmp	r3, #24
 8003ec0:	f200 8155 	bhi.w	800416e <HAL_RCC_GetSysClockFreq+0x2be>
 8003ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ecc <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003f31 	.word	0x08003f31
 8003ed0:	0800416f 	.word	0x0800416f
 8003ed4:	0800416f 	.word	0x0800416f
 8003ed8:	0800416f 	.word	0x0800416f
 8003edc:	0800416f 	.word	0x0800416f
 8003ee0:	0800416f 	.word	0x0800416f
 8003ee4:	0800416f 	.word	0x0800416f
 8003ee8:	0800416f 	.word	0x0800416f
 8003eec:	08003f57 	.word	0x08003f57
 8003ef0:	0800416f 	.word	0x0800416f
 8003ef4:	0800416f 	.word	0x0800416f
 8003ef8:	0800416f 	.word	0x0800416f
 8003efc:	0800416f 	.word	0x0800416f
 8003f00:	0800416f 	.word	0x0800416f
 8003f04:	0800416f 	.word	0x0800416f
 8003f08:	0800416f 	.word	0x0800416f
 8003f0c:	08003f5d 	.word	0x08003f5d
 8003f10:	0800416f 	.word	0x0800416f
 8003f14:	0800416f 	.word	0x0800416f
 8003f18:	0800416f 	.word	0x0800416f
 8003f1c:	0800416f 	.word	0x0800416f
 8003f20:	0800416f 	.word	0x0800416f
 8003f24:	0800416f 	.word	0x0800416f
 8003f28:	0800416f 	.word	0x0800416f
 8003f2c:	08003f63 	.word	0x08003f63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f30:	4b94      	ldr	r3, [pc, #592]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f3c:	4b91      	ldr	r3, [pc, #580]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	08db      	lsrs	r3, r3, #3
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	4a90      	ldr	r2, [pc, #576]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003f4e:	e111      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f50:	4b8d      	ldr	r3, [pc, #564]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f52:	61bb      	str	r3, [r7, #24]
      break;
 8003f54:	e10e      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003f56:	4b8d      	ldr	r3, [pc, #564]	@ (800418c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f58:	61bb      	str	r3, [r7, #24]
      break;
 8003f5a:	e10b      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003f5c:	4b8c      	ldr	r3, [pc, #560]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f5e:	61bb      	str	r3, [r7, #24]
      break;
 8003f60:	e108      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f62:	4b88      	ldr	r3, [pc, #544]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f6c:	4b85      	ldr	r3, [pc, #532]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f78:	4b82      	ldr	r3, [pc, #520]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f82:	4b80      	ldr	r3, [pc, #512]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f86:	08db      	lsrs	r3, r3, #3
 8003f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80e1 	beq.w	8004168 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	f000 8083 	beq.w	80040b4 <HAL_RCC_GetSysClockFreq+0x204>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	f200 80a1 	bhi.w	80040f8 <HAL_RCC_GetSysClockFreq+0x248>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x114>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d056      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003fc2:	e099      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d02d      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	08db      	lsrs	r3, r3, #3
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	4a6b      	ldr	r2, [pc, #428]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	ee07 3a90 	vmov	s15, r3
 8003fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffa:	4b62      	ldr	r3, [pc, #392]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400a:	ed97 6a02 	vldr	s12, [r7, #8]
 800400e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004194 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800401e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800402a:	e087      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004036:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004198 <HAL_RCC_GetSysClockFreq+0x2e8>
 800403a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403e:	4b51      	ldr	r3, [pc, #324]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004052:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004194 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800406e:	e065      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800419c <HAL_RCC_GetSysClockFreq+0x2ec>
 800407e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004082:	4b40      	ldr	r3, [pc, #256]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004092:	ed97 6a02 	vldr	s12, [r7, #8]
 8004096:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004194 <HAL_RCC_GetSysClockFreq+0x2e4>
 800409a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040b2:	e043      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80041a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80040c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004194 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040f6:	e021      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800419c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800410a:	4b1e      	ldr	r3, [pc, #120]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800411a:	ed97 6a02 	vldr	s12, [r7, #8]
 800411e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004194 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800412a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800412e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004136:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800413a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800413c:	4b11      	ldr	r3, [pc, #68]	@ (8004184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004140:	0a5b      	lsrs	r3, r3, #9
 8004142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004146:	3301      	adds	r3, #1
 8004148:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004154:	edd7 6a07 	vldr	s13, [r7, #28]
 8004158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800415c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004160:	ee17 3a90 	vmov	r3, s15
 8004164:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004166:	e005      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
      break;
 800416c:	e002      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800416e:	4b07      	ldr	r3, [pc, #28]	@ (800418c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004170:	61bb      	str	r3, [r7, #24]
      break;
 8004172:	bf00      	nop
  }

  return sysclockfreq;
 8004174:	69bb      	ldr	r3, [r7, #24]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3724      	adds	r7, #36	@ 0x24
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400
 8004188:	03d09000 	.word	0x03d09000
 800418c:	003d0900 	.word	0x003d0900
 8004190:	017d7840 	.word	0x017d7840
 8004194:	46000000 	.word	0x46000000
 8004198:	4c742400 	.word	0x4c742400
 800419c:	4a742400 	.word	0x4a742400
 80041a0:	4bbebc20 	.word	0x4bbebc20

080041a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041aa:	f7ff fe81 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 80041ae:	4602      	mov	r2, r0
 80041b0:	4b10      	ldr	r3, [pc, #64]	@ (80041f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	490f      	ldr	r1, [pc, #60]	@ (80041f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80041bc:	5ccb      	ldrb	r3, [r1, r3]
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041c8:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80041d2:	5cd3      	ldrb	r3, [r2, r3]
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	fa22 f303 	lsr.w	r3, r2, r3
 80041de:	4a07      	ldr	r2, [pc, #28]	@ (80041fc <HAL_RCC_GetHCLKFreq+0x58>)
 80041e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041e2:	4a07      	ldr	r2, [pc, #28]	@ (8004200 <HAL_RCC_GetHCLKFreq+0x5c>)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80041e8:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <HAL_RCC_GetHCLKFreq+0x58>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	58024400 	.word	0x58024400
 80041f8:	08013558 	.word	0x08013558
 80041fc:	24000098 	.word	0x24000098
 8004200:	24000094 	.word	0x24000094

08004204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004208:	f7ff ffcc 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4904      	ldr	r1, [pc, #16]	@ (800422c <HAL_RCC_GetPCLK1Freq+0x28>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	58024400 	.word	0x58024400
 800422c:	08013558 	.word	0x08013558

08004230 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	223f      	movs	r2, #63	@ 0x3f
 800423e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004240:	4b1a      	ldr	r3, [pc, #104]	@ (80042ac <HAL_RCC_GetClockConfig+0x7c>)
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0207 	and.w	r2, r3, #7
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800424c:	4b17      	ldr	r3, [pc, #92]	@ (80042ac <HAL_RCC_GetClockConfig+0x7c>)
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004258:	4b14      	ldr	r3, [pc, #80]	@ (80042ac <HAL_RCC_GetClockConfig+0x7c>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f003 020f 	and.w	r2, r3, #15
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004264:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <HAL_RCC_GetClockConfig+0x7c>)
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004270:	4b0e      	ldr	r3, [pc, #56]	@ (80042ac <HAL_RCC_GetClockConfig+0x7c>)
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800427c:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <HAL_RCC_GetClockConfig+0x7c>)
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004288:	4b08      	ldr	r3, [pc, #32]	@ (80042ac <HAL_RCC_GetClockConfig+0x7c>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004294:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <HAL_RCC_GetClockConfig+0x80>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 020f 	and.w	r2, r3, #15
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	601a      	str	r2, [r3, #0]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	58024400 	.word	0x58024400
 80042b0:	52002000 	.word	0x52002000

080042b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b0ca      	sub	sp, #296	@ 0x128
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042c0:	2300      	movs	r3, #0
 80042c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80042d8:	2500      	movs	r5, #0
 80042da:	ea54 0305 	orrs.w	r3, r4, r5
 80042de:	d049      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042ea:	d02f      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80042ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042f0:	d828      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80042f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042f6:	d01a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042fc:	d822      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004306:	d007      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004308:	e01c      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430a:	4bb8      	ldr	r3, [pc, #736]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800430c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430e:	4ab7      	ldr	r2, [pc, #732]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004314:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004316:	e01a      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431c:	3308      	adds	r3, #8
 800431e:	2102      	movs	r1, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f001 f9d1 	bl	80056c8 <RCCEx_PLL2_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800432c:	e00f      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	3328      	adds	r3, #40	@ 0x28
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f001 fa78 	bl	800582c <RCCEx_PLL3_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004342:	e004      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434a:	e000      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800434c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004356:	4ba5      	ldr	r3, [pc, #660]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004364:	4aa1      	ldr	r2, [pc, #644]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004366:	430b      	orrs	r3, r1
 8004368:	6513      	str	r3, [r2, #80]	@ 0x50
 800436a:	e003      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004380:	f04f 0900 	mov.w	r9, #0
 8004384:	ea58 0309 	orrs.w	r3, r8, r9
 8004388:	d047      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004390:	2b04      	cmp	r3, #4
 8004392:	d82a      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004394:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043b1 	.word	0x080043b1
 80043a0:	080043bf 	.word	0x080043bf
 80043a4:	080043d5 	.word	0x080043d5
 80043a8:	080043f3 	.word	0x080043f3
 80043ac:	080043f3 	.word	0x080043f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b0:	4b8e      	ldr	r3, [pc, #568]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	4a8d      	ldr	r2, [pc, #564]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043bc:	e01a      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	3308      	adds	r3, #8
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 f97e 	bl	80056c8 <RCCEx_PLL2_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043d2:	e00f      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d8:	3328      	adds	r3, #40	@ 0x28
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 fa25 	bl	800582c <RCCEx_PLL3_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043e8:	e004      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043f0:	e000      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80043f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043fc:	4b7b      	ldr	r3, [pc, #492]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004400:	f023 0107 	bic.w	r1, r3, #7
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440a:	4a78      	ldr	r2, [pc, #480]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800440c:	430b      	orrs	r3, r1
 800440e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004410:	e003      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004426:	f04f 0b00 	mov.w	fp, #0
 800442a:	ea5a 030b 	orrs.w	r3, sl, fp
 800442e:	d04c      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800443a:	d030      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800443c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004440:	d829      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004442:	2bc0      	cmp	r3, #192	@ 0xc0
 8004444:	d02d      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004446:	2bc0      	cmp	r3, #192	@ 0xc0
 8004448:	d825      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800444a:	2b80      	cmp	r3, #128	@ 0x80
 800444c:	d018      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800444e:	2b80      	cmp	r3, #128	@ 0x80
 8004450:	d821      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004456:	2b40      	cmp	r3, #64	@ 0x40
 8004458:	d007      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800445a:	e01c      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445c:	4b63      	ldr	r3, [pc, #396]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	4a62      	ldr	r2, [pc, #392]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004468:	e01c      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	3308      	adds	r3, #8
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f001 f928 	bl	80056c8 <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800447e:	e011      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	3328      	adds	r3, #40	@ 0x28
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f001 f9cf 	bl	800582c <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800449c:	e002      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80044a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80044ac:	4b4f      	ldr	r3, [pc, #316]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ba:	4a4c      	ldr	r2, [pc, #304]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044bc:	430b      	orrs	r3, r1
 80044be:	6513      	str	r3, [r2, #80]	@ 0x50
 80044c0:	e003      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80044d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80044e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80044e4:	460b      	mov	r3, r1
 80044e6:	4313      	orrs	r3, r2
 80044e8:	d053      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044f6:	d035      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80044f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044fc:	d82e      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80044fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004502:	d031      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004504:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004508:	d828      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800450a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800450e:	d01a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004514:	d822      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800451a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800451e:	d007      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004520:	e01c      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004522:	4b32      	ldr	r3, [pc, #200]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	4a31      	ldr	r2, [pc, #196]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800452c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800452e:	e01c      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004534:	3308      	adds	r3, #8
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f8c5 	bl	80056c8 <RCCEx_PLL2_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004544:	e011      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	3328      	adds	r3, #40	@ 0x28
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f001 f96c 	bl	800582c <RCCEx_PLL3_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800455a:	e006      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004562:	e002      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004564:	bf00      	nop
 8004566:	e000      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004572:	4b1e      	ldr	r3, [pc, #120]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004576:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004582:	4a1a      	ldr	r2, [pc, #104]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004584:	430b      	orrs	r3, r1
 8004586:	6593      	str	r3, [r2, #88]	@ 0x58
 8004588:	e003      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800459e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80045a2:	2300      	movs	r3, #0
 80045a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80045a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80045ac:	460b      	mov	r3, r1
 80045ae:	4313      	orrs	r3, r2
 80045b0:	d056      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80045ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045be:	d038      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80045c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045c4:	d831      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045ca:	d034      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80045cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045d0:	d82b      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045d6:	d01d      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80045d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045dc:	d825      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d006      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80045e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045e8:	e01f      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045ea:	bf00      	nop
 80045ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f0:	4ba2      	ldr	r3, [pc, #648]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f4:	4aa1      	ldr	r2, [pc, #644]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045fc:	e01c      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004602:	3308      	adds	r3, #8
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f001 f85e 	bl	80056c8 <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004612:	e011      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004618:	3328      	adds	r3, #40	@ 0x28
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f001 f905 	bl	800582c <RCCEx_PLL3_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004630:	e002      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004640:	4b8e      	ldr	r3, [pc, #568]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004644:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004650:	4a8a      	ldr	r2, [pc, #552]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004652:	430b      	orrs	r3, r1
 8004654:	6593      	str	r3, [r2, #88]	@ 0x58
 8004656:	e003      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800466c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004676:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800467a:	460b      	mov	r3, r1
 800467c:	4313      	orrs	r3, r2
 800467e:	d03a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004686:	2b30      	cmp	r3, #48	@ 0x30
 8004688:	d01f      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800468a:	2b30      	cmp	r3, #48	@ 0x30
 800468c:	d819      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800468e:	2b20      	cmp	r3, #32
 8004690:	d00c      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004692:	2b20      	cmp	r3, #32
 8004694:	d815      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d019      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800469a:	2b10      	cmp	r3, #16
 800469c:	d111      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800469e:	4b77      	ldr	r3, [pc, #476]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a2:	4a76      	ldr	r2, [pc, #472]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80046aa:	e011      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	3308      	adds	r3, #8
 80046b2:	2102      	movs	r1, #2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f807 	bl	80056c8 <RCCEx_PLL2_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80046c0:	e006      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046c8:	e002      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80046ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046d8:	4b68      	ldr	r3, [pc, #416]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e6:	4a65      	ldr	r2, [pc, #404]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004702:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800470c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004710:	460b      	mov	r3, r1
 8004712:	4313      	orrs	r3, r2
 8004714:	d051      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004720:	d035      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004722:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004726:	d82e      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004728:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800472c:	d031      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800472e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004732:	d828      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004738:	d01a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800473e:	d822      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004748:	d007      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800474a:	e01c      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800474c:	4b4b      	ldr	r3, [pc, #300]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	4a4a      	ldr	r2, [pc, #296]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004758:	e01c      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475e:	3308      	adds	r3, #8
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f000 ffb0 	bl	80056c8 <RCCEx_PLL2_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800476e:	e011      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004774:	3328      	adds	r3, #40	@ 0x28
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f001 f857 	bl	800582c <RCCEx_PLL3_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004784:	e006      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800478c:	e002      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800479c:	4b37      	ldr	r3, [pc, #220]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800479e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047aa:	4a34      	ldr	r2, [pc, #208]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80047b0:	e003      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80047c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80047d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80047d4:	460b      	mov	r3, r1
 80047d6:	4313      	orrs	r3, r2
 80047d8:	d056      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047e4:	d033      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80047e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047ea:	d82c      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047f0:	d02f      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80047f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047f6:	d826      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047fc:	d02b      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80047fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004802:	d820      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004808:	d012      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800480a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800480e:	d81a      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d022      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004818:	d115      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	3308      	adds	r3, #8
 8004820:	2101      	movs	r1, #1
 8004822:	4618      	mov	r0, r3
 8004824:	f000 ff50 	bl	80056c8 <RCCEx_PLL2_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800482e:	e015      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004834:	3328      	adds	r3, #40	@ 0x28
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fff7 	bl	800582c <RCCEx_PLL3_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004844:	e00a      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800484c:	e006      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800484e:	bf00      	nop
 8004850:	e004      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004852:	bf00      	nop
 8004854:	e002      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004856:	bf00      	nop
 8004858:	e000      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800485a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800485c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10d      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004868:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004872:	4a02      	ldr	r2, [pc, #8]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004874:	430b      	orrs	r3, r1
 8004876:	6513      	str	r3, [r2, #80]	@ 0x50
 8004878:	e006      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800487a:	bf00      	nop
 800487c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800489e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4313      	orrs	r3, r2
 80048a6:	d055      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80048b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048b4:	d033      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80048b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048ba:	d82c      	bhi.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c0:	d02f      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c6:	d826      	bhi.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048cc:	d02b      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80048ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048d2:	d820      	bhi.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048d8:	d012      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80048da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048de:	d81a      	bhi.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d022      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80048e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048e8:	d115      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	3308      	adds	r3, #8
 80048f0:	2101      	movs	r1, #1
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fee8 	bl	80056c8 <RCCEx_PLL2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80048fe:	e015      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004904:	3328      	adds	r3, #40	@ 0x28
 8004906:	2101      	movs	r1, #1
 8004908:	4618      	mov	r0, r3
 800490a:	f000 ff8f 	bl	800582c <RCCEx_PLL3_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004914:	e00a      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800491c:	e006      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800491e:	bf00      	nop
 8004920:	e004      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004922:	bf00      	nop
 8004924:	e002      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004926:	bf00      	nop
 8004928:	e000      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800492a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800492c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004934:	4ba3      	ldr	r3, [pc, #652]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004938:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004944:	4a9f      	ldr	r2, [pc, #636]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004946:	430b      	orrs	r3, r1
 8004948:	6593      	str	r3, [r2, #88]	@ 0x58
 800494a:	e003      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800496a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	d037      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800497e:	d00e      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004984:	d816      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800498a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800498e:	d111      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004990:	4b8c      	ldr	r3, [pc, #560]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	4a8b      	ldr	r2, [pc, #556]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800499a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800499c:	e00f      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	3308      	adds	r3, #8
 80049a4:	2101      	movs	r1, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fe8e 	bl	80056c8 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80049b2:	e004      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ba:	e000      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80049bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049c6:	4b7f      	ldr	r3, [pc, #508]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d4:	4a7b      	ldr	r2, [pc, #492]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80049da:	e003      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80049f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80049fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d039      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d81c      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a51 	.word	0x08004a51
 8004a18:	08004a25 	.word	0x08004a25
 8004a1c:	08004a33 	.word	0x08004a33
 8004a20:	08004a51 	.word	0x08004a51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a24:	4b67      	ldr	r3, [pc, #412]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	4a66      	ldr	r2, [pc, #408]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a30:	e00f      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	3308      	adds	r3, #8
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fe44 	bl	80056c8 <RCCEx_PLL2_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a46:	e004      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a4e:	e000      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a5e:	f023 0103 	bic.w	r1, r3, #3
 8004a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a68:	4a56      	ldr	r2, [pc, #344]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a6e:	e003      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004a92:	460b      	mov	r3, r1
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f000 809f 	beq.w	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aa6:	f7fb fced 	bl	8000484 <HAL_GetTick>
 8004aaa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aae:	e00b      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7fb fce8 	bl	8000484 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b64      	cmp	r3, #100	@ 0x64
 8004abe:	d903      	bls.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ac6:	e005      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0ed      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d179      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004adc:	4b39      	ldr	r3, [pc, #228]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ade:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ae8:	4053      	eors	r3, r2
 8004aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d015      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004af2:	4b34      	ldr	r3, [pc, #208]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004afa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004afe:	4b31      	ldr	r3, [pc, #196]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b02:	4a30      	ldr	r2, [pc, #192]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b08:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b14:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b16:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b1c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b2a:	d118      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fb fcaa 	bl	8000484 <HAL_GetTick>
 8004b30:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b34:	e00d      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fb fca5 	bl	8000484 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004b40:	1ad2      	subs	r2, r2, r3
 8004b42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d903      	bls.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004b50:	e005      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b52:	4b1c      	ldr	r3, [pc, #112]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0eb      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d129      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b76:	d10e      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004b78:	4b12      	ldr	r3, [pc, #72]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b88:	091a      	lsrs	r2, r3, #4
 8004b8a:	4b10      	ldr	r3, [pc, #64]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6113      	str	r3, [r2, #16]
 8004b94:	e005      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ba0:	6113      	str	r3, [r2, #16]
 8004ba2:	4b08      	ldr	r3, [pc, #32]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004baa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb2:	4a04      	ldr	r2, [pc, #16]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb8:	e00e      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004bc2:	e009      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004bc4:	58024400 	.word	0x58024400
 8004bc8:	58024800 	.word	0x58024800
 8004bcc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	f002 0301 	and.w	r3, r2, #1
 8004be4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f000 8089 	beq.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c00:	2b28      	cmp	r3, #40	@ 0x28
 8004c02:	d86b      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004c04:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004ce5 	.word	0x08004ce5
 8004c10:	08004cdd 	.word	0x08004cdd
 8004c14:	08004cdd 	.word	0x08004cdd
 8004c18:	08004cdd 	.word	0x08004cdd
 8004c1c:	08004cdd 	.word	0x08004cdd
 8004c20:	08004cdd 	.word	0x08004cdd
 8004c24:	08004cdd 	.word	0x08004cdd
 8004c28:	08004cdd 	.word	0x08004cdd
 8004c2c:	08004cb1 	.word	0x08004cb1
 8004c30:	08004cdd 	.word	0x08004cdd
 8004c34:	08004cdd 	.word	0x08004cdd
 8004c38:	08004cdd 	.word	0x08004cdd
 8004c3c:	08004cdd 	.word	0x08004cdd
 8004c40:	08004cdd 	.word	0x08004cdd
 8004c44:	08004cdd 	.word	0x08004cdd
 8004c48:	08004cdd 	.word	0x08004cdd
 8004c4c:	08004cc7 	.word	0x08004cc7
 8004c50:	08004cdd 	.word	0x08004cdd
 8004c54:	08004cdd 	.word	0x08004cdd
 8004c58:	08004cdd 	.word	0x08004cdd
 8004c5c:	08004cdd 	.word	0x08004cdd
 8004c60:	08004cdd 	.word	0x08004cdd
 8004c64:	08004cdd 	.word	0x08004cdd
 8004c68:	08004cdd 	.word	0x08004cdd
 8004c6c:	08004ce5 	.word	0x08004ce5
 8004c70:	08004cdd 	.word	0x08004cdd
 8004c74:	08004cdd 	.word	0x08004cdd
 8004c78:	08004cdd 	.word	0x08004cdd
 8004c7c:	08004cdd 	.word	0x08004cdd
 8004c80:	08004cdd 	.word	0x08004cdd
 8004c84:	08004cdd 	.word	0x08004cdd
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004ce5 	.word	0x08004ce5
 8004c90:	08004cdd 	.word	0x08004cdd
 8004c94:	08004cdd 	.word	0x08004cdd
 8004c98:	08004cdd 	.word	0x08004cdd
 8004c9c:	08004cdd 	.word	0x08004cdd
 8004ca0:	08004cdd 	.word	0x08004cdd
 8004ca4:	08004cdd 	.word	0x08004cdd
 8004ca8:	08004cdd 	.word	0x08004cdd
 8004cac:	08004ce5 	.word	0x08004ce5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fd05 	bl	80056c8 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cc4:	e00f      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	3328      	adds	r3, #40	@ 0x28
 8004ccc:	2101      	movs	r1, #1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fdac 	bl	800582c <RCCEx_PLL3_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cda:	e004      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004cee:	4bbf      	ldr	r3, [pc, #764]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cfc:	4abb      	ldr	r2, [pc, #748]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d02:	e003      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f002 0302 	and.w	r3, r2, #2
 8004d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d26:	460b      	mov	r3, r1
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	d041      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	d824      	bhi.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004d36:	a201      	add	r2, pc, #4	@ (adr r2, 8004d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d89 	.word	0x08004d89
 8004d40:	08004d55 	.word	0x08004d55
 8004d44:	08004d6b 	.word	0x08004d6b
 8004d48:	08004d89 	.word	0x08004d89
 8004d4c:	08004d89 	.word	0x08004d89
 8004d50:	08004d89 	.word	0x08004d89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d58:	3308      	adds	r3, #8
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fcb3 	bl	80056c8 <RCCEx_PLL2_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d68:	e00f      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6e:	3328      	adds	r3, #40	@ 0x28
 8004d70:	2101      	movs	r1, #1
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fd5a 	bl	800582c <RCCEx_PLL3_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d7e:	e004      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d86:	e000      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d92:	4b96      	ldr	r3, [pc, #600]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d96:	f023 0107 	bic.w	r1, r3, #7
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004da0:	4a92      	ldr	r2, [pc, #584]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004da2:	430b      	orrs	r3, r1
 8004da4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004da6:	e003      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f002 0304 	and.w	r3, r2, #4
 8004dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dc6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	d044      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd8:	2b05      	cmp	r3, #5
 8004dda:	d825      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e31 	.word	0x08004e31
 8004de8:	08004dfd 	.word	0x08004dfd
 8004dec:	08004e13 	.word	0x08004e13
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e31 	.word	0x08004e31
 8004df8:	08004e31 	.word	0x08004e31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e00:	3308      	adds	r3, #8
 8004e02:	2101      	movs	r1, #1
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fc5f 	bl	80056c8 <RCCEx_PLL2_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e10:	e00f      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e16:	3328      	adds	r3, #40	@ 0x28
 8004e18:	2101      	movs	r1, #1
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fd06 	bl	800582c <RCCEx_PLL3_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e26:	e004      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e2e:	e000      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3e:	f023 0107 	bic.w	r1, r3, #7
 8004e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e4a:	4a68      	ldr	r2, [pc, #416]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e50:	e003      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f002 0320 	and.w	r3, r2, #32
 8004e66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e74:	460b      	mov	r3, r1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	d055      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e86:	d033      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e8c:	d82c      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e92:	d02f      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e98:	d826      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e9e:	d02b      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004ea0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ea4:	d820      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eaa:	d012      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eb0:	d81a      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d022      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eba:	d115      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fbff 	bl	80056c8 <RCCEx_PLL2_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ed0:	e015      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed6:	3328      	adds	r3, #40	@ 0x28
 8004ed8:	2102      	movs	r1, #2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fca6 	bl	800582c <RCCEx_PLL3_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ee6:	e00a      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eee:	e006      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ef0:	bf00      	nop
 8004ef2:	e004      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ef4:	bf00      	nop
 8004ef6:	e002      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ef8:	bf00      	nop
 8004efa:	e000      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f06:	4b39      	ldr	r3, [pc, #228]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f16:	4a35      	ldr	r2, [pc, #212]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f1c:	e003      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f36:	2300      	movs	r3, #0
 8004f38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4313      	orrs	r3, r2
 8004f44:	d058      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f52:	d033      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004f54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f58:	d82c      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5e:	d02f      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f64:	d826      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f6a:	d02b      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004f6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f70:	d820      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f76:	d012      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f7c:	d81a      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d022      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f86:	d115      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fb99 	bl	80056c8 <RCCEx_PLL2_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f9c:	e015      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa2:	3328      	adds	r3, #40	@ 0x28
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fc40 	bl	800582c <RCCEx_PLL3_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004fb2:	e00a      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fba:	e006      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004fbc:	bf00      	nop
 8004fbe:	e004      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004fc0:	bf00      	nop
 8004fc2:	e002      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004fc4:	bf00      	nop
 8004fc6:	e000      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fd2:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fe2:	4a02      	ldr	r2, [pc, #8]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fe8:	e006      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004fea:	bf00      	nop
 8004fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005008:	2300      	movs	r3, #0
 800500a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800500e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005012:	460b      	mov	r3, r1
 8005014:	4313      	orrs	r3, r2
 8005016:	d055      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005020:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005024:	d033      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005026:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800502a:	d82c      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800502c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005030:	d02f      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005036:	d826      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005038:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800503c:	d02b      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800503e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005042:	d820      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005048:	d012      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800504a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800504e:	d81a      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d022      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005058:	d115      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505e:	3308      	adds	r3, #8
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fb30 	bl	80056c8 <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800506e:	e015      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005074:	3328      	adds	r3, #40	@ 0x28
 8005076:	2102      	movs	r1, #2
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fbd7 	bl	800582c <RCCEx_PLL3_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005084:	e00a      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800508c:	e006      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800508e:	bf00      	nop
 8005090:	e004      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005092:	bf00      	nop
 8005094:	e002      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800509a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050a4:	4ba1      	ldr	r3, [pc, #644]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80050ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80050b4:	4a9d      	ldr	r2, [pc, #628]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050b6:	430b      	orrs	r3, r1
 80050b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ba:	e003      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f002 0308 	and.w	r3, r2, #8
 80050d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80050de:	460b      	mov	r3, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d01e      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f0:	d10c      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f6:	3328      	adds	r3, #40	@ 0x28
 80050f8:	2102      	movs	r1, #2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fb96 	bl	800582c <RCCEx_PLL3_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800510c:	4b87      	ldr	r3, [pc, #540]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800510e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005110:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800511c:	4a83      	ldr	r2, [pc, #524]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800511e:	430b      	orrs	r3, r1
 8005120:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	f002 0310 	and.w	r3, r2, #16
 800512e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005132:	2300      	movs	r3, #0
 8005134:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005138:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800513c:	460b      	mov	r3, r1
 800513e:	4313      	orrs	r3, r2
 8005140:	d01e      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800514a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800514e:	d10c      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005154:	3328      	adds	r3, #40	@ 0x28
 8005156:	2102      	movs	r1, #2
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fb67 	bl	800582c <RCCEx_PLL3_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800516a:	4b70      	ldr	r3, [pc, #448]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005176:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800517a:	4a6c      	ldr	r2, [pc, #432]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800517c:	430b      	orrs	r3, r1
 800517e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800518c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005196:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800519a:	460b      	mov	r3, r1
 800519c:	4313      	orrs	r3, r2
 800519e:	d03e      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80051a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ac:	d022      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80051ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051b2:	d81b      	bhi.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80051b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051bc:	d00b      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80051be:	e015      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c4:	3308      	adds	r3, #8
 80051c6:	2100      	movs	r1, #0
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fa7d 	bl	80056c8 <RCCEx_PLL2_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051d4:	e00f      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051da:	3328      	adds	r3, #40	@ 0x28
 80051dc:	2102      	movs	r1, #2
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fb24 	bl	800582c <RCCEx_PLL3_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051ea:	e004      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051f2:	e000      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80051f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051fe:	4b4b      	ldr	r3, [pc, #300]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005202:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800520e:	4a47      	ldr	r2, [pc, #284]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005210:	430b      	orrs	r3, r1
 8005212:	6593      	str	r3, [r2, #88]	@ 0x58
 8005214:	e003      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800521a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800522a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800522c:	2300      	movs	r3, #0
 800522e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005230:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005234:	460b      	mov	r3, r1
 8005236:	4313      	orrs	r3, r2
 8005238:	d03b      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800523a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005242:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005246:	d01f      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005248:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800524c:	d818      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800524e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005252:	d003      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005254:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005258:	d007      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800525a:	e011      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525c:	4b33      	ldr	r3, [pc, #204]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	4a32      	ldr	r2, [pc, #200]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005268:	e00f      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526e:	3328      	adds	r3, #40	@ 0x28
 8005270:	2101      	movs	r1, #1
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fada 	bl	800582c <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800527e:	e004      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800528a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005292:	4b26      	ldr	r3, [pc, #152]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005296:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a2:	4a22      	ldr	r2, [pc, #136]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80052a8:	e003      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80052be:	673b      	str	r3, [r7, #112]	@ 0x70
 80052c0:	2300      	movs	r3, #0
 80052c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80052c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80052c8:	460b      	mov	r3, r1
 80052ca:	4313      	orrs	r3, r2
 80052cc:	d034      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80052ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052dc:	d007      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80052de:	e011      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e0:	4b12      	ldr	r3, [pc, #72]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	4a11      	ldr	r2, [pc, #68]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80052ec:	e00e      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f2:	3308      	adds	r3, #8
 80052f4:	2102      	movs	r1, #2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f9e6 	bl	80056c8 <RCCEx_PLL2_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005302:	e003      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800530a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800530c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10d      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005314:	4b05      	ldr	r3, [pc, #20]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005318:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005322:	4a02      	ldr	r2, [pc, #8]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005324:	430b      	orrs	r3, r1
 8005326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005328:	e006      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800532a:	bf00      	nop
 800532c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005346:	2300      	movs	r3, #0
 8005348:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800534a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800534e:	460b      	mov	r3, r1
 8005350:	4313      	orrs	r3, r2
 8005352:	d00c      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005358:	3328      	adds	r3, #40	@ 0x28
 800535a:	2102      	movs	r1, #2
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fa65 	bl	800582c <RCCEx_PLL3_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005376:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800537a:	663b      	str	r3, [r7, #96]	@ 0x60
 800537c:	2300      	movs	r3, #0
 800537e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005380:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005384:	460b      	mov	r3, r1
 8005386:	4313      	orrs	r3, r2
 8005388:	d038      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005396:	d018      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005398:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800539c:	d811      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800539e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053a2:	d014      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80053a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053a8:	d80b      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d011      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053b2:	d106      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b4:	4bc3      	ldr	r3, [pc, #780]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	4ac2      	ldr	r2, [pc, #776]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80053c0:	e008      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053c8:	e004      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80053ca:	bf00      	nop
 80053cc:	e002      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80053ce:	bf00      	nop
 80053d0:	e000      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80053d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053dc:	4bb9      	ldr	r3, [pc, #740]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ec:	4ab5      	ldr	r2, [pc, #724]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ee:	430b      	orrs	r3, r1
 80053f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80053f2:	e003      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005408:	65bb      	str	r3, [r7, #88]	@ 0x58
 800540a:	2300      	movs	r3, #0
 800540c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800540e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	d009      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005418:	4baa      	ldr	r3, [pc, #680]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800541a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800541c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005426:	4aa7      	ldr	r2, [pc, #668]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005428:	430b      	orrs	r3, r1
 800542a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005438:	653b      	str	r3, [r7, #80]	@ 0x50
 800543a:	2300      	movs	r3, #0
 800543c:	657b      	str	r3, [r7, #84]	@ 0x54
 800543e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005448:	4b9e      	ldr	r3, [pc, #632]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005454:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005458:	4a9a      	ldr	r2, [pc, #616]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800545a:	430b      	orrs	r3, r1
 800545c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800546a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800546c:	2300      	movs	r3, #0
 800546e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005470:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005474:	460b      	mov	r3, r1
 8005476:	4313      	orrs	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800547a:	4b92      	ldr	r3, [pc, #584]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800547c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005488:	4a8e      	ldr	r2, [pc, #568]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800548a:	430b      	orrs	r3, r1
 800548c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800549a:	643b      	str	r3, [r7, #64]	@ 0x40
 800549c:	2300      	movs	r3, #0
 800549e:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80054a4:	460b      	mov	r3, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054aa:	4b86      	ldr	r3, [pc, #536]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	4a85      	ldr	r2, [pc, #532]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054b4:	6113      	str	r3, [r2, #16]
 80054b6:	4b83      	ldr	r3, [pc, #524]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054b8:	6919      	ldr	r1, [r3, #16]
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054c2:	4a80      	ldr	r2, [pc, #512]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80054d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054d6:	2300      	movs	r3, #0
 80054d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80054e4:	4b77      	ldr	r3, [pc, #476]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f2:	4a74      	ldr	r2, [pc, #464]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005504:	633b      	str	r3, [r7, #48]	@ 0x30
 8005506:	2300      	movs	r3, #0
 8005508:	637b      	str	r3, [r7, #52]	@ 0x34
 800550a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800550e:	460b      	mov	r3, r1
 8005510:	4313      	orrs	r3, r2
 8005512:	d00a      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005514:	4b6b      	ldr	r3, [pc, #428]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005518:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800551c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005524:	4a67      	ldr	r2, [pc, #412]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005526:	430b      	orrs	r3, r1
 8005528:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	2100      	movs	r1, #0
 8005534:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800553c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005540:	460b      	mov	r3, r1
 8005542:	4313      	orrs	r3, r2
 8005544:	d011      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554a:	3308      	adds	r3, #8
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f8ba 	bl	80056c8 <RCCEx_PLL2_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800555a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	2100      	movs	r1, #0
 8005574:	6239      	str	r1, [r7, #32]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
 800557c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005580:	460b      	mov	r3, r1
 8005582:	4313      	orrs	r3, r2
 8005584:	d011      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558a:	3308      	adds	r3, #8
 800558c:	2101      	movs	r1, #1
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f89a 	bl	80056c8 <RCCEx_PLL2_Config>
 8005594:	4603      	mov	r3, r0
 8005596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800559a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	2100      	movs	r1, #0
 80055b4:	61b9      	str	r1, [r7, #24]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80055c0:	460b      	mov	r3, r1
 80055c2:	4313      	orrs	r3, r2
 80055c4:	d011      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ca:	3308      	adds	r3, #8
 80055cc:	2102      	movs	r1, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f87a 	bl	80056c8 <RCCEx_PLL2_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80055da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	2100      	movs	r1, #0
 80055f4:	6139      	str	r1, [r7, #16]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005600:	460b      	mov	r3, r1
 8005602:	4313      	orrs	r3, r2
 8005604:	d011      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560a:	3328      	adds	r3, #40	@ 0x28
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f90c 	bl	800582c <RCCEx_PLL3_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800561a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	2100      	movs	r1, #0
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005640:	460b      	mov	r3, r1
 8005642:	4313      	orrs	r3, r2
 8005644:	d011      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564a:	3328      	adds	r3, #40	@ 0x28
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f8ec 	bl	800582c <RCCEx_PLL3_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800565a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	2100      	movs	r1, #0
 8005674:	6039      	str	r1, [r7, #0]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	607b      	str	r3, [r7, #4]
 800567c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005680:	460b      	mov	r3, r1
 8005682:	4313      	orrs	r3, r2
 8005684:	d011      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568a:	3328      	adds	r3, #40	@ 0x28
 800568c:	2102      	movs	r1, #2
 800568e:	4618      	mov	r0, r3
 8005690:	f000 f8cc 	bl	800582c <RCCEx_PLL3_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800569a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80056aa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e000      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80056be:	46bd      	mov	sp, r7
 80056c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c4:	58024400 	.word	0x58024400

080056c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056d6:	4b53      	ldr	r3, [pc, #332]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d101      	bne.n	80056e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e099      	b.n	800581a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056e6:	4b4f      	ldr	r3, [pc, #316]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80056ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f2:	f7fa fec7 	bl	8000484 <HAL_GetTick>
 80056f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056f8:	e008      	b.n	800570c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056fa:	f7fa fec3 	bl	8000484 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e086      	b.n	800581a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800570c:	4b45      	ldr	r3, [pc, #276]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f0      	bne.n	80056fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005718:	4b42      	ldr	r3, [pc, #264]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 800571a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	031b      	lsls	r3, r3, #12
 8005726:	493f      	ldr	r1, [pc, #252]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005728:	4313      	orrs	r3, r2
 800572a:	628b      	str	r3, [r1, #40]	@ 0x28
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	3b01      	subs	r3, #1
 8005732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	3b01      	subs	r3, #1
 800573c:	025b      	lsls	r3, r3, #9
 800573e:	b29b      	uxth	r3, r3
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	3b01      	subs	r3, #1
 8005748:	041b      	lsls	r3, r3, #16
 800574a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	3b01      	subs	r3, #1
 8005756:	061b      	lsls	r3, r3, #24
 8005758:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800575c:	4931      	ldr	r1, [pc, #196]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 800575e:	4313      	orrs	r3, r2
 8005760:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005762:	4b30      	ldr	r3, [pc, #192]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	492d      	ldr	r1, [pc, #180]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005770:	4313      	orrs	r3, r2
 8005772:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005774:	4b2b      	ldr	r3, [pc, #172]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	f023 0220 	bic.w	r2, r3, #32
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	4928      	ldr	r1, [pc, #160]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005782:	4313      	orrs	r3, r2
 8005784:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005786:	4b27      	ldr	r3, [pc, #156]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	4a26      	ldr	r2, [pc, #152]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 800578c:	f023 0310 	bic.w	r3, r3, #16
 8005790:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005792:	4b24      	ldr	r3, [pc, #144]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005794:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005796:	4b24      	ldr	r3, [pc, #144]	@ (8005828 <RCCEx_PLL2_Config+0x160>)
 8005798:	4013      	ands	r3, r2
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	69d2      	ldr	r2, [r2, #28]
 800579e:	00d2      	lsls	r2, r2, #3
 80057a0:	4920      	ldr	r1, [pc, #128]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057ac:	f043 0310 	orr.w	r3, r3, #16
 80057b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057bc:	4a19      	ldr	r2, [pc, #100]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057c4:	e00f      	b.n	80057e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d106      	bne.n	80057da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057cc:	4b15      	ldr	r3, [pc, #84]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	4a14      	ldr	r2, [pc, #80]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057d8:	e005      	b.n	80057e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057da:	4b12      	ldr	r3, [pc, #72]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	4a11      	ldr	r2, [pc, #68]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f2:	f7fa fe47 	bl	8000484 <HAL_GetTick>
 80057f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057f8:	e008      	b.n	800580c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057fa:	f7fa fe43 	bl	8000484 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e006      	b.n	800581a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800580c:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <RCCEx_PLL2_Config+0x15c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0f0      	beq.n	80057fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	58024400 	.word	0x58024400
 8005828:	ffff0007 	.word	0xffff0007

0800582c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800583a:	4b53      	ldr	r3, [pc, #332]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b03      	cmp	r3, #3
 8005844:	d101      	bne.n	800584a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e099      	b.n	800597e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800584a:	4b4f      	ldr	r3, [pc, #316]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a4e      	ldr	r2, [pc, #312]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005856:	f7fa fe15 	bl	8000484 <HAL_GetTick>
 800585a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800585c:	e008      	b.n	8005870 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800585e:	f7fa fe11 	bl	8000484 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e086      	b.n	800597e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005870:	4b45      	ldr	r3, [pc, #276]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f0      	bne.n	800585e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800587c:	4b42      	ldr	r3, [pc, #264]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 800587e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005880:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	051b      	lsls	r3, r3, #20
 800588a:	493f      	ldr	r1, [pc, #252]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	3b01      	subs	r3, #1
 8005896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	3b01      	subs	r3, #1
 80058a0:	025b      	lsls	r3, r3, #9
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	041b      	lsls	r3, r3, #16
 80058ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058c0:	4931      	ldr	r1, [pc, #196]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058c6:	4b30      	ldr	r3, [pc, #192]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	492d      	ldr	r1, [pc, #180]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	4928      	ldr	r1, [pc, #160]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058ea:	4b27      	ldr	r3, [pc, #156]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	4a26      	ldr	r2, [pc, #152]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058f6:	4b24      	ldr	r3, [pc, #144]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058fa:	4b24      	ldr	r3, [pc, #144]	@ (800598c <RCCEx_PLL3_Config+0x160>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	69d2      	ldr	r2, [r2, #28]
 8005902:	00d2      	lsls	r2, r2, #3
 8005904:	4920      	ldr	r1, [pc, #128]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005906:	4313      	orrs	r3, r2
 8005908:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800590a:	4b1f      	ldr	r3, [pc, #124]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 800590c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590e:	4a1e      	ldr	r2, [pc, #120]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005914:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800591c:	4b1a      	ldr	r3, [pc, #104]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	4a19      	ldr	r2, [pc, #100]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005922:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005926:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005928:	e00f      	b.n	800594a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d106      	bne.n	800593e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005930:	4b15      	ldr	r3, [pc, #84]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	4a14      	ldr	r2, [pc, #80]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005936:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800593a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800593c:	e005      	b.n	800594a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800593e:	4b12      	ldr	r3, [pc, #72]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	4a11      	ldr	r2, [pc, #68]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005944:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005948:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800594a:	4b0f      	ldr	r3, [pc, #60]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a0e      	ldr	r2, [pc, #56]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005956:	f7fa fd95 	bl	8000484 <HAL_GetTick>
 800595a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800595c:	e008      	b.n	8005970 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800595e:	f7fa fd91 	bl	8000484 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e006      	b.n	800597e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005970:	4b05      	ldr	r3, [pc, #20]	@ (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400
 800598c:	ffff0007 	.word	0xffff0007

08005990 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e10f      	b.n	8005bc2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a87      	ldr	r2, [pc, #540]	@ (8005bcc <HAL_SPI_Init+0x23c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00f      	beq.n	80059d2 <HAL_SPI_Init+0x42>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a86      	ldr	r2, [pc, #536]	@ (8005bd0 <HAL_SPI_Init+0x240>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00a      	beq.n	80059d2 <HAL_SPI_Init+0x42>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a84      	ldr	r2, [pc, #528]	@ (8005bd4 <HAL_SPI_Init+0x244>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d005      	beq.n	80059d2 <HAL_SPI_Init+0x42>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b0f      	cmp	r3, #15
 80059cc:	d901      	bls.n	80059d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0f7      	b.n	8005bc2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fe2e 	bl	8006634 <SPI_GetPacketSize>
 80059d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a7b      	ldr	r2, [pc, #492]	@ (8005bcc <HAL_SPI_Init+0x23c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00c      	beq.n	80059fe <HAL_SPI_Init+0x6e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a79      	ldr	r2, [pc, #484]	@ (8005bd0 <HAL_SPI_Init+0x240>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <HAL_SPI_Init+0x6e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a78      	ldr	r2, [pc, #480]	@ (8005bd4 <HAL_SPI_Init+0x244>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d002      	beq.n	80059fe <HAL_SPI_Init+0x6e>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d811      	bhi.n	8005a22 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a02:	4a72      	ldr	r2, [pc, #456]	@ (8005bcc <HAL_SPI_Init+0x23c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a70      	ldr	r2, [pc, #448]	@ (8005bd0 <HAL_SPI_Init+0x240>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_SPI_Init+0x8c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a6f      	ldr	r2, [pc, #444]	@ (8005bd4 <HAL_SPI_Init+0x244>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d104      	bne.n	8005a26 <HAL_SPI_Init+0x96>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d901      	bls.n	8005a26 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0cd      	b.n	8005bc2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f007 ff02 	bl	800d844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005a62:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a6c:	d119      	bne.n	8005aa2 <HAL_SPI_Init+0x112>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a76:	d103      	bne.n	8005a80 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10c      	bne.n	8005aa2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a90:	d107      	bne.n	8005aa2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005aa0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00f      	beq.n	8005ace <HAL_SPI_Init+0x13e>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d90b      	bls.n	8005ace <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e007      	b.n	8005ade <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005adc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af0:	ea42 0103 	orr.w	r1, r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b3e:	ea42 0103 	orr.w	r1, r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d113      	bne.n	8005b7e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b68:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b7c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40013000 	.word	0x40013000
 8005bd0:	40003800 	.word	0x40003800
 8005bd4:	40003c00 	.word	0x40003c00

08005bd8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3320      	adds	r3, #32
 8005bee:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bf0:	f7fa fc48 	bl	8000484 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d001      	beq.n	8005c06 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
 8005c04:	e1d1      	b.n	8005faa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_Transmit+0x3a>
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e1c9      	b.n	8005faa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_SPI_Transmit+0x4c>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e1c2      	b.n	8005faa <HAL_SPI_Transmit+0x3d2>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2203      	movs	r2, #3
 8005c30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	88fa      	ldrh	r2, [r7, #6]
 8005c4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005c7c:	d108      	bne.n	8005c90 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e009      	b.n	8005ca4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005ca2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	4b96      	ldr	r3, [pc, #600]	@ (8005f04 <HAL_SPI_Transmit+0x32c>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	88f9      	ldrh	r1, [r7, #6]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cd0:	d107      	bne.n	8005ce2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b0f      	cmp	r3, #15
 8005ce8:	d947      	bls.n	8005d7a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005cea:	e03f      	b.n	8005d6c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d114      	bne.n	8005d24 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005d22:	e023      	b.n	8005d6c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d24:	f7fa fbae 	bl	8000484 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d803      	bhi.n	8005d3c <HAL_SPI_Transmit+0x164>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d102      	bne.n	8005d42 <HAL_SPI_Transmit+0x16a>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d114      	bne.n	8005d6c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 fba8 	bl	8006498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e11e      	b.n	8005faa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1b9      	bne.n	8005cec <HAL_SPI_Transmit+0x114>
 8005d78:	e0f1      	b.n	8005f5e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b07      	cmp	r3, #7
 8005d80:	f240 80e6 	bls.w	8005f50 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005d84:	e05d      	b.n	8005e42 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d132      	bne.n	8005dfa <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d918      	bls.n	8005dd2 <HAL_SPI_Transmit+0x1fa>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d014      	beq.n	8005dd2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db8:	1d1a      	adds	r2, r3, #4
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b02      	subs	r3, #2
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005dd0:	e037      	b.n	8005e42 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd6:	881a      	ldrh	r2, [r3, #0]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de0:	1c9a      	adds	r2, r3, #2
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005df8:	e023      	b.n	8005e42 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dfa:	f7fa fb43 	bl	8000484 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d803      	bhi.n	8005e12 <HAL_SPI_Transmit+0x23a>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d102      	bne.n	8005e18 <HAL_SPI_Transmit+0x240>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d114      	bne.n	8005e42 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 fb3d 	bl	8006498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e0b3      	b.n	8005faa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d19b      	bne.n	8005d86 <HAL_SPI_Transmit+0x1ae>
 8005e4e:	e086      	b.n	8005f5e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d154      	bne.n	8005f08 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d918      	bls.n	8005e9c <HAL_SPI_Transmit+0x2c4>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e6e:	2b40      	cmp	r3, #64	@ 0x40
 8005e70:	d914      	bls.n	8005e9c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e82:	1d1a      	adds	r2, r3, #4
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b04      	subs	r3, #4
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005e9a:	e059      	b.n	8005f50 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d917      	bls.n	8005ed8 <HAL_SPI_Transmit+0x300>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d013      	beq.n	8005ed8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb4:	881a      	ldrh	r2, [r3, #0]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ebe:	1c9a      	adds	r2, r3, #2
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b02      	subs	r3, #2
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005ed6:	e03b      	b.n	8005f50 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3320      	adds	r3, #32
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005f02:	e025      	b.n	8005f50 <HAL_SPI_Transmit+0x378>
 8005f04:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f08:	f7fa fabc 	bl	8000484 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d803      	bhi.n	8005f20 <HAL_SPI_Transmit+0x348>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d102      	bne.n	8005f26 <HAL_SPI_Transmit+0x34e>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d114      	bne.n	8005f50 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fab6 	bl	8006498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e02c      	b.n	8005faa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f47f af79 	bne.w	8005e50 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2108      	movs	r1, #8
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fb35 	bl	80065d8 <SPI_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d007      	beq.n	8005f84 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 fa87 	bl	8006498 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop

08005fb4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3301      	adds	r3, #1
 8005fce:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3330      	adds	r3, #48	@ 0x30
 8005fd6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fd8:	f7fa fa54 	bl	8000484 <HAL_GetTick>
 8005fdc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d001      	beq.n	8005fee <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8005fea:	2302      	movs	r3, #2
 8005fec:	e250      	b.n	8006490 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_SPI_Receive+0x46>
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e248      	b.n	8006490 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_SPI_Receive+0x58>
 8006008:	2302      	movs	r3, #2
 800600a:	e241      	b.n	8006490 <HAL_SPI_Receive+0x4dc>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2204      	movs	r2, #4
 8006018:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	88fa      	ldrh	r2, [r7, #6]
 800602e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	88fa      	ldrh	r2, [r7, #6]
 8006036:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006064:	d108      	bne.n	8006078 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e009      	b.n	800608c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800608a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	4b95      	ldr	r3, [pc, #596]	@ (80062e8 <HAL_SPI_Receive+0x334>)
 8006094:	4013      	ands	r3, r2
 8006096:	88f9      	ldrh	r1, [r7, #6]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	430b      	orrs	r3, r1
 800609e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060b8:	d107      	bne.n	80060ca <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	2b0f      	cmp	r3, #15
 80060d0:	d96c      	bls.n	80061ac <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80060d2:	e064      	b.n	800619e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d114      	bne.n	8006114 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060f4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060fa:	1d1a      	adds	r2, r3, #4
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006112:	e044      	b.n	800619e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800611a:	b29b      	uxth	r3, r3
 800611c:	8bfa      	ldrh	r2, [r7, #30]
 800611e:	429a      	cmp	r2, r3
 8006120:	d919      	bls.n	8006156 <HAL_SPI_Receive+0x1a2>
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d014      	beq.n	8006156 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006134:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006136:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800613c:	1d1a      	adds	r2, r3, #4
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006154:	e023      	b.n	800619e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006156:	f7fa f995 	bl	8000484 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d803      	bhi.n	800616e <HAL_SPI_Receive+0x1ba>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d102      	bne.n	8006174 <HAL_SPI_Receive+0x1c0>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d114      	bne.n	800619e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f98f 	bl	8006498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006180:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e178      	b.n	8006490 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d194      	bne.n	80060d4 <HAL_SPI_Receive+0x120>
 80061aa:	e15e      	b.n	800646a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	2b07      	cmp	r3, #7
 80061b2:	f240 8153 	bls.w	800645c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80061b6:	e08f      	b.n	80062d8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d114      	bne.n	80061f8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	8812      	ldrh	r2, [r2, #0]
 80061d6:	b292      	uxth	r2, r2
 80061d8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061de:	1c9a      	adds	r2, r3, #2
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061f6:	e06f      	b.n	80062d8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061fe:	b29b      	uxth	r3, r3
 8006200:	8bfa      	ldrh	r2, [r7, #30]
 8006202:	429a      	cmp	r2, r3
 8006204:	d924      	bls.n	8006250 <HAL_SPI_Receive+0x29c>
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01f      	beq.n	8006250 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	8812      	ldrh	r2, [r2, #0]
 8006218:	b292      	uxth	r2, r2
 800621a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006220:	1c9a      	adds	r2, r3, #2
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	8812      	ldrh	r2, [r2, #0]
 800622e:	b292      	uxth	r2, r2
 8006230:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006236:	1c9a      	adds	r2, r3, #2
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b02      	subs	r3, #2
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800624e:	e043      	b.n	80062d8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	d119      	bne.n	8006290 <HAL_SPI_Receive+0x2dc>
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d014      	beq.n	8006290 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	8812      	ldrh	r2, [r2, #0]
 800626e:	b292      	uxth	r2, r2
 8006270:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006276:	1c9a      	adds	r2, r3, #2
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800628e:	e023      	b.n	80062d8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006290:	f7fa f8f8 	bl	8000484 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d803      	bhi.n	80062a8 <HAL_SPI_Receive+0x2f4>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d102      	bne.n	80062ae <HAL_SPI_Receive+0x2fa>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d114      	bne.n	80062d8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f8f2 	bl	8006498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e0db      	b.n	8006490 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f47f af69 	bne.w	80061b8 <HAL_SPI_Receive+0x204>
 80062e6:	e0c0      	b.n	800646a <HAL_SPI_Receive+0x4b6>
 80062e8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d117      	bne.n	8006332 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800630e:	7812      	ldrb	r2, [r2, #0]
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006330:	e094      	b.n	800645c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006338:	b29b      	uxth	r3, r3
 800633a:	8bfa      	ldrh	r2, [r7, #30]
 800633c:	429a      	cmp	r2, r3
 800633e:	d946      	bls.n	80063ce <HAL_SPI_Receive+0x41a>
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d041      	beq.n	80063ce <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006356:	7812      	ldrb	r2, [r2, #0]
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800638e:	7812      	ldrb	r2, [r2, #0]
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b04      	subs	r3, #4
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80063cc:	e046      	b.n	800645c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d81c      	bhi.n	8006414 <HAL_SPI_Receive+0x460>
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d017      	beq.n	8006414 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063f0:	7812      	ldrb	r2, [r2, #0]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006412:	e023      	b.n	800645c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006414:	f7fa f836 	bl	8000484 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d803      	bhi.n	800642c <HAL_SPI_Receive+0x478>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d102      	bne.n	8006432 <HAL_SPI_Receive+0x47e>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d114      	bne.n	800645c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 f830 	bl	8006498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800643e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e019      	b.n	8006490 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	f47f af41 	bne.w	80062ec <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f814 	bl	8006498 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800648e:	2300      	movs	r3, #0
  }
}
 8006490:	4618      	mov	r0, r3
 8006492:	3720      	adds	r7, #32
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699a      	ldr	r2, [r3, #24]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0208 	orr.w	r2, r2, #8
 80064b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0210 	orr.w	r2, r2, #16
 80064c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6919      	ldr	r1, [r3, #16]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b3c      	ldr	r3, [pc, #240]	@ (80065d4 <SPI_CloseTransfer+0x13c>)
 80064e4:	400b      	ands	r3, r1
 80064e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80064f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b04      	cmp	r3, #4
 8006502:	d014      	beq.n	800652e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00f      	beq.n	800652e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006514:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	699a      	ldr	r2, [r3, #24]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0220 	orr.w	r2, r2, #32
 800652c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b03      	cmp	r3, #3
 8006538:	d014      	beq.n	8006564 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00f      	beq.n	8006564 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800654a:	f043 0204 	orr.w	r2, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006562:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00f      	beq.n	800658e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006574:	f043 0201 	orr.w	r2, r3, #1
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699a      	ldr	r2, [r3, #24]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800658c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00f      	beq.n	80065b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800659e:	f043 0208 	orr.w	r2, r3, #8
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80065c8:	bf00      	nop
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	fffffc90 	.word	0xfffffc90

080065d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	4613      	mov	r3, r2
 80065e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80065e8:	e010      	b.n	800660c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ea:	f7f9 ff4b 	bl	8000484 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d803      	bhi.n	8006602 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d102      	bne.n	8006608 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e00f      	b.n	800662c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695a      	ldr	r2, [r3, #20]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	4013      	ands	r3, r2
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	429a      	cmp	r2, r3
 800661a:	bf0c      	ite	eq
 800661c:	2301      	moveq	r3, #1
 800661e:	2300      	movne	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	429a      	cmp	r2, r3
 8006628:	d0df      	beq.n	80065ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006640:	095b      	lsrs	r3, r3, #5
 8006642:	3301      	adds	r3, #1
 8006644:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	3301      	adds	r3, #1
 800664c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	3307      	adds	r3, #7
 8006652:	08db      	lsrs	r3, r3, #3
 8006654:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	fb02 f303 	mul.w	r3, r2, r3
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e049      	b.n	8006710 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f007 fc45 	bl	800df20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3304      	adds	r3, #4
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f000 fd59 	bl	8007160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b01      	cmp	r3, #1
 800672a:	d001      	beq.n	8006730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e054      	b.n	80067da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0201 	orr.w	r2, r2, #1
 8006746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a26      	ldr	r2, [pc, #152]	@ (80067e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d022      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x80>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800675a:	d01d      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x80>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a22      	ldr	r2, [pc, #136]	@ (80067ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d018      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x80>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a21      	ldr	r2, [pc, #132]	@ (80067f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d013      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x80>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1f      	ldr	r2, [pc, #124]	@ (80067f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00e      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x80>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1e      	ldr	r2, [pc, #120]	@ (80067f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d009      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x80>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1c      	ldr	r2, [pc, #112]	@ (80067fc <HAL_TIM_Base_Start_IT+0xe4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x80>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a1b      	ldr	r2, [pc, #108]	@ (8006800 <HAL_TIM_Base_Start_IT+0xe8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d115      	bne.n	80067c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	4b19      	ldr	r3, [pc, #100]	@ (8006804 <HAL_TIM_Base_Start_IT+0xec>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b06      	cmp	r3, #6
 80067a8:	d015      	beq.n	80067d6 <HAL_TIM_Base_Start_IT+0xbe>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b0:	d011      	beq.n	80067d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0201 	orr.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c2:	e008      	b.n	80067d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e000      	b.n	80067d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40000400 	.word	0x40000400
 80067f0:	40000800 	.word	0x40000800
 80067f4:	40000c00 	.word	0x40000c00
 80067f8:	40010400 	.word	0x40010400
 80067fc:	40001800 	.word	0x40001800
 8006800:	40014000 	.word	0x40014000
 8006804:	00010007 	.word	0x00010007

08006808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e049      	b.n	80068ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f841 	bl	80068b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3304      	adds	r3, #4
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f000 fc8a 	bl	8007160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <HAL_TIM_PWM_Start+0x24>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e03c      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d109      	bne.n	800690a <HAL_TIM_PWM_Start+0x3e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	bf14      	ite	ne
 8006902:	2301      	movne	r3, #1
 8006904:	2300      	moveq	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	e02f      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b08      	cmp	r3, #8
 800690e:	d109      	bne.n	8006924 <HAL_TIM_PWM_Start+0x58>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	bf14      	ite	ne
 800691c:	2301      	movne	r3, #1
 800691e:	2300      	moveq	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	e022      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b0c      	cmp	r3, #12
 8006928:	d109      	bne.n	800693e <HAL_TIM_PWM_Start+0x72>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b01      	cmp	r3, #1
 8006934:	bf14      	ite	ne
 8006936:	2301      	movne	r3, #1
 8006938:	2300      	moveq	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	e015      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b10      	cmp	r3, #16
 8006942:	d109      	bne.n	8006958 <HAL_TIM_PWM_Start+0x8c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	e008      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	bf14      	ite	ne
 8006964:	2301      	movne	r3, #1
 8006966:	2300      	moveq	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e0a1      	b.n	8006ab6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <HAL_TIM_PWM_Start+0xb6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006980:	e023      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b04      	cmp	r3, #4
 8006986:	d104      	bne.n	8006992 <HAL_TIM_PWM_Start+0xc6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006990:	e01b      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b08      	cmp	r3, #8
 8006996:	d104      	bne.n	80069a2 <HAL_TIM_PWM_Start+0xd6>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069a0:	e013      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b0c      	cmp	r3, #12
 80069a6:	d104      	bne.n	80069b2 <HAL_TIM_PWM_Start+0xe6>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069b0:	e00b      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d104      	bne.n	80069c2 <HAL_TIM_PWM_Start+0xf6>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069c0:	e003      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2201      	movs	r2, #1
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 ffde 	bl	8007994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a38      	ldr	r2, [pc, #224]	@ (8006ac0 <HAL_TIM_PWM_Start+0x1f4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d013      	beq.n	8006a0a <HAL_TIM_PWM_Start+0x13e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a37      	ldr	r2, [pc, #220]	@ (8006ac4 <HAL_TIM_PWM_Start+0x1f8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00e      	beq.n	8006a0a <HAL_TIM_PWM_Start+0x13e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a35      	ldr	r2, [pc, #212]	@ (8006ac8 <HAL_TIM_PWM_Start+0x1fc>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d009      	beq.n	8006a0a <HAL_TIM_PWM_Start+0x13e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a34      	ldr	r2, [pc, #208]	@ (8006acc <HAL_TIM_PWM_Start+0x200>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d004      	beq.n	8006a0a <HAL_TIM_PWM_Start+0x13e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a32      	ldr	r2, [pc, #200]	@ (8006ad0 <HAL_TIM_PWM_Start+0x204>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_PWM_Start+0x142>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <HAL_TIM_PWM_Start+0x144>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a25      	ldr	r2, [pc, #148]	@ (8006ac0 <HAL_TIM_PWM_Start+0x1f4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d022      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a36:	d01d      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a25      	ldr	r2, [pc, #148]	@ (8006ad4 <HAL_TIM_PWM_Start+0x208>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d018      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a24      	ldr	r2, [pc, #144]	@ (8006ad8 <HAL_TIM_PWM_Start+0x20c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a22      	ldr	r2, [pc, #136]	@ (8006adc <HAL_TIM_PWM_Start+0x210>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00e      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ac4 <HAL_TIM_PWM_Start+0x1f8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d009      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae0 <HAL_TIM_PWM_Start+0x214>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a16      	ldr	r2, [pc, #88]	@ (8006ac8 <HAL_TIM_PWM_Start+0x1fc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d115      	bne.n	8006aa0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae4 <HAL_TIM_PWM_Start+0x218>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b06      	cmp	r3, #6
 8006a84:	d015      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x1e6>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a8c:	d011      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9e:	e008      	b.n	8006ab2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	e000      	b.n	8006ab4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40010400 	.word	0x40010400
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40000c00 	.word	0x40000c00
 8006ae0:	40001800 	.word	0x40001800
 8006ae4:	00010007 	.word	0x00010007

08006ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d020      	beq.n	8006b4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01b      	beq.n	8006b4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0202 	mvn.w	r2, #2
 8006b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 faf6 	bl	8007124 <HAL_TIM_IC_CaptureCallback>
 8006b38:	e005      	b.n	8006b46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fae8 	bl	8007110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 faf9 	bl	8007138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d020      	beq.n	8006b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01b      	beq.n	8006b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0204 	mvn.w	r2, #4
 8006b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fad0 	bl	8007124 <HAL_TIM_IC_CaptureCallback>
 8006b84:	e005      	b.n	8006b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fac2 	bl	8007110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fad3 	bl	8007138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d020      	beq.n	8006be4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f003 0308 	and.w	r3, r3, #8
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01b      	beq.n	8006be4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f06f 0208 	mvn.w	r2, #8
 8006bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 faaa 	bl	8007124 <HAL_TIM_IC_CaptureCallback>
 8006bd0:	e005      	b.n	8006bde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa9c 	bl	8007110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 faad 	bl	8007138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f003 0310 	and.w	r3, r3, #16
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d020      	beq.n	8006c30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01b      	beq.n	8006c30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f06f 0210 	mvn.w	r2, #16
 8006c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2208      	movs	r2, #8
 8006c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa84 	bl	8007124 <HAL_TIM_IC_CaptureCallback>
 8006c1c:	e005      	b.n	8006c2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa76 	bl	8007110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fa87 	bl	8007138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00c      	beq.n	8006c54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f06f 0201 	mvn.w	r2, #1
 8006c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f006 fcfe 	bl	800d650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d104      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00c      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 f887 	bl	8007d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00c      	beq.n	8006ca6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 f87f 	bl	8007da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00c      	beq.n	8006cca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fa41 	bl	800714c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00c      	beq.n	8006cee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f06f 0220 	mvn.w	r2, #32
 8006ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f847 	bl	8007d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e0ff      	b.n	8006f16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b14      	cmp	r3, #20
 8006d22:	f200 80f0 	bhi.w	8006f06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d26:	a201      	add	r2, pc, #4	@ (adr r2, 8006d2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2c:	08006d81 	.word	0x08006d81
 8006d30:	08006f07 	.word	0x08006f07
 8006d34:	08006f07 	.word	0x08006f07
 8006d38:	08006f07 	.word	0x08006f07
 8006d3c:	08006dc1 	.word	0x08006dc1
 8006d40:	08006f07 	.word	0x08006f07
 8006d44:	08006f07 	.word	0x08006f07
 8006d48:	08006f07 	.word	0x08006f07
 8006d4c:	08006e03 	.word	0x08006e03
 8006d50:	08006f07 	.word	0x08006f07
 8006d54:	08006f07 	.word	0x08006f07
 8006d58:	08006f07 	.word	0x08006f07
 8006d5c:	08006e43 	.word	0x08006e43
 8006d60:	08006f07 	.word	0x08006f07
 8006d64:	08006f07 	.word	0x08006f07
 8006d68:	08006f07 	.word	0x08006f07
 8006d6c:	08006e85 	.word	0x08006e85
 8006d70:	08006f07 	.word	0x08006f07
 8006d74:	08006f07 	.word	0x08006f07
 8006d78:	08006f07 	.word	0x08006f07
 8006d7c:	08006ec5 	.word	0x08006ec5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fa90 	bl	80072ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0208 	orr.w	r2, r2, #8
 8006d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0204 	bic.w	r2, r2, #4
 8006daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6999      	ldr	r1, [r3, #24]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	619a      	str	r2, [r3, #24]
      break;
 8006dbe:	e0a5      	b.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fb00 	bl	80073cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6999      	ldr	r1, [r3, #24]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	619a      	str	r2, [r3, #24]
      break;
 8006e00:	e084      	b.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fb69 	bl	80074e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0208 	orr.w	r2, r2, #8
 8006e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0204 	bic.w	r2, r2, #4
 8006e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69d9      	ldr	r1, [r3, #28]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	61da      	str	r2, [r3, #28]
      break;
 8006e40:	e064      	b.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fbd1 	bl	80075f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69d9      	ldr	r1, [r3, #28]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	021a      	lsls	r2, r3, #8
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	61da      	str	r2, [r3, #28]
      break;
 8006e82:	e043      	b.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fc1a 	bl	80076c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0208 	orr.w	r2, r2, #8
 8006e9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0204 	bic.w	r2, r2, #4
 8006eae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006ec2:	e023      	b.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fc5e 	bl	800778c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ede:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	021a      	lsls	r2, r3, #8
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f04:	e002      	b.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	75fb      	strb	r3, [r7, #23]
      break;
 8006f0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop

08006f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_TIM_ConfigClockSource+0x1c>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e0dc      	b.n	80070f6 <HAL_TIM_ConfigClockSource+0x1d6>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	4b6a      	ldr	r3, [pc, #424]	@ (8007100 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a64      	ldr	r2, [pc, #400]	@ (8007104 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	f000 80a9 	beq.w	80070ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006f78:	4a62      	ldr	r2, [pc, #392]	@ (8007104 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	f200 80ae 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006f80:	4a61      	ldr	r2, [pc, #388]	@ (8007108 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	f000 80a1 	beq.w	80070ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006f88:	4a5f      	ldr	r2, [pc, #380]	@ (8007108 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	f200 80a6 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006f90:	4a5e      	ldr	r2, [pc, #376]	@ (800710c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	f000 8099 	beq.w	80070ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006f98:	4a5c      	ldr	r2, [pc, #368]	@ (800710c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	f200 809e 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006fa0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006fa4:	f000 8091 	beq.w	80070ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006fa8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006fac:	f200 8096 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006fb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fb4:	f000 8089 	beq.w	80070ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006fb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fbc:	f200 808e 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc4:	d03e      	beq.n	8007044 <HAL_TIM_ConfigClockSource+0x124>
 8006fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fca:	f200 8087 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fd2:	f000 8086 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x1c2>
 8006fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fda:	d87f      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006fdc:	2b70      	cmp	r3, #112	@ 0x70
 8006fde:	d01a      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0xf6>
 8006fe0:	2b70      	cmp	r3, #112	@ 0x70
 8006fe2:	d87b      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006fe4:	2b60      	cmp	r3, #96	@ 0x60
 8006fe6:	d050      	beq.n	800708a <HAL_TIM_ConfigClockSource+0x16a>
 8006fe8:	2b60      	cmp	r3, #96	@ 0x60
 8006fea:	d877      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006fec:	2b50      	cmp	r3, #80	@ 0x50
 8006fee:	d03c      	beq.n	800706a <HAL_TIM_ConfigClockSource+0x14a>
 8006ff0:	2b50      	cmp	r3, #80	@ 0x50
 8006ff2:	d873      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006ff4:	2b40      	cmp	r3, #64	@ 0x40
 8006ff6:	d058      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x18a>
 8006ff8:	2b40      	cmp	r3, #64	@ 0x40
 8006ffa:	d86f      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006ffc:	2b30      	cmp	r3, #48	@ 0x30
 8006ffe:	d064      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007000:	2b30      	cmp	r3, #48	@ 0x30
 8007002:	d86b      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 8007004:	2b20      	cmp	r3, #32
 8007006:	d060      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007008:	2b20      	cmp	r3, #32
 800700a:	d867      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
 800700c:	2b00      	cmp	r3, #0
 800700e:	d05c      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007010:	2b10      	cmp	r3, #16
 8007012:	d05a      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007014:	e062      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007026:	f000 fc95 	bl	8007954 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007038:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	609a      	str	r2, [r3, #8]
      break;
 8007042:	e04f      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007054:	f000 fc7e 	bl	8007954 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007066:	609a      	str	r2, [r3, #8]
      break;
 8007068:	e03c      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007076:	461a      	mov	r2, r3
 8007078:	f000 fbee 	bl	8007858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2150      	movs	r1, #80	@ 0x50
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fc48 	bl	8007918 <TIM_ITRx_SetConfig>
      break;
 8007088:	e02c      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007096:	461a      	mov	r2, r3
 8007098:	f000 fc0d 	bl	80078b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2160      	movs	r1, #96	@ 0x60
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fc38 	bl	8007918 <TIM_ITRx_SetConfig>
      break;
 80070a8:	e01c      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070b6:	461a      	mov	r2, r3
 80070b8:	f000 fbce 	bl	8007858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2140      	movs	r1, #64	@ 0x40
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fc28 	bl	8007918 <TIM_ITRx_SetConfig>
      break;
 80070c8:	e00c      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4619      	mov	r1, r3
 80070d4:	4610      	mov	r0, r2
 80070d6:	f000 fc1f 	bl	8007918 <TIM_ITRx_SetConfig>
      break;
 80070da:	e003      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	73fb      	strb	r3, [r7, #15]
      break;
 80070e0:	e000      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80070e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	ffceff88 	.word	0xffceff88
 8007104:	00100040 	.word	0x00100040
 8007108:	00100030 	.word	0x00100030
 800710c:	00100020 	.word	0x00100020

08007110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a46      	ldr	r2, [pc, #280]	@ (800728c <TIM_Base_SetConfig+0x12c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d013      	beq.n	80071a0 <TIM_Base_SetConfig+0x40>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800717e:	d00f      	beq.n	80071a0 <TIM_Base_SetConfig+0x40>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a43      	ldr	r2, [pc, #268]	@ (8007290 <TIM_Base_SetConfig+0x130>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00b      	beq.n	80071a0 <TIM_Base_SetConfig+0x40>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a42      	ldr	r2, [pc, #264]	@ (8007294 <TIM_Base_SetConfig+0x134>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d007      	beq.n	80071a0 <TIM_Base_SetConfig+0x40>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a41      	ldr	r2, [pc, #260]	@ (8007298 <TIM_Base_SetConfig+0x138>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_Base_SetConfig+0x40>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a40      	ldr	r2, [pc, #256]	@ (800729c <TIM_Base_SetConfig+0x13c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d108      	bne.n	80071b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a35      	ldr	r2, [pc, #212]	@ (800728c <TIM_Base_SetConfig+0x12c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d01f      	beq.n	80071fa <TIM_Base_SetConfig+0x9a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c0:	d01b      	beq.n	80071fa <TIM_Base_SetConfig+0x9a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a32      	ldr	r2, [pc, #200]	@ (8007290 <TIM_Base_SetConfig+0x130>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d017      	beq.n	80071fa <TIM_Base_SetConfig+0x9a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a31      	ldr	r2, [pc, #196]	@ (8007294 <TIM_Base_SetConfig+0x134>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <TIM_Base_SetConfig+0x9a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a30      	ldr	r2, [pc, #192]	@ (8007298 <TIM_Base_SetConfig+0x138>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00f      	beq.n	80071fa <TIM_Base_SetConfig+0x9a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a2f      	ldr	r2, [pc, #188]	@ (800729c <TIM_Base_SetConfig+0x13c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00b      	beq.n	80071fa <TIM_Base_SetConfig+0x9a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a2e      	ldr	r2, [pc, #184]	@ (80072a0 <TIM_Base_SetConfig+0x140>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d007      	beq.n	80071fa <TIM_Base_SetConfig+0x9a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a2d      	ldr	r2, [pc, #180]	@ (80072a4 <TIM_Base_SetConfig+0x144>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d003      	beq.n	80071fa <TIM_Base_SetConfig+0x9a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a2c      	ldr	r2, [pc, #176]	@ (80072a8 <TIM_Base_SetConfig+0x148>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d108      	bne.n	800720c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a16      	ldr	r2, [pc, #88]	@ (800728c <TIM_Base_SetConfig+0x12c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00f      	beq.n	8007258 <TIM_Base_SetConfig+0xf8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a18      	ldr	r2, [pc, #96]	@ (800729c <TIM_Base_SetConfig+0x13c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00b      	beq.n	8007258 <TIM_Base_SetConfig+0xf8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a17      	ldr	r2, [pc, #92]	@ (80072a0 <TIM_Base_SetConfig+0x140>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d007      	beq.n	8007258 <TIM_Base_SetConfig+0xf8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a16      	ldr	r2, [pc, #88]	@ (80072a4 <TIM_Base_SetConfig+0x144>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_Base_SetConfig+0xf8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a15      	ldr	r2, [pc, #84]	@ (80072a8 <TIM_Base_SetConfig+0x148>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d103      	bne.n	8007260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b01      	cmp	r3, #1
 8007270:	d105      	bne.n	800727e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f023 0201 	bic.w	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	611a      	str	r2, [r3, #16]
  }
}
 800727e:	bf00      	nop
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	40010000 	.word	0x40010000
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	40010400 	.word	0x40010400
 80072a0:	40014000 	.word	0x40014000
 80072a4:	40014400 	.word	0x40014400
 80072a8:	40014800 	.word	0x40014800

080072ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f023 0201 	bic.w	r2, r3, #1
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4b37      	ldr	r3, [pc, #220]	@ (80073b4 <TIM_OC1_SetConfig+0x108>)
 80072d8:	4013      	ands	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f023 0302 	bic.w	r3, r3, #2
 80072f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a2d      	ldr	r2, [pc, #180]	@ (80073b8 <TIM_OC1_SetConfig+0x10c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00f      	beq.n	8007328 <TIM_OC1_SetConfig+0x7c>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a2c      	ldr	r2, [pc, #176]	@ (80073bc <TIM_OC1_SetConfig+0x110>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00b      	beq.n	8007328 <TIM_OC1_SetConfig+0x7c>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a2b      	ldr	r2, [pc, #172]	@ (80073c0 <TIM_OC1_SetConfig+0x114>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d007      	beq.n	8007328 <TIM_OC1_SetConfig+0x7c>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a2a      	ldr	r2, [pc, #168]	@ (80073c4 <TIM_OC1_SetConfig+0x118>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d003      	beq.n	8007328 <TIM_OC1_SetConfig+0x7c>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a29      	ldr	r2, [pc, #164]	@ (80073c8 <TIM_OC1_SetConfig+0x11c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d10c      	bne.n	8007342 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f023 0308 	bic.w	r3, r3, #8
 800732e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f023 0304 	bic.w	r3, r3, #4
 8007340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a1c      	ldr	r2, [pc, #112]	@ (80073b8 <TIM_OC1_SetConfig+0x10c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00f      	beq.n	800736a <TIM_OC1_SetConfig+0xbe>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a1b      	ldr	r2, [pc, #108]	@ (80073bc <TIM_OC1_SetConfig+0x110>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00b      	beq.n	800736a <TIM_OC1_SetConfig+0xbe>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a1a      	ldr	r2, [pc, #104]	@ (80073c0 <TIM_OC1_SetConfig+0x114>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d007      	beq.n	800736a <TIM_OC1_SetConfig+0xbe>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a19      	ldr	r2, [pc, #100]	@ (80073c4 <TIM_OC1_SetConfig+0x118>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d003      	beq.n	800736a <TIM_OC1_SetConfig+0xbe>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a18      	ldr	r2, [pc, #96]	@ (80073c8 <TIM_OC1_SetConfig+0x11c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d111      	bne.n	800738e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	621a      	str	r2, [r3, #32]
}
 80073a8:	bf00      	nop
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	fffeff8f 	.word	0xfffeff8f
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40010400 	.word	0x40010400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40014400 	.word	0x40014400
 80073c8:	40014800 	.word	0x40014800

080073cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f023 0210 	bic.w	r2, r3, #16
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4b34      	ldr	r3, [pc, #208]	@ (80074c8 <TIM_OC2_SetConfig+0xfc>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f023 0320 	bic.w	r3, r3, #32
 8007416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	4313      	orrs	r3, r2
 8007422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a29      	ldr	r2, [pc, #164]	@ (80074cc <TIM_OC2_SetConfig+0x100>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d003      	beq.n	8007434 <TIM_OC2_SetConfig+0x68>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a28      	ldr	r2, [pc, #160]	@ (80074d0 <TIM_OC2_SetConfig+0x104>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d10d      	bne.n	8007450 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800743a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800744e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a1e      	ldr	r2, [pc, #120]	@ (80074cc <TIM_OC2_SetConfig+0x100>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00f      	beq.n	8007478 <TIM_OC2_SetConfig+0xac>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a1d      	ldr	r2, [pc, #116]	@ (80074d0 <TIM_OC2_SetConfig+0x104>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00b      	beq.n	8007478 <TIM_OC2_SetConfig+0xac>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a1c      	ldr	r2, [pc, #112]	@ (80074d4 <TIM_OC2_SetConfig+0x108>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_OC2_SetConfig+0xac>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a1b      	ldr	r2, [pc, #108]	@ (80074d8 <TIM_OC2_SetConfig+0x10c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_OC2_SetConfig+0xac>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a1a      	ldr	r2, [pc, #104]	@ (80074dc <TIM_OC2_SetConfig+0x110>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d113      	bne.n	80074a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800747e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	4313      	orrs	r3, r2
 8007492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	621a      	str	r2, [r3, #32]
}
 80074ba:	bf00      	nop
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	feff8fff 	.word	0xfeff8fff
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40010400 	.word	0x40010400
 80074d4:	40014000 	.word	0x40014000
 80074d8:	40014400 	.word	0x40014400
 80074dc:	40014800 	.word	0x40014800

080074e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4b33      	ldr	r3, [pc, #204]	@ (80075d8 <TIM_OC3_SetConfig+0xf8>)
 800750c:	4013      	ands	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a28      	ldr	r2, [pc, #160]	@ (80075dc <TIM_OC3_SetConfig+0xfc>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_OC3_SetConfig+0x66>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a27      	ldr	r2, [pc, #156]	@ (80075e0 <TIM_OC3_SetConfig+0x100>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d10d      	bne.n	8007562 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800754c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	4313      	orrs	r3, r2
 8007558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a1d      	ldr	r2, [pc, #116]	@ (80075dc <TIM_OC3_SetConfig+0xfc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00f      	beq.n	800758a <TIM_OC3_SetConfig+0xaa>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a1c      	ldr	r2, [pc, #112]	@ (80075e0 <TIM_OC3_SetConfig+0x100>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00b      	beq.n	800758a <TIM_OC3_SetConfig+0xaa>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a1b      	ldr	r2, [pc, #108]	@ (80075e4 <TIM_OC3_SetConfig+0x104>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_OC3_SetConfig+0xaa>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a1a      	ldr	r2, [pc, #104]	@ (80075e8 <TIM_OC3_SetConfig+0x108>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_OC3_SetConfig+0xaa>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a19      	ldr	r2, [pc, #100]	@ (80075ec <TIM_OC3_SetConfig+0x10c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d113      	bne.n	80075b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	621a      	str	r2, [r3, #32]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	fffeff8f 	.word	0xfffeff8f
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40010400 	.word	0x40010400
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40014400 	.word	0x40014400
 80075ec:	40014800 	.word	0x40014800

080075f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4b24      	ldr	r3, [pc, #144]	@ (80076ac <TIM_OC4_SetConfig+0xbc>)
 800761c:	4013      	ands	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	021b      	lsls	r3, r3, #8
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800763a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	031b      	lsls	r3, r3, #12
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a19      	ldr	r2, [pc, #100]	@ (80076b0 <TIM_OC4_SetConfig+0xc0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00f      	beq.n	8007670 <TIM_OC4_SetConfig+0x80>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a18      	ldr	r2, [pc, #96]	@ (80076b4 <TIM_OC4_SetConfig+0xc4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00b      	beq.n	8007670 <TIM_OC4_SetConfig+0x80>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a17      	ldr	r2, [pc, #92]	@ (80076b8 <TIM_OC4_SetConfig+0xc8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d007      	beq.n	8007670 <TIM_OC4_SetConfig+0x80>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a16      	ldr	r2, [pc, #88]	@ (80076bc <TIM_OC4_SetConfig+0xcc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_OC4_SetConfig+0x80>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a15      	ldr	r2, [pc, #84]	@ (80076c0 <TIM_OC4_SetConfig+0xd0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d109      	bne.n	8007684 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	019b      	lsls	r3, r3, #6
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	4313      	orrs	r3, r2
 8007682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	feff8fff 	.word	0xfeff8fff
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40010400 	.word	0x40010400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800

080076c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4b21      	ldr	r3, [pc, #132]	@ (8007774 <TIM_OC5_SetConfig+0xb0>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007704:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a18      	ldr	r2, [pc, #96]	@ (8007778 <TIM_OC5_SetConfig+0xb4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00f      	beq.n	800773a <TIM_OC5_SetConfig+0x76>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a17      	ldr	r2, [pc, #92]	@ (800777c <TIM_OC5_SetConfig+0xb8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00b      	beq.n	800773a <TIM_OC5_SetConfig+0x76>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a16      	ldr	r2, [pc, #88]	@ (8007780 <TIM_OC5_SetConfig+0xbc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d007      	beq.n	800773a <TIM_OC5_SetConfig+0x76>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a15      	ldr	r2, [pc, #84]	@ (8007784 <TIM_OC5_SetConfig+0xc0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d003      	beq.n	800773a <TIM_OC5_SetConfig+0x76>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a14      	ldr	r2, [pc, #80]	@ (8007788 <TIM_OC5_SetConfig+0xc4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d109      	bne.n	800774e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007740:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	621a      	str	r2, [r3, #32]
}
 8007768:	bf00      	nop
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	fffeff8f 	.word	0xfffeff8f
 8007778:	40010000 	.word	0x40010000
 800777c:	40010400 	.word	0x40010400
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400
 8007788:	40014800 	.word	0x40014800

0800778c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4b22      	ldr	r3, [pc, #136]	@ (8007840 <TIM_OC6_SetConfig+0xb4>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	051b      	lsls	r3, r3, #20
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a19      	ldr	r2, [pc, #100]	@ (8007844 <TIM_OC6_SetConfig+0xb8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00f      	beq.n	8007804 <TIM_OC6_SetConfig+0x78>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a18      	ldr	r2, [pc, #96]	@ (8007848 <TIM_OC6_SetConfig+0xbc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00b      	beq.n	8007804 <TIM_OC6_SetConfig+0x78>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a17      	ldr	r2, [pc, #92]	@ (800784c <TIM_OC6_SetConfig+0xc0>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d007      	beq.n	8007804 <TIM_OC6_SetConfig+0x78>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a16      	ldr	r2, [pc, #88]	@ (8007850 <TIM_OC6_SetConfig+0xc4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_OC6_SetConfig+0x78>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a15      	ldr	r2, [pc, #84]	@ (8007854 <TIM_OC6_SetConfig+0xc8>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d109      	bne.n	8007818 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800780a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	029b      	lsls	r3, r3, #10
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	feff8fff 	.word	0xfeff8fff
 8007844:	40010000 	.word	0x40010000
 8007848:	40010400 	.word	0x40010400
 800784c:	40014000 	.word	0x40014000
 8007850:	40014400 	.word	0x40014400
 8007854:	40014800 	.word	0x40014800

08007858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f023 030a 	bic.w	r3, r3, #10
 8007894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b087      	sub	sp, #28
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	f023 0210 	bic.w	r2, r3, #16
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	031b      	lsls	r3, r3, #12
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
	...

08007918 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4b09      	ldr	r3, [pc, #36]	@ (8007950 <TIM_ITRx_SetConfig+0x38>)
 800792c:	4013      	ands	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4313      	orrs	r3, r2
 8007936:	f043 0307 	orr.w	r3, r3, #7
 800793a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	609a      	str	r2, [r3, #8]
}
 8007942:	bf00      	nop
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	ffcfff8f 	.word	0xffcfff8f

08007954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800796e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	021a      	lsls	r2, r3, #8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	431a      	orrs	r2, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4313      	orrs	r3, r2
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	609a      	str	r2, [r3, #8]
}
 8007988:	bf00      	nop
 800798a:	371c      	adds	r7, #28
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f003 031f 	and.w	r3, r3, #31
 80079a6:	2201      	movs	r2, #1
 80079a8:	fa02 f303 	lsl.w	r3, r2, r3
 80079ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a1a      	ldr	r2, [r3, #32]
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	43db      	mvns	r3, r3
 80079b6:	401a      	ands	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a1a      	ldr	r2, [r3, #32]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f003 031f 	and.w	r3, r3, #31
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	fa01 f303 	lsl.w	r3, r1, r3
 80079cc:	431a      	orrs	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
	...

080079e0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d109      	bne.n	8007a04 <HAL_TIMEx_PWMN_Start+0x24>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	bf14      	ite	ne
 80079fc:	2301      	movne	r3, #1
 80079fe:	2300      	moveq	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	e022      	b.n	8007a4a <HAL_TIMEx_PWMN_Start+0x6a>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d109      	bne.n	8007a1e <HAL_TIMEx_PWMN_Start+0x3e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	bf14      	ite	ne
 8007a16:	2301      	movne	r3, #1
 8007a18:	2300      	moveq	r3, #0
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	e015      	b.n	8007a4a <HAL_TIMEx_PWMN_Start+0x6a>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d109      	bne.n	8007a38 <HAL_TIMEx_PWMN_Start+0x58>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	bf14      	ite	ne
 8007a30:	2301      	movne	r3, #1
 8007a32:	2300      	moveq	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	e008      	b.n	8007a4a <HAL_TIMEx_PWMN_Start+0x6a>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	bf14      	ite	ne
 8007a44:	2301      	movne	r3, #1
 8007a46:	2300      	moveq	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e073      	b.n	8007b3a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d104      	bne.n	8007a62 <HAL_TIMEx_PWMN_Start+0x82>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a60:	e013      	b.n	8007a8a <HAL_TIMEx_PWMN_Start+0xaa>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d104      	bne.n	8007a72 <HAL_TIMEx_PWMN_Start+0x92>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a70:	e00b      	b.n	8007a8a <HAL_TIMEx_PWMN_Start+0xaa>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d104      	bne.n	8007a82 <HAL_TIMEx_PWMN_Start+0xa2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a80:	e003      	b.n	8007a8a <HAL_TIMEx_PWMN_Start+0xaa>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2202      	movs	r2, #2
 8007a86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2204      	movs	r2, #4
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 f990 	bl	8007db8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007aa6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a25      	ldr	r2, [pc, #148]	@ (8007b44 <HAL_TIMEx_PWMN_Start+0x164>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d022      	beq.n	8007af8 <HAL_TIMEx_PWMN_Start+0x118>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aba:	d01d      	beq.n	8007af8 <HAL_TIMEx_PWMN_Start+0x118>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a21      	ldr	r2, [pc, #132]	@ (8007b48 <HAL_TIMEx_PWMN_Start+0x168>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d018      	beq.n	8007af8 <HAL_TIMEx_PWMN_Start+0x118>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a20      	ldr	r2, [pc, #128]	@ (8007b4c <HAL_TIMEx_PWMN_Start+0x16c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d013      	beq.n	8007af8 <HAL_TIMEx_PWMN_Start+0x118>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8007b50 <HAL_TIMEx_PWMN_Start+0x170>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00e      	beq.n	8007af8 <HAL_TIMEx_PWMN_Start+0x118>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a1d      	ldr	r2, [pc, #116]	@ (8007b54 <HAL_TIMEx_PWMN_Start+0x174>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d009      	beq.n	8007af8 <HAL_TIMEx_PWMN_Start+0x118>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b58 <HAL_TIMEx_PWMN_Start+0x178>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <HAL_TIMEx_PWMN_Start+0x118>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b5c <HAL_TIMEx_PWMN_Start+0x17c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d115      	bne.n	8007b24 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689a      	ldr	r2, [r3, #8]
 8007afe:	4b18      	ldr	r3, [pc, #96]	@ (8007b60 <HAL_TIMEx_PWMN_Start+0x180>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b06      	cmp	r3, #6
 8007b08:	d015      	beq.n	8007b36 <HAL_TIMEx_PWMN_Start+0x156>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b10:	d011      	beq.n	8007b36 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0201 	orr.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b22:	e008      	b.n	8007b36 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0201 	orr.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	e000      	b.n	8007b38 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	40010000 	.word	0x40010000
 8007b48:	40000400 	.word	0x40000400
 8007b4c:	40000800 	.word	0x40000800
 8007b50:	40000c00 	.word	0x40000c00
 8007b54:	40010400 	.word	0x40010400
 8007b58:	40001800 	.word	0x40001800
 8007b5c:	40014000 	.word	0x40014000
 8007b60:	00010007 	.word	0x00010007

08007b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e06d      	b.n	8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a30      	ldr	r2, [pc, #192]	@ (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d004      	beq.n	8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a2f      	ldr	r2, [pc, #188]	@ (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d108      	bne.n	8007bc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007bb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a20      	ldr	r2, [pc, #128]	@ (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d022      	beq.n	8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bee:	d01d      	beq.n	8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d018      	beq.n	8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d013      	beq.n	8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1a      	ldr	r2, [pc, #104]	@ (8007c74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00e      	beq.n	8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a15      	ldr	r2, [pc, #84]	@ (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d009      	beq.n	8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a16      	ldr	r2, [pc, #88]	@ (8007c78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d004      	beq.n	8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a15      	ldr	r2, [pc, #84]	@ (8007c7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d10c      	bne.n	8007c46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	40010000 	.word	0x40010000
 8007c68:	40010400 	.word	0x40010400
 8007c6c:	40000400 	.word	0x40000400
 8007c70:	40000800 	.word	0x40000800
 8007c74:	40000c00 	.word	0x40000c00
 8007c78:	40001800 	.word	0x40001800
 8007c7c:	40014000 	.word	0x40014000

08007c80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e065      	b.n	8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	041b      	lsls	r3, r3, #16
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a16      	ldr	r2, [pc, #88]	@ (8007d74 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d004      	beq.n	8007d2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a14      	ldr	r2, [pc, #80]	@ (8007d78 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d115      	bne.n	8007d56 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d34:	051b      	lsls	r3, r3, #20
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	40010000 	.word	0x40010000
 8007d78:	40010400 	.word	0x40010400

08007d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	2204      	movs	r2, #4
 8007dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a1a      	ldr	r2, [r3, #32]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	401a      	ands	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a1a      	ldr	r2, [r3, #32]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	6879      	ldr	r1, [r7, #4]
 8007dec:	fa01 f303 	lsl.w	r3, r1, r3
 8007df0:	431a      	orrs	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
	...

08007e04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e04:	b084      	sub	sp, #16
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	f107 001c 	add.w	r0, r7, #28
 8007e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d121      	bne.n	8007e62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8007ee0 <USB_CoreInit+0xdc>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d105      	bne.n	8007e56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 faf6 	bl	8009448 <USB_CoreReset>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
 8007e60:	e01b      	b.n	8007e9a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 faea 	bl	8009448 <USB_CoreReset>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e8c:	e005      	b.n	8007e9a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e9a:	7fbb      	ldrb	r3, [r7, #30]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d116      	bne.n	8007ece <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007eae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee4 <USB_CoreInit+0xe0>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f043 0206 	orr.w	r2, r3, #6
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f043 0220 	orr.w	r2, r3, #32
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eda:	b004      	add	sp, #16
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	ffbdffbf 	.word	0xffbdffbf
 8007ee4:	03ee0000 	.word	0x03ee0000

08007ee8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d165      	bne.n	8007fc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	4a41      	ldr	r2, [pc, #260]	@ (8008004 <USB_SetTurnaroundTime+0x11c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d906      	bls.n	8007f12 <USB_SetTurnaroundTime+0x2a>
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4a40      	ldr	r2, [pc, #256]	@ (8008008 <USB_SetTurnaroundTime+0x120>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d202      	bcs.n	8007f12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007f0c:	230f      	movs	r3, #15
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	e062      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	4a3c      	ldr	r2, [pc, #240]	@ (8008008 <USB_SetTurnaroundTime+0x120>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d306      	bcc.n	8007f28 <USB_SetTurnaroundTime+0x40>
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	4a3b      	ldr	r2, [pc, #236]	@ (800800c <USB_SetTurnaroundTime+0x124>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d202      	bcs.n	8007f28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007f22:	230e      	movs	r3, #14
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	e057      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	4a38      	ldr	r2, [pc, #224]	@ (800800c <USB_SetTurnaroundTime+0x124>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d306      	bcc.n	8007f3e <USB_SetTurnaroundTime+0x56>
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4a37      	ldr	r2, [pc, #220]	@ (8008010 <USB_SetTurnaroundTime+0x128>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d202      	bcs.n	8007f3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007f38:	230d      	movs	r3, #13
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e04c      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	4a33      	ldr	r2, [pc, #204]	@ (8008010 <USB_SetTurnaroundTime+0x128>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d306      	bcc.n	8007f54 <USB_SetTurnaroundTime+0x6c>
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	4a32      	ldr	r2, [pc, #200]	@ (8008014 <USB_SetTurnaroundTime+0x12c>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d802      	bhi.n	8007f54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007f4e:	230c      	movs	r3, #12
 8007f50:	617b      	str	r3, [r7, #20]
 8007f52:	e041      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	4a2f      	ldr	r2, [pc, #188]	@ (8008014 <USB_SetTurnaroundTime+0x12c>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d906      	bls.n	8007f6a <USB_SetTurnaroundTime+0x82>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8008018 <USB_SetTurnaroundTime+0x130>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d802      	bhi.n	8007f6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f64:	230b      	movs	r3, #11
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	e036      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8008018 <USB_SetTurnaroundTime+0x130>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d906      	bls.n	8007f80 <USB_SetTurnaroundTime+0x98>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	4a29      	ldr	r2, [pc, #164]	@ (800801c <USB_SetTurnaroundTime+0x134>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d802      	bhi.n	8007f80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f7a:	230a      	movs	r3, #10
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	e02b      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	4a26      	ldr	r2, [pc, #152]	@ (800801c <USB_SetTurnaroundTime+0x134>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d906      	bls.n	8007f96 <USB_SetTurnaroundTime+0xae>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	4a25      	ldr	r2, [pc, #148]	@ (8008020 <USB_SetTurnaroundTime+0x138>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d202      	bcs.n	8007f96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f90:	2309      	movs	r3, #9
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	e020      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	4a21      	ldr	r2, [pc, #132]	@ (8008020 <USB_SetTurnaroundTime+0x138>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d306      	bcc.n	8007fac <USB_SetTurnaroundTime+0xc4>
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	4a20      	ldr	r2, [pc, #128]	@ (8008024 <USB_SetTurnaroundTime+0x13c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d802      	bhi.n	8007fac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007fa6:	2308      	movs	r3, #8
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	e015      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4a1d      	ldr	r2, [pc, #116]	@ (8008024 <USB_SetTurnaroundTime+0x13c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d906      	bls.n	8007fc2 <USB_SetTurnaroundTime+0xda>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8008028 <USB_SetTurnaroundTime+0x140>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d202      	bcs.n	8007fc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007fbc:	2307      	movs	r3, #7
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	e00a      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007fc2:	2306      	movs	r3, #6
 8007fc4:	617b      	str	r3, [r7, #20]
 8007fc6:	e007      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d102      	bne.n	8007fd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007fce:	2309      	movs	r3, #9
 8007fd0:	617b      	str	r3, [r7, #20]
 8007fd2:	e001      	b.n	8007fd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007fd4:	2309      	movs	r3, #9
 8007fd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	029b      	lsls	r3, r3, #10
 8007fec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	371c      	adds	r7, #28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	00d8acbf 	.word	0x00d8acbf
 8008008:	00e4e1c0 	.word	0x00e4e1c0
 800800c:	00f42400 	.word	0x00f42400
 8008010:	01067380 	.word	0x01067380
 8008014:	011a499f 	.word	0x011a499f
 8008018:	01312cff 	.word	0x01312cff
 800801c:	014ca43f 	.word	0x014ca43f
 8008020:	016e3600 	.word	0x016e3600
 8008024:	01a6ab1f 	.word	0x01a6ab1f
 8008028:	01e84800 	.word	0x01e84800

0800802c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f043 0201 	orr.w	r2, r3, #1
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f023 0201 	bic.w	r2, r3, #1
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d115      	bne.n	80080be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800809e:	200a      	movs	r0, #10
 80080a0:	f7f8 f9fc 	bl	800049c <HAL_Delay>
      ms += 10U;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	330a      	adds	r3, #10
 80080a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 f93b 	bl	8009326 <USB_GetMode>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d01e      	beq.n	80080f4 <USB_SetCurrentMode+0x84>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80080ba:	d9f0      	bls.n	800809e <USB_SetCurrentMode+0x2e>
 80080bc:	e01a      	b.n	80080f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d115      	bne.n	80080f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80080d0:	200a      	movs	r0, #10
 80080d2:	f7f8 f9e3 	bl	800049c <HAL_Delay>
      ms += 10U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	330a      	adds	r3, #10
 80080da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 f922 	bl	8009326 <USB_GetMode>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <USB_SetCurrentMode+0x84>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80080ec:	d9f0      	bls.n	80080d0 <USB_SetCurrentMode+0x60>
 80080ee:	e001      	b.n	80080f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e005      	b.n	8008100 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2bc8      	cmp	r3, #200	@ 0xc8
 80080f8:	d101      	bne.n	80080fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008108:	b084      	sub	sp, #16
 800810a:	b580      	push	{r7, lr}
 800810c:	b086      	sub	sp, #24
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008122:	2300      	movs	r3, #0
 8008124:	613b      	str	r3, [r7, #16]
 8008126:	e009      	b.n	800813c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	3340      	adds	r3, #64	@ 0x40
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	2200      	movs	r2, #0
 8008134:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	3301      	adds	r3, #1
 800813a:	613b      	str	r3, [r7, #16]
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2b0e      	cmp	r3, #14
 8008140:	d9f2      	bls.n	8008128 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008142:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008146:	2b00      	cmp	r3, #0
 8008148:	d11c      	bne.n	8008184 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008158:	f043 0302 	orr.w	r3, r3, #2
 800815c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008162:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	e005      	b.n	8008190 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008188:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008196:	461a      	mov	r2, r3
 8008198:	2300      	movs	r3, #0
 800819a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800819c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d10d      	bne.n	80081c0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80081a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80081ac:	2100      	movs	r1, #0
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f968 	bl	8008484 <USB_SetDevSpeed>
 80081b4:	e008      	b.n	80081c8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80081b6:	2101      	movs	r1, #1
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f963 	bl	8008484 <USB_SetDevSpeed>
 80081be:	e003      	b.n	80081c8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80081c0:	2103      	movs	r1, #3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f95e 	bl	8008484 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081c8:	2110      	movs	r1, #16
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f8fa 	bl	80083c4 <USB_FlushTxFifo>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f924 	bl	8008428 <USB_FlushRxFifo>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f0:	461a      	mov	r2, r3
 80081f2:	2300      	movs	r3, #0
 80081f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081fc:	461a      	mov	r2, r3
 80081fe:	2300      	movs	r3, #0
 8008200:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008208:	461a      	mov	r2, r3
 800820a:	2300      	movs	r3, #0
 800820c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800820e:	2300      	movs	r3, #0
 8008210:	613b      	str	r3, [r7, #16]
 8008212:	e043      	b.n	800829c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008226:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800822a:	d118      	bne.n	800825e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800823e:	461a      	mov	r2, r3
 8008240:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	e013      	b.n	8008270 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008254:	461a      	mov	r2, r3
 8008256:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	e008      	b.n	8008270 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800826a:	461a      	mov	r2, r3
 800826c:	2300      	movs	r3, #0
 800826e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800827c:	461a      	mov	r2, r3
 800827e:	2300      	movs	r3, #0
 8008280:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800828e:	461a      	mov	r2, r3
 8008290:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008294:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	3301      	adds	r3, #1
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80082a0:	461a      	mov	r2, r3
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d3b5      	bcc.n	8008214 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082a8:	2300      	movs	r3, #0
 80082aa:	613b      	str	r3, [r7, #16]
 80082ac:	e043      	b.n	8008336 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082c4:	d118      	bne.n	80082f8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d8:	461a      	mov	r2, r3
 80082da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	e013      	b.n	800830a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ee:	461a      	mov	r2, r3
 80082f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	e008      	b.n	800830a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008304:	461a      	mov	r2, r3
 8008306:	2300      	movs	r3, #0
 8008308:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008316:	461a      	mov	r2, r3
 8008318:	2300      	movs	r3, #0
 800831a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008328:	461a      	mov	r2, r3
 800832a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800832e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	3301      	adds	r3, #1
 8008334:	613b      	str	r3, [r7, #16]
 8008336:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800833a:	461a      	mov	r2, r3
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	4293      	cmp	r3, r2
 8008340:	d3b5      	bcc.n	80082ae <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008354:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008362:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008368:	2b00      	cmp	r3, #0
 800836a:	d105      	bne.n	8008378 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	f043 0210 	orr.w	r2, r3, #16
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699a      	ldr	r2, [r3, #24]
 800837c:	4b0f      	ldr	r3, [pc, #60]	@ (80083bc <USB_DevInit+0x2b4>)
 800837e:	4313      	orrs	r3, r2
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008384:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	f043 0208 	orr.w	r2, r3, #8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008398:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800839c:	2b01      	cmp	r3, #1
 800839e:	d105      	bne.n	80083ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699a      	ldr	r2, [r3, #24]
 80083a4:	4b06      	ldr	r3, [pc, #24]	@ (80083c0 <USB_DevInit+0x2b8>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083b8:	b004      	add	sp, #16
 80083ba:	4770      	bx	lr
 80083bc:	803c3800 	.word	0x803c3800
 80083c0:	40000004 	.word	0x40000004

080083c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3301      	adds	r3, #1
 80083d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083de:	d901      	bls.n	80083e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e01b      	b.n	800841c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	daf2      	bge.n	80083d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	019b      	lsls	r3, r3, #6
 80083f4:	f043 0220 	orr.w	r2, r3, #32
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008408:	d901      	bls.n	800840e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e006      	b.n	800841c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b20      	cmp	r3, #32
 8008418:	d0f0      	beq.n	80083fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3301      	adds	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008440:	d901      	bls.n	8008446 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e018      	b.n	8008478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	daf2      	bge.n	8008434 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2210      	movs	r2, #16
 8008456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008464:	d901      	bls.n	800846a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e006      	b.n	8008478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0310 	and.w	r3, r3, #16
 8008472:	2b10      	cmp	r3, #16
 8008474:	d0f0      	beq.n	8008458 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	68f9      	ldr	r1, [r7, #12]
 80084a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084a4:	4313      	orrs	r3, r2
 80084a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b087      	sub	sp, #28
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 0306 	and.w	r3, r3, #6
 80084ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d102      	bne.n	80084dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80084d6:	2300      	movs	r3, #0
 80084d8:	75fb      	strb	r3, [r7, #23]
 80084da:	e00a      	b.n	80084f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d002      	beq.n	80084e8 <USB_GetDevSpeed+0x32>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b06      	cmp	r3, #6
 80084e6:	d102      	bne.n	80084ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80084e8:	2302      	movs	r3, #2
 80084ea:	75fb      	strb	r3, [r7, #23]
 80084ec:	e001      	b.n	80084f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80084ee:	230f      	movs	r3, #15
 80084f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	371c      	adds	r7, #28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d139      	bne.n	8008590 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	2101      	movs	r1, #1
 800852e:	fa01 f303 	lsl.w	r3, r1, r3
 8008532:	b29b      	uxth	r3, r3
 8008534:	68f9      	ldr	r1, [r7, #12]
 8008536:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800853a:	4313      	orrs	r3, r2
 800853c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d153      	bne.n	80085fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	791b      	ldrb	r3, [r3, #4]
 800856e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008570:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	059b      	lsls	r3, r3, #22
 8008576:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008578:	431a      	orrs	r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	0159      	lsls	r1, r3, #5
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	440b      	add	r3, r1
 8008582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008586:	4619      	mov	r1, r3
 8008588:	4b20      	ldr	r3, [pc, #128]	@ (800860c <USB_ActivateEndpoint+0x10c>)
 800858a:	4313      	orrs	r3, r2
 800858c:	600b      	str	r3, [r1, #0]
 800858e:	e035      	b.n	80085fc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	f003 030f 	and.w	r3, r3, #15
 80085a0:	2101      	movs	r1, #1
 80085a2:	fa01 f303 	lsl.w	r3, r1, r3
 80085a6:	041b      	lsls	r3, r3, #16
 80085a8:	68f9      	ldr	r1, [r7, #12]
 80085aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085ae:	4313      	orrs	r3, r2
 80085b0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d119      	bne.n	80085fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	791b      	ldrb	r3, [r3, #4]
 80085e2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80085e4:	430b      	orrs	r3, r1
 80085e6:	431a      	orrs	r2, r3
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	0159      	lsls	r1, r3, #5
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	440b      	add	r3, r1
 80085f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f4:	4619      	mov	r1, r3
 80085f6:	4b05      	ldr	r3, [pc, #20]	@ (800860c <USB_ActivateEndpoint+0x10c>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	10008000 	.word	0x10008000

08008610 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	785b      	ldrb	r3, [r3, #1]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d161      	bne.n	80086f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800863e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008642:	d11f      	bne.n	8008684 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	0151      	lsls	r1, r2, #5
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	440a      	add	r2, r1
 800865a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800865e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008662:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	440a      	add	r2, r1
 800867a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800867e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800868a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	f003 030f 	and.w	r3, r3, #15
 8008694:	2101      	movs	r1, #1
 8008696:	fa01 f303 	lsl.w	r3, r1, r3
 800869a:	b29b      	uxth	r3, r3
 800869c:	43db      	mvns	r3, r3
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086a4:	4013      	ands	r3, r2
 80086a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	2101      	movs	r1, #1
 80086ba:	fa01 f303 	lsl.w	r3, r1, r3
 80086be:	b29b      	uxth	r3, r3
 80086c0:	43db      	mvns	r3, r3
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086c8:	4013      	ands	r3, r2
 80086ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	0159      	lsls	r1, r3, #5
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	440b      	add	r3, r1
 80086e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e6:	4619      	mov	r1, r3
 80086e8:	4b35      	ldr	r3, [pc, #212]	@ (80087c0 <USB_DeactivateEndpoint+0x1b0>)
 80086ea:	4013      	ands	r3, r2
 80086ec:	600b      	str	r3, [r1, #0]
 80086ee:	e060      	b.n	80087b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008702:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008706:	d11f      	bne.n	8008748 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	0151      	lsls	r1, r2, #5
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	440a      	add	r2, r1
 800871e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008722:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008726:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	440a      	add	r2, r1
 800873e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008742:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008746:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800874e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	f003 030f 	and.w	r3, r3, #15
 8008758:	2101      	movs	r1, #1
 800875a:	fa01 f303 	lsl.w	r3, r1, r3
 800875e:	041b      	lsls	r3, r3, #16
 8008760:	43db      	mvns	r3, r3
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008768:	4013      	ands	r3, r2
 800876a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008772:	69da      	ldr	r2, [r3, #28]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f003 030f 	and.w	r3, r3, #15
 800877c:	2101      	movs	r1, #1
 800877e:	fa01 f303 	lsl.w	r3, r1, r3
 8008782:	041b      	lsls	r3, r3, #16
 8008784:	43db      	mvns	r3, r3
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800878c:	4013      	ands	r3, r2
 800878e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	0159      	lsls	r1, r3, #5
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	440b      	add	r3, r1
 80087a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087aa:	4619      	mov	r1, r3
 80087ac:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <USB_DeactivateEndpoint+0x1b4>)
 80087ae:	4013      	ands	r3, r2
 80087b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	ec337800 	.word	0xec337800
 80087c4:	eff37800 	.word	0xeff37800

080087c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	@ 0x28
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	785b      	ldrb	r3, [r3, #1]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	f040 8181 	bne.w	8008aec <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d132      	bne.n	8008858 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	0159      	lsls	r1, r3, #5
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	440b      	add	r3, r1
 8008808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800880c:	4619      	mov	r1, r3
 800880e:	4ba5      	ldr	r3, [pc, #660]	@ (8008aa4 <USB_EPStartXfer+0x2dc>)
 8008810:	4013      	ands	r3, r2
 8008812:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	0151      	lsls	r1, r2, #5
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	440a      	add	r2, r1
 800882a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800882e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008840:	691a      	ldr	r2, [r3, #16]
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	0159      	lsls	r1, r3, #5
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	440b      	add	r3, r1
 800884a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800884e:	4619      	mov	r1, r3
 8008850:	4b95      	ldr	r3, [pc, #596]	@ (8008aa8 <USB_EPStartXfer+0x2e0>)
 8008852:	4013      	ands	r3, r2
 8008854:	610b      	str	r3, [r1, #16]
 8008856:	e092      	b.n	800897e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008864:	691a      	ldr	r2, [r3, #16]
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	0159      	lsls	r1, r3, #5
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	440b      	add	r3, r1
 800886e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008872:	4619      	mov	r1, r3
 8008874:	4b8c      	ldr	r3, [pc, #560]	@ (8008aa8 <USB_EPStartXfer+0x2e0>)
 8008876:	4013      	ands	r3, r2
 8008878:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	0159      	lsls	r1, r3, #5
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	440b      	add	r3, r1
 8008890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008894:	4619      	mov	r1, r3
 8008896:	4b83      	ldr	r3, [pc, #524]	@ (8008aa4 <USB_EPStartXfer+0x2dc>)
 8008898:	4013      	ands	r3, r2
 800889a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d11a      	bne.n	80088d8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	691a      	ldr	r2, [r3, #16]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d903      	bls.n	80088b6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088d4:	6113      	str	r3, [r2, #16]
 80088d6:	e01b      	b.n	8008910 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	6919      	ldr	r1, [r3, #16]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	440b      	add	r3, r1
 80088f0:	1e59      	subs	r1, r3, #1
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80088fa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80088fc:	4b6b      	ldr	r3, [pc, #428]	@ (8008aac <USB_EPStartXfer+0x2e4>)
 80088fe:	400b      	ands	r3, r1
 8008900:	69b9      	ldr	r1, [r7, #24]
 8008902:	0148      	lsls	r0, r1, #5
 8008904:	69f9      	ldr	r1, [r7, #28]
 8008906:	4401      	add	r1, r0
 8008908:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800890c:	4313      	orrs	r3, r2
 800890e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800891c:	691a      	ldr	r2, [r3, #16]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008926:	69b9      	ldr	r1, [r7, #24]
 8008928:	0148      	lsls	r0, r1, #5
 800892a:	69f9      	ldr	r1, [r7, #28]
 800892c:	4401      	add	r1, r0
 800892e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008932:	4313      	orrs	r3, r2
 8008934:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	791b      	ldrb	r3, [r3, #4]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d11f      	bne.n	800897e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	0151      	lsls	r1, r2, #5
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	440a      	add	r2, r1
 8008954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008958:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800895c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	0151      	lsls	r1, r2, #5
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	440a      	add	r2, r1
 8008974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008978:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800897c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d14b      	bne.n	8008a1c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d009      	beq.n	80089a0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008998:	461a      	mov	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	791b      	ldrb	r3, [r3, #4]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d128      	bne.n	80089fa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d110      	bne.n	80089da <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	e00f      	b.n	80089fa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69ba      	ldr	r2, [r7, #24]
 80089ea:	0151      	lsls	r1, r2, #5
 80089ec:	69fa      	ldr	r2, [r7, #28]
 80089ee:	440a      	add	r2, r1
 80089f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	e16a      	b.n	8008cf2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	0151      	lsls	r1, r2, #5
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	440a      	add	r2, r1
 8008a32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a36:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008a3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	791b      	ldrb	r3, [r3, #4]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d015      	beq.n	8008a70 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 8152 	beq.w	8008cf2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	f003 030f 	and.w	r3, r3, #15
 8008a5e:	2101      	movs	r1, #1
 8008a60:	fa01 f303 	lsl.w	r3, r1, r3
 8008a64:	69f9      	ldr	r1, [r7, #28]
 8008a66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	634b      	str	r3, [r1, #52]	@ 0x34
 8008a6e:	e140      	b.n	8008cf2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d117      	bne.n	8008ab0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	e016      	b.n	8008ad0 <USB_EPStartXfer+0x308>
 8008aa2:	bf00      	nop
 8008aa4:	e007ffff 	.word	0xe007ffff
 8008aa8:	fff80000 	.word	0xfff80000
 8008aac:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	0151      	lsls	r1, r2, #5
 8008ac2:	69fa      	ldr	r2, [r7, #28]
 8008ac4:	440a      	add	r2, r1
 8008ac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ace:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	68d9      	ldr	r1, [r3, #12]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	b298      	uxth	r0, r3
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f9b9 	bl	8008e5c <USB_WritePacket>
 8008aea:	e102      	b.n	8008cf2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	0159      	lsls	r1, r3, #5
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	440b      	add	r3, r1
 8008b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b06:	4619      	mov	r1, r3
 8008b08:	4b7c      	ldr	r3, [pc, #496]	@ (8008cfc <USB_EPStartXfer+0x534>)
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	0159      	lsls	r1, r3, #5
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	440b      	add	r3, r1
 8008b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4b75      	ldr	r3, [pc, #468]	@ (8008d00 <USB_EPStartXfer+0x538>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d12f      	bne.n	8008b96 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b5a:	691a      	ldr	r2, [r3, #16]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b64:	69b9      	ldr	r1, [r7, #24]
 8008b66:	0148      	lsls	r0, r1, #5
 8008b68:	69f9      	ldr	r1, [r7, #28]
 8008b6a:	4401      	add	r1, r0
 8008b6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b70:	4313      	orrs	r3, r2
 8008b72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	0151      	lsls	r1, r2, #5
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	440a      	add	r2, r1
 8008b8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b92:	6113      	str	r3, [r2, #16]
 8008b94:	e05f      	b.n	8008c56 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d123      	bne.n	8008be6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb4:	69b9      	ldr	r1, [r7, #24]
 8008bb6:	0148      	lsls	r0, r1, #5
 8008bb8:	69f9      	ldr	r1, [r7, #28]
 8008bba:	4401      	add	r1, r0
 8008bbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	0151      	lsls	r1, r2, #5
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	440a      	add	r2, r1
 8008bda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008be2:	6113      	str	r3, [r2, #16]
 8008be4:	e037      	b.n	8008c56 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	691a      	ldr	r2, [r3, #16]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	4413      	add	r3, r2
 8008bf0:	1e5a      	subs	r2, r3, #1
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfa:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	8afa      	ldrh	r2, [r7, #22]
 8008c02:	fb03 f202 	mul.w	r2, r3, r2
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	8afb      	ldrh	r3, [r7, #22]
 8008c1a:	04d9      	lsls	r1, r3, #19
 8008c1c:	4b39      	ldr	r3, [pc, #228]	@ (8008d04 <USB_EPStartXfer+0x53c>)
 8008c1e:	400b      	ands	r3, r1
 8008c20:	69b9      	ldr	r1, [r7, #24]
 8008c22:	0148      	lsls	r0, r1, #5
 8008c24:	69f9      	ldr	r1, [r7, #28]
 8008c26:	4401      	add	r1, r0
 8008c28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c3c:	691a      	ldr	r2, [r3, #16]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c46:	69b9      	ldr	r1, [r7, #24]
 8008c48:	0148      	lsls	r0, r1, #5
 8008c4a:	69f9      	ldr	r1, [r7, #28]
 8008c4c:	4401      	add	r1, r0
 8008c4e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008c52:	4313      	orrs	r3, r2
 8008c54:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d10d      	bne.n	8008c78 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d009      	beq.n	8008c78 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	68d9      	ldr	r1, [r3, #12]
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c74:	460a      	mov	r2, r1
 8008c76:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	791b      	ldrb	r3, [r3, #4]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d128      	bne.n	8008cd2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d110      	bne.n	8008cb2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	69fa      	ldr	r2, [r7, #28]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008caa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e00f      	b.n	8008cd2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	0151      	lsls	r1, r2, #5
 8008cc4:	69fa      	ldr	r2, [r7, #28]
 8008cc6:	440a      	add	r2, r1
 8008cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cd0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	0151      	lsls	r1, r2, #5
 8008ce4:	69fa      	ldr	r2, [r7, #28]
 8008ce6:	440a      	add	r2, r1
 8008ce8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008cf0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3720      	adds	r7, #32
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	fff80000 	.word	0xfff80000
 8008d00:	e007ffff 	.word	0xe007ffff
 8008d04:	1ff80000 	.word	0x1ff80000

08008d08 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	785b      	ldrb	r3, [r3, #1]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d14a      	bne.n	8008dbc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d3e:	f040 8086 	bne.w	8008e4e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	7812      	ldrb	r2, [r2, #0]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d64:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	7812      	ldrb	r2, [r2, #0]
 8008d7a:	0151      	lsls	r1, r2, #5
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	440a      	add	r2, r1
 8008d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d902      	bls.n	8008da0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d9e:	e056      	b.n	8008e4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008db4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008db8:	d0e7      	beq.n	8008d8a <USB_EPStopXfer+0x82>
 8008dba:	e048      	b.n	8008e4e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dd4:	d13b      	bne.n	8008e4e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	7812      	ldrb	r2, [r2, #0]
 8008dea:	0151      	lsls	r1, r2, #5
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	440a      	add	r2, r1
 8008df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008df4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008df8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	7812      	ldrb	r2, [r2, #0]
 8008e0e:	0151      	lsls	r1, r2, #5
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	440a      	add	r2, r1
 8008e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3301      	adds	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d902      	bls.n	8008e34 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	75fb      	strb	r3, [r7, #23]
          break;
 8008e32:	e00c      	b.n	8008e4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e4c:	d0e7      	beq.n	8008e1e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	371c      	adds	r7, #28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b089      	sub	sp, #36	@ 0x24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	4611      	mov	r1, r2
 8008e68:	461a      	mov	r2, r3
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	71fb      	strb	r3, [r7, #7]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d123      	bne.n	8008eca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e82:	88bb      	ldrh	r3, [r7, #4]
 8008e84:	3303      	adds	r3, #3
 8008e86:	089b      	lsrs	r3, r3, #2
 8008e88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61bb      	str	r3, [r7, #24]
 8008e8e:	e018      	b.n	8008ec2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	031a      	lsls	r2, r3, #12
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	3301      	adds	r3, #1
 8008eae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	61bb      	str	r3, [r7, #24]
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d3e2      	bcc.n	8008e90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3724      	adds	r7, #36	@ 0x24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b08b      	sub	sp, #44	@ 0x2c
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	089b      	lsrs	r3, r3, #2
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008ef6:	88fb      	ldrh	r3, [r7, #6]
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008efe:	2300      	movs	r3, #0
 8008f00:	623b      	str	r3, [r7, #32]
 8008f02:	e014      	b.n	8008f2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f12:	3301      	adds	r3, #1
 8008f14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f18:	3301      	adds	r3, #1
 8008f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1e:	3301      	adds	r3, #1
 8008f20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	3301      	adds	r3, #1
 8008f26:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	623b      	str	r3, [r7, #32]
 8008f2e:	6a3a      	ldr	r2, [r7, #32]
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d3e6      	bcc.n	8008f04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008f36:	8bfb      	ldrh	r3, [r7, #30]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d01e      	beq.n	8008f7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f46:	461a      	mov	r2, r3
 8008f48:	f107 0310 	add.w	r3, r7, #16
 8008f4c:	6812      	ldr	r2, [r2, #0]
 8008f4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f60:	701a      	strb	r2, [r3, #0]
      i++;
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	3301      	adds	r3, #1
 8008f66:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008f6e:	8bfb      	ldrh	r3, [r7, #30]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f74:	8bfb      	ldrh	r3, [r7, #30]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1ea      	bne.n	8008f50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	372c      	adds	r7, #44	@ 0x2c
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	785b      	ldrb	r3, [r3, #1]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d12c      	bne.n	8008ffe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	db12      	blt.n	8008fdc <USB_EPSetStall+0x54>
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00f      	beq.n	8008fdc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	0151      	lsls	r1, r2, #5
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	440a      	add	r2, r1
 8008fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008fda:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	0151      	lsls	r1, r2, #5
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	440a      	add	r2, r1
 8008ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ff6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	e02b      	b.n	8009056 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	015a      	lsls	r2, r3, #5
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4413      	add	r3, r2
 8009006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	db12      	blt.n	8009036 <USB_EPSetStall+0xae>
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00f      	beq.n	8009036 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	0151      	lsls	r1, r2, #5
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	440a      	add	r2, r1
 800902c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009030:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009034:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	0151      	lsls	r1, r2, #5
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	440a      	add	r2, r1
 800904c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009050:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009054:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	785b      	ldrb	r3, [r3, #1]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d128      	bne.n	80090d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	0151      	lsls	r1, r2, #5
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	440a      	add	r2, r1
 8009096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800909a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800909e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	791b      	ldrb	r3, [r3, #4]
 80090a4:	2b03      	cmp	r3, #3
 80090a6:	d003      	beq.n	80090b0 <USB_EPClearStall+0x4c>
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	791b      	ldrb	r3, [r3, #4]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d138      	bne.n	8009122 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	0151      	lsls	r1, r2, #5
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	440a      	add	r2, r1
 80090c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	e027      	b.n	8009122 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80090f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	791b      	ldrb	r3, [r3, #4]
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d003      	beq.n	8009102 <USB_EPClearStall+0x9e>
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	791b      	ldrb	r3, [r3, #4]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d10f      	bne.n	8009122 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	0151      	lsls	r1, r2, #5
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	440a      	add	r2, r1
 8009118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800911c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009120:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800914e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009152:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009164:	68f9      	ldr	r1, [r7, #12]
 8009166:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800916a:	4313      	orrs	r3, r2
 800916c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009196:	f023 0303 	bic.w	r3, r3, #3
 800919a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091aa:	f023 0302 	bic.w	r3, r3, #2
 80091ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80091d8:	f023 0303 	bic.w	r3, r3, #3
 80091dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091ec:	f043 0302 	orr.w	r3, r3, #2
 80091f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	4013      	ands	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009218:	68fb      	ldr	r3, [r7, #12]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009226:	b480      	push	{r7}
 8009228:	b085      	sub	sp, #20
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	4013      	ands	r3, r2
 8009248:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	0c1b      	lsrs	r3, r3, #16
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800925a:	b480      	push	{r7}
 800925c:	b085      	sub	sp, #20
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	4013      	ands	r3, r2
 800927c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	b29b      	uxth	r3, r3
}
 8009282:	4618      	mov	r0, r3
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800928e:	b480      	push	{r7}
 8009290:	b085      	sub	sp, #20
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	460b      	mov	r3, r1
 8009298:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	4013      	ands	r3, r2
 80092ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092bc:	68bb      	ldr	r3, [r7, #8]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b087      	sub	sp, #28
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	460b      	mov	r3, r1
 80092d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80092ee:	78fb      	ldrb	r3, [r7, #3]
 80092f0:	f003 030f 	and.w	r3, r3, #15
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	fa22 f303 	lsr.w	r3, r2, r3
 80092fa:	01db      	lsls	r3, r3, #7
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	4313      	orrs	r3, r2
 8009302:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4013      	ands	r3, r2
 8009316:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009318:	68bb      	ldr	r3, [r7, #8]
}
 800931a:	4618      	mov	r0, r3
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	f003 0301 	and.w	r3, r3, #1
}
 8009336:	4618      	mov	r0, r3
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
	...

08009344 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800935e:	4619      	mov	r1, r3
 8009360:	4b09      	ldr	r3, [pc, #36]	@ (8009388 <USB_ActivateSetup+0x44>)
 8009362:	4013      	ands	r3, r2
 8009364:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009378:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	fffff800 	.word	0xfffff800

0800938c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	460b      	mov	r3, r1
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	333c      	adds	r3, #60	@ 0x3c
 80093a2:	3304      	adds	r3, #4
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	4a26      	ldr	r2, [pc, #152]	@ (8009444 <USB_EP0_OutStart+0xb8>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d90a      	bls.n	80093c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093c0:	d101      	bne.n	80093c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	e037      	b.n	8009436 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093cc:	461a      	mov	r2, r3
 80093ce:	2300      	movs	r3, #0
 80093d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093f4:	f043 0318 	orr.w	r3, r3, #24
 80093f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009408:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800940c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800940e:	7afb      	ldrb	r3, [r7, #11]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d10f      	bne.n	8009434 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800941a:	461a      	mov	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800942e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009432:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	4f54300a 	.word	0x4f54300a

08009448 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009460:	d901      	bls.n	8009466 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e01b      	b.n	800949e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	daf2      	bge.n	8009454 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f043 0201 	orr.w	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800948a:	d901      	bls.n	8009490 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e006      	b.n	800949e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	2b01      	cmp	r3, #1
 800949a:	d0f0      	beq.n	800947e <USB_CoreReset+0x36>

  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
	...

080094ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094b8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80094bc:	f005 f9ee 	bl	800e89c <USBD_static_malloc>
 80094c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d109      	bne.n	80094dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	32b0      	adds	r2, #176	@ 0xb0
 80094d2:	2100      	movs	r1, #0
 80094d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80094d8:	2302      	movs	r3, #2
 80094da:	e0d4      	b.n	8009686 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80094dc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80094e0:	2100      	movs	r1, #0
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f006 fad9 	bl	800fa9a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32b0      	adds	r2, #176	@ 0xb0
 80094f2:	68f9      	ldr	r1, [r7, #12]
 80094f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	32b0      	adds	r2, #176	@ 0xb0
 8009502:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	7c1b      	ldrb	r3, [r3, #16]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d138      	bne.n	8009586 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009514:	4b5e      	ldr	r3, [pc, #376]	@ (8009690 <USBD_CDC_Init+0x1e4>)
 8009516:	7819      	ldrb	r1, [r3, #0]
 8009518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800951c:	2202      	movs	r2, #2
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f005 f899 	bl	800e656 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009524:	4b5a      	ldr	r3, [pc, #360]	@ (8009690 <USBD_CDC_Init+0x1e4>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	f003 020f 	and.w	r2, r3, #15
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	3324      	adds	r3, #36	@ 0x24
 800953a:	2201      	movs	r2, #1
 800953c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800953e:	4b55      	ldr	r3, [pc, #340]	@ (8009694 <USBD_CDC_Init+0x1e8>)
 8009540:	7819      	ldrb	r1, [r3, #0]
 8009542:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009546:	2202      	movs	r2, #2
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f005 f884 	bl	800e656 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800954e:	4b51      	ldr	r3, [pc, #324]	@ (8009694 <USBD_CDC_Init+0x1e8>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	f003 020f 	and.w	r2, r3, #15
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	440b      	add	r3, r1
 8009562:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009566:	2201      	movs	r2, #1
 8009568:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800956a:	4b4b      	ldr	r3, [pc, #300]	@ (8009698 <USBD_CDC_Init+0x1ec>)
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	f003 020f 	and.w	r2, r3, #15
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	3326      	adds	r3, #38	@ 0x26
 8009580:	2210      	movs	r2, #16
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	e035      	b.n	80095f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009586:	4b42      	ldr	r3, [pc, #264]	@ (8009690 <USBD_CDC_Init+0x1e4>)
 8009588:	7819      	ldrb	r1, [r3, #0]
 800958a:	2340      	movs	r3, #64	@ 0x40
 800958c:	2202      	movs	r2, #2
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f005 f861 	bl	800e656 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009594:	4b3e      	ldr	r3, [pc, #248]	@ (8009690 <USBD_CDC_Init+0x1e4>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	f003 020f 	and.w	r2, r3, #15
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	440b      	add	r3, r1
 80095a8:	3324      	adds	r3, #36	@ 0x24
 80095aa:	2201      	movs	r2, #1
 80095ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80095ae:	4b39      	ldr	r3, [pc, #228]	@ (8009694 <USBD_CDC_Init+0x1e8>)
 80095b0:	7819      	ldrb	r1, [r3, #0]
 80095b2:	2340      	movs	r3, #64	@ 0x40
 80095b4:	2202      	movs	r2, #2
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f005 f84d 	bl	800e656 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80095bc:	4b35      	ldr	r3, [pc, #212]	@ (8009694 <USBD_CDC_Init+0x1e8>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	f003 020f 	and.w	r2, r3, #15
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	440b      	add	r3, r1
 80095d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095d4:	2201      	movs	r2, #1
 80095d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80095d8:	4b2f      	ldr	r3, [pc, #188]	@ (8009698 <USBD_CDC_Init+0x1ec>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f003 020f 	and.w	r2, r3, #15
 80095e0:	6879      	ldr	r1, [r7, #4]
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	3326      	adds	r3, #38	@ 0x26
 80095ee:	2210      	movs	r2, #16
 80095f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095f2:	4b29      	ldr	r3, [pc, #164]	@ (8009698 <USBD_CDC_Init+0x1ec>)
 80095f4:	7819      	ldrb	r1, [r3, #0]
 80095f6:	2308      	movs	r3, #8
 80095f8:	2203      	movs	r2, #3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f005 f82b 	bl	800e656 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009600:	4b25      	ldr	r3, [pc, #148]	@ (8009698 <USBD_CDC_Init+0x1ec>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	f003 020f 	and.w	r2, r3, #15
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	4613      	mov	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	440b      	add	r3, r1
 8009614:	3324      	adds	r3, #36	@ 0x24
 8009616:	2201      	movs	r2, #1
 8009618:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	33b0      	adds	r3, #176	@ 0xb0
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009650:	2302      	movs	r3, #2
 8009652:	e018      	b.n	8009686 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	7c1b      	ldrb	r3, [r3, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10a      	bne.n	8009672 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800965c:	4b0d      	ldr	r3, [pc, #52]	@ (8009694 <USBD_CDC_Init+0x1e8>)
 800965e:	7819      	ldrb	r1, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f005 f8e2 	bl	800e834 <USBD_LL_PrepareReceive>
 8009670:	e008      	b.n	8009684 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009672:	4b08      	ldr	r3, [pc, #32]	@ (8009694 <USBD_CDC_Init+0x1e8>)
 8009674:	7819      	ldrb	r1, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800967c:	2340      	movs	r3, #64	@ 0x40
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f005 f8d8 	bl	800e834 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	2400008f 	.word	0x2400008f
 8009694:	24000090 	.word	0x24000090
 8009698:	24000091 	.word	0x24000091

0800969c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80096a8:	4b3a      	ldr	r3, [pc, #232]	@ (8009794 <USBD_CDC_DeInit+0xf8>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f004 fff7 	bl	800e6a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80096b4:	4b37      	ldr	r3, [pc, #220]	@ (8009794 <USBD_CDC_DeInit+0xf8>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 020f 	and.w	r2, r3, #15
 80096bc:	6879      	ldr	r1, [r7, #4]
 80096be:	4613      	mov	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	440b      	add	r3, r1
 80096c8:	3324      	adds	r3, #36	@ 0x24
 80096ca:	2200      	movs	r2, #0
 80096cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80096ce:	4b32      	ldr	r3, [pc, #200]	@ (8009798 <USBD_CDC_DeInit+0xfc>)
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f004 ffe4 	bl	800e6a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80096da:	4b2f      	ldr	r3, [pc, #188]	@ (8009798 <USBD_CDC_DeInit+0xfc>)
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	f003 020f 	and.w	r2, r3, #15
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	4613      	mov	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096f2:	2200      	movs	r2, #0
 80096f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80096f6:	4b29      	ldr	r3, [pc, #164]	@ (800979c <USBD_CDC_DeInit+0x100>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	4619      	mov	r1, r3
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f004 ffd0 	bl	800e6a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009702:	4b26      	ldr	r3, [pc, #152]	@ (800979c <USBD_CDC_DeInit+0x100>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	f003 020f 	and.w	r2, r3, #15
 800970a:	6879      	ldr	r1, [r7, #4]
 800970c:	4613      	mov	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	3324      	adds	r3, #36	@ 0x24
 8009718:	2200      	movs	r2, #0
 800971a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800971c:	4b1f      	ldr	r3, [pc, #124]	@ (800979c <USBD_CDC_DeInit+0x100>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	f003 020f 	and.w	r2, r3, #15
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	440b      	add	r3, r1
 8009730:	3326      	adds	r3, #38	@ 0x26
 8009732:	2200      	movs	r2, #0
 8009734:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	32b0      	adds	r2, #176	@ 0xb0
 8009740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01f      	beq.n	8009788 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	33b0      	adds	r3, #176	@ 0xb0
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	32b0      	adds	r2, #176	@ 0xb0
 8009766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976a:	4618      	mov	r0, r3
 800976c:	f005 f8a4 	bl	800e8b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	32b0      	adds	r2, #176	@ 0xb0
 800977a:	2100      	movs	r1, #0
 800977c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	2400008f 	.word	0x2400008f
 8009798:	24000090 	.word	0x24000090
 800979c:	24000091 	.word	0x24000091

080097a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	32b0      	adds	r2, #176	@ 0xb0
 80097b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80097be:	2300      	movs	r3, #0
 80097c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e0bf      	b.n	8009950 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d050      	beq.n	800987e <USBD_CDC_Setup+0xde>
 80097dc:	2b20      	cmp	r3, #32
 80097de:	f040 80af 	bne.w	8009940 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	88db      	ldrh	r3, [r3, #6]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d03a      	beq.n	8009860 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	b25b      	sxtb	r3, r3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	da1b      	bge.n	800982c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	33b0      	adds	r3, #176	@ 0xb0
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800980a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	88d2      	ldrh	r2, [r2, #6]
 8009810:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	88db      	ldrh	r3, [r3, #6]
 8009816:	2b07      	cmp	r3, #7
 8009818:	bf28      	it	cs
 800981a:	2307      	movcs	r3, #7
 800981c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	89fa      	ldrh	r2, [r7, #14]
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 fd7d 	bl	800b324 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800982a:	e090      	b.n	800994e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	785a      	ldrb	r2, [r3, #1]
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	88db      	ldrh	r3, [r3, #6]
 800983a:	2b3f      	cmp	r3, #63	@ 0x3f
 800983c:	d803      	bhi.n	8009846 <USBD_CDC_Setup+0xa6>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	88db      	ldrh	r3, [r3, #6]
 8009842:	b2da      	uxtb	r2, r3
 8009844:	e000      	b.n	8009848 <USBD_CDC_Setup+0xa8>
 8009846:	2240      	movs	r2, #64	@ 0x40
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800984e:	6939      	ldr	r1, [r7, #16]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009856:	461a      	mov	r2, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f001 fd8f 	bl	800b37c <USBD_CtlPrepareRx>
      break;
 800985e:	e076      	b.n	800994e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	33b0      	adds	r3, #176	@ 0xb0
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	7850      	ldrb	r0, [r2, #1]
 8009876:	2200      	movs	r2, #0
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	4798      	blx	r3
      break;
 800987c:	e067      	b.n	800994e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	2b0b      	cmp	r3, #11
 8009884:	d851      	bhi.n	800992a <USBD_CDC_Setup+0x18a>
 8009886:	a201      	add	r2, pc, #4	@ (adr r2, 800988c <USBD_CDC_Setup+0xec>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098bd 	.word	0x080098bd
 8009890:	08009939 	.word	0x08009939
 8009894:	0800992b 	.word	0x0800992b
 8009898:	0800992b 	.word	0x0800992b
 800989c:	0800992b 	.word	0x0800992b
 80098a0:	0800992b 	.word	0x0800992b
 80098a4:	0800992b 	.word	0x0800992b
 80098a8:	0800992b 	.word	0x0800992b
 80098ac:	0800992b 	.word	0x0800992b
 80098b0:	0800992b 	.word	0x0800992b
 80098b4:	080098e7 	.word	0x080098e7
 80098b8:	08009911 	.word	0x08009911
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d107      	bne.n	80098d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80098c8:	f107 030a 	add.w	r3, r7, #10
 80098cc:	2202      	movs	r2, #2
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 fd27 	bl	800b324 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098d6:	e032      	b.n	800993e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 fca5 	bl	800b22a <USBD_CtlError>
            ret = USBD_FAIL;
 80098e0:	2303      	movs	r3, #3
 80098e2:	75fb      	strb	r3, [r7, #23]
          break;
 80098e4:	e02b      	b.n	800993e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d107      	bne.n	8009902 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80098f2:	f107 030d 	add.w	r3, r7, #13
 80098f6:	2201      	movs	r2, #1
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 fd12 	bl	800b324 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009900:	e01d      	b.n	800993e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f001 fc90 	bl	800b22a <USBD_CtlError>
            ret = USBD_FAIL;
 800990a:	2303      	movs	r3, #3
 800990c:	75fb      	strb	r3, [r7, #23]
          break;
 800990e:	e016      	b.n	800993e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b03      	cmp	r3, #3
 800991a:	d00f      	beq.n	800993c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f001 fc83 	bl	800b22a <USBD_CtlError>
            ret = USBD_FAIL;
 8009924:	2303      	movs	r3, #3
 8009926:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009928:	e008      	b.n	800993c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f001 fc7c 	bl	800b22a <USBD_CtlError>
          ret = USBD_FAIL;
 8009932:	2303      	movs	r3, #3
 8009934:	75fb      	strb	r3, [r7, #23]
          break;
 8009936:	e002      	b.n	800993e <USBD_CDC_Setup+0x19e>
          break;
 8009938:	bf00      	nop
 800993a:	e008      	b.n	800994e <USBD_CDC_Setup+0x1ae>
          break;
 800993c:	bf00      	nop
      }
      break;
 800993e:	e006      	b.n	800994e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f001 fc71 	bl	800b22a <USBD_CtlError>
      ret = USBD_FAIL;
 8009948:	2303      	movs	r3, #3
 800994a:	75fb      	strb	r3, [r7, #23]
      break;
 800994c:	bf00      	nop
  }

  return (uint8_t)ret;
 800994e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800996a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	32b0      	adds	r2, #176	@ 0xb0
 8009976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800997e:	2303      	movs	r3, #3
 8009980:	e065      	b.n	8009a4e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	32b0      	adds	r2, #176	@ 0xb0
 800998c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009990:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009992:	78fb      	ldrb	r3, [r7, #3]
 8009994:	f003 020f 	and.w	r2, r3, #15
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	440b      	add	r3, r1
 80099a4:	3318      	adds	r3, #24
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d02f      	beq.n	8009a0c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80099ac:	78fb      	ldrb	r3, [r7, #3]
 80099ae:	f003 020f 	and.w	r2, r3, #15
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	440b      	add	r3, r1
 80099be:	3318      	adds	r3, #24
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	78fb      	ldrb	r3, [r7, #3]
 80099c4:	f003 010f 	and.w	r1, r3, #15
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	460b      	mov	r3, r1
 80099cc:	00db      	lsls	r3, r3, #3
 80099ce:	440b      	add	r3, r1
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4403      	add	r3, r0
 80099d4:	331c      	adds	r3, #28
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
 80099e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d112      	bne.n	8009a0c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	f003 020f 	and.w	r2, r3, #15
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	440b      	add	r3, r1
 80099f8:	3318      	adds	r3, #24
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80099fe:	78f9      	ldrb	r1, [r7, #3]
 8009a00:	2300      	movs	r3, #0
 8009a02:	2200      	movs	r2, #0
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f004 fef4 	bl	800e7f2 <USBD_LL_Transmit>
 8009a0a:	e01f      	b.n	8009a4c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	33b0      	adds	r3, #176	@ 0xb0
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d010      	beq.n	8009a4c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	33b0      	adds	r3, #176	@ 0xb0
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009a48:	78fa      	ldrb	r2, [r7, #3]
 8009a4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	32b0      	adds	r2, #176	@ 0xb0
 8009a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	32b0      	adds	r2, #176	@ 0xb0
 8009a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e01a      	b.n	8009abe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a88:	78fb      	ldrb	r3, [r7, #3]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f004 fef2 	bl	800e876 <USBD_LL_GetRxDataSize>
 8009a92:	4602      	mov	r2, r0
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	33b0      	adds	r3, #176	@ 0xb0
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	32b0      	adds	r2, #176	@ 0xb0
 8009ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009adc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e024      	b.n	8009b32 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	33b0      	adds	r3, #176	@ 0xb0
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d019      	beq.n	8009b30 <USBD_CDC_EP0_RxReady+0x6a>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009b02:	2bff      	cmp	r3, #255	@ 0xff
 8009b04:	d014      	beq.n	8009b30 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	33b0      	adds	r3, #176	@ 0xb0
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009b1e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	22ff      	movs	r2, #255	@ 0xff
 8009b2c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b44:	2182      	movs	r1, #130	@ 0x82
 8009b46:	4818      	ldr	r0, [pc, #96]	@ (8009ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b48:	f000 fd0f 	bl	800a56a <USBD_GetEpDesc>
 8009b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b4e:	2101      	movs	r1, #1
 8009b50:	4815      	ldr	r0, [pc, #84]	@ (8009ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b52:	f000 fd0a 	bl	800a56a <USBD_GetEpDesc>
 8009b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b58:	2181      	movs	r1, #129	@ 0x81
 8009b5a:	4813      	ldr	r0, [pc, #76]	@ (8009ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b5c:	f000 fd05 	bl	800a56a <USBD_GetEpDesc>
 8009b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	2210      	movs	r2, #16
 8009b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d006      	beq.n	8009b82 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b7c:	711a      	strb	r2, [r3, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d006      	beq.n	8009b96 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b90:	711a      	strb	r2, [r3, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2243      	movs	r2, #67	@ 0x43
 8009b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b9c:	4b02      	ldr	r3, [pc, #8]	@ (8009ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	2400004c 	.word	0x2400004c

08009bac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009bb4:	2182      	movs	r1, #130	@ 0x82
 8009bb6:	4818      	ldr	r0, [pc, #96]	@ (8009c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bb8:	f000 fcd7 	bl	800a56a <USBD_GetEpDesc>
 8009bbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	4815      	ldr	r0, [pc, #84]	@ (8009c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bc2:	f000 fcd2 	bl	800a56a <USBD_GetEpDesc>
 8009bc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009bc8:	2181      	movs	r1, #129	@ 0x81
 8009bca:	4813      	ldr	r0, [pc, #76]	@ (8009c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bcc:	f000 fccd 	bl	800a56a <USBD_GetEpDesc>
 8009bd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	2210      	movs	r2, #16
 8009bdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d006      	beq.n	8009bf2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	2200      	movs	r2, #0
 8009be8:	711a      	strb	r2, [r3, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f042 0202 	orr.w	r2, r2, #2
 8009bf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d006      	beq.n	8009c06 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	711a      	strb	r2, [r3, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f042 0202 	orr.w	r2, r2, #2
 8009c04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2243      	movs	r2, #67	@ 0x43
 8009c0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c0c:	4b02      	ldr	r3, [pc, #8]	@ (8009c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	2400004c 	.word	0x2400004c

08009c1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c24:	2182      	movs	r1, #130	@ 0x82
 8009c26:	4818      	ldr	r0, [pc, #96]	@ (8009c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c28:	f000 fc9f 	bl	800a56a <USBD_GetEpDesc>
 8009c2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c2e:	2101      	movs	r1, #1
 8009c30:	4815      	ldr	r0, [pc, #84]	@ (8009c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c32:	f000 fc9a 	bl	800a56a <USBD_GetEpDesc>
 8009c36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c38:	2181      	movs	r1, #129	@ 0x81
 8009c3a:	4813      	ldr	r0, [pc, #76]	@ (8009c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c3c:	f000 fc95 	bl	800a56a <USBD_GetEpDesc>
 8009c40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2210      	movs	r2, #16
 8009c4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d006      	beq.n	8009c62 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c5c:	711a      	strb	r2, [r3, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d006      	beq.n	8009c76 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c70:	711a      	strb	r2, [r3, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2243      	movs	r2, #67	@ 0x43
 8009c7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c7c:	4b02      	ldr	r3, [pc, #8]	@ (8009c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	2400004c 	.word	0x2400004c

08009c8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	220a      	movs	r2, #10
 8009c98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009c9a:	4b03      	ldr	r3, [pc, #12]	@ (8009ca8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	24000008 	.word	0x24000008

08009cac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e009      	b.n	8009cd4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	33b0      	adds	r3, #176	@ 0xb0
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	32b0      	adds	r2, #176	@ 0xb0
 8009cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e008      	b.n	8009d18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	371c      	adds	r7, #28
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	32b0      	adds	r2, #176	@ 0xb0
 8009d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d101      	bne.n	8009d48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e004      	b.n	8009d52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
	...

08009d60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	32b0      	adds	r2, #176	@ 0xb0
 8009d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	32b0      	adds	r2, #176	@ 0xb0
 8009d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e018      	b.n	8009dc0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	7c1b      	ldrb	r3, [r3, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d96:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc8 <USBD_CDC_ReceivePacket+0x68>)
 8009d98:	7819      	ldrb	r1, [r3, #0]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009da0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f004 fd45 	bl	800e834 <USBD_LL_PrepareReceive>
 8009daa:	e008      	b.n	8009dbe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009dac:	4b06      	ldr	r3, [pc, #24]	@ (8009dc8 <USBD_CDC_ReceivePacket+0x68>)
 8009dae:	7819      	ldrb	r1, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009db6:	2340      	movs	r3, #64	@ 0x40
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f004 fd3b 	bl	800e834 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	24000090 	.word	0x24000090

08009dcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d101      	bne.n	8009de4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009de0:	2303      	movs	r3, #3
 8009de2:	e01f      	b.n	8009e24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	79fa      	ldrb	r2, [r7, #7]
 8009e16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f004 fbb1 	bl	800e580 <USBD_LL_Init>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e025      	b.n	8009e90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	32ae      	adds	r2, #174	@ 0xae
 8009e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00f      	beq.n	8009e80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	32ae      	adds	r2, #174	@ 0xae
 8009e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e70:	f107 020e 	add.w	r2, r7, #14
 8009e74:	4610      	mov	r0, r2
 8009e76:	4798      	blx	r3
 8009e78:	4602      	mov	r2, r0
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f004 fbbd 	bl	800e620 <USBD_LL_Start>
 8009ea6:	4603      	mov	r3, r0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009eb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d009      	beq.n	8009ef4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	78fa      	ldrb	r2, [r7, #3]
 8009eea:	4611      	mov	r1, r2
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	4798      	blx	r3
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	78fa      	ldrb	r2, [r7, #3]
 8009f18:	4611      	mov	r1, r2
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	4798      	blx	r3
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009f24:	2303      	movs	r3, #3
 8009f26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 f936 	bl	800b1b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009f58:	461a      	mov	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f66:	f003 031f 	and.w	r3, r3, #31
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d01a      	beq.n	8009fa4 <USBD_LL_SetupStage+0x72>
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d822      	bhi.n	8009fb8 <USBD_LL_SetupStage+0x86>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d002      	beq.n	8009f7c <USBD_LL_SetupStage+0x4a>
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d00a      	beq.n	8009f90 <USBD_LL_SetupStage+0x5e>
 8009f7a:	e01d      	b.n	8009fb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fb63 	bl	800a650 <USBD_StdDevReq>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f8e:	e020      	b.n	8009fd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fbcb 	bl	800a734 <USBD_StdItfReq>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa2:	e016      	b.n	8009fd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fc2d 	bl	800a80c <USBD_StdEPReq>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fb6:	e00c      	b.n	8009fd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009fbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f004 fb8a 	bl	800e6e0 <USBD_LL_StallEP>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd0:	bf00      	nop
  }

  return ret;
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	607a      	str	r2, [r7, #4]
 8009fe8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009fee:	7afb      	ldrb	r3, [r7, #11]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d16e      	bne.n	800a0d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009ffa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a002:	2b03      	cmp	r3, #3
 800a004:	f040 8098 	bne.w	800a138 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	689a      	ldr	r2, [r3, #8]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	429a      	cmp	r2, r3
 800a012:	d913      	bls.n	800a03c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	689a      	ldr	r2, [r3, #8]
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	1ad2      	subs	r2, r2, r3
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	68da      	ldr	r2, [r3, #12]
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	4293      	cmp	r3, r2
 800a02c:	bf28      	it	cs
 800a02e:	4613      	movcs	r3, r2
 800a030:	461a      	mov	r2, r3
 800a032:	6879      	ldr	r1, [r7, #4]
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f001 f9be 	bl	800b3b6 <USBD_CtlContinueRx>
 800a03a:	e07d      	b.n	800a138 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a042:	f003 031f 	and.w	r3, r3, #31
 800a046:	2b02      	cmp	r3, #2
 800a048:	d014      	beq.n	800a074 <USBD_LL_DataOutStage+0x98>
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d81d      	bhi.n	800a08a <USBD_LL_DataOutStage+0xae>
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <USBD_LL_DataOutStage+0x7c>
 800a052:	2b01      	cmp	r3, #1
 800a054:	d003      	beq.n	800a05e <USBD_LL_DataOutStage+0x82>
 800a056:	e018      	b.n	800a08a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	75bb      	strb	r3, [r7, #22]
            break;
 800a05c:	e018      	b.n	800a090 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a064:	b2db      	uxtb	r3, r3
 800a066:	4619      	mov	r1, r3
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 fa64 	bl	800a536 <USBD_CoreFindIF>
 800a06e:	4603      	mov	r3, r0
 800a070:	75bb      	strb	r3, [r7, #22]
            break;
 800a072:	e00d      	b.n	800a090 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	4619      	mov	r1, r3
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f000 fa66 	bl	800a550 <USBD_CoreFindEP>
 800a084:	4603      	mov	r3, r0
 800a086:	75bb      	strb	r3, [r7, #22]
            break;
 800a088:	e002      	b.n	800a090 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a08a:	2300      	movs	r3, #0
 800a08c:	75bb      	strb	r3, [r7, #22]
            break;
 800a08e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a090:	7dbb      	ldrb	r3, [r7, #22]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d119      	bne.n	800a0ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d113      	bne.n	800a0ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a0a2:	7dba      	ldrb	r2, [r7, #22]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	32ae      	adds	r2, #174	@ 0xae
 800a0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00b      	beq.n	800a0ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a0b2:	7dba      	ldrb	r2, [r7, #22]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a0ba:	7dba      	ldrb	r2, [r7, #22]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	32ae      	adds	r2, #174	@ 0xae
 800a0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f001 f984 	bl	800b3d8 <USBD_CtlSendStatus>
 800a0d0:	e032      	b.n	800a138 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a0d2:	7afb      	ldrb	r3, [r7, #11]
 800a0d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	4619      	mov	r1, r3
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 fa37 	bl	800a550 <USBD_CoreFindEP>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0e6:	7dbb      	ldrb	r3, [r7, #22]
 800a0e8:	2bff      	cmp	r3, #255	@ 0xff
 800a0ea:	d025      	beq.n	800a138 <USBD_LL_DataOutStage+0x15c>
 800a0ec:	7dbb      	ldrb	r3, [r7, #22]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d122      	bne.n	800a138 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	d117      	bne.n	800a12e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a0fe:	7dba      	ldrb	r2, [r7, #22]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	32ae      	adds	r2, #174	@ 0xae
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00f      	beq.n	800a12e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a10e:	7dba      	ldrb	r2, [r7, #22]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a116:	7dba      	ldrb	r2, [r7, #22]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	32ae      	adds	r2, #174	@ 0xae
 800a11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	7afa      	ldrb	r2, [r7, #11]
 800a124:	4611      	mov	r1, r2
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	4798      	blx	r3
 800a12a:	4603      	mov	r3, r0
 800a12c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	e000      	b.n	800a13a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b086      	sub	sp, #24
 800a146:	af00      	add	r7, sp, #0
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	460b      	mov	r3, r1
 800a14c:	607a      	str	r2, [r7, #4]
 800a14e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a150:	7afb      	ldrb	r3, [r7, #11]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d16f      	bne.n	800a236 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3314      	adds	r3, #20
 800a15a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a162:	2b02      	cmp	r3, #2
 800a164:	d15a      	bne.n	800a21c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d914      	bls.n	800a19c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	1ad2      	subs	r2, r2, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	461a      	mov	r2, r3
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f001 f8e6 	bl	800b35a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a18e:	2300      	movs	r3, #0
 800a190:	2200      	movs	r2, #0
 800a192:	2100      	movs	r1, #0
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f004 fb4d 	bl	800e834 <USBD_LL_PrepareReceive>
 800a19a:	e03f      	b.n	800a21c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	68da      	ldr	r2, [r3, #12]
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d11c      	bne.n	800a1e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d316      	bcc.n	800a1e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d20f      	bcs.n	800a1e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f001 f8c7 	bl	800b35a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2100      	movs	r1, #0
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f004 fb2a 	bl	800e834 <USBD_LL_PrepareReceive>
 800a1e0:	e01c      	b.n	800a21c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d10f      	bne.n	800a20e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d009      	beq.n	800a20e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a20e:	2180      	movs	r1, #128	@ 0x80
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f004 fa65 	bl	800e6e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f001 f8f1 	bl	800b3fe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d03a      	beq.n	800a29c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7ff fe42 	bl	8009eb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a234:	e032      	b.n	800a29c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	4619      	mov	r1, r3
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 f985 	bl	800a550 <USBD_CoreFindEP>
 800a246:	4603      	mov	r3, r0
 800a248:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
 800a24c:	2bff      	cmp	r3, #255	@ 0xff
 800a24e:	d025      	beq.n	800a29c <USBD_LL_DataInStage+0x15a>
 800a250:	7dfb      	ldrb	r3, [r7, #23]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d122      	bne.n	800a29c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d11c      	bne.n	800a29c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a262:	7dfa      	ldrb	r2, [r7, #23]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	32ae      	adds	r2, #174	@ 0xae
 800a268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d014      	beq.n	800a29c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a272:	7dfa      	ldrb	r2, [r7, #23]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a27a:	7dfa      	ldrb	r2, [r7, #23]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	32ae      	adds	r2, #174	@ 0xae
 800a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	7afa      	ldrb	r2, [r7, #11]
 800a288:	4611      	mov	r1, r2
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	4798      	blx	r3
 800a28e:	4603      	mov	r3, r0
 800a290:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a292:	7dbb      	ldrb	r3, [r7, #22]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a298:	7dbb      	ldrb	r3, [r7, #22]
 800a29a:	e000      	b.n	800a29e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d014      	beq.n	800a30c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00e      	beq.n	800a30c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6852      	ldr	r2, [r2, #4]
 800a2fa:	b2d2      	uxtb	r2, r2
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	4798      	blx	r3
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a308:	2303      	movs	r3, #3
 800a30a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a30c:	2340      	movs	r3, #64	@ 0x40
 800a30e:	2200      	movs	r2, #0
 800a310:	2100      	movs	r1, #0
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f004 f99f 	bl	800e656 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2240      	movs	r2, #64	@ 0x40
 800a324:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a328:	2340      	movs	r3, #64	@ 0x40
 800a32a:	2200      	movs	r2, #0
 800a32c:	2180      	movs	r1, #128	@ 0x80
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f004 f991 	bl	800e656 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2240      	movs	r2, #64	@ 0x40
 800a33e:	621a      	str	r2, [r3, #32]

  return ret;
 800a340:	7bfb      	ldrb	r3, [r7, #15]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b083      	sub	sp, #12
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	78fa      	ldrb	r2, [r7, #3]
 800a35a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d006      	beq.n	800a38c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a384:	b2da      	uxtb	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2204      	movs	r2, #4
 800a390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d106      	bne.n	800a3c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d110      	bne.n	800a408 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00b      	beq.n	800a408 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d005      	beq.n	800a408 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a402:	69db      	ldr	r3, [r3, #28]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b082      	sub	sp, #8
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	460b      	mov	r3, r1
 800a41c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	32ae      	adds	r2, #174	@ 0xae
 800a428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a430:	2303      	movs	r3, #3
 800a432:	e01c      	b.n	800a46e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b03      	cmp	r3, #3
 800a43e:	d115      	bne.n	800a46c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	32ae      	adds	r2, #174	@ 0xae
 800a44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44e:	6a1b      	ldr	r3, [r3, #32]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00b      	beq.n	800a46c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	32ae      	adds	r2, #174	@ 0xae
 800a45e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	78fa      	ldrb	r2, [r7, #3]
 800a466:	4611      	mov	r1, r2
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	460b      	mov	r3, r1
 800a480:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	32ae      	adds	r2, #174	@ 0xae
 800a48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a494:	2303      	movs	r3, #3
 800a496:	e01c      	b.n	800a4d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d115      	bne.n	800a4d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	32ae      	adds	r2, #174	@ 0xae
 800a4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00b      	beq.n	800a4d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	32ae      	adds	r2, #174	@ 0xae
 800a4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c8:	78fa      	ldrb	r2, [r7, #3]
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00e      	beq.n	800a52c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	6852      	ldr	r2, [r2, #4]
 800a51a:	b2d2      	uxtb	r2, r2
 800a51c:	4611      	mov	r1, r2
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	4798      	blx	r3
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a528:	2303      	movs	r3, #3
 800a52a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a542:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a55c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a55e:	4618      	mov	r0, r3
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b086      	sub	sp, #24
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	460b      	mov	r3, r1
 800a574:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	885b      	ldrh	r3, [r3, #2]
 800a586:	b29b      	uxth	r3, r3
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	7812      	ldrb	r2, [r2, #0]
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d91f      	bls.n	800a5d0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a596:	e013      	b.n	800a5c0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a598:	f107 030a 	add.w	r3, r7, #10
 800a59c:	4619      	mov	r1, r3
 800a59e:	6978      	ldr	r0, [r7, #20]
 800a5a0:	f000 f81b 	bl	800a5da <USBD_GetNextDesc>
 800a5a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	785b      	ldrb	r3, [r3, #1]
 800a5aa:	2b05      	cmp	r3, #5
 800a5ac:	d108      	bne.n	800a5c0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	789b      	ldrb	r3, [r3, #2]
 800a5b6:	78fa      	ldrb	r2, [r7, #3]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d008      	beq.n	800a5ce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	885b      	ldrh	r3, [r3, #2]
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	897b      	ldrh	r3, [r7, #10]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d8e5      	bhi.n	800a598 <USBD_GetEpDesc+0x2e>
 800a5cc:	e000      	b.n	800a5d0 <USBD_GetEpDesc+0x66>
          break;
 800a5ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a5d0:	693b      	ldr	r3, [r7, #16]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3718      	adds	r7, #24
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b085      	sub	sp, #20
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	7812      	ldrb	r2, [r2, #0]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4413      	add	r3, r2
 800a602:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a604:	68fb      	ldr	r3, [r7, #12]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a612:	b480      	push	{r7}
 800a614:	b087      	sub	sp, #28
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	3301      	adds	r3, #1
 800a628:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a630:	8a3b      	ldrh	r3, [r7, #16]
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	b21a      	sxth	r2, r3
 800a636:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	b21b      	sxth	r3, r3
 800a63e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a640:	89fb      	ldrh	r3, [r7, #14]
}
 800a642:	4618      	mov	r0, r3
 800a644:	371c      	adds	r7, #28
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
	...

0800a650 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a666:	2b40      	cmp	r3, #64	@ 0x40
 800a668:	d005      	beq.n	800a676 <USBD_StdDevReq+0x26>
 800a66a:	2b40      	cmp	r3, #64	@ 0x40
 800a66c:	d857      	bhi.n	800a71e <USBD_StdDevReq+0xce>
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00f      	beq.n	800a692 <USBD_StdDevReq+0x42>
 800a672:	2b20      	cmp	r3, #32
 800a674:	d153      	bne.n	800a71e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	32ae      	adds	r2, #174	@ 0xae
 800a680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	4798      	blx	r3
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]
      break;
 800a690:	e04a      	b.n	800a728 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	785b      	ldrb	r3, [r3, #1]
 800a696:	2b09      	cmp	r3, #9
 800a698:	d83b      	bhi.n	800a712 <USBD_StdDevReq+0xc2>
 800a69a:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a0 <USBD_StdDevReq+0x50>)
 800a69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a0:	0800a6f5 	.word	0x0800a6f5
 800a6a4:	0800a709 	.word	0x0800a709
 800a6a8:	0800a713 	.word	0x0800a713
 800a6ac:	0800a6ff 	.word	0x0800a6ff
 800a6b0:	0800a713 	.word	0x0800a713
 800a6b4:	0800a6d3 	.word	0x0800a6d3
 800a6b8:	0800a6c9 	.word	0x0800a6c9
 800a6bc:	0800a713 	.word	0x0800a713
 800a6c0:	0800a6eb 	.word	0x0800a6eb
 800a6c4:	0800a6dd 	.word	0x0800a6dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fa3c 	bl	800ab48 <USBD_GetDescriptor>
          break;
 800a6d0:	e024      	b.n	800a71c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fbcb 	bl	800ae70 <USBD_SetAddress>
          break;
 800a6da:	e01f      	b.n	800a71c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fc0a 	bl	800aef8 <USBD_SetConfig>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73fb      	strb	r3, [r7, #15]
          break;
 800a6e8:	e018      	b.n	800a71c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fcad 	bl	800b04c <USBD_GetConfig>
          break;
 800a6f2:	e013      	b.n	800a71c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fcde 	bl	800b0b8 <USBD_GetStatus>
          break;
 800a6fc:	e00e      	b.n	800a71c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fd0d 	bl	800b120 <USBD_SetFeature>
          break;
 800a706:	e009      	b.n	800a71c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fd31 	bl	800b172 <USBD_ClrFeature>
          break;
 800a710:	e004      	b.n	800a71c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fd88 	bl	800b22a <USBD_CtlError>
          break;
 800a71a:	bf00      	nop
      }
      break;
 800a71c:	e004      	b.n	800a728 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a71e:	6839      	ldr	r1, [r7, #0]
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fd82 	bl	800b22a <USBD_CtlError>
      break;
 800a726:	bf00      	nop
  }

  return ret;
 800a728:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop

0800a734 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a74a:	2b40      	cmp	r3, #64	@ 0x40
 800a74c:	d005      	beq.n	800a75a <USBD_StdItfReq+0x26>
 800a74e:	2b40      	cmp	r3, #64	@ 0x40
 800a750:	d852      	bhi.n	800a7f8 <USBD_StdItfReq+0xc4>
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <USBD_StdItfReq+0x26>
 800a756:	2b20      	cmp	r3, #32
 800a758:	d14e      	bne.n	800a7f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a760:	b2db      	uxtb	r3, r3
 800a762:	3b01      	subs	r3, #1
 800a764:	2b02      	cmp	r3, #2
 800a766:	d840      	bhi.n	800a7ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	889b      	ldrh	r3, [r3, #4]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d836      	bhi.n	800a7e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	889b      	ldrh	r3, [r3, #4]
 800a776:	b2db      	uxtb	r3, r3
 800a778:	4619      	mov	r1, r3
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7ff fedb 	bl	800a536 <USBD_CoreFindIF>
 800a780:	4603      	mov	r3, r0
 800a782:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	2bff      	cmp	r3, #255	@ 0xff
 800a788:	d01d      	beq.n	800a7c6 <USBD_StdItfReq+0x92>
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d11a      	bne.n	800a7c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a790:	7bba      	ldrb	r2, [r7, #14]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	32ae      	adds	r2, #174	@ 0xae
 800a796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00f      	beq.n	800a7c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a7a0:	7bba      	ldrb	r2, [r7, #14]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a7a8:	7bba      	ldrb	r2, [r7, #14]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	32ae      	adds	r2, #174	@ 0xae
 800a7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	4798      	blx	r3
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a7be:	e004      	b.n	800a7ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a7c4:	e001      	b.n	800a7ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	88db      	ldrh	r3, [r3, #6]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d110      	bne.n	800a7f4 <USBD_StdItfReq+0xc0>
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10d      	bne.n	800a7f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fdfd 	bl	800b3d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a7de:	e009      	b.n	800a7f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fd21 	bl	800b22a <USBD_CtlError>
          break;
 800a7e8:	e004      	b.n	800a7f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fd1c 	bl	800b22a <USBD_CtlError>
          break;
 800a7f2:	e000      	b.n	800a7f6 <USBD_StdItfReq+0xc2>
          break;
 800a7f4:	bf00      	nop
      }
      break;
 800a7f6:	e004      	b.n	800a802 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fd15 	bl	800b22a <USBD_CtlError>
      break;
 800a800:	bf00      	nop
  }

  return ret;
 800a802:	7bfb      	ldrb	r3, [r7, #15]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	889b      	ldrh	r3, [r3, #4]
 800a81e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a828:	2b40      	cmp	r3, #64	@ 0x40
 800a82a:	d007      	beq.n	800a83c <USBD_StdEPReq+0x30>
 800a82c:	2b40      	cmp	r3, #64	@ 0x40
 800a82e:	f200 817f 	bhi.w	800ab30 <USBD_StdEPReq+0x324>
 800a832:	2b00      	cmp	r3, #0
 800a834:	d02a      	beq.n	800a88c <USBD_StdEPReq+0x80>
 800a836:	2b20      	cmp	r3, #32
 800a838:	f040 817a 	bne.w	800ab30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a83c:	7bbb      	ldrb	r3, [r7, #14]
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff fe85 	bl	800a550 <USBD_CoreFindEP>
 800a846:	4603      	mov	r3, r0
 800a848:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a84a:	7b7b      	ldrb	r3, [r7, #13]
 800a84c:	2bff      	cmp	r3, #255	@ 0xff
 800a84e:	f000 8174 	beq.w	800ab3a <USBD_StdEPReq+0x32e>
 800a852:	7b7b      	ldrb	r3, [r7, #13]
 800a854:	2b00      	cmp	r3, #0
 800a856:	f040 8170 	bne.w	800ab3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a85a:	7b7a      	ldrb	r2, [r7, #13]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a862:	7b7a      	ldrb	r2, [r7, #13]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	32ae      	adds	r2, #174	@ 0xae
 800a868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 8163 	beq.w	800ab3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a874:	7b7a      	ldrb	r2, [r7, #13]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	32ae      	adds	r2, #174	@ 0xae
 800a87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	4798      	blx	r3
 800a886:	4603      	mov	r3, r0
 800a888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a88a:	e156      	b.n	800ab3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	785b      	ldrb	r3, [r3, #1]
 800a890:	2b03      	cmp	r3, #3
 800a892:	d008      	beq.n	800a8a6 <USBD_StdEPReq+0x9a>
 800a894:	2b03      	cmp	r3, #3
 800a896:	f300 8145 	bgt.w	800ab24 <USBD_StdEPReq+0x318>
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 809b 	beq.w	800a9d6 <USBD_StdEPReq+0x1ca>
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d03c      	beq.n	800a91e <USBD_StdEPReq+0x112>
 800a8a4:	e13e      	b.n	800ab24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d002      	beq.n	800a8b8 <USBD_StdEPReq+0xac>
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	d016      	beq.n	800a8e4 <USBD_StdEPReq+0xd8>
 800a8b6:	e02c      	b.n	800a912 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8b8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00d      	beq.n	800a8da <USBD_StdEPReq+0xce>
 800a8be:	7bbb      	ldrb	r3, [r7, #14]
 800a8c0:	2b80      	cmp	r3, #128	@ 0x80
 800a8c2:	d00a      	beq.n	800a8da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f003 ff09 	bl	800e6e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ce:	2180      	movs	r1, #128	@ 0x80
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f003 ff05 	bl	800e6e0 <USBD_LL_StallEP>
 800a8d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8d8:	e020      	b.n	800a91c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fca4 	bl	800b22a <USBD_CtlError>
              break;
 800a8e2:	e01b      	b.n	800a91c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	885b      	ldrh	r3, [r3, #2]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10e      	bne.n	800a90a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00b      	beq.n	800a90a <USBD_StdEPReq+0xfe>
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	2b80      	cmp	r3, #128	@ 0x80
 800a8f6:	d008      	beq.n	800a90a <USBD_StdEPReq+0xfe>
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	88db      	ldrh	r3, [r3, #6]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d104      	bne.n	800a90a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a900:	7bbb      	ldrb	r3, [r7, #14]
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f003 feeb 	bl	800e6e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fd64 	bl	800b3d8 <USBD_CtlSendStatus>

              break;
 800a910:	e004      	b.n	800a91c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a912:	6839      	ldr	r1, [r7, #0]
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fc88 	bl	800b22a <USBD_CtlError>
              break;
 800a91a:	bf00      	nop
          }
          break;
 800a91c:	e107      	b.n	800ab2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b02      	cmp	r3, #2
 800a928:	d002      	beq.n	800a930 <USBD_StdEPReq+0x124>
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d016      	beq.n	800a95c <USBD_StdEPReq+0x150>
 800a92e:	e04b      	b.n	800a9c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00d      	beq.n	800a952 <USBD_StdEPReq+0x146>
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	2b80      	cmp	r3, #128	@ 0x80
 800a93a:	d00a      	beq.n	800a952 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f003 fecd 	bl	800e6e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a946:	2180      	movs	r1, #128	@ 0x80
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f003 fec9 	bl	800e6e0 <USBD_LL_StallEP>
 800a94e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a950:	e040      	b.n	800a9d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fc68 	bl	800b22a <USBD_CtlError>
              break;
 800a95a:	e03b      	b.n	800a9d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	885b      	ldrh	r3, [r3, #2]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d136      	bne.n	800a9d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d004      	beq.n	800a978 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f003 fed3 	bl	800e71e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fd2d 	bl	800b3d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	4619      	mov	r1, r3
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff fde4 	bl	800a550 <USBD_CoreFindEP>
 800a988:	4603      	mov	r3, r0
 800a98a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a98c:	7b7b      	ldrb	r3, [r7, #13]
 800a98e:	2bff      	cmp	r3, #255	@ 0xff
 800a990:	d01f      	beq.n	800a9d2 <USBD_StdEPReq+0x1c6>
 800a992:	7b7b      	ldrb	r3, [r7, #13]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d11c      	bne.n	800a9d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a998:	7b7a      	ldrb	r2, [r7, #13]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a9a0:	7b7a      	ldrb	r2, [r7, #13]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	32ae      	adds	r2, #174	@ 0xae
 800a9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d010      	beq.n	800a9d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a9b0:	7b7a      	ldrb	r2, [r7, #13]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	32ae      	adds	r2, #174	@ 0xae
 800a9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	4798      	blx	r3
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a9c6:	e004      	b.n	800a9d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fc2d 	bl	800b22a <USBD_CtlError>
              break;
 800a9d0:	e000      	b.n	800a9d4 <USBD_StdEPReq+0x1c8>
              break;
 800a9d2:	bf00      	nop
          }
          break;
 800a9d4:	e0ab      	b.n	800ab2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d002      	beq.n	800a9e8 <USBD_StdEPReq+0x1dc>
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d032      	beq.n	800aa4c <USBD_StdEPReq+0x240>
 800a9e6:	e097      	b.n	800ab18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d007      	beq.n	800a9fe <USBD_StdEPReq+0x1f2>
 800a9ee:	7bbb      	ldrb	r3, [r7, #14]
 800a9f0:	2b80      	cmp	r3, #128	@ 0x80
 800a9f2:	d004      	beq.n	800a9fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fc17 	bl	800b22a <USBD_CtlError>
                break;
 800a9fc:	e091      	b.n	800ab22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	da0b      	bge.n	800aa1e <USBD_StdEPReq+0x212>
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	3310      	adds	r3, #16
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	4413      	add	r3, r2
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	e00b      	b.n	800aa36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
 800aa20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa24:	4613      	mov	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	4413      	add	r3, r2
 800aa34:	3304      	adds	r3, #4
 800aa36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2202      	movs	r2, #2
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fc6d 	bl	800b324 <USBD_CtlSendData>
              break;
 800aa4a:	e06a      	b.n	800ab22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	da11      	bge.n	800aa78 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
 800aa56:	f003 020f 	and.w	r2, r3, #15
 800aa5a:	6879      	ldr	r1, [r7, #4]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	440b      	add	r3, r1
 800aa66:	3324      	adds	r3, #36	@ 0x24
 800aa68:	881b      	ldrh	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d117      	bne.n	800aa9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fbda 	bl	800b22a <USBD_CtlError>
                  break;
 800aa76:	e054      	b.n	800ab22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	f003 020f 	and.w	r2, r3, #15
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	4613      	mov	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	440b      	add	r3, r1
 800aa8a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d104      	bne.n	800aa9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fbc7 	bl	800b22a <USBD_CtlError>
                  break;
 800aa9c:	e041      	b.n	800ab22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	da0b      	bge.n	800aabe <USBD_StdEPReq+0x2b2>
 800aaa6:	7bbb      	ldrb	r3, [r7, #14]
 800aaa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aaac:	4613      	mov	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4413      	add	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	3310      	adds	r3, #16
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	4413      	add	r3, r2
 800aaba:	3304      	adds	r3, #4
 800aabc:	e00b      	b.n	800aad6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aac4:	4613      	mov	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	4413      	add	r3, r2
 800aad4:	3304      	adds	r3, #4
 800aad6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d002      	beq.n	800aae4 <USBD_StdEPReq+0x2d8>
 800aade:	7bbb      	ldrb	r3, [r7, #14]
 800aae0:	2b80      	cmp	r3, #128	@ 0x80
 800aae2:	d103      	bne.n	800aaec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2200      	movs	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	e00e      	b.n	800ab0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f003 fe33 	bl	800e75c <USBD_LL_IsStallEP>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2201      	movs	r2, #1
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	e002      	b.n	800ab0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2200      	movs	r2, #0
 800ab08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2202      	movs	r2, #2
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fc07 	bl	800b324 <USBD_CtlSendData>
              break;
 800ab16:	e004      	b.n	800ab22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fb85 	bl	800b22a <USBD_CtlError>
              break;
 800ab20:	bf00      	nop
          }
          break;
 800ab22:	e004      	b.n	800ab2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fb7f 	bl	800b22a <USBD_CtlError>
          break;
 800ab2c:	bf00      	nop
      }
      break;
 800ab2e:	e005      	b.n	800ab3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fb79 	bl	800b22a <USBD_CtlError>
      break;
 800ab38:	e000      	b.n	800ab3c <USBD_StdEPReq+0x330>
      break;
 800ab3a:	bf00      	nop
  }

  return ret;
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	885b      	ldrh	r3, [r3, #2]
 800ab62:	0a1b      	lsrs	r3, r3, #8
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	3b01      	subs	r3, #1
 800ab68:	2b0e      	cmp	r3, #14
 800ab6a:	f200 8152 	bhi.w	800ae12 <USBD_GetDescriptor+0x2ca>
 800ab6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab74 <USBD_GetDescriptor+0x2c>)
 800ab70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab74:	0800abe5 	.word	0x0800abe5
 800ab78:	0800abfd 	.word	0x0800abfd
 800ab7c:	0800ac3d 	.word	0x0800ac3d
 800ab80:	0800ae13 	.word	0x0800ae13
 800ab84:	0800ae13 	.word	0x0800ae13
 800ab88:	0800adb3 	.word	0x0800adb3
 800ab8c:	0800addf 	.word	0x0800addf
 800ab90:	0800ae13 	.word	0x0800ae13
 800ab94:	0800ae13 	.word	0x0800ae13
 800ab98:	0800ae13 	.word	0x0800ae13
 800ab9c:	0800ae13 	.word	0x0800ae13
 800aba0:	0800ae13 	.word	0x0800ae13
 800aba4:	0800ae13 	.word	0x0800ae13
 800aba8:	0800ae13 	.word	0x0800ae13
 800abac:	0800abb1 	.word	0x0800abb1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abb6:	69db      	ldr	r3, [r3, #28]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00b      	beq.n	800abd4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abc2:	69db      	ldr	r3, [r3, #28]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	7c12      	ldrb	r2, [r2, #16]
 800abc8:	f107 0108 	add.w	r1, r7, #8
 800abcc:	4610      	mov	r0, r2
 800abce:	4798      	blx	r3
 800abd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abd2:	e126      	b.n	800ae22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fb27 	bl	800b22a <USBD_CtlError>
        err++;
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	3301      	adds	r3, #1
 800abe0:	72fb      	strb	r3, [r7, #11]
      break;
 800abe2:	e11e      	b.n	800ae22 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	7c12      	ldrb	r2, [r2, #16]
 800abf0:	f107 0108 	add.w	r1, r7, #8
 800abf4:	4610      	mov	r0, r2
 800abf6:	4798      	blx	r3
 800abf8:	60f8      	str	r0, [r7, #12]
      break;
 800abfa:	e112      	b.n	800ae22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	7c1b      	ldrb	r3, [r3, #16]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10d      	bne.n	800ac20 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac0c:	f107 0208 	add.w	r2, r7, #8
 800ac10:	4610      	mov	r0, r2
 800ac12:	4798      	blx	r3
 800ac14:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac1e:	e100      	b.n	800ae22 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac28:	f107 0208 	add.w	r2, r7, #8
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	4798      	blx	r3
 800ac30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3301      	adds	r3, #1
 800ac36:	2202      	movs	r2, #2
 800ac38:	701a      	strb	r2, [r3, #0]
      break;
 800ac3a:	e0f2      	b.n	800ae22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	885b      	ldrh	r3, [r3, #2]
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b05      	cmp	r3, #5
 800ac44:	f200 80ac 	bhi.w	800ada0 <USBD_GetDescriptor+0x258>
 800ac48:	a201      	add	r2, pc, #4	@ (adr r2, 800ac50 <USBD_GetDescriptor+0x108>)
 800ac4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4e:	bf00      	nop
 800ac50:	0800ac69 	.word	0x0800ac69
 800ac54:	0800ac9d 	.word	0x0800ac9d
 800ac58:	0800acd1 	.word	0x0800acd1
 800ac5c:	0800ad05 	.word	0x0800ad05
 800ac60:	0800ad39 	.word	0x0800ad39
 800ac64:	0800ad6d 	.word	0x0800ad6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	7c12      	ldrb	r2, [r2, #16]
 800ac80:	f107 0108 	add.w	r1, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac8a:	e091      	b.n	800adb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 facb 	bl	800b22a <USBD_CtlError>
            err++;
 800ac94:	7afb      	ldrb	r3, [r7, #11]
 800ac96:	3301      	adds	r3, #1
 800ac98:	72fb      	strb	r3, [r7, #11]
          break;
 800ac9a:	e089      	b.n	800adb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	7c12      	ldrb	r2, [r2, #16]
 800acb4:	f107 0108 	add.w	r1, r7, #8
 800acb8:	4610      	mov	r0, r2
 800acba:	4798      	blx	r3
 800acbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acbe:	e077      	b.n	800adb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fab1 	bl	800b22a <USBD_CtlError>
            err++;
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	3301      	adds	r3, #1
 800accc:	72fb      	strb	r3, [r7, #11]
          break;
 800acce:	e06f      	b.n	800adb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00b      	beq.n	800acf4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7c12      	ldrb	r2, [r2, #16]
 800ace8:	f107 0108 	add.w	r1, r7, #8
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acf2:	e05d      	b.n	800adb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa97 	bl	800b22a <USBD_CtlError>
            err++;
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	3301      	adds	r3, #1
 800ad00:	72fb      	strb	r3, [r7, #11]
          break;
 800ad02:	e055      	b.n	800adb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00b      	beq.n	800ad28 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	7c12      	ldrb	r2, [r2, #16]
 800ad1c:	f107 0108 	add.w	r1, r7, #8
 800ad20:	4610      	mov	r0, r2
 800ad22:	4798      	blx	r3
 800ad24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad26:	e043      	b.n	800adb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa7d 	bl	800b22a <USBD_CtlError>
            err++;
 800ad30:	7afb      	ldrb	r3, [r7, #11]
 800ad32:	3301      	adds	r3, #1
 800ad34:	72fb      	strb	r3, [r7, #11]
          break;
 800ad36:	e03b      	b.n	800adb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	7c12      	ldrb	r2, [r2, #16]
 800ad50:	f107 0108 	add.w	r1, r7, #8
 800ad54:	4610      	mov	r0, r2
 800ad56:	4798      	blx	r3
 800ad58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad5a:	e029      	b.n	800adb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa63 	bl	800b22a <USBD_CtlError>
            err++;
 800ad64:	7afb      	ldrb	r3, [r7, #11]
 800ad66:	3301      	adds	r3, #1
 800ad68:	72fb      	strb	r3, [r7, #11]
          break;
 800ad6a:	e021      	b.n	800adb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00b      	beq.n	800ad90 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	7c12      	ldrb	r2, [r2, #16]
 800ad84:	f107 0108 	add.w	r1, r7, #8
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4798      	blx	r3
 800ad8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad8e:	e00f      	b.n	800adb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fa49 	bl	800b22a <USBD_CtlError>
            err++;
 800ad98:	7afb      	ldrb	r3, [r7, #11]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad9e:	e007      	b.n	800adb0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fa41 	bl	800b22a <USBD_CtlError>
          err++;
 800ada8:	7afb      	ldrb	r3, [r7, #11]
 800adaa:	3301      	adds	r3, #1
 800adac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800adae:	bf00      	nop
      }
      break;
 800adb0:	e037      	b.n	800ae22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	7c1b      	ldrb	r3, [r3, #16]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d109      	bne.n	800adce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adc2:	f107 0208 	add.w	r2, r7, #8
 800adc6:	4610      	mov	r0, r2
 800adc8:	4798      	blx	r3
 800adca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adcc:	e029      	b.n	800ae22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fa2a 	bl	800b22a <USBD_CtlError>
        err++;
 800add6:	7afb      	ldrb	r3, [r7, #11]
 800add8:	3301      	adds	r3, #1
 800adda:	72fb      	strb	r3, [r7, #11]
      break;
 800addc:	e021      	b.n	800ae22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	7c1b      	ldrb	r3, [r3, #16]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10d      	bne.n	800ae02 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adee:	f107 0208 	add.w	r2, r7, #8
 800adf2:	4610      	mov	r0, r2
 800adf4:	4798      	blx	r3
 800adf6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	3301      	adds	r3, #1
 800adfc:	2207      	movs	r2, #7
 800adfe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae00:	e00f      	b.n	800ae22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fa10 	bl	800b22a <USBD_CtlError>
        err++;
 800ae0a:	7afb      	ldrb	r3, [r7, #11]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae10:	e007      	b.n	800ae22 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fa08 	bl	800b22a <USBD_CtlError>
      err++;
 800ae1a:	7afb      	ldrb	r3, [r7, #11]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae20:	bf00      	nop
  }

  if (err != 0U)
 800ae22:	7afb      	ldrb	r3, [r7, #11]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d11e      	bne.n	800ae66 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	88db      	ldrh	r3, [r3, #6]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d016      	beq.n	800ae5e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ae30:	893b      	ldrh	r3, [r7, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00e      	beq.n	800ae54 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	88da      	ldrh	r2, [r3, #6]
 800ae3a:	893b      	ldrh	r3, [r7, #8]
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	bf28      	it	cs
 800ae40:	4613      	movcs	r3, r2
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae46:	893b      	ldrh	r3, [r7, #8]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	68f9      	ldr	r1, [r7, #12]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fa69 	bl	800b324 <USBD_CtlSendData>
 800ae52:	e009      	b.n	800ae68 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f9e7 	bl	800b22a <USBD_CtlError>
 800ae5c:	e004      	b.n	800ae68 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 faba 	bl	800b3d8 <USBD_CtlSendStatus>
 800ae64:	e000      	b.n	800ae68 <USBD_GetDescriptor+0x320>
    return;
 800ae66:	bf00      	nop
  }
}
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop

0800ae70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	889b      	ldrh	r3, [r3, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d131      	bne.n	800aee6 <USBD_SetAddress+0x76>
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	88db      	ldrh	r3, [r3, #6]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d12d      	bne.n	800aee6 <USBD_SetAddress+0x76>
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae90:	d829      	bhi.n	800aee6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	885b      	ldrh	r3, [r3, #2]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d104      	bne.n	800aeb4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9bc 	bl	800b22a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb2:	e01d      	b.n	800aef0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	7bfa      	ldrb	r2, [r7, #15]
 800aeb8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f003 fc77 	bl	800e7b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fa86 	bl	800b3d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d004      	beq.n	800aedc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2202      	movs	r2, #2
 800aed6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeda:	e009      	b.n	800aef0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee4:	e004      	b.n	800aef0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f99e 	bl	800b22a <USBD_CtlError>
  }
}
 800aeee:	bf00      	nop
 800aef0:	bf00      	nop
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	885b      	ldrh	r3, [r3, #2]
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	4b4e      	ldr	r3, [pc, #312]	@ (800b048 <USBD_SetConfig+0x150>)
 800af0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af10:	4b4d      	ldr	r3, [pc, #308]	@ (800b048 <USBD_SetConfig+0x150>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d905      	bls.n	800af24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f985 	bl	800b22a <USBD_CtlError>
    return USBD_FAIL;
 800af20:	2303      	movs	r3, #3
 800af22:	e08c      	b.n	800b03e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d002      	beq.n	800af36 <USBD_SetConfig+0x3e>
 800af30:	2b03      	cmp	r3, #3
 800af32:	d029      	beq.n	800af88 <USBD_SetConfig+0x90>
 800af34:	e075      	b.n	800b022 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af36:	4b44      	ldr	r3, [pc, #272]	@ (800b048 <USBD_SetConfig+0x150>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d020      	beq.n	800af80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af3e:	4b42      	ldr	r3, [pc, #264]	@ (800b048 <USBD_SetConfig+0x150>)
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af48:	4b3f      	ldr	r3, [pc, #252]	@ (800b048 <USBD_SetConfig+0x150>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7fe ffb9 	bl	8009ec6 <USBD_SetClassConfig>
 800af54:	4603      	mov	r3, r0
 800af56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d008      	beq.n	800af70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f962 	bl	800b22a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2202      	movs	r2, #2
 800af6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af6e:	e065      	b.n	800b03c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fa31 	bl	800b3d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2203      	movs	r2, #3
 800af7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af7e:	e05d      	b.n	800b03c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fa29 	bl	800b3d8 <USBD_CtlSendStatus>
      break;
 800af86:	e059      	b.n	800b03c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af88:	4b2f      	ldr	r3, [pc, #188]	@ (800b048 <USBD_SetConfig+0x150>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d112      	bne.n	800afb6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2202      	movs	r2, #2
 800af94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800af98:	4b2b      	ldr	r3, [pc, #172]	@ (800b048 <USBD_SetConfig+0x150>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	461a      	mov	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afa2:	4b29      	ldr	r3, [pc, #164]	@ (800b048 <USBD_SetConfig+0x150>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7fe ffa8 	bl	8009efe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fa12 	bl	800b3d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afb4:	e042      	b.n	800b03c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800afb6:	4b24      	ldr	r3, [pc, #144]	@ (800b048 <USBD_SetConfig+0x150>)
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d02a      	beq.n	800b01a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7fe ff96 	bl	8009efe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800afd2:	4b1d      	ldr	r3, [pc, #116]	@ (800b048 <USBD_SetConfig+0x150>)
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afdc:	4b1a      	ldr	r3, [pc, #104]	@ (800b048 <USBD_SetConfig+0x150>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7fe ff6f 	bl	8009ec6 <USBD_SetClassConfig>
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800afec:	7bfb      	ldrb	r3, [r7, #15]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00f      	beq.n	800b012 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f918 	bl	800b22a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7fe ff7b 	bl	8009efe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2202      	movs	r2, #2
 800b00c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b010:	e014      	b.n	800b03c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f9e0 	bl	800b3d8 <USBD_CtlSendStatus>
      break;
 800b018:	e010      	b.n	800b03c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f9dc 	bl	800b3d8 <USBD_CtlSendStatus>
      break;
 800b020:	e00c      	b.n	800b03c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f900 	bl	800b22a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b02a:	4b07      	ldr	r3, [pc, #28]	@ (800b048 <USBD_SetConfig+0x150>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7fe ff64 	bl	8009efe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b036:	2303      	movs	r3, #3
 800b038:	73fb      	strb	r3, [r7, #15]
      break;
 800b03a:	bf00      	nop
  }

  return ret;
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	240002ec 	.word	0x240002ec

0800b04c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	88db      	ldrh	r3, [r3, #6]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d004      	beq.n	800b068 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f8e2 	bl	800b22a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b066:	e023      	b.n	800b0b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b02      	cmp	r3, #2
 800b072:	dc02      	bgt.n	800b07a <USBD_GetConfig+0x2e>
 800b074:	2b00      	cmp	r3, #0
 800b076:	dc03      	bgt.n	800b080 <USBD_GetConfig+0x34>
 800b078:	e015      	b.n	800b0a6 <USBD_GetConfig+0x5a>
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d00b      	beq.n	800b096 <USBD_GetConfig+0x4a>
 800b07e:	e012      	b.n	800b0a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3308      	adds	r3, #8
 800b08a:	2201      	movs	r2, #1
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f948 	bl	800b324 <USBD_CtlSendData>
        break;
 800b094:	e00c      	b.n	800b0b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	3304      	adds	r3, #4
 800b09a:	2201      	movs	r2, #1
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f940 	bl	800b324 <USBD_CtlSendData>
        break;
 800b0a4:	e004      	b.n	800b0b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f8be 	bl	800b22a <USBD_CtlError>
        break;
 800b0ae:	bf00      	nop
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d81e      	bhi.n	800b10e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	88db      	ldrh	r3, [r3, #6]
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d004      	beq.n	800b0e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f8a5 	bl	800b22a <USBD_CtlError>
        break;
 800b0e0:	e01a      	b.n	800b118 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d005      	beq.n	800b0fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	f043 0202 	orr.w	r2, r3, #2
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	330c      	adds	r3, #12
 800b102:	2202      	movs	r2, #2
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f90c 	bl	800b324 <USBD_CtlSendData>
      break;
 800b10c:	e004      	b.n	800b118 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f88a 	bl	800b22a <USBD_CtlError>
      break;
 800b116:	bf00      	nop
  }
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	885b      	ldrh	r3, [r3, #2]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d107      	bne.n	800b142 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f94c 	bl	800b3d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b140:	e013      	b.n	800b16a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	885b      	ldrh	r3, [r3, #2]
 800b146:	2b02      	cmp	r3, #2
 800b148:	d10b      	bne.n	800b162 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	889b      	ldrh	r3, [r3, #4]
 800b14e:	0a1b      	lsrs	r3, r3, #8
 800b150:	b29b      	uxth	r3, r3
 800b152:	b2da      	uxtb	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f93c 	bl	800b3d8 <USBD_CtlSendStatus>
}
 800b160:	e003      	b.n	800b16a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f860 	bl	800b22a <USBD_CtlError>
}
 800b16a:	bf00      	nop
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b182:	b2db      	uxtb	r3, r3
 800b184:	3b01      	subs	r3, #1
 800b186:	2b02      	cmp	r3, #2
 800b188:	d80b      	bhi.n	800b1a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	885b      	ldrh	r3, [r3, #2]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d10c      	bne.n	800b1ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f91c 	bl	800b3d8 <USBD_CtlSendStatus>
      }
      break;
 800b1a0:	e004      	b.n	800b1ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f840 	bl	800b22a <USBD_CtlError>
      break;
 800b1aa:	e000      	b.n	800b1ae <USBD_ClrFeature+0x3c>
      break;
 800b1ac:	bf00      	nop
  }
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	781a      	ldrb	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	781a      	ldrb	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f7ff fa16 	bl	800a612 <SWAPBYTE>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f7ff fa09 	bl	800a612 <SWAPBYTE>
 800b200:	4603      	mov	r3, r0
 800b202:	461a      	mov	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3301      	adds	r3, #1
 800b20c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3301      	adds	r3, #1
 800b212:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7ff f9fc 	bl	800a612 <SWAPBYTE>
 800b21a:	4603      	mov	r3, r0
 800b21c:	461a      	mov	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	80da      	strh	r2, [r3, #6]
}
 800b222:	bf00      	nop
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b234:	2180      	movs	r1, #128	@ 0x80
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f003 fa52 	bl	800e6e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b23c:	2100      	movs	r1, #0
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f003 fa4e 	bl	800e6e0 <USBD_LL_StallEP>
}
 800b244:	bf00      	nop
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b258:	2300      	movs	r3, #0
 800b25a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d042      	beq.n	800b2e8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b266:	6938      	ldr	r0, [r7, #16]
 800b268:	f000 f842 	bl	800b2f0 <USBD_GetLen>
 800b26c:	4603      	mov	r3, r0
 800b26e:	3301      	adds	r3, #1
 800b270:	005b      	lsls	r3, r3, #1
 800b272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b276:	d808      	bhi.n	800b28a <USBD_GetString+0x3e>
 800b278:	6938      	ldr	r0, [r7, #16]
 800b27a:	f000 f839 	bl	800b2f0 <USBD_GetLen>
 800b27e:	4603      	mov	r3, r0
 800b280:	3301      	adds	r3, #1
 800b282:	b29b      	uxth	r3, r3
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	e001      	b.n	800b28e <USBD_GetString+0x42>
 800b28a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b292:	7dfb      	ldrb	r3, [r7, #23]
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	4413      	add	r3, r2
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	7812      	ldrb	r2, [r2, #0]
 800b29c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	2203      	movs	r2, #3
 800b2ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2b4:	e013      	b.n	800b2de <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	7812      	ldrb	r2, [r2, #0]
 800b2c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	613b      	str	r3, [r7, #16]
    idx++;
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1e7      	bne.n	800b2b6 <USBD_GetString+0x6a>
 800b2e6:	e000      	b.n	800b2ea <USBD_GetString+0x9e>
    return;
 800b2e8:	bf00      	nop
  }
}
 800b2ea:	3718      	adds	r7, #24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b300:	e005      	b.n	800b30e <USBD_GetLen+0x1e>
  {
    len++;
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	3301      	adds	r3, #1
 800b306:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	3301      	adds	r3, #1
 800b30c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1f5      	bne.n	800b302 <USBD_GetLen+0x12>
  }

  return len;
 800b316:	7bfb      	ldrb	r3, [r7, #15]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2202      	movs	r2, #2
 800b334:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	2100      	movs	r1, #0
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f003 fa51 	bl	800e7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	60f8      	str	r0, [r7, #12]
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	2100      	movs	r1, #0
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f003 fa40 	bl	800e7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2203      	movs	r2, #3
 800b38c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f003 fa44 	bl	800e834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	60f8      	str	r0, [r7, #12]
 800b3be:	60b9      	str	r1, [r7, #8]
 800b3c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f003 fa33 	bl	800e834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f003 f9ff 	bl	800e7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b082      	sub	sp, #8
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2205      	movs	r2, #5
 800b40a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b40e:	2300      	movs	r3, #0
 800b410:	2200      	movs	r2, #0
 800b412:	2100      	movs	r1, #0
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f003 fa0d 	bl	800e834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 800b428:	2200      	movs	r2, #0
 800b42a:	2108      	movs	r1, #8
 800b42c:	480a      	ldr	r0, [pc, #40]	@ (800b458 <ad7606_Init+0x34>)
 800b42e:	f7f5 fdd5 	bl	8000fdc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800b432:	2001      	movs	r0, #1
 800b434:	f7f5 f832 	bl	800049c <HAL_Delay>
    AD7606_RST_SET();
 800b438:	2201      	movs	r2, #1
 800b43a:	2108      	movs	r1, #8
 800b43c:	4806      	ldr	r0, [pc, #24]	@ (800b458 <ad7606_Init+0x34>)
 800b43e:	f7f5 fdcd 	bl	8000fdc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800b442:	2001      	movs	r0, #1
 800b444:	f7f5 f82a 	bl	800049c <HAL_Delay>
    AD7606_RST_RESET();
 800b448:	2200      	movs	r2, #0
 800b44a:	2108      	movs	r1, #8
 800b44c:	4802      	ldr	r0, [pc, #8]	@ (800b458 <ad7606_Init+0x34>)
 800b44e:	f7f5 fdc5 	bl	8000fdc <HAL_GPIO_WritePin>
}
 800b452:	bf00      	nop
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	58021800 	.word	0x58021800

0800b45c <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	4613      	mov	r3, r2
 800b468:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 800b46a:	2200      	movs	r2, #0
 800b46c:	2180      	movs	r1, #128	@ 0x80
 800b46e:	4809      	ldr	r0, [pc, #36]	@ (800b494 <ad7606_Read+0x38>)
 800b470:	f7f5 fdb4 	bl	8000fdc <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 800b474:	88fa      	ldrh	r2, [r7, #6]
 800b476:	2364      	movs	r3, #100	@ 0x64
 800b478:	68b9      	ldr	r1, [r7, #8]
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f7fa fd9a 	bl	8005fb4 <HAL_SPI_Receive>
    AD7606_CS_SET();
 800b480:	2201      	movs	r2, #1
 800b482:	2180      	movs	r1, #128	@ 0x80
 800b484:	4803      	ldr	r0, [pc, #12]	@ (800b494 <ad7606_Read+0x38>)
 800b486:	f7f5 fda9 	bl	8000fdc <HAL_GPIO_WritePin>
}
 800b48a:	bf00      	nop
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	58021800 	.word	0x58021800

0800b498 <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7fb fa11 	bl	80068cc <HAL_TIM_PWM_Start>
}
 800b4aa:	bf00      	nop
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	617b      	str	r3, [r7, #20]
 800b4c6:	e03d      	b.n	800b544 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	da0f      	bge.n	800b4f8 <ad7606_Convert+0x44>
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	005b      	lsls	r3, r3, #1
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	425b      	negs	r3, r3
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	425b      	negs	r3, r3
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	b21b      	sxth	r3, r3
 800b4f6:	e005      	b.n	800b504 <ad7606_Convert+0x50>
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	005b      	lsls	r3, r3, #1
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	0052      	lsls	r2, r2, #1
 800b508:	68f9      	ldr	r1, [r7, #12]
 800b50a:	440a      	add	r2, r1
 800b50c:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	005b      	lsls	r3, r3, #1
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	4413      	add	r3, r2
 800b516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b51a:	ee07 3a90 	vmov	s15, r3
 800b51e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b522:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800b526:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	4413      	add	r3, r2
 800b532:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800b55c <ad7606_Convert+0xa8>
 800b536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b53a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	3301      	adds	r3, #1
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	897b      	ldrh	r3, [r7, #10]
 800b546:	697a      	ldr	r2, [r7, #20]
 800b548:	429a      	cmp	r2, r3
 800b54a:	dbbd      	blt.n	800b4c8 <ad7606_Convert+0x14>
    }
}
 800b54c:	bf00      	nop
 800b54e:	bf00      	nop
 800b550:	371c      	adds	r7, #28
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	47000000 	.word	0x47000000

0800b560 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 800b560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b564:	b087      	sub	sp, #28
 800b566:	af00      	add	r7, sp, #0
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	460b      	mov	r3, r1
 800b56c:	607a      	str	r2, [r7, #4]
 800b56e:	817b      	strh	r3, [r7, #10]
 800b570:	466b      	mov	r3, sp
 800b572:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 800b574:	8979      	ldrh	r1, [r7, #10]
 800b576:	460b      	mov	r3, r1
 800b578:	3b01      	subs	r3, #1
 800b57a:	617b      	str	r3, [r7, #20]
 800b57c:	b28b      	uxth	r3, r1
 800b57e:	2200      	movs	r2, #0
 800b580:	4698      	mov	r8, r3
 800b582:	4691      	mov	r9, r2
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	f04f 0300 	mov.w	r3, #0
 800b58c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800b590:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800b594:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800b598:	b28b      	uxth	r3, r1
 800b59a:	2200      	movs	r2, #0
 800b59c:	461c      	mov	r4, r3
 800b59e:	4615      	mov	r5, r2
 800b5a0:	f04f 0200 	mov.w	r2, #0
 800b5a4:	f04f 0300 	mov.w	r3, #0
 800b5a8:	012b      	lsls	r3, r5, #4
 800b5aa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800b5ae:	0122      	lsls	r2, r4, #4
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	3307      	adds	r3, #7
 800b5b6:	08db      	lsrs	r3, r3, #3
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	ebad 0d03 	sub.w	sp, sp, r3
 800b5be:	466b      	mov	r3, sp
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	085b      	lsrs	r3, r3, #1
 800b5c4:	005b      	lsls	r3, r3, #1
 800b5c6:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 800b5c8:	897b      	ldrh	r3, [r7, #10]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	6939      	ldr	r1, [r7, #16]
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f7ff ff44 	bl	800b45c <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 800b5d4:	897b      	ldrh	r3, [r7, #10]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6938      	ldr	r0, [r7, #16]
 800b5dc:	f7ff ff6a 	bl	800b4b4 <ad7606_Convert>
 800b5e0:	46b5      	mov	sp, r6
}
 800b5e2:	bf00      	nop
 800b5e4:	371c      	adds	r7, #28
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b5ec <ina238_Init>:
 * @brief  INA238初始化
 * @param  hi2c I2C句柄
 * @param  error 误差纠正
 */
void ina238_Init(I2C_HandleTypeDef *hi2c, int8_t error)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af04      	add	r7, sp, #16
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	70fb      	strb	r3, [r7, #3]
	uint8_t pData[2];
	pData[0] = 0x00;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x00;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100); // 量程选择为163.84mv
 800b600:	2364      	movs	r3, #100	@ 0x64
 800b602:	9302      	str	r3, [sp, #8]
 800b604:	2302      	movs	r3, #2
 800b606:	9301      	str	r3, [sp, #4]
 800b608:	f107 030c 	add.w	r3, r7, #12
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	2301      	movs	r3, #1
 800b610:	2200      	movs	r2, #0
 800b612:	2181      	movs	r1, #129	@ 0x81
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7f5 fdcb 	bl	80011b0 <HAL_I2C_Mem_Write>
	pData[0] = 0xf4;
 800b61a:	23f4      	movs	r3, #244	@ 0xf4
 800b61c:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x93;
 800b61e:	2393      	movs	r3, #147	@ 0x93
 800b620:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100); // 转换时间设置为9.6ms
 800b622:	2364      	movs	r3, #100	@ 0x64
 800b624:	9302      	str	r3, [sp, #8]
 800b626:	2302      	movs	r3, #2
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	f107 030c 	add.w	r3, r7, #12
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	2301      	movs	r3, #1
 800b632:	2201      	movs	r2, #1
 800b634:	2181      	movs	r1, #129	@ 0x81
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7f5 fdba 	bl	80011b0 <HAL_I2C_Mem_Write>
	pData[0] = 0x0f;
 800b63c:	230f      	movs	r3, #15
 800b63e:	733b      	strb	r3, [r7, #12]
	pData[1] = 0xa0 + error;
 800b640:	78fb      	ldrb	r3, [r7, #3]
 800b642:	3b60      	subs	r3, #96	@ 0x60
 800b644:	b2db      	uxtb	r3, r3
 800b646:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100); // 设置最大电流为8A，采样电阻为20mΩ
 800b648:	2364      	movs	r3, #100	@ 0x64
 800b64a:	9302      	str	r3, [sp, #8]
 800b64c:	2302      	movs	r3, #2
 800b64e:	9301      	str	r3, [sp, #4]
 800b650:	f107 030c 	add.w	r3, r7, #12
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	2301      	movs	r3, #1
 800b658:	2202      	movs	r2, #2
 800b65a:	2181      	movs	r1, #129	@ 0x81
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7f5 fda7 	bl	80011b0 <HAL_I2C_Mem_Write>
}
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	0000      	movs	r0, r0
 800b66c:	0000      	movs	r0, r0
	...

0800b670 <ina238_GetVolt>:
 * @brief  INA238读取电压
 * @param  hi2c I2C句柄
 * @retval 电压值
 */
float ina238_GetVolt(I2C_HandleTypeDef *hi2c)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af04      	add	r7, sp, #16
 800b676:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float volt;
	if (HAL_I2C_Mem_Read(hi2c, ADDR_READ, VBUS, 1, pData, 2, 100) == HAL_OK)
 800b678:	2364      	movs	r3, #100	@ 0x64
 800b67a:	9302      	str	r3, [sp, #8]
 800b67c:	2302      	movs	r3, #2
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	f107 0308 	add.w	r3, r7, #8
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	2301      	movs	r3, #1
 800b688:	2205      	movs	r2, #5
 800b68a:	2180      	movs	r1, #128	@ 0x80
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7f5 fea3 	bl	80013d8 <HAL_I2C_Mem_Read>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d137      	bne.n	800b708 <ina238_GetVolt+0x98>
	{
		volt = pData[0] * 256 + pData[1];
 800b698:	7a3b      	ldrb	r3, [r7, #8]
 800b69a:	021b      	lsls	r3, r3, #8
 800b69c:	7a7a      	ldrb	r2, [r7, #9]
 800b69e:	4413      	add	r3, r2
 800b6a0:	ee07 3a90 	vmov	s15, r3
 800b6a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6a8:	edc7 7a03 	vstr	s15, [r7, #12]
		if (volt > 32767) // 为负数的情况
 800b6ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6b0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800b720 <ina238_GetVolt+0xb0>
 800b6b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6bc:	dd14      	ble.n	800b6e8 <ina238_GetVolt+0x78>
			volt = (volt - 65536) * 3.125 / 1000;
 800b6be:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6c2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b724 <ina238_GetVolt+0xb4>
 800b6c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b6ce:	eeb0 6b09 	vmov.f64	d6, #9	@ 0x40480000  3.125
 800b6d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b6d6:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 800b718 <ina238_GetVolt+0xa8>
 800b6da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b6de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b6e2:	edc7 7a03 	vstr	s15, [r7, #12]
 800b6e6:	e00f      	b.n	800b708 <ina238_GetVolt+0x98>
		else
			volt = volt * 3.125 / 1000;
 800b6e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b6f0:	eeb0 6b09 	vmov.f64	d6, #9	@ 0x40480000  3.125
 800b6f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b6f8:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 800b718 <ina238_GetVolt+0xa8>
 800b6fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b700:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b704:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return volt;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	ee07 3a90 	vmov	s15, r3
}
 800b70e:	eeb0 0a67 	vmov.f32	s0, s15
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	00000000 	.word	0x00000000
 800b71c:	408f4000 	.word	0x408f4000
 800b720:	46fffe00 	.word	0x46fffe00
 800b724:	47800000 	.word	0x47800000

0800b728 <ina238_GetCurrent>:
 * @brief  INA238读取电流
 * @param  hi2c I2C句柄
 * @retval 电流值
 */
float ina238_GetCurrent(I2C_HandleTypeDef *hi2c)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b088      	sub	sp, #32
 800b72c:	af04      	add	r7, sp, #16
 800b72e:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float current;
	if (HAL_I2C_Mem_Read(hi2c, ADDR_READ, CURRENT, 1, pData, 2, 100) == HAL_OK)
 800b730:	2364      	movs	r3, #100	@ 0x64
 800b732:	9302      	str	r3, [sp, #8]
 800b734:	2302      	movs	r3, #2
 800b736:	9301      	str	r3, [sp, #4]
 800b738:	f107 0308 	add.w	r3, r7, #8
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	2301      	movs	r3, #1
 800b740:	2207      	movs	r2, #7
 800b742:	2180      	movs	r1, #128	@ 0x80
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7f5 fe47 	bl	80013d8 <HAL_I2C_Mem_Read>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d127      	bne.n	800b7a0 <ina238_GetCurrent+0x78>
	{
		current = pData[0] * 256 + pData[1];
 800b750:	7a3b      	ldrb	r3, [r7, #8]
 800b752:	021b      	lsls	r3, r3, #8
 800b754:	7a7a      	ldrb	r2, [r7, #9]
 800b756:	4413      	add	r3, r2
 800b758:	ee07 3a90 	vmov	s15, r3
 800b75c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b760:	edc7 7a03 	vstr	s15, [r7, #12]
		if (current > 32767)
 800b764:	edd7 7a03 	vldr	s15, [r7, #12]
 800b768:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800b7b0 <ina238_GetCurrent+0x88>
 800b76c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b774:	dd0c      	ble.n	800b790 <ina238_GetCurrent+0x68>
			current = (current - 65536) * (8 / 32768.0);
 800b776:	edd7 7a03 	vldr	s15, [r7, #12]
 800b77a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800b7b4 <ina238_GetCurrent+0x8c>
 800b77e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b782:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800b7b8 <ina238_GetCurrent+0x90>
 800b786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b78a:	edc7 7a03 	vstr	s15, [r7, #12]
 800b78e:	e007      	b.n	800b7a0 <ina238_GetCurrent+0x78>
		else
			current = current * (8 / 32768.0);
 800b790:	edd7 7a03 	vldr	s15, [r7, #12]
 800b794:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800b7b8 <ina238_GetCurrent+0x90>
 800b798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b79c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return current;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	ee07 3a90 	vmov	s15, r3
}
 800b7a6:	eeb0 0a67 	vmov.f32	s0, s15
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	46fffe00 	.word	0x46fffe00
 800b7b4:	47800000 	.word	0x47800000
 800b7b8:	39800000 	.word	0x39800000

0800b7bc <OLED_WR_Byte>:
		OLED_WR_Byte(0xA0, OLED_CMD);
	}
}

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	460a      	mov	r2, r1
 800b7c6:	71fb      	strb	r3, [r7, #7]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800b7cc:	1dfb      	adds	r3, r7, #7
 800b7ce:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800b7d0:	79bb      	ldrb	r3, [r7, #6]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d005      	beq.n	800b7e2 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	2140      	movs	r1, #64	@ 0x40
 800b7da:	4811      	ldr	r0, [pc, #68]	@ (800b820 <OLED_WR_Byte+0x64>)
 800b7dc:	f7f5 fbfe 	bl	8000fdc <HAL_GPIO_WritePin>
 800b7e0:	e004      	b.n	800b7ec <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2140      	movs	r1, #64	@ 0x40
 800b7e6:	480e      	ldr	r0, [pc, #56]	@ (800b820 <OLED_WR_Byte+0x64>)
 800b7e8:	f7f5 fbf8 	bl	8000fdc <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	2102      	movs	r1, #2
 800b7f0:	480c      	ldr	r0, [pc, #48]	@ (800b824 <OLED_WR_Byte+0x68>)
 800b7f2:	f7f5 fbf3 	bl	8000fdc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800b7f6:	23c8      	movs	r3, #200	@ 0xc8
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	68f9      	ldr	r1, [r7, #12]
 800b7fc:	480a      	ldr	r0, [pc, #40]	@ (800b828 <OLED_WR_Byte+0x6c>)
 800b7fe:	f7fa f9eb 	bl	8005bd8 <HAL_SPI_Transmit>

	OLED_CS_Set();
 800b802:	2201      	movs	r2, #1
 800b804:	2102      	movs	r1, #2
 800b806:	4807      	ldr	r0, [pc, #28]	@ (800b824 <OLED_WR_Byte+0x68>)
 800b808:	f7f5 fbe8 	bl	8000fdc <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800b80c:	2201      	movs	r2, #1
 800b80e:	2140      	movs	r1, #64	@ 0x40
 800b810:	4803      	ldr	r0, [pc, #12]	@ (800b820 <OLED_WR_Byte+0x64>)
 800b812:	f7f5 fbe3 	bl	8000fdc <HAL_GPIO_WritePin>
}
 800b816:	bf00      	nop
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	58022000 	.word	0x58022000
 800b824:	58020400 	.word	0x58020400
 800b828:	240008e4 	.word	0x240008e4

0800b82c <OLED_Refresh>:
	OLED_WR_Byte(0xAF, OLED_CMD); // 关闭屏幕
}

// 更新显存到OLED
void OLED_Refresh(void)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800b832:	2300      	movs	r3, #0
 800b834:	71fb      	strb	r3, [r7, #7]
 800b836:	e026      	b.n	800b886 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800b838:	79fb      	ldrb	r3, [r7, #7]
 800b83a:	3b50      	subs	r3, #80	@ 0x50
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2100      	movs	r1, #0
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff ffbb 	bl	800b7bc <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800b846:	2100      	movs	r1, #0
 800b848:	2000      	movs	r0, #0
 800b84a:	f7ff ffb7 	bl	800b7bc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800b84e:	2100      	movs	r1, #0
 800b850:	2010      	movs	r0, #16
 800b852:	f7ff ffb3 	bl	800b7bc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800b856:	2300      	movs	r3, #0
 800b858:	71bb      	strb	r3, [r7, #6]
 800b85a:	e00d      	b.n	800b878 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800b85c:	79ba      	ldrb	r2, [r7, #6]
 800b85e:	79fb      	ldrb	r3, [r7, #7]
 800b860:	490d      	ldr	r1, [pc, #52]	@ (800b898 <OLED_Refresh+0x6c>)
 800b862:	00d2      	lsls	r2, r2, #3
 800b864:	440a      	add	r2, r1
 800b866:	4413      	add	r3, r2
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2101      	movs	r1, #1
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7ff ffa5 	bl	800b7bc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800b872:	79bb      	ldrb	r3, [r7, #6]
 800b874:	3301      	adds	r3, #1
 800b876:	71bb      	strb	r3, [r7, #6]
 800b878:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	daed      	bge.n	800b85c <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	3301      	adds	r3, #1
 800b884:	71fb      	strb	r3, [r7, #7]
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	2b07      	cmp	r3, #7
 800b88a:	d9d5      	bls.n	800b838 <OLED_Refresh+0xc>
	}
}
 800b88c:	bf00      	nop
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	240002f0 	.word	0x240002f0

0800b89c <OLED_Clear>:
// 清屏函数
void OLED_Clear(void)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	71fb      	strb	r3, [r7, #7]
 800b8a6:	e014      	b.n	800b8d2 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	71bb      	strb	r3, [r7, #6]
 800b8ac:	e00a      	b.n	800b8c4 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 800b8ae:	79ba      	ldrb	r2, [r7, #6]
 800b8b0:	79fb      	ldrb	r3, [r7, #7]
 800b8b2:	490c      	ldr	r1, [pc, #48]	@ (800b8e4 <OLED_Clear+0x48>)
 800b8b4:	00d2      	lsls	r2, r2, #3
 800b8b6:	440a      	add	r2, r1
 800b8b8:	4413      	add	r3, r2
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800b8be:	79bb      	ldrb	r3, [r7, #6]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	71bb      	strb	r3, [r7, #6]
 800b8c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	daf0      	bge.n	800b8ae <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800b8cc:	79fb      	ldrb	r3, [r7, #7]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	71fb      	strb	r3, [r7, #7]
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	2b07      	cmp	r3, #7
 800b8d6:	d9e7      	bls.n	800b8a8 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 800b8d8:	f7ff ffa8 	bl	800b82c <OLED_Refresh>
}
 800b8dc:	bf00      	nop
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	240002f0 	.word	0x240002f0

0800b8e8 <OLED_DrawPoint>:

// 画点
// x:0~127
// y:0~63
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	460a      	mov	r2, r1
 800b8f2:	71fb      	strb	r3, [r7, #7]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800b8f8:	79bb      	ldrb	r3, [r7, #6]
 800b8fa:	08db      	lsrs	r3, r3, #3
 800b8fc:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800b8fe:	79bb      	ldrb	r3, [r7, #6]
 800b900:	f003 0307 	and.w	r3, r3, #7
 800b904:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800b906:	7bbb      	ldrb	r3, [r7, #14]
 800b908:	2201      	movs	r2, #1
 800b90a:	fa02 f303 	lsl.w	r3, r2, r3
 800b90e:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800b910:	79fa      	ldrb	r2, [r7, #7]
 800b912:	7bfb      	ldrb	r3, [r7, #15]
 800b914:	490a      	ldr	r1, [pc, #40]	@ (800b940 <OLED_DrawPoint+0x58>)
 800b916:	00d2      	lsls	r2, r2, #3
 800b918:	440a      	add	r2, r1
 800b91a:	4413      	add	r3, r2
 800b91c:	7818      	ldrb	r0, [r3, #0]
 800b91e:	79fa      	ldrb	r2, [r7, #7]
 800b920:	7bfb      	ldrb	r3, [r7, #15]
 800b922:	7b79      	ldrb	r1, [r7, #13]
 800b924:	4301      	orrs	r1, r0
 800b926:	b2c8      	uxtb	r0, r1
 800b928:	4905      	ldr	r1, [pc, #20]	@ (800b940 <OLED_DrawPoint+0x58>)
 800b92a:	00d2      	lsls	r2, r2, #3
 800b92c:	440a      	add	r2, r1
 800b92e:	4413      	add	r3, r2
 800b930:	4602      	mov	r2, r0
 800b932:	701a      	strb	r2, [r3, #0]
}
 800b934:	bf00      	nop
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	240002f0 	.word	0x240002f0

0800b944 <OLED_ClearPoint>:

// 清除一个点
// x:0~127
// y:0~63
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	4603      	mov	r3, r0
 800b94c:	460a      	mov	r2, r1
 800b94e:	71fb      	strb	r3, [r7, #7]
 800b950:	4613      	mov	r3, r2
 800b952:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800b954:	79bb      	ldrb	r3, [r7, #6]
 800b956:	08db      	lsrs	r3, r3, #3
 800b958:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800b95a:	79bb      	ldrb	r3, [r7, #6]
 800b95c:	f003 0307 	and.w	r3, r3, #7
 800b960:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800b962:	7bbb      	ldrb	r3, [r7, #14]
 800b964:	2201      	movs	r2, #1
 800b966:	fa02 f303 	lsl.w	r3, r2, r3
 800b96a:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800b96c:	79fa      	ldrb	r2, [r7, #7]
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	491b      	ldr	r1, [pc, #108]	@ (800b9e0 <OLED_ClearPoint+0x9c>)
 800b972:	00d2      	lsls	r2, r2, #3
 800b974:	440a      	add	r2, r1
 800b976:	4413      	add	r3, r2
 800b978:	7819      	ldrb	r1, [r3, #0]
 800b97a:	79fa      	ldrb	r2, [r7, #7]
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	43c9      	mvns	r1, r1
 800b980:	b2c8      	uxtb	r0, r1
 800b982:	4917      	ldr	r1, [pc, #92]	@ (800b9e0 <OLED_ClearPoint+0x9c>)
 800b984:	00d2      	lsls	r2, r2, #3
 800b986:	440a      	add	r2, r1
 800b988:	4413      	add	r3, r2
 800b98a:	4602      	mov	r2, r0
 800b98c:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800b98e:	79fa      	ldrb	r2, [r7, #7]
 800b990:	7bfb      	ldrb	r3, [r7, #15]
 800b992:	4913      	ldr	r1, [pc, #76]	@ (800b9e0 <OLED_ClearPoint+0x9c>)
 800b994:	00d2      	lsls	r2, r2, #3
 800b996:	440a      	add	r2, r1
 800b998:	4413      	add	r3, r2
 800b99a:	7818      	ldrb	r0, [r3, #0]
 800b99c:	79fa      	ldrb	r2, [r7, #7]
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
 800b9a0:	7b79      	ldrb	r1, [r7, #13]
 800b9a2:	4301      	orrs	r1, r0
 800b9a4:	b2c8      	uxtb	r0, r1
 800b9a6:	490e      	ldr	r1, [pc, #56]	@ (800b9e0 <OLED_ClearPoint+0x9c>)
 800b9a8:	00d2      	lsls	r2, r2, #3
 800b9aa:	440a      	add	r2, r1
 800b9ac:	4413      	add	r3, r2
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800b9b2:	79fa      	ldrb	r2, [r7, #7]
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
 800b9b6:	490a      	ldr	r1, [pc, #40]	@ (800b9e0 <OLED_ClearPoint+0x9c>)
 800b9b8:	00d2      	lsls	r2, r2, #3
 800b9ba:	440a      	add	r2, r1
 800b9bc:	4413      	add	r3, r2
 800b9be:	7819      	ldrb	r1, [r3, #0]
 800b9c0:	79fa      	ldrb	r2, [r7, #7]
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	43c9      	mvns	r1, r1
 800b9c6:	b2c8      	uxtb	r0, r1
 800b9c8:	4905      	ldr	r1, [pc, #20]	@ (800b9e0 <OLED_ClearPoint+0x9c>)
 800b9ca:	00d2      	lsls	r2, r2, #3
 800b9cc:	440a      	add	r2, r1
 800b9ce:	4413      	add	r3, r2
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	701a      	strb	r2, [r3, #0]
}
 800b9d4:	bf00      	nop
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	240002f0 	.word	0x240002f0

0800b9e4 <OLED_ShowChar>:
// x:0~127
// y:0~63
// size:选择字体 12/16/24
// 取模方式 逐列式
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800b9e4:	b590      	push	{r4, r7, lr}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	4608      	mov	r0, r1
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	4623      	mov	r3, r4
 800b9f4:	71fb      	strb	r3, [r7, #7]
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	71bb      	strb	r3, [r7, #6]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	717b      	strb	r3, [r7, #5]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800ba02:	79bb      	ldrb	r3, [r7, #6]
 800ba04:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800ba06:	793b      	ldrb	r3, [r7, #4]
 800ba08:	08db      	lsrs	r3, r3, #3
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	793b      	ldrb	r3, [r7, #4]
 800ba10:	f003 0307 	and.w	r3, r3, #7
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bf14      	ite	ne
 800ba1a:	2301      	movne	r3, #1
 800ba1c:	2300      	moveq	r3, #0
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	4413      	add	r3, r2
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	793b      	ldrb	r3, [r7, #4]
 800ba26:	085b      	lsrs	r3, r3, #1
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	fb12 f303 	smulbb	r3, r2, r3
 800ba2e:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800ba30:	797b      	ldrb	r3, [r7, #5]
 800ba32:	3b20      	subs	r3, #32
 800ba34:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]
 800ba3a:	e057      	b.n	800baec <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800ba3c:	793b      	ldrb	r3, [r7, #4]
 800ba3e:	2b0c      	cmp	r3, #12
 800ba40:	d10b      	bne.n	800ba5a <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800ba42:	7aba      	ldrb	r2, [r7, #10]
 800ba44:	7bf9      	ldrb	r1, [r7, #15]
 800ba46:	482e      	ldr	r0, [pc, #184]	@ (800bb00 <OLED_ShowChar+0x11c>)
 800ba48:	4613      	mov	r3, r2
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4403      	add	r3, r0
 800ba52:	440b      	add	r3, r1
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	737b      	strb	r3, [r7, #13]
 800ba58:	e019      	b.n	800ba8e <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800ba5a:	793b      	ldrb	r3, [r7, #4]
 800ba5c:	2b10      	cmp	r3, #16
 800ba5e:	d108      	bne.n	800ba72 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800ba60:	7aba      	ldrb	r2, [r7, #10]
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
 800ba64:	4927      	ldr	r1, [pc, #156]	@ (800bb04 <OLED_ShowChar+0x120>)
 800ba66:	0112      	lsls	r2, r2, #4
 800ba68:	440a      	add	r2, r1
 800ba6a:	4413      	add	r3, r2
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	737b      	strb	r3, [r7, #13]
 800ba70:	e00d      	b.n	800ba8e <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800ba72:	793b      	ldrb	r3, [r7, #4]
 800ba74:	2b18      	cmp	r3, #24
 800ba76:	d13e      	bne.n	800baf6 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800ba78:	7aba      	ldrb	r2, [r7, #10]
 800ba7a:	7bf9      	ldrb	r1, [r7, #15]
 800ba7c:	4822      	ldr	r0, [pc, #136]	@ (800bb08 <OLED_ShowChar+0x124>)
 800ba7e:	4613      	mov	r3, r2
 800ba80:	00db      	lsls	r3, r3, #3
 800ba82:	4413      	add	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4403      	add	r3, r0
 800ba88:	440b      	add	r3, r1
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73bb      	strb	r3, [r7, #14]
 800ba92:	e025      	b.n	800bae0 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800ba94:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	da06      	bge.n	800baaa <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800ba9c:	79ba      	ldrb	r2, [r7, #6]
 800ba9e:	79fb      	ldrb	r3, [r7, #7]
 800baa0:	4611      	mov	r1, r2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff ff20 	bl	800b8e8 <OLED_DrawPoint>
 800baa8:	e005      	b.n	800bab6 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800baaa:	79ba      	ldrb	r2, [r7, #6]
 800baac:	79fb      	ldrb	r3, [r7, #7]
 800baae:	4611      	mov	r1, r2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7ff ff47 	bl	800b944 <OLED_ClearPoint>
			temp <<= 1;
 800bab6:	7b7b      	ldrb	r3, [r7, #13]
 800bab8:	005b      	lsls	r3, r3, #1
 800baba:	737b      	strb	r3, [r7, #13]
			y++;
 800babc:	79bb      	ldrb	r3, [r7, #6]
 800babe:	3301      	adds	r3, #1
 800bac0:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800bac2:	79ba      	ldrb	r2, [r7, #6]
 800bac4:	7b3b      	ldrb	r3, [r7, #12]
 800bac6:	1ad2      	subs	r2, r2, r3
 800bac8:	793b      	ldrb	r3, [r7, #4]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d105      	bne.n	800bada <OLED_ShowChar+0xf6>
			{
				y = y0;
 800bace:	7b3b      	ldrb	r3, [r7, #12]
 800bad0:	71bb      	strb	r3, [r7, #6]
				x++;
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	3301      	adds	r3, #1
 800bad6:	71fb      	strb	r3, [r7, #7]
				break;
 800bad8:	e005      	b.n	800bae6 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	3301      	adds	r3, #1
 800bade:	73bb      	strb	r3, [r7, #14]
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	2b07      	cmp	r3, #7
 800bae4:	d9d6      	bls.n	800ba94 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
 800bae8:	3301      	adds	r3, #1
 800baea:	73fb      	strb	r3, [r7, #15]
 800baec:	7bfa      	ldrb	r2, [r7, #15]
 800baee:	7afb      	ldrb	r3, [r7, #11]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d3a3      	bcc.n	800ba3c <OLED_ShowChar+0x58>
 800baf4:	e000      	b.n	800baf8 <OLED_ShowChar+0x114>
			return;
 800baf6:	bf00      	nop
			}
		}
	}
}
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd90      	pop	{r4, r7, pc}
 800bafe:	bf00      	nop
 800bb00:	08011d98 	.word	0x08011d98
 800bb04:	0801220c 	.word	0x0801220c
 800bb08:	080127fc 	.word	0x080127fc

0800bb0c <OLED_ShowString>:
// 显示字符串
// x,y:起点坐标
// size1:字体大小
//*chr:字符串起始地址
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	603a      	str	r2, [r7, #0]
 800bb14:	461a      	mov	r2, r3
 800bb16:	4603      	mov	r3, r0
 800bb18:	71fb      	strb	r3, [r7, #7]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	71bb      	strb	r3, [r7, #6]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800bb22:	e01b      	b.n	800bb5c <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781a      	ldrb	r2, [r3, #0]
 800bb28:	797b      	ldrb	r3, [r7, #5]
 800bb2a:	79b9      	ldrb	r1, [r7, #6]
 800bb2c:	79f8      	ldrb	r0, [r7, #7]
 800bb2e:	f7ff ff59 	bl	800b9e4 <OLED_ShowChar>
		x += size1 / 2;
 800bb32:	797b      	ldrb	r3, [r7, #5]
 800bb34:	085b      	lsrs	r3, r3, #1
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	79fb      	ldrb	r3, [r7, #7]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800bb3e:	79fa      	ldrb	r2, [r7, #7]
 800bb40:	797b      	ldrb	r3, [r7, #5]
 800bb42:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800bb46:	429a      	cmp	r2, r3
 800bb48:	dd05      	ble.n	800bb56 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800bb4a:	2302      	movs	r3, #2
 800bb4c:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800bb4e:	79ba      	ldrb	r2, [r7, #6]
 800bb50:	797b      	ldrb	r3, [r7, #5]
 800bb52:	4413      	add	r3, r2
 800bb54:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	2b1f      	cmp	r3, #31
 800bb62:	d903      	bls.n	800bb6c <OLED_ShowString+0x60>
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2b7e      	cmp	r3, #126	@ 0x7e
 800bb6a:	d9db      	bls.n	800bb24 <OLED_ShowString+0x18>
	}
}
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <OLED_Init>:
	OLED_ShowString(2, 2, str, 12);
	OLED_Refresh();
}
// OLED的初始化
void OLED_Init(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800bb78:	2200      	movs	r2, #0
 800bb7a:	2120      	movs	r1, #32
 800bb7c:	483f      	ldr	r0, [pc, #252]	@ (800bc7c <OLED_Init+0x108>)
 800bb7e:	f7f5 fa2d 	bl	8000fdc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800bb82:	20c8      	movs	r0, #200	@ 0xc8
 800bb84:	f7f4 fc8a 	bl	800049c <HAL_Delay>
	OLED_RES_Set();
 800bb88:	2201      	movs	r2, #1
 800bb8a:	2120      	movs	r1, #32
 800bb8c:	483b      	ldr	r0, [pc, #236]	@ (800bc7c <OLED_Init+0x108>)
 800bb8e:	f7f5 fa25 	bl	8000fdc <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800bb92:	2100      	movs	r1, #0
 800bb94:	20ae      	movs	r0, #174	@ 0xae
 800bb96:	f7ff fe11 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f7ff fe0d 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800bba2:	2100      	movs	r1, #0
 800bba4:	2010      	movs	r0, #16
 800bba6:	f7ff fe09 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800bbaa:	2100      	movs	r1, #0
 800bbac:	2040      	movs	r0, #64	@ 0x40
 800bbae:	f7ff fe05 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	2081      	movs	r0, #129	@ 0x81
 800bbb6:	f7ff fe01 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800bbba:	2100      	movs	r1, #0
 800bbbc:	20cf      	movs	r0, #207	@ 0xcf
 800bbbe:	f7ff fdfd 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	20a1      	movs	r0, #161	@ 0xa1
 800bbc6:	f7ff fdf9 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800bbca:	2100      	movs	r1, #0
 800bbcc:	20c8      	movs	r0, #200	@ 0xc8
 800bbce:	f7ff fdf5 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	20a6      	movs	r0, #166	@ 0xa6
 800bbd6:	f7ff fdf1 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800bbda:	2100      	movs	r1, #0
 800bbdc:	20a8      	movs	r0, #168	@ 0xa8
 800bbde:	f7ff fded 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	203f      	movs	r0, #63	@ 0x3f
 800bbe6:	f7ff fde9 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800bbea:	2100      	movs	r1, #0
 800bbec:	20d3      	movs	r0, #211	@ 0xd3
 800bbee:	f7ff fde5 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	f7ff fde1 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	20d5      	movs	r0, #213	@ 0xd5
 800bbfe:	f7ff fddd 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 800bc02:	2100      	movs	r1, #0
 800bc04:	2080      	movs	r0, #128	@ 0x80
 800bc06:	f7ff fdd9 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	20d9      	movs	r0, #217	@ 0xd9
 800bc0e:	f7ff fdd5 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800bc12:	2100      	movs	r1, #0
 800bc14:	20f1      	movs	r0, #241	@ 0xf1
 800bc16:	f7ff fdd1 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	20da      	movs	r0, #218	@ 0xda
 800bc1e:	f7ff fdcd 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800bc22:	2100      	movs	r1, #0
 800bc24:	2012      	movs	r0, #18
 800bc26:	f7ff fdc9 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	20db      	movs	r0, #219	@ 0xdb
 800bc2e:	f7ff fdc5 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 800bc32:	2100      	movs	r1, #0
 800bc34:	2040      	movs	r0, #64	@ 0x40
 800bc36:	f7ff fdc1 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	2020      	movs	r0, #32
 800bc3e:	f7ff fdbd 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 800bc42:	2100      	movs	r1, #0
 800bc44:	2002      	movs	r0, #2
 800bc46:	f7ff fdb9 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	208d      	movs	r0, #141	@ 0x8d
 800bc4e:	f7ff fdb5 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 800bc52:	2100      	movs	r1, #0
 800bc54:	2014      	movs	r0, #20
 800bc56:	f7ff fdb1 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	20a4      	movs	r0, #164	@ 0xa4
 800bc5e:	f7ff fdad 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 800bc62:	2100      	movs	r1, #0
 800bc64:	20a6      	movs	r0, #166	@ 0xa6
 800bc66:	f7ff fda9 	bl	800b7bc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	20af      	movs	r0, #175	@ 0xaf
 800bc6e:	f7ff fda5 	bl	800b7bc <OLED_WR_Byte>
	OLED_Clear();
 800bc72:	f7ff fe13 	bl	800b89c <OLED_Clear>
}
 800bc76:	bf00      	nop
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	58020800 	.word	0x58020800

0800bc80 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 800bc80:	b480      	push	{r7}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6178      	str	r0, [r7, #20]
 800bc88:	ed87 0a04 	vstr	s0, [r7, #16]
 800bc8c:	edc7 0a03 	vstr	s1, [r7, #12]
 800bc90:	ed87 1a02 	vstr	s2, [r7, #8]
 800bc94:	edc7 1a01 	vstr	s3, [r7, #4]
 800bc98:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f04f 0200 	mov.w	r2, #0
 800bcc0:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f04f 0200 	mov.w	r2, #0
 800bcd0:	615a      	str	r2, [r3, #20]
}
 800bcd2:	bf00      	nop
 800bcd4:	371c      	adds	r7, #28
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 800bcde:	b480      	push	{r7}
 800bce0:	b085      	sub	sp, #20
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	60f8      	str	r0, [r7, #12]
 800bce6:	ed87 0a02 	vstr	s0, [r7, #8]
 800bcea:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 800bcee:	ed97 7a02 	vldr	s14, [r7, #8]
 800bcf2:	edd7 7a01 	vldr	s15, [r7, #4]
 800bcf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	ed93 7a06 	vldr	s14, [r3, #24]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	edd3 6a00 	vldr	s13, [r3]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	ed93 6a03 	vldr	s12, [r3, #12]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	edd3 7a04 	vldr	s15, [r3, #16]
 800bd18:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bd1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	ed93 6a01 	vldr	s12, [r3, #4]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	edd3 7a03 	vldr	s15, [r3, #12]
 800bd2c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bd30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	ed93 6a02 	vldr	s12, [r3, #8]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	edd3 5a03 	vldr	s11, [r3, #12]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	edd3 7a04 	vldr	s15, [r3, #16]
 800bd46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd4a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	edd3 7a05 	vldr	s15, [r3, #20]
 800bd54:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800bd58:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bd5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	691a      	ldr	r2, [r3, #16]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	ed93 7a06 	vldr	s14, [r3, #24]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	edd3 7a07 	vldr	s15, [r3, #28]
 800bd86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd8e:	dd04      	ble.n	800bd9a <pid+0xbc>
		pid->out = pid->Max;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	69da      	ldr	r2, [r3, #28]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 800bd98:	e00f      	b.n	800bdba <pid+0xdc>
	else if (pid->out < pid->Min)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	ed93 7a06 	vldr	s14, [r3, #24]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	edd3 7a08 	vldr	s15, [r3, #32]
 800bda6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdae:	d400      	bmi.n	800bdb2 <pid+0xd4>
}
 800bdb0:	e003      	b.n	800bdba <pid+0xdc>
		pid->out = pid->Min;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6a1a      	ldr	r2, [r3, #32]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	619a      	str	r2, [r3, #24]
}
 800bdba:	bf00      	nop
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
	...

0800bdc8 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V *signal, float f, uint16_t F, float Umax)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	ed87 0a02 	vstr	s0, [r7, #8]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	edc7 0a00 	vstr	s1, [r7]
 800bdda:	80fb      	strh	r3, [r7, #6]
    // 初始化赋值
    signal->input[0] = 0.f;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f04f 0200 	mov.w	r2, #0
 800bde2:	601a      	str	r2, [r3, #0]
    signal->input[1] = 0.f;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f04f 0200 	mov.w	r2, #0
 800bdea:	605a      	str	r2, [r3, #4]
    signal->input[2] = 0.f;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f04f 0200 	mov.w	r2, #0
 800bdf2:	609a      	str	r2, [r3, #8]

    signal->sogi->a[1] = 0.f;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdf8:	f04f 0200 	mov.w	r2, #0
 800bdfc:	605a      	str	r2, [r3, #4]
    signal->sogi->a[2] = 0.f;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	609a      	str	r2, [r3, #8]
    signal->sogi->b[1] = 0.f;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be0c:	f04f 0200 	mov.w	r2, #0
 800be10:	611a      	str	r2, [r3, #16]
    signal->sogi->b[2] = 0.f;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be16:	f04f 0200 	mov.w	r2, #0
 800be1a:	615a      	str	r2, [r3, #20]

    signal->theta = 0.f;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f04f 0200 	mov.w	r2, #0
 800be22:	619a      	str	r2, [r3, #24]
    signal->omiga0 = 2 * PI * f; // f典型值50
 800be24:	edd7 7a02 	vldr	s15, [r7, #8]
 800be28:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 800c008 <pll_Init_V+0x240>
 800be2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	edc3 7a08 	vstr	s15, [r3, #32]
    signal->Ts = 1.f / F;        // F典型值20000
 800be36:	88fb      	ldrh	r3, [r7, #6]
 800be38:	ee07 3a90 	vmov	s15, r3
 800be3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->phase = 0.f;         // 设定相位差
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f04f 0200 	mov.w	r2, #0
 800be54:	61da      	str	r2, [r3, #28]
    // 初始化pid参数
    float ki = signal->omiga0 * signal->omiga0 / Umax;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	ed93 7a08 	vldr	s14, [r3, #32]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	edd3 7a08 	vldr	s15, [r3, #32]
 800be62:	ee67 6a27 	vmul.f32	s13, s14, s15
 800be66:	ed97 7a00 	vldr	s14, [r7]
 800be6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be6e:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(Umax * ki) / Umax;
 800be72:	ed97 7a00 	vldr	s14, [r7]
 800be76:	edd7 7a05 	vldr	s15, [r7, #20]
 800be7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800be82:	eeb0 0b47 	vmov.f64	d0, d7
 800be86:	f005 fdcb 	bl	8011a20 <sqrt>
 800be8a:	eeb0 7b40 	vmov.f64	d7, d0
 800be8e:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 800c000 <pll_Init_V+0x238>
 800be92:	ee27 5b06 	vmul.f64	d5, d7, d6
 800be96:	edd7 7a00 	vldr	s15, [r7]
 800be9a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800be9e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bea2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bea6:	edc7 7a04 	vstr	s15, [r7, #16]

    pid_Init(signal->pid, kp, ki, 0, 50 * PI, -20 * PI);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beae:	ed9f 2a57 	vldr	s4, [pc, #348]	@ 800c00c <pll_Init_V+0x244>
 800beb2:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800c010 <pll_Init_V+0x248>
 800beb6:	ed9f 1a57 	vldr	s2, [pc, #348]	@ 800c014 <pll_Init_V+0x24c>
 800beba:	edd7 0a05 	vldr	s1, [r7, #20]
 800bebe:	ed97 0a04 	vldr	s0, [r7, #16]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff fedc 	bl	800bc80 <pid_Init>
    // 计算sogi中间量
    signal->sogi->k = 1.414f;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800becc:	4a52      	ldr	r2, [pc, #328]	@ (800c018 <pll_Init_V+0x250>)
 800bece:	619a      	str	r2, [r3, #24]
    signal->sogi->lamda = 0.5f * signal->omiga0 * signal->Ts;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	edd3 7a08 	vldr	s15, [r3, #32]
 800bed6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800beda:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beec:	edc3 7a07 	vstr	s15, [r3, #28]
    signal->sogi->x = 2.f * signal->sogi->k * signal->omiga0 * signal->Ts;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bef4:	edd3 7a06 	vldr	s15, [r3, #24]
 800bef8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	edd3 7a08 	vldr	s15, [r3, #32]
 800bf02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf14:	edc3 7a08 	vstr	s15, [r3, #32]
    signal->sogi->y = signal->omiga0 * signal->Ts * signal->omiga0 * signal->Ts;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	ed93 7a08 	vldr	s14, [r3, #32]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	edd3 7a08 	vldr	s15, [r3, #32]
 800bf2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf40:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->sogi->b0 = signal->sogi->x / (signal->sogi->x + signal->sogi->y + 4);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf48:	edd3 6a08 	vldr	s13, [r3, #32]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf50:	ed93 7a08 	vldr	s14, [r3, #32]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf58:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf60:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800bf64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf70:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    signal->sogi->a1 = (8 - 2.f * signal->sogi->y) / (signal->sogi->x + signal->sogi->y + 4);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf78:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bf80:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800bf84:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf8c:	ed93 7a08 	vldr	s14, [r3, #32]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf94:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf9c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800bfa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfac:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    signal->sogi->a2 = (signal->sogi->x - signal->sogi->y - 4) / (signal->sogi->x + signal->sogi->y + 4);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfb4:	ed93 7a08 	vldr	s14, [r3, #32]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfbc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bfc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfc4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800bfc8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfd0:	ed93 7a08 	vldr	s14, [r3, #32]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfd8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bfdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfe0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800bfe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bff0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800bff4:	bf00      	nop
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	f3af 8000 	nop.w
 800c000:	667f3bcd 	.word	0x667f3bcd
 800c004:	3ff6a09e 	.word	0x3ff6a09e
 800c008:	40c90fdb 	.word	0x40c90fdb
 800c00c:	c27b53d2 	.word	0xc27b53d2
 800c010:	431d1463 	.word	0x431d1463
 800c014:	00000000 	.word	0x00000000
 800c018:	3fb4fdf4 	.word	0x3fb4fdf4

0800c01c <pll_Init_I>:
 * @param pr_kr PR控制器kr参数
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I *signal, float f, uint16_t F, float pr_kp, float pr_kr, float pi_kp, float pi_ki)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b088      	sub	sp, #32
 800c020:	af00      	add	r7, sp, #0
 800c022:	61f8      	str	r0, [r7, #28]
 800c024:	ed87 0a06 	vstr	s0, [r7, #24]
 800c028:	460b      	mov	r3, r1
 800c02a:	edc7 0a04 	vstr	s1, [r7, #16]
 800c02e:	ed87 1a03 	vstr	s2, [r7, #12]
 800c032:	edc7 1a02 	vstr	s3, [r7, #8]
 800c036:	ed87 2a01 	vstr	s4, [r7, #4]
 800c03a:	82fb      	strh	r3, [r7, #22]
    // 初始化赋值
    signal->input[0] = 0.f;
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	f04f 0200 	mov.w	r2, #0
 800c042:	601a      	str	r2, [r3, #0]
    signal->input[1] = 0.f;
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	f04f 0200 	mov.w	r2, #0
 800c04a:	605a      	str	r2, [r3, #4]
    signal->input[2] = 0.f;
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	f04f 0200 	mov.w	r2, #0
 800c052:	609a      	str	r2, [r3, #8]

    signal->sogi->a[1] = 0.f;
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c058:	f04f 0200 	mov.w	r2, #0
 800c05c:	605a      	str	r2, [r3, #4]
    signal->sogi->a[2] = 0.f;
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c062:	f04f 0200 	mov.w	r2, #0
 800c066:	609a      	str	r2, [r3, #8]
    signal->sogi->b[1] = 0.f;
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c06c:	f04f 0200 	mov.w	r2, #0
 800c070:	611a      	str	r2, [r3, #16]
    signal->sogi->b[2] = 0.f;
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c076:	f04f 0200 	mov.w	r2, #0
 800c07a:	615a      	str	r2, [r3, #20]

    signal->omiga0 = 2.f * PI * f;    // f典型值50
 800c07c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c080:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 800c3b4 <pll_Init_I+0x398>
 800c084:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	edc3 7a06 	vstr	s15, [r3, #24]
    signal->omigaC = 2.f * PI * 0.5f; // 带宽2*pi*带宽
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	4ac9      	ldr	r2, [pc, #804]	@ (800c3b8 <pll_Init_I+0x39c>)
 800c092:	61da      	str	r2, [r3, #28]
    signal->Ts = 1.f / F;             // F典型值20000
 800c094:	8afb      	ldrh	r3, [r7, #22]
 800c096:	ee07 3a90 	vmov	s15, r3
 800c09a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c09e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	edc3 7a08 	vstr	s15, [r3, #32]
    // 初始化pr参数
    signal->pr->out[1] = 0.f;
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0b0:	f04f 0200 	mov.w	r2, #0
 800c0b4:	60da      	str	r2, [r3, #12]
    signal->pr->out[2] = 0.f;
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0ba:	f04f 0200 	mov.w	r2, #0
 800c0be:	611a      	str	r2, [r3, #16]
    signal->pr->err[1] = 0.f;
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0c4:	f04f 0200 	mov.w	r2, #0
 800c0c8:	619a      	str	r2, [r3, #24]
    signal->pr->err[2] = 0.f;
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0ce:	f04f 0200 	mov.w	r2, #0
 800c0d2:	61da      	str	r2, [r3, #28]
    // 初始化pid参数
    pid_Init(signal->pid, pi_kp, pi_ki, 0, 0.f, 0.f);
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0d8:	ed9f 2ab8 	vldr	s4, [pc, #736]	@ 800c3bc <pll_Init_I+0x3a0>
 800c0dc:	eddf 1ab7 	vldr	s3, [pc, #732]	@ 800c3bc <pll_Init_I+0x3a0>
 800c0e0:	ed9f 1ab6 	vldr	s2, [pc, #728]	@ 800c3bc <pll_Init_I+0x3a0>
 800c0e4:	edd7 0a01 	vldr	s1, [r7, #4]
 800c0e8:	ed97 0a02 	vldr	s0, [r7, #8]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7ff fdc7 	bl	800bc80 <pid_Init>
    // 计算pr中间量
    signal->pr->a0 = signal->omiga0 * signal->omiga0 * signal->Ts * signal->Ts + 4 * signal->omigaC * signal->Ts + 4;
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	ed93 7a06 	vldr	s14, [r3, #24]
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	edd3 7a06 	vldr	s15, [r3, #24]
 800c0fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	edd3 7a08 	vldr	s15, [r3, #32]
 800c108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c112:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	edd3 7a07 	vldr	s15, [r3, #28]
 800c11c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c120:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	edd3 7a08 	vldr	s15, [r3, #32]
 800c12a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c12e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c136:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c13a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c13e:	edc3 7a08 	vstr	s15, [r3, #32]
    signal->pr->a1 = (2 * signal->omiga0 * signal->omiga0 * signal->Ts * signal->Ts - 8) / signal->pr->a0;
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	edd3 7a06 	vldr	s15, [r3, #24]
 800c148:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c152:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	edd3 7a08 	vldr	s15, [r3, #32]
 800c15c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	edd3 7a08 	vldr	s15, [r3, #32]
 800c166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800c16e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c176:	ed93 7a08 	vldr	s14, [r3, #32]
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c182:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->pr->a2 = (signal->omiga0 * signal->omiga0 * signal->Ts * signal->Ts - 4 * signal->omigaC * signal->Ts + 4) / signal->pr->a0;
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	ed93 7a06 	vldr	s14, [r3, #24]
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c192:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	edd3 7a08 	vldr	s15, [r3, #32]
 800c19c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	edd3 7a08 	vldr	s15, [r3, #32]
 800c1a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	edd3 7a07 	vldr	s15, [r3, #28]
 800c1b0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c1b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	edd3 7a08 	vldr	s15, [r3, #32]
 800c1be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1c6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c1ca:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1d2:	ed93 7a08 	vldr	s14, [r3, #32]
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1de:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    signal->pr->b0 = (pr_kp * (signal->omiga0 * signal->omiga0 * signal->Ts * signal->Ts + 4 * signal->omigaC * signal->Ts + 4) + 4 * pr_kr * signal->omigaC * signal->Ts) / signal->pr->a0;
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	ed93 7a06 	vldr	s14, [r3, #24]
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	edd3 7a06 	vldr	s15, [r3, #24]
 800c1ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	edd3 7a08 	vldr	s15, [r3, #32]
 800c1f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	edd3 7a08 	vldr	s15, [r3, #32]
 800c202:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	edd3 7a07 	vldr	s15, [r3, #28]
 800c20c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c210:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	edd3 7a08 	vldr	s15, [r3, #32]
 800c21a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c21e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c222:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c22a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c22e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c232:	edd7 7a03 	vldr	s15, [r7, #12]
 800c236:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c23a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	edd3 7a07 	vldr	s15, [r3, #28]
 800c244:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c24e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c252:	ee77 6a27 	vadd.f32	s13, s14, s15
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c25a:	ed93 7a08 	vldr	s14, [r3, #32]
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c266:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    signal->pr->b1 = (pr_kp * (2 * signal->omiga0 * signal->omiga0 * signal->Ts * signal->Ts - 8)) / signal->pr->a0;
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c270:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	edd3 7a06 	vldr	s15, [r3, #24]
 800c27a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	edd3 7a08 	vldr	s15, [r3, #32]
 800c284:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c292:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800c296:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c29a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c29e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2a6:	ed93 7a08 	vldr	s14, [r3, #32]
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2b2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    signal->pr->b2 = (pr_kp * (signal->omiga0 * signal->omiga0 * signal->Ts * signal->Ts - 4 * signal->omigaC * signal->Ts + 4) - 4 * pr_kr * signal->omigaC * signal->Ts) / signal->pr->a0;
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	edd3 7a06 	vldr	s15, [r3, #24]
 800c2c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	edd3 7a08 	vldr	s15, [r3, #32]
 800c2cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	edd3 7a08 	vldr	s15, [r3, #32]
 800c2d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	edd3 7a07 	vldr	s15, [r3, #28]
 800c2e0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c2e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	edd3 7a08 	vldr	s15, [r3, #32]
 800c2ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2f6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c2fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2fe:	edd7 7a04 	vldr	s15, [r7, #16]
 800c302:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c306:	edd7 7a03 	vldr	s15, [r7, #12]
 800c30a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c30e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	edd3 7a07 	vldr	s15, [r3, #28]
 800c318:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c326:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c32e:	ed93 7a08 	vldr	s14, [r3, #32]
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c33a:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    // 计算sogi中间量
    signal->sogi->k = 1.414f; // 阻尼比典型值1.414
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c342:	4a1f      	ldr	r2, [pc, #124]	@ (800c3c0 <pll_Init_I+0x3a4>)
 800c344:	619a      	str	r2, [r3, #24]
    signal->sogi->lamda = 0.5f * signal->omiga0 * signal->Ts;
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	edd3 7a06 	vldr	s15, [r3, #24]
 800c34c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c350:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	edd3 7a08 	vldr	s15, [r3, #32]
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c362:	edc3 7a07 	vstr	s15, [r3, #28]
    signal->sogi->x = 2.f * signal->sogi->k * signal->omiga0 * signal->Ts;
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c36a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c36e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	edd3 7a06 	vldr	s15, [r3, #24]
 800c378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c38a:	edc3 7a08 	vstr	s15, [r3, #32]
    signal->sogi->y = signal->omiga0 * signal->Ts * signal->omiga0 * signal->Ts;
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	ed93 7a06 	vldr	s14, [r3, #24]
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	edd3 7a08 	vldr	s15, [r3, #32]
 800c39a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	edd3 7a06 	vldr	s15, [r3, #24]
 800c3a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	edd3 7a08 	vldr	s15, [r3, #32]
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3b2:	e007      	b.n	800c3c4 <pll_Init_I+0x3a8>
 800c3b4:	40c90fdb 	.word	0x40c90fdb
 800c3b8:	40490fdb 	.word	0x40490fdb
 800c3bc:	00000000 	.word	0x00000000
 800c3c0:	3fb4fdf4 	.word	0x3fb4fdf4
 800c3c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->sogi->b0 = signal->sogi->x / (signal->sogi->x + signal->sogi->y + 4);
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3d0:	edd3 6a08 	vldr	s13, [r3, #32]
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3d8:	ed93 7a08 	vldr	s14, [r3, #32]
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3e0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c3e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3e8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c3ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3f8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    signal->sogi->a1 = (8 - 2.f * signal->sogi->y) / (signal->sogi->x + signal->sogi->y + 4);
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c400:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c404:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c408:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800c40c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c414:	ed93 7a08 	vldr	s14, [r3, #32]
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c41c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c420:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c424:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c428:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c434:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    signal->sogi->a2 = (signal->sogi->x - signal->sogi->y - 4) / (signal->sogi->x + signal->sogi->y + 4);
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c43c:	ed93 7a08 	vldr	s14, [r3, #32]
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c444:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c44c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c450:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c458:	ed93 7a08 	vldr	s14, [r3, #32]
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c460:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c464:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c468:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c46c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c478:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800c47c:	bf00      	nop
 800c47e:	3720      	adds	r7, #32
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	0000      	movs	r0, r0
	...

0800c488 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 800c488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48c:	ed2d 8b02 	vpush	{d8}
 800c490:	b088      	sub	sp, #32
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_V->input, signal_V->sogi);
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c49c:	4619      	mov	r1, r3
 800c49e:	4610      	mov	r0, r2
 800c4a0:	f000 f9a0 	bl	800c7e4 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->sogi->a[0], signal_V->sogi->b[0], &signal_V->park_d, &signal_V->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4a8:	f8d3 8000 	ldr.w	r8, [r3]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4b0:	68de      	ldr	r6, [r3, #12]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f103 0510 	add.w	r5, r3, #16
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f103 0414 	add.w	r4, r3, #20
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	edd3 7a06 	vldr	s15, [r3, #24]
 800c4c4:	eeb0 0a67 	vmov.f32	s0, s15
 800c4c8:	f002 fc46 	bl	800ed58 <arm_sin_f32>
 800c4cc:	eeb0 8a40 	vmov.f32	s16, s0
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	edd3 7a06 	vldr	s15, [r3, #24]
 800c4d6:	eeb0 0a67 	vmov.f32	s0, s15
 800c4da:	f002 fc83 	bl	800ede4 <arm_cos_f32>
 800c4de:	eef0 7a40 	vmov.f32	s15, s0
 800c4e2:	f8c7 801c 	str.w	r8, [r7, #28]
 800c4e6:	61be      	str	r6, [r7, #24]
 800c4e8:	617d      	str	r5, [r7, #20]
 800c4ea:	613c      	str	r4, [r7, #16]
 800c4ec:	ed87 8a03 	vstr	s16, [r7, #12]
 800c4f0:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800c4f4:	ed97 7a07 	vldr	s14, [r7, #28]
 800c4f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c4fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c500:	edd7 6a06 	vldr	s13, [r7, #24]
 800c504:	edd7 7a03 	vldr	s15, [r7, #12]
 800c508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c50c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800c516:	edd7 7a07 	vldr	s15, [r7, #28]
 800c51a:	eeb1 7a67 	vneg.f32	s14, s15
 800c51e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c522:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c526:	edd7 6a06 	vldr	s13, [r7, #24]
 800c52a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c52e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c532:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	edc3 7a00 	vstr	s15, [r3]
  }
 800c53c:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->park_q, signal_V->phase);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	edd3 7a05 	vldr	s15, [r3, #20]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	ed93 7a07 	vldr	s14, [r3, #28]
 800c54e:	eef0 0a47 	vmov.f32	s1, s14
 800c552:	eeb0 0a67 	vmov.f32	s0, s15
 800c556:	4610      	mov	r0, r2
 800c558:	f7ff fbc1 	bl	800bcde <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->omiga0) * signal_V->Ts;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	ed93 7a06 	vldr	s14, [r3, #24]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c566:	edd3 6a06 	vldr	s13, [r3, #24]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	edd3 7a08 	vldr	s15, [r3, #32]
 800c570:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c57a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c57e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	edc3 7a06 	vstr	s15, [r3, #24]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c58e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c592:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 800c5c0 <pll_Control_V+0x138>
 800c596:	eeb0 0b47 	vmov.f64	d0, d7
 800c59a:	f005 fa1d 	bl	80119d8 <fmod>
 800c59e:	eeb0 7b40 	vmov.f64	d7, d0
 800c5a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800c5ac:	bf00      	nop
 800c5ae:	3720      	adds	r7, #32
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	ecbd 8b02 	vpop	{d8}
 800c5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5ba:	bf00      	nop
 800c5bc:	f3af 8000 	nop.w
 800c5c0:	60000000 	.word	0x60000000
 800c5c4:	401921fb 	.word	0x401921fb

0800c5c8 <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Udc 直流测采样电压
 * @param Uset 直流设定电压
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Uset, float Udc)
{
 800c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5cc:	ed2d 8b02 	vpush	{d8}
 800c5d0:	b08a      	sub	sp, #40	@ 0x28
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	60f8      	str	r0, [r7, #12]
 800c5d6:	60b9      	str	r1, [r7, #8]
 800c5d8:	ed87 0a01 	vstr	s0, [r7, #4]
 800c5dc:	edc7 0a00 	vstr	s1, [r7]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_I->input, signal_I->sogi);
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	f000 f8fb 	bl	800c7e4 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_I->sogi->a[0], signal_I->sogi->b[0], &signal_I->park_d, &signal_I->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f2:	f8d3 8000 	ldr.w	r8, [r3]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5fa:	68de      	ldr	r6, [r3, #12]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f103 0510 	add.w	r5, r3, #16
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f103 0414 	add.w	r4, r3, #20
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c60e:	eeb0 0a67 	vmov.f32	s0, s15
 800c612:	f002 fba1 	bl	800ed58 <arm_sin_f32>
 800c616:	eeb0 8a40 	vmov.f32	s16, s0
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c620:	eeb0 0a67 	vmov.f32	s0, s15
 800c624:	f002 fbde 	bl	800ede4 <arm_cos_f32>
 800c628:	eef0 7a40 	vmov.f32	s15, s0
 800c62c:	f8c7 8024 	str.w	r8, [r7, #36]	@ 0x24
 800c630:	623e      	str	r6, [r7, #32]
 800c632:	61fd      	str	r5, [r7, #28]
 800c634:	61bc      	str	r4, [r7, #24]
 800c636:	ed87 8a05 	vstr	s16, [r7, #20]
 800c63a:	edc7 7a04 	vstr	s15, [r7, #16]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800c63e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c642:	edd7 7a04 	vldr	s15, [r7, #16]
 800c646:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c64a:	edd7 6a08 	vldr	s13, [r7, #32]
 800c64e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800c660:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c664:	eeb1 7a67 	vneg.f32	s14, s15
 800c668:	edd7 7a05 	vldr	s15, [r7, #20]
 800c66c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c670:	edd7 6a08 	vldr	s13, [r7, #32]
 800c674:	edd7 7a04 	vldr	s15, [r7, #16]
 800c678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c67c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	edc3 7a00 	vstr	s15, [r3]
  }
 800c686:	bf00      	nop
    // 对直流电压进行PI控制
    // pid(signal_I->pid, Uset, Udc); // 电压内环
    // PR控制
    // pll_Pr(signal_I->pr, signal_I->input[0], signal_I->pid->out * arm_cos_f32(signal_V->theta));
    // ! pll_Pr(signal_I->pr, signal_I->input[0], 1.414f * arm_cos_f32(signal_V->theta + 0.2 * PI)); // PF= 1.00
    pll_Pr(signal_I->pr, signal_I->input[0], 1.414f * arm_cos_f32(signal_V->theta + phase_set * PI));
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	ed93 8a00 	vldr	s16, [r3]
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	ed93 7a06 	vldr	s14, [r3, #24]
 800c698:	4b10      	ldr	r3, [pc, #64]	@ (800c6dc <pll_Control_I+0x114>)
 800c69a:	edd3 7a00 	vldr	s15, [r3]
 800c69e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800c6e0 <pll_Control_I+0x118>
 800c6a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c6a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6aa:	eeb0 0a67 	vmov.f32	s0, s15
 800c6ae:	f002 fb99 	bl	800ede4 <arm_cos_f32>
 800c6b2:	eef0 7a40 	vmov.f32	s15, s0
 800c6b6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800c6e4 <pll_Control_I+0x11c>
 800c6ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c6be:	eef0 0a67 	vmov.f32	s1, s15
 800c6c2:	eeb0 0a48 	vmov.f32	s0, s16
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f000 f80e 	bl	800c6e8 <pll_Pr>
}
 800c6cc:	bf00      	nop
 800c6ce:	3728      	adds	r7, #40	@ 0x28
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	ecbd 8b02 	vpop	{d8}
 800c6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6da:	bf00      	nop
 800c6dc:	24000770 	.word	0x24000770
 800c6e0:	40490fdb 	.word	0x40490fdb
 800c6e4:	3fb4fdf4 	.word	0x3fb4fdf4

0800c6e8 <pll_Pr>:
 * @param pr PR控制器指针
 * @param target 目标值
 * @param sample 采样值
 */
void pll_Pr(PR *pr, float target, float sample)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	ed87 0a02 	vstr	s0, [r7, #8]
 800c6f4:	edc7 0a01 	vstr	s1, [r7, #4]
    pr->err[0] = target - sample;
 800c6f8:	ed97 7a02 	vldr	s14, [r7, #8]
 800c6fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c700:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	edc3 7a05 	vstr	s15, [r3, #20]
    pr->out[0] = pr->b0 * pr->err[0] + pr->b1 * pr->err[1] + pr->b2 * pr->err[2] - pr->a1 * pr->out[1] - pr->a2 * pr->out[2];
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	edd3 7a05 	vldr	s15, [r3, #20]
 800c716:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	edd3 7a06 	vldr	s15, [r3, #24]
 800c726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c72a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	edd3 7a07 	vldr	s15, [r3, #28]
 800c73a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c73e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	edd3 7a03 	vldr	s15, [r3, #12]
 800c74e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c752:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	edd3 7a04 	vldr	s15, [r3, #16]
 800c762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	edc3 7a02 	vstr	s15, [r3, #8]
    // 限制调参幅度，防止跑飞
    if (pr->out[0] > COMPARE_MAX)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	edd3 7a02 	vldr	s15, [r3, #8]
 800c776:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800c7d4 <pll_Pr+0xec>
 800c77a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c782:	dd03      	ble.n	800c78c <pll_Pr+0xa4>
        pr->out[0] = COMPARE_MAX;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	4a14      	ldr	r2, [pc, #80]	@ (800c7d8 <pll_Pr+0xf0>)
 800c788:	609a      	str	r2, [r3, #8]
 800c78a:	e00c      	b.n	800c7a6 <pll_Pr+0xbe>
    else if (pr->out[0] < COMPARE_MIN)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	edd3 7a02 	vldr	s15, [r3, #8]
 800c792:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800c7dc <pll_Pr+0xf4>
 800c796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c79e:	d502      	bpl.n	800c7a6 <pll_Pr+0xbe>
        pr->out[0] = COMPARE_MIN;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	4a0f      	ldr	r2, [pc, #60]	@ (800c7e0 <pll_Pr+0xf8>)
 800c7a4:	609a      	str	r2, [r3, #8]

    pr->out[2] = pr->out[1];
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	68da      	ldr	r2, [r3, #12]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	611a      	str	r2, [r3, #16]
    pr->out[1] = pr->out[0];
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	689a      	ldr	r2, [r3, #8]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	60da      	str	r2, [r3, #12]
    pr->err[2] = pr->err[1];
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	699a      	ldr	r2, [r3, #24]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	61da      	str	r2, [r3, #28]
    pr->err[1] = pr->err[0];
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	695a      	ldr	r2, [r3, #20]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	619a      	str	r2, [r3, #24]
}
 800c7c6:	bf00      	nop
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	4628c000 	.word	0x4628c000
 800c7d8:	4628c000 	.word	0x4628c000
 800c7dc:	c628c000 	.word	0xc628c000
 800c7e0:	c628c000 	.word	0xc628c000

0800c7e4 <pll_Sogi>:
 * @brief Sogi变换
 * @param input 输入信号
 * @param sogi sogi指针
 */
void pll_Sogi(float *input, SOGI *sogi)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
    sogi->a[0] = sogi->b0 * input[0] - sogi->b0 * input[2] + sogi->a1 * sogi->a[1] + sogi->a2 * sogi->a[2];
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	edd3 7a00 	vldr	s15, [r3]
 800c7fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3308      	adds	r3, #8
 800c808:	edd3 7a00 	vldr	s15, [r3]
 800c80c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c810:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	edd3 7a01 	vldr	s15, [r3, #4]
 800c820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c824:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	edd3 7a02 	vldr	s15, [r3, #8]
 800c834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	edc3 7a00 	vstr	s15, [r3]
    sogi->b[0] = sogi->lamda * sogi->b0 * (input[0] + 2 * input[1] + input[2]) + sogi->a1 * sogi->b[1] + sogi->a2 * sogi->b[2];
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	ed93 7a07 	vldr	s14, [r3, #28]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c84e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	edd3 6a00 	vldr	s13, [r3]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	3304      	adds	r3, #4
 800c85c:	edd3 7a00 	vldr	s15, [r3]
 800c860:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c864:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	3308      	adds	r3, #8
 800c86c:	edd3 7a00 	vldr	s15, [r3]
 800c870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c874:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	edd3 7a04 	vldr	s15, [r3, #16]
 800c884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	edd3 7a05 	vldr	s15, [r3, #20]
 800c898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c89c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	edc3 7a03 	vstr	s15, [r3, #12]

    input[2] = input[1];
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	3308      	adds	r3, #8
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	6852      	ldr	r2, [r2, #4]
 800c8ae:	601a      	str	r2, [r3, #0]
    input[1] = input[0];
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3304      	adds	r3, #4
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	6812      	ldr	r2, [r2, #0]
 800c8b8:	601a      	str	r2, [r3, #0]
    sogi->a[2] = sogi->a[1];
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	685a      	ldr	r2, [r3, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	609a      	str	r2, [r3, #8]
    sogi->a[1] = sogi->a[0];
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	605a      	str	r2, [r3, #4]
    sogi->b[2] = sogi->b[1];
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	691a      	ldr	r2, [r3, #16]
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	615a      	str	r2, [r3, #20]
    sogi->b[1] = sogi->b[0];
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	68da      	ldr	r2, [r3, #12]
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	611a      	str	r2, [r3, #16]
}
 800c8da:	bf00      	nop
 800c8dc:	370c      	adds	r7, #12
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
	...

0800c8e8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b08a      	sub	sp, #40	@ 0x28
 800c8ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800c8ee:	1d3b      	adds	r3, r7, #4
 800c8f0:	2224      	movs	r2, #36	@ 0x24
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f003 f8d0 	bl	800fa9a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800c8fa:	4b12      	ldr	r3, [pc, #72]	@ (800c944 <MX_DAC1_Init+0x5c>)
 800c8fc:	4a12      	ldr	r2, [pc, #72]	@ (800c948 <MX_DAC1_Init+0x60>)
 800c8fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800c900:	4810      	ldr	r0, [pc, #64]	@ (800c944 <MX_DAC1_Init+0x5c>)
 800c902:	f7f3 ff53 	bl	80007ac <HAL_DAC_Init>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800c90c:	f000 fece 	bl	800d6ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800c910:	2300      	movs	r3, #0
 800c912:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800c914:	2300      	movs	r3, #0
 800c916:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800c918:	2300      	movs	r3, #0
 800c91a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800c91c:	2301      	movs	r3, #1
 800c91e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800c920:	2300      	movs	r3, #0
 800c922:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800c924:	1d3b      	adds	r3, r7, #4
 800c926:	2200      	movs	r2, #0
 800c928:	4619      	mov	r1, r3
 800c92a:	4806      	ldr	r0, [pc, #24]	@ (800c944 <MX_DAC1_Init+0x5c>)
 800c92c:	f7f4 f842 	bl	80009b4 <HAL_DAC_ConfigChannel>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800c936:	f000 feb9 	bl	800d6ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800c93a:	bf00      	nop
 800c93c:	3728      	adds	r7, #40	@ 0x28
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	24000774 	.word	0x24000774
 800c948:	40007400 	.word	0x40007400

0800c94c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b08a      	sub	sp, #40	@ 0x28
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c954:	f107 0314 	add.w	r3, r7, #20
 800c958:	2200      	movs	r2, #0
 800c95a:	601a      	str	r2, [r3, #0]
 800c95c:	605a      	str	r2, [r3, #4]
 800c95e:	609a      	str	r2, [r3, #8]
 800c960:	60da      	str	r2, [r3, #12]
 800c962:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a1c      	ldr	r2, [pc, #112]	@ (800c9dc <HAL_DAC_MspInit+0x90>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d131      	bne.n	800c9d2 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800c96e:	4b1c      	ldr	r3, [pc, #112]	@ (800c9e0 <HAL_DAC_MspInit+0x94>)
 800c970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c974:	4a1a      	ldr	r2, [pc, #104]	@ (800c9e0 <HAL_DAC_MspInit+0x94>)
 800c976:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c97a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800c97e:	4b18      	ldr	r3, [pc, #96]	@ (800c9e0 <HAL_DAC_MspInit+0x94>)
 800c980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c988:	613b      	str	r3, [r7, #16]
 800c98a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c98c:	4b14      	ldr	r3, [pc, #80]	@ (800c9e0 <HAL_DAC_MspInit+0x94>)
 800c98e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c992:	4a13      	ldr	r2, [pc, #76]	@ (800c9e0 <HAL_DAC_MspInit+0x94>)
 800c994:	f043 0301 	orr.w	r3, r3, #1
 800c998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c99c:	4b10      	ldr	r3, [pc, #64]	@ (800c9e0 <HAL_DAC_MspInit+0x94>)
 800c99e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9a2:	f003 0301 	and.w	r3, r3, #1
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c9aa:	2310      	movs	r3, #16
 800c9ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9b6:	f107 0314 	add.w	r3, r7, #20
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	4809      	ldr	r0, [pc, #36]	@ (800c9e4 <HAL_DAC_MspInit+0x98>)
 800c9be:	f7f4 f945 	bl	8000c4c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	210f      	movs	r1, #15
 800c9c6:	2036      	movs	r0, #54	@ 0x36
 800c9c8:	f7f3 fe50 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c9cc:	2036      	movs	r0, #54	@ 0x36
 800c9ce:	f7f3 fe67 	bl	80006a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800c9d2:	bf00      	nop
 800c9d4:	3728      	adds	r7, #40	@ 0x28
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	40007400 	.word	0x40007400
 800c9e0:	58024400 	.word	0x58024400
 800c9e4:	58020000 	.word	0x58020000

0800c9e8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08c      	sub	sp, #48	@ 0x30
 800c9ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9ee:	f107 031c 	add.w	r3, r7, #28
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	605a      	str	r2, [r3, #4]
 800c9f8:	609a      	str	r2, [r3, #8]
 800c9fa:	60da      	str	r2, [r3, #12]
 800c9fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c9fe:	4b79      	ldr	r3, [pc, #484]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca04:	4a77      	ldr	r2, [pc, #476]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca06:	f043 0304 	orr.w	r3, r3, #4
 800ca0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ca0e:	4b75      	ldr	r3, [pc, #468]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca14:	f003 0304 	and.w	r3, r3, #4
 800ca18:	61bb      	str	r3, [r7, #24]
 800ca1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ca1c:	4b71      	ldr	r3, [pc, #452]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca22:	4a70      	ldr	r2, [pc, #448]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ca2c:	4b6d      	ldr	r3, [pc, #436]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca36:	617b      	str	r3, [r7, #20]
 800ca38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca3a:	4b6a      	ldr	r3, [pc, #424]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca40:	4a68      	ldr	r2, [pc, #416]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca42:	f043 0301 	orr.w	r3, r3, #1
 800ca46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ca4a:	4b66      	ldr	r3, [pc, #408]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca50:	f003 0301 	and.w	r3, r3, #1
 800ca54:	613b      	str	r3, [r7, #16]
 800ca56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca58:	4b62      	ldr	r3, [pc, #392]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca5e:	4a61      	ldr	r2, [pc, #388]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca60:	f043 0302 	orr.w	r3, r3, #2
 800ca64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ca68:	4b5e      	ldr	r3, [pc, #376]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca6e:	f003 0302 	and.w	r3, r3, #2
 800ca72:	60fb      	str	r3, [r7, #12]
 800ca74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ca76:	4b5b      	ldr	r3, [pc, #364]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca7c:	4a59      	ldr	r2, [pc, #356]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ca86:	4b57      	ldr	r3, [pc, #348]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca90:	60bb      	str	r3, [r7, #8]
 800ca92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800ca94:	4b53      	ldr	r3, [pc, #332]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca9a:	4a52      	ldr	r2, [pc, #328]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800ca9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800caa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800caa4:	4b4f      	ldr	r3, [pc, #316]	@ (800cbe4 <MX_GPIO_Init+0x1fc>)
 800caa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800caaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caae:	607b      	str	r3, [r7, #4]
 800cab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800cab2:	2200      	movs	r2, #0
 800cab4:	2120      	movs	r1, #32
 800cab6:	484c      	ldr	r0, [pc, #304]	@ (800cbe8 <MX_GPIO_Init+0x200>)
 800cab8:	f7f4 fa90 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800cabc:	2200      	movs	r2, #0
 800cabe:	2102      	movs	r1, #2
 800cac0:	484a      	ldr	r0, [pc, #296]	@ (800cbec <MX_GPIO_Init+0x204>)
 800cac2:	f7f4 fa8b 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 800cac6:	2200      	movs	r2, #0
 800cac8:	2188      	movs	r1, #136	@ 0x88
 800caca:	4849      	ldr	r0, [pc, #292]	@ (800cbf0 <MX_GPIO_Init+0x208>)
 800cacc:	f7f4 fa86 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800cad0:	2200      	movs	r2, #0
 800cad2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cad6:	4847      	ldr	r0, [pc, #284]	@ (800cbf4 <MX_GPIO_Init+0x20c>)
 800cad8:	f7f4 fa80 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800cadc:	2201      	movs	r2, #1
 800cade:	2101      	movs	r1, #1
 800cae0:	4845      	ldr	r0, [pc, #276]	@ (800cbf8 <MX_GPIO_Init+0x210>)
 800cae2:	f7f4 fa7b 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800cae6:	2200      	movs	r2, #0
 800cae8:	2140      	movs	r1, #64	@ 0x40
 800caea:	4843      	ldr	r0, [pc, #268]	@ (800cbf8 <MX_GPIO_Init+0x210>)
 800caec:	f7f4 fa76 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800caf0:	2320      	movs	r3, #32
 800caf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800caf4:	2301      	movs	r3, #1
 800caf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caf8:	2300      	movs	r3, #0
 800cafa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800cafc:	2301      	movs	r3, #1
 800cafe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800cb00:	f107 031c 	add.w	r3, r7, #28
 800cb04:	4619      	mov	r1, r3
 800cb06:	4838      	ldr	r0, [pc, #224]	@ (800cbe8 <MX_GPIO_Init+0x200>)
 800cb08:	f7f4 f8a0 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb10:	2301      	movs	r3, #1
 800cb12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb14:	2300      	movs	r3, #0
 800cb16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800cb1c:	f107 031c 	add.w	r3, r7, #28
 800cb20:	4619      	mov	r1, r3
 800cb22:	4832      	ldr	r0, [pc, #200]	@ (800cbec <MX_GPIO_Init+0x204>)
 800cb24:	f7f4 f892 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 800cb28:	2388      	movs	r3, #136	@ 0x88
 800cb2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb30:	2300      	movs	r3, #0
 800cb32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb34:	2300      	movs	r3, #0
 800cb36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cb38:	f107 031c 	add.w	r3, r7, #28
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	482c      	ldr	r0, [pc, #176]	@ (800cbf0 <MX_GPIO_Init+0x208>)
 800cb40:	f7f4 f884 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 800cb44:	2340      	movs	r3, #64	@ 0x40
 800cb46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800cb48:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800cb4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 800cb52:	f107 031c 	add.w	r3, r7, #28
 800cb56:	4619      	mov	r1, r3
 800cb58:	4825      	ldr	r0, [pc, #148]	@ (800cbf0 <MX_GPIO_Init+0x208>)
 800cb5a:	f7f4 f877 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800cb5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb64:	2301      	movs	r3, #1
 800cb66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800cb68:	2302      	movs	r3, #2
 800cb6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb70:	f107 031c 	add.w	r3, r7, #28
 800cb74:	4619      	mov	r1, r3
 800cb76:	481f      	ldr	r0, [pc, #124]	@ (800cbf4 <MX_GPIO_Init+0x20c>)
 800cb78:	f7f4 f868 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb80:	2301      	movs	r3, #1
 800cb82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb84:	2300      	movs	r3, #0
 800cb86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cb8c:	f107 031c 	add.w	r3, r7, #28
 800cb90:	4619      	mov	r1, r3
 800cb92:	4819      	ldr	r0, [pc, #100]	@ (800cbf8 <MX_GPIO_Init+0x210>)
 800cb94:	f7f4 f85a 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800cb98:	2340      	movs	r3, #64	@ 0x40
 800cb9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cba0:	2300      	movs	r3, #0
 800cba2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800cba4:	2301      	movs	r3, #1
 800cba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800cba8:	f107 031c 	add.w	r3, r7, #28
 800cbac:	4619      	mov	r1, r3
 800cbae:	4812      	ldr	r0, [pc, #72]	@ (800cbf8 <MX_GPIO_Init+0x210>)
 800cbb0:	f7f4 f84c 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800cbb4:	2380      	movs	r3, #128	@ 0x80
 800cbb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cbc0:	f107 031c 	add.w	r3, r7, #28
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	480c      	ldr	r0, [pc, #48]	@ (800cbf8 <MX_GPIO_Init+0x210>)
 800cbc8:	f7f4 f840 	bl	8000c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2100      	movs	r1, #0
 800cbd0:	2017      	movs	r0, #23
 800cbd2:	f7f3 fd4b 	bl	800066c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800cbd6:	2017      	movs	r0, #23
 800cbd8:	f7f3 fd62 	bl	80006a0 <HAL_NVIC_EnableIRQ>

}
 800cbdc:	bf00      	nop
 800cbde:	3730      	adds	r7, #48	@ 0x30
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	58024400 	.word	0x58024400
 800cbe8:	58020800 	.word	0x58020800
 800cbec:	58020400 	.word	0x58020400
 800cbf0:	58021800 	.word	0x58021800
 800cbf4:	58020000 	.word	0x58020000
 800cbf8:	58022000 	.word	0x58022000

0800cbfc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800cc00:	4b1b      	ldr	r3, [pc, #108]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc02:	4a1c      	ldr	r2, [pc, #112]	@ (800cc74 <MX_I2C3_Init+0x78>)
 800cc04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A175AB;
 800cc06:	4b1a      	ldr	r3, [pc, #104]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc08:	4a1b      	ldr	r2, [pc, #108]	@ (800cc78 <MX_I2C3_Init+0x7c>)
 800cc0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800cc0c:	4b18      	ldr	r3, [pc, #96]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cc12:	4b17      	ldr	r3, [pc, #92]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc14:	2201      	movs	r2, #1
 800cc16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cc18:	4b15      	ldr	r3, [pc, #84]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800cc1e:	4b14      	ldr	r3, [pc, #80]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800cc24:	4b12      	ldr	r3, [pc, #72]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cc2a:	4b11      	ldr	r3, [pc, #68]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cc30:	4b0f      	ldr	r3, [pc, #60]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800cc36:	480e      	ldr	r0, [pc, #56]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc38:	f7f4 fa1e 	bl	8001078 <HAL_I2C_Init>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800cc42:	f000 fd33 	bl	800d6ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800cc46:	2100      	movs	r1, #0
 800cc48:	4809      	ldr	r0, [pc, #36]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc4a:	f7f4 ffa1 	bl	8001b90 <HAL_I2CEx_ConfigAnalogFilter>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800cc54:	f000 fd2a 	bl	800d6ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800cc58:	2100      	movs	r1, #0
 800cc5a:	4805      	ldr	r0, [pc, #20]	@ (800cc70 <MX_I2C3_Init+0x74>)
 800cc5c:	f7f4 ffe3 	bl	8001c26 <HAL_I2CEx_ConfigDigitalFilter>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800cc66:	f000 fd21 	bl	800d6ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800cc6a:	bf00      	nop
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	24000788 	.word	0x24000788
 800cc74:	40005c00 	.word	0x40005c00
 800cc78:	30a175ab 	.word	0x30a175ab

0800cc7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b0ba      	sub	sp, #232	@ 0xe8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800cc88:	2200      	movs	r2, #0
 800cc8a:	601a      	str	r2, [r3, #0]
 800cc8c:	605a      	str	r2, [r3, #4]
 800cc8e:	609a      	str	r2, [r3, #8]
 800cc90:	60da      	str	r2, [r3, #12]
 800cc92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cc94:	f107 0310 	add.w	r3, r7, #16
 800cc98:	22c0      	movs	r2, #192	@ 0xc0
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f002 fefc 	bl	800fa9a <memset>
  if(i2cHandle->Instance==I2C3)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a27      	ldr	r2, [pc, #156]	@ (800cd44 <HAL_I2C_MspInit+0xc8>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d146      	bne.n	800cd3a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800ccac:	f04f 0208 	mov.w	r2, #8
 800ccb0:	f04f 0300 	mov.w	r3, #0
 800ccb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ccbe:	f107 0310 	add.w	r3, r7, #16
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7f7 faf6 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d001      	beq.n	800ccd2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800ccce:	f000 fced 	bl	800d6ac <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800ccd2:	4b1d      	ldr	r3, [pc, #116]	@ (800cd48 <HAL_I2C_MspInit+0xcc>)
 800ccd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ccd8:	4a1b      	ldr	r2, [pc, #108]	@ (800cd48 <HAL_I2C_MspInit+0xcc>)
 800ccda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800cce2:	4b19      	ldr	r3, [pc, #100]	@ (800cd48 <HAL_I2C_MspInit+0xcc>)
 800cce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccec:	60fb      	str	r3, [r7, #12]
 800ccee:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800ccf0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800ccf4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ccf8:	2312      	movs	r3, #18
 800ccfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd04:	2303      	movs	r3, #3
 800cd06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800cd0a:	2304      	movs	r3, #4
 800cd0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cd10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800cd14:	4619      	mov	r1, r3
 800cd16:	480d      	ldr	r0, [pc, #52]	@ (800cd4c <HAL_I2C_MspInit+0xd0>)
 800cd18:	f7f3 ff98 	bl	8000c4c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800cd1c:	4b0a      	ldr	r3, [pc, #40]	@ (800cd48 <HAL_I2C_MspInit+0xcc>)
 800cd1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cd22:	4a09      	ldr	r2, [pc, #36]	@ (800cd48 <HAL_I2C_MspInit+0xcc>)
 800cd24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cd28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800cd2c:	4b06      	ldr	r3, [pc, #24]	@ (800cd48 <HAL_I2C_MspInit+0xcc>)
 800cd2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cd32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd36:	60bb      	str	r3, [r7, #8]
 800cd38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800cd3a:	bf00      	nop
 800cd3c:	37e8      	adds	r7, #232	@ 0xe8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	40005c00 	.word	0x40005c00
 800cd48:	58024400 	.word	0x58024400
 800cd4c:	58021c00 	.word	0x58021c00

0800cd50 <_close>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// IDE版本错误临时修复
__attribute__((weak)) void _close(void) {}
 800cd50:	b480      	push	{r7}
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	bf00      	nop
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <_lseek>:
__attribute__((weak)) void _lseek(void) {}
 800cd5e:	b480      	push	{r7}
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	bf00      	nop
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <_read>:
__attribute__((weak)) void _read(void) {}
 800cd6c:	b480      	push	{r7}
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	bf00      	nop
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <_write>:
__attribute__((weak)) void _write(void) {}
 800cd7a:	b480      	push	{r7}
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	bf00      	nop
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <_fstat>:
__attribute__((weak)) void _fstat(void) {}
 800cd88:	b480      	push	{r7}
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	bf00      	nop
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <_getpid>:
__attribute__((weak)) void _getpid(void) {}
 800cd96:	b480      	push	{r7}
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	bf00      	nop
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <_isatty>:
__attribute__((weak)) void _isatty(void) {}
 800cda4:	b480      	push	{r7}
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	bf00      	nop
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr

0800cdb2 <_kill>:
__attribute__((weak)) void _kill(void) {}
 800cdb2:	b480      	push	{r7}
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	bf00      	nop
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <oled_Show>:
float dcVolt = 0.f;
float dcCurrent = 0.f;
// 显示函数
uint8_t textBuf[256] = {0};
void oled_Show(void)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af02      	add	r7, sp, #8
#if !USER_DEBUG
  // IN:  输入
  sprintf((char *)textBuf, "IN : %5.2fV %5.2fA", signal_V->rms * iirScale_20Hz / 1.4f, signal_I->rms * iirScale_20Hz / 1.414f);
 800cdc6:	4b53      	ldr	r3, [pc, #332]	@ (800cf14 <oled_Show+0x154>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	ed93 7a03 	vldr	s14, [r3, #12]
 800cdce:	4b52      	ldr	r3, [pc, #328]	@ (800cf18 <oled_Show+0x158>)
 800cdd0:	edd3 7a00 	vldr	s15, [r3]
 800cdd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdd8:	eddf 6a50 	vldr	s13, [pc, #320]	@ 800cf1c <oled_Show+0x15c>
 800cddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cde0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800cde4:	4b4e      	ldr	r3, [pc, #312]	@ (800cf20 <oled_Show+0x160>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	ed93 7a03 	vldr	s14, [r3, #12]
 800cdec:	4b4a      	ldr	r3, [pc, #296]	@ (800cf18 <oled_Show+0x158>)
 800cdee:	edd3 7a00 	vldr	s15, [r3]
 800cdf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdf6:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 800cf24 <oled_Show+0x164>
 800cdfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce02:	ed8d 7b00 	vstr	d7, [sp]
 800ce06:	ec53 2b15 	vmov	r2, r3, d5
 800ce0a:	4947      	ldr	r1, [pc, #284]	@ (800cf28 <oled_Show+0x168>)
 800ce0c:	4847      	ldr	r0, [pc, #284]	@ (800cf2c <oled_Show+0x16c>)
 800ce0e:	f002 fde1 	bl	800f9d4 <siprintf>
  OLED_ShowString(0, 0, textBuf, 12);
 800ce12:	230c      	movs	r3, #12
 800ce14:	4a45      	ldr	r2, [pc, #276]	@ (800cf2c <oled_Show+0x16c>)
 800ce16:	2100      	movs	r1, #0
 800ce18:	2000      	movs	r0, #0
 800ce1a:	f7fe fe77 	bl	800bb0c <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // DC:  直流
  sprintf((char *)textBuf, "DC : %5.2fV %5.2fA", dcVolt, dcCurrent);
 800ce1e:	4b44      	ldr	r3, [pc, #272]	@ (800cf30 <oled_Show+0x170>)
 800ce20:	edd3 7a00 	vldr	s15, [r3]
 800ce24:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800ce28:	4b42      	ldr	r3, [pc, #264]	@ (800cf34 <oled_Show+0x174>)
 800ce2a:	edd3 7a00 	vldr	s15, [r3]
 800ce2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce32:	ed8d 7b00 	vstr	d7, [sp]
 800ce36:	ec53 2b16 	vmov	r2, r3, d6
 800ce3a:	493f      	ldr	r1, [pc, #252]	@ (800cf38 <oled_Show+0x178>)
 800ce3c:	483b      	ldr	r0, [pc, #236]	@ (800cf2c <oled_Show+0x16c>)
 800ce3e:	f002 fdc9 	bl	800f9d4 <siprintf>
  OLED_ShowString(0, 12, textBuf, 12);
 800ce42:	230c      	movs	r3, #12
 800ce44:	4a39      	ldr	r2, [pc, #228]	@ (800cf2c <oled_Show+0x16c>)
 800ce46:	210c      	movs	r1, #12
 800ce48:	2000      	movs	r0, #0
 800ce4a:	f7fe fe5f 	bl	800bb0c <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // OUT: 输出
  sprintf((char *)textBuf, "OUT: %5.2fV %5.2fA", signal_V->input[0], signal_I->input[0]);
 800ce4e:	4b31      	ldr	r3, [pc, #196]	@ (800cf14 <oled_Show+0x154>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	edd3 7a00 	vldr	s15, [r3]
 800ce56:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800ce5a:	4b31      	ldr	r3, [pc, #196]	@ (800cf20 <oled_Show+0x160>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	edd3 7a00 	vldr	s15, [r3]
 800ce62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce66:	ed8d 7b00 	vstr	d7, [sp]
 800ce6a:	ec53 2b16 	vmov	r2, r3, d6
 800ce6e:	4933      	ldr	r1, [pc, #204]	@ (800cf3c <oled_Show+0x17c>)
 800ce70:	482e      	ldr	r0, [pc, #184]	@ (800cf2c <oled_Show+0x16c>)
 800ce72:	f002 fdaf 	bl	800f9d4 <siprintf>
  OLED_ShowString(0, 24, textBuf, 12);
 800ce76:	230c      	movs	r3, #12
 800ce78:	4a2c      	ldr	r2, [pc, #176]	@ (800cf2c <oled_Show+0x16c>)
 800ce7a:	2118      	movs	r1, #24
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	f7fe fe45 	bl	800bb0c <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // FAC: 功率因数
  // sprintf((char *)textBuf, "FAC: %4.2f %5ld", arm_cos_f32(0), __HAL_TIM_GET_COMPARE(&htim8, TIM_CHANNEL_1));
  sprintf((char *)textBuf, "FAC: %4.2f %.2f", arm_cos_f32(0), phase_set);
 800ce82:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800cf40 <oled_Show+0x180>
 800ce86:	f001 ffad 	bl	800ede4 <arm_cos_f32>
 800ce8a:	eef0 7a40 	vmov.f32	s15, s0
 800ce8e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800ce92:	4b2c      	ldr	r3, [pc, #176]	@ (800cf44 <oled_Show+0x184>)
 800ce94:	edd3 7a00 	vldr	s15, [r3]
 800ce98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce9c:	ed8d 7b00 	vstr	d7, [sp]
 800cea0:	ec53 2b16 	vmov	r2, r3, d6
 800cea4:	4928      	ldr	r1, [pc, #160]	@ (800cf48 <oled_Show+0x188>)
 800cea6:	4821      	ldr	r0, [pc, #132]	@ (800cf2c <oled_Show+0x16c>)
 800cea8:	f002 fd94 	bl	800f9d4 <siprintf>
  // sprintf((char *)textBuf, "FAC: %4.2f %8.0f", arm_cos_f32(0), signal_I->pr->out[0]);
  OLED_ShowString(0, 36, textBuf, 12);
 800ceac:	230c      	movs	r3, #12
 800ceae:	4a1f      	ldr	r2, [pc, #124]	@ (800cf2c <oled_Show+0x16c>)
 800ceb0:	2124      	movs	r1, #36	@ 0x24
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	f7fe fe2a 	bl	800bb0c <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // EFF: 效率
  sprintf((char *)textBuf, "EFF: %5.2f%%", (signal_V->input[0] * signal_I->input[0]) / (signal_V->input[0] * signal_I->input[0]) * 100.f);
 800ceb8:	4b16      	ldr	r3, [pc, #88]	@ (800cf14 <oled_Show+0x154>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	ed93 7a00 	vldr	s14, [r3]
 800cec0:	4b17      	ldr	r3, [pc, #92]	@ (800cf20 <oled_Show+0x160>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	edd3 7a00 	vldr	s15, [r3]
 800cec8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800cecc:	4b11      	ldr	r3, [pc, #68]	@ (800cf14 <oled_Show+0x154>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	ed93 7a00 	vldr	s14, [r3]
 800ced4:	4b12      	ldr	r3, [pc, #72]	@ (800cf20 <oled_Show+0x160>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	edd3 7a00 	vldr	s15, [r3]
 800cedc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cee4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800cf4c <oled_Show+0x18c>
 800cee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ceec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cef0:	ec53 2b17 	vmov	r2, r3, d7
 800cef4:	4916      	ldr	r1, [pc, #88]	@ (800cf50 <oled_Show+0x190>)
 800cef6:	480d      	ldr	r0, [pc, #52]	@ (800cf2c <oled_Show+0x16c>)
 800cef8:	f002 fd6c 	bl	800f9d4 <siprintf>
  OLED_ShowString(0, 48, textBuf, 12);
 800cefc:	230c      	movs	r3, #12
 800cefe:	4a0b      	ldr	r2, [pc, #44]	@ (800cf2c <oled_Show+0x16c>)
 800cf00:	2130      	movs	r1, #48	@ 0x30
 800cf02:	2000      	movs	r0, #0
 800cf04:	f7fe fe02 	bl	800bb0c <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
  OLED_Refresh();
 800cf08:	f7fe fc90 	bl	800b82c <OLED_Refresh>
  // 串口调试
  //  sprintf((char *)textBuf, "x=0,V=%.2f,I=%.2f,park_Iq=%.2f,park_Id=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,sogi_Ia=%.2f,sogi_Ib=%.2f,\n", signal_V->input[0], signal_I->input[0], signal_I->park_q, signal_I->park_d, signal_V->park_d, signal_V->park_q, signal_V->sogi->a[0], signal_V->sogi->b[0], signal_I->sogi->a[0], signal_I->sogi->b[0]);
  sprintf((char *)textBuf, "x=0,V=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,\n", signal_V->input[0], signal_V->park_d, signal_V->park_q, signal_V->sogi->a[0], signal_V->sogi->b[0]);
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
#endif
}
 800cf0c:	bf00      	nop
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	20000000 	.word	0x20000000
 800cf18:	08011d94 	.word	0x08011d94
 800cf1c:	3fb33333 	.word	0x3fb33333
 800cf20:	20000004 	.word	0x20000004
 800cf24:	3fb4fdf4 	.word	0x3fb4fdf4
 800cf28:	08011cc8 	.word	0x08011cc8
 800cf2c:	240007e4 	.word	0x240007e4
 800cf30:	240007dc 	.word	0x240007dc
 800cf34:	240007e0 	.word	0x240007e0
 800cf38:	08011cdc 	.word	0x08011cdc
 800cf3c:	08011cf0 	.word	0x08011cf0
 800cf40:	00000000 	.word	0x00000000
 800cf44:	24000770 	.word	0x24000770
 800cf48:	08011d04 	.word	0x08011d04
 800cf4c:	42c80000 	.word	0x42c80000
 800cf50:	08011d14 	.word	0x08011d14

0800cf54 <circuit_Connect>:
// 连接电路
void circuit_Connect(void)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cf5e:	4802      	ldr	r0, [pc, #8]	@ (800cf68 <circuit_Connect+0x14>)
 800cf60:	f7f4 f83c 	bl	8000fdc <HAL_GPIO_WritePin>
}
 800cf64:	bf00      	nop
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	58020000 	.word	0x58020000

0800cf6c <circuit_Disconnect>:
void circuit_Disconnect(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800cf70:	2200      	movs	r2, #0
 800cf72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cf76:	4802      	ldr	r0, [pc, #8]	@ (800cf80 <circuit_Disconnect+0x14>)
 800cf78:	f7f4 f830 	bl	8000fdc <HAL_GPIO_WritePin>
}
 800cf7c:	bf00      	nop
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	58020000 	.word	0x58020000

0800cf84 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800cf84:	b590      	push	{r4, r7, lr}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800cf8a:	f000 fb19 	bl	800d5c0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800cf8e:	4ba7      	ldr	r3, [pc, #668]	@ (800d22c <main+0x2a8>)
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d11b      	bne.n	800cfd2 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 800cf9a:	f3bf 8f4f 	dsb	sy
}
 800cf9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cfa0:	f3bf 8f6f 	isb	sy
}
 800cfa4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800cfa6:	4ba1      	ldr	r3, [pc, #644]	@ (800d22c <main+0x2a8>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800cfae:	f3bf 8f4f 	dsb	sy
}
 800cfb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cfb4:	f3bf 8f6f 	isb	sy
}
 800cfb8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800cfba:	4b9c      	ldr	r3, [pc, #624]	@ (800d22c <main+0x2a8>)
 800cfbc:	695b      	ldr	r3, [r3, #20]
 800cfbe:	4a9b      	ldr	r2, [pc, #620]	@ (800d22c <main+0x2a8>)
 800cfc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cfc4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800cfc6:	f3bf 8f4f 	dsb	sy
}
 800cfca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cfcc:	f3bf 8f6f 	isb	sy
}
 800cfd0:	e000      	b.n	800cfd4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800cfd2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800cfd4:	4b95      	ldr	r3, [pc, #596]	@ (800d22c <main+0x2a8>)
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d138      	bne.n	800d052 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800cfe0:	4b92      	ldr	r3, [pc, #584]	@ (800d22c <main+0x2a8>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800cfe8:	f3bf 8f4f 	dsb	sy
}
 800cfec:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800cfee:	4b8f      	ldr	r3, [pc, #572]	@ (800d22c <main+0x2a8>)
 800cff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cff4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	0b5b      	lsrs	r3, r3, #13
 800cffa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cffe:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	08db      	lsrs	r3, r3, #3
 800d004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d008:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	015a      	lsls	r2, r3, #5
 800d00e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800d012:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d018:	4984      	ldr	r1, [pc, #528]	@ (800d22c <main+0x2a8>)
 800d01a:	4313      	orrs	r3, r2
 800d01c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	1e5a      	subs	r2, r3, #1
 800d024:	607a      	str	r2, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1ef      	bne.n	800d00a <main+0x86>
    } while(sets-- != 0U);
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	1e5a      	subs	r2, r3, #1
 800d02e:	60ba      	str	r2, [r7, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d1e5      	bne.n	800d000 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800d034:	f3bf 8f4f 	dsb	sy
}
 800d038:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800d03a:	4b7c      	ldr	r3, [pc, #496]	@ (800d22c <main+0x2a8>)
 800d03c:	695b      	ldr	r3, [r3, #20]
 800d03e:	4a7b      	ldr	r2, [pc, #492]	@ (800d22c <main+0x2a8>)
 800d040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d044:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800d046:	f3bf 8f4f 	dsb	sy
}
 800d04a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d04c:	f3bf 8f6f 	isb	sy
}
 800d050:	e000      	b.n	800d054 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800d052:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d054:	f7f3 f9c6 	bl	80003e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d058:	f000 f914 	bl	800d284 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800d05c:	f000 f9c0 	bl	800d3e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d060:	f7ff fcc2 	bl	800c9e8 <MX_GPIO_Init>
  MX_DAC1_Init();
 800d064:	f7ff fc40 	bl	800c8e8 <MX_DAC1_Init>
  MX_SPI1_Init();
 800d068:	f000 fb3e 	bl	800d6e8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800d06c:	f000 fb92 	bl	800d794 <MX_SPI2_Init>
  MX_TIM2_Init();
 800d070:	f000 fdd8 	bl	800dc24 <MX_TIM2_Init>
  MX_TIM8_Init();
 800d074:	f000 fe9c 	bl	800ddb0 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 800d078:	f001 f84a 	bl	800e110 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 800d07c:	f7ff fdbe 	bl	800cbfc <MX_I2C3_Init>
  MX_TIM3_Init();
 800d080:	f000 fe48 	bl	800dd14 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 800d084:	2050      	movs	r0, #80	@ 0x50
 800d086:	f001 fef7 	bl	800ee78 <malloc>
 800d08a:	4603      	mov	r3, r0
 800d08c:	461a      	mov	r2, r3
 800d08e:	4b68      	ldr	r3, [pc, #416]	@ (800d230 <main+0x2ac>)
 800d090:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 800d092:	2050      	movs	r0, #80	@ 0x50
 800d094:	f001 fef0 	bl	800ee78 <malloc>
 800d098:	4603      	mov	r3, r0
 800d09a:	461a      	mov	r2, r3
 800d09c:	4b65      	ldr	r3, [pc, #404]	@ (800d234 <main+0x2b0>)
 800d09e:	601a      	str	r2, [r3, #0]
  signal_V->pid = (PID *)malloc(sizeof(PID));
 800d0a0:	4b63      	ldr	r3, [pc, #396]	@ (800d230 <main+0x2ac>)
 800d0a2:	681c      	ldr	r4, [r3, #0]
 800d0a4:	2024      	movs	r0, #36	@ 0x24
 800d0a6:	f001 fee7 	bl	800ee78 <malloc>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	64e3      	str	r3, [r4, #76]	@ 0x4c
  signal_I->pid = (PID *)malloc(sizeof(PID));
 800d0ae:	4b61      	ldr	r3, [pc, #388]	@ (800d234 <main+0x2b0>)
 800d0b0:	681c      	ldr	r4, [r3, #0]
 800d0b2:	2024      	movs	r0, #36	@ 0x24
 800d0b4:	f001 fee0 	bl	800ee78 <malloc>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	64a3      	str	r3, [r4, #72]	@ 0x48
  signal_V->sogi = (SOGI *)malloc(sizeof(SOGI));
 800d0bc:	4b5c      	ldr	r3, [pc, #368]	@ (800d230 <main+0x2ac>)
 800d0be:	681c      	ldr	r4, [r3, #0]
 800d0c0:	2034      	movs	r0, #52	@ 0x34
 800d0c2:	f001 fed9 	bl	800ee78 <malloc>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	64a3      	str	r3, [r4, #72]	@ 0x48
  signal_I->sogi = (SOGI *)malloc(sizeof(SOGI));
 800d0ca:	4b5a      	ldr	r3, [pc, #360]	@ (800d234 <main+0x2b0>)
 800d0cc:	681c      	ldr	r4, [r3, #0]
 800d0ce:	2034      	movs	r0, #52	@ 0x34
 800d0d0:	f001 fed2 	bl	800ee78 <malloc>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	6463      	str	r3, [r4, #68]	@ 0x44
  signal_I->pr = (PR *)malloc(sizeof(PR));
 800d0d8:	4b56      	ldr	r3, [pc, #344]	@ (800d234 <main+0x2b0>)
 800d0da:	681c      	ldr	r4, [r3, #0]
 800d0dc:	2038      	movs	r0, #56	@ 0x38
 800d0de:	f001 fecb 	bl	800ee78 <malloc>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	64e3      	str	r3, [r4, #76]	@ 0x4c
  // 芯片温度
  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 锁相环初始化
  pll_Init_V(signal_V, 50, 20000, 30 * 1.414);                 // 电压锁相
 800d0e6:	4b52      	ldr	r3, [pc, #328]	@ (800d230 <main+0x2ac>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	eddf 0a53 	vldr	s1, [pc, #332]	@ 800d238 <main+0x2b4>
 800d0ee:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800d0f2:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 800d23c <main+0x2b8>
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe fe66 	bl	800bdc8 <pll_Init_V>
  pll_Init_I(signal_I, 50, 20000, 0.2f, 1000.f, 0.001f, 0.1f); // 电流环 1.414-7600
 800d0fc:	4b4d      	ldr	r3, [pc, #308]	@ (800d234 <main+0x2b0>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	ed9f 2a4f 	vldr	s4, [pc, #316]	@ 800d240 <main+0x2bc>
 800d104:	eddf 1a4f 	vldr	s3, [pc, #316]	@ 800d244 <main+0x2c0>
 800d108:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 800d248 <main+0x2c4>
 800d10c:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 800d24c <main+0x2c8>
 800d110:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800d114:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 800d23c <main+0x2b8>
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe ff7f 	bl	800c01c <pll_Init_I>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 800d11e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d122:	2200      	movs	r2, #0
 800d124:	2100      	movs	r1, #0
 800d126:	484a      	ldr	r0, [pc, #296]	@ (800d250 <main+0x2cc>)
 800d128:	f7f3 fc0f 	bl	800094a <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800d12c:	2100      	movs	r1, #0
 800d12e:	4848      	ldr	r0, [pc, #288]	@ (800d250 <main+0x2cc>)
 800d130:	f7f3 fb5e 	bl	80007f0 <HAL_DAC_Start>
  // 初始化AD7606
  ad7606_Init();
 800d134:	f7fe f976 	bl	800b424 <ad7606_Init>
  // 打开PWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800d138:	2100      	movs	r1, #0
 800d13a:	4846      	ldr	r0, [pc, #280]	@ (800d254 <main+0x2d0>)
 800d13c:	f7f9 fbc6 	bl	80068cc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 800d140:	2100      	movs	r1, #0
 800d142:	4844      	ldr	r0, [pc, #272]	@ (800d254 <main+0x2d0>)
 800d144:	f7fa fc4c 	bl	80079e0 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800d148:	2104      	movs	r1, #4
 800d14a:	4842      	ldr	r0, [pc, #264]	@ (800d254 <main+0x2d0>)
 800d14c:	f7f9 fbbe 	bl	80068cc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 800d150:	2104      	movs	r1, #4
 800d152:	4840      	ldr	r0, [pc, #256]	@ (800d254 <main+0x2d0>)
 800d154:	f7fa fc44 	bl	80079e0 <HAL_TIMEx_PWMN_Start>
  // OLED初始化
  OLED_Init();
 800d158:	f7fe fd0c 	bl	800bb74 <OLED_Init>
  // INA238初始化
  ina238_Init(&hi2c3, 0);
 800d15c:	2100      	movs	r1, #0
 800d15e:	483e      	ldr	r0, [pc, #248]	@ (800d258 <main+0x2d4>)
 800d160:	f7fe fa44 	bl	800b5ec <ina238_Init>
  // iir滤波器初始化
  iir_V = (arm_biquad_casd_df1_inst_f32 *)malloc(sizeof(arm_biquad_casd_df1_inst_f32));
 800d164:	200c      	movs	r0, #12
 800d166:	f001 fe87 	bl	800ee78 <malloc>
 800d16a:	4603      	mov	r3, r0
 800d16c:	461a      	mov	r2, r3
 800d16e:	4b3b      	ldr	r3, [pc, #236]	@ (800d25c <main+0x2d8>)
 800d170:	601a      	str	r2, [r3, #0]
  iir_I = (arm_biquad_casd_df1_inst_f32 *)malloc(sizeof(arm_biquad_casd_df1_inst_f32));
 800d172:	200c      	movs	r0, #12
 800d174:	f001 fe80 	bl	800ee78 <malloc>
 800d178:	4603      	mov	r3, r0
 800d17a:	461a      	mov	r2, r3
 800d17c:	4b38      	ldr	r3, [pc, #224]	@ (800d260 <main+0x2dc>)
 800d17e:	601a      	str	r2, [r3, #0]
  arm_biquad_cascade_df1_init_f32(iir_V, iirNumStages, iirCoeffs_20Hz, signal_V->iirState);
 800d180:	4b36      	ldr	r3, [pc, #216]	@ (800d25c <main+0x2d8>)
 800d182:	6818      	ldr	r0, [r3, #0]
 800d184:	4b2a      	ldr	r3, [pc, #168]	@ (800d230 <main+0x2ac>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	3328      	adds	r3, #40	@ 0x28
 800d18a:	4a36      	ldr	r2, [pc, #216]	@ (800d264 <main+0x2e0>)
 800d18c:	2102      	movs	r1, #2
 800d18e:	f001 fcd9 	bl	800eb44 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(iir_I, iirNumStages, iirCoeffs_20Hz, signal_I->iirState);
 800d192:	4b33      	ldr	r3, [pc, #204]	@ (800d260 <main+0x2dc>)
 800d194:	6818      	ldr	r0, [r3, #0]
 800d196:	4b27      	ldr	r3, [pc, #156]	@ (800d234 <main+0x2b0>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	3324      	adds	r3, #36	@ 0x24
 800d19c:	4a31      	ldr	r2, [pc, #196]	@ (800d264 <main+0x2e0>)
 800d19e:	2102      	movs	r1, #2
 800d1a0:	f001 fcd0 	bl	800eb44 <arm_biquad_cascade_df1_init_f32>
  // 开启中断
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	4830      	ldr	r0, [pc, #192]	@ (800d268 <main+0x2e4>)
 800d1a8:	f7fe f976 	bl	800b498 <ad7606_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800d1ac:	482f      	ldr	r0, [pc, #188]	@ (800d26c <main+0x2e8>)
 800d1ae:	f7f9 fab3 	bl	8006718 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (signal_I->rms * iirScale_20Hz / 1.414f > 0.1f)
 800d1b2:	4b20      	ldr	r3, [pc, #128]	@ (800d234 <main+0x2b0>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	ed93 7a03 	vldr	s14, [r3, #12]
 800d1ba:	4b2d      	ldr	r3, [pc, #180]	@ (800d270 <main+0x2ec>)
 800d1bc:	edd3 7a00 	vldr	s15, [r3]
 800d1c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1c4:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800d274 <main+0x2f0>
 800d1c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d1cc:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800d240 <main+0x2bc>
 800d1d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d8:	dd02      	ble.n	800d1e0 <main+0x25c>
    {
      circuit_Connect();
 800d1da:	f7ff febb 	bl	800cf54 <circuit_Connect>
 800d1de:	e001      	b.n	800d1e4 <main+0x260>
    }
    else
      circuit_Disconnect();
 800d1e0:	f7ff fec4 	bl	800cf6c <circuit_Disconnect>
    if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_7) == GPIO_PIN_RESET)
 800d1e4:	2180      	movs	r1, #128	@ 0x80
 800d1e6:	4824      	ldr	r0, [pc, #144]	@ (800d278 <main+0x2f4>)
 800d1e8:	f7f3 fee0 	bl	8000fac <HAL_GPIO_ReadPin>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d111      	bne.n	800d216 <main+0x292>
    {
      while (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_7) == GPIO_PIN_RESET)
 800d1f2:	bf00      	nop
 800d1f4:	2180      	movs	r1, #128	@ 0x80
 800d1f6:	4820      	ldr	r0, [pc, #128]	@ (800d278 <main+0x2f4>)
 800d1f8:	f7f3 fed8 	bl	8000fac <HAL_GPIO_ReadPin>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d0f8      	beq.n	800d1f4 <main+0x270>
        ;
      phase_set += 0.01f;
 800d202:	4b1e      	ldr	r3, [pc, #120]	@ (800d27c <main+0x2f8>)
 800d204:	edd3 7a00 	vldr	s15, [r3]
 800d208:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800d280 <main+0x2fc>
 800d20c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d210:	4b1a      	ldr	r3, [pc, #104]	@ (800d27c <main+0x2f8>)
 800d212:	edc3 7a00 	vstr	s15, [r3]
    }
    oled_Show();
 800d216:	f7ff fdd3 	bl	800cdc0 <oled_Show>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800d21a:	2101      	movs	r1, #1
 800d21c:	4816      	ldr	r0, [pc, #88]	@ (800d278 <main+0x2f4>)
 800d21e:	f7f3 fef6 	bl	800100e <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800d222:	2064      	movs	r0, #100	@ 0x64
 800d224:	f7f3 f93a 	bl	800049c <HAL_Delay>
    if (signal_I->rms * iirScale_20Hz / 1.414f > 0.1f)
 800d228:	e7c3      	b.n	800d1b2 <main+0x22e>
 800d22a:	bf00      	nop
 800d22c:	e000ed00 	.word	0xe000ed00
 800d230:	20000000 	.word	0x20000000
 800d234:	20000004 	.word	0x20000004
 800d238:	4229ae14 	.word	0x4229ae14
 800d23c:	42480000 	.word	0x42480000
 800d240:	3dcccccd 	.word	0x3dcccccd
 800d244:	3a83126f 	.word	0x3a83126f
 800d248:	447a0000 	.word	0x447a0000
 800d24c:	3e4ccccd 	.word	0x3e4ccccd
 800d250:	24000774 	.word	0x24000774
 800d254:	24000ad8 	.word	0x24000ad8
 800d258:	24000788 	.word	0x24000788
 800d25c:	20000008 	.word	0x20000008
 800d260:	2000000c 	.word	0x2000000c
 800d264:	08011d6c 	.word	0x08011d6c
 800d268:	24000a40 	.word	0x24000a40
 800d26c:	24000a8c 	.word	0x24000a8c
 800d270:	08011d94 	.word	0x08011d94
 800d274:	3fb4fdf4 	.word	0x3fb4fdf4
 800d278:	58022000 	.word	0x58022000
 800d27c:	24000770 	.word	0x24000770
 800d280:	3c23d70a 	.word	0x3c23d70a

0800d284 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b09e      	sub	sp, #120	@ 0x78
 800d288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d28a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d28e:	224c      	movs	r2, #76	@ 0x4c
 800d290:	2100      	movs	r1, #0
 800d292:	4618      	mov	r0, r3
 800d294:	f002 fc01 	bl	800fa9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d298:	f107 030c 	add.w	r3, r7, #12
 800d29c:	2220      	movs	r2, #32
 800d29e:	2100      	movs	r1, #0
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f002 fbfa 	bl	800fa9a <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800d2a6:	2002      	movs	r0, #2
 800d2a8:	f7f5 ffa8 	bl	80031fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	60bb      	str	r3, [r7, #8]
 800d2b0:	4b48      	ldr	r3, [pc, #288]	@ (800d3d4 <SystemClock_Config+0x150>)
 800d2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b4:	4a47      	ldr	r2, [pc, #284]	@ (800d3d4 <SystemClock_Config+0x150>)
 800d2b6:	f023 0301 	bic.w	r3, r3, #1
 800d2ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d2bc:	4b45      	ldr	r3, [pc, #276]	@ (800d3d4 <SystemClock_Config+0x150>)
 800d2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	60bb      	str	r3, [r7, #8]
 800d2c6:	4b44      	ldr	r3, [pc, #272]	@ (800d3d8 <SystemClock_Config+0x154>)
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	4a43      	ldr	r2, [pc, #268]	@ (800d3d8 <SystemClock_Config+0x154>)
 800d2cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d2d0:	6193      	str	r3, [r2, #24]
 800d2d2:	4b41      	ldr	r3, [pc, #260]	@ (800d3d8 <SystemClock_Config+0x154>)
 800d2d4:	699b      	ldr	r3, [r3, #24]
 800d2d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d2da:	60bb      	str	r3, [r7, #8]
 800d2dc:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800d2de:	bf00      	nop
 800d2e0:	4b3d      	ldr	r3, [pc, #244]	@ (800d3d8 <SystemClock_Config+0x154>)
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d2e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2ec:	d1f8      	bne.n	800d2e0 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2ee:	4b3b      	ldr	r3, [pc, #236]	@ (800d3dc <SystemClock_Config+0x158>)
 800d2f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2f4:	4a39      	ldr	r2, [pc, #228]	@ (800d3dc <SystemClock_Config+0x158>)
 800d2f6:	f043 0302 	orr.w	r3, r3, #2
 800d2fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d2fe:	4b37      	ldr	r3, [pc, #220]	@ (800d3dc <SystemClock_Config+0x158>)
 800d300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d304:	f003 0302 	and.w	r3, r3, #2
 800d308:	607b      	str	r3, [r7, #4]
 800d30a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800d30c:	2300      	movs	r3, #0
 800d30e:	603b      	str	r3, [r7, #0]
 800d310:	4b31      	ldr	r3, [pc, #196]	@ (800d3d8 <SystemClock_Config+0x154>)
 800d312:	699b      	ldr	r3, [r3, #24]
 800d314:	4a30      	ldr	r2, [pc, #192]	@ (800d3d8 <SystemClock_Config+0x154>)
 800d316:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d31a:	6193      	str	r3, [r2, #24]
 800d31c:	4b2e      	ldr	r3, [pc, #184]	@ (800d3d8 <SystemClock_Config+0x154>)
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d324:	603b      	str	r3, [r7, #0]
 800d326:	4b2b      	ldr	r3, [pc, #172]	@ (800d3d4 <SystemClock_Config+0x150>)
 800d328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d32a:	4a2a      	ldr	r2, [pc, #168]	@ (800d3d4 <SystemClock_Config+0x150>)
 800d32c:	f043 0301 	orr.w	r3, r3, #1
 800d330:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d332:	4b28      	ldr	r3, [pc, #160]	@ (800d3d4 <SystemClock_Config+0x150>)
 800d334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d336:	f003 0301 	and.w	r3, r3, #1
 800d33a:	603b      	str	r3, [r7, #0]
 800d33c:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800d33e:	bf00      	nop
 800d340:	4b25      	ldr	r3, [pc, #148]	@ (800d3d8 <SystemClock_Config+0x154>)
 800d342:	699b      	ldr	r3, [r3, #24]
 800d344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d34c:	d1f8      	bne.n	800d340 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d34e:	2301      	movs	r3, #1
 800d350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d352:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d356:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d358:	2302      	movs	r3, #2
 800d35a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d35c:	2302      	movs	r3, #2
 800d35e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800d360:	2305      	movs	r3, #5
 800d362:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800d364:	23c0      	movs	r3, #192	@ 0xc0
 800d366:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800d368:	2302      	movs	r3, #2
 800d36a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800d36c:	2314      	movs	r3, #20
 800d36e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800d370:	2302      	movs	r3, #2
 800d372:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800d374:	2308      	movs	r3, #8
 800d376:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800d378:	2300      	movs	r3, #0
 800d37a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800d37c:	2300      	movs	r3, #0
 800d37e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d380:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d384:	4618      	mov	r0, r3
 800d386:	f7f5 ff83 	bl	8003290 <HAL_RCC_OscConfig>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d001      	beq.n	800d394 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800d390:	f000 f98c 	bl	800d6ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 800d394:	233f      	movs	r3, #63	@ 0x3f
 800d396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d398:	2303      	movs	r3, #3
 800d39a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800d39c:	2300      	movs	r3, #0
 800d39e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800d3a0:	2308      	movs	r3, #8
 800d3a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800d3a4:	2340      	movs	r3, #64	@ 0x40
 800d3a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800d3a8:	2340      	movs	r3, #64	@ 0x40
 800d3aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800d3ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800d3b2:	2340      	movs	r3, #64	@ 0x40
 800d3b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800d3b6:	f107 030c 	add.w	r3, r7, #12
 800d3ba:	2104      	movs	r1, #4
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7f6 fbc1 	bl	8003b44 <HAL_RCC_ClockConfig>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d001      	beq.n	800d3cc <SystemClock_Config+0x148>
  {
    Error_Handler();
 800d3c8:	f000 f970 	bl	800d6ac <Error_Handler>
  }
}
 800d3cc:	bf00      	nop
 800d3ce:	3778      	adds	r7, #120	@ 0x78
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	58000400 	.word	0x58000400
 800d3d8:	58024800 	.word	0x58024800
 800d3dc:	58024400 	.word	0x58024400

0800d3e0 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b0b0      	sub	sp, #192	@ 0xc0
 800d3e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d3e6:	463b      	mov	r3, r7
 800d3e8:	22c0      	movs	r2, #192	@ 0xc0
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f002 fb54 	bl	800fa9a <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 800d3f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d3f6:	f04f 0300 	mov.w	r3, #0
 800d3fa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 800d3fe:	2319      	movs	r3, #25
 800d400:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 800d402:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800d406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800d408:	2302      	movs	r3, #2
 800d40a:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800d40c:	2302      	movs	r3, #2
 800d40e:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800d410:	2302      	movs	r3, #2
 800d412:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800d414:	2300      	movs	r3, #0
 800d416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800d418:	2300      	movs	r3, #0
 800d41a:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800d420:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d424:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d426:	463b      	mov	r3, r7
 800d428:	4618      	mov	r0, r3
 800d42a:	f7f6 ff43 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 800d434:	f000 f93a 	bl	800d6ac <Error_Handler>
  }
}
 800d438:	bf00      	nop
 800d43a:	37c0      	adds	r7, #192	@ 0xc0
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief 外部中断触发示例
 * @param GPIO_Pin 中断引脚
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	4603      	mov	r3, r0
 800d448:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == AD7606_BUSY_Pin)
 800d44a:	88fb      	ldrh	r3, [r7, #6]
 800d44c:	2b40      	cmp	r3, #64	@ 0x40
 800d44e:	d15f      	bne.n	800d510 <HAL_GPIO_EXTI_Callback+0xd0>
  {
    ad7606_GetValue(&hspi2, 3, adcBuf);
 800d450:	4a4c      	ldr	r2, [pc, #304]	@ (800d584 <HAL_GPIO_EXTI_Callback+0x144>)
 800d452:	2103      	movs	r1, #3
 800d454:	484c      	ldr	r0, [pc, #304]	@ (800d588 <HAL_GPIO_EXTI_Callback+0x148>)
 800d456:	f7fe f883 	bl	800b560 <ad7606_GetValue>
    // 缓存adcBuf
    signal_V->input[0] = adcBuf[1] * 100.f / 2.4026666666f;
 800d45a:	4b4a      	ldr	r3, [pc, #296]	@ (800d584 <HAL_GPIO_EXTI_Callback+0x144>)
 800d45c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d460:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800d58c <HAL_GPIO_EXTI_Callback+0x14c>
 800d464:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d468:	4b49      	ldr	r3, [pc, #292]	@ (800d590 <HAL_GPIO_EXTI_Callback+0x150>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 800d594 <HAL_GPIO_EXTI_Callback+0x154>
 800d470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d474:	edc3 7a00 	vstr	s15, [r3]
    signal_I->input[0] = adcBuf[2] * 2.5487179f;
 800d478:	4b42      	ldr	r3, [pc, #264]	@ (800d584 <HAL_GPIO_EXTI_Callback+0x144>)
 800d47a:	edd3 7a02 	vldr	s15, [r3, #8]
 800d47e:	4b46      	ldr	r3, [pc, #280]	@ (800d598 <HAL_GPIO_EXTI_Callback+0x158>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800d59c <HAL_GPIO_EXTI_Callback+0x15c>
 800d486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d48a:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control_V(signal_V);                         // 电压环
 800d48e:	4b40      	ldr	r3, [pc, #256]	@ (800d590 <HAL_GPIO_EXTI_Callback+0x150>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4618      	mov	r0, r3
 800d494:	f7fe fff8 	bl	800c488 <pll_Control_V>
    pll_Control_I(signal_I, signal_V, 50.f, dcVolt); // 电流环
 800d498:	4b3f      	ldr	r3, [pc, #252]	@ (800d598 <HAL_GPIO_EXTI_Callback+0x158>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a3c      	ldr	r2, [pc, #240]	@ (800d590 <HAL_GPIO_EXTI_Callback+0x150>)
 800d49e:	6812      	ldr	r2, [r2, #0]
 800d4a0:	493f      	ldr	r1, [pc, #252]	@ (800d5a0 <HAL_GPIO_EXTI_Callback+0x160>)
 800d4a2:	edd1 7a00 	vldr	s15, [r1]
 800d4a6:	eef0 0a67 	vmov.f32	s1, s15
 800d4aa:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800d5a4 <HAL_GPIO_EXTI_Callback+0x164>
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7ff f889 	bl	800c5c8 <pll_Control_I>
    // 调节SPWM占空比
    if (signal_I->pr->out[0] > 0)
 800d4b6:	4b38      	ldr	r3, [pc, #224]	@ (800d598 <HAL_GPIO_EXTI_Callback+0x158>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4bc:	edd3 7a02 	vldr	s15, [r3, #8]
 800d4c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c8:	dd10      	ble.n	800d4ec <HAL_GPIO_EXTI_Callback+0xac>
    {
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, signal_I->pr->out[0]);
 800d4ca:	4b33      	ldr	r3, [pc, #204]	@ (800d598 <HAL_GPIO_EXTI_Callback+0x158>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4d0:	edd3 7a02 	vldr	s15, [r3, #8]
 800d4d4:	4b34      	ldr	r3, [pc, #208]	@ (800d5a8 <HAL_GPIO_EXTI_Callback+0x168>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4dc:	ee17 2a90 	vmov	r2, s15
 800d4e0:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800d4e2:	4b31      	ldr	r3, [pc, #196]	@ (800d5a8 <HAL_GPIO_EXTI_Callback+0x168>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	639a      	str	r2, [r3, #56]	@ 0x38
 800d4ea:	e011      	b.n	800d510 <HAL_GPIO_EXTI_Callback+0xd0>
    }
    else
    {
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800d4ec:	4b2e      	ldr	r3, [pc, #184]	@ (800d5a8 <HAL_GPIO_EXTI_Callback+0x168>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -1.f * signal_I->pr->out[0]);
 800d4f4:	4b28      	ldr	r3, [pc, #160]	@ (800d598 <HAL_GPIO_EXTI_Callback+0x158>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4fa:	edd3 7a02 	vldr	s15, [r3, #8]
 800d4fe:	eef1 7a67 	vneg.f32	s15, s15
 800d502:	4b29      	ldr	r3, [pc, #164]	@ (800d5a8 <HAL_GPIO_EXTI_Callback+0x168>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d50a:	ee17 2a90 	vmov	r2, s15
 800d50e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  // 输出有效值滤波
  arm_biquad_cascade_df1_f32(iir_V, &signal_V->park_d, &signal_V->rms, iirBlockSize);
 800d510:	4b26      	ldr	r3, [pc, #152]	@ (800d5ac <HAL_GPIO_EXTI_Callback+0x16c>)
 800d512:	6818      	ldr	r0, [r3, #0]
 800d514:	4b1e      	ldr	r3, [pc, #120]	@ (800d590 <HAL_GPIO_EXTI_Callback+0x150>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f103 0110 	add.w	r1, r3, #16
 800d51c:	4b1c      	ldr	r3, [pc, #112]	@ (800d590 <HAL_GPIO_EXTI_Callback+0x150>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f103 020c 	add.w	r2, r3, #12
 800d524:	2301      	movs	r3, #1
 800d526:	f001 fb19 	bl	800eb5c <arm_biquad_cascade_df1_f32>
  arm_biquad_cascade_df1_f32(iir_I, &signal_I->park_d, &signal_I->rms, iirBlockSize);
 800d52a:	4b21      	ldr	r3, [pc, #132]	@ (800d5b0 <HAL_GPIO_EXTI_Callback+0x170>)
 800d52c:	6818      	ldr	r0, [r3, #0]
 800d52e:	4b1a      	ldr	r3, [pc, #104]	@ (800d598 <HAL_GPIO_EXTI_Callback+0x158>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f103 0110 	add.w	r1, r3, #16
 800d536:	4b18      	ldr	r3, [pc, #96]	@ (800d598 <HAL_GPIO_EXTI_Callback+0x158>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f103 020c 	add.w	r2, r3, #12
 800d53e:	2301      	movs	r3, #1
 800d540:	f001 fb0c 	bl	800eb5c <arm_biquad_cascade_df1_f32>
  // 调试输出
#if USER_DEBUG
  oled_Show();
#endif
  // DAC模拟输出，便于调试，不需要时可关闭
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_cos_f32(signal_V->theta) + 2048.f);
 800d544:	4b12      	ldr	r3, [pc, #72]	@ (800d590 <HAL_GPIO_EXTI_Callback+0x150>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	edd3 7a06 	vldr	s15, [r3, #24]
 800d54c:	eeb0 0a67 	vmov.f32	s0, s15
 800d550:	f001 fc48 	bl	800ede4 <arm_cos_f32>
 800d554:	eef0 7a40 	vmov.f32	s15, s0
 800d558:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800d5b4 <HAL_GPIO_EXTI_Callback+0x174>
 800d55c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d560:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800d5b8 <HAL_GPIO_EXTI_Callback+0x178>
 800d564:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d56c:	ee17 3a90 	vmov	r3, s15
 800d570:	2200      	movs	r2, #0
 800d572:	2100      	movs	r1, #0
 800d574:	4811      	ldr	r0, [pc, #68]	@ (800d5bc <HAL_GPIO_EXTI_Callback+0x17c>)
 800d576:	f7f3 f9e8 	bl	800094a <HAL_DAC_SetValue>
  // HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * (signal_I->input[0] / 4.f) + 2048.f);
  // HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (6000.f + signal_I->pr->out[0]) / 3.f);
}
 800d57a:	bf00      	nop
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	20000010 	.word	0x20000010
 800d588:	2400096c 	.word	0x2400096c
 800d58c:	42c80000 	.word	0x42c80000
 800d590:	20000000 	.word	0x20000000
 800d594:	4019c54a 	.word	0x4019c54a
 800d598:	20000004 	.word	0x20000004
 800d59c:	40231e32 	.word	0x40231e32
 800d5a0:	240007dc 	.word	0x240007dc
 800d5a4:	42480000 	.word	0x42480000
 800d5a8:	24000ad8 	.word	0x24000ad8
 800d5ac:	20000008 	.word	0x20000008
 800d5b0:	2000000c 	.word	0x2000000c
 800d5b4:	44fa0000 	.word	0x44fa0000
 800d5b8:	45000000 	.word	0x45000000
 800d5bc:	24000774 	.word	0x24000774

0800d5c0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	601a      	str	r2, [r3, #0]
 800d5cc:	605a      	str	r2, [r3, #4]
 800d5ce:	609a      	str	r2, [r3, #8]
 800d5d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800d5d2:	f7f3 f873 	bl	80006bc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800d5de:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800d5e2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800d5e4:	2312      	movs	r3, #18
 800d5e6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800d600:	2301      	movs	r3, #1
 800d602:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800d604:	463b      	mov	r3, r7
 800d606:	4618      	mov	r0, r3
 800d608:	f7f3 f890 	bl	800072c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800d60c:	2301      	movs	r3, #1
 800d60e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 800d610:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800d614:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800d616:	230f      	movs	r3, #15
 800d618:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800d61e:	2300      	movs	r3, #0
 800d620:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800d622:	463b      	mov	r3, r7
 800d624:	4618      	mov	r0, r3
 800d626:	f7f3 f881 	bl	800072c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800d62a:	2302      	movs	r3, #2
 800d62c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 800d62e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d632:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800d634:	2310      	movs	r3, #16
 800d636:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800d638:	463b      	mov	r3, r7
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7f3 f876 	bl	800072c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800d640:	2004      	movs	r0, #4
 800d642:	f7f3 f853 	bl	80006ec <HAL_MPU_Enable>
}
 800d646:	bf00      	nop
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
	...

0800d650 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4a0e      	ldr	r2, [pc, #56]	@ (800d698 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d101      	bne.n	800d666 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800d662:	f7f2 fefb 	bl	800045c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) // 100Hz
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a0c      	ldr	r2, [pc, #48]	@ (800d69c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d10f      	bne.n	800d690 <HAL_TIM_PeriodElapsedCallback+0x40>
  {
    // 控制中间直流电压
    dcVolt = ina238_GetVolt(&hi2c3);
 800d670:	480b      	ldr	r0, [pc, #44]	@ (800d6a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800d672:	f7fd fffd 	bl	800b670 <ina238_GetVolt>
 800d676:	eef0 7a40 	vmov.f32	s15, s0
 800d67a:	4b0a      	ldr	r3, [pc, #40]	@ (800d6a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800d67c:	edc3 7a00 	vstr	s15, [r3]
    dcCurrent = ina238_GetCurrent(&hi2c3);
 800d680:	4807      	ldr	r0, [pc, #28]	@ (800d6a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800d682:	f7fe f851 	bl	800b728 <ina238_GetCurrent>
 800d686:	eef0 7a40 	vmov.f32	s15, s0
 800d68a:	4b07      	ldr	r3, [pc, #28]	@ (800d6a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800d68c:	edc3 7a00 	vstr	s15, [r3]
  }
  /* USER CODE END Callback 1 */
}
 800d690:	bf00      	nop
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	40001000 	.word	0x40001000
 800d69c:	40000400 	.word	0x40000400
 800d6a0:	24000788 	.word	0x24000788
 800d6a4:	240007dc 	.word	0x240007dc
 800d6a8:	240007e0 	.word	0x240007e0

0800d6ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d6b0:	b672      	cpsid	i
}
 800d6b2:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    // 闪烁灯
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	480b      	ldr	r0, [pc, #44]	@ (800d6e4 <Error_Handler+0x38>)
 800d6b8:	f7f3 fca9 	bl	800100e <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 800d6bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d6c0:	f7f2 feec 	bl	800049c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800d6c4:	2101      	movs	r1, #1
 800d6c6:	4807      	ldr	r0, [pc, #28]	@ (800d6e4 <Error_Handler+0x38>)
 800d6c8:	f7f3 fca1 	bl	800100e <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800d6cc:	2064      	movs	r0, #100	@ 0x64
 800d6ce:	f7f2 fee5 	bl	800049c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800d6d2:	2101      	movs	r1, #1
 800d6d4:	4803      	ldr	r0, [pc, #12]	@ (800d6e4 <Error_Handler+0x38>)
 800d6d6:	f7f3 fc9a 	bl	800100e <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800d6da:	2064      	movs	r0, #100	@ 0x64
 800d6dc:	f7f2 fede 	bl	800049c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800d6e0:	bf00      	nop
 800d6e2:	e7e7      	b.n	800d6b4 <Error_Handler+0x8>
 800d6e4:	58022000 	.word	0x58022000

0800d6e8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800d6ec:	4b27      	ldr	r3, [pc, #156]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d6ee:	4a28      	ldr	r2, [pc, #160]	@ (800d790 <MX_SPI1_Init+0xa8>)
 800d6f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d6f2:	4b26      	ldr	r3, [pc, #152]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d6f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800d6f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800d6fa:	4b24      	ldr	r3, [pc, #144]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d6fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d700:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d702:	4b22      	ldr	r3, [pc, #136]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d704:	2207      	movs	r2, #7
 800d706:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d708:	4b20      	ldr	r3, [pc, #128]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d70e:	4b1f      	ldr	r3, [pc, #124]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d710:	2200      	movs	r2, #0
 800d712:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d714:	4b1d      	ldr	r3, [pc, #116]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d716:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800d71a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d71c:	4b1b      	ldr	r3, [pc, #108]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d71e:	2200      	movs	r2, #0
 800d720:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d722:	4b1a      	ldr	r3, [pc, #104]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d724:	2200      	movs	r2, #0
 800d726:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d728:	4b18      	ldr	r3, [pc, #96]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d72e:	4b17      	ldr	r3, [pc, #92]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d730:	2200      	movs	r2, #0
 800d732:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800d734:	4b15      	ldr	r3, [pc, #84]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d736:	2200      	movs	r2, #0
 800d738:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d73a:	4b14      	ldr	r3, [pc, #80]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d73c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800d740:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800d742:	4b12      	ldr	r3, [pc, #72]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d744:	2200      	movs	r2, #0
 800d746:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800d748:	4b10      	ldr	r3, [pc, #64]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d74a:	2200      	movs	r2, #0
 800d74c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d74e:	4b0f      	ldr	r3, [pc, #60]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d750:	2200      	movs	r2, #0
 800d752:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d754:	4b0d      	ldr	r3, [pc, #52]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d756:	2200      	movs	r2, #0
 800d758:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800d75a:	4b0c      	ldr	r3, [pc, #48]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d75c:	2200      	movs	r2, #0
 800d75e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800d760:	4b0a      	ldr	r3, [pc, #40]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d762:	2200      	movs	r2, #0
 800d764:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800d766:	4b09      	ldr	r3, [pc, #36]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d768:	2200      	movs	r2, #0
 800d76a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800d76c:	4b07      	ldr	r3, [pc, #28]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d76e:	2200      	movs	r2, #0
 800d770:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800d772:	4b06      	ldr	r3, [pc, #24]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d774:	2200      	movs	r2, #0
 800d776:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d778:	4804      	ldr	r0, [pc, #16]	@ (800d78c <MX_SPI1_Init+0xa4>)
 800d77a:	f7f8 f909 	bl	8005990 <HAL_SPI_Init>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d001      	beq.n	800d788 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800d784:	f7ff ff92 	bl	800d6ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d788:	bf00      	nop
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	240008e4 	.word	0x240008e4
 800d790:	40013000 	.word	0x40013000

0800d794 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800d798:	4b28      	ldr	r3, [pc, #160]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d79a:	4a29      	ldr	r2, [pc, #164]	@ (800d840 <MX_SPI2_Init+0xac>)
 800d79c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800d79e:	4b27      	ldr	r3, [pc, #156]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800d7a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800d7a6:	4b25      	ldr	r3, [pc, #148]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800d7ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800d7ae:	4b23      	ldr	r3, [pc, #140]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7b0:	220f      	movs	r2, #15
 800d7b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800d7b4:	4b21      	ldr	r3, [pc, #132]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d7ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d7bc:	4b1f      	ldr	r3, [pc, #124]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800d7c2:	4b1e      	ldr	r3, [pc, #120]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800d7c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800d7ca:	4b1c      	ldr	r3, [pc, #112]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7cc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800d7d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d7d2:	4b1a      	ldr	r3, [pc, #104]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d7d8:	4b18      	ldr	r3, [pc, #96]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d7de:	4b17      	ldr	r3, [pc, #92]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800d7e4:	4b15      	ldr	r3, [pc, #84]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d7ea:	4b14      	ldr	r3, [pc, #80]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800d7f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800d7f2:	4b12      	ldr	r3, [pc, #72]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800d7f8:	4b10      	ldr	r3, [pc, #64]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d7fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d800:	2200      	movs	r2, #0
 800d802:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d804:	4b0d      	ldr	r3, [pc, #52]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d806:	2200      	movs	r2, #0
 800d808:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800d80a:	4b0c      	ldr	r3, [pc, #48]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800d810:	4b0a      	ldr	r3, [pc, #40]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d812:	2200      	movs	r2, #0
 800d814:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800d816:	4b09      	ldr	r3, [pc, #36]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d818:	2200      	movs	r2, #0
 800d81a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800d81c:	4b07      	ldr	r3, [pc, #28]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d81e:	2200      	movs	r2, #0
 800d820:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800d822:	4b06      	ldr	r3, [pc, #24]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d824:	2200      	movs	r2, #0
 800d826:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d828:	4804      	ldr	r0, [pc, #16]	@ (800d83c <MX_SPI2_Init+0xa8>)
 800d82a:	f7f8 f8b1 	bl	8005990 <HAL_SPI_Init>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d001      	beq.n	800d838 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 800d834:	f7ff ff3a 	bl	800d6ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800d838:	bf00      	nop
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	2400096c 	.word	0x2400096c
 800d840:	40003800 	.word	0x40003800

0800d844 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08c      	sub	sp, #48	@ 0x30
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d84c:	f107 031c 	add.w	r3, r7, #28
 800d850:	2200      	movs	r2, #0
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	605a      	str	r2, [r3, #4]
 800d856:	609a      	str	r2, [r3, #8]
 800d858:	60da      	str	r2, [r3, #12]
 800d85a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a34      	ldr	r2, [pc, #208]	@ (800d934 <HAL_SPI_MspInit+0xf0>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d12e      	bne.n	800d8c4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d866:	4b34      	ldr	r3, [pc, #208]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d86c:	4a32      	ldr	r2, [pc, #200]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d86e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d876:	4b30      	ldr	r3, [pc, #192]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d87c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d880:	61bb      	str	r3, [r7, #24]
 800d882:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d884:	4b2c      	ldr	r3, [pc, #176]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d88a:	4a2b      	ldr	r2, [pc, #172]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d88c:	f043 0301 	orr.w	r3, r3, #1
 800d890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d894:	4b28      	ldr	r3, [pc, #160]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	617b      	str	r3, [r7, #20]
 800d8a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 800d8a2:	23a0      	movs	r3, #160	@ 0xa0
 800d8a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8a6:	2302      	movs	r3, #2
 800d8a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d8b2:	2305      	movs	r3, #5
 800d8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8b6:	f107 031c 	add.w	r3, r7, #28
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	481f      	ldr	r0, [pc, #124]	@ (800d93c <HAL_SPI_MspInit+0xf8>)
 800d8be:	f7f3 f9c5 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800d8c2:	e032      	b.n	800d92a <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800d940 <HAL_SPI_MspInit+0xfc>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d12d      	bne.n	800d92a <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d8ce:	4b1a      	ldr	r3, [pc, #104]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d8d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d8d4:	4a18      	ldr	r2, [pc, #96]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d8d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d8da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d8de:	4b16      	ldr	r3, [pc, #88]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d8e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d8e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d8e8:	613b      	str	r3, [r7, #16]
 800d8ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800d8ec:	4b12      	ldr	r3, [pc, #72]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d8ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d8f2:	4a11      	ldr	r2, [pc, #68]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d8f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d8fc:	4b0e      	ldr	r3, [pc, #56]	@ (800d938 <HAL_SPI_MspInit+0xf4>)
 800d8fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800d90a:	2306      	movs	r3, #6
 800d90c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d90e:	2302      	movs	r3, #2
 800d910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d912:	2300      	movs	r3, #0
 800d914:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d916:	2300      	movs	r3, #0
 800d918:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d91a:	2305      	movs	r3, #5
 800d91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d91e:	f107 031c 	add.w	r3, r7, #28
 800d922:	4619      	mov	r1, r3
 800d924:	4807      	ldr	r0, [pc, #28]	@ (800d944 <HAL_SPI_MspInit+0x100>)
 800d926:	f7f3 f991 	bl	8000c4c <HAL_GPIO_Init>
}
 800d92a:	bf00      	nop
 800d92c:	3730      	adds	r7, #48	@ 0x30
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	40013000 	.word	0x40013000
 800d938:	58024400 	.word	0x58024400
 800d93c:	58020000 	.word	0x58020000
 800d940:	40003800 	.word	0x40003800
 800d944:	58022000 	.word	0x58022000

0800d948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d94e:	4b0a      	ldr	r3, [pc, #40]	@ (800d978 <HAL_MspInit+0x30>)
 800d950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d954:	4a08      	ldr	r2, [pc, #32]	@ (800d978 <HAL_MspInit+0x30>)
 800d956:	f043 0302 	orr.w	r3, r3, #2
 800d95a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d95e:	4b06      	ldr	r3, [pc, #24]	@ (800d978 <HAL_MspInit+0x30>)
 800d960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d964:	f003 0302 	and.w	r3, r3, #2
 800d968:	607b      	str	r3, [r7, #4]
 800d96a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d96c:	bf00      	nop
 800d96e:	370c      	adds	r7, #12
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr
 800d978:	58024400 	.word	0x58024400

0800d97c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b090      	sub	sp, #64	@ 0x40
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b0f      	cmp	r3, #15
 800d988:	d827      	bhi.n	800d9da <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800d98a:	2200      	movs	r2, #0
 800d98c:	6879      	ldr	r1, [r7, #4]
 800d98e:	2036      	movs	r0, #54	@ 0x36
 800d990:	f7f2 fe6c 	bl	800066c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d994:	2036      	movs	r0, #54	@ 0x36
 800d996:	f7f2 fe83 	bl	80006a0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800d99a:	4a29      	ldr	r2, [pc, #164]	@ (800da40 <HAL_InitTick+0xc4>)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800d9a0:	4b28      	ldr	r3, [pc, #160]	@ (800da44 <HAL_InitTick+0xc8>)
 800d9a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9a6:	4a27      	ldr	r2, [pc, #156]	@ (800da44 <HAL_InitTick+0xc8>)
 800d9a8:	f043 0310 	orr.w	r3, r3, #16
 800d9ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d9b0:	4b24      	ldr	r3, [pc, #144]	@ (800da44 <HAL_InitTick+0xc8>)
 800d9b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9b6:	f003 0310 	and.w	r3, r3, #16
 800d9ba:	60fb      	str	r3, [r7, #12]
 800d9bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d9be:	f107 0210 	add.w	r2, r7, #16
 800d9c2:	f107 0314 	add.w	r3, r7, #20
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7f6 fc31 	bl	8004230 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800d9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d106      	bne.n	800d9e6 <HAL_InitTick+0x6a>
 800d9d8:	e001      	b.n	800d9de <HAL_InitTick+0x62>
    return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e02b      	b.n	800da36 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800d9de:	f7f6 fc11 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 800d9e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d9e4:	e004      	b.n	800d9f0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800d9e6:	f7f6 fc0d 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d9f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9f2:	4a15      	ldr	r2, [pc, #84]	@ (800da48 <HAL_InitTick+0xcc>)
 800d9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9f8:	0c9b      	lsrs	r3, r3, #18
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800d9fe:	4b13      	ldr	r3, [pc, #76]	@ (800da4c <HAL_InitTick+0xd0>)
 800da00:	4a13      	ldr	r2, [pc, #76]	@ (800da50 <HAL_InitTick+0xd4>)
 800da02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800da04:	4b11      	ldr	r3, [pc, #68]	@ (800da4c <HAL_InitTick+0xd0>)
 800da06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800da0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800da0c:	4a0f      	ldr	r2, [pc, #60]	@ (800da4c <HAL_InitTick+0xd0>)
 800da0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800da12:	4b0e      	ldr	r3, [pc, #56]	@ (800da4c <HAL_InitTick+0xd0>)
 800da14:	2200      	movs	r2, #0
 800da16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800da18:	4b0c      	ldr	r3, [pc, #48]	@ (800da4c <HAL_InitTick+0xd0>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800da1e:	480b      	ldr	r0, [pc, #44]	@ (800da4c <HAL_InitTick+0xd0>)
 800da20:	f7f8 fe23 	bl	800666a <HAL_TIM_Base_Init>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d104      	bne.n	800da34 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800da2a:	4808      	ldr	r0, [pc, #32]	@ (800da4c <HAL_InitTick+0xd0>)
 800da2c:	f7f8 fe74 	bl	8006718 <HAL_TIM_Base_Start_IT>
 800da30:	4603      	mov	r3, r0
 800da32:	e000      	b.n	800da36 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800da34:	2301      	movs	r3, #1
}
 800da36:	4618      	mov	r0, r3
 800da38:	3740      	adds	r7, #64	@ 0x40
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	24000000 	.word	0x24000000
 800da44:	58024400 	.word	0x58024400
 800da48:	431bde83 	.word	0x431bde83
 800da4c:	240009f4 	.word	0x240009f4
 800da50:	40001000 	.word	0x40001000

0800da54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800da54:	b480      	push	{r7}
 800da56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800da58:	bf00      	nop
 800da5a:	e7fd      	b.n	800da58 <NMI_Handler+0x4>

0800da5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800da5c:	b480      	push	{r7}
 800da5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800da60:	bf00      	nop
 800da62:	e7fd      	b.n	800da60 <HardFault_Handler+0x4>

0800da64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800da64:	b480      	push	{r7}
 800da66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800da68:	bf00      	nop
 800da6a:	e7fd      	b.n	800da68 <MemManage_Handler+0x4>

0800da6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800da6c:	b480      	push	{r7}
 800da6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800da70:	bf00      	nop
 800da72:	e7fd      	b.n	800da70 <BusFault_Handler+0x4>

0800da74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800da74:	b480      	push	{r7}
 800da76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800da78:	bf00      	nop
 800da7a:	e7fd      	b.n	800da78 <UsageFault_Handler+0x4>

0800da7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800da7c:	b480      	push	{r7}
 800da7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800da80:	bf00      	nop
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr

0800da8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800da8a:	b480      	push	{r7}
 800da8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800da8e:	bf00      	nop
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800da98:	b480      	push	{r7}
 800da9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800da9c:	bf00      	nop
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr

0800daa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800daa6:	b480      	push	{r7}
 800daa8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800daaa:	bf00      	nop
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 800dab8:	2040      	movs	r0, #64	@ 0x40
 800daba:	f7f3 fac2 	bl	8001042 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800dabe:	bf00      	nop
 800dac0:	bd80      	pop	{r7, pc}
	...

0800dac4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800dac8:	4802      	ldr	r0, [pc, #8]	@ (800dad4 <TIM3_IRQHandler+0x10>)
 800daca:	f7f9 f80d 	bl	8006ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800dace:	bf00      	nop
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	24000a8c 	.word	0x24000a8c

0800dad8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800dadc:	4b06      	ldr	r3, [pc, #24]	@ (800daf8 <TIM6_DAC_IRQHandler+0x20>)
 800dade:	791b      	ldrb	r3, [r3, #4]
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d002      	beq.n	800daec <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800dae6:	4804      	ldr	r0, [pc, #16]	@ (800daf8 <TIM6_DAC_IRQHandler+0x20>)
 800dae8:	f7f2 fed9 	bl	800089e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800daec:	4803      	ldr	r0, [pc, #12]	@ (800dafc <TIM6_DAC_IRQHandler+0x24>)
 800daee:	f7f8 fffb 	bl	8006ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800daf2:	bf00      	nop
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	24000774 	.word	0x24000774
 800dafc:	240009f4 	.word	0x240009f4

0800db00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800db04:	4802      	ldr	r0, [pc, #8]	@ (800db10 <OTG_FS_IRQHandler+0x10>)
 800db06:	f7f4 fa1b 	bl	8001f40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800db0a:	bf00      	nop
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	24001e00 	.word	0x24001e00

0800db14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800db14:	b480      	push	{r7}
 800db16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800db18:	4b37      	ldr	r3, [pc, #220]	@ (800dbf8 <SystemInit+0xe4>)
 800db1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db1e:	4a36      	ldr	r2, [pc, #216]	@ (800dbf8 <SystemInit+0xe4>)
 800db20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800db24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800db28:	4b34      	ldr	r3, [pc, #208]	@ (800dbfc <SystemInit+0xe8>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f003 030f 	and.w	r3, r3, #15
 800db30:	2b06      	cmp	r3, #6
 800db32:	d807      	bhi.n	800db44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800db34:	4b31      	ldr	r3, [pc, #196]	@ (800dbfc <SystemInit+0xe8>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f023 030f 	bic.w	r3, r3, #15
 800db3c:	4a2f      	ldr	r2, [pc, #188]	@ (800dbfc <SystemInit+0xe8>)
 800db3e:	f043 0307 	orr.w	r3, r3, #7
 800db42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800db44:	4b2e      	ldr	r3, [pc, #184]	@ (800dc00 <SystemInit+0xec>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a2d      	ldr	r2, [pc, #180]	@ (800dc00 <SystemInit+0xec>)
 800db4a:	f043 0301 	orr.w	r3, r3, #1
 800db4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800db50:	4b2b      	ldr	r3, [pc, #172]	@ (800dc00 <SystemInit+0xec>)
 800db52:	2200      	movs	r2, #0
 800db54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800db56:	4b2a      	ldr	r3, [pc, #168]	@ (800dc00 <SystemInit+0xec>)
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	4929      	ldr	r1, [pc, #164]	@ (800dc00 <SystemInit+0xec>)
 800db5c:	4b29      	ldr	r3, [pc, #164]	@ (800dc04 <SystemInit+0xf0>)
 800db5e:	4013      	ands	r3, r2
 800db60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800db62:	4b26      	ldr	r3, [pc, #152]	@ (800dbfc <SystemInit+0xe8>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0308 	and.w	r3, r3, #8
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d007      	beq.n	800db7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800db6e:	4b23      	ldr	r3, [pc, #140]	@ (800dbfc <SystemInit+0xe8>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f023 030f 	bic.w	r3, r3, #15
 800db76:	4a21      	ldr	r2, [pc, #132]	@ (800dbfc <SystemInit+0xe8>)
 800db78:	f043 0307 	orr.w	r3, r3, #7
 800db7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800db7e:	4b20      	ldr	r3, [pc, #128]	@ (800dc00 <SystemInit+0xec>)
 800db80:	2200      	movs	r2, #0
 800db82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800db84:	4b1e      	ldr	r3, [pc, #120]	@ (800dc00 <SystemInit+0xec>)
 800db86:	2200      	movs	r2, #0
 800db88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800db8a:	4b1d      	ldr	r3, [pc, #116]	@ (800dc00 <SystemInit+0xec>)
 800db8c:	2200      	movs	r2, #0
 800db8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800db90:	4b1b      	ldr	r3, [pc, #108]	@ (800dc00 <SystemInit+0xec>)
 800db92:	4a1d      	ldr	r2, [pc, #116]	@ (800dc08 <SystemInit+0xf4>)
 800db94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800db96:	4b1a      	ldr	r3, [pc, #104]	@ (800dc00 <SystemInit+0xec>)
 800db98:	4a1c      	ldr	r2, [pc, #112]	@ (800dc0c <SystemInit+0xf8>)
 800db9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800db9c:	4b18      	ldr	r3, [pc, #96]	@ (800dc00 <SystemInit+0xec>)
 800db9e:	4a1c      	ldr	r2, [pc, #112]	@ (800dc10 <SystemInit+0xfc>)
 800dba0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800dba2:	4b17      	ldr	r3, [pc, #92]	@ (800dc00 <SystemInit+0xec>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800dba8:	4b15      	ldr	r3, [pc, #84]	@ (800dc00 <SystemInit+0xec>)
 800dbaa:	4a19      	ldr	r2, [pc, #100]	@ (800dc10 <SystemInit+0xfc>)
 800dbac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800dbae:	4b14      	ldr	r3, [pc, #80]	@ (800dc00 <SystemInit+0xec>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800dbb4:	4b12      	ldr	r3, [pc, #72]	@ (800dc00 <SystemInit+0xec>)
 800dbb6:	4a16      	ldr	r2, [pc, #88]	@ (800dc10 <SystemInit+0xfc>)
 800dbb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800dbba:	4b11      	ldr	r3, [pc, #68]	@ (800dc00 <SystemInit+0xec>)
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800dbc0:	4b0f      	ldr	r3, [pc, #60]	@ (800dc00 <SystemInit+0xec>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a0e      	ldr	r2, [pc, #56]	@ (800dc00 <SystemInit+0xec>)
 800dbc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dbca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800dbcc:	4b0c      	ldr	r3, [pc, #48]	@ (800dc00 <SystemInit+0xec>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800dbd2:	4b10      	ldr	r3, [pc, #64]	@ (800dc14 <SystemInit+0x100>)
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	4b10      	ldr	r3, [pc, #64]	@ (800dc18 <SystemInit+0x104>)
 800dbd8:	4013      	ands	r3, r2
 800dbda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dbde:	d202      	bcs.n	800dbe6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800dbe0:	4b0e      	ldr	r3, [pc, #56]	@ (800dc1c <SystemInit+0x108>)
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800dbe6:	4b0e      	ldr	r3, [pc, #56]	@ (800dc20 <SystemInit+0x10c>)
 800dbe8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800dbec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800dbee:	bf00      	nop
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	e000ed00 	.word	0xe000ed00
 800dbfc:	52002000 	.word	0x52002000
 800dc00:	58024400 	.word	0x58024400
 800dc04:	eaf6ed7f 	.word	0xeaf6ed7f
 800dc08:	02020200 	.word	0x02020200
 800dc0c:	01ff0000 	.word	0x01ff0000
 800dc10:	01010280 	.word	0x01010280
 800dc14:	5c001000 	.word	0x5c001000
 800dc18:	ffff0000 	.word	0xffff0000
 800dc1c:	51008108 	.word	0x51008108
 800dc20:	52004000 	.word	0x52004000

0800dc24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b08e      	sub	sp, #56	@ 0x38
 800dc28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dc2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dc2e:	2200      	movs	r2, #0
 800dc30:	601a      	str	r2, [r3, #0]
 800dc32:	605a      	str	r2, [r3, #4]
 800dc34:	609a      	str	r2, [r3, #8]
 800dc36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc38:	f107 031c 	add.w	r3, r7, #28
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	601a      	str	r2, [r3, #0]
 800dc40:	605a      	str	r2, [r3, #4]
 800dc42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc44:	463b      	mov	r3, r7
 800dc46:	2200      	movs	r2, #0
 800dc48:	601a      	str	r2, [r3, #0]
 800dc4a:	605a      	str	r2, [r3, #4]
 800dc4c:	609a      	str	r2, [r3, #8]
 800dc4e:	60da      	str	r2, [r3, #12]
 800dc50:	611a      	str	r2, [r3, #16]
 800dc52:	615a      	str	r2, [r3, #20]
 800dc54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dc56:	4b2e      	ldr	r3, [pc, #184]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dc58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800dc5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800dc5e:	4b2c      	ldr	r3, [pc, #176]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dc60:	2200      	movs	r2, #0
 800dc62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc64:	4b2a      	ldr	r3, [pc, #168]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 800dc6a:	4b29      	ldr	r3, [pc, #164]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dc6c:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800dc70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc72:	4b27      	ldr	r3, [pc, #156]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc78:	4b25      	ldr	r3, [pc, #148]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800dc7e:	4824      	ldr	r0, [pc, #144]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dc80:	f7f8 fcf3 	bl	800666a <HAL_TIM_Base_Init>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800dc8a:	f7ff fd0f 	bl	800d6ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dc8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc92:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800dc94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dc98:	4619      	mov	r1, r3
 800dc9a:	481d      	ldr	r0, [pc, #116]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dc9c:	f7f9 f940 	bl	8006f20 <HAL_TIM_ConfigClockSource>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d001      	beq.n	800dcaa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800dca6:	f7ff fd01 	bl	800d6ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dcaa:	4819      	ldr	r0, [pc, #100]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dcac:	f7f8 fdac 	bl	8006808 <HAL_TIM_PWM_Init>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800dcb6:	f7ff fcf9 	bl	800d6ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dcc2:	f107 031c 	add.w	r3, r7, #28
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	4811      	ldr	r0, [pc, #68]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dcca:	f7f9 ff4b 	bl	8007b64 <HAL_TIMEx_MasterConfigSynchronization>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d001      	beq.n	800dcd8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800dcd4:	f7ff fcea 	bl	800d6ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dcd8:	2360      	movs	r3, #96	@ 0x60
 800dcda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 800dcdc:	f242 3327 	movw	r3, #8999	@ 0x2327
 800dce0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dce2:	2300      	movs	r3, #0
 800dce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dce6:	2300      	movs	r3, #0
 800dce8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dcea:	463b      	mov	r3, r7
 800dcec:	2200      	movs	r2, #0
 800dcee:	4619      	mov	r1, r3
 800dcf0:	4807      	ldr	r0, [pc, #28]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dcf2:	f7f9 f801 	bl	8006cf8 <HAL_TIM_PWM_ConfigChannel>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d001      	beq.n	800dd00 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800dcfc:	f7ff fcd6 	bl	800d6ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dd00:	4803      	ldr	r0, [pc, #12]	@ (800dd10 <MX_TIM2_Init+0xec>)
 800dd02:	f000 f961 	bl	800dfc8 <HAL_TIM_MspPostInit>

}
 800dd06:	bf00      	nop
 800dd08:	3738      	adds	r7, #56	@ 0x38
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	24000a40 	.word	0x24000a40

0800dd14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b088      	sub	sp, #32
 800dd18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dd1a:	f107 0310 	add.w	r3, r7, #16
 800dd1e:	2200      	movs	r2, #0
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	605a      	str	r2, [r3, #4]
 800dd24:	609a      	str	r2, [r3, #8]
 800dd26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd28:	1d3b      	adds	r3, r7, #4
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	601a      	str	r2, [r3, #0]
 800dd2e:	605a      	str	r2, [r3, #4]
 800dd30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dd32:	4b1d      	ldr	r3, [pc, #116]	@ (800dda8 <MX_TIM3_Init+0x94>)
 800dd34:	4a1d      	ldr	r2, [pc, #116]	@ (800ddac <MX_TIM3_Init+0x98>)
 800dd36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800dd38:	4b1b      	ldr	r3, [pc, #108]	@ (800dda8 <MX_TIM3_Init+0x94>)
 800dd3a:	2263      	movs	r2, #99	@ 0x63
 800dd3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd3e:	4b1a      	ldr	r3, [pc, #104]	@ (800dda8 <MX_TIM3_Init+0x94>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24000-1;
 800dd44:	4b18      	ldr	r3, [pc, #96]	@ (800dda8 <MX_TIM3_Init+0x94>)
 800dd46:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800dd4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd4c:	4b16      	ldr	r3, [pc, #88]	@ (800dda8 <MX_TIM3_Init+0x94>)
 800dd4e:	2200      	movs	r2, #0
 800dd50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd52:	4b15      	ldr	r3, [pc, #84]	@ (800dda8 <MX_TIM3_Init+0x94>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800dd58:	4813      	ldr	r0, [pc, #76]	@ (800dda8 <MX_TIM3_Init+0x94>)
 800dd5a:	f7f8 fc86 	bl	800666a <HAL_TIM_Base_Init>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800dd64:	f7ff fca2 	bl	800d6ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dd68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800dd6e:	f107 0310 	add.w	r3, r7, #16
 800dd72:	4619      	mov	r1, r3
 800dd74:	480c      	ldr	r0, [pc, #48]	@ (800dda8 <MX_TIM3_Init+0x94>)
 800dd76:	f7f9 f8d3 	bl	8006f20 <HAL_TIM_ConfigClockSource>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d001      	beq.n	800dd84 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800dd80:	f7ff fc94 	bl	800d6ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd84:	2300      	movs	r3, #0
 800dd86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dd8c:	1d3b      	adds	r3, r7, #4
 800dd8e:	4619      	mov	r1, r3
 800dd90:	4805      	ldr	r0, [pc, #20]	@ (800dda8 <MX_TIM3_Init+0x94>)
 800dd92:	f7f9 fee7 	bl	8007b64 <HAL_TIMEx_MasterConfigSynchronization>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d001      	beq.n	800dda0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800dd9c:	f7ff fc86 	bl	800d6ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800dda0:	bf00      	nop
 800dda2:	3720      	adds	r7, #32
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	24000a8c 	.word	0x24000a8c
 800ddac:	40000400 	.word	0x40000400

0800ddb0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b09a      	sub	sp, #104	@ 0x68
 800ddb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ddb6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800ddba:	2200      	movs	r2, #0
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	605a      	str	r2, [r3, #4]
 800ddc0:	609a      	str	r2, [r3, #8]
 800ddc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ddc4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ddc8:	2200      	movs	r2, #0
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	605a      	str	r2, [r3, #4]
 800ddce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ddd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	605a      	str	r2, [r3, #4]
 800ddda:	609a      	str	r2, [r3, #8]
 800dddc:	60da      	str	r2, [r3, #12]
 800ddde:	611a      	str	r2, [r3, #16]
 800dde0:	615a      	str	r2, [r3, #20]
 800dde2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800dde4:	1d3b      	adds	r3, r7, #4
 800dde6:	222c      	movs	r2, #44	@ 0x2c
 800dde8:	2100      	movs	r1, #0
 800ddea:	4618      	mov	r0, r3
 800ddec:	f001 fe55 	bl	800fa9a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800ddf0:	4b49      	ldr	r3, [pc, #292]	@ (800df18 <MX_TIM8_Init+0x168>)
 800ddf2:	4a4a      	ldr	r2, [pc, #296]	@ (800df1c <MX_TIM8_Init+0x16c>)
 800ddf4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800ddf6:	4b48      	ldr	r3, [pc, #288]	@ (800df18 <MX_TIM8_Init+0x168>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ddfc:	4b46      	ldr	r3, [pc, #280]	@ (800df18 <MX_TIM8_Init+0x168>)
 800ddfe:	2200      	movs	r2, #0
 800de00:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 800de02:	4b45      	ldr	r3, [pc, #276]	@ (800df18 <MX_TIM8_Init+0x168>)
 800de04:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800de08:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de0a:	4b43      	ldr	r3, [pc, #268]	@ (800df18 <MX_TIM8_Init+0x168>)
 800de0c:	2200      	movs	r2, #0
 800de0e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800de10:	4b41      	ldr	r3, [pc, #260]	@ (800df18 <MX_TIM8_Init+0x168>)
 800de12:	2200      	movs	r2, #0
 800de14:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de16:	4b40      	ldr	r3, [pc, #256]	@ (800df18 <MX_TIM8_Init+0x168>)
 800de18:	2200      	movs	r2, #0
 800de1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800de1c:	483e      	ldr	r0, [pc, #248]	@ (800df18 <MX_TIM8_Init+0x168>)
 800de1e:	f7f8 fc24 	bl	800666a <HAL_TIM_Base_Init>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d001      	beq.n	800de2c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800de28:	f7ff fc40 	bl	800d6ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800de2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de30:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800de32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800de36:	4619      	mov	r1, r3
 800de38:	4837      	ldr	r0, [pc, #220]	@ (800df18 <MX_TIM8_Init+0x168>)
 800de3a:	f7f9 f871 	bl	8006f20 <HAL_TIM_ConfigClockSource>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d001      	beq.n	800de48 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800de44:	f7ff fc32 	bl	800d6ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800de48:	4833      	ldr	r0, [pc, #204]	@ (800df18 <MX_TIM8_Init+0x168>)
 800de4a:	f7f8 fcdd 	bl	8006808 <HAL_TIM_PWM_Init>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d001      	beq.n	800de58 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800de54:	f7ff fc2a 	bl	800d6ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de58:	2300      	movs	r3, #0
 800de5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800de5c:	2300      	movs	r3, #0
 800de5e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de60:	2300      	movs	r3, #0
 800de62:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800de64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800de68:	4619      	mov	r1, r3
 800de6a:	482b      	ldr	r0, [pc, #172]	@ (800df18 <MX_TIM8_Init+0x168>)
 800de6c:	f7f9 fe7a 	bl	8007b64 <HAL_TIMEx_MasterConfigSynchronization>
 800de70:	4603      	mov	r3, r0
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800de76:	f7ff fc19 	bl	800d6ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800de7a:	2360      	movs	r3, #96	@ 0x60
 800de7c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800de7e:	2300      	movs	r3, #0
 800de80:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800de82:	2300      	movs	r3, #0
 800de84:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800de86:	2300      	movs	r3, #0
 800de88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800de8a:	2300      	movs	r3, #0
 800de8c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800de8e:	2300      	movs	r3, #0
 800de90:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800de92:	2300      	movs	r3, #0
 800de94:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800de96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800de9a:	2200      	movs	r2, #0
 800de9c:	4619      	mov	r1, r3
 800de9e:	481e      	ldr	r0, [pc, #120]	@ (800df18 <MX_TIM8_Init+0x168>)
 800dea0:	f7f8 ff2a 	bl	8006cf8 <HAL_TIM_PWM_ConfigChannel>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800deaa:	f7ff fbff 	bl	800d6ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800deae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800deb2:	2204      	movs	r2, #4
 800deb4:	4619      	mov	r1, r3
 800deb6:	4818      	ldr	r0, [pc, #96]	@ (800df18 <MX_TIM8_Init+0x168>)
 800deb8:	f7f8 ff1e 	bl	8006cf8 <HAL_TIM_PWM_ConfigChannel>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800dec2:	f7ff fbf3 	bl	800d6ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800dec6:	2300      	movs	r3, #0
 800dec8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800deca:	2300      	movs	r3, #0
 800decc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800dece:	2300      	movs	r3, #0
 800ded0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800ded2:	2300      	movs	r3, #0
 800ded4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800deda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dede:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800dee0:	2300      	movs	r3, #0
 800dee2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800dee4:	2300      	movs	r3, #0
 800dee6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800dee8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800deec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800deee:	2300      	movs	r3, #0
 800def0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800def2:	2300      	movs	r3, #0
 800def4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800def6:	1d3b      	adds	r3, r7, #4
 800def8:	4619      	mov	r1, r3
 800defa:	4807      	ldr	r0, [pc, #28]	@ (800df18 <MX_TIM8_Init+0x168>)
 800defc:	f7f9 fec0 	bl	8007c80 <HAL_TIMEx_ConfigBreakDeadTime>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800df06:	f7ff fbd1 	bl	800d6ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800df0a:	4803      	ldr	r0, [pc, #12]	@ (800df18 <MX_TIM8_Init+0x168>)
 800df0c:	f000 f85c 	bl	800dfc8 <HAL_TIM_MspPostInit>

}
 800df10:	bf00      	nop
 800df12:	3768      	adds	r7, #104	@ 0x68
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	24000ad8 	.word	0x24000ad8
 800df1c:	40010400 	.word	0x40010400

0800df20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b086      	sub	sp, #24
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df30:	d10f      	bne.n	800df52 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800df32:	4b22      	ldr	r3, [pc, #136]	@ (800dfbc <HAL_TIM_Base_MspInit+0x9c>)
 800df34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800df38:	4a20      	ldr	r2, [pc, #128]	@ (800dfbc <HAL_TIM_Base_MspInit+0x9c>)
 800df3a:	f043 0301 	orr.w	r3, r3, #1
 800df3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800df42:	4b1e      	ldr	r3, [pc, #120]	@ (800dfbc <HAL_TIM_Base_MspInit+0x9c>)
 800df44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800df48:	f003 0301 	and.w	r3, r3, #1
 800df4c:	617b      	str	r3, [r7, #20]
 800df4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800df50:	e030      	b.n	800dfb4 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM3)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a1a      	ldr	r2, [pc, #104]	@ (800dfc0 <HAL_TIM_Base_MspInit+0xa0>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d117      	bne.n	800df8c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800df5c:	4b17      	ldr	r3, [pc, #92]	@ (800dfbc <HAL_TIM_Base_MspInit+0x9c>)
 800df5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800df62:	4a16      	ldr	r2, [pc, #88]	@ (800dfbc <HAL_TIM_Base_MspInit+0x9c>)
 800df64:	f043 0302 	orr.w	r3, r3, #2
 800df68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800df6c:	4b13      	ldr	r3, [pc, #76]	@ (800dfbc <HAL_TIM_Base_MspInit+0x9c>)
 800df6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800df72:	f003 0302 	and.w	r3, r3, #2
 800df76:	613b      	str	r3, [r7, #16]
 800df78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800df7a:	2200      	movs	r2, #0
 800df7c:	2101      	movs	r1, #1
 800df7e:	201d      	movs	r0, #29
 800df80:	f7f2 fb74 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800df84:	201d      	movs	r0, #29
 800df86:	f7f2 fb8b 	bl	80006a0 <HAL_NVIC_EnableIRQ>
}
 800df8a:	e013      	b.n	800dfb4 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM8)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a0c      	ldr	r2, [pc, #48]	@ (800dfc4 <HAL_TIM_Base_MspInit+0xa4>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d10e      	bne.n	800dfb4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800df96:	4b09      	ldr	r3, [pc, #36]	@ (800dfbc <HAL_TIM_Base_MspInit+0x9c>)
 800df98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df9c:	4a07      	ldr	r2, [pc, #28]	@ (800dfbc <HAL_TIM_Base_MspInit+0x9c>)
 800df9e:	f043 0302 	orr.w	r3, r3, #2
 800dfa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800dfa6:	4b05      	ldr	r3, [pc, #20]	@ (800dfbc <HAL_TIM_Base_MspInit+0x9c>)
 800dfa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dfac:	f003 0302 	and.w	r3, r3, #2
 800dfb0:	60fb      	str	r3, [r7, #12]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
}
 800dfb4:	bf00      	nop
 800dfb6:	3718      	adds	r7, #24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	58024400 	.word	0x58024400
 800dfc0:	40000400 	.word	0x40000400
 800dfc4:	40010400 	.word	0x40010400

0800dfc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08c      	sub	sp, #48	@ 0x30
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfd0:	f107 031c 	add.w	r3, r7, #28
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	605a      	str	r2, [r3, #4]
 800dfda:	609a      	str	r2, [r3, #8]
 800dfdc:	60da      	str	r2, [r3, #12]
 800dfde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfe8:	d11f      	bne.n	800e02a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfea:	4b43      	ldr	r3, [pc, #268]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800dfec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dff0:	4a41      	ldr	r2, [pc, #260]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800dff2:	f043 0301 	orr.w	r3, r3, #1
 800dff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800dffa:	4b3f      	ldr	r3, [pc, #252]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800dffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e000:	f003 0301 	and.w	r3, r3, #1
 800e004:	61bb      	str	r3, [r7, #24]
 800e006:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e008:	2301      	movs	r3, #1
 800e00a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e00c:	2302      	movs	r3, #2
 800e00e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e010:	2300      	movs	r3, #0
 800e012:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e014:	2303      	movs	r3, #3
 800e016:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e018:	2301      	movs	r3, #1
 800e01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e01c:	f107 031c 	add.w	r3, r7, #28
 800e020:	4619      	mov	r1, r3
 800e022:	4836      	ldr	r0, [pc, #216]	@ (800e0fc <HAL_TIM_MspPostInit+0x134>)
 800e024:	f7f2 fe12 	bl	8000c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800e028:	e062      	b.n	800e0f0 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM8)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a34      	ldr	r2, [pc, #208]	@ (800e100 <HAL_TIM_MspPostInit+0x138>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d15d      	bne.n	800e0f0 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e034:	4b30      	ldr	r3, [pc, #192]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800e036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e03a:	4a2f      	ldr	r2, [pc, #188]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800e03c:	f043 0302 	orr.w	r3, r3, #2
 800e040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e044:	4b2c      	ldr	r3, [pc, #176]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800e046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e04a:	f003 0302 	and.w	r3, r3, #2
 800e04e:	617b      	str	r3, [r7, #20]
 800e050:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e052:	4b29      	ldr	r3, [pc, #164]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800e054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e058:	4a27      	ldr	r2, [pc, #156]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800e05a:	f043 0304 	orr.w	r3, r3, #4
 800e05e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e062:	4b25      	ldr	r3, [pc, #148]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800e064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e068:	f003 0304 	and.w	r3, r3, #4
 800e06c:	613b      	str	r3, [r7, #16]
 800e06e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800e070:	4b21      	ldr	r3, [pc, #132]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800e072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e076:	4a20      	ldr	r2, [pc, #128]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800e078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e07c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e080:	4b1d      	ldr	r3, [pc, #116]	@ (800e0f8 <HAL_TIM_MspPostInit+0x130>)
 800e082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e08a:	60fb      	str	r3, [r7, #12]
 800e08c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e08e:	2301      	movs	r3, #1
 800e090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e092:	2302      	movs	r3, #2
 800e094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e096:	2300      	movs	r3, #0
 800e098:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e09a:	2303      	movs	r3, #3
 800e09c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e09e:	2303      	movs	r3, #3
 800e0a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e0a2:	f107 031c 	add.w	r3, r7, #28
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	4816      	ldr	r0, [pc, #88]	@ (800e104 <HAL_TIM_MspPostInit+0x13c>)
 800e0aa:	f7f2 fdcf 	bl	8000c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e0ae:	23c0      	movs	r3, #192	@ 0xc0
 800e0b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0b2:	2302      	movs	r3, #2
 800e0b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0ba:	2303      	movs	r3, #3
 800e0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e0be:	2303      	movs	r3, #3
 800e0c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e0c2:	f107 031c 	add.w	r3, r7, #28
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	480f      	ldr	r0, [pc, #60]	@ (800e108 <HAL_TIM_MspPostInit+0x140>)
 800e0ca:	f7f2 fdbf 	bl	8000c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e0ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e0d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0d4:	2302      	movs	r3, #2
 800e0d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e0e4:	f107 031c 	add.w	r3, r7, #28
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4808      	ldr	r0, [pc, #32]	@ (800e10c <HAL_TIM_MspPostInit+0x144>)
 800e0ec:	f7f2 fdae 	bl	8000c4c <HAL_GPIO_Init>
}
 800e0f0:	bf00      	nop
 800e0f2:	3730      	adds	r7, #48	@ 0x30
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	58024400 	.word	0x58024400
 800e0fc:	58020000 	.word	0x58020000
 800e100:	40010400 	.word	0x40010400
 800e104:	58020400 	.word	0x58020400
 800e108:	58020800 	.word	0x58020800
 800e10c:	58021c00 	.word	0x58021c00

0800e110 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e114:	2200      	movs	r2, #0
 800e116:	4913      	ldr	r1, [pc, #76]	@ (800e164 <MX_USB_DEVICE_Init+0x54>)
 800e118:	4813      	ldr	r0, [pc, #76]	@ (800e168 <MX_USB_DEVICE_Init+0x58>)
 800e11a:	f7fb fe57 	bl	8009dcc <USBD_Init>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e124:	f7ff fac2 	bl	800d6ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e128:	4910      	ldr	r1, [pc, #64]	@ (800e16c <MX_USB_DEVICE_Init+0x5c>)
 800e12a:	480f      	ldr	r0, [pc, #60]	@ (800e168 <MX_USB_DEVICE_Init+0x58>)
 800e12c:	f7fb fe7e 	bl	8009e2c <USBD_RegisterClass>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d001      	beq.n	800e13a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e136:	f7ff fab9 	bl	800d6ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e13a:	490d      	ldr	r1, [pc, #52]	@ (800e170 <MX_USB_DEVICE_Init+0x60>)
 800e13c:	480a      	ldr	r0, [pc, #40]	@ (800e168 <MX_USB_DEVICE_Init+0x58>)
 800e13e:	f7fb fdb5 	bl	8009cac <USBD_CDC_RegisterInterface>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e148:	f7ff fab0 	bl	800d6ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e14c:	4806      	ldr	r0, [pc, #24]	@ (800e168 <MX_USB_DEVICE_Init+0x58>)
 800e14e:	f7fb fea3 	bl	8009e98 <USBD_Start>
 800e152:	4603      	mov	r3, r0
 800e154:	2b00      	cmp	r3, #0
 800e156:	d001      	beq.n	800e15c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e158:	f7ff faa8 	bl	800d6ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e15c:	f7f5 f888 	bl	8003270 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e160:	bf00      	nop
 800e162:	bd80      	pop	{r7, pc}
 800e164:	240000b0 	.word	0x240000b0
 800e168:	24000b24 	.word	0x24000b24
 800e16c:	24000014 	.word	0x24000014
 800e170:	2400009c 	.word	0x2400009c

0800e174 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e178:	2200      	movs	r2, #0
 800e17a:	4905      	ldr	r1, [pc, #20]	@ (800e190 <CDC_Init_FS+0x1c>)
 800e17c:	4805      	ldr	r0, [pc, #20]	@ (800e194 <CDC_Init_FS+0x20>)
 800e17e:	f7fb fdaf 	bl	8009ce0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e182:	4905      	ldr	r1, [pc, #20]	@ (800e198 <CDC_Init_FS+0x24>)
 800e184:	4803      	ldr	r0, [pc, #12]	@ (800e194 <CDC_Init_FS+0x20>)
 800e186:	f7fb fdcd 	bl	8009d24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e18a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	24001600 	.word	0x24001600
 800e194:	24000b24 	.word	0x24000b24
 800e198:	24000e00 	.word	0x24000e00

0800e19c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e19c:	b480      	push	{r7}
 800e19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e1a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	6039      	str	r1, [r7, #0]
 800e1b6:	71fb      	strb	r3, [r7, #7]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e1bc:	79fb      	ldrb	r3, [r7, #7]
 800e1be:	2b23      	cmp	r3, #35	@ 0x23
 800e1c0:	d84a      	bhi.n	800e258 <CDC_Control_FS+0xac>
 800e1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800e1c8 <CDC_Control_FS+0x1c>)
 800e1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c8:	0800e259 	.word	0x0800e259
 800e1cc:	0800e259 	.word	0x0800e259
 800e1d0:	0800e259 	.word	0x0800e259
 800e1d4:	0800e259 	.word	0x0800e259
 800e1d8:	0800e259 	.word	0x0800e259
 800e1dc:	0800e259 	.word	0x0800e259
 800e1e0:	0800e259 	.word	0x0800e259
 800e1e4:	0800e259 	.word	0x0800e259
 800e1e8:	0800e259 	.word	0x0800e259
 800e1ec:	0800e259 	.word	0x0800e259
 800e1f0:	0800e259 	.word	0x0800e259
 800e1f4:	0800e259 	.word	0x0800e259
 800e1f8:	0800e259 	.word	0x0800e259
 800e1fc:	0800e259 	.word	0x0800e259
 800e200:	0800e259 	.word	0x0800e259
 800e204:	0800e259 	.word	0x0800e259
 800e208:	0800e259 	.word	0x0800e259
 800e20c:	0800e259 	.word	0x0800e259
 800e210:	0800e259 	.word	0x0800e259
 800e214:	0800e259 	.word	0x0800e259
 800e218:	0800e259 	.word	0x0800e259
 800e21c:	0800e259 	.word	0x0800e259
 800e220:	0800e259 	.word	0x0800e259
 800e224:	0800e259 	.word	0x0800e259
 800e228:	0800e259 	.word	0x0800e259
 800e22c:	0800e259 	.word	0x0800e259
 800e230:	0800e259 	.word	0x0800e259
 800e234:	0800e259 	.word	0x0800e259
 800e238:	0800e259 	.word	0x0800e259
 800e23c:	0800e259 	.word	0x0800e259
 800e240:	0800e259 	.word	0x0800e259
 800e244:	0800e259 	.word	0x0800e259
 800e248:	0800e259 	.word	0x0800e259
 800e24c:	0800e259 	.word	0x0800e259
 800e250:	0800e259 	.word	0x0800e259
 800e254:	0800e259 	.word	0x0800e259
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e258:	bf00      	nop
  }

  return (USBD_OK);
 800e25a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr

0800e268 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e272:	6879      	ldr	r1, [r7, #4]
 800e274:	4805      	ldr	r0, [pc, #20]	@ (800e28c <CDC_Receive_FS+0x24>)
 800e276:	f7fb fd55 	bl	8009d24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e27a:	4804      	ldr	r0, [pc, #16]	@ (800e28c <CDC_Receive_FS+0x24>)
 800e27c:	f7fb fd70 	bl	8009d60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e280:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e282:	4618      	mov	r0, r3
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	24000b24 	.word	0x24000b24

0800e290 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e290:	b480      	push	{r7}
 800e292:	b087      	sub	sp, #28
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	4613      	mov	r3, r2
 800e29c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e2a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	371c      	adds	r7, #28
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr
	...

0800e2b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b0ba      	sub	sp, #232	@ 0xe8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	605a      	str	r2, [r3, #4]
 800e2c6:	609a      	str	r2, [r3, #8]
 800e2c8:	60da      	str	r2, [r3, #12]
 800e2ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e2cc:	f107 0310 	add.w	r3, r7, #16
 800e2d0:	22c0      	movs	r2, #192	@ 0xc0
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f001 fbe0 	bl	800fa9a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a2c      	ldr	r2, [pc, #176]	@ (800e390 <HAL_PCD_MspInit+0xdc>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d151      	bne.n	800e388 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e2e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e2e8:	f04f 0300 	mov.w	r3, #0
 800e2ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800e2f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e2f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e2f8:	f107 0310 	add.w	r3, r7, #16
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7f5 ffd9 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800e308:	f7ff f9d0 	bl	800d6ac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e30c:	f7f4 ffb0 	bl	8003270 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e310:	4b20      	ldr	r3, [pc, #128]	@ (800e394 <HAL_PCD_MspInit+0xe0>)
 800e312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e316:	4a1f      	ldr	r2, [pc, #124]	@ (800e394 <HAL_PCD_MspInit+0xe0>)
 800e318:	f043 0301 	orr.w	r3, r3, #1
 800e31c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e320:	4b1c      	ldr	r3, [pc, #112]	@ (800e394 <HAL_PCD_MspInit+0xe0>)
 800e322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e326:	f003 0301 	and.w	r3, r3, #1
 800e32a:	60fb      	str	r3, [r7, #12]
 800e32c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e32e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e336:	2302      	movs	r3, #2
 800e338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e33c:	2300      	movs	r3, #0
 800e33e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e342:	2300      	movs	r3, #0
 800e344:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e348:	230a      	movs	r3, #10
 800e34a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e34e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e352:	4619      	mov	r1, r3
 800e354:	4810      	ldr	r0, [pc, #64]	@ (800e398 <HAL_PCD_MspInit+0xe4>)
 800e356:	f7f2 fc79 	bl	8000c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e35a:	4b0e      	ldr	r3, [pc, #56]	@ (800e394 <HAL_PCD_MspInit+0xe0>)
 800e35c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e360:	4a0c      	ldr	r2, [pc, #48]	@ (800e394 <HAL_PCD_MspInit+0xe0>)
 800e362:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e366:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e36a:	4b0a      	ldr	r3, [pc, #40]	@ (800e394 <HAL_PCD_MspInit+0xe0>)
 800e36c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e374:	60bb      	str	r3, [r7, #8]
 800e376:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e378:	2200      	movs	r2, #0
 800e37a:	2100      	movs	r1, #0
 800e37c:	2065      	movs	r0, #101	@ 0x65
 800e37e:	f7f2 f975 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e382:	2065      	movs	r0, #101	@ 0x65
 800e384:	f7f2 f98c 	bl	80006a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e388:	bf00      	nop
 800e38a:	37e8      	adds	r7, #232	@ 0xe8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	40080000 	.word	0x40080000
 800e394:	58024400 	.word	0x58024400
 800e398:	58020000 	.word	0x58020000

0800e39c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	f7fb fdbd 	bl	8009f32 <USBD_LL_SetupStage>
}
 800e3b8:	bf00      	nop
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e3d2:	78fa      	ldrb	r2, [r7, #3]
 800e3d4:	6879      	ldr	r1, [r7, #4]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	00db      	lsls	r3, r3, #3
 800e3da:	4413      	add	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	440b      	add	r3, r1
 800e3e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	78fb      	ldrb	r3, [r7, #3]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	f7fb fdf7 	bl	8009fdc <USBD_LL_DataOutStage>
}
 800e3ee:	bf00      	nop
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b082      	sub	sp, #8
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
 800e3fe:	460b      	mov	r3, r1
 800e400:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e408:	78fa      	ldrb	r2, [r7, #3]
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	4613      	mov	r3, r2
 800e40e:	00db      	lsls	r3, r3, #3
 800e410:	4413      	add	r3, r2
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	440b      	add	r3, r1
 800e416:	3320      	adds	r3, #32
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	78fb      	ldrb	r3, [r7, #3]
 800e41c:	4619      	mov	r1, r3
 800e41e:	f7fb fe90 	bl	800a142 <USBD_LL_DataInStage>
}
 800e422:	bf00      	nop
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b082      	sub	sp, #8
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fb ffca 	bl	800a3d2 <USBD_LL_SOF>
}
 800e43e:	bf00      	nop
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b084      	sub	sp, #16
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e44e:	2301      	movs	r3, #1
 800e450:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	79db      	ldrb	r3, [r3, #7]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d102      	bne.n	800e460 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e45a:	2300      	movs	r3, #0
 800e45c:	73fb      	strb	r3, [r7, #15]
 800e45e:	e008      	b.n	800e472 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	79db      	ldrb	r3, [r3, #7]
 800e464:	2b02      	cmp	r3, #2
 800e466:	d102      	bne.n	800e46e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e468:	2301      	movs	r3, #1
 800e46a:	73fb      	strb	r3, [r7, #15]
 800e46c:	e001      	b.n	800e472 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e46e:	f7ff f91d 	bl	800d6ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e478:	7bfa      	ldrb	r2, [r7, #15]
 800e47a:	4611      	mov	r1, r2
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fb ff64 	bl	800a34a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e488:	4618      	mov	r0, r3
 800e48a:	f7fb ff0c 	bl	800a2a6 <USBD_LL_Reset>
}
 800e48e:	bf00      	nop
 800e490:	3710      	adds	r7, #16
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
	...

0800e498 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fb ff5f 	bl	800a36a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	6812      	ldr	r2, [r2, #0]
 800e4ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e4be:	f043 0301 	orr.w	r3, r3, #1
 800e4c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	7adb      	ldrb	r3, [r3, #11]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d005      	beq.n	800e4d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e4cc:	4b04      	ldr	r3, [pc, #16]	@ (800e4e0 <HAL_PCD_SuspendCallback+0x48>)
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	4a03      	ldr	r2, [pc, #12]	@ (800e4e0 <HAL_PCD_SuspendCallback+0x48>)
 800e4d2:	f043 0306 	orr.w	r3, r3, #6
 800e4d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e4d8:	bf00      	nop
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	e000ed00 	.word	0xe000ed00

0800e4e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fb ff55 	bl	800a3a2 <USBD_LL_Resume>
}
 800e4f8:	bf00      	nop
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	460b      	mov	r3, r1
 800e50a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e512:	78fa      	ldrb	r2, [r7, #3]
 800e514:	4611      	mov	r1, r2
 800e516:	4618      	mov	r0, r3
 800e518:	f7fb ffad 	bl	800a476 <USBD_LL_IsoOUTIncomplete>
}
 800e51c:	bf00      	nop
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	460b      	mov	r3, r1
 800e52e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e536:	78fa      	ldrb	r2, [r7, #3]
 800e538:	4611      	mov	r1, r2
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fb ff69 	bl	800a412 <USBD_LL_IsoINIncomplete>
}
 800e540:	bf00      	nop
 800e542:	3708      	adds	r7, #8
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e556:	4618      	mov	r0, r3
 800e558:	f7fb ffbf 	bl	800a4da <USBD_LL_DevConnected>
}
 800e55c:	bf00      	nop
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e572:	4618      	mov	r0, r3
 800e574:	f7fb ffbc 	bl	800a4f0 <USBD_LL_DevDisconnected>
}
 800e578:	bf00      	nop
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d13e      	bne.n	800e60e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e590:	4a21      	ldr	r2, [pc, #132]	@ (800e618 <USBD_LL_Init+0x98>)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	4a1f      	ldr	r2, [pc, #124]	@ (800e618 <USBD_LL_Init+0x98>)
 800e59c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e5a0:	4b1d      	ldr	r3, [pc, #116]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5a2:	4a1e      	ldr	r2, [pc, #120]	@ (800e61c <USBD_LL_Init+0x9c>)
 800e5a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e5a6:	4b1c      	ldr	r3, [pc, #112]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5a8:	2209      	movs	r2, #9
 800e5aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e5ac:	4b1a      	ldr	r3, [pc, #104]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5ae:	2202      	movs	r2, #2
 800e5b0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5b2:	4b19      	ldr	r3, [pc, #100]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e5b8:	4b17      	ldr	r3, [pc, #92]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5ba:	2202      	movs	r2, #2
 800e5bc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e5be:	4b16      	ldr	r3, [pc, #88]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e5c4:	4b14      	ldr	r3, [pc, #80]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e5ca:	4b13      	ldr	r3, [pc, #76]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e5d0:	4b11      	ldr	r3, [pc, #68]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e5d6:	4b10      	ldr	r3, [pc, #64]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e5dc:	4b0e      	ldr	r3, [pc, #56]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e5e2:	480d      	ldr	r0, [pc, #52]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5e4:	f7f3 fb6b 	bl	8001cbe <HAL_PCD_Init>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d001      	beq.n	800e5f2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e5ee:	f7ff f85d 	bl	800d6ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e5f2:	2180      	movs	r1, #128	@ 0x80
 800e5f4:	4808      	ldr	r0, [pc, #32]	@ (800e618 <USBD_LL_Init+0x98>)
 800e5f6:	f7f4 fdc0 	bl	800317a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e5fa:	2240      	movs	r2, #64	@ 0x40
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	4806      	ldr	r0, [pc, #24]	@ (800e618 <USBD_LL_Init+0x98>)
 800e600:	f7f4 fd74 	bl	80030ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e604:	2280      	movs	r2, #128	@ 0x80
 800e606:	2101      	movs	r1, #1
 800e608:	4803      	ldr	r0, [pc, #12]	@ (800e618 <USBD_LL_Init+0x98>)
 800e60a:	f7f4 fd6f 	bl	80030ec <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800e60e:	2300      	movs	r3, #0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	24001e00 	.word	0x24001e00
 800e61c:	40080000 	.word	0x40080000

0800e620 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e628:	2300      	movs	r3, #0
 800e62a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e62c:	2300      	movs	r3, #0
 800e62e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e636:	4618      	mov	r0, r3
 800e638:	f7f3 fc4d 	bl	8001ed6 <HAL_PCD_Start>
 800e63c:	4603      	mov	r3, r0
 800e63e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e640:	7bfb      	ldrb	r3, [r7, #15]
 800e642:	4618      	mov	r0, r3
 800e644:	f000 f942 	bl	800e8cc <USBD_Get_USB_Status>
 800e648:	4603      	mov	r3, r0
 800e64a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e64c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b084      	sub	sp, #16
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
 800e65e:	4608      	mov	r0, r1
 800e660:	4611      	mov	r1, r2
 800e662:	461a      	mov	r2, r3
 800e664:	4603      	mov	r3, r0
 800e666:	70fb      	strb	r3, [r7, #3]
 800e668:	460b      	mov	r3, r1
 800e66a:	70bb      	strb	r3, [r7, #2]
 800e66c:	4613      	mov	r3, r2
 800e66e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e674:	2300      	movs	r3, #0
 800e676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e67e:	78bb      	ldrb	r3, [r7, #2]
 800e680:	883a      	ldrh	r2, [r7, #0]
 800e682:	78f9      	ldrb	r1, [r7, #3]
 800e684:	f7f4 f94e 	bl	8002924 <HAL_PCD_EP_Open>
 800e688:	4603      	mov	r3, r0
 800e68a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e68c:	7bfb      	ldrb	r3, [r7, #15]
 800e68e:	4618      	mov	r0, r3
 800e690:	f000 f91c 	bl	800e8cc <USBD_Get_USB_Status>
 800e694:	4603      	mov	r3, r0
 800e696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e698:	7bbb      	ldrb	r3, [r7, #14]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b084      	sub	sp, #16
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6bc:	78fa      	ldrb	r2, [r7, #3]
 800e6be:	4611      	mov	r1, r2
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7f4 f997 	bl	80029f4 <HAL_PCD_EP_Close>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f000 f8fd 	bl	800e8cc <USBD_Get_USB_Status>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6fa:	78fa      	ldrb	r2, [r7, #3]
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7f4 fa4f 	bl	8002ba2 <HAL_PCD_EP_SetStall>
 800e704:	4603      	mov	r3, r0
 800e706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e708:	7bfb      	ldrb	r3, [r7, #15]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f000 f8de 	bl	800e8cc <USBD_Get_USB_Status>
 800e710:	4603      	mov	r3, r0
 800e712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e714:	7bbb      	ldrb	r3, [r7, #14]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b084      	sub	sp, #16
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
 800e726:	460b      	mov	r3, r1
 800e728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e72a:	2300      	movs	r3, #0
 800e72c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e738:	78fa      	ldrb	r2, [r7, #3]
 800e73a:	4611      	mov	r1, r2
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7f4 fa93 	bl	8002c68 <HAL_PCD_EP_ClrStall>
 800e742:	4603      	mov	r3, r0
 800e744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e746:	7bfb      	ldrb	r3, [r7, #15]
 800e748:	4618      	mov	r0, r3
 800e74a:	f000 f8bf 	bl	800e8cc <USBD_Get_USB_Status>
 800e74e:	4603      	mov	r3, r0
 800e750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e752:	7bbb      	ldrb	r3, [r7, #14]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	460b      	mov	r3, r1
 800e766:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e76e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e774:	2b00      	cmp	r3, #0
 800e776:	da0b      	bge.n	800e790 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e778:	78fb      	ldrb	r3, [r7, #3]
 800e77a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e77e:	68f9      	ldr	r1, [r7, #12]
 800e780:	4613      	mov	r3, r2
 800e782:	00db      	lsls	r3, r3, #3
 800e784:	4413      	add	r3, r2
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	440b      	add	r3, r1
 800e78a:	3316      	adds	r3, #22
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	e00b      	b.n	800e7a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e790:	78fb      	ldrb	r3, [r7, #3]
 800e792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e796:	68f9      	ldr	r1, [r7, #12]
 800e798:	4613      	mov	r3, r2
 800e79a:	00db      	lsls	r3, r3, #3
 800e79c:	4413      	add	r3, r2
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	440b      	add	r3, r1
 800e7a2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e7a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3714      	adds	r7, #20
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr

0800e7b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7ce:	78fa      	ldrb	r2, [r7, #3]
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7f4 f882 	bl	80028dc <HAL_PCD_SetAddress>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7dc:	7bfb      	ldrb	r3, [r7, #15]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f000 f874 	bl	800e8cc <USBD_Get_USB_Status>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b086      	sub	sp, #24
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	60f8      	str	r0, [r7, #12]
 800e7fa:	607a      	str	r2, [r7, #4]
 800e7fc:	603b      	str	r3, [r7, #0]
 800e7fe:	460b      	mov	r3, r1
 800e800:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e806:	2300      	movs	r3, #0
 800e808:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e810:	7af9      	ldrb	r1, [r7, #11]
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	f7f4 f98a 	bl	8002b2e <HAL_PCD_EP_Transmit>
 800e81a:	4603      	mov	r3, r0
 800e81c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e81e:	7dfb      	ldrb	r3, [r7, #23]
 800e820:	4618      	mov	r0, r3
 800e822:	f000 f853 	bl	800e8cc <USBD_Get_USB_Status>
 800e826:	4603      	mov	r3, r0
 800e828:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e82a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3718      	adds	r7, #24
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	607a      	str	r2, [r7, #4]
 800e83e:	603b      	str	r3, [r7, #0]
 800e840:	460b      	mov	r3, r1
 800e842:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e844:	2300      	movs	r3, #0
 800e846:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e848:	2300      	movs	r3, #0
 800e84a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e852:	7af9      	ldrb	r1, [r7, #11]
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	f7f4 f916 	bl	8002a88 <HAL_PCD_EP_Receive>
 800e85c:	4603      	mov	r3, r0
 800e85e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e860:	7dfb      	ldrb	r3, [r7, #23]
 800e862:	4618      	mov	r0, r3
 800e864:	f000 f832 	bl	800e8cc <USBD_Get_USB_Status>
 800e868:	4603      	mov	r3, r0
 800e86a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e86c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3718      	adds	r7, #24
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b082      	sub	sp, #8
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	460b      	mov	r3, r1
 800e880:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e888:	78fa      	ldrb	r2, [r7, #3]
 800e88a:	4611      	mov	r1, r2
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7f4 f936 	bl	8002afe <HAL_PCD_EP_GetRxCount>
 800e892:	4603      	mov	r3, r0
}
 800e894:	4618      	mov	r0, r3
 800e896:	3708      	adds	r7, #8
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b083      	sub	sp, #12
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e8a4:	4b03      	ldr	r3, [pc, #12]	@ (800e8b4 <USBD_static_malloc+0x18>)
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	370c      	adds	r7, #12
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	240022e4 	.word	0x240022e4

0800e8b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e8c0:	bf00      	nop
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b085      	sub	sp, #20
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e8da:	79fb      	ldrb	r3, [r7, #7]
 800e8dc:	2b03      	cmp	r3, #3
 800e8de:	d817      	bhi.n	800e910 <USBD_Get_USB_Status+0x44>
 800e8e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e8e8 <USBD_Get_USB_Status+0x1c>)
 800e8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e6:	bf00      	nop
 800e8e8:	0800e8f9 	.word	0x0800e8f9
 800e8ec:	0800e8ff 	.word	0x0800e8ff
 800e8f0:	0800e905 	.word	0x0800e905
 800e8f4:	0800e90b 	.word	0x0800e90b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e8fc:	e00b      	b.n	800e916 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8fe:	2303      	movs	r3, #3
 800e900:	73fb      	strb	r3, [r7, #15]
    break;
 800e902:	e008      	b.n	800e916 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e904:	2301      	movs	r3, #1
 800e906:	73fb      	strb	r3, [r7, #15]
    break;
 800e908:	e005      	b.n	800e916 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e90a:	2303      	movs	r3, #3
 800e90c:	73fb      	strb	r3, [r7, #15]
    break;
 800e90e:	e002      	b.n	800e916 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e910:	2303      	movs	r3, #3
 800e912:	73fb      	strb	r3, [r7, #15]
    break;
 800e914:	bf00      	nop
  }
  return usb_status;
 800e916:	7bfb      	ldrb	r3, [r7, #15]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3714      	adds	r7, #20
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	4603      	mov	r3, r0
 800e92c:	6039      	str	r1, [r7, #0]
 800e92e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	2212      	movs	r2, #18
 800e934:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e936:	4b03      	ldr	r3, [pc, #12]	@ (800e944 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e938:	4618      	mov	r0, r3
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr
 800e944:	240000d0 	.word	0x240000d0

0800e948 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	4603      	mov	r3, r0
 800e950:	6039      	str	r1, [r7, #0]
 800e952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	2204      	movs	r2, #4
 800e958:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e95a:	4b03      	ldr	r3, [pc, #12]	@ (800e968 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr
 800e968:	240000e4 	.word	0x240000e4

0800e96c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	4603      	mov	r3, r0
 800e974:	6039      	str	r1, [r7, #0]
 800e976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e978:	79fb      	ldrb	r3, [r7, #7]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d105      	bne.n	800e98a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e97e:	683a      	ldr	r2, [r7, #0]
 800e980:	4907      	ldr	r1, [pc, #28]	@ (800e9a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e982:	4808      	ldr	r0, [pc, #32]	@ (800e9a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e984:	f7fc fc62 	bl	800b24c <USBD_GetString>
 800e988:	e004      	b.n	800e994 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	4904      	ldr	r1, [pc, #16]	@ (800e9a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e98e:	4805      	ldr	r0, [pc, #20]	@ (800e9a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e990:	f7fc fc5c 	bl	800b24c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e994:	4b02      	ldr	r3, [pc, #8]	@ (800e9a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e996:	4618      	mov	r0, r3
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	24002504 	.word	0x24002504
 800e9a4:	08011d24 	.word	0x08011d24

0800e9a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	6039      	str	r1, [r7, #0]
 800e9b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e9b4:	683a      	ldr	r2, [r7, #0]
 800e9b6:	4904      	ldr	r1, [pc, #16]	@ (800e9c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e9b8:	4804      	ldr	r0, [pc, #16]	@ (800e9cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e9ba:	f7fc fc47 	bl	800b24c <USBD_GetString>
  return USBD_StrDesc;
 800e9be:	4b02      	ldr	r3, [pc, #8]	@ (800e9c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	24002504 	.word	0x24002504
 800e9cc:	08011d3c 	.word	0x08011d3c

0800e9d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	6039      	str	r1, [r7, #0]
 800e9da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	221a      	movs	r2, #26
 800e9e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e9e2:	f000 f843 	bl	800ea6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e9e6:	4b02      	ldr	r3, [pc, #8]	@ (800e9f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3708      	adds	r7, #8
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	240000e8 	.word	0x240000e8

0800e9f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	6039      	str	r1, [r7, #0]
 800e9fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ea00:	79fb      	ldrb	r3, [r7, #7]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d105      	bne.n	800ea12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	4907      	ldr	r1, [pc, #28]	@ (800ea28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ea0a:	4808      	ldr	r0, [pc, #32]	@ (800ea2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ea0c:	f7fc fc1e 	bl	800b24c <USBD_GetString>
 800ea10:	e004      	b.n	800ea1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	4904      	ldr	r1, [pc, #16]	@ (800ea28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ea16:	4805      	ldr	r0, [pc, #20]	@ (800ea2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ea18:	f7fc fc18 	bl	800b24c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea1c:	4b02      	ldr	r3, [pc, #8]	@ (800ea28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	24002504 	.word	0x24002504
 800ea2c:	08011d50 	.word	0x08011d50

0800ea30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	4603      	mov	r3, r0
 800ea38:	6039      	str	r1, [r7, #0]
 800ea3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea3c:	79fb      	ldrb	r3, [r7, #7]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d105      	bne.n	800ea4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ea42:	683a      	ldr	r2, [r7, #0]
 800ea44:	4907      	ldr	r1, [pc, #28]	@ (800ea64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ea46:	4808      	ldr	r0, [pc, #32]	@ (800ea68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ea48:	f7fc fc00 	bl	800b24c <USBD_GetString>
 800ea4c:	e004      	b.n	800ea58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	4904      	ldr	r1, [pc, #16]	@ (800ea64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ea52:	4805      	ldr	r0, [pc, #20]	@ (800ea68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ea54:	f7fc fbfa 	bl	800b24c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea58:	4b02      	ldr	r3, [pc, #8]	@ (800ea64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	24002504 	.word	0x24002504
 800ea68:	08011d5c 	.word	0x08011d5c

0800ea6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ea72:	4b0f      	ldr	r3, [pc, #60]	@ (800eab0 <Get_SerialNum+0x44>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ea78:	4b0e      	ldr	r3, [pc, #56]	@ (800eab4 <Get_SerialNum+0x48>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ea7e:	4b0e      	ldr	r3, [pc, #56]	@ (800eab8 <Get_SerialNum+0x4c>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	4413      	add	r3, r2
 800ea8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d009      	beq.n	800eaa6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ea92:	2208      	movs	r2, #8
 800ea94:	4909      	ldr	r1, [pc, #36]	@ (800eabc <Get_SerialNum+0x50>)
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f000 f814 	bl	800eac4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ea9c:	2204      	movs	r2, #4
 800ea9e:	4908      	ldr	r1, [pc, #32]	@ (800eac0 <Get_SerialNum+0x54>)
 800eaa0:	68b8      	ldr	r0, [r7, #8]
 800eaa2:	f000 f80f 	bl	800eac4 <IntToUnicode>
  }
}
 800eaa6:	bf00      	nop
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	1ff1e800 	.word	0x1ff1e800
 800eab4:	1ff1e804 	.word	0x1ff1e804
 800eab8:	1ff1e808 	.word	0x1ff1e808
 800eabc:	240000ea 	.word	0x240000ea
 800eac0:	240000fa 	.word	0x240000fa

0800eac4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b087      	sub	sp, #28
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	4613      	mov	r3, r2
 800ead0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ead2:	2300      	movs	r3, #0
 800ead4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ead6:	2300      	movs	r3, #0
 800ead8:	75fb      	strb	r3, [r7, #23]
 800eada:	e027      	b.n	800eb2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	0f1b      	lsrs	r3, r3, #28
 800eae0:	2b09      	cmp	r3, #9
 800eae2:	d80b      	bhi.n	800eafc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	0f1b      	lsrs	r3, r3, #28
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	7dfb      	ldrb	r3, [r7, #23]
 800eaec:	005b      	lsls	r3, r3, #1
 800eaee:	4619      	mov	r1, r3
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	440b      	add	r3, r1
 800eaf4:	3230      	adds	r2, #48	@ 0x30
 800eaf6:	b2d2      	uxtb	r2, r2
 800eaf8:	701a      	strb	r2, [r3, #0]
 800eafa:	e00a      	b.n	800eb12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	0f1b      	lsrs	r3, r3, #28
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	7dfb      	ldrb	r3, [r7, #23]
 800eb04:	005b      	lsls	r3, r3, #1
 800eb06:	4619      	mov	r1, r3
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	440b      	add	r3, r1
 800eb0c:	3237      	adds	r2, #55	@ 0x37
 800eb0e:	b2d2      	uxtb	r2, r2
 800eb10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	011b      	lsls	r3, r3, #4
 800eb16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eb18:	7dfb      	ldrb	r3, [r7, #23]
 800eb1a:	005b      	lsls	r3, r3, #1
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	4413      	add	r3, r2
 800eb22:	2200      	movs	r2, #0
 800eb24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eb26:	7dfb      	ldrb	r3, [r7, #23]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	75fb      	strb	r3, [r7, #23]
 800eb2c:	7dfa      	ldrb	r2, [r7, #23]
 800eb2e:	79fb      	ldrb	r3, [r7, #7]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d3d3      	bcc.n	800eadc <IntToUnicode+0x18>
  }
}
 800eb34:	bf00      	nop
 800eb36:	bf00      	nop
 800eb38:	371c      	adds	r7, #28
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr
	...

0800eb44 <arm_biquad_cascade_df1_init_f32>:
 800eb44:	b510      	push	{r4, lr}
 800eb46:	4604      	mov	r4, r0
 800eb48:	4608      	mov	r0, r1
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	60a2      	str	r2, [r4, #8]
 800eb4e:	0102      	lsls	r2, r0, #4
 800eb50:	6020      	str	r0, [r4, #0]
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 ffa1 	bl	800fa9a <memset>
 800eb58:	6060      	str	r0, [r4, #4]
 800eb5a:	bd10      	pop	{r4, pc}

0800eb5c <arm_biquad_cascade_df1_f32>:
 800eb5c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800eb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb64:	f003 0e03 	and.w	lr, r3, #3
 800eb68:	6886      	ldr	r6, [r0, #8]
 800eb6a:	ea4f 190c 	mov.w	r9, ip, lsl #4
 800eb6e:	6845      	ldr	r5, [r0, #4]
 800eb70:	f10e 38ff 	add.w	r8, lr, #4294967295
 800eb74:	3614      	adds	r6, #20
 800eb76:	eb02 0a09 	add.w	sl, r2, r9
 800eb7a:	3510      	adds	r5, #16
 800eb7c:	6807      	ldr	r7, [r0, #0]
 800eb7e:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 800eb82:	ed56 1a04 	vldr	s3, [r6, #-16]
 800eb86:	ed16 2a03 	vldr	s4, [r6, #-12]
 800eb8a:	ed56 2a02 	vldr	s5, [r6, #-8]
 800eb8e:	ed16 3a01 	vldr	s6, [r6, #-4]
 800eb92:	ed15 4a04 	vldr	s8, [r5, #-16]
 800eb96:	ed15 5a03 	vldr	s10, [r5, #-12]
 800eb9a:	ed15 7a02 	vldr	s14, [r5, #-8]
 800eb9e:	ed55 7a01 	vldr	s15, [r5, #-4]
 800eba2:	f1bc 0f00 	cmp.w	ip, #0
 800eba6:	f000 80d4 	beq.w	800ed52 <arm_biquad_cascade_df1_f32+0x1f6>
 800ebaa:	f101 0010 	add.w	r0, r1, #16
 800ebae:	f102 0310 	add.w	r3, r2, #16
 800ebb2:	4664      	mov	r4, ip
 800ebb4:	ed50 5a04 	vldr	s11, [r0, #-16]
 800ebb8:	ee61 4a84 	vmul.f32	s9, s3, s8
 800ebbc:	ee22 5a05 	vmul.f32	s10, s4, s10
 800ebc0:	3c01      	subs	r4, #1
 800ebc2:	ee63 6aa5 	vmul.f32	s13, s7, s11
 800ebc6:	f100 0010 	add.w	r0, r0, #16
 800ebca:	ee22 6a87 	vmul.f32	s12, s5, s14
 800ebce:	f103 0310 	add.w	r3, r3, #16
 800ebd2:	ee63 7a27 	vmul.f32	s15, s6, s15
 800ebd6:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ebda:	ee21 0aa5 	vmul.f32	s0, s3, s11
 800ebde:	ee22 1a04 	vmul.f32	s2, s4, s8
 800ebe2:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ebe6:	ee23 5a07 	vmul.f32	s10, s6, s14
 800ebea:	ee22 4a25 	vmul.f32	s8, s4, s11
 800ebee:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ebf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebf6:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 800ebfa:	ee62 5aa7 	vmul.f32	s11, s5, s15
 800ebfe:	ed10 6a07 	vldr	s12, [r0, #-28]	@ 0xffffffe4
 800ec02:	ee63 7a27 	vmul.f32	s15, s6, s15
 800ec06:	ee63 6a86 	vmul.f32	s13, s7, s12
 800ec0a:	ee61 0a86 	vmul.f32	s1, s3, s12
 800ec0e:	ee62 4a06 	vmul.f32	s9, s4, s12
 800ec12:	ee36 7a80 	vadd.f32	s14, s13, s0
 800ec16:	ee37 7a01 	vadd.f32	s14, s14, s2
 800ec1a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ec1e:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ec22:	ed03 7a07 	vstr	s14, [r3, #-28]	@ 0xffffffe4
 800ec26:	ee62 6a87 	vmul.f32	s13, s5, s14
 800ec2a:	ed10 5a06 	vldr	s10, [r0, #-24]	@ 0xffffffe8
 800ec2e:	ee23 7a07 	vmul.f32	s14, s6, s14
 800ec32:	ee63 5a85 	vmul.f32	s11, s7, s10
 800ec36:	ee21 1a85 	vmul.f32	s2, s3, s10
 800ec3a:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800ec3e:	ee75 5a84 	vadd.f32	s11, s11, s8
 800ec42:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800ec46:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800ec4a:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800ec4e:	ee62 6aa7 	vmul.f32	s13, s5, s15
 800ec52:	ed10 4a05 	vldr	s8, [r0, #-20]	@ 0xffffffec
 800ec56:	ee23 6a84 	vmul.f32	s12, s7, s8
 800ec5a:	ee36 6a01 	vadd.f32	s12, s12, s2
 800ec5e:	ee36 6a24 	vadd.f32	s12, s12, s9
 800ec62:	ee36 6a26 	vadd.f32	s12, s12, s13
 800ec66:	ee36 7a07 	vadd.f32	s14, s12, s14
 800ec6a:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800ec6e:	d1a1      	bne.n	800ebb4 <arm_biquad_cascade_df1_f32+0x58>
 800ec70:	4449      	add	r1, r9
 800ec72:	4653      	mov	r3, sl
 800ec74:	f1be 0f00 	cmp.w	lr, #0
 800ec78:	d047      	beq.n	800ed0a <arm_biquad_cascade_df1_f32+0x1ae>
 800ec7a:	edd1 6a00 	vldr	s13, [r1]
 800ec7e:	ee61 5a84 	vmul.f32	s11, s3, s8
 800ec82:	ee22 5a05 	vmul.f32	s10, s4, s10
 800ec86:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800ec8a:	ee22 6a87 	vmul.f32	s12, s5, s14
 800ec8e:	ee63 7a27 	vmul.f32	s15, s6, s15
 800ec92:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800ec96:	ee35 5a85 	vadd.f32	s10, s11, s10
 800ec9a:	ee35 6a06 	vadd.f32	s12, s10, s12
 800ec9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 800eca2:	ed83 6a00 	vstr	s12, [r3]
 800eca6:	f1b8 0f00 	cmp.w	r8, #0
 800ecaa:	d040      	beq.n	800ed2e <arm_biquad_cascade_df1_f32+0x1d2>
 800ecac:	ed91 5a01 	vldr	s10, [r1, #4]
 800ecb0:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800ecb4:	ee22 4a04 	vmul.f32	s8, s4, s8
 800ecb8:	f1b8 0f01 	cmp.w	r8, #1
 800ecbc:	ee65 4a23 	vmul.f32	s9, s10, s7
 800ecc0:	ee62 7a86 	vmul.f32	s15, s5, s12
 800ecc4:	ee23 7a07 	vmul.f32	s14, s6, s14
 800ecc8:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800eccc:	ee35 4a84 	vadd.f32	s8, s11, s8
 800ecd0:	ee74 7a27 	vadd.f32	s15, s8, s15
 800ecd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecd8:	edc3 7a01 	vstr	s15, [r3, #4]
 800ecdc:	d030      	beq.n	800ed40 <arm_biquad_cascade_df1_f32+0x1e4>
 800ecde:	ed91 4a02 	vldr	s8, [r1, #8]
 800ece2:	ee22 2a26 	vmul.f32	s4, s4, s13
 800ece6:	ee65 1a21 	vmul.f32	s3, s10, s3
 800ecea:	ee63 6a84 	vmul.f32	s13, s7, s8
 800ecee:	ee67 2aa2 	vmul.f32	s5, s15, s5
 800ecf2:	ee23 3a06 	vmul.f32	s6, s6, s12
 800ecf6:	ee76 6aa1 	vadd.f32	s13, s13, s3
 800ecfa:	ee76 6a82 	vadd.f32	s13, s13, s4
 800ecfe:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800ed02:	ee36 7a83 	vadd.f32	s14, s13, s6
 800ed06:	ed83 7a02 	vstr	s14, [r3, #8]
 800ed0a:	3f01      	subs	r7, #1
 800ed0c:	ed05 4a04 	vstr	s8, [r5, #-16]
 800ed10:	ed05 5a03 	vstr	s10, [r5, #-12]
 800ed14:	f106 0614 	add.w	r6, r6, #20
 800ed18:	ed05 7a02 	vstr	s14, [r5, #-8]
 800ed1c:	4611      	mov	r1, r2
 800ed1e:	ed45 7a01 	vstr	s15, [r5, #-4]
 800ed22:	f105 0510 	add.w	r5, r5, #16
 800ed26:	f47f af2a 	bne.w	800eb7e <arm_biquad_cascade_df1_f32+0x22>
 800ed2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed2e:	eef0 7a47 	vmov.f32	s15, s14
 800ed32:	eeb0 5a44 	vmov.f32	s10, s8
 800ed36:	eeb0 7a46 	vmov.f32	s14, s12
 800ed3a:	eeb0 4a66 	vmov.f32	s8, s13
 800ed3e:	e7e4      	b.n	800ed0a <arm_biquad_cascade_df1_f32+0x1ae>
 800ed40:	eeb0 7a67 	vmov.f32	s14, s15
 800ed44:	eeb0 4a45 	vmov.f32	s8, s10
 800ed48:	eef0 7a46 	vmov.f32	s15, s12
 800ed4c:	eeb0 5a66 	vmov.f32	s10, s13
 800ed50:	e7db      	b.n	800ed0a <arm_biquad_cascade_df1_f32+0x1ae>
 800ed52:	4613      	mov	r3, r2
 800ed54:	e78e      	b.n	800ec74 <arm_biquad_cascade_df1_f32+0x118>
 800ed56:	bf00      	nop

0800ed58 <arm_sin_f32>:
 800ed58:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800edd8 <arm_sin_f32+0x80>
 800ed5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ed60:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ed64:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ed68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6c:	d504      	bpl.n	800ed78 <arm_sin_f32+0x20>
 800ed6e:	ee17 3a90 	vmov	r3, s15
 800ed72:	3b01      	subs	r3, #1
 800ed74:	ee07 3a90 	vmov	s15, r3
 800ed78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed7c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800eddc <arm_sin_f32+0x84>
 800ed80:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ed84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ed88:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ed8c:	ee17 3a10 	vmov	r3, s14
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed96:	d21a      	bcs.n	800edce <arm_sin_f32+0x76>
 800ed98:	ee07 3a10 	vmov	s14, r3
 800ed9c:	1c59      	adds	r1, r3, #1
 800ed9e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800eda2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800eda6:	4a0e      	ldr	r2, [pc, #56]	@ (800ede0 <arm_sin_f32+0x88>)
 800eda8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800edac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800edb0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800edb4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800edb8:	edd3 6a00 	vldr	s13, [r3]
 800edbc:	ed92 7a00 	vldr	s14, [r2]
 800edc0:	ee20 0a26 	vmul.f32	s0, s0, s13
 800edc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800edcc:	4770      	bx	lr
 800edce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800edd2:	2101      	movs	r1, #1
 800edd4:	2300      	movs	r3, #0
 800edd6:	e7e6      	b.n	800eda6 <arm_sin_f32+0x4e>
 800edd8:	3e22f983 	.word	0x3e22f983
 800eddc:	44000000 	.word	0x44000000
 800ede0:	08013568 	.word	0x08013568

0800ede4 <arm_cos_f32>:
 800ede4:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800ee6c <arm_cos_f32+0x88>
 800ede8:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800edec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800edf0:	ee30 0a07 	vadd.f32	s0, s0, s14
 800edf4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800edf8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800edfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee00:	d504      	bpl.n	800ee0c <arm_cos_f32+0x28>
 800ee02:	ee17 3a90 	vmov	r3, s15
 800ee06:	3b01      	subs	r3, #1
 800ee08:	ee07 3a90 	vmov	s15, r3
 800ee0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee10:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800ee70 <arm_cos_f32+0x8c>
 800ee14:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ee18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ee1c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ee20:	ee17 3a10 	vmov	r3, s14
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee2a:	d21a      	bcs.n	800ee62 <arm_cos_f32+0x7e>
 800ee2c:	ee07 3a10 	vmov	s14, r3
 800ee30:	1c59      	adds	r1, r3, #1
 800ee32:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800ee36:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ee3a:	4a0e      	ldr	r2, [pc, #56]	@ (800ee74 <arm_cos_f32+0x90>)
 800ee3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ee40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee44:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ee48:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee4c:	edd3 6a00 	vldr	s13, [r3]
 800ee50:	ed92 7a00 	vldr	s14, [r2]
 800ee54:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ee58:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee5c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ee60:	4770      	bx	lr
 800ee62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ee66:	2101      	movs	r1, #1
 800ee68:	2300      	movs	r3, #0
 800ee6a:	e7e6      	b.n	800ee3a <arm_cos_f32+0x56>
 800ee6c:	3e22f983 	.word	0x3e22f983
 800ee70:	44000000 	.word	0x44000000
 800ee74:	08013568 	.word	0x08013568

0800ee78 <malloc>:
 800ee78:	4b02      	ldr	r3, [pc, #8]	@ (800ee84 <malloc+0xc>)
 800ee7a:	4601      	mov	r1, r0
 800ee7c:	6818      	ldr	r0, [r3, #0]
 800ee7e:	f000 b825 	b.w	800eecc <_malloc_r>
 800ee82:	bf00      	nop
 800ee84:	24000110 	.word	0x24000110

0800ee88 <sbrk_aligned>:
 800ee88:	b570      	push	{r4, r5, r6, lr}
 800ee8a:	4e0f      	ldr	r6, [pc, #60]	@ (800eec8 <sbrk_aligned+0x40>)
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	6831      	ldr	r1, [r6, #0]
 800ee90:	4605      	mov	r5, r0
 800ee92:	b911      	cbnz	r1, 800ee9a <sbrk_aligned+0x12>
 800ee94:	f000 fe42 	bl	800fb1c <_sbrk_r>
 800ee98:	6030      	str	r0, [r6, #0]
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	f000 fe3d 	bl	800fb1c <_sbrk_r>
 800eea2:	1c43      	adds	r3, r0, #1
 800eea4:	d103      	bne.n	800eeae <sbrk_aligned+0x26>
 800eea6:	f04f 34ff 	mov.w	r4, #4294967295
 800eeaa:	4620      	mov	r0, r4
 800eeac:	bd70      	pop	{r4, r5, r6, pc}
 800eeae:	1cc4      	adds	r4, r0, #3
 800eeb0:	f024 0403 	bic.w	r4, r4, #3
 800eeb4:	42a0      	cmp	r0, r4
 800eeb6:	d0f8      	beq.n	800eeaa <sbrk_aligned+0x22>
 800eeb8:	1a21      	subs	r1, r4, r0
 800eeba:	4628      	mov	r0, r5
 800eebc:	f000 fe2e 	bl	800fb1c <_sbrk_r>
 800eec0:	3001      	adds	r0, #1
 800eec2:	d1f2      	bne.n	800eeaa <sbrk_aligned+0x22>
 800eec4:	e7ef      	b.n	800eea6 <sbrk_aligned+0x1e>
 800eec6:	bf00      	nop
 800eec8:	24002704 	.word	0x24002704

0800eecc <_malloc_r>:
 800eecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eed0:	1ccd      	adds	r5, r1, #3
 800eed2:	f025 0503 	bic.w	r5, r5, #3
 800eed6:	3508      	adds	r5, #8
 800eed8:	2d0c      	cmp	r5, #12
 800eeda:	bf38      	it	cc
 800eedc:	250c      	movcc	r5, #12
 800eede:	2d00      	cmp	r5, #0
 800eee0:	4606      	mov	r6, r0
 800eee2:	db01      	blt.n	800eee8 <_malloc_r+0x1c>
 800eee4:	42a9      	cmp	r1, r5
 800eee6:	d904      	bls.n	800eef2 <_malloc_r+0x26>
 800eee8:	230c      	movs	r3, #12
 800eeea:	6033      	str	r3, [r6, #0]
 800eeec:	2000      	movs	r0, #0
 800eeee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800efc8 <_malloc_r+0xfc>
 800eef6:	f000 f869 	bl	800efcc <__malloc_lock>
 800eefa:	f8d8 3000 	ldr.w	r3, [r8]
 800eefe:	461c      	mov	r4, r3
 800ef00:	bb44      	cbnz	r4, 800ef54 <_malloc_r+0x88>
 800ef02:	4629      	mov	r1, r5
 800ef04:	4630      	mov	r0, r6
 800ef06:	f7ff ffbf 	bl	800ee88 <sbrk_aligned>
 800ef0a:	1c43      	adds	r3, r0, #1
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	d158      	bne.n	800efc2 <_malloc_r+0xf6>
 800ef10:	f8d8 4000 	ldr.w	r4, [r8]
 800ef14:	4627      	mov	r7, r4
 800ef16:	2f00      	cmp	r7, #0
 800ef18:	d143      	bne.n	800efa2 <_malloc_r+0xd6>
 800ef1a:	2c00      	cmp	r4, #0
 800ef1c:	d04b      	beq.n	800efb6 <_malloc_r+0xea>
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	4639      	mov	r1, r7
 800ef22:	4630      	mov	r0, r6
 800ef24:	eb04 0903 	add.w	r9, r4, r3
 800ef28:	f000 fdf8 	bl	800fb1c <_sbrk_r>
 800ef2c:	4581      	cmp	r9, r0
 800ef2e:	d142      	bne.n	800efb6 <_malloc_r+0xea>
 800ef30:	6821      	ldr	r1, [r4, #0]
 800ef32:	1a6d      	subs	r5, r5, r1
 800ef34:	4629      	mov	r1, r5
 800ef36:	4630      	mov	r0, r6
 800ef38:	f7ff ffa6 	bl	800ee88 <sbrk_aligned>
 800ef3c:	3001      	adds	r0, #1
 800ef3e:	d03a      	beq.n	800efb6 <_malloc_r+0xea>
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	442b      	add	r3, r5
 800ef44:	6023      	str	r3, [r4, #0]
 800ef46:	f8d8 3000 	ldr.w	r3, [r8]
 800ef4a:	685a      	ldr	r2, [r3, #4]
 800ef4c:	bb62      	cbnz	r2, 800efa8 <_malloc_r+0xdc>
 800ef4e:	f8c8 7000 	str.w	r7, [r8]
 800ef52:	e00f      	b.n	800ef74 <_malloc_r+0xa8>
 800ef54:	6822      	ldr	r2, [r4, #0]
 800ef56:	1b52      	subs	r2, r2, r5
 800ef58:	d420      	bmi.n	800ef9c <_malloc_r+0xd0>
 800ef5a:	2a0b      	cmp	r2, #11
 800ef5c:	d917      	bls.n	800ef8e <_malloc_r+0xc2>
 800ef5e:	1961      	adds	r1, r4, r5
 800ef60:	42a3      	cmp	r3, r4
 800ef62:	6025      	str	r5, [r4, #0]
 800ef64:	bf18      	it	ne
 800ef66:	6059      	strne	r1, [r3, #4]
 800ef68:	6863      	ldr	r3, [r4, #4]
 800ef6a:	bf08      	it	eq
 800ef6c:	f8c8 1000 	streq.w	r1, [r8]
 800ef70:	5162      	str	r2, [r4, r5]
 800ef72:	604b      	str	r3, [r1, #4]
 800ef74:	4630      	mov	r0, r6
 800ef76:	f000 f82f 	bl	800efd8 <__malloc_unlock>
 800ef7a:	f104 000b 	add.w	r0, r4, #11
 800ef7e:	1d23      	adds	r3, r4, #4
 800ef80:	f020 0007 	bic.w	r0, r0, #7
 800ef84:	1ac2      	subs	r2, r0, r3
 800ef86:	bf1c      	itt	ne
 800ef88:	1a1b      	subne	r3, r3, r0
 800ef8a:	50a3      	strne	r3, [r4, r2]
 800ef8c:	e7af      	b.n	800eeee <_malloc_r+0x22>
 800ef8e:	6862      	ldr	r2, [r4, #4]
 800ef90:	42a3      	cmp	r3, r4
 800ef92:	bf0c      	ite	eq
 800ef94:	f8c8 2000 	streq.w	r2, [r8]
 800ef98:	605a      	strne	r2, [r3, #4]
 800ef9a:	e7eb      	b.n	800ef74 <_malloc_r+0xa8>
 800ef9c:	4623      	mov	r3, r4
 800ef9e:	6864      	ldr	r4, [r4, #4]
 800efa0:	e7ae      	b.n	800ef00 <_malloc_r+0x34>
 800efa2:	463c      	mov	r4, r7
 800efa4:	687f      	ldr	r7, [r7, #4]
 800efa6:	e7b6      	b.n	800ef16 <_malloc_r+0x4a>
 800efa8:	461a      	mov	r2, r3
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	42a3      	cmp	r3, r4
 800efae:	d1fb      	bne.n	800efa8 <_malloc_r+0xdc>
 800efb0:	2300      	movs	r3, #0
 800efb2:	6053      	str	r3, [r2, #4]
 800efb4:	e7de      	b.n	800ef74 <_malloc_r+0xa8>
 800efb6:	230c      	movs	r3, #12
 800efb8:	6033      	str	r3, [r6, #0]
 800efba:	4630      	mov	r0, r6
 800efbc:	f000 f80c 	bl	800efd8 <__malloc_unlock>
 800efc0:	e794      	b.n	800eeec <_malloc_r+0x20>
 800efc2:	6005      	str	r5, [r0, #0]
 800efc4:	e7d6      	b.n	800ef74 <_malloc_r+0xa8>
 800efc6:	bf00      	nop
 800efc8:	24002708 	.word	0x24002708

0800efcc <__malloc_lock>:
 800efcc:	4801      	ldr	r0, [pc, #4]	@ (800efd4 <__malloc_lock+0x8>)
 800efce:	f000 bdec 	b.w	800fbaa <__retarget_lock_acquire_recursive>
 800efd2:	bf00      	nop
 800efd4:	2400284c 	.word	0x2400284c

0800efd8 <__malloc_unlock>:
 800efd8:	4801      	ldr	r0, [pc, #4]	@ (800efe0 <__malloc_unlock+0x8>)
 800efda:	f000 bde7 	b.w	800fbac <__retarget_lock_release_recursive>
 800efde:	bf00      	nop
 800efe0:	2400284c 	.word	0x2400284c

0800efe4 <__cvt>:
 800efe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efe6:	ed2d 8b02 	vpush	{d8}
 800efea:	eeb0 8b40 	vmov.f64	d8, d0
 800efee:	b085      	sub	sp, #20
 800eff0:	4617      	mov	r7, r2
 800eff2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800eff4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eff6:	ee18 2a90 	vmov	r2, s17
 800effa:	f025 0520 	bic.w	r5, r5, #32
 800effe:	2a00      	cmp	r2, #0
 800f000:	bfb6      	itet	lt
 800f002:	222d      	movlt	r2, #45	@ 0x2d
 800f004:	2200      	movge	r2, #0
 800f006:	eeb1 8b40 	vneglt.f64	d8, d0
 800f00a:	2d46      	cmp	r5, #70	@ 0x46
 800f00c:	460c      	mov	r4, r1
 800f00e:	701a      	strb	r2, [r3, #0]
 800f010:	d004      	beq.n	800f01c <__cvt+0x38>
 800f012:	2d45      	cmp	r5, #69	@ 0x45
 800f014:	d100      	bne.n	800f018 <__cvt+0x34>
 800f016:	3401      	adds	r4, #1
 800f018:	2102      	movs	r1, #2
 800f01a:	e000      	b.n	800f01e <__cvt+0x3a>
 800f01c:	2103      	movs	r1, #3
 800f01e:	ab03      	add	r3, sp, #12
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	ab02      	add	r3, sp, #8
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	4622      	mov	r2, r4
 800f028:	4633      	mov	r3, r6
 800f02a:	eeb0 0b48 	vmov.f64	d0, d8
 800f02e:	f000 fe47 	bl	800fcc0 <_dtoa_r>
 800f032:	2d47      	cmp	r5, #71	@ 0x47
 800f034:	d114      	bne.n	800f060 <__cvt+0x7c>
 800f036:	07fb      	lsls	r3, r7, #31
 800f038:	d50a      	bpl.n	800f050 <__cvt+0x6c>
 800f03a:	1902      	adds	r2, r0, r4
 800f03c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f044:	bf08      	it	eq
 800f046:	9203      	streq	r2, [sp, #12]
 800f048:	2130      	movs	r1, #48	@ 0x30
 800f04a:	9b03      	ldr	r3, [sp, #12]
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d319      	bcc.n	800f084 <__cvt+0xa0>
 800f050:	9b03      	ldr	r3, [sp, #12]
 800f052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f054:	1a1b      	subs	r3, r3, r0
 800f056:	6013      	str	r3, [r2, #0]
 800f058:	b005      	add	sp, #20
 800f05a:	ecbd 8b02 	vpop	{d8}
 800f05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f060:	2d46      	cmp	r5, #70	@ 0x46
 800f062:	eb00 0204 	add.w	r2, r0, r4
 800f066:	d1e9      	bne.n	800f03c <__cvt+0x58>
 800f068:	7803      	ldrb	r3, [r0, #0]
 800f06a:	2b30      	cmp	r3, #48	@ 0x30
 800f06c:	d107      	bne.n	800f07e <__cvt+0x9a>
 800f06e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f076:	bf1c      	itt	ne
 800f078:	f1c4 0401 	rsbne	r4, r4, #1
 800f07c:	6034      	strne	r4, [r6, #0]
 800f07e:	6833      	ldr	r3, [r6, #0]
 800f080:	441a      	add	r2, r3
 800f082:	e7db      	b.n	800f03c <__cvt+0x58>
 800f084:	1c5c      	adds	r4, r3, #1
 800f086:	9403      	str	r4, [sp, #12]
 800f088:	7019      	strb	r1, [r3, #0]
 800f08a:	e7de      	b.n	800f04a <__cvt+0x66>

0800f08c <__exponent>:
 800f08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f08e:	2900      	cmp	r1, #0
 800f090:	bfba      	itte	lt
 800f092:	4249      	neglt	r1, r1
 800f094:	232d      	movlt	r3, #45	@ 0x2d
 800f096:	232b      	movge	r3, #43	@ 0x2b
 800f098:	2909      	cmp	r1, #9
 800f09a:	7002      	strb	r2, [r0, #0]
 800f09c:	7043      	strb	r3, [r0, #1]
 800f09e:	dd29      	ble.n	800f0f4 <__exponent+0x68>
 800f0a0:	f10d 0307 	add.w	r3, sp, #7
 800f0a4:	461d      	mov	r5, r3
 800f0a6:	270a      	movs	r7, #10
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	fbb1 f6f7 	udiv	r6, r1, r7
 800f0ae:	fb07 1416 	mls	r4, r7, r6, r1
 800f0b2:	3430      	adds	r4, #48	@ 0x30
 800f0b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f0b8:	460c      	mov	r4, r1
 800f0ba:	2c63      	cmp	r4, #99	@ 0x63
 800f0bc:	f103 33ff 	add.w	r3, r3, #4294967295
 800f0c0:	4631      	mov	r1, r6
 800f0c2:	dcf1      	bgt.n	800f0a8 <__exponent+0x1c>
 800f0c4:	3130      	adds	r1, #48	@ 0x30
 800f0c6:	1e94      	subs	r4, r2, #2
 800f0c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f0cc:	1c41      	adds	r1, r0, #1
 800f0ce:	4623      	mov	r3, r4
 800f0d0:	42ab      	cmp	r3, r5
 800f0d2:	d30a      	bcc.n	800f0ea <__exponent+0x5e>
 800f0d4:	f10d 0309 	add.w	r3, sp, #9
 800f0d8:	1a9b      	subs	r3, r3, r2
 800f0da:	42ac      	cmp	r4, r5
 800f0dc:	bf88      	it	hi
 800f0de:	2300      	movhi	r3, #0
 800f0e0:	3302      	adds	r3, #2
 800f0e2:	4403      	add	r3, r0
 800f0e4:	1a18      	subs	r0, r3, r0
 800f0e6:	b003      	add	sp, #12
 800f0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f0ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f0f2:	e7ed      	b.n	800f0d0 <__exponent+0x44>
 800f0f4:	2330      	movs	r3, #48	@ 0x30
 800f0f6:	3130      	adds	r1, #48	@ 0x30
 800f0f8:	7083      	strb	r3, [r0, #2]
 800f0fa:	70c1      	strb	r1, [r0, #3]
 800f0fc:	1d03      	adds	r3, r0, #4
 800f0fe:	e7f1      	b.n	800f0e4 <__exponent+0x58>

0800f100 <_printf_float>:
 800f100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f104:	b08d      	sub	sp, #52	@ 0x34
 800f106:	460c      	mov	r4, r1
 800f108:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f10c:	4616      	mov	r6, r2
 800f10e:	461f      	mov	r7, r3
 800f110:	4605      	mov	r5, r0
 800f112:	f000 fccb 	bl	800faac <_localeconv_r>
 800f116:	f8d0 b000 	ldr.w	fp, [r0]
 800f11a:	4658      	mov	r0, fp
 800f11c:	f7f1 f930 	bl	8000380 <strlen>
 800f120:	2300      	movs	r3, #0
 800f122:	930a      	str	r3, [sp, #40]	@ 0x28
 800f124:	f8d8 3000 	ldr.w	r3, [r8]
 800f128:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f12c:	6822      	ldr	r2, [r4, #0]
 800f12e:	9005      	str	r0, [sp, #20]
 800f130:	3307      	adds	r3, #7
 800f132:	f023 0307 	bic.w	r3, r3, #7
 800f136:	f103 0108 	add.w	r1, r3, #8
 800f13a:	f8c8 1000 	str.w	r1, [r8]
 800f13e:	ed93 0b00 	vldr	d0, [r3]
 800f142:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f3a0 <_printf_float+0x2a0>
 800f146:	eeb0 7bc0 	vabs.f64	d7, d0
 800f14a:	eeb4 7b46 	vcmp.f64	d7, d6
 800f14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f152:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f156:	dd24      	ble.n	800f1a2 <_printf_float+0xa2>
 800f158:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f160:	d502      	bpl.n	800f168 <_printf_float+0x68>
 800f162:	232d      	movs	r3, #45	@ 0x2d
 800f164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f168:	498f      	ldr	r1, [pc, #572]	@ (800f3a8 <_printf_float+0x2a8>)
 800f16a:	4b90      	ldr	r3, [pc, #576]	@ (800f3ac <_printf_float+0x2ac>)
 800f16c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f170:	bf94      	ite	ls
 800f172:	4688      	movls	r8, r1
 800f174:	4698      	movhi	r8, r3
 800f176:	f022 0204 	bic.w	r2, r2, #4
 800f17a:	2303      	movs	r3, #3
 800f17c:	6123      	str	r3, [r4, #16]
 800f17e:	6022      	str	r2, [r4, #0]
 800f180:	f04f 0a00 	mov.w	sl, #0
 800f184:	9700      	str	r7, [sp, #0]
 800f186:	4633      	mov	r3, r6
 800f188:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f18a:	4621      	mov	r1, r4
 800f18c:	4628      	mov	r0, r5
 800f18e:	f000 f9d1 	bl	800f534 <_printf_common>
 800f192:	3001      	adds	r0, #1
 800f194:	f040 8089 	bne.w	800f2aa <_printf_float+0x1aa>
 800f198:	f04f 30ff 	mov.w	r0, #4294967295
 800f19c:	b00d      	add	sp, #52	@ 0x34
 800f19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1a2:	eeb4 0b40 	vcmp.f64	d0, d0
 800f1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1aa:	d709      	bvc.n	800f1c0 <_printf_float+0xc0>
 800f1ac:	ee10 3a90 	vmov	r3, s1
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	bfbc      	itt	lt
 800f1b4:	232d      	movlt	r3, #45	@ 0x2d
 800f1b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f1ba:	497d      	ldr	r1, [pc, #500]	@ (800f3b0 <_printf_float+0x2b0>)
 800f1bc:	4b7d      	ldr	r3, [pc, #500]	@ (800f3b4 <_printf_float+0x2b4>)
 800f1be:	e7d5      	b.n	800f16c <_printf_float+0x6c>
 800f1c0:	6863      	ldr	r3, [r4, #4]
 800f1c2:	1c59      	adds	r1, r3, #1
 800f1c4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f1c8:	d139      	bne.n	800f23e <_printf_float+0x13e>
 800f1ca:	2306      	movs	r3, #6
 800f1cc:	6063      	str	r3, [r4, #4]
 800f1ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	6022      	str	r2, [r4, #0]
 800f1d6:	9303      	str	r3, [sp, #12]
 800f1d8:	ab0a      	add	r3, sp, #40	@ 0x28
 800f1da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f1de:	ab09      	add	r3, sp, #36	@ 0x24
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	6861      	ldr	r1, [r4, #4]
 800f1e4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	f7ff fefb 	bl	800efe4 <__cvt>
 800f1ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f1f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f1f4:	4680      	mov	r8, r0
 800f1f6:	d129      	bne.n	800f24c <_printf_float+0x14c>
 800f1f8:	1cc8      	adds	r0, r1, #3
 800f1fa:	db02      	blt.n	800f202 <_printf_float+0x102>
 800f1fc:	6863      	ldr	r3, [r4, #4]
 800f1fe:	4299      	cmp	r1, r3
 800f200:	dd41      	ble.n	800f286 <_printf_float+0x186>
 800f202:	f1a9 0902 	sub.w	r9, r9, #2
 800f206:	fa5f f989 	uxtb.w	r9, r9
 800f20a:	3901      	subs	r1, #1
 800f20c:	464a      	mov	r2, r9
 800f20e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f212:	9109      	str	r1, [sp, #36]	@ 0x24
 800f214:	f7ff ff3a 	bl	800f08c <__exponent>
 800f218:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f21a:	1813      	adds	r3, r2, r0
 800f21c:	2a01      	cmp	r2, #1
 800f21e:	4682      	mov	sl, r0
 800f220:	6123      	str	r3, [r4, #16]
 800f222:	dc02      	bgt.n	800f22a <_printf_float+0x12a>
 800f224:	6822      	ldr	r2, [r4, #0]
 800f226:	07d2      	lsls	r2, r2, #31
 800f228:	d501      	bpl.n	800f22e <_printf_float+0x12e>
 800f22a:	3301      	adds	r3, #1
 800f22c:	6123      	str	r3, [r4, #16]
 800f22e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f232:	2b00      	cmp	r3, #0
 800f234:	d0a6      	beq.n	800f184 <_printf_float+0x84>
 800f236:	232d      	movs	r3, #45	@ 0x2d
 800f238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f23c:	e7a2      	b.n	800f184 <_printf_float+0x84>
 800f23e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f242:	d1c4      	bne.n	800f1ce <_printf_float+0xce>
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1c2      	bne.n	800f1ce <_printf_float+0xce>
 800f248:	2301      	movs	r3, #1
 800f24a:	e7bf      	b.n	800f1cc <_printf_float+0xcc>
 800f24c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f250:	d9db      	bls.n	800f20a <_printf_float+0x10a>
 800f252:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f256:	d118      	bne.n	800f28a <_printf_float+0x18a>
 800f258:	2900      	cmp	r1, #0
 800f25a:	6863      	ldr	r3, [r4, #4]
 800f25c:	dd0b      	ble.n	800f276 <_printf_float+0x176>
 800f25e:	6121      	str	r1, [r4, #16]
 800f260:	b913      	cbnz	r3, 800f268 <_printf_float+0x168>
 800f262:	6822      	ldr	r2, [r4, #0]
 800f264:	07d0      	lsls	r0, r2, #31
 800f266:	d502      	bpl.n	800f26e <_printf_float+0x16e>
 800f268:	3301      	adds	r3, #1
 800f26a:	440b      	add	r3, r1
 800f26c:	6123      	str	r3, [r4, #16]
 800f26e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f270:	f04f 0a00 	mov.w	sl, #0
 800f274:	e7db      	b.n	800f22e <_printf_float+0x12e>
 800f276:	b913      	cbnz	r3, 800f27e <_printf_float+0x17e>
 800f278:	6822      	ldr	r2, [r4, #0]
 800f27a:	07d2      	lsls	r2, r2, #31
 800f27c:	d501      	bpl.n	800f282 <_printf_float+0x182>
 800f27e:	3302      	adds	r3, #2
 800f280:	e7f4      	b.n	800f26c <_printf_float+0x16c>
 800f282:	2301      	movs	r3, #1
 800f284:	e7f2      	b.n	800f26c <_printf_float+0x16c>
 800f286:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f28a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f28c:	4299      	cmp	r1, r3
 800f28e:	db05      	blt.n	800f29c <_printf_float+0x19c>
 800f290:	6823      	ldr	r3, [r4, #0]
 800f292:	6121      	str	r1, [r4, #16]
 800f294:	07d8      	lsls	r0, r3, #31
 800f296:	d5ea      	bpl.n	800f26e <_printf_float+0x16e>
 800f298:	1c4b      	adds	r3, r1, #1
 800f29a:	e7e7      	b.n	800f26c <_printf_float+0x16c>
 800f29c:	2900      	cmp	r1, #0
 800f29e:	bfd4      	ite	le
 800f2a0:	f1c1 0202 	rsble	r2, r1, #2
 800f2a4:	2201      	movgt	r2, #1
 800f2a6:	4413      	add	r3, r2
 800f2a8:	e7e0      	b.n	800f26c <_printf_float+0x16c>
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	055a      	lsls	r2, r3, #21
 800f2ae:	d407      	bmi.n	800f2c0 <_printf_float+0x1c0>
 800f2b0:	6923      	ldr	r3, [r4, #16]
 800f2b2:	4642      	mov	r2, r8
 800f2b4:	4631      	mov	r1, r6
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	47b8      	blx	r7
 800f2ba:	3001      	adds	r0, #1
 800f2bc:	d12a      	bne.n	800f314 <_printf_float+0x214>
 800f2be:	e76b      	b.n	800f198 <_printf_float+0x98>
 800f2c0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f2c4:	f240 80e0 	bls.w	800f488 <_printf_float+0x388>
 800f2c8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f2cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d4:	d133      	bne.n	800f33e <_printf_float+0x23e>
 800f2d6:	4a38      	ldr	r2, [pc, #224]	@ (800f3b8 <_printf_float+0x2b8>)
 800f2d8:	2301      	movs	r3, #1
 800f2da:	4631      	mov	r1, r6
 800f2dc:	4628      	mov	r0, r5
 800f2de:	47b8      	blx	r7
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	f43f af59 	beq.w	800f198 <_printf_float+0x98>
 800f2e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f2ea:	4543      	cmp	r3, r8
 800f2ec:	db02      	blt.n	800f2f4 <_printf_float+0x1f4>
 800f2ee:	6823      	ldr	r3, [r4, #0]
 800f2f0:	07d8      	lsls	r0, r3, #31
 800f2f2:	d50f      	bpl.n	800f314 <_printf_float+0x214>
 800f2f4:	9b05      	ldr	r3, [sp, #20]
 800f2f6:	465a      	mov	r2, fp
 800f2f8:	4631      	mov	r1, r6
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	47b8      	blx	r7
 800f2fe:	3001      	adds	r0, #1
 800f300:	f43f af4a 	beq.w	800f198 <_printf_float+0x98>
 800f304:	f04f 0900 	mov.w	r9, #0
 800f308:	f108 38ff 	add.w	r8, r8, #4294967295
 800f30c:	f104 0a1a 	add.w	sl, r4, #26
 800f310:	45c8      	cmp	r8, r9
 800f312:	dc09      	bgt.n	800f328 <_printf_float+0x228>
 800f314:	6823      	ldr	r3, [r4, #0]
 800f316:	079b      	lsls	r3, r3, #30
 800f318:	f100 8107 	bmi.w	800f52a <_printf_float+0x42a>
 800f31c:	68e0      	ldr	r0, [r4, #12]
 800f31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f320:	4298      	cmp	r0, r3
 800f322:	bfb8      	it	lt
 800f324:	4618      	movlt	r0, r3
 800f326:	e739      	b.n	800f19c <_printf_float+0x9c>
 800f328:	2301      	movs	r3, #1
 800f32a:	4652      	mov	r2, sl
 800f32c:	4631      	mov	r1, r6
 800f32e:	4628      	mov	r0, r5
 800f330:	47b8      	blx	r7
 800f332:	3001      	adds	r0, #1
 800f334:	f43f af30 	beq.w	800f198 <_printf_float+0x98>
 800f338:	f109 0901 	add.w	r9, r9, #1
 800f33c:	e7e8      	b.n	800f310 <_printf_float+0x210>
 800f33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f340:	2b00      	cmp	r3, #0
 800f342:	dc3b      	bgt.n	800f3bc <_printf_float+0x2bc>
 800f344:	4a1c      	ldr	r2, [pc, #112]	@ (800f3b8 <_printf_float+0x2b8>)
 800f346:	2301      	movs	r3, #1
 800f348:	4631      	mov	r1, r6
 800f34a:	4628      	mov	r0, r5
 800f34c:	47b8      	blx	r7
 800f34e:	3001      	adds	r0, #1
 800f350:	f43f af22 	beq.w	800f198 <_printf_float+0x98>
 800f354:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f358:	ea59 0303 	orrs.w	r3, r9, r3
 800f35c:	d102      	bne.n	800f364 <_printf_float+0x264>
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	07d9      	lsls	r1, r3, #31
 800f362:	d5d7      	bpl.n	800f314 <_printf_float+0x214>
 800f364:	9b05      	ldr	r3, [sp, #20]
 800f366:	465a      	mov	r2, fp
 800f368:	4631      	mov	r1, r6
 800f36a:	4628      	mov	r0, r5
 800f36c:	47b8      	blx	r7
 800f36e:	3001      	adds	r0, #1
 800f370:	f43f af12 	beq.w	800f198 <_printf_float+0x98>
 800f374:	f04f 0a00 	mov.w	sl, #0
 800f378:	f104 0b1a 	add.w	fp, r4, #26
 800f37c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f37e:	425b      	negs	r3, r3
 800f380:	4553      	cmp	r3, sl
 800f382:	dc01      	bgt.n	800f388 <_printf_float+0x288>
 800f384:	464b      	mov	r3, r9
 800f386:	e794      	b.n	800f2b2 <_printf_float+0x1b2>
 800f388:	2301      	movs	r3, #1
 800f38a:	465a      	mov	r2, fp
 800f38c:	4631      	mov	r1, r6
 800f38e:	4628      	mov	r0, r5
 800f390:	47b8      	blx	r7
 800f392:	3001      	adds	r0, #1
 800f394:	f43f af00 	beq.w	800f198 <_printf_float+0x98>
 800f398:	f10a 0a01 	add.w	sl, sl, #1
 800f39c:	e7ee      	b.n	800f37c <_printf_float+0x27c>
 800f39e:	bf00      	nop
 800f3a0:	ffffffff 	.word	0xffffffff
 800f3a4:	7fefffff 	.word	0x7fefffff
 800f3a8:	08013d6c 	.word	0x08013d6c
 800f3ac:	08013d70 	.word	0x08013d70
 800f3b0:	08013d74 	.word	0x08013d74
 800f3b4:	08013d78 	.word	0x08013d78
 800f3b8:	08013d7c 	.word	0x08013d7c
 800f3bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f3be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f3c2:	4553      	cmp	r3, sl
 800f3c4:	bfa8      	it	ge
 800f3c6:	4653      	movge	r3, sl
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	4699      	mov	r9, r3
 800f3cc:	dc37      	bgt.n	800f43e <_printf_float+0x33e>
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	9307      	str	r3, [sp, #28]
 800f3d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3d6:	f104 021a 	add.w	r2, r4, #26
 800f3da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f3dc:	9907      	ldr	r1, [sp, #28]
 800f3de:	9306      	str	r3, [sp, #24]
 800f3e0:	eba3 0309 	sub.w	r3, r3, r9
 800f3e4:	428b      	cmp	r3, r1
 800f3e6:	dc31      	bgt.n	800f44c <_printf_float+0x34c>
 800f3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3ea:	459a      	cmp	sl, r3
 800f3ec:	dc3b      	bgt.n	800f466 <_printf_float+0x366>
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	07da      	lsls	r2, r3, #31
 800f3f2:	d438      	bmi.n	800f466 <_printf_float+0x366>
 800f3f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3f6:	ebaa 0903 	sub.w	r9, sl, r3
 800f3fa:	9b06      	ldr	r3, [sp, #24]
 800f3fc:	ebaa 0303 	sub.w	r3, sl, r3
 800f400:	4599      	cmp	r9, r3
 800f402:	bfa8      	it	ge
 800f404:	4699      	movge	r9, r3
 800f406:	f1b9 0f00 	cmp.w	r9, #0
 800f40a:	dc34      	bgt.n	800f476 <_printf_float+0x376>
 800f40c:	f04f 0800 	mov.w	r8, #0
 800f410:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f414:	f104 0b1a 	add.w	fp, r4, #26
 800f418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f41a:	ebaa 0303 	sub.w	r3, sl, r3
 800f41e:	eba3 0309 	sub.w	r3, r3, r9
 800f422:	4543      	cmp	r3, r8
 800f424:	f77f af76 	ble.w	800f314 <_printf_float+0x214>
 800f428:	2301      	movs	r3, #1
 800f42a:	465a      	mov	r2, fp
 800f42c:	4631      	mov	r1, r6
 800f42e:	4628      	mov	r0, r5
 800f430:	47b8      	blx	r7
 800f432:	3001      	adds	r0, #1
 800f434:	f43f aeb0 	beq.w	800f198 <_printf_float+0x98>
 800f438:	f108 0801 	add.w	r8, r8, #1
 800f43c:	e7ec      	b.n	800f418 <_printf_float+0x318>
 800f43e:	4642      	mov	r2, r8
 800f440:	4631      	mov	r1, r6
 800f442:	4628      	mov	r0, r5
 800f444:	47b8      	blx	r7
 800f446:	3001      	adds	r0, #1
 800f448:	d1c1      	bne.n	800f3ce <_printf_float+0x2ce>
 800f44a:	e6a5      	b.n	800f198 <_printf_float+0x98>
 800f44c:	2301      	movs	r3, #1
 800f44e:	4631      	mov	r1, r6
 800f450:	4628      	mov	r0, r5
 800f452:	9206      	str	r2, [sp, #24]
 800f454:	47b8      	blx	r7
 800f456:	3001      	adds	r0, #1
 800f458:	f43f ae9e 	beq.w	800f198 <_printf_float+0x98>
 800f45c:	9b07      	ldr	r3, [sp, #28]
 800f45e:	9a06      	ldr	r2, [sp, #24]
 800f460:	3301      	adds	r3, #1
 800f462:	9307      	str	r3, [sp, #28]
 800f464:	e7b9      	b.n	800f3da <_printf_float+0x2da>
 800f466:	9b05      	ldr	r3, [sp, #20]
 800f468:	465a      	mov	r2, fp
 800f46a:	4631      	mov	r1, r6
 800f46c:	4628      	mov	r0, r5
 800f46e:	47b8      	blx	r7
 800f470:	3001      	adds	r0, #1
 800f472:	d1bf      	bne.n	800f3f4 <_printf_float+0x2f4>
 800f474:	e690      	b.n	800f198 <_printf_float+0x98>
 800f476:	9a06      	ldr	r2, [sp, #24]
 800f478:	464b      	mov	r3, r9
 800f47a:	4442      	add	r2, r8
 800f47c:	4631      	mov	r1, r6
 800f47e:	4628      	mov	r0, r5
 800f480:	47b8      	blx	r7
 800f482:	3001      	adds	r0, #1
 800f484:	d1c2      	bne.n	800f40c <_printf_float+0x30c>
 800f486:	e687      	b.n	800f198 <_printf_float+0x98>
 800f488:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f48c:	f1b9 0f01 	cmp.w	r9, #1
 800f490:	dc01      	bgt.n	800f496 <_printf_float+0x396>
 800f492:	07db      	lsls	r3, r3, #31
 800f494:	d536      	bpl.n	800f504 <_printf_float+0x404>
 800f496:	2301      	movs	r3, #1
 800f498:	4642      	mov	r2, r8
 800f49a:	4631      	mov	r1, r6
 800f49c:	4628      	mov	r0, r5
 800f49e:	47b8      	blx	r7
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	f43f ae79 	beq.w	800f198 <_printf_float+0x98>
 800f4a6:	9b05      	ldr	r3, [sp, #20]
 800f4a8:	465a      	mov	r2, fp
 800f4aa:	4631      	mov	r1, r6
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	47b8      	blx	r7
 800f4b0:	3001      	adds	r0, #1
 800f4b2:	f43f ae71 	beq.w	800f198 <_printf_float+0x98>
 800f4b6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f4ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c2:	f109 39ff 	add.w	r9, r9, #4294967295
 800f4c6:	d018      	beq.n	800f4fa <_printf_float+0x3fa>
 800f4c8:	464b      	mov	r3, r9
 800f4ca:	f108 0201 	add.w	r2, r8, #1
 800f4ce:	4631      	mov	r1, r6
 800f4d0:	4628      	mov	r0, r5
 800f4d2:	47b8      	blx	r7
 800f4d4:	3001      	adds	r0, #1
 800f4d6:	d10c      	bne.n	800f4f2 <_printf_float+0x3f2>
 800f4d8:	e65e      	b.n	800f198 <_printf_float+0x98>
 800f4da:	2301      	movs	r3, #1
 800f4dc:	465a      	mov	r2, fp
 800f4de:	4631      	mov	r1, r6
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	47b8      	blx	r7
 800f4e4:	3001      	adds	r0, #1
 800f4e6:	f43f ae57 	beq.w	800f198 <_printf_float+0x98>
 800f4ea:	f108 0801 	add.w	r8, r8, #1
 800f4ee:	45c8      	cmp	r8, r9
 800f4f0:	dbf3      	blt.n	800f4da <_printf_float+0x3da>
 800f4f2:	4653      	mov	r3, sl
 800f4f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f4f8:	e6dc      	b.n	800f2b4 <_printf_float+0x1b4>
 800f4fa:	f04f 0800 	mov.w	r8, #0
 800f4fe:	f104 0b1a 	add.w	fp, r4, #26
 800f502:	e7f4      	b.n	800f4ee <_printf_float+0x3ee>
 800f504:	2301      	movs	r3, #1
 800f506:	4642      	mov	r2, r8
 800f508:	e7e1      	b.n	800f4ce <_printf_float+0x3ce>
 800f50a:	2301      	movs	r3, #1
 800f50c:	464a      	mov	r2, r9
 800f50e:	4631      	mov	r1, r6
 800f510:	4628      	mov	r0, r5
 800f512:	47b8      	blx	r7
 800f514:	3001      	adds	r0, #1
 800f516:	f43f ae3f 	beq.w	800f198 <_printf_float+0x98>
 800f51a:	f108 0801 	add.w	r8, r8, #1
 800f51e:	68e3      	ldr	r3, [r4, #12]
 800f520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f522:	1a5b      	subs	r3, r3, r1
 800f524:	4543      	cmp	r3, r8
 800f526:	dcf0      	bgt.n	800f50a <_printf_float+0x40a>
 800f528:	e6f8      	b.n	800f31c <_printf_float+0x21c>
 800f52a:	f04f 0800 	mov.w	r8, #0
 800f52e:	f104 0919 	add.w	r9, r4, #25
 800f532:	e7f4      	b.n	800f51e <_printf_float+0x41e>

0800f534 <_printf_common>:
 800f534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f538:	4616      	mov	r6, r2
 800f53a:	4698      	mov	r8, r3
 800f53c:	688a      	ldr	r2, [r1, #8]
 800f53e:	690b      	ldr	r3, [r1, #16]
 800f540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f544:	4293      	cmp	r3, r2
 800f546:	bfb8      	it	lt
 800f548:	4613      	movlt	r3, r2
 800f54a:	6033      	str	r3, [r6, #0]
 800f54c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f550:	4607      	mov	r7, r0
 800f552:	460c      	mov	r4, r1
 800f554:	b10a      	cbz	r2, 800f55a <_printf_common+0x26>
 800f556:	3301      	adds	r3, #1
 800f558:	6033      	str	r3, [r6, #0]
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	0699      	lsls	r1, r3, #26
 800f55e:	bf42      	ittt	mi
 800f560:	6833      	ldrmi	r3, [r6, #0]
 800f562:	3302      	addmi	r3, #2
 800f564:	6033      	strmi	r3, [r6, #0]
 800f566:	6825      	ldr	r5, [r4, #0]
 800f568:	f015 0506 	ands.w	r5, r5, #6
 800f56c:	d106      	bne.n	800f57c <_printf_common+0x48>
 800f56e:	f104 0a19 	add.w	sl, r4, #25
 800f572:	68e3      	ldr	r3, [r4, #12]
 800f574:	6832      	ldr	r2, [r6, #0]
 800f576:	1a9b      	subs	r3, r3, r2
 800f578:	42ab      	cmp	r3, r5
 800f57a:	dc26      	bgt.n	800f5ca <_printf_common+0x96>
 800f57c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f580:	6822      	ldr	r2, [r4, #0]
 800f582:	3b00      	subs	r3, #0
 800f584:	bf18      	it	ne
 800f586:	2301      	movne	r3, #1
 800f588:	0692      	lsls	r2, r2, #26
 800f58a:	d42b      	bmi.n	800f5e4 <_printf_common+0xb0>
 800f58c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f590:	4641      	mov	r1, r8
 800f592:	4638      	mov	r0, r7
 800f594:	47c8      	blx	r9
 800f596:	3001      	adds	r0, #1
 800f598:	d01e      	beq.n	800f5d8 <_printf_common+0xa4>
 800f59a:	6823      	ldr	r3, [r4, #0]
 800f59c:	6922      	ldr	r2, [r4, #16]
 800f59e:	f003 0306 	and.w	r3, r3, #6
 800f5a2:	2b04      	cmp	r3, #4
 800f5a4:	bf02      	ittt	eq
 800f5a6:	68e5      	ldreq	r5, [r4, #12]
 800f5a8:	6833      	ldreq	r3, [r6, #0]
 800f5aa:	1aed      	subeq	r5, r5, r3
 800f5ac:	68a3      	ldr	r3, [r4, #8]
 800f5ae:	bf0c      	ite	eq
 800f5b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5b4:	2500      	movne	r5, #0
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	bfc4      	itt	gt
 800f5ba:	1a9b      	subgt	r3, r3, r2
 800f5bc:	18ed      	addgt	r5, r5, r3
 800f5be:	2600      	movs	r6, #0
 800f5c0:	341a      	adds	r4, #26
 800f5c2:	42b5      	cmp	r5, r6
 800f5c4:	d11a      	bne.n	800f5fc <_printf_common+0xc8>
 800f5c6:	2000      	movs	r0, #0
 800f5c8:	e008      	b.n	800f5dc <_printf_common+0xa8>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	4652      	mov	r2, sl
 800f5ce:	4641      	mov	r1, r8
 800f5d0:	4638      	mov	r0, r7
 800f5d2:	47c8      	blx	r9
 800f5d4:	3001      	adds	r0, #1
 800f5d6:	d103      	bne.n	800f5e0 <_printf_common+0xac>
 800f5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5e0:	3501      	adds	r5, #1
 800f5e2:	e7c6      	b.n	800f572 <_printf_common+0x3e>
 800f5e4:	18e1      	adds	r1, r4, r3
 800f5e6:	1c5a      	adds	r2, r3, #1
 800f5e8:	2030      	movs	r0, #48	@ 0x30
 800f5ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f5ee:	4422      	add	r2, r4
 800f5f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f5f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f5f8:	3302      	adds	r3, #2
 800f5fa:	e7c7      	b.n	800f58c <_printf_common+0x58>
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	4622      	mov	r2, r4
 800f600:	4641      	mov	r1, r8
 800f602:	4638      	mov	r0, r7
 800f604:	47c8      	blx	r9
 800f606:	3001      	adds	r0, #1
 800f608:	d0e6      	beq.n	800f5d8 <_printf_common+0xa4>
 800f60a:	3601      	adds	r6, #1
 800f60c:	e7d9      	b.n	800f5c2 <_printf_common+0x8e>
	...

0800f610 <_printf_i>:
 800f610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f614:	7e0f      	ldrb	r7, [r1, #24]
 800f616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f618:	2f78      	cmp	r7, #120	@ 0x78
 800f61a:	4691      	mov	r9, r2
 800f61c:	4680      	mov	r8, r0
 800f61e:	460c      	mov	r4, r1
 800f620:	469a      	mov	sl, r3
 800f622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f626:	d807      	bhi.n	800f638 <_printf_i+0x28>
 800f628:	2f62      	cmp	r7, #98	@ 0x62
 800f62a:	d80a      	bhi.n	800f642 <_printf_i+0x32>
 800f62c:	2f00      	cmp	r7, #0
 800f62e:	f000 80d2 	beq.w	800f7d6 <_printf_i+0x1c6>
 800f632:	2f58      	cmp	r7, #88	@ 0x58
 800f634:	f000 80b9 	beq.w	800f7aa <_printf_i+0x19a>
 800f638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f63c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f640:	e03a      	b.n	800f6b8 <_printf_i+0xa8>
 800f642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f646:	2b15      	cmp	r3, #21
 800f648:	d8f6      	bhi.n	800f638 <_printf_i+0x28>
 800f64a:	a101      	add	r1, pc, #4	@ (adr r1, 800f650 <_printf_i+0x40>)
 800f64c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f650:	0800f6a9 	.word	0x0800f6a9
 800f654:	0800f6bd 	.word	0x0800f6bd
 800f658:	0800f639 	.word	0x0800f639
 800f65c:	0800f639 	.word	0x0800f639
 800f660:	0800f639 	.word	0x0800f639
 800f664:	0800f639 	.word	0x0800f639
 800f668:	0800f6bd 	.word	0x0800f6bd
 800f66c:	0800f639 	.word	0x0800f639
 800f670:	0800f639 	.word	0x0800f639
 800f674:	0800f639 	.word	0x0800f639
 800f678:	0800f639 	.word	0x0800f639
 800f67c:	0800f7bd 	.word	0x0800f7bd
 800f680:	0800f6e7 	.word	0x0800f6e7
 800f684:	0800f777 	.word	0x0800f777
 800f688:	0800f639 	.word	0x0800f639
 800f68c:	0800f639 	.word	0x0800f639
 800f690:	0800f7df 	.word	0x0800f7df
 800f694:	0800f639 	.word	0x0800f639
 800f698:	0800f6e7 	.word	0x0800f6e7
 800f69c:	0800f639 	.word	0x0800f639
 800f6a0:	0800f639 	.word	0x0800f639
 800f6a4:	0800f77f 	.word	0x0800f77f
 800f6a8:	6833      	ldr	r3, [r6, #0]
 800f6aa:	1d1a      	adds	r2, r3, #4
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	6032      	str	r2, [r6, #0]
 800f6b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f6b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	e09d      	b.n	800f7f8 <_printf_i+0x1e8>
 800f6bc:	6833      	ldr	r3, [r6, #0]
 800f6be:	6820      	ldr	r0, [r4, #0]
 800f6c0:	1d19      	adds	r1, r3, #4
 800f6c2:	6031      	str	r1, [r6, #0]
 800f6c4:	0606      	lsls	r6, r0, #24
 800f6c6:	d501      	bpl.n	800f6cc <_printf_i+0xbc>
 800f6c8:	681d      	ldr	r5, [r3, #0]
 800f6ca:	e003      	b.n	800f6d4 <_printf_i+0xc4>
 800f6cc:	0645      	lsls	r5, r0, #25
 800f6ce:	d5fb      	bpl.n	800f6c8 <_printf_i+0xb8>
 800f6d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f6d4:	2d00      	cmp	r5, #0
 800f6d6:	da03      	bge.n	800f6e0 <_printf_i+0xd0>
 800f6d8:	232d      	movs	r3, #45	@ 0x2d
 800f6da:	426d      	negs	r5, r5
 800f6dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6e0:	4859      	ldr	r0, [pc, #356]	@ (800f848 <_printf_i+0x238>)
 800f6e2:	230a      	movs	r3, #10
 800f6e4:	e011      	b.n	800f70a <_printf_i+0xfa>
 800f6e6:	6821      	ldr	r1, [r4, #0]
 800f6e8:	6833      	ldr	r3, [r6, #0]
 800f6ea:	0608      	lsls	r0, r1, #24
 800f6ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800f6f0:	d402      	bmi.n	800f6f8 <_printf_i+0xe8>
 800f6f2:	0649      	lsls	r1, r1, #25
 800f6f4:	bf48      	it	mi
 800f6f6:	b2ad      	uxthmi	r5, r5
 800f6f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f6fa:	4853      	ldr	r0, [pc, #332]	@ (800f848 <_printf_i+0x238>)
 800f6fc:	6033      	str	r3, [r6, #0]
 800f6fe:	bf14      	ite	ne
 800f700:	230a      	movne	r3, #10
 800f702:	2308      	moveq	r3, #8
 800f704:	2100      	movs	r1, #0
 800f706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f70a:	6866      	ldr	r6, [r4, #4]
 800f70c:	60a6      	str	r6, [r4, #8]
 800f70e:	2e00      	cmp	r6, #0
 800f710:	bfa2      	ittt	ge
 800f712:	6821      	ldrge	r1, [r4, #0]
 800f714:	f021 0104 	bicge.w	r1, r1, #4
 800f718:	6021      	strge	r1, [r4, #0]
 800f71a:	b90d      	cbnz	r5, 800f720 <_printf_i+0x110>
 800f71c:	2e00      	cmp	r6, #0
 800f71e:	d04b      	beq.n	800f7b8 <_printf_i+0x1a8>
 800f720:	4616      	mov	r6, r2
 800f722:	fbb5 f1f3 	udiv	r1, r5, r3
 800f726:	fb03 5711 	mls	r7, r3, r1, r5
 800f72a:	5dc7      	ldrb	r7, [r0, r7]
 800f72c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f730:	462f      	mov	r7, r5
 800f732:	42bb      	cmp	r3, r7
 800f734:	460d      	mov	r5, r1
 800f736:	d9f4      	bls.n	800f722 <_printf_i+0x112>
 800f738:	2b08      	cmp	r3, #8
 800f73a:	d10b      	bne.n	800f754 <_printf_i+0x144>
 800f73c:	6823      	ldr	r3, [r4, #0]
 800f73e:	07df      	lsls	r7, r3, #31
 800f740:	d508      	bpl.n	800f754 <_printf_i+0x144>
 800f742:	6923      	ldr	r3, [r4, #16]
 800f744:	6861      	ldr	r1, [r4, #4]
 800f746:	4299      	cmp	r1, r3
 800f748:	bfde      	ittt	le
 800f74a:	2330      	movle	r3, #48	@ 0x30
 800f74c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f750:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f754:	1b92      	subs	r2, r2, r6
 800f756:	6122      	str	r2, [r4, #16]
 800f758:	f8cd a000 	str.w	sl, [sp]
 800f75c:	464b      	mov	r3, r9
 800f75e:	aa03      	add	r2, sp, #12
 800f760:	4621      	mov	r1, r4
 800f762:	4640      	mov	r0, r8
 800f764:	f7ff fee6 	bl	800f534 <_printf_common>
 800f768:	3001      	adds	r0, #1
 800f76a:	d14a      	bne.n	800f802 <_printf_i+0x1f2>
 800f76c:	f04f 30ff 	mov.w	r0, #4294967295
 800f770:	b004      	add	sp, #16
 800f772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	f043 0320 	orr.w	r3, r3, #32
 800f77c:	6023      	str	r3, [r4, #0]
 800f77e:	4833      	ldr	r0, [pc, #204]	@ (800f84c <_printf_i+0x23c>)
 800f780:	2778      	movs	r7, #120	@ 0x78
 800f782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f786:	6823      	ldr	r3, [r4, #0]
 800f788:	6831      	ldr	r1, [r6, #0]
 800f78a:	061f      	lsls	r7, r3, #24
 800f78c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f790:	d402      	bmi.n	800f798 <_printf_i+0x188>
 800f792:	065f      	lsls	r7, r3, #25
 800f794:	bf48      	it	mi
 800f796:	b2ad      	uxthmi	r5, r5
 800f798:	6031      	str	r1, [r6, #0]
 800f79a:	07d9      	lsls	r1, r3, #31
 800f79c:	bf44      	itt	mi
 800f79e:	f043 0320 	orrmi.w	r3, r3, #32
 800f7a2:	6023      	strmi	r3, [r4, #0]
 800f7a4:	b11d      	cbz	r5, 800f7ae <_printf_i+0x19e>
 800f7a6:	2310      	movs	r3, #16
 800f7a8:	e7ac      	b.n	800f704 <_printf_i+0xf4>
 800f7aa:	4827      	ldr	r0, [pc, #156]	@ (800f848 <_printf_i+0x238>)
 800f7ac:	e7e9      	b.n	800f782 <_printf_i+0x172>
 800f7ae:	6823      	ldr	r3, [r4, #0]
 800f7b0:	f023 0320 	bic.w	r3, r3, #32
 800f7b4:	6023      	str	r3, [r4, #0]
 800f7b6:	e7f6      	b.n	800f7a6 <_printf_i+0x196>
 800f7b8:	4616      	mov	r6, r2
 800f7ba:	e7bd      	b.n	800f738 <_printf_i+0x128>
 800f7bc:	6833      	ldr	r3, [r6, #0]
 800f7be:	6825      	ldr	r5, [r4, #0]
 800f7c0:	6961      	ldr	r1, [r4, #20]
 800f7c2:	1d18      	adds	r0, r3, #4
 800f7c4:	6030      	str	r0, [r6, #0]
 800f7c6:	062e      	lsls	r6, r5, #24
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	d501      	bpl.n	800f7d0 <_printf_i+0x1c0>
 800f7cc:	6019      	str	r1, [r3, #0]
 800f7ce:	e002      	b.n	800f7d6 <_printf_i+0x1c6>
 800f7d0:	0668      	lsls	r0, r5, #25
 800f7d2:	d5fb      	bpl.n	800f7cc <_printf_i+0x1bc>
 800f7d4:	8019      	strh	r1, [r3, #0]
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	6123      	str	r3, [r4, #16]
 800f7da:	4616      	mov	r6, r2
 800f7dc:	e7bc      	b.n	800f758 <_printf_i+0x148>
 800f7de:	6833      	ldr	r3, [r6, #0]
 800f7e0:	1d1a      	adds	r2, r3, #4
 800f7e2:	6032      	str	r2, [r6, #0]
 800f7e4:	681e      	ldr	r6, [r3, #0]
 800f7e6:	6862      	ldr	r2, [r4, #4]
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	f7f0 fd78 	bl	80002e0 <memchr>
 800f7f0:	b108      	cbz	r0, 800f7f6 <_printf_i+0x1e6>
 800f7f2:	1b80      	subs	r0, r0, r6
 800f7f4:	6060      	str	r0, [r4, #4]
 800f7f6:	6863      	ldr	r3, [r4, #4]
 800f7f8:	6123      	str	r3, [r4, #16]
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f800:	e7aa      	b.n	800f758 <_printf_i+0x148>
 800f802:	6923      	ldr	r3, [r4, #16]
 800f804:	4632      	mov	r2, r6
 800f806:	4649      	mov	r1, r9
 800f808:	4640      	mov	r0, r8
 800f80a:	47d0      	blx	sl
 800f80c:	3001      	adds	r0, #1
 800f80e:	d0ad      	beq.n	800f76c <_printf_i+0x15c>
 800f810:	6823      	ldr	r3, [r4, #0]
 800f812:	079b      	lsls	r3, r3, #30
 800f814:	d413      	bmi.n	800f83e <_printf_i+0x22e>
 800f816:	68e0      	ldr	r0, [r4, #12]
 800f818:	9b03      	ldr	r3, [sp, #12]
 800f81a:	4298      	cmp	r0, r3
 800f81c:	bfb8      	it	lt
 800f81e:	4618      	movlt	r0, r3
 800f820:	e7a6      	b.n	800f770 <_printf_i+0x160>
 800f822:	2301      	movs	r3, #1
 800f824:	4632      	mov	r2, r6
 800f826:	4649      	mov	r1, r9
 800f828:	4640      	mov	r0, r8
 800f82a:	47d0      	blx	sl
 800f82c:	3001      	adds	r0, #1
 800f82e:	d09d      	beq.n	800f76c <_printf_i+0x15c>
 800f830:	3501      	adds	r5, #1
 800f832:	68e3      	ldr	r3, [r4, #12]
 800f834:	9903      	ldr	r1, [sp, #12]
 800f836:	1a5b      	subs	r3, r3, r1
 800f838:	42ab      	cmp	r3, r5
 800f83a:	dcf2      	bgt.n	800f822 <_printf_i+0x212>
 800f83c:	e7eb      	b.n	800f816 <_printf_i+0x206>
 800f83e:	2500      	movs	r5, #0
 800f840:	f104 0619 	add.w	r6, r4, #25
 800f844:	e7f5      	b.n	800f832 <_printf_i+0x222>
 800f846:	bf00      	nop
 800f848:	08013d7e 	.word	0x08013d7e
 800f84c:	08013d8f 	.word	0x08013d8f

0800f850 <std>:
 800f850:	2300      	movs	r3, #0
 800f852:	b510      	push	{r4, lr}
 800f854:	4604      	mov	r4, r0
 800f856:	e9c0 3300 	strd	r3, r3, [r0]
 800f85a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f85e:	6083      	str	r3, [r0, #8]
 800f860:	8181      	strh	r1, [r0, #12]
 800f862:	6643      	str	r3, [r0, #100]	@ 0x64
 800f864:	81c2      	strh	r2, [r0, #14]
 800f866:	6183      	str	r3, [r0, #24]
 800f868:	4619      	mov	r1, r3
 800f86a:	2208      	movs	r2, #8
 800f86c:	305c      	adds	r0, #92	@ 0x5c
 800f86e:	f000 f914 	bl	800fa9a <memset>
 800f872:	4b0d      	ldr	r3, [pc, #52]	@ (800f8a8 <std+0x58>)
 800f874:	6263      	str	r3, [r4, #36]	@ 0x24
 800f876:	4b0d      	ldr	r3, [pc, #52]	@ (800f8ac <std+0x5c>)
 800f878:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f87a:	4b0d      	ldr	r3, [pc, #52]	@ (800f8b0 <std+0x60>)
 800f87c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f87e:	4b0d      	ldr	r3, [pc, #52]	@ (800f8b4 <std+0x64>)
 800f880:	6323      	str	r3, [r4, #48]	@ 0x30
 800f882:	4b0d      	ldr	r3, [pc, #52]	@ (800f8b8 <std+0x68>)
 800f884:	6224      	str	r4, [r4, #32]
 800f886:	429c      	cmp	r4, r3
 800f888:	d006      	beq.n	800f898 <std+0x48>
 800f88a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f88e:	4294      	cmp	r4, r2
 800f890:	d002      	beq.n	800f898 <std+0x48>
 800f892:	33d0      	adds	r3, #208	@ 0xd0
 800f894:	429c      	cmp	r4, r3
 800f896:	d105      	bne.n	800f8a4 <std+0x54>
 800f898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8a0:	f000 b982 	b.w	800fba8 <__retarget_lock_init_recursive>
 800f8a4:	bd10      	pop	{r4, pc}
 800f8a6:	bf00      	nop
 800f8a8:	0800fa15 	.word	0x0800fa15
 800f8ac:	0800fa37 	.word	0x0800fa37
 800f8b0:	0800fa6f 	.word	0x0800fa6f
 800f8b4:	0800fa93 	.word	0x0800fa93
 800f8b8:	2400270c 	.word	0x2400270c

0800f8bc <stdio_exit_handler>:
 800f8bc:	4a02      	ldr	r2, [pc, #8]	@ (800f8c8 <stdio_exit_handler+0xc>)
 800f8be:	4903      	ldr	r1, [pc, #12]	@ (800f8cc <stdio_exit_handler+0x10>)
 800f8c0:	4803      	ldr	r0, [pc, #12]	@ (800f8d0 <stdio_exit_handler+0x14>)
 800f8c2:	f000 b869 	b.w	800f998 <_fwalk_sglue>
 800f8c6:	bf00      	nop
 800f8c8:	24000104 	.word	0x24000104
 800f8cc:	080112bd 	.word	0x080112bd
 800f8d0:	24000114 	.word	0x24000114

0800f8d4 <cleanup_stdio>:
 800f8d4:	6841      	ldr	r1, [r0, #4]
 800f8d6:	4b0c      	ldr	r3, [pc, #48]	@ (800f908 <cleanup_stdio+0x34>)
 800f8d8:	4299      	cmp	r1, r3
 800f8da:	b510      	push	{r4, lr}
 800f8dc:	4604      	mov	r4, r0
 800f8de:	d001      	beq.n	800f8e4 <cleanup_stdio+0x10>
 800f8e0:	f001 fcec 	bl	80112bc <_fflush_r>
 800f8e4:	68a1      	ldr	r1, [r4, #8]
 800f8e6:	4b09      	ldr	r3, [pc, #36]	@ (800f90c <cleanup_stdio+0x38>)
 800f8e8:	4299      	cmp	r1, r3
 800f8ea:	d002      	beq.n	800f8f2 <cleanup_stdio+0x1e>
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	f001 fce5 	bl	80112bc <_fflush_r>
 800f8f2:	68e1      	ldr	r1, [r4, #12]
 800f8f4:	4b06      	ldr	r3, [pc, #24]	@ (800f910 <cleanup_stdio+0x3c>)
 800f8f6:	4299      	cmp	r1, r3
 800f8f8:	d004      	beq.n	800f904 <cleanup_stdio+0x30>
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f900:	f001 bcdc 	b.w	80112bc <_fflush_r>
 800f904:	bd10      	pop	{r4, pc}
 800f906:	bf00      	nop
 800f908:	2400270c 	.word	0x2400270c
 800f90c:	24002774 	.word	0x24002774
 800f910:	240027dc 	.word	0x240027dc

0800f914 <global_stdio_init.part.0>:
 800f914:	b510      	push	{r4, lr}
 800f916:	4b0b      	ldr	r3, [pc, #44]	@ (800f944 <global_stdio_init.part.0+0x30>)
 800f918:	4c0b      	ldr	r4, [pc, #44]	@ (800f948 <global_stdio_init.part.0+0x34>)
 800f91a:	4a0c      	ldr	r2, [pc, #48]	@ (800f94c <global_stdio_init.part.0+0x38>)
 800f91c:	601a      	str	r2, [r3, #0]
 800f91e:	4620      	mov	r0, r4
 800f920:	2200      	movs	r2, #0
 800f922:	2104      	movs	r1, #4
 800f924:	f7ff ff94 	bl	800f850 <std>
 800f928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f92c:	2201      	movs	r2, #1
 800f92e:	2109      	movs	r1, #9
 800f930:	f7ff ff8e 	bl	800f850 <std>
 800f934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f938:	2202      	movs	r2, #2
 800f93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f93e:	2112      	movs	r1, #18
 800f940:	f7ff bf86 	b.w	800f850 <std>
 800f944:	24002844 	.word	0x24002844
 800f948:	2400270c 	.word	0x2400270c
 800f94c:	0800f8bd 	.word	0x0800f8bd

0800f950 <__sfp_lock_acquire>:
 800f950:	4801      	ldr	r0, [pc, #4]	@ (800f958 <__sfp_lock_acquire+0x8>)
 800f952:	f000 b92a 	b.w	800fbaa <__retarget_lock_acquire_recursive>
 800f956:	bf00      	nop
 800f958:	2400284d 	.word	0x2400284d

0800f95c <__sfp_lock_release>:
 800f95c:	4801      	ldr	r0, [pc, #4]	@ (800f964 <__sfp_lock_release+0x8>)
 800f95e:	f000 b925 	b.w	800fbac <__retarget_lock_release_recursive>
 800f962:	bf00      	nop
 800f964:	2400284d 	.word	0x2400284d

0800f968 <__sinit>:
 800f968:	b510      	push	{r4, lr}
 800f96a:	4604      	mov	r4, r0
 800f96c:	f7ff fff0 	bl	800f950 <__sfp_lock_acquire>
 800f970:	6a23      	ldr	r3, [r4, #32]
 800f972:	b11b      	cbz	r3, 800f97c <__sinit+0x14>
 800f974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f978:	f7ff bff0 	b.w	800f95c <__sfp_lock_release>
 800f97c:	4b04      	ldr	r3, [pc, #16]	@ (800f990 <__sinit+0x28>)
 800f97e:	6223      	str	r3, [r4, #32]
 800f980:	4b04      	ldr	r3, [pc, #16]	@ (800f994 <__sinit+0x2c>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1f5      	bne.n	800f974 <__sinit+0xc>
 800f988:	f7ff ffc4 	bl	800f914 <global_stdio_init.part.0>
 800f98c:	e7f2      	b.n	800f974 <__sinit+0xc>
 800f98e:	bf00      	nop
 800f990:	0800f8d5 	.word	0x0800f8d5
 800f994:	24002844 	.word	0x24002844

0800f998 <_fwalk_sglue>:
 800f998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f99c:	4607      	mov	r7, r0
 800f99e:	4688      	mov	r8, r1
 800f9a0:	4614      	mov	r4, r2
 800f9a2:	2600      	movs	r6, #0
 800f9a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f9a8:	f1b9 0901 	subs.w	r9, r9, #1
 800f9ac:	d505      	bpl.n	800f9ba <_fwalk_sglue+0x22>
 800f9ae:	6824      	ldr	r4, [r4, #0]
 800f9b0:	2c00      	cmp	r4, #0
 800f9b2:	d1f7      	bne.n	800f9a4 <_fwalk_sglue+0xc>
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ba:	89ab      	ldrh	r3, [r5, #12]
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d907      	bls.n	800f9d0 <_fwalk_sglue+0x38>
 800f9c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	d003      	beq.n	800f9d0 <_fwalk_sglue+0x38>
 800f9c8:	4629      	mov	r1, r5
 800f9ca:	4638      	mov	r0, r7
 800f9cc:	47c0      	blx	r8
 800f9ce:	4306      	orrs	r6, r0
 800f9d0:	3568      	adds	r5, #104	@ 0x68
 800f9d2:	e7e9      	b.n	800f9a8 <_fwalk_sglue+0x10>

0800f9d4 <siprintf>:
 800f9d4:	b40e      	push	{r1, r2, r3}
 800f9d6:	b500      	push	{lr}
 800f9d8:	b09c      	sub	sp, #112	@ 0x70
 800f9da:	ab1d      	add	r3, sp, #116	@ 0x74
 800f9dc:	9002      	str	r0, [sp, #8]
 800f9de:	9006      	str	r0, [sp, #24]
 800f9e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f9e4:	4809      	ldr	r0, [pc, #36]	@ (800fa0c <siprintf+0x38>)
 800f9e6:	9107      	str	r1, [sp, #28]
 800f9e8:	9104      	str	r1, [sp, #16]
 800f9ea:	4909      	ldr	r1, [pc, #36]	@ (800fa10 <siprintf+0x3c>)
 800f9ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9f0:	9105      	str	r1, [sp, #20]
 800f9f2:	6800      	ldr	r0, [r0, #0]
 800f9f4:	9301      	str	r3, [sp, #4]
 800f9f6:	a902      	add	r1, sp, #8
 800f9f8:	f001 fae0 	bl	8010fbc <_svfiprintf_r>
 800f9fc:	9b02      	ldr	r3, [sp, #8]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	701a      	strb	r2, [r3, #0]
 800fa02:	b01c      	add	sp, #112	@ 0x70
 800fa04:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa08:	b003      	add	sp, #12
 800fa0a:	4770      	bx	lr
 800fa0c:	24000110 	.word	0x24000110
 800fa10:	ffff0208 	.word	0xffff0208

0800fa14 <__sread>:
 800fa14:	b510      	push	{r4, lr}
 800fa16:	460c      	mov	r4, r1
 800fa18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa1c:	f000 f86c 	bl	800faf8 <_read_r>
 800fa20:	2800      	cmp	r0, #0
 800fa22:	bfab      	itete	ge
 800fa24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fa26:	89a3      	ldrhlt	r3, [r4, #12]
 800fa28:	181b      	addge	r3, r3, r0
 800fa2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fa2e:	bfac      	ite	ge
 800fa30:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fa32:	81a3      	strhlt	r3, [r4, #12]
 800fa34:	bd10      	pop	{r4, pc}

0800fa36 <__swrite>:
 800fa36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa3a:	461f      	mov	r7, r3
 800fa3c:	898b      	ldrh	r3, [r1, #12]
 800fa3e:	05db      	lsls	r3, r3, #23
 800fa40:	4605      	mov	r5, r0
 800fa42:	460c      	mov	r4, r1
 800fa44:	4616      	mov	r6, r2
 800fa46:	d505      	bpl.n	800fa54 <__swrite+0x1e>
 800fa48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa4c:	2302      	movs	r3, #2
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f000 f840 	bl	800fad4 <_lseek_r>
 800fa54:	89a3      	ldrh	r3, [r4, #12]
 800fa56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa5e:	81a3      	strh	r3, [r4, #12]
 800fa60:	4632      	mov	r2, r6
 800fa62:	463b      	mov	r3, r7
 800fa64:	4628      	mov	r0, r5
 800fa66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa6a:	f000 b867 	b.w	800fb3c <_write_r>

0800fa6e <__sseek>:
 800fa6e:	b510      	push	{r4, lr}
 800fa70:	460c      	mov	r4, r1
 800fa72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa76:	f000 f82d 	bl	800fad4 <_lseek_r>
 800fa7a:	1c43      	adds	r3, r0, #1
 800fa7c:	89a3      	ldrh	r3, [r4, #12]
 800fa7e:	bf15      	itete	ne
 800fa80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa8a:	81a3      	strheq	r3, [r4, #12]
 800fa8c:	bf18      	it	ne
 800fa8e:	81a3      	strhne	r3, [r4, #12]
 800fa90:	bd10      	pop	{r4, pc}

0800fa92 <__sclose>:
 800fa92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa96:	f000 b80d 	b.w	800fab4 <_close_r>

0800fa9a <memset>:
 800fa9a:	4402      	add	r2, r0
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d100      	bne.n	800faa4 <memset+0xa>
 800faa2:	4770      	bx	lr
 800faa4:	f803 1b01 	strb.w	r1, [r3], #1
 800faa8:	e7f9      	b.n	800fa9e <memset+0x4>
	...

0800faac <_localeconv_r>:
 800faac:	4800      	ldr	r0, [pc, #0]	@ (800fab0 <_localeconv_r+0x4>)
 800faae:	4770      	bx	lr
 800fab0:	24000250 	.word	0x24000250

0800fab4 <_close_r>:
 800fab4:	b538      	push	{r3, r4, r5, lr}
 800fab6:	4d06      	ldr	r5, [pc, #24]	@ (800fad0 <_close_r+0x1c>)
 800fab8:	2300      	movs	r3, #0
 800faba:	4604      	mov	r4, r0
 800fabc:	4608      	mov	r0, r1
 800fabe:	602b      	str	r3, [r5, #0]
 800fac0:	f7fd f946 	bl	800cd50 <_close>
 800fac4:	1c43      	adds	r3, r0, #1
 800fac6:	d102      	bne.n	800face <_close_r+0x1a>
 800fac8:	682b      	ldr	r3, [r5, #0]
 800faca:	b103      	cbz	r3, 800face <_close_r+0x1a>
 800facc:	6023      	str	r3, [r4, #0]
 800face:	bd38      	pop	{r3, r4, r5, pc}
 800fad0:	24002848 	.word	0x24002848

0800fad4 <_lseek_r>:
 800fad4:	b538      	push	{r3, r4, r5, lr}
 800fad6:	4d07      	ldr	r5, [pc, #28]	@ (800faf4 <_lseek_r+0x20>)
 800fad8:	4604      	mov	r4, r0
 800fada:	4608      	mov	r0, r1
 800fadc:	4611      	mov	r1, r2
 800fade:	2200      	movs	r2, #0
 800fae0:	602a      	str	r2, [r5, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	f7fd f93b 	bl	800cd5e <_lseek>
 800fae8:	1c43      	adds	r3, r0, #1
 800faea:	d102      	bne.n	800faf2 <_lseek_r+0x1e>
 800faec:	682b      	ldr	r3, [r5, #0]
 800faee:	b103      	cbz	r3, 800faf2 <_lseek_r+0x1e>
 800faf0:	6023      	str	r3, [r4, #0]
 800faf2:	bd38      	pop	{r3, r4, r5, pc}
 800faf4:	24002848 	.word	0x24002848

0800faf8 <_read_r>:
 800faf8:	b538      	push	{r3, r4, r5, lr}
 800fafa:	4d07      	ldr	r5, [pc, #28]	@ (800fb18 <_read_r+0x20>)
 800fafc:	4604      	mov	r4, r0
 800fafe:	4608      	mov	r0, r1
 800fb00:	4611      	mov	r1, r2
 800fb02:	2200      	movs	r2, #0
 800fb04:	602a      	str	r2, [r5, #0]
 800fb06:	461a      	mov	r2, r3
 800fb08:	f7fd f930 	bl	800cd6c <_read>
 800fb0c:	1c43      	adds	r3, r0, #1
 800fb0e:	d102      	bne.n	800fb16 <_read_r+0x1e>
 800fb10:	682b      	ldr	r3, [r5, #0]
 800fb12:	b103      	cbz	r3, 800fb16 <_read_r+0x1e>
 800fb14:	6023      	str	r3, [r4, #0]
 800fb16:	bd38      	pop	{r3, r4, r5, pc}
 800fb18:	24002848 	.word	0x24002848

0800fb1c <_sbrk_r>:
 800fb1c:	b538      	push	{r3, r4, r5, lr}
 800fb1e:	4d06      	ldr	r5, [pc, #24]	@ (800fb38 <_sbrk_r+0x1c>)
 800fb20:	2300      	movs	r3, #0
 800fb22:	4604      	mov	r4, r0
 800fb24:	4608      	mov	r0, r1
 800fb26:	602b      	str	r3, [r5, #0]
 800fb28:	f002 f8b0 	bl	8011c8c <_sbrk>
 800fb2c:	1c43      	adds	r3, r0, #1
 800fb2e:	d102      	bne.n	800fb36 <_sbrk_r+0x1a>
 800fb30:	682b      	ldr	r3, [r5, #0]
 800fb32:	b103      	cbz	r3, 800fb36 <_sbrk_r+0x1a>
 800fb34:	6023      	str	r3, [r4, #0]
 800fb36:	bd38      	pop	{r3, r4, r5, pc}
 800fb38:	24002848 	.word	0x24002848

0800fb3c <_write_r>:
 800fb3c:	b538      	push	{r3, r4, r5, lr}
 800fb3e:	4d07      	ldr	r5, [pc, #28]	@ (800fb5c <_write_r+0x20>)
 800fb40:	4604      	mov	r4, r0
 800fb42:	4608      	mov	r0, r1
 800fb44:	4611      	mov	r1, r2
 800fb46:	2200      	movs	r2, #0
 800fb48:	602a      	str	r2, [r5, #0]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	f7fd f915 	bl	800cd7a <_write>
 800fb50:	1c43      	adds	r3, r0, #1
 800fb52:	d102      	bne.n	800fb5a <_write_r+0x1e>
 800fb54:	682b      	ldr	r3, [r5, #0]
 800fb56:	b103      	cbz	r3, 800fb5a <_write_r+0x1e>
 800fb58:	6023      	str	r3, [r4, #0]
 800fb5a:	bd38      	pop	{r3, r4, r5, pc}
 800fb5c:	24002848 	.word	0x24002848

0800fb60 <__libc_init_array>:
 800fb60:	b570      	push	{r4, r5, r6, lr}
 800fb62:	4d0d      	ldr	r5, [pc, #52]	@ (800fb98 <__libc_init_array+0x38>)
 800fb64:	4c0d      	ldr	r4, [pc, #52]	@ (800fb9c <__libc_init_array+0x3c>)
 800fb66:	1b64      	subs	r4, r4, r5
 800fb68:	10a4      	asrs	r4, r4, #2
 800fb6a:	2600      	movs	r6, #0
 800fb6c:	42a6      	cmp	r6, r4
 800fb6e:	d109      	bne.n	800fb84 <__libc_init_array+0x24>
 800fb70:	4d0b      	ldr	r5, [pc, #44]	@ (800fba0 <__libc_init_array+0x40>)
 800fb72:	4c0c      	ldr	r4, [pc, #48]	@ (800fba4 <__libc_init_array+0x44>)
 800fb74:	f002 f89a 	bl	8011cac <_init>
 800fb78:	1b64      	subs	r4, r4, r5
 800fb7a:	10a4      	asrs	r4, r4, #2
 800fb7c:	2600      	movs	r6, #0
 800fb7e:	42a6      	cmp	r6, r4
 800fb80:	d105      	bne.n	800fb8e <__libc_init_array+0x2e>
 800fb82:	bd70      	pop	{r4, r5, r6, pc}
 800fb84:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb88:	4798      	blx	r3
 800fb8a:	3601      	adds	r6, #1
 800fb8c:	e7ee      	b.n	800fb6c <__libc_init_array+0xc>
 800fb8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb92:	4798      	blx	r3
 800fb94:	3601      	adds	r6, #1
 800fb96:	e7f2      	b.n	800fb7e <__libc_init_array+0x1e>
 800fb98:	080140f8 	.word	0x080140f8
 800fb9c:	080140f8 	.word	0x080140f8
 800fba0:	080140f8 	.word	0x080140f8
 800fba4:	080140fc 	.word	0x080140fc

0800fba8 <__retarget_lock_init_recursive>:
 800fba8:	4770      	bx	lr

0800fbaa <__retarget_lock_acquire_recursive>:
 800fbaa:	4770      	bx	lr

0800fbac <__retarget_lock_release_recursive>:
 800fbac:	4770      	bx	lr

0800fbae <quorem>:
 800fbae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb2:	6903      	ldr	r3, [r0, #16]
 800fbb4:	690c      	ldr	r4, [r1, #16]
 800fbb6:	42a3      	cmp	r3, r4
 800fbb8:	4607      	mov	r7, r0
 800fbba:	db7e      	blt.n	800fcba <quorem+0x10c>
 800fbbc:	3c01      	subs	r4, #1
 800fbbe:	f101 0814 	add.w	r8, r1, #20
 800fbc2:	00a3      	lsls	r3, r4, #2
 800fbc4:	f100 0514 	add.w	r5, r0, #20
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbce:	9301      	str	r3, [sp, #4]
 800fbd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fbd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fbe0:	fbb2 f6f3 	udiv	r6, r2, r3
 800fbe4:	d32e      	bcc.n	800fc44 <quorem+0x96>
 800fbe6:	f04f 0a00 	mov.w	sl, #0
 800fbea:	46c4      	mov	ip, r8
 800fbec:	46ae      	mov	lr, r5
 800fbee:	46d3      	mov	fp, sl
 800fbf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fbf4:	b298      	uxth	r0, r3
 800fbf6:	fb06 a000 	mla	r0, r6, r0, sl
 800fbfa:	0c02      	lsrs	r2, r0, #16
 800fbfc:	0c1b      	lsrs	r3, r3, #16
 800fbfe:	fb06 2303 	mla	r3, r6, r3, r2
 800fc02:	f8de 2000 	ldr.w	r2, [lr]
 800fc06:	b280      	uxth	r0, r0
 800fc08:	b292      	uxth	r2, r2
 800fc0a:	1a12      	subs	r2, r2, r0
 800fc0c:	445a      	add	r2, fp
 800fc0e:	f8de 0000 	ldr.w	r0, [lr]
 800fc12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fc1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fc20:	b292      	uxth	r2, r2
 800fc22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fc26:	45e1      	cmp	r9, ip
 800fc28:	f84e 2b04 	str.w	r2, [lr], #4
 800fc2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fc30:	d2de      	bcs.n	800fbf0 <quorem+0x42>
 800fc32:	9b00      	ldr	r3, [sp, #0]
 800fc34:	58eb      	ldr	r3, [r5, r3]
 800fc36:	b92b      	cbnz	r3, 800fc44 <quorem+0x96>
 800fc38:	9b01      	ldr	r3, [sp, #4]
 800fc3a:	3b04      	subs	r3, #4
 800fc3c:	429d      	cmp	r5, r3
 800fc3e:	461a      	mov	r2, r3
 800fc40:	d32f      	bcc.n	800fca2 <quorem+0xf4>
 800fc42:	613c      	str	r4, [r7, #16]
 800fc44:	4638      	mov	r0, r7
 800fc46:	f001 f855 	bl	8010cf4 <__mcmp>
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	db25      	blt.n	800fc9a <quorem+0xec>
 800fc4e:	4629      	mov	r1, r5
 800fc50:	2000      	movs	r0, #0
 800fc52:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc56:	f8d1 c000 	ldr.w	ip, [r1]
 800fc5a:	fa1f fe82 	uxth.w	lr, r2
 800fc5e:	fa1f f38c 	uxth.w	r3, ip
 800fc62:	eba3 030e 	sub.w	r3, r3, lr
 800fc66:	4403      	add	r3, r0
 800fc68:	0c12      	lsrs	r2, r2, #16
 800fc6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fc6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc78:	45c1      	cmp	r9, r8
 800fc7a:	f841 3b04 	str.w	r3, [r1], #4
 800fc7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fc82:	d2e6      	bcs.n	800fc52 <quorem+0xa4>
 800fc84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc8c:	b922      	cbnz	r2, 800fc98 <quorem+0xea>
 800fc8e:	3b04      	subs	r3, #4
 800fc90:	429d      	cmp	r5, r3
 800fc92:	461a      	mov	r2, r3
 800fc94:	d30b      	bcc.n	800fcae <quorem+0x100>
 800fc96:	613c      	str	r4, [r7, #16]
 800fc98:	3601      	adds	r6, #1
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	b003      	add	sp, #12
 800fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fca2:	6812      	ldr	r2, [r2, #0]
 800fca4:	3b04      	subs	r3, #4
 800fca6:	2a00      	cmp	r2, #0
 800fca8:	d1cb      	bne.n	800fc42 <quorem+0x94>
 800fcaa:	3c01      	subs	r4, #1
 800fcac:	e7c6      	b.n	800fc3c <quorem+0x8e>
 800fcae:	6812      	ldr	r2, [r2, #0]
 800fcb0:	3b04      	subs	r3, #4
 800fcb2:	2a00      	cmp	r2, #0
 800fcb4:	d1ef      	bne.n	800fc96 <quorem+0xe8>
 800fcb6:	3c01      	subs	r4, #1
 800fcb8:	e7ea      	b.n	800fc90 <quorem+0xe2>
 800fcba:	2000      	movs	r0, #0
 800fcbc:	e7ee      	b.n	800fc9c <quorem+0xee>
	...

0800fcc0 <_dtoa_r>:
 800fcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	ed2d 8b02 	vpush	{d8}
 800fcc8:	69c7      	ldr	r7, [r0, #28]
 800fcca:	b091      	sub	sp, #68	@ 0x44
 800fccc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fcd0:	ec55 4b10 	vmov	r4, r5, d0
 800fcd4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fcd6:	9107      	str	r1, [sp, #28]
 800fcd8:	4681      	mov	r9, r0
 800fcda:	9209      	str	r2, [sp, #36]	@ 0x24
 800fcdc:	930d      	str	r3, [sp, #52]	@ 0x34
 800fcde:	b97f      	cbnz	r7, 800fd00 <_dtoa_r+0x40>
 800fce0:	2010      	movs	r0, #16
 800fce2:	f7ff f8c9 	bl	800ee78 <malloc>
 800fce6:	4602      	mov	r2, r0
 800fce8:	f8c9 001c 	str.w	r0, [r9, #28]
 800fcec:	b920      	cbnz	r0, 800fcf8 <_dtoa_r+0x38>
 800fcee:	4ba0      	ldr	r3, [pc, #640]	@ (800ff70 <_dtoa_r+0x2b0>)
 800fcf0:	21ef      	movs	r1, #239	@ 0xef
 800fcf2:	48a0      	ldr	r0, [pc, #640]	@ (800ff74 <_dtoa_r+0x2b4>)
 800fcf4:	f001 fb32 	bl	801135c <__assert_func>
 800fcf8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fcfc:	6007      	str	r7, [r0, #0]
 800fcfe:	60c7      	str	r7, [r0, #12]
 800fd00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fd04:	6819      	ldr	r1, [r3, #0]
 800fd06:	b159      	cbz	r1, 800fd20 <_dtoa_r+0x60>
 800fd08:	685a      	ldr	r2, [r3, #4]
 800fd0a:	604a      	str	r2, [r1, #4]
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	4093      	lsls	r3, r2
 800fd10:	608b      	str	r3, [r1, #8]
 800fd12:	4648      	mov	r0, r9
 800fd14:	f000 fdb4 	bl	8010880 <_Bfree>
 800fd18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	601a      	str	r2, [r3, #0]
 800fd20:	1e2b      	subs	r3, r5, #0
 800fd22:	bfbb      	ittet	lt
 800fd24:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fd28:	9303      	strlt	r3, [sp, #12]
 800fd2a:	2300      	movge	r3, #0
 800fd2c:	2201      	movlt	r2, #1
 800fd2e:	bfac      	ite	ge
 800fd30:	6033      	strge	r3, [r6, #0]
 800fd32:	6032      	strlt	r2, [r6, #0]
 800fd34:	4b90      	ldr	r3, [pc, #576]	@ (800ff78 <_dtoa_r+0x2b8>)
 800fd36:	9e03      	ldr	r6, [sp, #12]
 800fd38:	43b3      	bics	r3, r6
 800fd3a:	d110      	bne.n	800fd5e <_dtoa_r+0x9e>
 800fd3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd3e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fd42:	6013      	str	r3, [r2, #0]
 800fd44:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fd48:	4323      	orrs	r3, r4
 800fd4a:	f000 84de 	beq.w	801070a <_dtoa_r+0xa4a>
 800fd4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fd50:	4f8a      	ldr	r7, [pc, #552]	@ (800ff7c <_dtoa_r+0x2bc>)
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f000 84e0 	beq.w	8010718 <_dtoa_r+0xa58>
 800fd58:	1cfb      	adds	r3, r7, #3
 800fd5a:	f000 bcdb 	b.w	8010714 <_dtoa_r+0xa54>
 800fd5e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fd62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd6a:	d10a      	bne.n	800fd82 <_dtoa_r+0xc2>
 800fd6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd6e:	2301      	movs	r3, #1
 800fd70:	6013      	str	r3, [r2, #0]
 800fd72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fd74:	b113      	cbz	r3, 800fd7c <_dtoa_r+0xbc>
 800fd76:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fd78:	4b81      	ldr	r3, [pc, #516]	@ (800ff80 <_dtoa_r+0x2c0>)
 800fd7a:	6013      	str	r3, [r2, #0]
 800fd7c:	4f81      	ldr	r7, [pc, #516]	@ (800ff84 <_dtoa_r+0x2c4>)
 800fd7e:	f000 bccb 	b.w	8010718 <_dtoa_r+0xa58>
 800fd82:	aa0e      	add	r2, sp, #56	@ 0x38
 800fd84:	a90f      	add	r1, sp, #60	@ 0x3c
 800fd86:	4648      	mov	r0, r9
 800fd88:	eeb0 0b48 	vmov.f64	d0, d8
 800fd8c:	f001 f862 	bl	8010e54 <__d2b>
 800fd90:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fd94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd96:	9001      	str	r0, [sp, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d045      	beq.n	800fe28 <_dtoa_r+0x168>
 800fd9c:	eeb0 7b48 	vmov.f64	d7, d8
 800fda0:	ee18 1a90 	vmov	r1, s17
 800fda4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fda8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fdac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fdb0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fdb4:	2500      	movs	r5, #0
 800fdb6:	ee07 1a90 	vmov	s15, r1
 800fdba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fdbe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ff58 <_dtoa_r+0x298>
 800fdc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fdc6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ff60 <_dtoa_r+0x2a0>
 800fdca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fdce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ff68 <_dtoa_r+0x2a8>
 800fdd2:	ee07 3a90 	vmov	s15, r3
 800fdd6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fdda:	eeb0 7b46 	vmov.f64	d7, d6
 800fdde:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fde2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fde6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fdea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdee:	ee16 8a90 	vmov	r8, s13
 800fdf2:	d508      	bpl.n	800fe06 <_dtoa_r+0x146>
 800fdf4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fdf8:	eeb4 6b47 	vcmp.f64	d6, d7
 800fdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe00:	bf18      	it	ne
 800fe02:	f108 38ff 	addne.w	r8, r8, #4294967295
 800fe06:	f1b8 0f16 	cmp.w	r8, #22
 800fe0a:	d82b      	bhi.n	800fe64 <_dtoa_r+0x1a4>
 800fe0c:	495e      	ldr	r1, [pc, #376]	@ (800ff88 <_dtoa_r+0x2c8>)
 800fe0e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fe12:	ed91 7b00 	vldr	d7, [r1]
 800fe16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fe1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1e:	d501      	bpl.n	800fe24 <_dtoa_r+0x164>
 800fe20:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe24:	2100      	movs	r1, #0
 800fe26:	e01e      	b.n	800fe66 <_dtoa_r+0x1a6>
 800fe28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fe30:	2920      	cmp	r1, #32
 800fe32:	bfc1      	itttt	gt
 800fe34:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fe38:	408e      	lslgt	r6, r1
 800fe3a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fe3e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fe42:	bfd6      	itet	le
 800fe44:	f1c1 0120 	rsble	r1, r1, #32
 800fe48:	4331      	orrgt	r1, r6
 800fe4a:	fa04 f101 	lslle.w	r1, r4, r1
 800fe4e:	ee07 1a90 	vmov	s15, r1
 800fe52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fe56:	3b01      	subs	r3, #1
 800fe58:	ee17 1a90 	vmov	r1, s15
 800fe5c:	2501      	movs	r5, #1
 800fe5e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fe62:	e7a8      	b.n	800fdb6 <_dtoa_r+0xf6>
 800fe64:	2101      	movs	r1, #1
 800fe66:	1ad2      	subs	r2, r2, r3
 800fe68:	1e53      	subs	r3, r2, #1
 800fe6a:	9306      	str	r3, [sp, #24]
 800fe6c:	bf45      	ittet	mi
 800fe6e:	f1c2 0301 	rsbmi	r3, r2, #1
 800fe72:	9305      	strmi	r3, [sp, #20]
 800fe74:	2300      	movpl	r3, #0
 800fe76:	2300      	movmi	r3, #0
 800fe78:	bf4c      	ite	mi
 800fe7a:	9306      	strmi	r3, [sp, #24]
 800fe7c:	9305      	strpl	r3, [sp, #20]
 800fe7e:	f1b8 0f00 	cmp.w	r8, #0
 800fe82:	910c      	str	r1, [sp, #48]	@ 0x30
 800fe84:	db18      	blt.n	800feb8 <_dtoa_r+0x1f8>
 800fe86:	9b06      	ldr	r3, [sp, #24]
 800fe88:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fe8c:	4443      	add	r3, r8
 800fe8e:	9306      	str	r3, [sp, #24]
 800fe90:	2300      	movs	r3, #0
 800fe92:	9a07      	ldr	r2, [sp, #28]
 800fe94:	2a09      	cmp	r2, #9
 800fe96:	d849      	bhi.n	800ff2c <_dtoa_r+0x26c>
 800fe98:	2a05      	cmp	r2, #5
 800fe9a:	bfc4      	itt	gt
 800fe9c:	3a04      	subgt	r2, #4
 800fe9e:	9207      	strgt	r2, [sp, #28]
 800fea0:	9a07      	ldr	r2, [sp, #28]
 800fea2:	f1a2 0202 	sub.w	r2, r2, #2
 800fea6:	bfcc      	ite	gt
 800fea8:	2400      	movgt	r4, #0
 800feaa:	2401      	movle	r4, #1
 800feac:	2a03      	cmp	r2, #3
 800feae:	d848      	bhi.n	800ff42 <_dtoa_r+0x282>
 800feb0:	e8df f002 	tbb	[pc, r2]
 800feb4:	3a2c2e0b 	.word	0x3a2c2e0b
 800feb8:	9b05      	ldr	r3, [sp, #20]
 800feba:	2200      	movs	r2, #0
 800febc:	eba3 0308 	sub.w	r3, r3, r8
 800fec0:	9305      	str	r3, [sp, #20]
 800fec2:	920a      	str	r2, [sp, #40]	@ 0x28
 800fec4:	f1c8 0300 	rsb	r3, r8, #0
 800fec8:	e7e3      	b.n	800fe92 <_dtoa_r+0x1d2>
 800feca:	2200      	movs	r2, #0
 800fecc:	9208      	str	r2, [sp, #32]
 800fece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fed0:	2a00      	cmp	r2, #0
 800fed2:	dc39      	bgt.n	800ff48 <_dtoa_r+0x288>
 800fed4:	f04f 0b01 	mov.w	fp, #1
 800fed8:	46da      	mov	sl, fp
 800feda:	465a      	mov	r2, fp
 800fedc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fee0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fee4:	2100      	movs	r1, #0
 800fee6:	2004      	movs	r0, #4
 800fee8:	f100 0614 	add.w	r6, r0, #20
 800feec:	4296      	cmp	r6, r2
 800feee:	d930      	bls.n	800ff52 <_dtoa_r+0x292>
 800fef0:	6079      	str	r1, [r7, #4]
 800fef2:	4648      	mov	r0, r9
 800fef4:	9304      	str	r3, [sp, #16]
 800fef6:	f000 fc83 	bl	8010800 <_Balloc>
 800fefa:	9b04      	ldr	r3, [sp, #16]
 800fefc:	4607      	mov	r7, r0
 800fefe:	2800      	cmp	r0, #0
 800ff00:	d146      	bne.n	800ff90 <_dtoa_r+0x2d0>
 800ff02:	4b22      	ldr	r3, [pc, #136]	@ (800ff8c <_dtoa_r+0x2cc>)
 800ff04:	4602      	mov	r2, r0
 800ff06:	f240 11af 	movw	r1, #431	@ 0x1af
 800ff0a:	e6f2      	b.n	800fcf2 <_dtoa_r+0x32>
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	e7dd      	b.n	800fecc <_dtoa_r+0x20c>
 800ff10:	2200      	movs	r2, #0
 800ff12:	9208      	str	r2, [sp, #32]
 800ff14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff16:	eb08 0b02 	add.w	fp, r8, r2
 800ff1a:	f10b 0a01 	add.w	sl, fp, #1
 800ff1e:	4652      	mov	r2, sl
 800ff20:	2a01      	cmp	r2, #1
 800ff22:	bfb8      	it	lt
 800ff24:	2201      	movlt	r2, #1
 800ff26:	e7db      	b.n	800fee0 <_dtoa_r+0x220>
 800ff28:	2201      	movs	r2, #1
 800ff2a:	e7f2      	b.n	800ff12 <_dtoa_r+0x252>
 800ff2c:	2401      	movs	r4, #1
 800ff2e:	2200      	movs	r2, #0
 800ff30:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ff34:	f04f 3bff 	mov.w	fp, #4294967295
 800ff38:	2100      	movs	r1, #0
 800ff3a:	46da      	mov	sl, fp
 800ff3c:	2212      	movs	r2, #18
 800ff3e:	9109      	str	r1, [sp, #36]	@ 0x24
 800ff40:	e7ce      	b.n	800fee0 <_dtoa_r+0x220>
 800ff42:	2201      	movs	r2, #1
 800ff44:	9208      	str	r2, [sp, #32]
 800ff46:	e7f5      	b.n	800ff34 <_dtoa_r+0x274>
 800ff48:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ff4c:	46da      	mov	sl, fp
 800ff4e:	465a      	mov	r2, fp
 800ff50:	e7c6      	b.n	800fee0 <_dtoa_r+0x220>
 800ff52:	3101      	adds	r1, #1
 800ff54:	0040      	lsls	r0, r0, #1
 800ff56:	e7c7      	b.n	800fee8 <_dtoa_r+0x228>
 800ff58:	636f4361 	.word	0x636f4361
 800ff5c:	3fd287a7 	.word	0x3fd287a7
 800ff60:	8b60c8b3 	.word	0x8b60c8b3
 800ff64:	3fc68a28 	.word	0x3fc68a28
 800ff68:	509f79fb 	.word	0x509f79fb
 800ff6c:	3fd34413 	.word	0x3fd34413
 800ff70:	08013dad 	.word	0x08013dad
 800ff74:	08013dc4 	.word	0x08013dc4
 800ff78:	7ff00000 	.word	0x7ff00000
 800ff7c:	08013da9 	.word	0x08013da9
 800ff80:	08013d7d 	.word	0x08013d7d
 800ff84:	08013d7c 	.word	0x08013d7c
 800ff88:	08013ec0 	.word	0x08013ec0
 800ff8c:	08013e1c 	.word	0x08013e1c
 800ff90:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ff94:	f1ba 0f0e 	cmp.w	sl, #14
 800ff98:	6010      	str	r0, [r2, #0]
 800ff9a:	d86f      	bhi.n	801007c <_dtoa_r+0x3bc>
 800ff9c:	2c00      	cmp	r4, #0
 800ff9e:	d06d      	beq.n	801007c <_dtoa_r+0x3bc>
 800ffa0:	f1b8 0f00 	cmp.w	r8, #0
 800ffa4:	f340 80c2 	ble.w	801012c <_dtoa_r+0x46c>
 800ffa8:	4aca      	ldr	r2, [pc, #808]	@ (80102d4 <_dtoa_r+0x614>)
 800ffaa:	f008 010f 	and.w	r1, r8, #15
 800ffae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ffb2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ffb6:	ed92 7b00 	vldr	d7, [r2]
 800ffba:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ffbe:	f000 80a9 	beq.w	8010114 <_dtoa_r+0x454>
 800ffc2:	4ac5      	ldr	r2, [pc, #788]	@ (80102d8 <_dtoa_r+0x618>)
 800ffc4:	ed92 6b08 	vldr	d6, [r2, #32]
 800ffc8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ffcc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ffd0:	f001 010f 	and.w	r1, r1, #15
 800ffd4:	2203      	movs	r2, #3
 800ffd6:	48c0      	ldr	r0, [pc, #768]	@ (80102d8 <_dtoa_r+0x618>)
 800ffd8:	2900      	cmp	r1, #0
 800ffda:	f040 809d 	bne.w	8010118 <_dtoa_r+0x458>
 800ffde:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ffe2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ffe6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ffec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fff0:	2900      	cmp	r1, #0
 800fff2:	f000 80c1 	beq.w	8010178 <_dtoa_r+0x4b8>
 800fff6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800fffa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010002:	f140 80b9 	bpl.w	8010178 <_dtoa_r+0x4b8>
 8010006:	f1ba 0f00 	cmp.w	sl, #0
 801000a:	f000 80b5 	beq.w	8010178 <_dtoa_r+0x4b8>
 801000e:	f1bb 0f00 	cmp.w	fp, #0
 8010012:	dd31      	ble.n	8010078 <_dtoa_r+0x3b8>
 8010014:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010018:	ee27 7b06 	vmul.f64	d7, d7, d6
 801001c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010020:	f108 31ff 	add.w	r1, r8, #4294967295
 8010024:	9104      	str	r1, [sp, #16]
 8010026:	3201      	adds	r2, #1
 8010028:	465c      	mov	r4, fp
 801002a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801002e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010032:	ee07 2a90 	vmov	s15, r2
 8010036:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801003a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801003e:	ee15 2a90 	vmov	r2, s11
 8010042:	ec51 0b15 	vmov	r0, r1, d5
 8010046:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801004a:	2c00      	cmp	r4, #0
 801004c:	f040 8098 	bne.w	8010180 <_dtoa_r+0x4c0>
 8010050:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010054:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010058:	ec41 0b17 	vmov	d7, r0, r1
 801005c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010064:	f300 8261 	bgt.w	801052a <_dtoa_r+0x86a>
 8010068:	eeb1 7b47 	vneg.f64	d7, d7
 801006c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010074:	f100 80f5 	bmi.w	8010262 <_dtoa_r+0x5a2>
 8010078:	ed8d 8b02 	vstr	d8, [sp, #8]
 801007c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801007e:	2a00      	cmp	r2, #0
 8010080:	f2c0 812c 	blt.w	80102dc <_dtoa_r+0x61c>
 8010084:	f1b8 0f0e 	cmp.w	r8, #14
 8010088:	f300 8128 	bgt.w	80102dc <_dtoa_r+0x61c>
 801008c:	4b91      	ldr	r3, [pc, #580]	@ (80102d4 <_dtoa_r+0x614>)
 801008e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010092:	ed93 6b00 	vldr	d6, [r3]
 8010096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010098:	2b00      	cmp	r3, #0
 801009a:	da03      	bge.n	80100a4 <_dtoa_r+0x3e4>
 801009c:	f1ba 0f00 	cmp.w	sl, #0
 80100a0:	f340 80d2 	ble.w	8010248 <_dtoa_r+0x588>
 80100a4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80100a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80100ac:	463e      	mov	r6, r7
 80100ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80100b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80100b6:	ee15 3a10 	vmov	r3, s10
 80100ba:	3330      	adds	r3, #48	@ 0x30
 80100bc:	f806 3b01 	strb.w	r3, [r6], #1
 80100c0:	1bf3      	subs	r3, r6, r7
 80100c2:	459a      	cmp	sl, r3
 80100c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80100c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80100cc:	f040 80f8 	bne.w	80102c0 <_dtoa_r+0x600>
 80100d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80100d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80100d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100dc:	f300 80dd 	bgt.w	801029a <_dtoa_r+0x5da>
 80100e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80100e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e8:	d104      	bne.n	80100f4 <_dtoa_r+0x434>
 80100ea:	ee15 3a10 	vmov	r3, s10
 80100ee:	07db      	lsls	r3, r3, #31
 80100f0:	f100 80d3 	bmi.w	801029a <_dtoa_r+0x5da>
 80100f4:	9901      	ldr	r1, [sp, #4]
 80100f6:	4648      	mov	r0, r9
 80100f8:	f000 fbc2 	bl	8010880 <_Bfree>
 80100fc:	2300      	movs	r3, #0
 80100fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010100:	7033      	strb	r3, [r6, #0]
 8010102:	f108 0301 	add.w	r3, r8, #1
 8010106:	6013      	str	r3, [r2, #0]
 8010108:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801010a:	2b00      	cmp	r3, #0
 801010c:	f000 8304 	beq.w	8010718 <_dtoa_r+0xa58>
 8010110:	601e      	str	r6, [r3, #0]
 8010112:	e301      	b.n	8010718 <_dtoa_r+0xa58>
 8010114:	2202      	movs	r2, #2
 8010116:	e75e      	b.n	800ffd6 <_dtoa_r+0x316>
 8010118:	07cc      	lsls	r4, r1, #31
 801011a:	d504      	bpl.n	8010126 <_dtoa_r+0x466>
 801011c:	ed90 6b00 	vldr	d6, [r0]
 8010120:	3201      	adds	r2, #1
 8010122:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010126:	1049      	asrs	r1, r1, #1
 8010128:	3008      	adds	r0, #8
 801012a:	e755      	b.n	800ffd8 <_dtoa_r+0x318>
 801012c:	d022      	beq.n	8010174 <_dtoa_r+0x4b4>
 801012e:	f1c8 0100 	rsb	r1, r8, #0
 8010132:	4a68      	ldr	r2, [pc, #416]	@ (80102d4 <_dtoa_r+0x614>)
 8010134:	f001 000f 	and.w	r0, r1, #15
 8010138:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801013c:	ed92 7b00 	vldr	d7, [r2]
 8010140:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010144:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010148:	4863      	ldr	r0, [pc, #396]	@ (80102d8 <_dtoa_r+0x618>)
 801014a:	1109      	asrs	r1, r1, #4
 801014c:	2400      	movs	r4, #0
 801014e:	2202      	movs	r2, #2
 8010150:	b929      	cbnz	r1, 801015e <_dtoa_r+0x49e>
 8010152:	2c00      	cmp	r4, #0
 8010154:	f43f af49 	beq.w	800ffea <_dtoa_r+0x32a>
 8010158:	ed8d 7b02 	vstr	d7, [sp, #8]
 801015c:	e745      	b.n	800ffea <_dtoa_r+0x32a>
 801015e:	07ce      	lsls	r6, r1, #31
 8010160:	d505      	bpl.n	801016e <_dtoa_r+0x4ae>
 8010162:	ed90 6b00 	vldr	d6, [r0]
 8010166:	3201      	adds	r2, #1
 8010168:	2401      	movs	r4, #1
 801016a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801016e:	1049      	asrs	r1, r1, #1
 8010170:	3008      	adds	r0, #8
 8010172:	e7ed      	b.n	8010150 <_dtoa_r+0x490>
 8010174:	2202      	movs	r2, #2
 8010176:	e738      	b.n	800ffea <_dtoa_r+0x32a>
 8010178:	f8cd 8010 	str.w	r8, [sp, #16]
 801017c:	4654      	mov	r4, sl
 801017e:	e754      	b.n	801002a <_dtoa_r+0x36a>
 8010180:	4a54      	ldr	r2, [pc, #336]	@ (80102d4 <_dtoa_r+0x614>)
 8010182:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010186:	ed12 4b02 	vldr	d4, [r2, #-8]
 801018a:	9a08      	ldr	r2, [sp, #32]
 801018c:	ec41 0b17 	vmov	d7, r0, r1
 8010190:	443c      	add	r4, r7
 8010192:	b34a      	cbz	r2, 80101e8 <_dtoa_r+0x528>
 8010194:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010198:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801019c:	463e      	mov	r6, r7
 801019e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80101a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80101a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80101aa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80101ae:	ee14 2a90 	vmov	r2, s9
 80101b2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80101b6:	3230      	adds	r2, #48	@ 0x30
 80101b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80101bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80101c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c4:	f806 2b01 	strb.w	r2, [r6], #1
 80101c8:	d438      	bmi.n	801023c <_dtoa_r+0x57c>
 80101ca:	ee32 5b46 	vsub.f64	d5, d2, d6
 80101ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80101d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d6:	d462      	bmi.n	801029e <_dtoa_r+0x5de>
 80101d8:	42a6      	cmp	r6, r4
 80101da:	f43f af4d 	beq.w	8010078 <_dtoa_r+0x3b8>
 80101de:	ee27 7b03 	vmul.f64	d7, d7, d3
 80101e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80101e6:	e7e0      	b.n	80101aa <_dtoa_r+0x4ea>
 80101e8:	4621      	mov	r1, r4
 80101ea:	463e      	mov	r6, r7
 80101ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 80101f0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80101f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80101f8:	ee14 2a90 	vmov	r2, s9
 80101fc:	3230      	adds	r2, #48	@ 0x30
 80101fe:	f806 2b01 	strb.w	r2, [r6], #1
 8010202:	42a6      	cmp	r6, r4
 8010204:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010208:	ee36 6b45 	vsub.f64	d6, d6, d5
 801020c:	d119      	bne.n	8010242 <_dtoa_r+0x582>
 801020e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010212:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010216:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801021a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021e:	dc3e      	bgt.n	801029e <_dtoa_r+0x5de>
 8010220:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010224:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801022c:	f57f af24 	bpl.w	8010078 <_dtoa_r+0x3b8>
 8010230:	460e      	mov	r6, r1
 8010232:	3901      	subs	r1, #1
 8010234:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010238:	2b30      	cmp	r3, #48	@ 0x30
 801023a:	d0f9      	beq.n	8010230 <_dtoa_r+0x570>
 801023c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010240:	e758      	b.n	80100f4 <_dtoa_r+0x434>
 8010242:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010246:	e7d5      	b.n	80101f4 <_dtoa_r+0x534>
 8010248:	d10b      	bne.n	8010262 <_dtoa_r+0x5a2>
 801024a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801024e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010252:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010256:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801025e:	f2c0 8161 	blt.w	8010524 <_dtoa_r+0x864>
 8010262:	2400      	movs	r4, #0
 8010264:	4625      	mov	r5, r4
 8010266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010268:	43db      	mvns	r3, r3
 801026a:	9304      	str	r3, [sp, #16]
 801026c:	463e      	mov	r6, r7
 801026e:	f04f 0800 	mov.w	r8, #0
 8010272:	4621      	mov	r1, r4
 8010274:	4648      	mov	r0, r9
 8010276:	f000 fb03 	bl	8010880 <_Bfree>
 801027a:	2d00      	cmp	r5, #0
 801027c:	d0de      	beq.n	801023c <_dtoa_r+0x57c>
 801027e:	f1b8 0f00 	cmp.w	r8, #0
 8010282:	d005      	beq.n	8010290 <_dtoa_r+0x5d0>
 8010284:	45a8      	cmp	r8, r5
 8010286:	d003      	beq.n	8010290 <_dtoa_r+0x5d0>
 8010288:	4641      	mov	r1, r8
 801028a:	4648      	mov	r0, r9
 801028c:	f000 faf8 	bl	8010880 <_Bfree>
 8010290:	4629      	mov	r1, r5
 8010292:	4648      	mov	r0, r9
 8010294:	f000 faf4 	bl	8010880 <_Bfree>
 8010298:	e7d0      	b.n	801023c <_dtoa_r+0x57c>
 801029a:	f8cd 8010 	str.w	r8, [sp, #16]
 801029e:	4633      	mov	r3, r6
 80102a0:	461e      	mov	r6, r3
 80102a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102a6:	2a39      	cmp	r2, #57	@ 0x39
 80102a8:	d106      	bne.n	80102b8 <_dtoa_r+0x5f8>
 80102aa:	429f      	cmp	r7, r3
 80102ac:	d1f8      	bne.n	80102a0 <_dtoa_r+0x5e0>
 80102ae:	9a04      	ldr	r2, [sp, #16]
 80102b0:	3201      	adds	r2, #1
 80102b2:	9204      	str	r2, [sp, #16]
 80102b4:	2230      	movs	r2, #48	@ 0x30
 80102b6:	703a      	strb	r2, [r7, #0]
 80102b8:	781a      	ldrb	r2, [r3, #0]
 80102ba:	3201      	adds	r2, #1
 80102bc:	701a      	strb	r2, [r3, #0]
 80102be:	e7bd      	b.n	801023c <_dtoa_r+0x57c>
 80102c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80102c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80102c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102cc:	f47f aeef 	bne.w	80100ae <_dtoa_r+0x3ee>
 80102d0:	e710      	b.n	80100f4 <_dtoa_r+0x434>
 80102d2:	bf00      	nop
 80102d4:	08013ec0 	.word	0x08013ec0
 80102d8:	08013e98 	.word	0x08013e98
 80102dc:	9908      	ldr	r1, [sp, #32]
 80102de:	2900      	cmp	r1, #0
 80102e0:	f000 80e3 	beq.w	80104aa <_dtoa_r+0x7ea>
 80102e4:	9907      	ldr	r1, [sp, #28]
 80102e6:	2901      	cmp	r1, #1
 80102e8:	f300 80c8 	bgt.w	801047c <_dtoa_r+0x7bc>
 80102ec:	2d00      	cmp	r5, #0
 80102ee:	f000 80c1 	beq.w	8010474 <_dtoa_r+0x7b4>
 80102f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80102f6:	9e05      	ldr	r6, [sp, #20]
 80102f8:	461c      	mov	r4, r3
 80102fa:	9304      	str	r3, [sp, #16]
 80102fc:	9b05      	ldr	r3, [sp, #20]
 80102fe:	4413      	add	r3, r2
 8010300:	9305      	str	r3, [sp, #20]
 8010302:	9b06      	ldr	r3, [sp, #24]
 8010304:	2101      	movs	r1, #1
 8010306:	4413      	add	r3, r2
 8010308:	4648      	mov	r0, r9
 801030a:	9306      	str	r3, [sp, #24]
 801030c:	f000 fb6c 	bl	80109e8 <__i2b>
 8010310:	9b04      	ldr	r3, [sp, #16]
 8010312:	4605      	mov	r5, r0
 8010314:	b166      	cbz	r6, 8010330 <_dtoa_r+0x670>
 8010316:	9a06      	ldr	r2, [sp, #24]
 8010318:	2a00      	cmp	r2, #0
 801031a:	dd09      	ble.n	8010330 <_dtoa_r+0x670>
 801031c:	42b2      	cmp	r2, r6
 801031e:	9905      	ldr	r1, [sp, #20]
 8010320:	bfa8      	it	ge
 8010322:	4632      	movge	r2, r6
 8010324:	1a89      	subs	r1, r1, r2
 8010326:	9105      	str	r1, [sp, #20]
 8010328:	9906      	ldr	r1, [sp, #24]
 801032a:	1ab6      	subs	r6, r6, r2
 801032c:	1a8a      	subs	r2, r1, r2
 801032e:	9206      	str	r2, [sp, #24]
 8010330:	b1fb      	cbz	r3, 8010372 <_dtoa_r+0x6b2>
 8010332:	9a08      	ldr	r2, [sp, #32]
 8010334:	2a00      	cmp	r2, #0
 8010336:	f000 80bc 	beq.w	80104b2 <_dtoa_r+0x7f2>
 801033a:	b19c      	cbz	r4, 8010364 <_dtoa_r+0x6a4>
 801033c:	4629      	mov	r1, r5
 801033e:	4622      	mov	r2, r4
 8010340:	4648      	mov	r0, r9
 8010342:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010344:	f000 fc10 	bl	8010b68 <__pow5mult>
 8010348:	9a01      	ldr	r2, [sp, #4]
 801034a:	4601      	mov	r1, r0
 801034c:	4605      	mov	r5, r0
 801034e:	4648      	mov	r0, r9
 8010350:	f000 fb60 	bl	8010a14 <__multiply>
 8010354:	9901      	ldr	r1, [sp, #4]
 8010356:	9004      	str	r0, [sp, #16]
 8010358:	4648      	mov	r0, r9
 801035a:	f000 fa91 	bl	8010880 <_Bfree>
 801035e:	9a04      	ldr	r2, [sp, #16]
 8010360:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010362:	9201      	str	r2, [sp, #4]
 8010364:	1b1a      	subs	r2, r3, r4
 8010366:	d004      	beq.n	8010372 <_dtoa_r+0x6b2>
 8010368:	9901      	ldr	r1, [sp, #4]
 801036a:	4648      	mov	r0, r9
 801036c:	f000 fbfc 	bl	8010b68 <__pow5mult>
 8010370:	9001      	str	r0, [sp, #4]
 8010372:	2101      	movs	r1, #1
 8010374:	4648      	mov	r0, r9
 8010376:	f000 fb37 	bl	80109e8 <__i2b>
 801037a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801037c:	4604      	mov	r4, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	f000 81d0 	beq.w	8010724 <_dtoa_r+0xa64>
 8010384:	461a      	mov	r2, r3
 8010386:	4601      	mov	r1, r0
 8010388:	4648      	mov	r0, r9
 801038a:	f000 fbed 	bl	8010b68 <__pow5mult>
 801038e:	9b07      	ldr	r3, [sp, #28]
 8010390:	2b01      	cmp	r3, #1
 8010392:	4604      	mov	r4, r0
 8010394:	f300 8095 	bgt.w	80104c2 <_dtoa_r+0x802>
 8010398:	9b02      	ldr	r3, [sp, #8]
 801039a:	2b00      	cmp	r3, #0
 801039c:	f040 808b 	bne.w	80104b6 <_dtoa_r+0x7f6>
 80103a0:	9b03      	ldr	r3, [sp, #12]
 80103a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80103a6:	2a00      	cmp	r2, #0
 80103a8:	f040 8087 	bne.w	80104ba <_dtoa_r+0x7fa>
 80103ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80103b0:	0d12      	lsrs	r2, r2, #20
 80103b2:	0512      	lsls	r2, r2, #20
 80103b4:	2a00      	cmp	r2, #0
 80103b6:	f000 8082 	beq.w	80104be <_dtoa_r+0x7fe>
 80103ba:	9b05      	ldr	r3, [sp, #20]
 80103bc:	3301      	adds	r3, #1
 80103be:	9305      	str	r3, [sp, #20]
 80103c0:	9b06      	ldr	r3, [sp, #24]
 80103c2:	3301      	adds	r3, #1
 80103c4:	9306      	str	r3, [sp, #24]
 80103c6:	2301      	movs	r3, #1
 80103c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f000 81af 	beq.w	8010730 <_dtoa_r+0xa70>
 80103d2:	6922      	ldr	r2, [r4, #16]
 80103d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80103d8:	6910      	ldr	r0, [r2, #16]
 80103da:	f000 fab9 	bl	8010950 <__hi0bits>
 80103de:	f1c0 0020 	rsb	r0, r0, #32
 80103e2:	9b06      	ldr	r3, [sp, #24]
 80103e4:	4418      	add	r0, r3
 80103e6:	f010 001f 	ands.w	r0, r0, #31
 80103ea:	d076      	beq.n	80104da <_dtoa_r+0x81a>
 80103ec:	f1c0 0220 	rsb	r2, r0, #32
 80103f0:	2a04      	cmp	r2, #4
 80103f2:	dd69      	ble.n	80104c8 <_dtoa_r+0x808>
 80103f4:	9b05      	ldr	r3, [sp, #20]
 80103f6:	f1c0 001c 	rsb	r0, r0, #28
 80103fa:	4403      	add	r3, r0
 80103fc:	9305      	str	r3, [sp, #20]
 80103fe:	9b06      	ldr	r3, [sp, #24]
 8010400:	4406      	add	r6, r0
 8010402:	4403      	add	r3, r0
 8010404:	9306      	str	r3, [sp, #24]
 8010406:	9b05      	ldr	r3, [sp, #20]
 8010408:	2b00      	cmp	r3, #0
 801040a:	dd05      	ble.n	8010418 <_dtoa_r+0x758>
 801040c:	9901      	ldr	r1, [sp, #4]
 801040e:	461a      	mov	r2, r3
 8010410:	4648      	mov	r0, r9
 8010412:	f000 fc03 	bl	8010c1c <__lshift>
 8010416:	9001      	str	r0, [sp, #4]
 8010418:	9b06      	ldr	r3, [sp, #24]
 801041a:	2b00      	cmp	r3, #0
 801041c:	dd05      	ble.n	801042a <_dtoa_r+0x76a>
 801041e:	4621      	mov	r1, r4
 8010420:	461a      	mov	r2, r3
 8010422:	4648      	mov	r0, r9
 8010424:	f000 fbfa 	bl	8010c1c <__lshift>
 8010428:	4604      	mov	r4, r0
 801042a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801042c:	2b00      	cmp	r3, #0
 801042e:	d056      	beq.n	80104de <_dtoa_r+0x81e>
 8010430:	9801      	ldr	r0, [sp, #4]
 8010432:	4621      	mov	r1, r4
 8010434:	f000 fc5e 	bl	8010cf4 <__mcmp>
 8010438:	2800      	cmp	r0, #0
 801043a:	da50      	bge.n	80104de <_dtoa_r+0x81e>
 801043c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010440:	9304      	str	r3, [sp, #16]
 8010442:	9901      	ldr	r1, [sp, #4]
 8010444:	2300      	movs	r3, #0
 8010446:	220a      	movs	r2, #10
 8010448:	4648      	mov	r0, r9
 801044a:	f000 fa3b 	bl	80108c4 <__multadd>
 801044e:	9b08      	ldr	r3, [sp, #32]
 8010450:	9001      	str	r0, [sp, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	f000 816e 	beq.w	8010734 <_dtoa_r+0xa74>
 8010458:	4629      	mov	r1, r5
 801045a:	2300      	movs	r3, #0
 801045c:	220a      	movs	r2, #10
 801045e:	4648      	mov	r0, r9
 8010460:	f000 fa30 	bl	80108c4 <__multadd>
 8010464:	f1bb 0f00 	cmp.w	fp, #0
 8010468:	4605      	mov	r5, r0
 801046a:	dc64      	bgt.n	8010536 <_dtoa_r+0x876>
 801046c:	9b07      	ldr	r3, [sp, #28]
 801046e:	2b02      	cmp	r3, #2
 8010470:	dc3e      	bgt.n	80104f0 <_dtoa_r+0x830>
 8010472:	e060      	b.n	8010536 <_dtoa_r+0x876>
 8010474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010476:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801047a:	e73c      	b.n	80102f6 <_dtoa_r+0x636>
 801047c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010480:	42a3      	cmp	r3, r4
 8010482:	bfbf      	itttt	lt
 8010484:	1ae2      	sublt	r2, r4, r3
 8010486:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010488:	189b      	addlt	r3, r3, r2
 801048a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801048c:	bfae      	itee	ge
 801048e:	1b1c      	subge	r4, r3, r4
 8010490:	4623      	movlt	r3, r4
 8010492:	2400      	movlt	r4, #0
 8010494:	f1ba 0f00 	cmp.w	sl, #0
 8010498:	bfb5      	itete	lt
 801049a:	9a05      	ldrlt	r2, [sp, #20]
 801049c:	9e05      	ldrge	r6, [sp, #20]
 801049e:	eba2 060a 	sublt.w	r6, r2, sl
 80104a2:	4652      	movge	r2, sl
 80104a4:	bfb8      	it	lt
 80104a6:	2200      	movlt	r2, #0
 80104a8:	e727      	b.n	80102fa <_dtoa_r+0x63a>
 80104aa:	9e05      	ldr	r6, [sp, #20]
 80104ac:	9d08      	ldr	r5, [sp, #32]
 80104ae:	461c      	mov	r4, r3
 80104b0:	e730      	b.n	8010314 <_dtoa_r+0x654>
 80104b2:	461a      	mov	r2, r3
 80104b4:	e758      	b.n	8010368 <_dtoa_r+0x6a8>
 80104b6:	2300      	movs	r3, #0
 80104b8:	e786      	b.n	80103c8 <_dtoa_r+0x708>
 80104ba:	9b02      	ldr	r3, [sp, #8]
 80104bc:	e784      	b.n	80103c8 <_dtoa_r+0x708>
 80104be:	920b      	str	r2, [sp, #44]	@ 0x2c
 80104c0:	e783      	b.n	80103ca <_dtoa_r+0x70a>
 80104c2:	2300      	movs	r3, #0
 80104c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104c6:	e784      	b.n	80103d2 <_dtoa_r+0x712>
 80104c8:	d09d      	beq.n	8010406 <_dtoa_r+0x746>
 80104ca:	9b05      	ldr	r3, [sp, #20]
 80104cc:	321c      	adds	r2, #28
 80104ce:	4413      	add	r3, r2
 80104d0:	9305      	str	r3, [sp, #20]
 80104d2:	9b06      	ldr	r3, [sp, #24]
 80104d4:	4416      	add	r6, r2
 80104d6:	4413      	add	r3, r2
 80104d8:	e794      	b.n	8010404 <_dtoa_r+0x744>
 80104da:	4602      	mov	r2, r0
 80104dc:	e7f5      	b.n	80104ca <_dtoa_r+0x80a>
 80104de:	f1ba 0f00 	cmp.w	sl, #0
 80104e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80104e6:	46d3      	mov	fp, sl
 80104e8:	dc21      	bgt.n	801052e <_dtoa_r+0x86e>
 80104ea:	9b07      	ldr	r3, [sp, #28]
 80104ec:	2b02      	cmp	r3, #2
 80104ee:	dd1e      	ble.n	801052e <_dtoa_r+0x86e>
 80104f0:	f1bb 0f00 	cmp.w	fp, #0
 80104f4:	f47f aeb7 	bne.w	8010266 <_dtoa_r+0x5a6>
 80104f8:	4621      	mov	r1, r4
 80104fa:	465b      	mov	r3, fp
 80104fc:	2205      	movs	r2, #5
 80104fe:	4648      	mov	r0, r9
 8010500:	f000 f9e0 	bl	80108c4 <__multadd>
 8010504:	4601      	mov	r1, r0
 8010506:	4604      	mov	r4, r0
 8010508:	9801      	ldr	r0, [sp, #4]
 801050a:	f000 fbf3 	bl	8010cf4 <__mcmp>
 801050e:	2800      	cmp	r0, #0
 8010510:	f77f aea9 	ble.w	8010266 <_dtoa_r+0x5a6>
 8010514:	463e      	mov	r6, r7
 8010516:	2331      	movs	r3, #49	@ 0x31
 8010518:	f806 3b01 	strb.w	r3, [r6], #1
 801051c:	9b04      	ldr	r3, [sp, #16]
 801051e:	3301      	adds	r3, #1
 8010520:	9304      	str	r3, [sp, #16]
 8010522:	e6a4      	b.n	801026e <_dtoa_r+0x5ae>
 8010524:	f8cd 8010 	str.w	r8, [sp, #16]
 8010528:	4654      	mov	r4, sl
 801052a:	4625      	mov	r5, r4
 801052c:	e7f2      	b.n	8010514 <_dtoa_r+0x854>
 801052e:	9b08      	ldr	r3, [sp, #32]
 8010530:	2b00      	cmp	r3, #0
 8010532:	f000 8103 	beq.w	801073c <_dtoa_r+0xa7c>
 8010536:	2e00      	cmp	r6, #0
 8010538:	dd05      	ble.n	8010546 <_dtoa_r+0x886>
 801053a:	4629      	mov	r1, r5
 801053c:	4632      	mov	r2, r6
 801053e:	4648      	mov	r0, r9
 8010540:	f000 fb6c 	bl	8010c1c <__lshift>
 8010544:	4605      	mov	r5, r0
 8010546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010548:	2b00      	cmp	r3, #0
 801054a:	d058      	beq.n	80105fe <_dtoa_r+0x93e>
 801054c:	6869      	ldr	r1, [r5, #4]
 801054e:	4648      	mov	r0, r9
 8010550:	f000 f956 	bl	8010800 <_Balloc>
 8010554:	4606      	mov	r6, r0
 8010556:	b928      	cbnz	r0, 8010564 <_dtoa_r+0x8a4>
 8010558:	4b82      	ldr	r3, [pc, #520]	@ (8010764 <_dtoa_r+0xaa4>)
 801055a:	4602      	mov	r2, r0
 801055c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010560:	f7ff bbc7 	b.w	800fcf2 <_dtoa_r+0x32>
 8010564:	692a      	ldr	r2, [r5, #16]
 8010566:	3202      	adds	r2, #2
 8010568:	0092      	lsls	r2, r2, #2
 801056a:	f105 010c 	add.w	r1, r5, #12
 801056e:	300c      	adds	r0, #12
 8010570:	f000 fee6 	bl	8011340 <memcpy>
 8010574:	2201      	movs	r2, #1
 8010576:	4631      	mov	r1, r6
 8010578:	4648      	mov	r0, r9
 801057a:	f000 fb4f 	bl	8010c1c <__lshift>
 801057e:	1c7b      	adds	r3, r7, #1
 8010580:	9305      	str	r3, [sp, #20]
 8010582:	eb07 030b 	add.w	r3, r7, fp
 8010586:	9309      	str	r3, [sp, #36]	@ 0x24
 8010588:	9b02      	ldr	r3, [sp, #8]
 801058a:	f003 0301 	and.w	r3, r3, #1
 801058e:	46a8      	mov	r8, r5
 8010590:	9308      	str	r3, [sp, #32]
 8010592:	4605      	mov	r5, r0
 8010594:	9b05      	ldr	r3, [sp, #20]
 8010596:	9801      	ldr	r0, [sp, #4]
 8010598:	4621      	mov	r1, r4
 801059a:	f103 3bff 	add.w	fp, r3, #4294967295
 801059e:	f7ff fb06 	bl	800fbae <quorem>
 80105a2:	4641      	mov	r1, r8
 80105a4:	9002      	str	r0, [sp, #8]
 80105a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80105aa:	9801      	ldr	r0, [sp, #4]
 80105ac:	f000 fba2 	bl	8010cf4 <__mcmp>
 80105b0:	462a      	mov	r2, r5
 80105b2:	9006      	str	r0, [sp, #24]
 80105b4:	4621      	mov	r1, r4
 80105b6:	4648      	mov	r0, r9
 80105b8:	f000 fbb8 	bl	8010d2c <__mdiff>
 80105bc:	68c2      	ldr	r2, [r0, #12]
 80105be:	4606      	mov	r6, r0
 80105c0:	b9fa      	cbnz	r2, 8010602 <_dtoa_r+0x942>
 80105c2:	4601      	mov	r1, r0
 80105c4:	9801      	ldr	r0, [sp, #4]
 80105c6:	f000 fb95 	bl	8010cf4 <__mcmp>
 80105ca:	4602      	mov	r2, r0
 80105cc:	4631      	mov	r1, r6
 80105ce:	4648      	mov	r0, r9
 80105d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80105d2:	f000 f955 	bl	8010880 <_Bfree>
 80105d6:	9b07      	ldr	r3, [sp, #28]
 80105d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105da:	9e05      	ldr	r6, [sp, #20]
 80105dc:	ea43 0102 	orr.w	r1, r3, r2
 80105e0:	9b08      	ldr	r3, [sp, #32]
 80105e2:	4319      	orrs	r1, r3
 80105e4:	d10f      	bne.n	8010606 <_dtoa_r+0x946>
 80105e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80105ea:	d028      	beq.n	801063e <_dtoa_r+0x97e>
 80105ec:	9b06      	ldr	r3, [sp, #24]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	dd02      	ble.n	80105f8 <_dtoa_r+0x938>
 80105f2:	9b02      	ldr	r3, [sp, #8]
 80105f4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80105f8:	f88b a000 	strb.w	sl, [fp]
 80105fc:	e639      	b.n	8010272 <_dtoa_r+0x5b2>
 80105fe:	4628      	mov	r0, r5
 8010600:	e7bd      	b.n	801057e <_dtoa_r+0x8be>
 8010602:	2201      	movs	r2, #1
 8010604:	e7e2      	b.n	80105cc <_dtoa_r+0x90c>
 8010606:	9b06      	ldr	r3, [sp, #24]
 8010608:	2b00      	cmp	r3, #0
 801060a:	db04      	blt.n	8010616 <_dtoa_r+0x956>
 801060c:	9907      	ldr	r1, [sp, #28]
 801060e:	430b      	orrs	r3, r1
 8010610:	9908      	ldr	r1, [sp, #32]
 8010612:	430b      	orrs	r3, r1
 8010614:	d120      	bne.n	8010658 <_dtoa_r+0x998>
 8010616:	2a00      	cmp	r2, #0
 8010618:	ddee      	ble.n	80105f8 <_dtoa_r+0x938>
 801061a:	9901      	ldr	r1, [sp, #4]
 801061c:	2201      	movs	r2, #1
 801061e:	4648      	mov	r0, r9
 8010620:	f000 fafc 	bl	8010c1c <__lshift>
 8010624:	4621      	mov	r1, r4
 8010626:	9001      	str	r0, [sp, #4]
 8010628:	f000 fb64 	bl	8010cf4 <__mcmp>
 801062c:	2800      	cmp	r0, #0
 801062e:	dc03      	bgt.n	8010638 <_dtoa_r+0x978>
 8010630:	d1e2      	bne.n	80105f8 <_dtoa_r+0x938>
 8010632:	f01a 0f01 	tst.w	sl, #1
 8010636:	d0df      	beq.n	80105f8 <_dtoa_r+0x938>
 8010638:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801063c:	d1d9      	bne.n	80105f2 <_dtoa_r+0x932>
 801063e:	2339      	movs	r3, #57	@ 0x39
 8010640:	f88b 3000 	strb.w	r3, [fp]
 8010644:	4633      	mov	r3, r6
 8010646:	461e      	mov	r6, r3
 8010648:	3b01      	subs	r3, #1
 801064a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801064e:	2a39      	cmp	r2, #57	@ 0x39
 8010650:	d053      	beq.n	80106fa <_dtoa_r+0xa3a>
 8010652:	3201      	adds	r2, #1
 8010654:	701a      	strb	r2, [r3, #0]
 8010656:	e60c      	b.n	8010272 <_dtoa_r+0x5b2>
 8010658:	2a00      	cmp	r2, #0
 801065a:	dd07      	ble.n	801066c <_dtoa_r+0x9ac>
 801065c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010660:	d0ed      	beq.n	801063e <_dtoa_r+0x97e>
 8010662:	f10a 0301 	add.w	r3, sl, #1
 8010666:	f88b 3000 	strb.w	r3, [fp]
 801066a:	e602      	b.n	8010272 <_dtoa_r+0x5b2>
 801066c:	9b05      	ldr	r3, [sp, #20]
 801066e:	9a05      	ldr	r2, [sp, #20]
 8010670:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010676:	4293      	cmp	r3, r2
 8010678:	d029      	beq.n	80106ce <_dtoa_r+0xa0e>
 801067a:	9901      	ldr	r1, [sp, #4]
 801067c:	2300      	movs	r3, #0
 801067e:	220a      	movs	r2, #10
 8010680:	4648      	mov	r0, r9
 8010682:	f000 f91f 	bl	80108c4 <__multadd>
 8010686:	45a8      	cmp	r8, r5
 8010688:	9001      	str	r0, [sp, #4]
 801068a:	f04f 0300 	mov.w	r3, #0
 801068e:	f04f 020a 	mov.w	r2, #10
 8010692:	4641      	mov	r1, r8
 8010694:	4648      	mov	r0, r9
 8010696:	d107      	bne.n	80106a8 <_dtoa_r+0x9e8>
 8010698:	f000 f914 	bl	80108c4 <__multadd>
 801069c:	4680      	mov	r8, r0
 801069e:	4605      	mov	r5, r0
 80106a0:	9b05      	ldr	r3, [sp, #20]
 80106a2:	3301      	adds	r3, #1
 80106a4:	9305      	str	r3, [sp, #20]
 80106a6:	e775      	b.n	8010594 <_dtoa_r+0x8d4>
 80106a8:	f000 f90c 	bl	80108c4 <__multadd>
 80106ac:	4629      	mov	r1, r5
 80106ae:	4680      	mov	r8, r0
 80106b0:	2300      	movs	r3, #0
 80106b2:	220a      	movs	r2, #10
 80106b4:	4648      	mov	r0, r9
 80106b6:	f000 f905 	bl	80108c4 <__multadd>
 80106ba:	4605      	mov	r5, r0
 80106bc:	e7f0      	b.n	80106a0 <_dtoa_r+0x9e0>
 80106be:	f1bb 0f00 	cmp.w	fp, #0
 80106c2:	bfcc      	ite	gt
 80106c4:	465e      	movgt	r6, fp
 80106c6:	2601      	movle	r6, #1
 80106c8:	443e      	add	r6, r7
 80106ca:	f04f 0800 	mov.w	r8, #0
 80106ce:	9901      	ldr	r1, [sp, #4]
 80106d0:	2201      	movs	r2, #1
 80106d2:	4648      	mov	r0, r9
 80106d4:	f000 faa2 	bl	8010c1c <__lshift>
 80106d8:	4621      	mov	r1, r4
 80106da:	9001      	str	r0, [sp, #4]
 80106dc:	f000 fb0a 	bl	8010cf4 <__mcmp>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	dcaf      	bgt.n	8010644 <_dtoa_r+0x984>
 80106e4:	d102      	bne.n	80106ec <_dtoa_r+0xa2c>
 80106e6:	f01a 0f01 	tst.w	sl, #1
 80106ea:	d1ab      	bne.n	8010644 <_dtoa_r+0x984>
 80106ec:	4633      	mov	r3, r6
 80106ee:	461e      	mov	r6, r3
 80106f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106f4:	2a30      	cmp	r2, #48	@ 0x30
 80106f6:	d0fa      	beq.n	80106ee <_dtoa_r+0xa2e>
 80106f8:	e5bb      	b.n	8010272 <_dtoa_r+0x5b2>
 80106fa:	429f      	cmp	r7, r3
 80106fc:	d1a3      	bne.n	8010646 <_dtoa_r+0x986>
 80106fe:	9b04      	ldr	r3, [sp, #16]
 8010700:	3301      	adds	r3, #1
 8010702:	9304      	str	r3, [sp, #16]
 8010704:	2331      	movs	r3, #49	@ 0x31
 8010706:	703b      	strb	r3, [r7, #0]
 8010708:	e5b3      	b.n	8010272 <_dtoa_r+0x5b2>
 801070a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801070c:	4f16      	ldr	r7, [pc, #88]	@ (8010768 <_dtoa_r+0xaa8>)
 801070e:	b11b      	cbz	r3, 8010718 <_dtoa_r+0xa58>
 8010710:	f107 0308 	add.w	r3, r7, #8
 8010714:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010716:	6013      	str	r3, [r2, #0]
 8010718:	4638      	mov	r0, r7
 801071a:	b011      	add	sp, #68	@ 0x44
 801071c:	ecbd 8b02 	vpop	{d8}
 8010720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010724:	9b07      	ldr	r3, [sp, #28]
 8010726:	2b01      	cmp	r3, #1
 8010728:	f77f ae36 	ble.w	8010398 <_dtoa_r+0x6d8>
 801072c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801072e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010730:	2001      	movs	r0, #1
 8010732:	e656      	b.n	80103e2 <_dtoa_r+0x722>
 8010734:	f1bb 0f00 	cmp.w	fp, #0
 8010738:	f77f aed7 	ble.w	80104ea <_dtoa_r+0x82a>
 801073c:	463e      	mov	r6, r7
 801073e:	9801      	ldr	r0, [sp, #4]
 8010740:	4621      	mov	r1, r4
 8010742:	f7ff fa34 	bl	800fbae <quorem>
 8010746:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801074a:	f806 ab01 	strb.w	sl, [r6], #1
 801074e:	1bf2      	subs	r2, r6, r7
 8010750:	4593      	cmp	fp, r2
 8010752:	ddb4      	ble.n	80106be <_dtoa_r+0x9fe>
 8010754:	9901      	ldr	r1, [sp, #4]
 8010756:	2300      	movs	r3, #0
 8010758:	220a      	movs	r2, #10
 801075a:	4648      	mov	r0, r9
 801075c:	f000 f8b2 	bl	80108c4 <__multadd>
 8010760:	9001      	str	r0, [sp, #4]
 8010762:	e7ec      	b.n	801073e <_dtoa_r+0xa7e>
 8010764:	08013e1c 	.word	0x08013e1c
 8010768:	08013da0 	.word	0x08013da0

0801076c <_free_r>:
 801076c:	b538      	push	{r3, r4, r5, lr}
 801076e:	4605      	mov	r5, r0
 8010770:	2900      	cmp	r1, #0
 8010772:	d041      	beq.n	80107f8 <_free_r+0x8c>
 8010774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010778:	1f0c      	subs	r4, r1, #4
 801077a:	2b00      	cmp	r3, #0
 801077c:	bfb8      	it	lt
 801077e:	18e4      	addlt	r4, r4, r3
 8010780:	f7fe fc24 	bl	800efcc <__malloc_lock>
 8010784:	4a1d      	ldr	r2, [pc, #116]	@ (80107fc <_free_r+0x90>)
 8010786:	6813      	ldr	r3, [r2, #0]
 8010788:	b933      	cbnz	r3, 8010798 <_free_r+0x2c>
 801078a:	6063      	str	r3, [r4, #4]
 801078c:	6014      	str	r4, [r2, #0]
 801078e:	4628      	mov	r0, r5
 8010790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010794:	f7fe bc20 	b.w	800efd8 <__malloc_unlock>
 8010798:	42a3      	cmp	r3, r4
 801079a:	d908      	bls.n	80107ae <_free_r+0x42>
 801079c:	6820      	ldr	r0, [r4, #0]
 801079e:	1821      	adds	r1, r4, r0
 80107a0:	428b      	cmp	r3, r1
 80107a2:	bf01      	itttt	eq
 80107a4:	6819      	ldreq	r1, [r3, #0]
 80107a6:	685b      	ldreq	r3, [r3, #4]
 80107a8:	1809      	addeq	r1, r1, r0
 80107aa:	6021      	streq	r1, [r4, #0]
 80107ac:	e7ed      	b.n	801078a <_free_r+0x1e>
 80107ae:	461a      	mov	r2, r3
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	b10b      	cbz	r3, 80107b8 <_free_r+0x4c>
 80107b4:	42a3      	cmp	r3, r4
 80107b6:	d9fa      	bls.n	80107ae <_free_r+0x42>
 80107b8:	6811      	ldr	r1, [r2, #0]
 80107ba:	1850      	adds	r0, r2, r1
 80107bc:	42a0      	cmp	r0, r4
 80107be:	d10b      	bne.n	80107d8 <_free_r+0x6c>
 80107c0:	6820      	ldr	r0, [r4, #0]
 80107c2:	4401      	add	r1, r0
 80107c4:	1850      	adds	r0, r2, r1
 80107c6:	4283      	cmp	r3, r0
 80107c8:	6011      	str	r1, [r2, #0]
 80107ca:	d1e0      	bne.n	801078e <_free_r+0x22>
 80107cc:	6818      	ldr	r0, [r3, #0]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	6053      	str	r3, [r2, #4]
 80107d2:	4408      	add	r0, r1
 80107d4:	6010      	str	r0, [r2, #0]
 80107d6:	e7da      	b.n	801078e <_free_r+0x22>
 80107d8:	d902      	bls.n	80107e0 <_free_r+0x74>
 80107da:	230c      	movs	r3, #12
 80107dc:	602b      	str	r3, [r5, #0]
 80107de:	e7d6      	b.n	801078e <_free_r+0x22>
 80107e0:	6820      	ldr	r0, [r4, #0]
 80107e2:	1821      	adds	r1, r4, r0
 80107e4:	428b      	cmp	r3, r1
 80107e6:	bf04      	itt	eq
 80107e8:	6819      	ldreq	r1, [r3, #0]
 80107ea:	685b      	ldreq	r3, [r3, #4]
 80107ec:	6063      	str	r3, [r4, #4]
 80107ee:	bf04      	itt	eq
 80107f0:	1809      	addeq	r1, r1, r0
 80107f2:	6021      	streq	r1, [r4, #0]
 80107f4:	6054      	str	r4, [r2, #4]
 80107f6:	e7ca      	b.n	801078e <_free_r+0x22>
 80107f8:	bd38      	pop	{r3, r4, r5, pc}
 80107fa:	bf00      	nop
 80107fc:	24002708 	.word	0x24002708

08010800 <_Balloc>:
 8010800:	b570      	push	{r4, r5, r6, lr}
 8010802:	69c6      	ldr	r6, [r0, #28]
 8010804:	4604      	mov	r4, r0
 8010806:	460d      	mov	r5, r1
 8010808:	b976      	cbnz	r6, 8010828 <_Balloc+0x28>
 801080a:	2010      	movs	r0, #16
 801080c:	f7fe fb34 	bl	800ee78 <malloc>
 8010810:	4602      	mov	r2, r0
 8010812:	61e0      	str	r0, [r4, #28]
 8010814:	b920      	cbnz	r0, 8010820 <_Balloc+0x20>
 8010816:	4b18      	ldr	r3, [pc, #96]	@ (8010878 <_Balloc+0x78>)
 8010818:	4818      	ldr	r0, [pc, #96]	@ (801087c <_Balloc+0x7c>)
 801081a:	216b      	movs	r1, #107	@ 0x6b
 801081c:	f000 fd9e 	bl	801135c <__assert_func>
 8010820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010824:	6006      	str	r6, [r0, #0]
 8010826:	60c6      	str	r6, [r0, #12]
 8010828:	69e6      	ldr	r6, [r4, #28]
 801082a:	68f3      	ldr	r3, [r6, #12]
 801082c:	b183      	cbz	r3, 8010850 <_Balloc+0x50>
 801082e:	69e3      	ldr	r3, [r4, #28]
 8010830:	68db      	ldr	r3, [r3, #12]
 8010832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010836:	b9b8      	cbnz	r0, 8010868 <_Balloc+0x68>
 8010838:	2101      	movs	r1, #1
 801083a:	fa01 f605 	lsl.w	r6, r1, r5
 801083e:	1d72      	adds	r2, r6, #5
 8010840:	0092      	lsls	r2, r2, #2
 8010842:	4620      	mov	r0, r4
 8010844:	f000 fda8 	bl	8011398 <_calloc_r>
 8010848:	b160      	cbz	r0, 8010864 <_Balloc+0x64>
 801084a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801084e:	e00e      	b.n	801086e <_Balloc+0x6e>
 8010850:	2221      	movs	r2, #33	@ 0x21
 8010852:	2104      	movs	r1, #4
 8010854:	4620      	mov	r0, r4
 8010856:	f000 fd9f 	bl	8011398 <_calloc_r>
 801085a:	69e3      	ldr	r3, [r4, #28]
 801085c:	60f0      	str	r0, [r6, #12]
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d1e4      	bne.n	801082e <_Balloc+0x2e>
 8010864:	2000      	movs	r0, #0
 8010866:	bd70      	pop	{r4, r5, r6, pc}
 8010868:	6802      	ldr	r2, [r0, #0]
 801086a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801086e:	2300      	movs	r3, #0
 8010870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010874:	e7f7      	b.n	8010866 <_Balloc+0x66>
 8010876:	bf00      	nop
 8010878:	08013dad 	.word	0x08013dad
 801087c:	08013e2d 	.word	0x08013e2d

08010880 <_Bfree>:
 8010880:	b570      	push	{r4, r5, r6, lr}
 8010882:	69c6      	ldr	r6, [r0, #28]
 8010884:	4605      	mov	r5, r0
 8010886:	460c      	mov	r4, r1
 8010888:	b976      	cbnz	r6, 80108a8 <_Bfree+0x28>
 801088a:	2010      	movs	r0, #16
 801088c:	f7fe faf4 	bl	800ee78 <malloc>
 8010890:	4602      	mov	r2, r0
 8010892:	61e8      	str	r0, [r5, #28]
 8010894:	b920      	cbnz	r0, 80108a0 <_Bfree+0x20>
 8010896:	4b09      	ldr	r3, [pc, #36]	@ (80108bc <_Bfree+0x3c>)
 8010898:	4809      	ldr	r0, [pc, #36]	@ (80108c0 <_Bfree+0x40>)
 801089a:	218f      	movs	r1, #143	@ 0x8f
 801089c:	f000 fd5e 	bl	801135c <__assert_func>
 80108a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108a4:	6006      	str	r6, [r0, #0]
 80108a6:	60c6      	str	r6, [r0, #12]
 80108a8:	b13c      	cbz	r4, 80108ba <_Bfree+0x3a>
 80108aa:	69eb      	ldr	r3, [r5, #28]
 80108ac:	6862      	ldr	r2, [r4, #4]
 80108ae:	68db      	ldr	r3, [r3, #12]
 80108b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108b4:	6021      	str	r1, [r4, #0]
 80108b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108ba:	bd70      	pop	{r4, r5, r6, pc}
 80108bc:	08013dad 	.word	0x08013dad
 80108c0:	08013e2d 	.word	0x08013e2d

080108c4 <__multadd>:
 80108c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c8:	690d      	ldr	r5, [r1, #16]
 80108ca:	4607      	mov	r7, r0
 80108cc:	460c      	mov	r4, r1
 80108ce:	461e      	mov	r6, r3
 80108d0:	f101 0c14 	add.w	ip, r1, #20
 80108d4:	2000      	movs	r0, #0
 80108d6:	f8dc 3000 	ldr.w	r3, [ip]
 80108da:	b299      	uxth	r1, r3
 80108dc:	fb02 6101 	mla	r1, r2, r1, r6
 80108e0:	0c1e      	lsrs	r6, r3, #16
 80108e2:	0c0b      	lsrs	r3, r1, #16
 80108e4:	fb02 3306 	mla	r3, r2, r6, r3
 80108e8:	b289      	uxth	r1, r1
 80108ea:	3001      	adds	r0, #1
 80108ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80108f0:	4285      	cmp	r5, r0
 80108f2:	f84c 1b04 	str.w	r1, [ip], #4
 80108f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80108fa:	dcec      	bgt.n	80108d6 <__multadd+0x12>
 80108fc:	b30e      	cbz	r6, 8010942 <__multadd+0x7e>
 80108fe:	68a3      	ldr	r3, [r4, #8]
 8010900:	42ab      	cmp	r3, r5
 8010902:	dc19      	bgt.n	8010938 <__multadd+0x74>
 8010904:	6861      	ldr	r1, [r4, #4]
 8010906:	4638      	mov	r0, r7
 8010908:	3101      	adds	r1, #1
 801090a:	f7ff ff79 	bl	8010800 <_Balloc>
 801090e:	4680      	mov	r8, r0
 8010910:	b928      	cbnz	r0, 801091e <__multadd+0x5a>
 8010912:	4602      	mov	r2, r0
 8010914:	4b0c      	ldr	r3, [pc, #48]	@ (8010948 <__multadd+0x84>)
 8010916:	480d      	ldr	r0, [pc, #52]	@ (801094c <__multadd+0x88>)
 8010918:	21ba      	movs	r1, #186	@ 0xba
 801091a:	f000 fd1f 	bl	801135c <__assert_func>
 801091e:	6922      	ldr	r2, [r4, #16]
 8010920:	3202      	adds	r2, #2
 8010922:	f104 010c 	add.w	r1, r4, #12
 8010926:	0092      	lsls	r2, r2, #2
 8010928:	300c      	adds	r0, #12
 801092a:	f000 fd09 	bl	8011340 <memcpy>
 801092e:	4621      	mov	r1, r4
 8010930:	4638      	mov	r0, r7
 8010932:	f7ff ffa5 	bl	8010880 <_Bfree>
 8010936:	4644      	mov	r4, r8
 8010938:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801093c:	3501      	adds	r5, #1
 801093e:	615e      	str	r6, [r3, #20]
 8010940:	6125      	str	r5, [r4, #16]
 8010942:	4620      	mov	r0, r4
 8010944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010948:	08013e1c 	.word	0x08013e1c
 801094c:	08013e2d 	.word	0x08013e2d

08010950 <__hi0bits>:
 8010950:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010954:	4603      	mov	r3, r0
 8010956:	bf36      	itet	cc
 8010958:	0403      	lslcc	r3, r0, #16
 801095a:	2000      	movcs	r0, #0
 801095c:	2010      	movcc	r0, #16
 801095e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010962:	bf3c      	itt	cc
 8010964:	021b      	lslcc	r3, r3, #8
 8010966:	3008      	addcc	r0, #8
 8010968:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801096c:	bf3c      	itt	cc
 801096e:	011b      	lslcc	r3, r3, #4
 8010970:	3004      	addcc	r0, #4
 8010972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010976:	bf3c      	itt	cc
 8010978:	009b      	lslcc	r3, r3, #2
 801097a:	3002      	addcc	r0, #2
 801097c:	2b00      	cmp	r3, #0
 801097e:	db05      	blt.n	801098c <__hi0bits+0x3c>
 8010980:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010984:	f100 0001 	add.w	r0, r0, #1
 8010988:	bf08      	it	eq
 801098a:	2020      	moveq	r0, #32
 801098c:	4770      	bx	lr

0801098e <__lo0bits>:
 801098e:	6803      	ldr	r3, [r0, #0]
 8010990:	4602      	mov	r2, r0
 8010992:	f013 0007 	ands.w	r0, r3, #7
 8010996:	d00b      	beq.n	80109b0 <__lo0bits+0x22>
 8010998:	07d9      	lsls	r1, r3, #31
 801099a:	d421      	bmi.n	80109e0 <__lo0bits+0x52>
 801099c:	0798      	lsls	r0, r3, #30
 801099e:	bf49      	itett	mi
 80109a0:	085b      	lsrmi	r3, r3, #1
 80109a2:	089b      	lsrpl	r3, r3, #2
 80109a4:	2001      	movmi	r0, #1
 80109a6:	6013      	strmi	r3, [r2, #0]
 80109a8:	bf5c      	itt	pl
 80109aa:	6013      	strpl	r3, [r2, #0]
 80109ac:	2002      	movpl	r0, #2
 80109ae:	4770      	bx	lr
 80109b0:	b299      	uxth	r1, r3
 80109b2:	b909      	cbnz	r1, 80109b8 <__lo0bits+0x2a>
 80109b4:	0c1b      	lsrs	r3, r3, #16
 80109b6:	2010      	movs	r0, #16
 80109b8:	b2d9      	uxtb	r1, r3
 80109ba:	b909      	cbnz	r1, 80109c0 <__lo0bits+0x32>
 80109bc:	3008      	adds	r0, #8
 80109be:	0a1b      	lsrs	r3, r3, #8
 80109c0:	0719      	lsls	r1, r3, #28
 80109c2:	bf04      	itt	eq
 80109c4:	091b      	lsreq	r3, r3, #4
 80109c6:	3004      	addeq	r0, #4
 80109c8:	0799      	lsls	r1, r3, #30
 80109ca:	bf04      	itt	eq
 80109cc:	089b      	lsreq	r3, r3, #2
 80109ce:	3002      	addeq	r0, #2
 80109d0:	07d9      	lsls	r1, r3, #31
 80109d2:	d403      	bmi.n	80109dc <__lo0bits+0x4e>
 80109d4:	085b      	lsrs	r3, r3, #1
 80109d6:	f100 0001 	add.w	r0, r0, #1
 80109da:	d003      	beq.n	80109e4 <__lo0bits+0x56>
 80109dc:	6013      	str	r3, [r2, #0]
 80109de:	4770      	bx	lr
 80109e0:	2000      	movs	r0, #0
 80109e2:	4770      	bx	lr
 80109e4:	2020      	movs	r0, #32
 80109e6:	4770      	bx	lr

080109e8 <__i2b>:
 80109e8:	b510      	push	{r4, lr}
 80109ea:	460c      	mov	r4, r1
 80109ec:	2101      	movs	r1, #1
 80109ee:	f7ff ff07 	bl	8010800 <_Balloc>
 80109f2:	4602      	mov	r2, r0
 80109f4:	b928      	cbnz	r0, 8010a02 <__i2b+0x1a>
 80109f6:	4b05      	ldr	r3, [pc, #20]	@ (8010a0c <__i2b+0x24>)
 80109f8:	4805      	ldr	r0, [pc, #20]	@ (8010a10 <__i2b+0x28>)
 80109fa:	f240 1145 	movw	r1, #325	@ 0x145
 80109fe:	f000 fcad 	bl	801135c <__assert_func>
 8010a02:	2301      	movs	r3, #1
 8010a04:	6144      	str	r4, [r0, #20]
 8010a06:	6103      	str	r3, [r0, #16]
 8010a08:	bd10      	pop	{r4, pc}
 8010a0a:	bf00      	nop
 8010a0c:	08013e1c 	.word	0x08013e1c
 8010a10:	08013e2d 	.word	0x08013e2d

08010a14 <__multiply>:
 8010a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a18:	4614      	mov	r4, r2
 8010a1a:	690a      	ldr	r2, [r1, #16]
 8010a1c:	6923      	ldr	r3, [r4, #16]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	bfa8      	it	ge
 8010a22:	4623      	movge	r3, r4
 8010a24:	460f      	mov	r7, r1
 8010a26:	bfa4      	itt	ge
 8010a28:	460c      	movge	r4, r1
 8010a2a:	461f      	movge	r7, r3
 8010a2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010a30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010a34:	68a3      	ldr	r3, [r4, #8]
 8010a36:	6861      	ldr	r1, [r4, #4]
 8010a38:	eb0a 0609 	add.w	r6, sl, r9
 8010a3c:	42b3      	cmp	r3, r6
 8010a3e:	b085      	sub	sp, #20
 8010a40:	bfb8      	it	lt
 8010a42:	3101      	addlt	r1, #1
 8010a44:	f7ff fedc 	bl	8010800 <_Balloc>
 8010a48:	b930      	cbnz	r0, 8010a58 <__multiply+0x44>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	4b44      	ldr	r3, [pc, #272]	@ (8010b60 <__multiply+0x14c>)
 8010a4e:	4845      	ldr	r0, [pc, #276]	@ (8010b64 <__multiply+0x150>)
 8010a50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010a54:	f000 fc82 	bl	801135c <__assert_func>
 8010a58:	f100 0514 	add.w	r5, r0, #20
 8010a5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010a60:	462b      	mov	r3, r5
 8010a62:	2200      	movs	r2, #0
 8010a64:	4543      	cmp	r3, r8
 8010a66:	d321      	bcc.n	8010aac <__multiply+0x98>
 8010a68:	f107 0114 	add.w	r1, r7, #20
 8010a6c:	f104 0214 	add.w	r2, r4, #20
 8010a70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010a74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010a78:	9302      	str	r3, [sp, #8]
 8010a7a:	1b13      	subs	r3, r2, r4
 8010a7c:	3b15      	subs	r3, #21
 8010a7e:	f023 0303 	bic.w	r3, r3, #3
 8010a82:	3304      	adds	r3, #4
 8010a84:	f104 0715 	add.w	r7, r4, #21
 8010a88:	42ba      	cmp	r2, r7
 8010a8a:	bf38      	it	cc
 8010a8c:	2304      	movcc	r3, #4
 8010a8e:	9301      	str	r3, [sp, #4]
 8010a90:	9b02      	ldr	r3, [sp, #8]
 8010a92:	9103      	str	r1, [sp, #12]
 8010a94:	428b      	cmp	r3, r1
 8010a96:	d80c      	bhi.n	8010ab2 <__multiply+0x9e>
 8010a98:	2e00      	cmp	r6, #0
 8010a9a:	dd03      	ble.n	8010aa4 <__multiply+0x90>
 8010a9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d05b      	beq.n	8010b5c <__multiply+0x148>
 8010aa4:	6106      	str	r6, [r0, #16]
 8010aa6:	b005      	add	sp, #20
 8010aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aac:	f843 2b04 	str.w	r2, [r3], #4
 8010ab0:	e7d8      	b.n	8010a64 <__multiply+0x50>
 8010ab2:	f8b1 a000 	ldrh.w	sl, [r1]
 8010ab6:	f1ba 0f00 	cmp.w	sl, #0
 8010aba:	d024      	beq.n	8010b06 <__multiply+0xf2>
 8010abc:	f104 0e14 	add.w	lr, r4, #20
 8010ac0:	46a9      	mov	r9, r5
 8010ac2:	f04f 0c00 	mov.w	ip, #0
 8010ac6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010aca:	f8d9 3000 	ldr.w	r3, [r9]
 8010ace:	fa1f fb87 	uxth.w	fp, r7
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	fb0a 330b 	mla	r3, sl, fp, r3
 8010ad8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010adc:	f8d9 7000 	ldr.w	r7, [r9]
 8010ae0:	4463      	add	r3, ip
 8010ae2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010ae6:	fb0a c70b 	mla	r7, sl, fp, ip
 8010aea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010af4:	4572      	cmp	r2, lr
 8010af6:	f849 3b04 	str.w	r3, [r9], #4
 8010afa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010afe:	d8e2      	bhi.n	8010ac6 <__multiply+0xb2>
 8010b00:	9b01      	ldr	r3, [sp, #4]
 8010b02:	f845 c003 	str.w	ip, [r5, r3]
 8010b06:	9b03      	ldr	r3, [sp, #12]
 8010b08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010b0c:	3104      	adds	r1, #4
 8010b0e:	f1b9 0f00 	cmp.w	r9, #0
 8010b12:	d021      	beq.n	8010b58 <__multiply+0x144>
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	f104 0c14 	add.w	ip, r4, #20
 8010b1a:	46ae      	mov	lr, r5
 8010b1c:	f04f 0a00 	mov.w	sl, #0
 8010b20:	f8bc b000 	ldrh.w	fp, [ip]
 8010b24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010b28:	fb09 770b 	mla	r7, r9, fp, r7
 8010b2c:	4457      	add	r7, sl
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010b34:	f84e 3b04 	str.w	r3, [lr], #4
 8010b38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010b40:	f8be 3000 	ldrh.w	r3, [lr]
 8010b44:	fb09 330a 	mla	r3, r9, sl, r3
 8010b48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010b4c:	4562      	cmp	r2, ip
 8010b4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010b52:	d8e5      	bhi.n	8010b20 <__multiply+0x10c>
 8010b54:	9f01      	ldr	r7, [sp, #4]
 8010b56:	51eb      	str	r3, [r5, r7]
 8010b58:	3504      	adds	r5, #4
 8010b5a:	e799      	b.n	8010a90 <__multiply+0x7c>
 8010b5c:	3e01      	subs	r6, #1
 8010b5e:	e79b      	b.n	8010a98 <__multiply+0x84>
 8010b60:	08013e1c 	.word	0x08013e1c
 8010b64:	08013e2d 	.word	0x08013e2d

08010b68 <__pow5mult>:
 8010b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b6c:	4615      	mov	r5, r2
 8010b6e:	f012 0203 	ands.w	r2, r2, #3
 8010b72:	4607      	mov	r7, r0
 8010b74:	460e      	mov	r6, r1
 8010b76:	d007      	beq.n	8010b88 <__pow5mult+0x20>
 8010b78:	4c25      	ldr	r4, [pc, #148]	@ (8010c10 <__pow5mult+0xa8>)
 8010b7a:	3a01      	subs	r2, #1
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010b82:	f7ff fe9f 	bl	80108c4 <__multadd>
 8010b86:	4606      	mov	r6, r0
 8010b88:	10ad      	asrs	r5, r5, #2
 8010b8a:	d03d      	beq.n	8010c08 <__pow5mult+0xa0>
 8010b8c:	69fc      	ldr	r4, [r7, #28]
 8010b8e:	b97c      	cbnz	r4, 8010bb0 <__pow5mult+0x48>
 8010b90:	2010      	movs	r0, #16
 8010b92:	f7fe f971 	bl	800ee78 <malloc>
 8010b96:	4602      	mov	r2, r0
 8010b98:	61f8      	str	r0, [r7, #28]
 8010b9a:	b928      	cbnz	r0, 8010ba8 <__pow5mult+0x40>
 8010b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8010c14 <__pow5mult+0xac>)
 8010b9e:	481e      	ldr	r0, [pc, #120]	@ (8010c18 <__pow5mult+0xb0>)
 8010ba0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010ba4:	f000 fbda 	bl	801135c <__assert_func>
 8010ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010bac:	6004      	str	r4, [r0, #0]
 8010bae:	60c4      	str	r4, [r0, #12]
 8010bb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010bb8:	b94c      	cbnz	r4, 8010bce <__pow5mult+0x66>
 8010bba:	f240 2171 	movw	r1, #625	@ 0x271
 8010bbe:	4638      	mov	r0, r7
 8010bc0:	f7ff ff12 	bl	80109e8 <__i2b>
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010bca:	4604      	mov	r4, r0
 8010bcc:	6003      	str	r3, [r0, #0]
 8010bce:	f04f 0900 	mov.w	r9, #0
 8010bd2:	07eb      	lsls	r3, r5, #31
 8010bd4:	d50a      	bpl.n	8010bec <__pow5mult+0x84>
 8010bd6:	4631      	mov	r1, r6
 8010bd8:	4622      	mov	r2, r4
 8010bda:	4638      	mov	r0, r7
 8010bdc:	f7ff ff1a 	bl	8010a14 <__multiply>
 8010be0:	4631      	mov	r1, r6
 8010be2:	4680      	mov	r8, r0
 8010be4:	4638      	mov	r0, r7
 8010be6:	f7ff fe4b 	bl	8010880 <_Bfree>
 8010bea:	4646      	mov	r6, r8
 8010bec:	106d      	asrs	r5, r5, #1
 8010bee:	d00b      	beq.n	8010c08 <__pow5mult+0xa0>
 8010bf0:	6820      	ldr	r0, [r4, #0]
 8010bf2:	b938      	cbnz	r0, 8010c04 <__pow5mult+0x9c>
 8010bf4:	4622      	mov	r2, r4
 8010bf6:	4621      	mov	r1, r4
 8010bf8:	4638      	mov	r0, r7
 8010bfa:	f7ff ff0b 	bl	8010a14 <__multiply>
 8010bfe:	6020      	str	r0, [r4, #0]
 8010c00:	f8c0 9000 	str.w	r9, [r0]
 8010c04:	4604      	mov	r4, r0
 8010c06:	e7e4      	b.n	8010bd2 <__pow5mult+0x6a>
 8010c08:	4630      	mov	r0, r6
 8010c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c0e:	bf00      	nop
 8010c10:	08013e88 	.word	0x08013e88
 8010c14:	08013dad 	.word	0x08013dad
 8010c18:	08013e2d 	.word	0x08013e2d

08010c1c <__lshift>:
 8010c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c20:	460c      	mov	r4, r1
 8010c22:	6849      	ldr	r1, [r1, #4]
 8010c24:	6923      	ldr	r3, [r4, #16]
 8010c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c2a:	68a3      	ldr	r3, [r4, #8]
 8010c2c:	4607      	mov	r7, r0
 8010c2e:	4691      	mov	r9, r2
 8010c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c34:	f108 0601 	add.w	r6, r8, #1
 8010c38:	42b3      	cmp	r3, r6
 8010c3a:	db0b      	blt.n	8010c54 <__lshift+0x38>
 8010c3c:	4638      	mov	r0, r7
 8010c3e:	f7ff fddf 	bl	8010800 <_Balloc>
 8010c42:	4605      	mov	r5, r0
 8010c44:	b948      	cbnz	r0, 8010c5a <__lshift+0x3e>
 8010c46:	4602      	mov	r2, r0
 8010c48:	4b28      	ldr	r3, [pc, #160]	@ (8010cec <__lshift+0xd0>)
 8010c4a:	4829      	ldr	r0, [pc, #164]	@ (8010cf0 <__lshift+0xd4>)
 8010c4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010c50:	f000 fb84 	bl	801135c <__assert_func>
 8010c54:	3101      	adds	r1, #1
 8010c56:	005b      	lsls	r3, r3, #1
 8010c58:	e7ee      	b.n	8010c38 <__lshift+0x1c>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	f100 0114 	add.w	r1, r0, #20
 8010c60:	f100 0210 	add.w	r2, r0, #16
 8010c64:	4618      	mov	r0, r3
 8010c66:	4553      	cmp	r3, sl
 8010c68:	db33      	blt.n	8010cd2 <__lshift+0xb6>
 8010c6a:	6920      	ldr	r0, [r4, #16]
 8010c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c70:	f104 0314 	add.w	r3, r4, #20
 8010c74:	f019 091f 	ands.w	r9, r9, #31
 8010c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010c80:	d02b      	beq.n	8010cda <__lshift+0xbe>
 8010c82:	f1c9 0e20 	rsb	lr, r9, #32
 8010c86:	468a      	mov	sl, r1
 8010c88:	2200      	movs	r2, #0
 8010c8a:	6818      	ldr	r0, [r3, #0]
 8010c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8010c90:	4310      	orrs	r0, r2
 8010c92:	f84a 0b04 	str.w	r0, [sl], #4
 8010c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c9a:	459c      	cmp	ip, r3
 8010c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010ca0:	d8f3      	bhi.n	8010c8a <__lshift+0x6e>
 8010ca2:	ebac 0304 	sub.w	r3, ip, r4
 8010ca6:	3b15      	subs	r3, #21
 8010ca8:	f023 0303 	bic.w	r3, r3, #3
 8010cac:	3304      	adds	r3, #4
 8010cae:	f104 0015 	add.w	r0, r4, #21
 8010cb2:	4584      	cmp	ip, r0
 8010cb4:	bf38      	it	cc
 8010cb6:	2304      	movcc	r3, #4
 8010cb8:	50ca      	str	r2, [r1, r3]
 8010cba:	b10a      	cbz	r2, 8010cc0 <__lshift+0xa4>
 8010cbc:	f108 0602 	add.w	r6, r8, #2
 8010cc0:	3e01      	subs	r6, #1
 8010cc2:	4638      	mov	r0, r7
 8010cc4:	612e      	str	r6, [r5, #16]
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	f7ff fdda 	bl	8010880 <_Bfree>
 8010ccc:	4628      	mov	r0, r5
 8010cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010cd6:	3301      	adds	r3, #1
 8010cd8:	e7c5      	b.n	8010c66 <__lshift+0x4a>
 8010cda:	3904      	subs	r1, #4
 8010cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ce0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ce4:	459c      	cmp	ip, r3
 8010ce6:	d8f9      	bhi.n	8010cdc <__lshift+0xc0>
 8010ce8:	e7ea      	b.n	8010cc0 <__lshift+0xa4>
 8010cea:	bf00      	nop
 8010cec:	08013e1c 	.word	0x08013e1c
 8010cf0:	08013e2d 	.word	0x08013e2d

08010cf4 <__mcmp>:
 8010cf4:	690a      	ldr	r2, [r1, #16]
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	6900      	ldr	r0, [r0, #16]
 8010cfa:	1a80      	subs	r0, r0, r2
 8010cfc:	b530      	push	{r4, r5, lr}
 8010cfe:	d10e      	bne.n	8010d1e <__mcmp+0x2a>
 8010d00:	3314      	adds	r3, #20
 8010d02:	3114      	adds	r1, #20
 8010d04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010d08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010d0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010d10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010d14:	4295      	cmp	r5, r2
 8010d16:	d003      	beq.n	8010d20 <__mcmp+0x2c>
 8010d18:	d205      	bcs.n	8010d26 <__mcmp+0x32>
 8010d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d1e:	bd30      	pop	{r4, r5, pc}
 8010d20:	42a3      	cmp	r3, r4
 8010d22:	d3f3      	bcc.n	8010d0c <__mcmp+0x18>
 8010d24:	e7fb      	b.n	8010d1e <__mcmp+0x2a>
 8010d26:	2001      	movs	r0, #1
 8010d28:	e7f9      	b.n	8010d1e <__mcmp+0x2a>
	...

08010d2c <__mdiff>:
 8010d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d30:	4689      	mov	r9, r1
 8010d32:	4606      	mov	r6, r0
 8010d34:	4611      	mov	r1, r2
 8010d36:	4648      	mov	r0, r9
 8010d38:	4614      	mov	r4, r2
 8010d3a:	f7ff ffdb 	bl	8010cf4 <__mcmp>
 8010d3e:	1e05      	subs	r5, r0, #0
 8010d40:	d112      	bne.n	8010d68 <__mdiff+0x3c>
 8010d42:	4629      	mov	r1, r5
 8010d44:	4630      	mov	r0, r6
 8010d46:	f7ff fd5b 	bl	8010800 <_Balloc>
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	b928      	cbnz	r0, 8010d5a <__mdiff+0x2e>
 8010d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8010e4c <__mdiff+0x120>)
 8010d50:	f240 2137 	movw	r1, #567	@ 0x237
 8010d54:	483e      	ldr	r0, [pc, #248]	@ (8010e50 <__mdiff+0x124>)
 8010d56:	f000 fb01 	bl	801135c <__assert_func>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010d60:	4610      	mov	r0, r2
 8010d62:	b003      	add	sp, #12
 8010d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d68:	bfbc      	itt	lt
 8010d6a:	464b      	movlt	r3, r9
 8010d6c:	46a1      	movlt	r9, r4
 8010d6e:	4630      	mov	r0, r6
 8010d70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010d74:	bfba      	itte	lt
 8010d76:	461c      	movlt	r4, r3
 8010d78:	2501      	movlt	r5, #1
 8010d7a:	2500      	movge	r5, #0
 8010d7c:	f7ff fd40 	bl	8010800 <_Balloc>
 8010d80:	4602      	mov	r2, r0
 8010d82:	b918      	cbnz	r0, 8010d8c <__mdiff+0x60>
 8010d84:	4b31      	ldr	r3, [pc, #196]	@ (8010e4c <__mdiff+0x120>)
 8010d86:	f240 2145 	movw	r1, #581	@ 0x245
 8010d8a:	e7e3      	b.n	8010d54 <__mdiff+0x28>
 8010d8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010d90:	6926      	ldr	r6, [r4, #16]
 8010d92:	60c5      	str	r5, [r0, #12]
 8010d94:	f109 0310 	add.w	r3, r9, #16
 8010d98:	f109 0514 	add.w	r5, r9, #20
 8010d9c:	f104 0e14 	add.w	lr, r4, #20
 8010da0:	f100 0b14 	add.w	fp, r0, #20
 8010da4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010da8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010dac:	9301      	str	r3, [sp, #4]
 8010dae:	46d9      	mov	r9, fp
 8010db0:	f04f 0c00 	mov.w	ip, #0
 8010db4:	9b01      	ldr	r3, [sp, #4]
 8010db6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010dba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010dbe:	9301      	str	r3, [sp, #4]
 8010dc0:	fa1f f38a 	uxth.w	r3, sl
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	b283      	uxth	r3, r0
 8010dc8:	1acb      	subs	r3, r1, r3
 8010dca:	0c00      	lsrs	r0, r0, #16
 8010dcc:	4463      	add	r3, ip
 8010dce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010dd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010ddc:	4576      	cmp	r6, lr
 8010dde:	f849 3b04 	str.w	r3, [r9], #4
 8010de2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010de6:	d8e5      	bhi.n	8010db4 <__mdiff+0x88>
 8010de8:	1b33      	subs	r3, r6, r4
 8010dea:	3b15      	subs	r3, #21
 8010dec:	f023 0303 	bic.w	r3, r3, #3
 8010df0:	3415      	adds	r4, #21
 8010df2:	3304      	adds	r3, #4
 8010df4:	42a6      	cmp	r6, r4
 8010df6:	bf38      	it	cc
 8010df8:	2304      	movcc	r3, #4
 8010dfa:	441d      	add	r5, r3
 8010dfc:	445b      	add	r3, fp
 8010dfe:	461e      	mov	r6, r3
 8010e00:	462c      	mov	r4, r5
 8010e02:	4544      	cmp	r4, r8
 8010e04:	d30e      	bcc.n	8010e24 <__mdiff+0xf8>
 8010e06:	f108 0103 	add.w	r1, r8, #3
 8010e0a:	1b49      	subs	r1, r1, r5
 8010e0c:	f021 0103 	bic.w	r1, r1, #3
 8010e10:	3d03      	subs	r5, #3
 8010e12:	45a8      	cmp	r8, r5
 8010e14:	bf38      	it	cc
 8010e16:	2100      	movcc	r1, #0
 8010e18:	440b      	add	r3, r1
 8010e1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e1e:	b191      	cbz	r1, 8010e46 <__mdiff+0x11a>
 8010e20:	6117      	str	r7, [r2, #16]
 8010e22:	e79d      	b.n	8010d60 <__mdiff+0x34>
 8010e24:	f854 1b04 	ldr.w	r1, [r4], #4
 8010e28:	46e6      	mov	lr, ip
 8010e2a:	0c08      	lsrs	r0, r1, #16
 8010e2c:	fa1c fc81 	uxtah	ip, ip, r1
 8010e30:	4471      	add	r1, lr
 8010e32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010e36:	b289      	uxth	r1, r1
 8010e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010e3c:	f846 1b04 	str.w	r1, [r6], #4
 8010e40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010e44:	e7dd      	b.n	8010e02 <__mdiff+0xd6>
 8010e46:	3f01      	subs	r7, #1
 8010e48:	e7e7      	b.n	8010e1a <__mdiff+0xee>
 8010e4a:	bf00      	nop
 8010e4c:	08013e1c 	.word	0x08013e1c
 8010e50:	08013e2d 	.word	0x08013e2d

08010e54 <__d2b>:
 8010e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e58:	460f      	mov	r7, r1
 8010e5a:	2101      	movs	r1, #1
 8010e5c:	ec59 8b10 	vmov	r8, r9, d0
 8010e60:	4616      	mov	r6, r2
 8010e62:	f7ff fccd 	bl	8010800 <_Balloc>
 8010e66:	4604      	mov	r4, r0
 8010e68:	b930      	cbnz	r0, 8010e78 <__d2b+0x24>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	4b23      	ldr	r3, [pc, #140]	@ (8010efc <__d2b+0xa8>)
 8010e6e:	4824      	ldr	r0, [pc, #144]	@ (8010f00 <__d2b+0xac>)
 8010e70:	f240 310f 	movw	r1, #783	@ 0x30f
 8010e74:	f000 fa72 	bl	801135c <__assert_func>
 8010e78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010e7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e80:	b10d      	cbz	r5, 8010e86 <__d2b+0x32>
 8010e82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010e86:	9301      	str	r3, [sp, #4]
 8010e88:	f1b8 0300 	subs.w	r3, r8, #0
 8010e8c:	d023      	beq.n	8010ed6 <__d2b+0x82>
 8010e8e:	4668      	mov	r0, sp
 8010e90:	9300      	str	r3, [sp, #0]
 8010e92:	f7ff fd7c 	bl	801098e <__lo0bits>
 8010e96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010e9a:	b1d0      	cbz	r0, 8010ed2 <__d2b+0x7e>
 8010e9c:	f1c0 0320 	rsb	r3, r0, #32
 8010ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ea4:	430b      	orrs	r3, r1
 8010ea6:	40c2      	lsrs	r2, r0
 8010ea8:	6163      	str	r3, [r4, #20]
 8010eaa:	9201      	str	r2, [sp, #4]
 8010eac:	9b01      	ldr	r3, [sp, #4]
 8010eae:	61a3      	str	r3, [r4, #24]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	bf0c      	ite	eq
 8010eb4:	2201      	moveq	r2, #1
 8010eb6:	2202      	movne	r2, #2
 8010eb8:	6122      	str	r2, [r4, #16]
 8010eba:	b1a5      	cbz	r5, 8010ee6 <__d2b+0x92>
 8010ebc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010ec0:	4405      	add	r5, r0
 8010ec2:	603d      	str	r5, [r7, #0]
 8010ec4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010ec8:	6030      	str	r0, [r6, #0]
 8010eca:	4620      	mov	r0, r4
 8010ecc:	b003      	add	sp, #12
 8010ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ed2:	6161      	str	r1, [r4, #20]
 8010ed4:	e7ea      	b.n	8010eac <__d2b+0x58>
 8010ed6:	a801      	add	r0, sp, #4
 8010ed8:	f7ff fd59 	bl	801098e <__lo0bits>
 8010edc:	9b01      	ldr	r3, [sp, #4]
 8010ede:	6163      	str	r3, [r4, #20]
 8010ee0:	3020      	adds	r0, #32
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	e7e8      	b.n	8010eb8 <__d2b+0x64>
 8010ee6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010eea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010eee:	6038      	str	r0, [r7, #0]
 8010ef0:	6918      	ldr	r0, [r3, #16]
 8010ef2:	f7ff fd2d 	bl	8010950 <__hi0bits>
 8010ef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010efa:	e7e5      	b.n	8010ec8 <__d2b+0x74>
 8010efc:	08013e1c 	.word	0x08013e1c
 8010f00:	08013e2d 	.word	0x08013e2d

08010f04 <__ssputs_r>:
 8010f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f08:	688e      	ldr	r6, [r1, #8]
 8010f0a:	461f      	mov	r7, r3
 8010f0c:	42be      	cmp	r6, r7
 8010f0e:	680b      	ldr	r3, [r1, #0]
 8010f10:	4682      	mov	sl, r0
 8010f12:	460c      	mov	r4, r1
 8010f14:	4690      	mov	r8, r2
 8010f16:	d82d      	bhi.n	8010f74 <__ssputs_r+0x70>
 8010f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010f20:	d026      	beq.n	8010f70 <__ssputs_r+0x6c>
 8010f22:	6965      	ldr	r5, [r4, #20]
 8010f24:	6909      	ldr	r1, [r1, #16]
 8010f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f2a:	eba3 0901 	sub.w	r9, r3, r1
 8010f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f32:	1c7b      	adds	r3, r7, #1
 8010f34:	444b      	add	r3, r9
 8010f36:	106d      	asrs	r5, r5, #1
 8010f38:	429d      	cmp	r5, r3
 8010f3a:	bf38      	it	cc
 8010f3c:	461d      	movcc	r5, r3
 8010f3e:	0553      	lsls	r3, r2, #21
 8010f40:	d527      	bpl.n	8010f92 <__ssputs_r+0x8e>
 8010f42:	4629      	mov	r1, r5
 8010f44:	f7fd ffc2 	bl	800eecc <_malloc_r>
 8010f48:	4606      	mov	r6, r0
 8010f4a:	b360      	cbz	r0, 8010fa6 <__ssputs_r+0xa2>
 8010f4c:	6921      	ldr	r1, [r4, #16]
 8010f4e:	464a      	mov	r2, r9
 8010f50:	f000 f9f6 	bl	8011340 <memcpy>
 8010f54:	89a3      	ldrh	r3, [r4, #12]
 8010f56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f5e:	81a3      	strh	r3, [r4, #12]
 8010f60:	6126      	str	r6, [r4, #16]
 8010f62:	6165      	str	r5, [r4, #20]
 8010f64:	444e      	add	r6, r9
 8010f66:	eba5 0509 	sub.w	r5, r5, r9
 8010f6a:	6026      	str	r6, [r4, #0]
 8010f6c:	60a5      	str	r5, [r4, #8]
 8010f6e:	463e      	mov	r6, r7
 8010f70:	42be      	cmp	r6, r7
 8010f72:	d900      	bls.n	8010f76 <__ssputs_r+0x72>
 8010f74:	463e      	mov	r6, r7
 8010f76:	6820      	ldr	r0, [r4, #0]
 8010f78:	4632      	mov	r2, r6
 8010f7a:	4641      	mov	r1, r8
 8010f7c:	f000 f9c6 	bl	801130c <memmove>
 8010f80:	68a3      	ldr	r3, [r4, #8]
 8010f82:	1b9b      	subs	r3, r3, r6
 8010f84:	60a3      	str	r3, [r4, #8]
 8010f86:	6823      	ldr	r3, [r4, #0]
 8010f88:	4433      	add	r3, r6
 8010f8a:	6023      	str	r3, [r4, #0]
 8010f8c:	2000      	movs	r0, #0
 8010f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f92:	462a      	mov	r2, r5
 8010f94:	f000 fa26 	bl	80113e4 <_realloc_r>
 8010f98:	4606      	mov	r6, r0
 8010f9a:	2800      	cmp	r0, #0
 8010f9c:	d1e0      	bne.n	8010f60 <__ssputs_r+0x5c>
 8010f9e:	6921      	ldr	r1, [r4, #16]
 8010fa0:	4650      	mov	r0, sl
 8010fa2:	f7ff fbe3 	bl	801076c <_free_r>
 8010fa6:	230c      	movs	r3, #12
 8010fa8:	f8ca 3000 	str.w	r3, [sl]
 8010fac:	89a3      	ldrh	r3, [r4, #12]
 8010fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fb2:	81a3      	strh	r3, [r4, #12]
 8010fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb8:	e7e9      	b.n	8010f8e <__ssputs_r+0x8a>
	...

08010fbc <_svfiprintf_r>:
 8010fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc0:	4698      	mov	r8, r3
 8010fc2:	898b      	ldrh	r3, [r1, #12]
 8010fc4:	061b      	lsls	r3, r3, #24
 8010fc6:	b09d      	sub	sp, #116	@ 0x74
 8010fc8:	4607      	mov	r7, r0
 8010fca:	460d      	mov	r5, r1
 8010fcc:	4614      	mov	r4, r2
 8010fce:	d510      	bpl.n	8010ff2 <_svfiprintf_r+0x36>
 8010fd0:	690b      	ldr	r3, [r1, #16]
 8010fd2:	b973      	cbnz	r3, 8010ff2 <_svfiprintf_r+0x36>
 8010fd4:	2140      	movs	r1, #64	@ 0x40
 8010fd6:	f7fd ff79 	bl	800eecc <_malloc_r>
 8010fda:	6028      	str	r0, [r5, #0]
 8010fdc:	6128      	str	r0, [r5, #16]
 8010fde:	b930      	cbnz	r0, 8010fee <_svfiprintf_r+0x32>
 8010fe0:	230c      	movs	r3, #12
 8010fe2:	603b      	str	r3, [r7, #0]
 8010fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fe8:	b01d      	add	sp, #116	@ 0x74
 8010fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fee:	2340      	movs	r3, #64	@ 0x40
 8010ff0:	616b      	str	r3, [r5, #20]
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ff6:	2320      	movs	r3, #32
 8010ff8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011000:	2330      	movs	r3, #48	@ 0x30
 8011002:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80111a0 <_svfiprintf_r+0x1e4>
 8011006:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801100a:	f04f 0901 	mov.w	r9, #1
 801100e:	4623      	mov	r3, r4
 8011010:	469a      	mov	sl, r3
 8011012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011016:	b10a      	cbz	r2, 801101c <_svfiprintf_r+0x60>
 8011018:	2a25      	cmp	r2, #37	@ 0x25
 801101a:	d1f9      	bne.n	8011010 <_svfiprintf_r+0x54>
 801101c:	ebba 0b04 	subs.w	fp, sl, r4
 8011020:	d00b      	beq.n	801103a <_svfiprintf_r+0x7e>
 8011022:	465b      	mov	r3, fp
 8011024:	4622      	mov	r2, r4
 8011026:	4629      	mov	r1, r5
 8011028:	4638      	mov	r0, r7
 801102a:	f7ff ff6b 	bl	8010f04 <__ssputs_r>
 801102e:	3001      	adds	r0, #1
 8011030:	f000 80a7 	beq.w	8011182 <_svfiprintf_r+0x1c6>
 8011034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011036:	445a      	add	r2, fp
 8011038:	9209      	str	r2, [sp, #36]	@ 0x24
 801103a:	f89a 3000 	ldrb.w	r3, [sl]
 801103e:	2b00      	cmp	r3, #0
 8011040:	f000 809f 	beq.w	8011182 <_svfiprintf_r+0x1c6>
 8011044:	2300      	movs	r3, #0
 8011046:	f04f 32ff 	mov.w	r2, #4294967295
 801104a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801104e:	f10a 0a01 	add.w	sl, sl, #1
 8011052:	9304      	str	r3, [sp, #16]
 8011054:	9307      	str	r3, [sp, #28]
 8011056:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801105a:	931a      	str	r3, [sp, #104]	@ 0x68
 801105c:	4654      	mov	r4, sl
 801105e:	2205      	movs	r2, #5
 8011060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011064:	484e      	ldr	r0, [pc, #312]	@ (80111a0 <_svfiprintf_r+0x1e4>)
 8011066:	f7ef f93b 	bl	80002e0 <memchr>
 801106a:	9a04      	ldr	r2, [sp, #16]
 801106c:	b9d8      	cbnz	r0, 80110a6 <_svfiprintf_r+0xea>
 801106e:	06d0      	lsls	r0, r2, #27
 8011070:	bf44      	itt	mi
 8011072:	2320      	movmi	r3, #32
 8011074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011078:	0711      	lsls	r1, r2, #28
 801107a:	bf44      	itt	mi
 801107c:	232b      	movmi	r3, #43	@ 0x2b
 801107e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011082:	f89a 3000 	ldrb.w	r3, [sl]
 8011086:	2b2a      	cmp	r3, #42	@ 0x2a
 8011088:	d015      	beq.n	80110b6 <_svfiprintf_r+0xfa>
 801108a:	9a07      	ldr	r2, [sp, #28]
 801108c:	4654      	mov	r4, sl
 801108e:	2000      	movs	r0, #0
 8011090:	f04f 0c0a 	mov.w	ip, #10
 8011094:	4621      	mov	r1, r4
 8011096:	f811 3b01 	ldrb.w	r3, [r1], #1
 801109a:	3b30      	subs	r3, #48	@ 0x30
 801109c:	2b09      	cmp	r3, #9
 801109e:	d94b      	bls.n	8011138 <_svfiprintf_r+0x17c>
 80110a0:	b1b0      	cbz	r0, 80110d0 <_svfiprintf_r+0x114>
 80110a2:	9207      	str	r2, [sp, #28]
 80110a4:	e014      	b.n	80110d0 <_svfiprintf_r+0x114>
 80110a6:	eba0 0308 	sub.w	r3, r0, r8
 80110aa:	fa09 f303 	lsl.w	r3, r9, r3
 80110ae:	4313      	orrs	r3, r2
 80110b0:	9304      	str	r3, [sp, #16]
 80110b2:	46a2      	mov	sl, r4
 80110b4:	e7d2      	b.n	801105c <_svfiprintf_r+0xa0>
 80110b6:	9b03      	ldr	r3, [sp, #12]
 80110b8:	1d19      	adds	r1, r3, #4
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	9103      	str	r1, [sp, #12]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	bfbb      	ittet	lt
 80110c2:	425b      	neglt	r3, r3
 80110c4:	f042 0202 	orrlt.w	r2, r2, #2
 80110c8:	9307      	strge	r3, [sp, #28]
 80110ca:	9307      	strlt	r3, [sp, #28]
 80110cc:	bfb8      	it	lt
 80110ce:	9204      	strlt	r2, [sp, #16]
 80110d0:	7823      	ldrb	r3, [r4, #0]
 80110d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80110d4:	d10a      	bne.n	80110ec <_svfiprintf_r+0x130>
 80110d6:	7863      	ldrb	r3, [r4, #1]
 80110d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80110da:	d132      	bne.n	8011142 <_svfiprintf_r+0x186>
 80110dc:	9b03      	ldr	r3, [sp, #12]
 80110de:	1d1a      	adds	r2, r3, #4
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	9203      	str	r2, [sp, #12]
 80110e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80110e8:	3402      	adds	r4, #2
 80110ea:	9305      	str	r3, [sp, #20]
 80110ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80111b0 <_svfiprintf_r+0x1f4>
 80110f0:	7821      	ldrb	r1, [r4, #0]
 80110f2:	2203      	movs	r2, #3
 80110f4:	4650      	mov	r0, sl
 80110f6:	f7ef f8f3 	bl	80002e0 <memchr>
 80110fa:	b138      	cbz	r0, 801110c <_svfiprintf_r+0x150>
 80110fc:	9b04      	ldr	r3, [sp, #16]
 80110fe:	eba0 000a 	sub.w	r0, r0, sl
 8011102:	2240      	movs	r2, #64	@ 0x40
 8011104:	4082      	lsls	r2, r0
 8011106:	4313      	orrs	r3, r2
 8011108:	3401      	adds	r4, #1
 801110a:	9304      	str	r3, [sp, #16]
 801110c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011110:	4824      	ldr	r0, [pc, #144]	@ (80111a4 <_svfiprintf_r+0x1e8>)
 8011112:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011116:	2206      	movs	r2, #6
 8011118:	f7ef f8e2 	bl	80002e0 <memchr>
 801111c:	2800      	cmp	r0, #0
 801111e:	d036      	beq.n	801118e <_svfiprintf_r+0x1d2>
 8011120:	4b21      	ldr	r3, [pc, #132]	@ (80111a8 <_svfiprintf_r+0x1ec>)
 8011122:	bb1b      	cbnz	r3, 801116c <_svfiprintf_r+0x1b0>
 8011124:	9b03      	ldr	r3, [sp, #12]
 8011126:	3307      	adds	r3, #7
 8011128:	f023 0307 	bic.w	r3, r3, #7
 801112c:	3308      	adds	r3, #8
 801112e:	9303      	str	r3, [sp, #12]
 8011130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011132:	4433      	add	r3, r6
 8011134:	9309      	str	r3, [sp, #36]	@ 0x24
 8011136:	e76a      	b.n	801100e <_svfiprintf_r+0x52>
 8011138:	fb0c 3202 	mla	r2, ip, r2, r3
 801113c:	460c      	mov	r4, r1
 801113e:	2001      	movs	r0, #1
 8011140:	e7a8      	b.n	8011094 <_svfiprintf_r+0xd8>
 8011142:	2300      	movs	r3, #0
 8011144:	3401      	adds	r4, #1
 8011146:	9305      	str	r3, [sp, #20]
 8011148:	4619      	mov	r1, r3
 801114a:	f04f 0c0a 	mov.w	ip, #10
 801114e:	4620      	mov	r0, r4
 8011150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011154:	3a30      	subs	r2, #48	@ 0x30
 8011156:	2a09      	cmp	r2, #9
 8011158:	d903      	bls.n	8011162 <_svfiprintf_r+0x1a6>
 801115a:	2b00      	cmp	r3, #0
 801115c:	d0c6      	beq.n	80110ec <_svfiprintf_r+0x130>
 801115e:	9105      	str	r1, [sp, #20]
 8011160:	e7c4      	b.n	80110ec <_svfiprintf_r+0x130>
 8011162:	fb0c 2101 	mla	r1, ip, r1, r2
 8011166:	4604      	mov	r4, r0
 8011168:	2301      	movs	r3, #1
 801116a:	e7f0      	b.n	801114e <_svfiprintf_r+0x192>
 801116c:	ab03      	add	r3, sp, #12
 801116e:	9300      	str	r3, [sp, #0]
 8011170:	462a      	mov	r2, r5
 8011172:	4b0e      	ldr	r3, [pc, #56]	@ (80111ac <_svfiprintf_r+0x1f0>)
 8011174:	a904      	add	r1, sp, #16
 8011176:	4638      	mov	r0, r7
 8011178:	f7fd ffc2 	bl	800f100 <_printf_float>
 801117c:	1c42      	adds	r2, r0, #1
 801117e:	4606      	mov	r6, r0
 8011180:	d1d6      	bne.n	8011130 <_svfiprintf_r+0x174>
 8011182:	89ab      	ldrh	r3, [r5, #12]
 8011184:	065b      	lsls	r3, r3, #25
 8011186:	f53f af2d 	bmi.w	8010fe4 <_svfiprintf_r+0x28>
 801118a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801118c:	e72c      	b.n	8010fe8 <_svfiprintf_r+0x2c>
 801118e:	ab03      	add	r3, sp, #12
 8011190:	9300      	str	r3, [sp, #0]
 8011192:	462a      	mov	r2, r5
 8011194:	4b05      	ldr	r3, [pc, #20]	@ (80111ac <_svfiprintf_r+0x1f0>)
 8011196:	a904      	add	r1, sp, #16
 8011198:	4638      	mov	r0, r7
 801119a:	f7fe fa39 	bl	800f610 <_printf_i>
 801119e:	e7ed      	b.n	801117c <_svfiprintf_r+0x1c0>
 80111a0:	08013f88 	.word	0x08013f88
 80111a4:	08013f92 	.word	0x08013f92
 80111a8:	0800f101 	.word	0x0800f101
 80111ac:	08010f05 	.word	0x08010f05
 80111b0:	08013f8e 	.word	0x08013f8e

080111b4 <__sflush_r>:
 80111b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80111b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111bc:	0716      	lsls	r6, r2, #28
 80111be:	4605      	mov	r5, r0
 80111c0:	460c      	mov	r4, r1
 80111c2:	d454      	bmi.n	801126e <__sflush_r+0xba>
 80111c4:	684b      	ldr	r3, [r1, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	dc02      	bgt.n	80111d0 <__sflush_r+0x1c>
 80111ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	dd48      	ble.n	8011262 <__sflush_r+0xae>
 80111d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111d2:	2e00      	cmp	r6, #0
 80111d4:	d045      	beq.n	8011262 <__sflush_r+0xae>
 80111d6:	2300      	movs	r3, #0
 80111d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80111dc:	682f      	ldr	r7, [r5, #0]
 80111de:	6a21      	ldr	r1, [r4, #32]
 80111e0:	602b      	str	r3, [r5, #0]
 80111e2:	d030      	beq.n	8011246 <__sflush_r+0x92>
 80111e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80111e6:	89a3      	ldrh	r3, [r4, #12]
 80111e8:	0759      	lsls	r1, r3, #29
 80111ea:	d505      	bpl.n	80111f8 <__sflush_r+0x44>
 80111ec:	6863      	ldr	r3, [r4, #4]
 80111ee:	1ad2      	subs	r2, r2, r3
 80111f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80111f2:	b10b      	cbz	r3, 80111f8 <__sflush_r+0x44>
 80111f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80111f6:	1ad2      	subs	r2, r2, r3
 80111f8:	2300      	movs	r3, #0
 80111fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111fc:	6a21      	ldr	r1, [r4, #32]
 80111fe:	4628      	mov	r0, r5
 8011200:	47b0      	blx	r6
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	89a3      	ldrh	r3, [r4, #12]
 8011206:	d106      	bne.n	8011216 <__sflush_r+0x62>
 8011208:	6829      	ldr	r1, [r5, #0]
 801120a:	291d      	cmp	r1, #29
 801120c:	d82b      	bhi.n	8011266 <__sflush_r+0xb2>
 801120e:	4a2a      	ldr	r2, [pc, #168]	@ (80112b8 <__sflush_r+0x104>)
 8011210:	410a      	asrs	r2, r1
 8011212:	07d6      	lsls	r6, r2, #31
 8011214:	d427      	bmi.n	8011266 <__sflush_r+0xb2>
 8011216:	2200      	movs	r2, #0
 8011218:	6062      	str	r2, [r4, #4]
 801121a:	04d9      	lsls	r1, r3, #19
 801121c:	6922      	ldr	r2, [r4, #16]
 801121e:	6022      	str	r2, [r4, #0]
 8011220:	d504      	bpl.n	801122c <__sflush_r+0x78>
 8011222:	1c42      	adds	r2, r0, #1
 8011224:	d101      	bne.n	801122a <__sflush_r+0x76>
 8011226:	682b      	ldr	r3, [r5, #0]
 8011228:	b903      	cbnz	r3, 801122c <__sflush_r+0x78>
 801122a:	6560      	str	r0, [r4, #84]	@ 0x54
 801122c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801122e:	602f      	str	r7, [r5, #0]
 8011230:	b1b9      	cbz	r1, 8011262 <__sflush_r+0xae>
 8011232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011236:	4299      	cmp	r1, r3
 8011238:	d002      	beq.n	8011240 <__sflush_r+0x8c>
 801123a:	4628      	mov	r0, r5
 801123c:	f7ff fa96 	bl	801076c <_free_r>
 8011240:	2300      	movs	r3, #0
 8011242:	6363      	str	r3, [r4, #52]	@ 0x34
 8011244:	e00d      	b.n	8011262 <__sflush_r+0xae>
 8011246:	2301      	movs	r3, #1
 8011248:	4628      	mov	r0, r5
 801124a:	47b0      	blx	r6
 801124c:	4602      	mov	r2, r0
 801124e:	1c50      	adds	r0, r2, #1
 8011250:	d1c9      	bne.n	80111e6 <__sflush_r+0x32>
 8011252:	682b      	ldr	r3, [r5, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d0c6      	beq.n	80111e6 <__sflush_r+0x32>
 8011258:	2b1d      	cmp	r3, #29
 801125a:	d001      	beq.n	8011260 <__sflush_r+0xac>
 801125c:	2b16      	cmp	r3, #22
 801125e:	d11e      	bne.n	801129e <__sflush_r+0xea>
 8011260:	602f      	str	r7, [r5, #0]
 8011262:	2000      	movs	r0, #0
 8011264:	e022      	b.n	80112ac <__sflush_r+0xf8>
 8011266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801126a:	b21b      	sxth	r3, r3
 801126c:	e01b      	b.n	80112a6 <__sflush_r+0xf2>
 801126e:	690f      	ldr	r7, [r1, #16]
 8011270:	2f00      	cmp	r7, #0
 8011272:	d0f6      	beq.n	8011262 <__sflush_r+0xae>
 8011274:	0793      	lsls	r3, r2, #30
 8011276:	680e      	ldr	r6, [r1, #0]
 8011278:	bf08      	it	eq
 801127a:	694b      	ldreq	r3, [r1, #20]
 801127c:	600f      	str	r7, [r1, #0]
 801127e:	bf18      	it	ne
 8011280:	2300      	movne	r3, #0
 8011282:	eba6 0807 	sub.w	r8, r6, r7
 8011286:	608b      	str	r3, [r1, #8]
 8011288:	f1b8 0f00 	cmp.w	r8, #0
 801128c:	dde9      	ble.n	8011262 <__sflush_r+0xae>
 801128e:	6a21      	ldr	r1, [r4, #32]
 8011290:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011292:	4643      	mov	r3, r8
 8011294:	463a      	mov	r2, r7
 8011296:	4628      	mov	r0, r5
 8011298:	47b0      	blx	r6
 801129a:	2800      	cmp	r0, #0
 801129c:	dc08      	bgt.n	80112b0 <__sflush_r+0xfc>
 801129e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112a6:	81a3      	strh	r3, [r4, #12]
 80112a8:	f04f 30ff 	mov.w	r0, #4294967295
 80112ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b0:	4407      	add	r7, r0
 80112b2:	eba8 0800 	sub.w	r8, r8, r0
 80112b6:	e7e7      	b.n	8011288 <__sflush_r+0xd4>
 80112b8:	dfbffffe 	.word	0xdfbffffe

080112bc <_fflush_r>:
 80112bc:	b538      	push	{r3, r4, r5, lr}
 80112be:	690b      	ldr	r3, [r1, #16]
 80112c0:	4605      	mov	r5, r0
 80112c2:	460c      	mov	r4, r1
 80112c4:	b913      	cbnz	r3, 80112cc <_fflush_r+0x10>
 80112c6:	2500      	movs	r5, #0
 80112c8:	4628      	mov	r0, r5
 80112ca:	bd38      	pop	{r3, r4, r5, pc}
 80112cc:	b118      	cbz	r0, 80112d6 <_fflush_r+0x1a>
 80112ce:	6a03      	ldr	r3, [r0, #32]
 80112d0:	b90b      	cbnz	r3, 80112d6 <_fflush_r+0x1a>
 80112d2:	f7fe fb49 	bl	800f968 <__sinit>
 80112d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d0f3      	beq.n	80112c6 <_fflush_r+0xa>
 80112de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80112e0:	07d0      	lsls	r0, r2, #31
 80112e2:	d404      	bmi.n	80112ee <_fflush_r+0x32>
 80112e4:	0599      	lsls	r1, r3, #22
 80112e6:	d402      	bmi.n	80112ee <_fflush_r+0x32>
 80112e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112ea:	f7fe fc5e 	bl	800fbaa <__retarget_lock_acquire_recursive>
 80112ee:	4628      	mov	r0, r5
 80112f0:	4621      	mov	r1, r4
 80112f2:	f7ff ff5f 	bl	80111b4 <__sflush_r>
 80112f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80112f8:	07da      	lsls	r2, r3, #31
 80112fa:	4605      	mov	r5, r0
 80112fc:	d4e4      	bmi.n	80112c8 <_fflush_r+0xc>
 80112fe:	89a3      	ldrh	r3, [r4, #12]
 8011300:	059b      	lsls	r3, r3, #22
 8011302:	d4e1      	bmi.n	80112c8 <_fflush_r+0xc>
 8011304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011306:	f7fe fc51 	bl	800fbac <__retarget_lock_release_recursive>
 801130a:	e7dd      	b.n	80112c8 <_fflush_r+0xc>

0801130c <memmove>:
 801130c:	4288      	cmp	r0, r1
 801130e:	b510      	push	{r4, lr}
 8011310:	eb01 0402 	add.w	r4, r1, r2
 8011314:	d902      	bls.n	801131c <memmove+0x10>
 8011316:	4284      	cmp	r4, r0
 8011318:	4623      	mov	r3, r4
 801131a:	d807      	bhi.n	801132c <memmove+0x20>
 801131c:	1e43      	subs	r3, r0, #1
 801131e:	42a1      	cmp	r1, r4
 8011320:	d008      	beq.n	8011334 <memmove+0x28>
 8011322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011326:	f803 2f01 	strb.w	r2, [r3, #1]!
 801132a:	e7f8      	b.n	801131e <memmove+0x12>
 801132c:	4402      	add	r2, r0
 801132e:	4601      	mov	r1, r0
 8011330:	428a      	cmp	r2, r1
 8011332:	d100      	bne.n	8011336 <memmove+0x2a>
 8011334:	bd10      	pop	{r4, pc}
 8011336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801133a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801133e:	e7f7      	b.n	8011330 <memmove+0x24>

08011340 <memcpy>:
 8011340:	440a      	add	r2, r1
 8011342:	4291      	cmp	r1, r2
 8011344:	f100 33ff 	add.w	r3, r0, #4294967295
 8011348:	d100      	bne.n	801134c <memcpy+0xc>
 801134a:	4770      	bx	lr
 801134c:	b510      	push	{r4, lr}
 801134e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011356:	4291      	cmp	r1, r2
 8011358:	d1f9      	bne.n	801134e <memcpy+0xe>
 801135a:	bd10      	pop	{r4, pc}

0801135c <__assert_func>:
 801135c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801135e:	4614      	mov	r4, r2
 8011360:	461a      	mov	r2, r3
 8011362:	4b09      	ldr	r3, [pc, #36]	@ (8011388 <__assert_func+0x2c>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4605      	mov	r5, r0
 8011368:	68d8      	ldr	r0, [r3, #12]
 801136a:	b954      	cbnz	r4, 8011382 <__assert_func+0x26>
 801136c:	4b07      	ldr	r3, [pc, #28]	@ (801138c <__assert_func+0x30>)
 801136e:	461c      	mov	r4, r3
 8011370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011374:	9100      	str	r1, [sp, #0]
 8011376:	462b      	mov	r3, r5
 8011378:	4905      	ldr	r1, [pc, #20]	@ (8011390 <__assert_func+0x34>)
 801137a:	f000 f86f 	bl	801145c <fiprintf>
 801137e:	f000 f87f 	bl	8011480 <abort>
 8011382:	4b04      	ldr	r3, [pc, #16]	@ (8011394 <__assert_func+0x38>)
 8011384:	e7f4      	b.n	8011370 <__assert_func+0x14>
 8011386:	bf00      	nop
 8011388:	24000110 	.word	0x24000110
 801138c:	08013fde 	.word	0x08013fde
 8011390:	08013fb0 	.word	0x08013fb0
 8011394:	08013fa3 	.word	0x08013fa3

08011398 <_calloc_r>:
 8011398:	b570      	push	{r4, r5, r6, lr}
 801139a:	fba1 5402 	umull	r5, r4, r1, r2
 801139e:	b93c      	cbnz	r4, 80113b0 <_calloc_r+0x18>
 80113a0:	4629      	mov	r1, r5
 80113a2:	f7fd fd93 	bl	800eecc <_malloc_r>
 80113a6:	4606      	mov	r6, r0
 80113a8:	b928      	cbnz	r0, 80113b6 <_calloc_r+0x1e>
 80113aa:	2600      	movs	r6, #0
 80113ac:	4630      	mov	r0, r6
 80113ae:	bd70      	pop	{r4, r5, r6, pc}
 80113b0:	220c      	movs	r2, #12
 80113b2:	6002      	str	r2, [r0, #0]
 80113b4:	e7f9      	b.n	80113aa <_calloc_r+0x12>
 80113b6:	462a      	mov	r2, r5
 80113b8:	4621      	mov	r1, r4
 80113ba:	f7fe fb6e 	bl	800fa9a <memset>
 80113be:	e7f5      	b.n	80113ac <_calloc_r+0x14>

080113c0 <__ascii_mbtowc>:
 80113c0:	b082      	sub	sp, #8
 80113c2:	b901      	cbnz	r1, 80113c6 <__ascii_mbtowc+0x6>
 80113c4:	a901      	add	r1, sp, #4
 80113c6:	b142      	cbz	r2, 80113da <__ascii_mbtowc+0x1a>
 80113c8:	b14b      	cbz	r3, 80113de <__ascii_mbtowc+0x1e>
 80113ca:	7813      	ldrb	r3, [r2, #0]
 80113cc:	600b      	str	r3, [r1, #0]
 80113ce:	7812      	ldrb	r2, [r2, #0]
 80113d0:	1e10      	subs	r0, r2, #0
 80113d2:	bf18      	it	ne
 80113d4:	2001      	movne	r0, #1
 80113d6:	b002      	add	sp, #8
 80113d8:	4770      	bx	lr
 80113da:	4610      	mov	r0, r2
 80113dc:	e7fb      	b.n	80113d6 <__ascii_mbtowc+0x16>
 80113de:	f06f 0001 	mvn.w	r0, #1
 80113e2:	e7f8      	b.n	80113d6 <__ascii_mbtowc+0x16>

080113e4 <_realloc_r>:
 80113e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e8:	4680      	mov	r8, r0
 80113ea:	4615      	mov	r5, r2
 80113ec:	460c      	mov	r4, r1
 80113ee:	b921      	cbnz	r1, 80113fa <_realloc_r+0x16>
 80113f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113f4:	4611      	mov	r1, r2
 80113f6:	f7fd bd69 	b.w	800eecc <_malloc_r>
 80113fa:	b92a      	cbnz	r2, 8011408 <_realloc_r+0x24>
 80113fc:	f7ff f9b6 	bl	801076c <_free_r>
 8011400:	2400      	movs	r4, #0
 8011402:	4620      	mov	r0, r4
 8011404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011408:	f000 f841 	bl	801148e <_malloc_usable_size_r>
 801140c:	4285      	cmp	r5, r0
 801140e:	4606      	mov	r6, r0
 8011410:	d802      	bhi.n	8011418 <_realloc_r+0x34>
 8011412:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011416:	d8f4      	bhi.n	8011402 <_realloc_r+0x1e>
 8011418:	4629      	mov	r1, r5
 801141a:	4640      	mov	r0, r8
 801141c:	f7fd fd56 	bl	800eecc <_malloc_r>
 8011420:	4607      	mov	r7, r0
 8011422:	2800      	cmp	r0, #0
 8011424:	d0ec      	beq.n	8011400 <_realloc_r+0x1c>
 8011426:	42b5      	cmp	r5, r6
 8011428:	462a      	mov	r2, r5
 801142a:	4621      	mov	r1, r4
 801142c:	bf28      	it	cs
 801142e:	4632      	movcs	r2, r6
 8011430:	f7ff ff86 	bl	8011340 <memcpy>
 8011434:	4621      	mov	r1, r4
 8011436:	4640      	mov	r0, r8
 8011438:	f7ff f998 	bl	801076c <_free_r>
 801143c:	463c      	mov	r4, r7
 801143e:	e7e0      	b.n	8011402 <_realloc_r+0x1e>

08011440 <__ascii_wctomb>:
 8011440:	4603      	mov	r3, r0
 8011442:	4608      	mov	r0, r1
 8011444:	b141      	cbz	r1, 8011458 <__ascii_wctomb+0x18>
 8011446:	2aff      	cmp	r2, #255	@ 0xff
 8011448:	d904      	bls.n	8011454 <__ascii_wctomb+0x14>
 801144a:	228a      	movs	r2, #138	@ 0x8a
 801144c:	601a      	str	r2, [r3, #0]
 801144e:	f04f 30ff 	mov.w	r0, #4294967295
 8011452:	4770      	bx	lr
 8011454:	700a      	strb	r2, [r1, #0]
 8011456:	2001      	movs	r0, #1
 8011458:	4770      	bx	lr
	...

0801145c <fiprintf>:
 801145c:	b40e      	push	{r1, r2, r3}
 801145e:	b503      	push	{r0, r1, lr}
 8011460:	4601      	mov	r1, r0
 8011462:	ab03      	add	r3, sp, #12
 8011464:	4805      	ldr	r0, [pc, #20]	@ (801147c <fiprintf+0x20>)
 8011466:	f853 2b04 	ldr.w	r2, [r3], #4
 801146a:	6800      	ldr	r0, [r0, #0]
 801146c:	9301      	str	r3, [sp, #4]
 801146e:	f000 f83f 	bl	80114f0 <_vfiprintf_r>
 8011472:	b002      	add	sp, #8
 8011474:	f85d eb04 	ldr.w	lr, [sp], #4
 8011478:	b003      	add	sp, #12
 801147a:	4770      	bx	lr
 801147c:	24000110 	.word	0x24000110

08011480 <abort>:
 8011480:	b508      	push	{r3, lr}
 8011482:	2006      	movs	r0, #6
 8011484:	f000 fa08 	bl	8011898 <raise>
 8011488:	2001      	movs	r0, #1
 801148a:	f000 fc0d 	bl	8011ca8 <_exit>

0801148e <_malloc_usable_size_r>:
 801148e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011492:	1f18      	subs	r0, r3, #4
 8011494:	2b00      	cmp	r3, #0
 8011496:	bfbc      	itt	lt
 8011498:	580b      	ldrlt	r3, [r1, r0]
 801149a:	18c0      	addlt	r0, r0, r3
 801149c:	4770      	bx	lr

0801149e <__sfputc_r>:
 801149e:	6893      	ldr	r3, [r2, #8]
 80114a0:	3b01      	subs	r3, #1
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	b410      	push	{r4}
 80114a6:	6093      	str	r3, [r2, #8]
 80114a8:	da08      	bge.n	80114bc <__sfputc_r+0x1e>
 80114aa:	6994      	ldr	r4, [r2, #24]
 80114ac:	42a3      	cmp	r3, r4
 80114ae:	db01      	blt.n	80114b4 <__sfputc_r+0x16>
 80114b0:	290a      	cmp	r1, #10
 80114b2:	d103      	bne.n	80114bc <__sfputc_r+0x1e>
 80114b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114b8:	f000 b932 	b.w	8011720 <__swbuf_r>
 80114bc:	6813      	ldr	r3, [r2, #0]
 80114be:	1c58      	adds	r0, r3, #1
 80114c0:	6010      	str	r0, [r2, #0]
 80114c2:	7019      	strb	r1, [r3, #0]
 80114c4:	4608      	mov	r0, r1
 80114c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114ca:	4770      	bx	lr

080114cc <__sfputs_r>:
 80114cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ce:	4606      	mov	r6, r0
 80114d0:	460f      	mov	r7, r1
 80114d2:	4614      	mov	r4, r2
 80114d4:	18d5      	adds	r5, r2, r3
 80114d6:	42ac      	cmp	r4, r5
 80114d8:	d101      	bne.n	80114de <__sfputs_r+0x12>
 80114da:	2000      	movs	r0, #0
 80114dc:	e007      	b.n	80114ee <__sfputs_r+0x22>
 80114de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e2:	463a      	mov	r2, r7
 80114e4:	4630      	mov	r0, r6
 80114e6:	f7ff ffda 	bl	801149e <__sfputc_r>
 80114ea:	1c43      	adds	r3, r0, #1
 80114ec:	d1f3      	bne.n	80114d6 <__sfputs_r+0xa>
 80114ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080114f0 <_vfiprintf_r>:
 80114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f4:	460d      	mov	r5, r1
 80114f6:	b09d      	sub	sp, #116	@ 0x74
 80114f8:	4614      	mov	r4, r2
 80114fa:	4698      	mov	r8, r3
 80114fc:	4606      	mov	r6, r0
 80114fe:	b118      	cbz	r0, 8011508 <_vfiprintf_r+0x18>
 8011500:	6a03      	ldr	r3, [r0, #32]
 8011502:	b90b      	cbnz	r3, 8011508 <_vfiprintf_r+0x18>
 8011504:	f7fe fa30 	bl	800f968 <__sinit>
 8011508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801150a:	07d9      	lsls	r1, r3, #31
 801150c:	d405      	bmi.n	801151a <_vfiprintf_r+0x2a>
 801150e:	89ab      	ldrh	r3, [r5, #12]
 8011510:	059a      	lsls	r2, r3, #22
 8011512:	d402      	bmi.n	801151a <_vfiprintf_r+0x2a>
 8011514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011516:	f7fe fb48 	bl	800fbaa <__retarget_lock_acquire_recursive>
 801151a:	89ab      	ldrh	r3, [r5, #12]
 801151c:	071b      	lsls	r3, r3, #28
 801151e:	d501      	bpl.n	8011524 <_vfiprintf_r+0x34>
 8011520:	692b      	ldr	r3, [r5, #16]
 8011522:	b99b      	cbnz	r3, 801154c <_vfiprintf_r+0x5c>
 8011524:	4629      	mov	r1, r5
 8011526:	4630      	mov	r0, r6
 8011528:	f000 f938 	bl	801179c <__swsetup_r>
 801152c:	b170      	cbz	r0, 801154c <_vfiprintf_r+0x5c>
 801152e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011530:	07dc      	lsls	r4, r3, #31
 8011532:	d504      	bpl.n	801153e <_vfiprintf_r+0x4e>
 8011534:	f04f 30ff 	mov.w	r0, #4294967295
 8011538:	b01d      	add	sp, #116	@ 0x74
 801153a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153e:	89ab      	ldrh	r3, [r5, #12]
 8011540:	0598      	lsls	r0, r3, #22
 8011542:	d4f7      	bmi.n	8011534 <_vfiprintf_r+0x44>
 8011544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011546:	f7fe fb31 	bl	800fbac <__retarget_lock_release_recursive>
 801154a:	e7f3      	b.n	8011534 <_vfiprintf_r+0x44>
 801154c:	2300      	movs	r3, #0
 801154e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011550:	2320      	movs	r3, #32
 8011552:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011556:	f8cd 800c 	str.w	r8, [sp, #12]
 801155a:	2330      	movs	r3, #48	@ 0x30
 801155c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801170c <_vfiprintf_r+0x21c>
 8011560:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011564:	f04f 0901 	mov.w	r9, #1
 8011568:	4623      	mov	r3, r4
 801156a:	469a      	mov	sl, r3
 801156c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011570:	b10a      	cbz	r2, 8011576 <_vfiprintf_r+0x86>
 8011572:	2a25      	cmp	r2, #37	@ 0x25
 8011574:	d1f9      	bne.n	801156a <_vfiprintf_r+0x7a>
 8011576:	ebba 0b04 	subs.w	fp, sl, r4
 801157a:	d00b      	beq.n	8011594 <_vfiprintf_r+0xa4>
 801157c:	465b      	mov	r3, fp
 801157e:	4622      	mov	r2, r4
 8011580:	4629      	mov	r1, r5
 8011582:	4630      	mov	r0, r6
 8011584:	f7ff ffa2 	bl	80114cc <__sfputs_r>
 8011588:	3001      	adds	r0, #1
 801158a:	f000 80a7 	beq.w	80116dc <_vfiprintf_r+0x1ec>
 801158e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011590:	445a      	add	r2, fp
 8011592:	9209      	str	r2, [sp, #36]	@ 0x24
 8011594:	f89a 3000 	ldrb.w	r3, [sl]
 8011598:	2b00      	cmp	r3, #0
 801159a:	f000 809f 	beq.w	80116dc <_vfiprintf_r+0x1ec>
 801159e:	2300      	movs	r3, #0
 80115a0:	f04f 32ff 	mov.w	r2, #4294967295
 80115a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115a8:	f10a 0a01 	add.w	sl, sl, #1
 80115ac:	9304      	str	r3, [sp, #16]
 80115ae:	9307      	str	r3, [sp, #28]
 80115b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80115b6:	4654      	mov	r4, sl
 80115b8:	2205      	movs	r2, #5
 80115ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115be:	4853      	ldr	r0, [pc, #332]	@ (801170c <_vfiprintf_r+0x21c>)
 80115c0:	f7ee fe8e 	bl	80002e0 <memchr>
 80115c4:	9a04      	ldr	r2, [sp, #16]
 80115c6:	b9d8      	cbnz	r0, 8011600 <_vfiprintf_r+0x110>
 80115c8:	06d1      	lsls	r1, r2, #27
 80115ca:	bf44      	itt	mi
 80115cc:	2320      	movmi	r3, #32
 80115ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115d2:	0713      	lsls	r3, r2, #28
 80115d4:	bf44      	itt	mi
 80115d6:	232b      	movmi	r3, #43	@ 0x2b
 80115d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115dc:	f89a 3000 	ldrb.w	r3, [sl]
 80115e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80115e2:	d015      	beq.n	8011610 <_vfiprintf_r+0x120>
 80115e4:	9a07      	ldr	r2, [sp, #28]
 80115e6:	4654      	mov	r4, sl
 80115e8:	2000      	movs	r0, #0
 80115ea:	f04f 0c0a 	mov.w	ip, #10
 80115ee:	4621      	mov	r1, r4
 80115f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115f4:	3b30      	subs	r3, #48	@ 0x30
 80115f6:	2b09      	cmp	r3, #9
 80115f8:	d94b      	bls.n	8011692 <_vfiprintf_r+0x1a2>
 80115fa:	b1b0      	cbz	r0, 801162a <_vfiprintf_r+0x13a>
 80115fc:	9207      	str	r2, [sp, #28]
 80115fe:	e014      	b.n	801162a <_vfiprintf_r+0x13a>
 8011600:	eba0 0308 	sub.w	r3, r0, r8
 8011604:	fa09 f303 	lsl.w	r3, r9, r3
 8011608:	4313      	orrs	r3, r2
 801160a:	9304      	str	r3, [sp, #16]
 801160c:	46a2      	mov	sl, r4
 801160e:	e7d2      	b.n	80115b6 <_vfiprintf_r+0xc6>
 8011610:	9b03      	ldr	r3, [sp, #12]
 8011612:	1d19      	adds	r1, r3, #4
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	9103      	str	r1, [sp, #12]
 8011618:	2b00      	cmp	r3, #0
 801161a:	bfbb      	ittet	lt
 801161c:	425b      	neglt	r3, r3
 801161e:	f042 0202 	orrlt.w	r2, r2, #2
 8011622:	9307      	strge	r3, [sp, #28]
 8011624:	9307      	strlt	r3, [sp, #28]
 8011626:	bfb8      	it	lt
 8011628:	9204      	strlt	r2, [sp, #16]
 801162a:	7823      	ldrb	r3, [r4, #0]
 801162c:	2b2e      	cmp	r3, #46	@ 0x2e
 801162e:	d10a      	bne.n	8011646 <_vfiprintf_r+0x156>
 8011630:	7863      	ldrb	r3, [r4, #1]
 8011632:	2b2a      	cmp	r3, #42	@ 0x2a
 8011634:	d132      	bne.n	801169c <_vfiprintf_r+0x1ac>
 8011636:	9b03      	ldr	r3, [sp, #12]
 8011638:	1d1a      	adds	r2, r3, #4
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	9203      	str	r2, [sp, #12]
 801163e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011642:	3402      	adds	r4, #2
 8011644:	9305      	str	r3, [sp, #20]
 8011646:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801171c <_vfiprintf_r+0x22c>
 801164a:	7821      	ldrb	r1, [r4, #0]
 801164c:	2203      	movs	r2, #3
 801164e:	4650      	mov	r0, sl
 8011650:	f7ee fe46 	bl	80002e0 <memchr>
 8011654:	b138      	cbz	r0, 8011666 <_vfiprintf_r+0x176>
 8011656:	9b04      	ldr	r3, [sp, #16]
 8011658:	eba0 000a 	sub.w	r0, r0, sl
 801165c:	2240      	movs	r2, #64	@ 0x40
 801165e:	4082      	lsls	r2, r0
 8011660:	4313      	orrs	r3, r2
 8011662:	3401      	adds	r4, #1
 8011664:	9304      	str	r3, [sp, #16]
 8011666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801166a:	4829      	ldr	r0, [pc, #164]	@ (8011710 <_vfiprintf_r+0x220>)
 801166c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011670:	2206      	movs	r2, #6
 8011672:	f7ee fe35 	bl	80002e0 <memchr>
 8011676:	2800      	cmp	r0, #0
 8011678:	d03f      	beq.n	80116fa <_vfiprintf_r+0x20a>
 801167a:	4b26      	ldr	r3, [pc, #152]	@ (8011714 <_vfiprintf_r+0x224>)
 801167c:	bb1b      	cbnz	r3, 80116c6 <_vfiprintf_r+0x1d6>
 801167e:	9b03      	ldr	r3, [sp, #12]
 8011680:	3307      	adds	r3, #7
 8011682:	f023 0307 	bic.w	r3, r3, #7
 8011686:	3308      	adds	r3, #8
 8011688:	9303      	str	r3, [sp, #12]
 801168a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801168c:	443b      	add	r3, r7
 801168e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011690:	e76a      	b.n	8011568 <_vfiprintf_r+0x78>
 8011692:	fb0c 3202 	mla	r2, ip, r2, r3
 8011696:	460c      	mov	r4, r1
 8011698:	2001      	movs	r0, #1
 801169a:	e7a8      	b.n	80115ee <_vfiprintf_r+0xfe>
 801169c:	2300      	movs	r3, #0
 801169e:	3401      	adds	r4, #1
 80116a0:	9305      	str	r3, [sp, #20]
 80116a2:	4619      	mov	r1, r3
 80116a4:	f04f 0c0a 	mov.w	ip, #10
 80116a8:	4620      	mov	r0, r4
 80116aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116ae:	3a30      	subs	r2, #48	@ 0x30
 80116b0:	2a09      	cmp	r2, #9
 80116b2:	d903      	bls.n	80116bc <_vfiprintf_r+0x1cc>
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d0c6      	beq.n	8011646 <_vfiprintf_r+0x156>
 80116b8:	9105      	str	r1, [sp, #20]
 80116ba:	e7c4      	b.n	8011646 <_vfiprintf_r+0x156>
 80116bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80116c0:	4604      	mov	r4, r0
 80116c2:	2301      	movs	r3, #1
 80116c4:	e7f0      	b.n	80116a8 <_vfiprintf_r+0x1b8>
 80116c6:	ab03      	add	r3, sp, #12
 80116c8:	9300      	str	r3, [sp, #0]
 80116ca:	462a      	mov	r2, r5
 80116cc:	4b12      	ldr	r3, [pc, #72]	@ (8011718 <_vfiprintf_r+0x228>)
 80116ce:	a904      	add	r1, sp, #16
 80116d0:	4630      	mov	r0, r6
 80116d2:	f7fd fd15 	bl	800f100 <_printf_float>
 80116d6:	4607      	mov	r7, r0
 80116d8:	1c78      	adds	r0, r7, #1
 80116da:	d1d6      	bne.n	801168a <_vfiprintf_r+0x19a>
 80116dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80116de:	07d9      	lsls	r1, r3, #31
 80116e0:	d405      	bmi.n	80116ee <_vfiprintf_r+0x1fe>
 80116e2:	89ab      	ldrh	r3, [r5, #12]
 80116e4:	059a      	lsls	r2, r3, #22
 80116e6:	d402      	bmi.n	80116ee <_vfiprintf_r+0x1fe>
 80116e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80116ea:	f7fe fa5f 	bl	800fbac <__retarget_lock_release_recursive>
 80116ee:	89ab      	ldrh	r3, [r5, #12]
 80116f0:	065b      	lsls	r3, r3, #25
 80116f2:	f53f af1f 	bmi.w	8011534 <_vfiprintf_r+0x44>
 80116f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116f8:	e71e      	b.n	8011538 <_vfiprintf_r+0x48>
 80116fa:	ab03      	add	r3, sp, #12
 80116fc:	9300      	str	r3, [sp, #0]
 80116fe:	462a      	mov	r2, r5
 8011700:	4b05      	ldr	r3, [pc, #20]	@ (8011718 <_vfiprintf_r+0x228>)
 8011702:	a904      	add	r1, sp, #16
 8011704:	4630      	mov	r0, r6
 8011706:	f7fd ff83 	bl	800f610 <_printf_i>
 801170a:	e7e4      	b.n	80116d6 <_vfiprintf_r+0x1e6>
 801170c:	08013f88 	.word	0x08013f88
 8011710:	08013f92 	.word	0x08013f92
 8011714:	0800f101 	.word	0x0800f101
 8011718:	080114cd 	.word	0x080114cd
 801171c:	08013f8e 	.word	0x08013f8e

08011720 <__swbuf_r>:
 8011720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011722:	460e      	mov	r6, r1
 8011724:	4614      	mov	r4, r2
 8011726:	4605      	mov	r5, r0
 8011728:	b118      	cbz	r0, 8011732 <__swbuf_r+0x12>
 801172a:	6a03      	ldr	r3, [r0, #32]
 801172c:	b90b      	cbnz	r3, 8011732 <__swbuf_r+0x12>
 801172e:	f7fe f91b 	bl	800f968 <__sinit>
 8011732:	69a3      	ldr	r3, [r4, #24]
 8011734:	60a3      	str	r3, [r4, #8]
 8011736:	89a3      	ldrh	r3, [r4, #12]
 8011738:	071a      	lsls	r2, r3, #28
 801173a:	d501      	bpl.n	8011740 <__swbuf_r+0x20>
 801173c:	6923      	ldr	r3, [r4, #16]
 801173e:	b943      	cbnz	r3, 8011752 <__swbuf_r+0x32>
 8011740:	4621      	mov	r1, r4
 8011742:	4628      	mov	r0, r5
 8011744:	f000 f82a 	bl	801179c <__swsetup_r>
 8011748:	b118      	cbz	r0, 8011752 <__swbuf_r+0x32>
 801174a:	f04f 37ff 	mov.w	r7, #4294967295
 801174e:	4638      	mov	r0, r7
 8011750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011752:	6823      	ldr	r3, [r4, #0]
 8011754:	6922      	ldr	r2, [r4, #16]
 8011756:	1a98      	subs	r0, r3, r2
 8011758:	6963      	ldr	r3, [r4, #20]
 801175a:	b2f6      	uxtb	r6, r6
 801175c:	4283      	cmp	r3, r0
 801175e:	4637      	mov	r7, r6
 8011760:	dc05      	bgt.n	801176e <__swbuf_r+0x4e>
 8011762:	4621      	mov	r1, r4
 8011764:	4628      	mov	r0, r5
 8011766:	f7ff fda9 	bl	80112bc <_fflush_r>
 801176a:	2800      	cmp	r0, #0
 801176c:	d1ed      	bne.n	801174a <__swbuf_r+0x2a>
 801176e:	68a3      	ldr	r3, [r4, #8]
 8011770:	3b01      	subs	r3, #1
 8011772:	60a3      	str	r3, [r4, #8]
 8011774:	6823      	ldr	r3, [r4, #0]
 8011776:	1c5a      	adds	r2, r3, #1
 8011778:	6022      	str	r2, [r4, #0]
 801177a:	701e      	strb	r6, [r3, #0]
 801177c:	6962      	ldr	r2, [r4, #20]
 801177e:	1c43      	adds	r3, r0, #1
 8011780:	429a      	cmp	r2, r3
 8011782:	d004      	beq.n	801178e <__swbuf_r+0x6e>
 8011784:	89a3      	ldrh	r3, [r4, #12]
 8011786:	07db      	lsls	r3, r3, #31
 8011788:	d5e1      	bpl.n	801174e <__swbuf_r+0x2e>
 801178a:	2e0a      	cmp	r6, #10
 801178c:	d1df      	bne.n	801174e <__swbuf_r+0x2e>
 801178e:	4621      	mov	r1, r4
 8011790:	4628      	mov	r0, r5
 8011792:	f7ff fd93 	bl	80112bc <_fflush_r>
 8011796:	2800      	cmp	r0, #0
 8011798:	d0d9      	beq.n	801174e <__swbuf_r+0x2e>
 801179a:	e7d6      	b.n	801174a <__swbuf_r+0x2a>

0801179c <__swsetup_r>:
 801179c:	b538      	push	{r3, r4, r5, lr}
 801179e:	4b29      	ldr	r3, [pc, #164]	@ (8011844 <__swsetup_r+0xa8>)
 80117a0:	4605      	mov	r5, r0
 80117a2:	6818      	ldr	r0, [r3, #0]
 80117a4:	460c      	mov	r4, r1
 80117a6:	b118      	cbz	r0, 80117b0 <__swsetup_r+0x14>
 80117a8:	6a03      	ldr	r3, [r0, #32]
 80117aa:	b90b      	cbnz	r3, 80117b0 <__swsetup_r+0x14>
 80117ac:	f7fe f8dc 	bl	800f968 <__sinit>
 80117b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117b4:	0719      	lsls	r1, r3, #28
 80117b6:	d422      	bmi.n	80117fe <__swsetup_r+0x62>
 80117b8:	06da      	lsls	r2, r3, #27
 80117ba:	d407      	bmi.n	80117cc <__swsetup_r+0x30>
 80117bc:	2209      	movs	r2, #9
 80117be:	602a      	str	r2, [r5, #0]
 80117c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117c4:	81a3      	strh	r3, [r4, #12]
 80117c6:	f04f 30ff 	mov.w	r0, #4294967295
 80117ca:	e033      	b.n	8011834 <__swsetup_r+0x98>
 80117cc:	0758      	lsls	r0, r3, #29
 80117ce:	d512      	bpl.n	80117f6 <__swsetup_r+0x5a>
 80117d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117d2:	b141      	cbz	r1, 80117e6 <__swsetup_r+0x4a>
 80117d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117d8:	4299      	cmp	r1, r3
 80117da:	d002      	beq.n	80117e2 <__swsetup_r+0x46>
 80117dc:	4628      	mov	r0, r5
 80117de:	f7fe ffc5 	bl	801076c <_free_r>
 80117e2:	2300      	movs	r3, #0
 80117e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80117e6:	89a3      	ldrh	r3, [r4, #12]
 80117e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80117ec:	81a3      	strh	r3, [r4, #12]
 80117ee:	2300      	movs	r3, #0
 80117f0:	6063      	str	r3, [r4, #4]
 80117f2:	6923      	ldr	r3, [r4, #16]
 80117f4:	6023      	str	r3, [r4, #0]
 80117f6:	89a3      	ldrh	r3, [r4, #12]
 80117f8:	f043 0308 	orr.w	r3, r3, #8
 80117fc:	81a3      	strh	r3, [r4, #12]
 80117fe:	6923      	ldr	r3, [r4, #16]
 8011800:	b94b      	cbnz	r3, 8011816 <__swsetup_r+0x7a>
 8011802:	89a3      	ldrh	r3, [r4, #12]
 8011804:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801180c:	d003      	beq.n	8011816 <__swsetup_r+0x7a>
 801180e:	4621      	mov	r1, r4
 8011810:	4628      	mov	r0, r5
 8011812:	f000 f883 	bl	801191c <__smakebuf_r>
 8011816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801181a:	f013 0201 	ands.w	r2, r3, #1
 801181e:	d00a      	beq.n	8011836 <__swsetup_r+0x9a>
 8011820:	2200      	movs	r2, #0
 8011822:	60a2      	str	r2, [r4, #8]
 8011824:	6962      	ldr	r2, [r4, #20]
 8011826:	4252      	negs	r2, r2
 8011828:	61a2      	str	r2, [r4, #24]
 801182a:	6922      	ldr	r2, [r4, #16]
 801182c:	b942      	cbnz	r2, 8011840 <__swsetup_r+0xa4>
 801182e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011832:	d1c5      	bne.n	80117c0 <__swsetup_r+0x24>
 8011834:	bd38      	pop	{r3, r4, r5, pc}
 8011836:	0799      	lsls	r1, r3, #30
 8011838:	bf58      	it	pl
 801183a:	6962      	ldrpl	r2, [r4, #20]
 801183c:	60a2      	str	r2, [r4, #8]
 801183e:	e7f4      	b.n	801182a <__swsetup_r+0x8e>
 8011840:	2000      	movs	r0, #0
 8011842:	e7f7      	b.n	8011834 <__swsetup_r+0x98>
 8011844:	24000110 	.word	0x24000110

08011848 <_raise_r>:
 8011848:	291f      	cmp	r1, #31
 801184a:	b538      	push	{r3, r4, r5, lr}
 801184c:	4605      	mov	r5, r0
 801184e:	460c      	mov	r4, r1
 8011850:	d904      	bls.n	801185c <_raise_r+0x14>
 8011852:	2316      	movs	r3, #22
 8011854:	6003      	str	r3, [r0, #0]
 8011856:	f04f 30ff 	mov.w	r0, #4294967295
 801185a:	bd38      	pop	{r3, r4, r5, pc}
 801185c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801185e:	b112      	cbz	r2, 8011866 <_raise_r+0x1e>
 8011860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011864:	b94b      	cbnz	r3, 801187a <_raise_r+0x32>
 8011866:	4628      	mov	r0, r5
 8011868:	f000 f830 	bl	80118cc <_getpid_r>
 801186c:	4622      	mov	r2, r4
 801186e:	4601      	mov	r1, r0
 8011870:	4628      	mov	r0, r5
 8011872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011876:	f000 b817 	b.w	80118a8 <_kill_r>
 801187a:	2b01      	cmp	r3, #1
 801187c:	d00a      	beq.n	8011894 <_raise_r+0x4c>
 801187e:	1c59      	adds	r1, r3, #1
 8011880:	d103      	bne.n	801188a <_raise_r+0x42>
 8011882:	2316      	movs	r3, #22
 8011884:	6003      	str	r3, [r0, #0]
 8011886:	2001      	movs	r0, #1
 8011888:	e7e7      	b.n	801185a <_raise_r+0x12>
 801188a:	2100      	movs	r1, #0
 801188c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011890:	4620      	mov	r0, r4
 8011892:	4798      	blx	r3
 8011894:	2000      	movs	r0, #0
 8011896:	e7e0      	b.n	801185a <_raise_r+0x12>

08011898 <raise>:
 8011898:	4b02      	ldr	r3, [pc, #8]	@ (80118a4 <raise+0xc>)
 801189a:	4601      	mov	r1, r0
 801189c:	6818      	ldr	r0, [r3, #0]
 801189e:	f7ff bfd3 	b.w	8011848 <_raise_r>
 80118a2:	bf00      	nop
 80118a4:	24000110 	.word	0x24000110

080118a8 <_kill_r>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	4d07      	ldr	r5, [pc, #28]	@ (80118c8 <_kill_r+0x20>)
 80118ac:	2300      	movs	r3, #0
 80118ae:	4604      	mov	r4, r0
 80118b0:	4608      	mov	r0, r1
 80118b2:	4611      	mov	r1, r2
 80118b4:	602b      	str	r3, [r5, #0]
 80118b6:	f7fb fa7c 	bl	800cdb2 <_kill>
 80118ba:	1c43      	adds	r3, r0, #1
 80118bc:	d102      	bne.n	80118c4 <_kill_r+0x1c>
 80118be:	682b      	ldr	r3, [r5, #0]
 80118c0:	b103      	cbz	r3, 80118c4 <_kill_r+0x1c>
 80118c2:	6023      	str	r3, [r4, #0]
 80118c4:	bd38      	pop	{r3, r4, r5, pc}
 80118c6:	bf00      	nop
 80118c8:	24002848 	.word	0x24002848

080118cc <_getpid_r>:
 80118cc:	f7fb ba63 	b.w	800cd96 <_getpid>

080118d0 <__swhatbuf_r>:
 80118d0:	b570      	push	{r4, r5, r6, lr}
 80118d2:	460c      	mov	r4, r1
 80118d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118d8:	2900      	cmp	r1, #0
 80118da:	b096      	sub	sp, #88	@ 0x58
 80118dc:	4615      	mov	r5, r2
 80118de:	461e      	mov	r6, r3
 80118e0:	da0d      	bge.n	80118fe <__swhatbuf_r+0x2e>
 80118e2:	89a3      	ldrh	r3, [r4, #12]
 80118e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80118e8:	f04f 0100 	mov.w	r1, #0
 80118ec:	bf14      	ite	ne
 80118ee:	2340      	movne	r3, #64	@ 0x40
 80118f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80118f4:	2000      	movs	r0, #0
 80118f6:	6031      	str	r1, [r6, #0]
 80118f8:	602b      	str	r3, [r5, #0]
 80118fa:	b016      	add	sp, #88	@ 0x58
 80118fc:	bd70      	pop	{r4, r5, r6, pc}
 80118fe:	466a      	mov	r2, sp
 8011900:	f000 f848 	bl	8011994 <_fstat_r>
 8011904:	2800      	cmp	r0, #0
 8011906:	dbec      	blt.n	80118e2 <__swhatbuf_r+0x12>
 8011908:	9901      	ldr	r1, [sp, #4]
 801190a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801190e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011912:	4259      	negs	r1, r3
 8011914:	4159      	adcs	r1, r3
 8011916:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801191a:	e7eb      	b.n	80118f4 <__swhatbuf_r+0x24>

0801191c <__smakebuf_r>:
 801191c:	898b      	ldrh	r3, [r1, #12]
 801191e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011920:	079d      	lsls	r5, r3, #30
 8011922:	4606      	mov	r6, r0
 8011924:	460c      	mov	r4, r1
 8011926:	d507      	bpl.n	8011938 <__smakebuf_r+0x1c>
 8011928:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801192c:	6023      	str	r3, [r4, #0]
 801192e:	6123      	str	r3, [r4, #16]
 8011930:	2301      	movs	r3, #1
 8011932:	6163      	str	r3, [r4, #20]
 8011934:	b003      	add	sp, #12
 8011936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011938:	ab01      	add	r3, sp, #4
 801193a:	466a      	mov	r2, sp
 801193c:	f7ff ffc8 	bl	80118d0 <__swhatbuf_r>
 8011940:	9f00      	ldr	r7, [sp, #0]
 8011942:	4605      	mov	r5, r0
 8011944:	4639      	mov	r1, r7
 8011946:	4630      	mov	r0, r6
 8011948:	f7fd fac0 	bl	800eecc <_malloc_r>
 801194c:	b948      	cbnz	r0, 8011962 <__smakebuf_r+0x46>
 801194e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011952:	059a      	lsls	r2, r3, #22
 8011954:	d4ee      	bmi.n	8011934 <__smakebuf_r+0x18>
 8011956:	f023 0303 	bic.w	r3, r3, #3
 801195a:	f043 0302 	orr.w	r3, r3, #2
 801195e:	81a3      	strh	r3, [r4, #12]
 8011960:	e7e2      	b.n	8011928 <__smakebuf_r+0xc>
 8011962:	89a3      	ldrh	r3, [r4, #12]
 8011964:	6020      	str	r0, [r4, #0]
 8011966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801196a:	81a3      	strh	r3, [r4, #12]
 801196c:	9b01      	ldr	r3, [sp, #4]
 801196e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011972:	b15b      	cbz	r3, 801198c <__smakebuf_r+0x70>
 8011974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011978:	4630      	mov	r0, r6
 801197a:	f000 f81d 	bl	80119b8 <_isatty_r>
 801197e:	b128      	cbz	r0, 801198c <__smakebuf_r+0x70>
 8011980:	89a3      	ldrh	r3, [r4, #12]
 8011982:	f023 0303 	bic.w	r3, r3, #3
 8011986:	f043 0301 	orr.w	r3, r3, #1
 801198a:	81a3      	strh	r3, [r4, #12]
 801198c:	89a3      	ldrh	r3, [r4, #12]
 801198e:	431d      	orrs	r5, r3
 8011990:	81a5      	strh	r5, [r4, #12]
 8011992:	e7cf      	b.n	8011934 <__smakebuf_r+0x18>

08011994 <_fstat_r>:
 8011994:	b538      	push	{r3, r4, r5, lr}
 8011996:	4d07      	ldr	r5, [pc, #28]	@ (80119b4 <_fstat_r+0x20>)
 8011998:	2300      	movs	r3, #0
 801199a:	4604      	mov	r4, r0
 801199c:	4608      	mov	r0, r1
 801199e:	4611      	mov	r1, r2
 80119a0:	602b      	str	r3, [r5, #0]
 80119a2:	f7fb f9f1 	bl	800cd88 <_fstat>
 80119a6:	1c43      	adds	r3, r0, #1
 80119a8:	d102      	bne.n	80119b0 <_fstat_r+0x1c>
 80119aa:	682b      	ldr	r3, [r5, #0]
 80119ac:	b103      	cbz	r3, 80119b0 <_fstat_r+0x1c>
 80119ae:	6023      	str	r3, [r4, #0]
 80119b0:	bd38      	pop	{r3, r4, r5, pc}
 80119b2:	bf00      	nop
 80119b4:	24002848 	.word	0x24002848

080119b8 <_isatty_r>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4d06      	ldr	r5, [pc, #24]	@ (80119d4 <_isatty_r+0x1c>)
 80119bc:	2300      	movs	r3, #0
 80119be:	4604      	mov	r4, r0
 80119c0:	4608      	mov	r0, r1
 80119c2:	602b      	str	r3, [r5, #0]
 80119c4:	f7fb f9ee 	bl	800cda4 <_isatty>
 80119c8:	1c43      	adds	r3, r0, #1
 80119ca:	d102      	bne.n	80119d2 <_isatty_r+0x1a>
 80119cc:	682b      	ldr	r3, [r5, #0]
 80119ce:	b103      	cbz	r3, 80119d2 <_isatty_r+0x1a>
 80119d0:	6023      	str	r3, [r4, #0]
 80119d2:	bd38      	pop	{r3, r4, r5, pc}
 80119d4:	24002848 	.word	0x24002848

080119d8 <fmod>:
 80119d8:	b508      	push	{r3, lr}
 80119da:	ed2d 8b04 	vpush	{d8-d9}
 80119de:	eeb0 9b40 	vmov.f64	d9, d0
 80119e2:	eeb0 8b41 	vmov.f64	d8, d1
 80119e6:	f000 f83f 	bl	8011a68 <__ieee754_fmod>
 80119ea:	eeb4 9b48 	vcmp.f64	d9, d8
 80119ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f2:	d60c      	bvs.n	8011a0e <fmod+0x36>
 80119f4:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8011a18 <fmod+0x40>
 80119f8:	eeb4 8b49 	vcmp.f64	d8, d9
 80119fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a00:	d105      	bne.n	8011a0e <fmod+0x36>
 8011a02:	f000 f93d 	bl	8011c80 <__errno>
 8011a06:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011a0a:	2321      	movs	r3, #33	@ 0x21
 8011a0c:	6003      	str	r3, [r0, #0]
 8011a0e:	ecbd 8b04 	vpop	{d8-d9}
 8011a12:	bd08      	pop	{r3, pc}
 8011a14:	f3af 8000 	nop.w
	...

08011a20 <sqrt>:
 8011a20:	b508      	push	{r3, lr}
 8011a22:	ed2d 8b04 	vpush	{d8-d9}
 8011a26:	eeb0 8b40 	vmov.f64	d8, d0
 8011a2a:	f000 f819 	bl	8011a60 <__ieee754_sqrt>
 8011a2e:	eeb4 8b48 	vcmp.f64	d8, d8
 8011a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a36:	d60c      	bvs.n	8011a52 <sqrt+0x32>
 8011a38:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8011a58 <sqrt+0x38>
 8011a3c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a44:	d505      	bpl.n	8011a52 <sqrt+0x32>
 8011a46:	f000 f91b 	bl	8011c80 <__errno>
 8011a4a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011a4e:	2321      	movs	r3, #33	@ 0x21
 8011a50:	6003      	str	r3, [r0, #0]
 8011a52:	ecbd 8b04 	vpop	{d8-d9}
 8011a56:	bd08      	pop	{r3, pc}
	...

08011a60 <__ieee754_sqrt>:
 8011a60:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011a64:	4770      	bx	lr
	...

08011a68 <__ieee754_fmod>:
 8011a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a6c:	ed8d 1b00 	vstr	d1, [sp]
 8011a70:	e9dd 6500 	ldrd	r6, r5, [sp]
 8011a74:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8011a78:	ea56 0307 	orrs.w	r3, r6, r7
 8011a7c:	46b6      	mov	lr, r6
 8011a7e:	d00d      	beq.n	8011a9c <__ieee754_fmod+0x34>
 8011a80:	ee10 ca90 	vmov	ip, s1
 8011a84:	4b78      	ldr	r3, [pc, #480]	@ (8011c68 <__ieee754_fmod+0x200>)
 8011a86:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8011a8a:	4598      	cmp	r8, r3
 8011a8c:	d806      	bhi.n	8011a9c <__ieee754_fmod+0x34>
 8011a8e:	4273      	negs	r3, r6
 8011a90:	4a76      	ldr	r2, [pc, #472]	@ (8011c6c <__ieee754_fmod+0x204>)
 8011a92:	4333      	orrs	r3, r6
 8011a94:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	d908      	bls.n	8011aae <__ieee754_fmod+0x46>
 8011a9c:	ed9d 7b00 	vldr	d7, [sp]
 8011aa0:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011aa4:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011aa8:	b003      	add	sp, #12
 8011aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011aae:	ee10 9a10 	vmov	r9, s0
 8011ab2:	45b8      	cmp	r8, r7
 8011ab4:	4649      	mov	r1, r9
 8011ab6:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8011aba:	dc09      	bgt.n	8011ad0 <__ieee754_fmod+0x68>
 8011abc:	dbf4      	blt.n	8011aa8 <__ieee754_fmod+0x40>
 8011abe:	454e      	cmp	r6, r9
 8011ac0:	d8f2      	bhi.n	8011aa8 <__ieee754_fmod+0x40>
 8011ac2:	d105      	bne.n	8011ad0 <__ieee754_fmod+0x68>
 8011ac4:	4b6a      	ldr	r3, [pc, #424]	@ (8011c70 <__ieee754_fmod+0x208>)
 8011ac6:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8011aca:	ed93 0b00 	vldr	d0, [r3]
 8011ace:	e7eb      	b.n	8011aa8 <__ieee754_fmod+0x40>
 8011ad0:	4a66      	ldr	r2, [pc, #408]	@ (8011c6c <__ieee754_fmod+0x204>)
 8011ad2:	ea1c 0f02 	tst.w	ip, r2
 8011ad6:	d14a      	bne.n	8011b6e <__ieee754_fmod+0x106>
 8011ad8:	f1b8 0f00 	cmp.w	r8, #0
 8011adc:	d13f      	bne.n	8011b5e <__ieee754_fmod+0xf6>
 8011ade:	4865      	ldr	r0, [pc, #404]	@ (8011c74 <__ieee754_fmod+0x20c>)
 8011ae0:	464b      	mov	r3, r9
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	dc38      	bgt.n	8011b58 <__ieee754_fmod+0xf0>
 8011ae6:	4215      	tst	r5, r2
 8011ae8:	d150      	bne.n	8011b8c <__ieee754_fmod+0x124>
 8011aea:	2f00      	cmp	r7, #0
 8011aec:	d147      	bne.n	8011b7e <__ieee754_fmod+0x116>
 8011aee:	4a61      	ldr	r2, [pc, #388]	@ (8011c74 <__ieee754_fmod+0x20c>)
 8011af0:	4633      	mov	r3, r6
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	dc40      	bgt.n	8011b78 <__ieee754_fmod+0x110>
 8011af6:	4b60      	ldr	r3, [pc, #384]	@ (8011c78 <__ieee754_fmod+0x210>)
 8011af8:	4298      	cmp	r0, r3
 8011afa:	db4b      	blt.n	8011b94 <__ieee754_fmod+0x12c>
 8011afc:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8011b00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011b04:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8011c78 <__ieee754_fmod+0x210>
 8011b08:	4562      	cmp	r2, ip
 8011b0a:	db58      	blt.n	8011bbe <__ieee754_fmod+0x156>
 8011b0c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011b10:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8011b14:	1a80      	subs	r0, r0, r2
 8011b16:	1b5e      	subs	r6, r3, r5
 8011b18:	eba1 070e 	sub.w	r7, r1, lr
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	d164      	bne.n	8011bea <__ieee754_fmod+0x182>
 8011b20:	4571      	cmp	r1, lr
 8011b22:	bf38      	it	cc
 8011b24:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8011b28:	2e00      	cmp	r6, #0
 8011b2a:	bfa4      	itt	ge
 8011b2c:	4639      	movge	r1, r7
 8011b2e:	4633      	movge	r3, r6
 8011b30:	ea53 0001 	orrs.w	r0, r3, r1
 8011b34:	d0c6      	beq.n	8011ac4 <__ieee754_fmod+0x5c>
 8011b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011b3a:	db6b      	blt.n	8011c14 <__ieee754_fmod+0x1ac>
 8011b3c:	484e      	ldr	r0, [pc, #312]	@ (8011c78 <__ieee754_fmod+0x210>)
 8011b3e:	4282      	cmp	r2, r0
 8011b40:	db6e      	blt.n	8011c20 <__ieee754_fmod+0x1b8>
 8011b42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011b46:	4323      	orrs	r3, r4
 8011b48:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8011b4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011b50:	460c      	mov	r4, r1
 8011b52:	ec45 4b10 	vmov	d0, r4, r5
 8011b56:	e7a7      	b.n	8011aa8 <__ieee754_fmod+0x40>
 8011b58:	3801      	subs	r0, #1
 8011b5a:	005b      	lsls	r3, r3, #1
 8011b5c:	e7c1      	b.n	8011ae2 <__ieee754_fmod+0x7a>
 8011b5e:	4846      	ldr	r0, [pc, #280]	@ (8011c78 <__ieee754_fmod+0x210>)
 8011b60:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	ddbe      	ble.n	8011ae6 <__ieee754_fmod+0x7e>
 8011b68:	3801      	subs	r0, #1
 8011b6a:	005b      	lsls	r3, r3, #1
 8011b6c:	e7fa      	b.n	8011b64 <__ieee754_fmod+0xfc>
 8011b6e:	ea4f 5028 	mov.w	r0, r8, asr #20
 8011b72:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8011b76:	e7b6      	b.n	8011ae6 <__ieee754_fmod+0x7e>
 8011b78:	3a01      	subs	r2, #1
 8011b7a:	005b      	lsls	r3, r3, #1
 8011b7c:	e7b9      	b.n	8011af2 <__ieee754_fmod+0x8a>
 8011b7e:	4a3e      	ldr	r2, [pc, #248]	@ (8011c78 <__ieee754_fmod+0x210>)
 8011b80:	02fb      	lsls	r3, r7, #11
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	ddb7      	ble.n	8011af6 <__ieee754_fmod+0x8e>
 8011b86:	3a01      	subs	r2, #1
 8011b88:	005b      	lsls	r3, r3, #1
 8011b8a:	e7fa      	b.n	8011b82 <__ieee754_fmod+0x11a>
 8011b8c:	153a      	asrs	r2, r7, #20
 8011b8e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011b92:	e7b0      	b.n	8011af6 <__ieee754_fmod+0x8e>
 8011b94:	eba3 0c00 	sub.w	ip, r3, r0
 8011b98:	f1bc 0f1f 	cmp.w	ip, #31
 8011b9c:	dc09      	bgt.n	8011bb2 <__ieee754_fmod+0x14a>
 8011b9e:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8011ba2:	fa08 f10c 	lsl.w	r1, r8, ip
 8011ba6:	fa29 f303 	lsr.w	r3, r9, r3
 8011baa:	430b      	orrs	r3, r1
 8011bac:	fa09 f10c 	lsl.w	r1, r9, ip
 8011bb0:	e7a8      	b.n	8011b04 <__ieee754_fmod+0x9c>
 8011bb2:	4b32      	ldr	r3, [pc, #200]	@ (8011c7c <__ieee754_fmod+0x214>)
 8011bb4:	1a1b      	subs	r3, r3, r0
 8011bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8011bba:	2100      	movs	r1, #0
 8011bbc:	e7a2      	b.n	8011b04 <__ieee754_fmod+0x9c>
 8011bbe:	ebac 0c02 	sub.w	ip, ip, r2
 8011bc2:	f1bc 0f1f 	cmp.w	ip, #31
 8011bc6:	dc09      	bgt.n	8011bdc <__ieee754_fmod+0x174>
 8011bc8:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8011bcc:	fa07 f70c 	lsl.w	r7, r7, ip
 8011bd0:	fa26 f505 	lsr.w	r5, r6, r5
 8011bd4:	433d      	orrs	r5, r7
 8011bd6:	fa06 fe0c 	lsl.w	lr, r6, ip
 8011bda:	e79b      	b.n	8011b14 <__ieee754_fmod+0xac>
 8011bdc:	4d27      	ldr	r5, [pc, #156]	@ (8011c7c <__ieee754_fmod+0x214>)
 8011bde:	1aad      	subs	r5, r5, r2
 8011be0:	fa06 f505 	lsl.w	r5, r6, r5
 8011be4:	f04f 0e00 	mov.w	lr, #0
 8011be8:	e794      	b.n	8011b14 <__ieee754_fmod+0xac>
 8011bea:	4571      	cmp	r1, lr
 8011bec:	bf38      	it	cc
 8011bee:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8011bf2:	2e00      	cmp	r6, #0
 8011bf4:	da05      	bge.n	8011c02 <__ieee754_fmod+0x19a>
 8011bf6:	0fce      	lsrs	r6, r1, #31
 8011bf8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8011bfc:	0049      	lsls	r1, r1, #1
 8011bfe:	3801      	subs	r0, #1
 8011c00:	e789      	b.n	8011b16 <__ieee754_fmod+0xae>
 8011c02:	ea56 0307 	orrs.w	r3, r6, r7
 8011c06:	f43f af5d 	beq.w	8011ac4 <__ieee754_fmod+0x5c>
 8011c0a:	0ffb      	lsrs	r3, r7, #31
 8011c0c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8011c10:	0079      	lsls	r1, r7, #1
 8011c12:	e7f4      	b.n	8011bfe <__ieee754_fmod+0x196>
 8011c14:	0fc8      	lsrs	r0, r1, #31
 8011c16:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011c1a:	0049      	lsls	r1, r1, #1
 8011c1c:	3a01      	subs	r2, #1
 8011c1e:	e78a      	b.n	8011b36 <__ieee754_fmod+0xce>
 8011c20:	1a80      	subs	r0, r0, r2
 8011c22:	2814      	cmp	r0, #20
 8011c24:	dc0c      	bgt.n	8011c40 <__ieee754_fmod+0x1d8>
 8011c26:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011c2a:	fa03 f202 	lsl.w	r2, r3, r2
 8011c2e:	40c1      	lsrs	r1, r0
 8011c30:	430a      	orrs	r2, r1
 8011c32:	4103      	asrs	r3, r0
 8011c34:	ea43 0104 	orr.w	r1, r3, r4
 8011c38:	4610      	mov	r0, r2
 8011c3a:	ec41 0b10 	vmov	d0, r0, r1
 8011c3e:	e733      	b.n	8011aa8 <__ieee754_fmod+0x40>
 8011c40:	281f      	cmp	r0, #31
 8011c42:	dc07      	bgt.n	8011c54 <__ieee754_fmod+0x1ec>
 8011c44:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011c48:	40c1      	lsrs	r1, r0
 8011c4a:	fa03 f202 	lsl.w	r2, r3, r2
 8011c4e:	430a      	orrs	r2, r1
 8011c50:	4623      	mov	r3, r4
 8011c52:	e7ef      	b.n	8011c34 <__ieee754_fmod+0x1cc>
 8011c54:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8011c58:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8011c5c:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8011c60:	32e2      	adds	r2, #226	@ 0xe2
 8011c62:	fa43 f202 	asr.w	r2, r3, r2
 8011c66:	e7f3      	b.n	8011c50 <__ieee754_fmod+0x1e8>
 8011c68:	7fefffff 	.word	0x7fefffff
 8011c6c:	7ff00000 	.word	0x7ff00000
 8011c70:	080140e0 	.word	0x080140e0
 8011c74:	fffffbed 	.word	0xfffffbed
 8011c78:	fffffc02 	.word	0xfffffc02
 8011c7c:	fffffbe2 	.word	0xfffffbe2

08011c80 <__errno>:
 8011c80:	4b01      	ldr	r3, [pc, #4]	@ (8011c88 <__errno+0x8>)
 8011c82:	6818      	ldr	r0, [r3, #0]
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop
 8011c88:	24000110 	.word	0x24000110

08011c8c <_sbrk>:
 8011c8c:	4a04      	ldr	r2, [pc, #16]	@ (8011ca0 <_sbrk+0x14>)
 8011c8e:	6811      	ldr	r1, [r2, #0]
 8011c90:	4603      	mov	r3, r0
 8011c92:	b909      	cbnz	r1, 8011c98 <_sbrk+0xc>
 8011c94:	4903      	ldr	r1, [pc, #12]	@ (8011ca4 <_sbrk+0x18>)
 8011c96:	6011      	str	r1, [r2, #0]
 8011c98:	6810      	ldr	r0, [r2, #0]
 8011c9a:	4403      	add	r3, r0
 8011c9c:	6013      	str	r3, [r2, #0]
 8011c9e:	4770      	bx	lr
 8011ca0:	24002850 	.word	0x24002850
 8011ca4:	24002858 	.word	0x24002858

08011ca8 <_exit>:
 8011ca8:	e7fe      	b.n	8011ca8 <_exit>
	...

08011cac <_init>:
 8011cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cae:	bf00      	nop
 8011cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cb2:	bc08      	pop	{r3}
 8011cb4:	469e      	mov	lr, r3
 8011cb6:	4770      	bx	lr

08011cb8 <_fini>:
 8011cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cba:	bf00      	nop
 8011cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cbe:	bc08      	pop	{r3}
 8011cc0:	469e      	mov	lr, r3
 8011cc2:	4770      	bx	lr
